
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002939c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004164  08029640  08029640  0002a640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000194ba  0802d7a4  0802d7a4  0002e7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000808  08046c60  08046c60  00047c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 003fe1c0  90000000  90000000  0004a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000150  903fe1c0  903fe1c0  004481c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08047468  08047468  00448310  2**0
                  CONTENTS
  8 .ARM          00000008  08047468  08047468  00048468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08047470  08047470  00448310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08047470  08047470  00048470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0804748c  0804748c  0004848c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08047494  00049000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  080475d0  00049140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  080476d0  00049240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00028ec8  24000340  080477d0  00049340  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24029208  080477d0  0004a208  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  00448310  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00449000  2**2
                  ALLOC
 19 .debug_info   0011e14a  00000000  00000000  0044833e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001b054  00000000  00000000  00566488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004178  00000000  00000000  005814e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000063e7  00000000  00000000  00585658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00053eb1  00000000  00000000  0058ba3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00076ad8  00000000  00000000  005df8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001e7a19  00000000  00000000  006563c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0083dde1  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b360  00000000  00000000  0083dea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0002b8a3  00000000  00000000  00849204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000084  00000000  00000000  00874aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08029624 	.word	0x08029624

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	08029624 	.word	0x08029624

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f010 bbe8 	b.w	8010ed0 <vTaskSetApplicationTaskTag>
 8000700:	08002011 	.word	0x08002011

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f028 f9f3 	bl	8028af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f028 f9ee 	bl	8028af8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f00c fd7b 	bl	800d218 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f00d f846 	bl	800d814 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f00d fbd0 	bl	800df4c <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f00d fad8 	bl	800dd6c <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f028 f98e 	bl	8028af8 <memset>
  HAL_MPU_Disable();
 80007dc:	f009 feec 	bl	800a5b8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f009 feff 	bl	800a5f4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f009 fef7 	bl	800a5f4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f009 fee9 	bl	800a5f4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f009 feda 	bl	800a5f4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f009 fecf 	bl	800a5f4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f009 fec2 	bl	800a5f4 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f009 feaf 	bl	800a5d4 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f00c fd95 	bl	800d454 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f009 f91b 	bl	8009b78 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f009 f8c2 	bl	8009ad0 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f009 fed2 	bl	800a70e <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f00a fdac 	bl	800b4d4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f009 fd9f 	bl	800a4c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f00a fda4 	bl	800b4d4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f009 fd97 	bl	800a4c0 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f028 f8ae 	bl	8028af8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f028 f8a9 	bl	8028af8 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f028 f8a4 	bl	8028af8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f028 f89f 	bl	8028af8 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f009 ffe8 	bl	800a9a8 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f00a fa44 	bl	800ae80 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f00a f9f6 	bl	800ae06 <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f00a f9de 	bl	800ade4 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f00a fbad 	bl	800b192 <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f009 ff4e 	bl	800a8e2 <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f00a f96c 	bl	800ad7c <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f00a f8e1 	bl	800ac98 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240003c8 	.word	0x240003c8
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24000608 	.word	0x24000608
 8000afc:	58021800 	.word	0x58021800
 8000b00:	240005ec 	.word	0x240005ec
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f00a f8b4 	bl	800ac76 <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f027 ffeb 	bl	8028af8 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f00c f829 	bl	800cbb8 <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f00c f8d5 	bl	800cd50 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f00a f9c7 	bl	800af4c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f008 fd76 	bl	80096c0 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f008 f9e1 	bl	8008fa0 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f00a f9e3 	bl	800afb2 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f00a f8b9 	bl	800ad7c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f00c f8cb 	bl	800cdac <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f009 fd0d 	bl	800a64c <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f00b f9a3 	bl	800bf88 <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00e fbe0 	bl	800f414 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00e fc07 	bl	800f46c <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00e fc00 	bl	800f46c <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00e fbe2 	bl	800f438 <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	240005ec 	.word	0x240005ec
 8000c7c:	24000414 	.word	0x24000414
 8000c80:	2400035c 	.word	0x2400035c
 8000c84:	08009aa1 	.word	0x08009aa1
 8000c88:	2400036c 	.word	0x2400036c
 8000c8c:	08001d11 	.word	0x08001d11
 8000c90:	08001d49 	.word	0x08001d49
 8000c94:	24000670 	.word	0x24000670
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24000594 	.word	0x24000594
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	080296bc 	.word	0x080296bc
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	24000390 	.word	0x24000390
 8000cb0:	08029698 	.word	0x08029698
 8000cb4:	080038b5 	.word	0x080038b5
 8000cb8:	2400038c 	.word	0x2400038c
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f027 ff16 	bl	8028af8 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f00a fb7e 	bl	800b4d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f00a fb79 	bl	800b4d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f00a fb73 	bl	800b4d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f00a f9df 	bl	800b1c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f00a f9d5 	bl	800b1c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f00a f9cd 	bl	800b1c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f00a f9c5 	bl	800b1c0 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f009 fb5d 	bl	800a514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f009 fb8c 	bl	800a578 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f00d ffe3 	bl	800ee74 <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f009 f819 	bl	8009eec <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f009 f864 	bl	8009f88 <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f009 fab8 	bl	800a440 <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f00a faff 	bl	800b4f0 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f00a fb09 	bl	800b50c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24000394 	.word	0x24000394
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f009 bab0 	b.w	800a49c <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f009 bad1 	b.w	800a514 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f009 fa9f 	bl	800a514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f009 bacb 	b.w	800a578 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f027 fd7c 	bl	8028af8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f027 fd77 	bl	8028af8 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f00d fa1b 	bl	800e458 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f00a f8a6 	bl	800b1c0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f009 fa4b 	bl	800a514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f009 fa7a 	bl	800a578 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f00b fec6 	bl	800ce82 <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f00b ff4c 	bl	800cf9e <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f00b fe9a 	bl	800ce82 <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f00b ff20 	bl	800cf9e <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f009 f9d1 	bl	800a514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f009 b9fd 	b.w	800a578 <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24000528 	.word	0x24000528
 8001190:	520001c0 	.word	0x520001c0
 8001194:	240004bc 	.word	0x240004bc
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f027 fca6 	bl	8028af8 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f00d f93e 	bl	800e458 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f009 f987 	bl	800a514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f009 f9b6 	bl	800a578 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f027 fc68 	bl	8028af8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f027 fc63 	bl	8028af8 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f00d f906 	bl	800e458 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f009 ff5f 	bl	800b1c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f009 ff55 	bl	800b1c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f009 ff4b 	bl	800b1c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f009 ff40 	bl	800b1c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f009 ff36 	bl	800b1c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f009 ff2c 	bl	800b1c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f009 ff21 	bl	800b1c0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f027 fba5 	bl	8028af8 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f027 fb9b 	bl	8028af8 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f00d f843 	bl	800e458 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f009 fed8 	bl	800b1c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f009 fece 	bl	800b1c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f009 fec3 	bl	800b1c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f009 feb8 	bl	800b1c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f009 fead 	bl	800b1c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f009 fea2 	bl	800b1c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f009 fe97 	bl	800b1c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f009 fe8d 	bl	800b1c0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000698 	.word	0x24000698
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f009 ff4c 	bl	800b390 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f009 ff48 	bl	800b390 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f009 ff43 	bl	800b390 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f009 ff3e 	bl	800b390 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f009 ff39 	bl	800b390 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f009 ff34 	bl	800b390 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f009 ff2f 	bl	800b390 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f009 bf29 	b.w	800b390 <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24000694 	.word	0x24000694
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f008 ffc9 	bl	800a514 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f008 fff8 	bl	800a578 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f00c fe3b 	bl	800e224 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f00c fe13 	bl	800e1dc <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f00d fe44 	bl	800f260 <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f00d fcf1 	bl	800efc4 <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f00c fdfa 	bl	800e1dc <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	2400069c 	.word	0x2400069c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f00d bd1b 	b.w	800f048 <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	2400069c 	.word	0x2400069c

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f00b bb3c 	b.w	800cc96 <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24000414 	.word	0x24000414

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f009 b8b1 	b.w	800a78c <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24000608 	.word	0x24000608

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f00b b9e1 	b.w	800c9f8 <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24000594 	.word	0x24000594

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f00b fd32 	bl	800d0a8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f00b bd2d 	b.w	800d0a8 <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	240004bc 	.word	0x240004bc
 8001654:	24000528 	.word	0x24000528

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f009 ba9a 	b.w	800ab92 <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	240005ec 	.word	0x240005ec

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f027 faf9 	bl	8028c60 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f027 faf1 	bl	8028c60 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f027 fab6 	bl	8028c60 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	240006e8 	.word	0x240006e8
 8001708:	24029208 	.word	0x24029208
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f008 fe22 	bl	800a360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f027 fa93 	bl	8028c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	08047494 	.word	0x08047494
  ldr r2, =_sbss
 800175c:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001760:	24029208 	.word	0x24029208

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fd19 	bl	80031a0 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bc9b 	b.w	80030ac <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bd15 	b.w	80031a4 <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	240006ec 	.word	0x240006ec

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f00c fcd0 	bl	800e198 <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f00c fb05 	bl	800de08 <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f00d fd2b 	bl	800f260 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f00d bb9d 	b.w	800ef50 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f00c fce1 	bl	800e1dc <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	240006ec 	.word	0x240006ec
 8001828:	0802c518 	.word	0x0802c518

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f026 fb4d 	bl	8027ed0 <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f008 fd18 	bl	800a2a8 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24000748 	.word	0x24000748
 800188c:	24000738 	.word	0x24000738

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f026 fb1b 	bl	8027ed0 <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f008 fc65 	bl	800a188 <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f026 fe73 	bl	80285c0 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24000744 	.word	0x24000744
 80018e0:	24000748 	.word	0x24000748
 80018e4:	08029708 	.word	0x08029708
 80018e8:	0802971b 	.word	0x0802971b
 80018ec:	08029745 	.word	0x08029745

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f009 bde3 	b.w	800b4d4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2400074c 	.word	0x2400074c
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f009 bdb3 	b.w	800b4d4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2400074c 	.word	0x2400074c
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f009 bd8d 	b.w	800b4de <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f009 fd67 	bl	800b4c8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	2400074c 	.word	0x2400074c

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a5c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a5e:	3900      	subs	r1, #0
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a62:	bf18      	it	ne
 8001a64:	2101      	movne	r1, #1
 8001a66:	7019      	strb	r1, [r3, #0]
    }
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	240284e7 	.word	0x240284e7

08001a70 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a76:	b10b      	cbz	r3, 8001a7c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4718      	bx	r3
        }
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4718      	bx	r3

08001a8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	24000770 	.word	0x24000770

08001a98 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a98:	4770      	bx	lr

08001a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a9a:	f001 bc80 	b.w	800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a9e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a9e:	f001 bc0f 	b.w	80032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aa2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aa2:	f001 bde1 	b.w	8003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aa6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aa6:	f001 bdd3 	b.w	8003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001aac <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ab0:	f001 fd96 	bl	80035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ab4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ab8:	b113      	cbz	r3, 8001ac0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ac8:	f001 bc02 	b.w	80032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001acc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ad0:	f011 fedc 	bl	801388c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ae0:	4718      	bx	r3

08001ae2 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001ae6:	f011 fa67 	bl	8012fb8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001aea:	6860      	ldr	r0, [r4, #4]
 8001aec:	6803      	ldr	r3, [r0, #0]
    }
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001af6:	f011 b934 	b.w	8012d62 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001afa <_ZN11TouchGFXHALD0Ev>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	217c      	movs	r1, #124	@ 0x7c
 8001b00:	f026 f9e6 	bl	8027ed0 <_ZdlPvj>
 8001b04:	4620      	mov	r0, r4
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b0e:	f011 b965 	b.w	8012ddc <_ZN8touchgfx3HAL10beginFrameEv>
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c

08001b18 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b1c:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b1e:	f001 fbff 	bl	8003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b22:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b24:	4628      	mov	r0, r5
 8001b26:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b2a:	f7ff fe3b 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b2e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b30:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b32:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	24000760 	.word	0x24000760

08001b3c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b3c:	6803      	ldr	r3, [r0, #0]
{
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4798      	blx	r3
    enableInterrupts();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b50:	f000 ff5c 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2329      	movs	r3, #41	@ 0x29
 8001b60:	2215      	movs	r2, #21
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f009 fa24 	bl	800afb2 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b6a:	f000 ff4f 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4620      	mov	r0, r4
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4798      	blx	r3
    for (;;)
 8001b76:	e7f8      	b.n	8001b6a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b78:	240005ec 	.word	0x240005ec

08001b7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b84:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b88:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d009      	beq.n	8001ba2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b8e:	b93a      	cbnz	r2, 8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ba0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d0fc      	beq.n	8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001baa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bb0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e7f3      	b.n	8001b9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bb6:	bf00      	nop
 8001bb8:	240284e0 	.word	0x240284e0
 8001bbc:	240284de 	.word	0x240284de
 8001bc0:	240284dc 	.word	0x240284dc

08001bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d803      	bhi.n	8001bd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d905      	bls.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bd8:	219e      	movs	r1, #158	@ 0x9e
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bde:	f026 fcef 	bl	80285c0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001be4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001be8:	801a      	strh	r2, [r3, #0]
    }
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	240284dc 	.word	0x240284dc
 8001bf0:	240284de 	.word	0x240284de
 8001bf4:	080297c4 	.word	0x080297c4
 8001bf8:	08029827 	.word	0x08029827
 8001bfc:	0802986a 	.word	0x0802986a
 8001c00:	240284e2 	.word	0x240284e2
 8001c04:	240284e4 	.word	0x240284e4

08001c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c0e:	b118      	cbz	r0, 8001c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4718      	bx	r3
    }
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c24:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c26:	b935      	cbnz	r5, 8001c36 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c2a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c32:	f026 fcc5 	bl	80285c0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c36:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3a:	3a00      	subs	r2, #0
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c44:	6803      	ldr	r3, [r0, #0]
}
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4718      	bx	r3
 8001c50:	24000770 	.word	0x24000770
 8001c54:	080298bd 	.word	0x080298bd
 8001c58:	080298f5 	.word	0x080298f5
 8001c5c:	0802986a 	.word	0x0802986a
 8001c60:	240284e6 	.word	0x240284e6

08001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c64:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c68:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c6e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c70:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c76:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c78:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c7e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c84:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c8a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c8c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c8e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c92:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c9c:	3520      	adds	r5, #32
          buttonController(0),
 8001c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001ca6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001caa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cae:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cb2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	6782      	str	r2, [r0, #120]	@ 0x78
 8001cbc:	b2ad      	uxth	r5, r5
        instance = this;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc0:	42b5      	cmp	r5, r6
        instance = this;
 8001cc2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cc6:	8015      	strh	r5, [r2, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cca:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ccc:	bf28      	it	cs
 8001cce:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cd2:	bf38      	it	cc
 8001cd4:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd6:	8016      	strh	r6, [r2, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cda:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cde:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001ce6:	6003      	str	r3, [r0, #0]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	01000001 	.word	0x01000001
 8001cf0:	01010000 	.word	0x01010000
 8001cf4:	240284e8 	.word	0x240284e8
 8001cf8:	240284dc 	.word	0x240284dc
 8001cfc:	240284e2 	.word	0x240284e2
 8001d00:	240284de 	.word	0x240284de
 8001d04:	240284e4 	.word	0x240284e4
 8001d08:	240284e0 	.word	0x240284e0
 8001d0c:	0802994c 	.word	0x0802994c

08001d10 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d10:	2b01      	cmp	r3, #1
    {
 8001d12:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d14:	d80e      	bhi.n	8001d34 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	2215      	movs	r2, #21
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d22:	f009 f946 	bl	800afb2 <HAL_DSI_ShortWrite>
 8001d26:	b118      	cbz	r0, 8001d30 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d28:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7fb      	b.n	8001d2c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d34:	e9cd 1200 	strd	r1, r2, [sp]
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2239      	movs	r2, #57	@ 0x39
 8001d3c:	4801      	ldr	r0, [pc, #4]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d3e:	f009 f949 	bl	800afd4 <HAL_DSI_LongWrite>
 8001d42:	e7f0      	b.n	8001d26 <DSI_IO_Write+0x16>
 8001d44:	240005ec 	.word	0x240005ec

08001d48 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d4e:	2106      	movs	r1, #6
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4601      	mov	r1, r0
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <DSI_IO_Read+0x24>)
 8001d56:	f009 f99d 	bl	800b094 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d5a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d5c:	bf14      	ite	ne
 8001d5e:	f06f 0007 	mvnne.w	r0, #7
 8001d62:	2000      	moveq	r0, #0
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	240005ec 	.word	0x240005ec

08001d70 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d72:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d76:	4c0b      	ldr	r4, [pc, #44]	@ (8001da4 <LCD_ReqTear+0x34>)
 8001d78:	2239      	movs	r2, #57	@ 0x39
 8001d7a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	4620      	mov	r0, r4
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2344      	movs	r3, #68	@ 0x44
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f009 f922 	bl	800afd4 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	2335      	movs	r3, #53	@ 0x35
 8001d94:	2215      	movs	r2, #21
 8001d96:	4620      	mov	r0, r4
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	f009 f90a 	bl	800afb2 <HAL_DSI_ShortWrite>
    }
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	240005ec 	.word	0x240005ec

08001da8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001da8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001daa:	f7ff ffe1 	bl	8001d70 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	240005ec 	.word	0x240005ec
 8001de4:	50001000 	.word	0x50001000

08001de8 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LCD_ReqEnable+0x20>)
    {
 8001dea:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	b939      	cbnz	r1, 8001e00 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001df0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001df4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001df6:	2329      	movs	r3, #41	@ 0x29
 8001df8:	2215      	movs	r2, #21
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	f009 f8d9 	bl	800afb2 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e00:	b003      	add	sp, #12
 8001e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e06:	bf00      	nop
 8001e08:	2400075c 	.word	0x2400075c
 8001e0c:	240005ec 	.word	0x240005ec

08001e10 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e12:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	232a      	movs	r3, #42	@ 0x2a
 8001e18:	2239      	movs	r2, #57	@ 0x39
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <LCD_SetUpdateRegionLeft+0x20>)
 8001e22:	f009 f8d7 	bl	800afd4 <HAL_DSI_LongWrite>
    }
 8001e26:	b003      	add	sp, #12
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	24000008 	.word	0x24000008
 8001e30:	240005ec 	.word	0x240005ec

08001e34 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionRight+0x20>)
 8001e46:	f009 f8c5 	bl	800afd4 <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	240005ec 	.word	0x240005ec

08001e58 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e5a:	4d14      	ldr	r5, [pc, #80]	@ (8001eac <HAL_DSI_TearingEffectCallback+0x54>)
 8001e5c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd46 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e64:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e66:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e70:	f000 fdc0 	bl	80029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e76:	682a      	ldr	r2, [r5, #0]
 8001e78:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e80:	b173      	cbz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
 8001e82:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb4 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8a:	b94b      	cbnz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e8e:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e90:	f7ff ffbe 	bl	8001e10 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f009 f87c 	bl	800af92 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea0:	2000      	movs	r0, #0
    }
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea6:	f7ff bd53 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001eaa:	bf00      	nop
 8001eac:	240284e8 	.word	0x240284e8
 8001eb0:	2400000c 	.word	0x2400000c
 8001eb4:	24000778 	.word	0x24000778
 8001eb8:	24000774 	.word	0x24000774

08001ebc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ec0:	4e48      	ldr	r6, [pc, #288]	@ (8001fe4 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ec6:	7833      	ldrb	r3, [r6, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8088 	beq.w	8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ece:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002008 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ed2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800200c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001ed6:	f8d9 5000 	ldr.w	r5, [r9]
 8001eda:	4f43      	ldr	r7, [pc, #268]	@ (8001fe8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d13e      	bne.n	8001f5e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001ee2:	4e42      	ldr	r6, [pc, #264]	@ (8001fec <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001ee4:	f008 faec 	bl	800a4c0 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f02:	f002 0208 	and.w	r2, r2, #8
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f0e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f14:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f16:	4e37      	ldr	r6, [pc, #220]	@ (8001ff4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f18:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f1a:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f1c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f20:	4836      	ldr	r0, [pc, #216]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f22:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f26:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f28:	f041 0101 	orr.w	r1, r1, #1
 8001f2c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f48:	f7ff ff74 	bl	8001e34 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f4c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f4e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f50:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f54:	b005      	add	sp, #20
 8001f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f5a:	f009 b81a 	b.w	800af92 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f62:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f6a:	4c25      	ldr	r4, [pc, #148]	@ (8002000 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f74:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f78:	f002 0208 	and.w	r2, r2, #8
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f80:	f8d8 2000 	ldr.w	r2, [r8]
 8001f84:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f8a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f8c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f90:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f9a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f9e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fa0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fa2:	f041 0101 	orr.w	r1, r1, #1
 8001fa6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fa8:	9503      	str	r5, [sp, #12]
 8001faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	f7ff fcc5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fc6:	f7ff ff0f 	bl	8001de8 <LCD_ReqEnable>
        return instance;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001fcc:	7035      	strb	r5, [r6, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001fd0:	b128      	cbz	r0, 8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
    }
 8001fd6:	b005      	add	sp, #20
 8001fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4718      	bx	r3
 8001fde:	b005      	add	sp, #20
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	24000778 	.word	0x24000778
 8001fe8:	24000770 	.word	0x24000770
 8001fec:	01b201e2 	.word	0x01b201e2
 8001ff0:	50001000 	.word	0x50001000
 8001ff4:	019201e3 	.word	0x019201e3
 8001ff8:	01920003 	.word	0x01920003
 8001ffc:	09c004b3 	.word	0x09c004b3
 8002000:	019201e2 	.word	0x019201e2
 8002004:	240284e8 	.word	0x240284e8
 8002008:	24000774 	.word	0x24000774
 800200c:	24000414 	.word	0x24000414

08002010 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002010:	4601      	mov	r1, r0
 8002012:	b508      	push	{r3, lr}
        return instance;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <IdleTaskHook+0x14>)
 8002016:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002018:	b101      	cbz	r1, 800201c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800201a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800201c:	f011 fc50 	bl	80138c0 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002020:	2001      	movs	r0, #1
 8002022:	bd08      	pop	{r3, pc}
 8002024:	240284e8 	.word	0x240284e8

08002028 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002032:	601a      	str	r2, [r3, #0]

}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	24000760 	.word	0x24000760
 800203c:	080296e8 	.word	0x080296e8

08002040 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002040:	6940      	ldr	r0, [r0, #20]
 8002042:	4770      	bx	lr

08002044 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002044:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002048:	4770      	bx	lr

0800204a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800204a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800204c:	b923      	cbnz	r3, 8002058 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800204e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002050:	3800      	subs	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800205c:	6880      	ldr	r0, [r0, #8]
 800205e:	4770      	bx	lr

08002060 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002060:	4770      	bx	lr

08002062 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002062:	3004      	adds	r0, #4
{
 8002064:	b510      	push	{r4, lr}
 8002066:	460c      	mov	r4, r1
    *data = videoInfo;
 8002068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002074:	b508      	push	{r3, lr}
    assert(0);
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002078:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002080:	f026 fa9e 	bl	80285c0 <__assert_func>
 8002084:	08029a1c 	.word	0x08029a1c
 8002088:	0802c02b 	.word	0x0802c02b
 800208c:	08029a77 	.word	0x08029a77

08002090 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	2148      	movs	r1, #72	@ 0x48
 8002096:	f025 ff1b 	bl	8027ed0 <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020a0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020a6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020b6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ba:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020be:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020c2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f00d fa8a 	bl	800f5e8 <osSemaphoreNew>
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	08029cc0 	.word	0x08029cc0
 80020e0:	24000798 	.word	0x24000798

080020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80020e4:	b410      	push	{r4}
 80020e6:	460c      	mov	r4, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
    if (reader != 0)
 80020ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020ee:	b13b      	cbz	r3, 8002100 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80020f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80020f4:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80020f6:	4420      	add	r0, r4
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80020fc:	f026 bd04 	b.w	8028b08 <strncmp>
        src = (const char*)movieData + offset;
 8002100:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002102:	e7f8      	b.n	80020f6 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002104 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002104:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002106:	b510      	push	{r4, lr}
    if (reader != 0)
 8002108:	b173      	cbz	r3, 8002128 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800210a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800210c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800210e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002110:	1853      	adds	r3, r2, r1
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	7898      	ldrb	r0, [r3, #2]
 8002116:	785c      	ldrb	r4, [r3, #1]
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800211e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002126:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800212a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800212c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800212e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002130:	7898      	ldrb	r0, [r3, #2]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002138:	e7f1      	b.n	800211e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800213a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800213a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800213c:	b143      	cbz	r3, 8002150 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002140:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002144:	185a      	adds	r2, r3, r1
 8002146:	5c58      	ldrb	r0, [r3, r1]
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800214e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002152:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002154:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002156:	7853      	ldrb	r3, [r2, #1]
 8002158:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800215c:	4770      	bx	lr
	...

08002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4604      	mov	r4, r0
    if (reader != 0)
 8002164:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002166:	460d      	mov	r5, r1
 8002168:	4616      	mov	r6, r2
    if (reader != 0)
 800216a:	b1d8      	cbz	r0, 80021a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800216c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800216e:	4293      	cmp	r3, r2
 8002170:	d208      	bcs.n	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002172:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002176:	219e      	movs	r1, #158	@ 0x9e
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800217a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002180:	f026 fa1e 	bl	80285c0 <__assert_func>
        reader->seek(offset);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800218a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800218c:	4632      	mov	r2, r6
 800218e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4798      	blx	r3
 8002196:	b910      	cbnz	r0, 800219e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002198:	230d      	movs	r3, #13
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800219e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021a6:	4408      	add	r0, r1
 80021a8:	e7fb      	b.n	80021a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021aa:	bf00      	nop
 80021ac:	08029afa 	.word	0x08029afa
 80021b0:	08029a77 	.word	0x08029a77
 80021b4:	08029ae7 	.word	0x08029ae7

080021b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021bc:	6943      	ldr	r3, [r0, #20]
{
 80021be:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021c0:	b92b      	cbnz	r3, 80021ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021c4:	21e4      	movs	r1, #228	@ 0xe4
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021c8:	4822      	ldr	r0, [pc, #136]	@ (8002254 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ca:	f026 f9f9 	bl	80285c0 <__assert_func>
    readData(currentMovieOffset, 8);
 80021ce:	2208      	movs	r2, #8
 80021d0:	6981      	ldr	r1, [r0, #24]
 80021d2:	f7ff ffc5 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021d8:	f243 0630 	movw	r6, #12336	@ 0x3030
 80021dc:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021e0:	3104      	adds	r1, #4
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff8e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80021e8:	69a3      	ldr	r3, [r4, #24]
 80021ea:	4418      	add	r0, r3
 80021ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ee:	f100 0208 	add.w	r2, r0, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d306      	bcc.n	8002204 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80021f6:	2301      	movs	r3, #1
    return false;
 80021f8:	2000      	movs	r0, #0
    frameNumber = 1;
 80021fa:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	61a3      	str	r3, [r4, #24]
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002204:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002206:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800220a:	2208      	movs	r2, #8
 800220c:	4620      	mov	r0, r4
        frameNumber++;
 800220e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002210:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002214:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002216:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002218:	f7ff ffa2 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800221c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002220:	4620      	mov	r0, r4
 8002222:	4649      	mov	r1, r9
 8002224:	f7ff ff89 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002228:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800222c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff83 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002234:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002238:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002240:	45b0      	cmp	r8, r6
 8002242:	d1d1      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002244:	42bd      	cmp	r5, r7
 8002246:	d1cf      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d9      	b.n	8002200 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800224c:	08029b3c 	.word	0x08029b3c
 8002250:	08029b85 	.word	0x08029b85
 8002254:	08029a77 	.word	0x08029a77

08002258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002258:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	bf38      	it	cc
 800225e:	2101      	movcc	r1, #1
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002268:	4798      	blx	r3
 800226a:	42a8      	cmp	r0, r5
 800226c:	d204      	bcs.n	8002278 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4798      	blx	r3
 8002276:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002278:	1e6b      	subs	r3, r5, #1
 800227a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800227c:	2210      	movs	r2, #16
 800227e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002280:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002284:	f106 0108 	add.w	r1, r6, #8
 8002288:	f7ff ff6a 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800228c:	f106 0110 	add.w	r1, r6, #16
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff37 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	3b04      	subs	r3, #4
 800229a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800229c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022a4:	2100      	movs	r1, #0
    readData(0, 72);
 80022a6:	2248      	movs	r2, #72	@ 0x48
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022ae:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022b0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022b4:	f7ff ff54 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022b8:	69a6      	ldr	r6, [r4, #24]
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022be:	4631      	mov	r1, r6
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022c6:	b148      	cbz	r0, 80022dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022c8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ca:	4a61      	ldr	r2, [pc, #388]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022cc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80022d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022d6:	4860      	ldr	r0, [pc, #384]	@ (8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022d8:	f026 f972 	bl	80285c0 <__assert_func>
    currentMovieOffset += 8;
 80022dc:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e0:	2304      	movs	r3, #4
 80022e2:	4a5e      	ldr	r2, [pc, #376]	@ (800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80022e4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80022e6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e8:	f7ff fefc 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ec:	b138      	cbz	r0, 80022fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022ee:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f2:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80022fc:	e7eb      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80022fe:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002302:	2304      	movs	r3, #4
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002306:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002308:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800230a:	f7ff feeb 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800230e:	4607      	mov	r7, r0
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002312:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002320:	e7d9      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002322:	f106 0110 	add.w	r1, r6, #16
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff feec 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800232c:	4605      	mov	r5, r0
 800232e:	b920      	cbnz	r0, 800233a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002332:	f240 1141 	movw	r1, #321	@ 0x141
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002338:	e7cd      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800233a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800233e:	2304      	movs	r3, #4
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	4641      	mov	r1, r8
 8002346:	f7ff fecd 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800234a:	2800      	cmp	r0, #0
 800234c:	d049      	beq.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800234e:	2306      	movs	r3, #6
 8002350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002354:	2304      	movs	r3, #4
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002358:	f106 0118 	add.w	r1, r6, #24
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fec1 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002362:	2800      	cmp	r0, #0
 8002364:	d03f      	beq.n	80023e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002366:	2307      	movs	r3, #7
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800236c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800236e:	4f42      	ldr	r7, [pc, #264]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002370:	220c      	movs	r2, #12
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7ff fef3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800237a:	f105 0608 	add.w	r6, r5, #8
 800237e:	2304      	movs	r3, #4
 8002380:	463a      	mov	r2, r7
 8002382:	4620      	mov	r0, r4
 8002384:	4631      	mov	r1, r6
 8002386:	f7ff fead 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800238a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800238e:	2800      	cmp	r0, #0
 8002390:	d048      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d148      	bne.n	8002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002398:	42ab      	cmp	r3, r5
 800239a:	d849      	bhi.n	8002430 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800239c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a0:	3504      	adds	r5, #4
 80023a2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023a4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7ff feac 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023ac:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023ae:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023b0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fea6 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023b8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ba:	2204      	movs	r2, #4
 80023bc:	4620      	mov	r0, r4
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff fece 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023c4:	2304      	movs	r3, #4
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023c8:	4631      	mov	r1, r6
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fe8a 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d138      	bne.n	8002446 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023d4:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023d6:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023d8:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	6223      	str	r3, [r4, #32]
}
 80023de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80023e2:	2701      	movs	r7, #1
 80023e4:	e7b6      	b.n	8002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80023e6:	2f00      	cmp	r7, #0
 80023e8:	d0c0      	beq.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023ea:	f106 0120 	add.w	r1, r6, #32
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe88 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80023f8:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe7e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002408:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800240c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe78 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002414:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002418:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe72 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002420:	6120      	str	r0, [r4, #16]
 8002422:	e7a3      	b.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0b9      	beq.n	800239c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002428:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800242a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800242e:	e7d6      	b.n	80023de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002430:	1d29      	adds	r1, r5, #4
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe66 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002438:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800243a:	220c      	movs	r2, #12
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7ff fe8e 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002444:	e799      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002446:	230b      	movs	r3, #11
 8002448:	e7ef      	b.n	800242a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800244a:	bf00      	nop
 800244c:	08029bb8 	.word	0x08029bb8
 8002450:	08029bd6 	.word	0x08029bd6
 8002454:	08029bbd 	.word	0x08029bbd
 8002458:	08029a77 	.word	0x08029a77
 800245c:	08029c03 	.word	0x08029c03
 8002460:	08029c08 	.word	0x08029c08
 8002464:	08029c20 	.word	0x08029c20
 8002468:	08029c25 	.word	0x08029c25
 800246c:	08029c3b 	.word	0x08029c3b
 8002470:	08029c47 	.word	0x08029c47
 8002474:	08029c4c 	.word	0x08029c4c
 8002478:	08029c51 	.word	0x08029c51
 800247c:	08029c56 	.word	0x08029c56

08002480 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002480:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002484:	2200      	movs	r2, #0
 8002486:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002488:	f7ff bf0c 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800248c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800248c:	b510      	push	{r4, lr}
    movieData = 0;
 800248e:	2300      	movs	r3, #0
{
 8002490:	4604      	mov	r4, r0
 8002492:	4608      	mov	r0, r1
    movieData = 0;
 8002494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002496:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002498:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4798      	blx	r3
 800249e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024a6:	f7ff befd 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024ac <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024ae:	4c14      	ldr	r4, [pc, #80]	@ (8002500 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024b0:	4d14      	ldr	r5, [pc, #80]	@ (8002504 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024b2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <JPEG_Decode_DMA+0x5c>)
 80024b8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <JPEG_Decode_DMA+0x60>)
 80024bc:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024c0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024c2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <JPEG_Decode_DMA+0x68>)
 80024c6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <JPEG_Decode_DMA+0x6c>)
 80024ca:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <JPEG_Decode_DMA+0x70>)
 80024ce:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d8:	701c      	strb	r4, [r3, #0]
 80024da:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80024dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80024e0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <JPEG_Decode_DMA+0x78>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	436a      	muls	r2, r5
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f009 fef5 	bl	800c2e4 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
 8002500:	24009dc4 	.word	0x24009dc4
 8002504:	24009da0 	.word	0x24009da0
 8002508:	24009db0 	.word	0x24009db0
 800250c:	24000794 	.word	0x24000794
 8002510:	24009dc0 	.word	0x24009dc0
 8002514:	24009db8 	.word	0x24009db8
 8002518:	24009dbc 	.word	0x24009dbc
 800251c:	2400079c 	.word	0x2400079c
 8002520:	24000010 	.word	0x24000010
 8002524:	2400077c 	.word	0x2400077c

08002528 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800252e:	68cb      	ldr	r3, [r1, #12]
 8002530:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002532:	bf1e      	ittt	ne
 8002534:	f023 030f 	bicne.w	r3, r3, #15
 8002538:	3310      	addne	r3, #16
 800253a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002540:	bf1e      	ittt	ne
 8002542:	f023 030f 	bicne.w	r3, r3, #15
 8002546:	3310      	addne	r3, #16
 8002548:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800254c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002550:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002552:	4353      	muls	r3, r2
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800255a:	2b02      	cmp	r3, #2
 800255c:	d10e      	bne.n	800257c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d003      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800256a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002570:	bf1e      	ittt	ne
 8002572:	f023 0307 	bicne.w	r3, r3, #7
 8002576:	3308      	addne	r3, #8
 8002578:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800257a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fc      	bne.n	800257a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002580:	68cb      	ldr	r3, [r1, #12]
 8002582:	0758      	lsls	r0, r3, #29
 8002584:	d0f2      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	e7ed      	b.n	800256a <HAL_JPEG_InfoReadyCallback+0x42>
 800258e:	bf00      	nop
 8002590:	24009da8 	.word	0x24009da8

08002594 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_JPEG_GetDataCallback+0x30>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	440b      	add	r3, r1
    {
 800259a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800259c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_JPEG_GetDataCallback+0x34>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d20c      	bcs.n	80025c0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025a6:	4c09      	ldr	r4, [pc, #36]	@ (80025cc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025a8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025aa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025ac:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025b2:	bf28      	it	cs
 80025b4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b8:	6021      	str	r1, [r4, #0]
        }
    }
 80025ba:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025bc:	f009 bef4 	b.w	800c3a8 <HAL_JPEG_ConfigInputBuffer>
    }
 80025c0:	bc30      	pop	{r4, r5}
 80025c2:	4770      	bx	lr
 80025c4:	24009dc0 	.word	0x24009dc0
 80025c8:	24009dbc 	.word	0x24009dbc
 80025cc:	24009db8 	.word	0x24009db8

080025d0 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025d2:	4c20      	ldr	r4, [pc, #128]	@ (8002654 <HAL_JPEG_DataReadyCallback+0x84>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025d8:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025da:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025dc:	4f1f      	ldr	r7, [pc, #124]	@ (800265c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025e8:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_JPEG_DataReadyCallback+0x90>)
 80025ec:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80025f4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d901      	bls.n	800260e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	5ceb      	ldrb	r3, [r5, r3]
 8002614:	b133      	cbz	r3, 8002624 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002616:	2102      	movs	r1, #2
 8002618:	4630      	mov	r0, r6
 800261a:	f009 fe97 	bl	800c34c <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_JPEG_DataReadyCallback+0x94>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	4630      	mov	r0, r6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	435a      	muls	r2, r3
 8002636:	f009 feba 	bl	800c3ae <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_JPEG_DataReadyCallback+0x98>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7a1a      	ldrb	r2, [r3, #8]
 8002640:	b93a      	cbnz	r2, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	b92b      	cbnz	r3, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_JPEG_DataReadyCallback+0x9c>)
 8002648:	6818      	ldr	r0, [r3, #0]
        }
    }
 800264a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800264e:	f00d b841 	b.w	800f6d4 <osSemaphoreRelease>
    }
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002654:	24009da0 	.word	0x24009da0
 8002658:	24000010 	.word	0x24000010
 800265c:	2400077c 	.word	0x2400077c
 8002660:	2400079c 	.word	0x2400079c
 8002664:	24009db0 	.word	0x24009db0
 8002668:	24009da4 	.word	0x24009da4
 800266c:	24000798 	.word	0x24000798

08002670 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002672:	e7fe      	b.n	8002672 <HAL_JPEG_ErrorCallback+0x2>

08002674 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002674:	4b01      	ldr	r3, [pc, #4]	@ (800267c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
 800267a:	4770      	bx	lr
 800267c:	24009db4 	.word	0x24009db4

08002680 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002682:	4d16      	ldr	r5, [pc, #88]	@ (80026dc <JPEG_OutputHandler+0x5c>)
{
 8002684:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b113      	cbz	r3, 8002690 <JPEG_OutputHandler+0x10>
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	bb1b      	cbnz	r3, 80026d8 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <JPEG_OutputHandler+0x64>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	7a03      	ldrb	r3, [r0, #8]
 8002696:	b963      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <JPEG_OutputHandler+0x68>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <JPEG_OutputHandler+0x32>
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b913      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <JPEG_OutputHandler+0x70>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <JPEG_OutputHandler+0x54>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <JPEG_OutputHandler+0x74>)
 80026bc:	490b      	ldr	r1, [pc, #44]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	b933      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	b923      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026ce:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026d0:	f00a f89b 	bl	800c80a <HAL_JPEG_Resume>
        return 1;
 80026d4:	2002      	movs	r0, #2
    }

    return 2;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fc      	b.n	80026d6 <JPEG_OutputHandler+0x56>
 80026dc:	24009db4 	.word	0x24009db4
 80026e0:	24000790 	.word	0x24000790
 80026e4:	24009da4 	.word	0x24009da4
 80026e8:	24000794 	.word	0x24000794
 80026ec:	24000010 	.word	0x24000010
 80026f0:	24009db0 	.word	0x24009db0
 80026f4:	24009da0 	.word	0x24009da0

080026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4605      	mov	r5, r0
    if (length == 0)
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	d035      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002700:	2b00      	cmp	r3, #0
 8002702:	d033      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002704:	481a      	ldr	r0, [pc, #104]	@ (8002770 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002706:	2403      	movs	r4, #3
 8002708:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800270a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800270c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800270e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002712:	bf18      	it	ne
 8002714:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002718:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800271a:	bf18      	it	ne
 800271c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800271e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002720:	0924      	lsrs	r4, r4, #4
 8002722:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002724:	692c      	ldr	r4, [r5, #16]
 8002726:	f014 040f 	ands.w	r4, r4, #15
 800272a:	bf18      	it	ne
 800272c:	f1c4 0410 	rsbne	r4, r4, #16
 8002730:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002732:	4810      	ldr	r0, [pc, #64]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002734:	f7ff feba 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002738:	4c0f      	ldr	r4, [pc, #60]	@ (8002778 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800273a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800273e:	4d0d      	ldr	r5, [pc, #52]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002740:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff9c 	bl	8002680 <JPEG_OutputHandler>
 8002748:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d105      	bne.n	800275c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002752:	f04f 31ff 	mov.w	r1, #4294967295
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f00c ff90 	bl	800f67c <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1ef      	bne.n	8002742 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002766:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	bf00      	nop
 8002770:	2400077c 	.word	0x2400077c
 8002774:	24000594 	.word	0x24000594
 8002778:	24009dac 	.word	0x24009dac
 800277c:	24009da4 	.word	0x24009da4
 8002780:	24000798 	.word	0x24000798
 8002784:	24009db4 	.word	0x24009db4
 8002788:	24000790 	.word	0x24000790

0800278c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002792:	6943      	ldr	r3, [r0, #20]
{
 8002794:	b085      	sub	sp, #20
 8002796:	4604      	mov	r4, r0
 8002798:	460f      	mov	r7, r1
 800279a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800279c:	b92b      	cbnz	r3, 80027aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027a0:	21b0      	movs	r1, #176	@ 0xb0
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027a4:	4829      	ldr	r0, [pc, #164]	@ (800284c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027a6:	f025 ff0b 	bl	80285c0 <__assert_func>
    readData(currentMovieOffset, 8);
 80027aa:	2208      	movs	r2, #8
 80027ac:	6981      	ldr	r1, [r0, #24]
 80027ae:	f7ff fcd7 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027b2:	69a6      	ldr	r6, [r4, #24]
 80027b4:	4620      	mov	r0, r4
 80027b6:	4631      	mov	r1, r6
 80027b8:	f7ff fcbf 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fcba 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fc9a 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d8:	1842      	adds	r2, r0, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d226      	bcs.n	800282c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80027e2:	459b      	cmp	fp, r3
 80027e4:	d117      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80027ea:	459a      	cmp	sl, r3
 80027ec:	d113      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027ee:	b190      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80027f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcb3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fe:	462a      	mov	r2, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f8cd 8000 	str.w	r8, [sp]
 8002806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800280a:	463b      	mov	r3, r7
 800280c:	f7ff ff74 	bl	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002810:	6963      	ldr	r3, [r4, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800281a:	b905      	cbnz	r5, 800281e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800281c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800281e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002822:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002826:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002828:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800282a:	d109      	bne.n	8002840 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800282c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800282e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002830:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002832:	6a23      	ldr	r3, [r4, #32]
 8002834:	61a3      	str	r3, [r4, #24]
}
 8002836:	f080 0001 	eor.w	r0, r0, #1
 800283a:	b005      	add	sp, #20
 800283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002840:	2000      	movs	r0, #0
 8002842:	e7f8      	b.n	8002836 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002844:	08029b3c 	.word	0x08029b3c
 8002848:	08029c5b 	.word	0x08029c5b
 800284c:	08029a77 	.word	0x08029a77

08002850 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002854:	6981      	ldr	r1, [r0, #24]
{
 8002856:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002858:	2208      	movs	r2, #8
 800285a:	f7ff fc81 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800285e:	69a7      	ldr	r7, [r4, #24]
 8002860:	4620      	mov	r0, r4
 8002862:	1d39      	adds	r1, r7, #4
 8002864:	f7ff fc4e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800286e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fc75 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002876:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002878:	b16e      	cbz	r6, 8002896 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800287a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287c:	4c07      	ldr	r4, [pc, #28]	@ (800289c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800287e:	4d08      	ldr	r5, [pc, #32]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002880:	4633      	mov	r3, r6
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002884:	f7ff fe12 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fef9 	bl	8002680 <JPEG_OutputHandler>
 800288e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002896:	2001      	movs	r0, #1
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	bf00      	nop
 800289c:	24009dac 	.word	0x24009dac
 80028a0:	24000594 	.word	0x24000594

080028a4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <DMA2D_CopyBuffer+0x70>)
 80028a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028ac:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028b0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028b2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028b4:	4e18      	ldr	r6, [pc, #96]	@ (8002918 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028b6:	4f19      	ldr	r7, [pc, #100]	@ (800291c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028b8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028bc:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028c0:	434d      	muls	r5, r1
 80028c2:	6911      	ldr	r1, [r2, #16]
 80028c4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028c8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ca:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028cc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028d4:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028d6:	45bc      	cmp	ip, r7
 80028d8:	d317      	bcc.n	800290a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f1c2 0210 	rsb	r2, r2, #16
 80028e0:	430a      	orrs	r2, r1
 80028e2:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028e6:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ea:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028ec:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <DMA2D_CopyBuffer+0x74>)
 80028f0:	4421      	add	r1, r4
 80028f2:	4429      	add	r1, r5
 80028f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 80028f8:	2300      	movs	r3, #0
 80028fa:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <DMA2D_CopyBuffer+0x80>)
 80028fe:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <DMA2D_CopyBuffer+0x84>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800290a:	f041 0110 	orr.w	r1, r1, #16
 800290e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002910:	e7e8      	b.n	80028e4 <DMA2D_CopyBuffer+0x40>
 8002912:	bf00      	nop
 8002914:	2400077c 	.word	0x2400077c
 8002918:	52001000 	.word	0x52001000
 800291c:	24009da8 	.word	0x24009da8
 8002920:	24009dc4 	.word	0x24009dc4
 8002924:	ff09000b 	.word	0xff09000b
 8002928:	00012301 	.word	0x00012301

0800292c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800292e:	2200      	movs	r2, #0
 8002930:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002932:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002934:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002936:	3101      	adds	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	2901      	cmp	r1, #1
 800293e:	d900      	bls.n	8002942 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002940:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <DMA2D_ExternalJobCompleted+0x38>)
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <DMA2D_ExternalJobCompleted+0x3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	68c2      	ldr	r2, [r0, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DMA2D_ExternalJobCompleted+0x40>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <DMA2D_ExternalJobCompleted+0x44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f00c beba 	b.w	800f6d4 <osSemaphoreRelease>
 8002960:	24000794 	.word	0x24000794
 8002964:	24009da8 	.word	0x24009da8
 8002968:	2400077c 	.word	0x2400077c
 800296c:	24000790 	.word	0x24000790
 8002970:	24000798 	.word	0x24000798

08002974 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002974:	2101      	movs	r1, #1
 8002976:	2200      	movs	r2, #0
{
 8002978:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800297a:	4608      	mov	r0, r1
 800297c:	f00c fe34 	bl	800f5e8 <osSemaphoreNew>
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002982:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002984:	b928      	cbnz	r0, 8002992 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002988:	2128      	movs	r1, #40	@ 0x28
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800298c:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800298e:	f025 fe17 	bl	80285c0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	2001      	movs	r0, #1
 8002998:	f00c fec5 	bl	800f726 <osMessageQueueNew>
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800299e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029a0:	b918      	cbnz	r0, 80029aa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029a4:	212c      	movs	r1, #44	@ 0x2c
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029a8:	e7f0      	b.n	800298c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	24009dcc 	.word	0x24009dcc
 80029b0:	08029cfc 	.word	0x08029cfc
 80029b4:	08029d45 	.word	0x08029d45
 80029b8:	08029d74 	.word	0x08029d74
 80029bc:	24009dc8 	.word	0x24009dc8
 80029c0:	08029dda 	.word	0x08029dda

080029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f00c be56 	b.w	800f67c <osSemaphoreAcquire>
 80029d0:	24009dcc 	.word	0x24009dcc

080029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029d4:	4b01      	ldr	r3, [pc, #4]	@ (80029dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f00c be7c 	b.w	800f6d4 <osSemaphoreRelease>
 80029dc:	24009dcc 	.word	0x24009dcc

080029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f00c be49 	b.w	800f67c <osSemaphoreAcquire>
 80029ea:	bf00      	nop
 80029ec:	24009dcc 	.word	0x24009dcc

080029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 80029f0:	f7ff bff0 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80029fa:	461a      	mov	r2, r3
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f00c becd 	b.w	800f79c <osMessageQueuePut>
 8002a02:	bf00      	nop
 8002a04:	24009dc8 	.word	0x24009dc8
 8002a08:	24000030 	.word	0x24000030

08002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4c07      	ldr	r4, [pc, #28]	@ (8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a12:	a901      	add	r1, sp, #4
 8002a14:	461a      	mov	r2, r3
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f00c fef1 	bl	800f7fe <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	2200      	movs	r2, #0
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f00c feea 	bl	800f7fe <osMessageQueueGet>
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	24009dc8 	.word	0x24009dc8

08002a34 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4718      	bx	r3

08002a3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	4770      	bx	lr

08002a3e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002a3e:	e7fe      	b.n	8002a3e <DMA2D_XferErrorCallback>

08002a40 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a40:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a44:	4770      	bx	lr
	...

08002a48 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a54:	f00c fd86 	bl	800f564 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a58:	6860      	ldr	r0, [r4, #4]
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4798      	blx	r3
 8002a60:	b978      	cbnz	r0, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a62:	7a63      	ldrb	r3, [r4, #9]
 8002a64:	b16b      	cbz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
 8002a66:	7a23      	ldrb	r3, [r4, #8]
 8002a68:	b95b      	cbnz	r3, 8002a82 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a6a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a6e:	4620      	mov	r0, r4
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a76:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a7e:	f00c bd94 	b.w	800f5aa <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a82:	490b      	ldr	r1, [pc, #44]	@ (8002ab0 <_ZN8STM32DMA5startEv+0x68>)
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <_ZN8STM32DMA5startEv+0x6c>)
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1f2      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a90:	7a20      	ldrb	r0, [r4, #8]
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d1ef      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002a96:	7aa0      	ldrb	r0, [r4, #10]
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1ec      	bne.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a9c:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a9e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aa6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa8:	f7ff fefc 	bl	80028a4 <DMA2D_CopyBuffer>
    }
 8002aac:	e7e3      	b.n	8002a76 <_ZN8STM32DMA5startEv+0x2e>
 8002aae:	bf00      	nop
 8002ab0:	24000794 	.word	0x24000794
 8002ab4:	24000010 	.word	0x24000010

08002ab8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002abe:	6003      	str	r3, [r0, #0]
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <_ZN8STM32DMAD1Ev+0x1c>)
 8002ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002aca:	f3bf 8f6f 	isb	sy
}
 8002ace:	4770      	bx	lr
 8002ad0:	08029f90 	.word	0x08029f90
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	4604      	mov	r4, r0
}
 8002adc:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002ae0:	f7ff ffea 	bl	8002ab8 <_ZN8STM32DMAD1Ev>
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f025 f9f3 	bl	8027ed0 <_ZdlPvj>
 8002aea:	4620      	mov	r0, r4
 8002aec:	bd10      	pop	{r4, pc}
	...

08002af0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002af2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002af8:	f042 0210 	orr.w	r2, r2, #16
 8002afc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002b00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b04:	f002 0210 	and.w	r2, r2, #16
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b0e:	f042 0210 	orr.w	r2, r2, #16
 8002b12:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b14:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b1e:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b20:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002b22:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <_ZN8STM32DMA10initializeEv+0x50>)
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <_ZN8STM32DMA10initializeEv+0x54>)
 8002b28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	b002      	add	sp, #8
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	58024400 	.word	0x58024400
 8002b38:	24000608 	.word	0x24000608
 8002b3c:	08002d8d 	.word	0x08002d8d
 8002b40:	08002a3f 	.word	0x08002a3f
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b48:	b508      	push	{r3, lr}
    switch (format)
 8002b4a:	280a      	cmp	r0, #10
 8002b4c:	d809      	bhi.n	8002b62 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b4e:	e8df f000 	tbb	[pc, r0]
 8002b52:	1006      	.short	0x1006
 8002b54:	0808080e 	.word	0x0808080e
 8002b58:	10101008 	.word	0x10101008
 8002b5c:	10          	.byte	0x10
 8002b5d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b5e:	2002      	movs	r0, #2
}
 8002b60:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b64:	2191      	movs	r1, #145	@ 0x91
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b68:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b6a:	f025 fd29 	bl	80285c0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7f6      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b74:	e7f4      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b76:	bf00      	nop
 8002b78:	08029e1c 	.word	0x08029e1c
 8002b7c:	08029e37 	.word	0x08029e37
 8002b80:	08029e82 	.word	0x08029e82

08002b84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b88:	7f88      	ldrb	r0, [r1, #30]
 8002b8a:	f7ff ffdd 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b90:	8aa5      	ldrh	r5, [r4, #20]
 8002b92:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b94:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b96:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b9a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b9e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ba0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba2:	1b52      	subs	r2, r2, r5
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ba6:	6825      	ldr	r5, [r4, #0]
 8002ba8:	2d08      	cmp	r5, #8
 8002baa:	d10e      	bne.n	8002bca <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bac:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bae:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002bb0:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002bb4:	7f20      	ldrb	r0, [r4, #28]
 8002bb6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bba:	61da      	str	r2, [r3, #28]
        return color;
 8002bbc:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bbe:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc0:	4a07      	ldr	r2, [pc, #28]	@ (8002be0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc2:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc4:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bc6:	601a      	str	r2, [r3, #0]
    }
}
 8002bc8:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bca:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bcc:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002bd4:	4a03      	ldr	r2, [pc, #12]	@ (8002be4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bd6:	e7f6      	b.n	8002bc6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bd8:	52001000 	.word	0x52001000
 8002bdc:	00010009 	.word	0x00010009
 8002be0:	00022301 	.word	0x00022301
 8002be4:	00032301 	.word	0x00032301

08002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002be8:	b508      	push	{r3, lr}
    switch (format)
 8002bea:	280b      	cmp	r0, #11
 8002bec:	d80b      	bhi.n	8002c06 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002bee:	e8df f000 	tbb	[pc, r0]
 8002bf2:	1206      	.short	0x1206
 8002bf4:	0a0a0a10 	.word	0x0a0a0a10
 8002bf8:	0808080a 	.word	0x0808080a
 8002bfc:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002bfe:	2002      	movs	r0, #2
}
 8002c00:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c02:	2005      	movs	r0, #5
        break;
 8002c04:	e7fc      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002c08:	2170      	movs	r1, #112	@ 0x70
 8002c0a:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c0e:	f025 fcd7 	bl	80285c0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7f4      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c16:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c18:	e7f2      	b.n	8002c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c1a:	bf00      	nop
 8002c1c:	08029e1c 	.word	0x08029e1c
 8002c20:	08029ee6 	.word	0x08029ee6
 8002c24:	08029e82 	.word	0x08029e82

08002c28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c2c:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c2e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c30:	4638      	mov	r0, r7
 8002c32:	f7ff ffd9 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c36:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c3a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff ffd3 	bl	8002be8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c42:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c44:	4628      	mov	r0, r5
 8002c46:	f7ff ff7f 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c4a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c4e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c52:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c56:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c58:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c5a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c5e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c60:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c62:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c66:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c6c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c72:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c76:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c78:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c7a:	f8d9 4000 	ldr.w	r4, [r9]
 8002c7e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c82:	2c80      	cmp	r4, #128	@ 0x80
 8002c84:	d022      	beq.n	8002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c86:	d80f      	bhi.n	8002ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c88:	2c20      	cmp	r4, #32
 8002c8a:	d066      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c8c:	2c40      	cmp	r4, #64	@ 0x40
 8002c8e:	d064      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c90:	2c04      	cmp	r4, #4
 8002c92:	d05c      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c94:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c98:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c9a:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c9c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002ca0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002ca2:	d060      	beq.n	8002d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002ca4:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002ca6:	e03f      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002ca8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002cac:	d004      	beq.n	8002cb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002cae:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002cb2:	d1ef      	bne.n	8002c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb4:	482f      	ldr	r0, [pc, #188]	@ (8002d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002cb6:	e000      	b.n	8002cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cb8:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cba:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cbe:	61da      	str	r2, [r3, #28]
 8002cc0:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cc4:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cc6:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cc8:	6159      	str	r1, [r3, #20]
 8002cca:	e02c      	b.n	8002d26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ccc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cd0:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cd4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002cd8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cda:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cdc:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cde:	1d21      	adds	r1, r4, #4
 8002ce0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002ce2:	7821      	ldrb	r1, [r4, #0]
 8002ce4:	b141      	cbz	r1, 8002cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002ce6:	2901      	cmp	r1, #1
 8002ce8:	d021      	beq.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002cec:	f240 110b 	movw	r1, #267	@ 0x10b
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002cf2:	4824      	ldr	r0, [pc, #144]	@ (8002d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002cf4:	f025 fc64 	bl	80285c0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	8861      	ldrh	r1, [r4, #2]
 8002cfc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d00:	3901      	subs	r1, #1
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d0a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d0c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d0e:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	f041 0120 	orr.w	r1, r1, #32
 8002d16:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d18:	69d9      	ldr	r1, [r3, #28]
 8002d1a:	0689      	lsls	r1, r1, #26
 8002d1c:	d4fc      	bmi.n	8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d0be      	beq.n	8002ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d26:	4a18      	ldr	r2, [pc, #96]	@ (8002d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d2e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d30:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d32:	8860      	ldrh	r0, [r4, #2]
 8002d34:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d38:	bf18      	it	ne
 8002d3a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d3c:	3801      	subs	r0, #1
 8002d3e:	f021 0110 	bic.w	r1, r1, #16
 8002d42:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d46:	f041 0110 	orr.w	r1, r1, #16
 8002d4a:	61d9      	str	r1, [r3, #28]
                break;
 8002d4c:	e7df      	b.n	8002d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d56:	61da      	str	r2, [r3, #28]
 8002d58:	e7b5      	b.n	8002cc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d5a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d5e:	4b03      	ldr	r3, [pc, #12]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d64:	e7f7      	b.n	8002d56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d66:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d6a:	e7dd      	b.n	8002d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d6c:	52001000 	.word	0x52001000
 8002d70:	00012301 	.word	0x00012301
 8002d74:	00020009 	.word	0x00020009
 8002d78:	0002000a 	.word	0x0002000a
 8002d7c:	08029f30 	.word	0x08029f30
 8002d80:	08029f4a 	.word	0x08029f4a
 8002d84:	08029e82 	.word	0x08029e82
 8002d88:	00022301 	.word	0x00022301

08002d8c <DMA2D_XferCpltCallback>:
 8002d8c:	4b02      	ldr	r3, [pc, #8]	@ (8002d98 <DMA2D_XferCpltCallback+0xc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d92:	6803      	ldr	r3, [r0, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4718      	bx	r3
 8002d98:	240284e8 	.word	0x240284e8

08002d9c <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d9c:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002da4:	b9d3      	cbnz	r3, 8002ddc <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002dac:	4919      	ldr	r1, [pc, #100]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	5cd3      	ldrb	r3, [r2, r3]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12a      	bne.n	8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dba:	4818      	ldr	r0, [pc, #96]	@ (8002e1c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002dbc:	6800      	ldr	r0, [r0, #0]
 8002dbe:	bb38      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc0:	7a20      	ldrb	r0, [r4, #8]
 8002dc2:	bb28      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dc4:	7aa0      	ldrb	r0, [r4, #10]
 8002dc6:	bb18      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc8:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dce:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd8:	f7ff bd64 	b.w	80028a4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002ddc:	7a03      	ldrb	r3, [r0, #8]
 8002dde:	b143      	cbz	r3, 8002df2 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002dee:	f7ff fd9d 	bl	800292c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002df2:	6860      	ldr	r0, [r4, #4]
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4798      	blx	r3
 8002dfa:	b948      	cbnz	r0, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dfc:	7a63      	ldrb	r3, [r4, #9]
 8002dfe:	b13b      	cbz	r3, 8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002e00:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002e02:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002e06:	4620      	mov	r0, r4
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e0e:	4718      	bx	r3
    }
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	24000794 	.word	0x24000794
 8002e18:	24000010 	.word	0x24000010
 8002e1c:	24000790 	.word	0x24000790

08002e20 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <_ZN8STM32DMAC1Ev+0x40>)
 8002e26:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4625      	mov	r5, r4
 8002e2c:	2260      	movs	r2, #96	@ 0x60
 8002e2e:	6060      	str	r0, [r4, #4]
 8002e30:	7226      	strb	r6, [r4, #8]
 8002e32:	7266      	strb	r6, [r4, #9]
 8002e34:	f845 3b20 	str.w	r3, [r5], #32
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f010 fe85 	bl	8013b48 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e3e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e42:	60ee      	str	r6, [r5, #12]
 8002e44:	3524      	adds	r5, #36	@ 0x24
 8002e46:	429d      	cmp	r5, r3
 8002e48:	d1fb      	bne.n	8002e42 <_ZN8STM32DMAC1Ev+0x22>
 8002e4a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e4e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e50:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e54:	f00c fb51 	bl	800f4fa <osMutexNew>
 8002e58:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	08029f90 	.word	0x08029f90

08002e64 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	07d2      	lsls	r2, r2, #31
 8002e6a:	d4fc      	bmi.n	8002e66 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e6c:	2223      	movs	r2, #35	@ 0x23
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	52001000 	.word	0x52001000

08002e78 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e78:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e7a:	6953      	ldr	r3, [r2, #20]
 8002e7c:	03db      	lsls	r3, r3, #15
 8002e7e:	d511      	bpl.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002e80:	2900      	cmp	r1, #0
 8002e82:	dd0f      	ble.n	8002ea4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e84:	f000 031f 	and.w	r3, r0, #31
 8002e88:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e8a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e8e:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e90:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e94:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002e96:	1a0b      	subs	r3, r1, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	dcf9      	bgt.n	8002e90 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ea0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002eac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002eae:	4c10      	ldr	r4, [pc, #64]	@ (8002ef0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002eb0:	6825      	ldr	r5, [r4, #0]
 8002eb2:	07ed      	lsls	r5, r5, #31
 8002eb4:	d4fc      	bmi.n	8002eb0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eb8:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002eba:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ebc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ebe:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec2:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ec6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ec8:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002ecc:	d00c      	beq.n	8002ee8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ece:	4909      	ldr	r1, [pc, #36]	@ (8002ef4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ed0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ed4:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ed6:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002eda:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002ede:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ee0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002ee2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ee4:	6023      	str	r3, [r4, #0]
    }
}
 8002ee6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ee8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002eec:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eee:	e7f9      	b.n	8002ee4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002ef0:	52001000 	.word	0x52001000
 8002ef4:	00010009 	.word	0x00010009
 8002ef8:	00020001 	.word	0x00020001
 8002efc:	00030001 	.word	0x00030001

08002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f00:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f02:	4c0e      	ldr	r4, [pc, #56]	@ (8002f3c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002f04:	6825      	ldr	r5, [r4, #0]
 8002f06:	07ed      	lsls	r5, r5, #31
 8002f08:	d4fc      	bmi.n	8002f04 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f0a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f0c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002f0e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f10:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f12:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f16:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f1a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f1c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f1e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f20:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002f22:	d007      	beq.n	8002f34 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002f26:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002f2a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f2c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f2e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f30:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002f32:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002f36:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002f38:	6025      	str	r5, [r4, #0]
}
 8002f3a:	e7fa      	b.n	8002f32 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002f3c:	52001000 	.word	0x52001000
 8002f40:	00020001 	.word	0x00020001
 8002f44:	ff020001 	.word	0xff020001

08002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002f48:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002f4a:	4c0b      	ldr	r4, [pc, #44]	@ (8002f78 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002f4c:	6825      	ldr	r5, [r4, #0]
 8002f4e:	07ed      	lsls	r5, r5, #31
 8002f50:	d4fc      	bmi.n	8002f4c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f52:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f54:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f56:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f58:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f5a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f60:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002f62:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f64:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f66:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f68:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f6a:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f6c:	4b03      	ldr	r3, [pc, #12]	@ (8002f7c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f6e:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f70:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f72:	6023      	str	r3, [r4, #0]
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	52001000 	.word	0x52001000
 8002f7c:	00020001 	.word	0x00020001

08002f80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002f80:	2001      	movs	r0, #1
 8002f82:	4770      	bx	lr

08002f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002f84:	200c      	movs	r0, #12
 8002f86:	4770      	bx	lr

08002f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002f88:	230c      	movs	r3, #12
 8002f8a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f8e:	3008      	adds	r0, #8
 8002f90:	4770      	bx	lr

08002f92 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002f92:	230c      	movs	r3, #12
 8002f94:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f98:	3008      	adds	r0, #8
 8002f9a:	4770      	bx	lr

08002f9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	4770      	bx	lr

08002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fa0:	f243 407c 	movw	r0, #13436	@ 0x347c
 8002fa4:	4770      	bx	lr

08002fa6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fa6:	f243 437c 	movw	r3, #13436	@ 0x347c
 8002faa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fae:	3008      	adds	r0, #8
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fb2:	f243 437c 	movw	r3, #13436	@ 0x347c
 8002fb6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002fba:	3008      	adds	r0, #8
 8002fbc:	4770      	bx	lr

08002fbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	4770      	bx	lr

08002fc2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002fc2:	2010      	movs	r0, #16
 8002fc4:	4770      	bx	lr

08002fc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fc6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fca:	3008      	adds	r0, #8
 8002fcc:	4770      	bx	lr

08002fce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002fce:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002fd2:	3008      	adds	r0, #8
 8002fd4:	4770      	bx	lr

08002fd6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenScreenNoTransition();
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	f004 bc16 	b.w	8007808 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>

08002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	6003      	str	r3, [r0, #0]
 8002fe4:	f00e fbe3 	bl	80117ae <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002fe8:	4620      	mov	r0, r4
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	0802a048 	.word	0x0802a048

08002ff0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	f7ff fff2 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f024 ff68 	bl	8027ed0 <_ZdlPvj>
 8003000:	4620      	mov	r0, r4
 8003002:	bd10      	pop	{r4, pc}

08003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003006:	b510      	push	{r4, lr}
 8003008:	4604      	mov	r4, r0
 800300a:	6003      	str	r3, [r0, #0]
 800300c:	f00e fbcf 	bl	80117ae <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003010:	4620      	mov	r0, r4
 8003012:	bd10      	pop	{r4, pc}
 8003014:	0802a014 	.word	0x0802a014

08003018 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	f7ff fff2 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003020:	f243 4184 	movw	r1, #13444	@ 0x3484
 8003024:	4620      	mov	r0, r4
 8003026:	f024 ff53 	bl	8027ed0 <_ZdlPvj>
 800302a:	4620      	mov	r0, r4
 800302c:	bd10      	pop	{r4, pc}
	...

08003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	6003      	str	r3, [r0, #0]
 8003038:	f00e fbb9 	bl	80117ae <_ZN8touchgfx17AbstractPartitionD1Ev>
 800303c:	4620      	mov	r0, r4
 800303e:	bd10      	pop	{r4, pc}
 8003040:	08029fe0 	.word	0x08029fe0

08003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003044:	b510      	push	{r4, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	f7ff fff2 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800304c:	2118      	movs	r1, #24
 800304e:	4620      	mov	r0, r4
 8003050:	f024 ff3e 	bl	8027ed0 <_ZdlPvj>
 8003054:	4620      	mov	r0, r4
 8003056:	bd10      	pop	{r4, pc}

08003058 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <_ZN12FrontendHeapD1Ev+0x28>)
 800305a:	b510      	push	{r4, lr}
 800305c:	4604      	mov	r4, r0
 800305e:	6003      	str	r3, [r0, #0]
 8003060:	f500 5052 	add.w	r0, r0, #13440	@ 0x3480
 8003064:	3030      	adds	r0, #48	@ 0x30
 8003066:	f7ff ffb9 	bl	8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800306a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800306e:	f7ff ffc9 	bl	8003004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003072:	f104 0014 	add.w	r0, r4, #20
 8003076:	f7ff ffdb 	bl	8003030 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800307a:	4620      	mov	r0, r4
 800307c:	bd10      	pop	{r4, pc}
 800307e:	bf00      	nop
 8003080:	0802a07c 	.word	0x0802a07c

08003084 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003084:	b508      	push	{r3, lr}
 8003086:	4802      	ldr	r0, [pc, #8]	@ (8003090 <__tcf_0+0xc>)
 8003088:	f7ff ffe6 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800308c:	bd08      	pop	{r3, pc}
 800308e:	bf00      	nop
 8003090:	2400ac88 	.word	0x2400ac88

08003094 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
 8003098:	f7ff ffde 	bl	8003058 <_ZN12FrontendHeapD1Ev>
 800309c:	f243 6124 	movw	r1, #13860	@ 0x3624
 80030a0:	4620      	mov	r0, r4
 80030a2:	f024 ff15 	bl	8027ed0 <_ZdlPvj>
 80030a6:	4620      	mov	r0, r4
 80030a8:	bd10      	pop	{r4, pc}
	...

080030ac <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80030ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80030b0:	f000 fc58 	bl	8003964 <_ZN14BitmapDatabase11getInstanceEv>
 80030b4:	2400      	movs	r4, #0
 80030b6:	4605      	mov	r5, r0
 80030b8:	f000 fc58 	bl	800396c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80030bc:	4623      	mov	r3, r4
 80030be:	4601      	mov	r1, r0
 80030c0:	4622      	mov	r2, r4
 80030c2:	4628      	mov	r0, r5
 80030c4:	9400      	str	r4, [sp, #0]
 80030c6:	f01a f8d5 	bl	801d274 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80030ca:	4b27      	ldr	r3, [pc, #156]	@ (8003168 <touchgfx_init+0xbc>)
 80030cc:	4a27      	ldr	r2, [pc, #156]	@ (800316c <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80030ce:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80030d0:	4d27      	ldr	r5, [pc, #156]	@ (8003170 <touchgfx_init+0xc4>)
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f005 f972 	bl	80083bc <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80030d8:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <touchgfx_init+0xc8>)
 80030da:	4a27      	ldr	r2, [pc, #156]	@ (8003178 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80030dc:	4827      	ldr	r0, [pc, #156]	@ (800317c <touchgfx_init+0xd0>)
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	f019 ff74 	bl	801cfcc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	f3bf 8f5b 	dmb	ish
 80030ea:	07db      	lsls	r3, r3, #31
 80030ec:	d436      	bmi.n	800315c <touchgfx_init+0xb0>
 80030ee:	4628      	mov	r0, r5
 80030f0:	f024 fef0 	bl	8027ed4 <__cxa_guard_acquire>
 80030f4:	b390      	cbz	r0, 800315c <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80030f6:	4c22      	ldr	r4, [pc, #136]	@ (8003180 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 80030f8:	4f22      	ldr	r7, [pc, #136]	@ (8003184 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80030fa:	4b23      	ldr	r3, [pc, #140]	@ (8003188 <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 80030fc:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003100:	f107 0618 	add.w	r6, r7, #24
          screenStorage(scr),
 8003104:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003108:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800310a:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800310c:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003110:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003112:	6126      	str	r6, [r4, #16]
 8003114:	f00e fb4c 	bl	80117b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003118:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <touchgfx_init+0xe0>)
 800311a:	4640      	mov	r0, r8
 800311c:	6163      	str	r3, [r4, #20]
 800311e:	f00e fb47 	bl	80117b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <touchgfx_init+0xe4>)
 8003124:	4638      	mov	r0, r7
 8003126:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003128:	f00e fb42 	bl	80117b0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800312c:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003130:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <touchgfx_init+0xe8>)
 8003132:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
 8003136:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
 800313a:	f005 fb33 	bl	80087a4 <_ZN5ModelC1Ev>
 800313e:	4622      	mov	r2, r4
 8003140:	f107 0114 	add.w	r1, r7, #20
 8003144:	4630      	mov	r0, r6
 8003146:	f005 fae7 	bl	8008718 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800314a:	4630      	mov	r0, r6
 800314c:	f004 fb5c 	bl	8007808 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8003150:	4811      	ldr	r0, [pc, #68]	@ (8003198 <touchgfx_init+0xec>)
 8003152:	f025 fa53 	bl	80285fc <atexit>
 8003156:	4628      	mov	r0, r5
 8003158:	f024 fec8 	bl	8027eec <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800315c:	480f      	ldr	r0, [pc, #60]	@ (800319c <touchgfx_init+0xf0>)
}
 800315e:	b002      	add	sp, #8
 8003160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8003164:	f7fe bcd8 	b.w	8001b18 <_ZN11TouchGFXHAL10initializeEv>
 8003168:	2402854c 	.word	0x2402854c
 800316c:	24009e4c 	.word	0x24009e4c
 8003170:	2400ac84 	.word	0x2400ac84
 8003174:	24009e6c 	.word	0x24009e6c
 8003178:	24009e50 	.word	0x24009e50
 800317c:	24000034 	.word	0x24000034
 8003180:	2400ac88 	.word	0x2400ac88
 8003184:	2400e138 	.word	0x2400e138
 8003188:	0802a07c 	.word	0x0802a07c
 800318c:	08029fe0 	.word	0x08029fe0
 8003190:	0802a014 	.word	0x0802a014
 8003194:	0802a048 	.word	0x0802a048
 8003198:	08003085 	.word	0x08003085
 800319c:	24009dd0 	.word	0x24009dd0

080031a0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80031a0:	4770      	bx	lr
	...

080031a4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <touchgfx_taskEntry+0x8>)
 80031a6:	f7fe bcc9 	b.w	8001b3c <_ZN11TouchGFXHAL9taskEntryEv>
 80031aa:	bf00      	nop
 80031ac:	24009dd0 	.word	0x24009dd0

080031b0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80031b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80031b2:	4c0e      	ldr	r4, [pc, #56]	@ (80031ec <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80031b6:	4e0f      	ldr	r6, [pc, #60]	@ (80031f4 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80031b8:	4620      	mov	r0, r4
static LCD24bpp display;
 80031ba:	4d0f      	ldr	r5, [pc, #60]	@ (80031f8 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80031bc:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80031be:	f7ff fe2f 	bl	8002e20 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80031c2:	4628      	mov	r0, r5
 80031c4:	f01d fef8 	bl	8020fb8 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80031c8:	480c      	ldr	r0, [pc, #48]	@ (80031fc <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80031ca:	f017 fc35 	bl	801aa38 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80031ce:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031d6:	4621      	mov	r1, r4
 80031d8:	4809      	ldr	r0, [pc, #36]	@ (8003200 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80031da:	e9cd 3200 	strd	r3, r2, [sp]
 80031de:	4633      	mov	r3, r6
 80031e0:	462a      	mov	r2, r5
 80031e2:	f7fe fd3f 	bl	8001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80031e6:	b002      	add	sp, #8
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
 80031ea:	bf00      	nop
 80031ec:	24009ed8 	.word	0x24009ed8
 80031f0:	080297b4 	.word	0x080297b4
 80031f4:	2400ac80 	.word	0x2400ac80
 80031f8:	24009e6c 	.word	0x24009e6c
 80031fc:	24009e50 	.word	0x24009e50
 8003200:	24009dd0 	.word	0x24009dd0

08003204 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003204:	4801      	ldr	r0, [pc, #4]	@ (800320c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003206:	f7ff bc57 	b.w	8002ab8 <_ZN8STM32DMAD1Ev>
 800320a:	bf00      	nop
 800320c:	24009ed8 	.word	0x24009ed8

08003210 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003210:	2000      	movs	r0, #0
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003214:	8081      	strh	r1, [r0, #4]
    }
 8003216:	4770      	bx	lr

08003218 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003218:	80c1      	strh	r1, [r0, #6]
    }
 800321a:	4770      	bx	lr

0800321c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800321c:	8101      	strh	r1, [r0, #8]
    }
 800321e:	4770      	bx	lr

08003220 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003220:	8141      	strh	r1, [r0, #10]
    }
 8003222:	4770      	bx	lr

08003224 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003224:	4770      	bx	lr

08003226 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003226:	4770      	bx	lr

08003228 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003228:	4770      	bx	lr

0800322a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800322a:	4770      	bx	lr

0800322c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800322c:	4770      	bx	lr

0800322e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800322e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003230:	88c4      	ldrh	r4, [r0, #6]
 8003232:	6803      	ldr	r3, [r0, #0]
 8003234:	1b12      	subs	r2, r2, r4
 8003236:	8884      	ldrh	r4, [r0, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323a:	1b09      	subs	r1, r1, r4
 800323c:	b212      	sxth	r2, r2
    }
 800323e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003242:	b209      	sxth	r1, r1
 8003244:	4718      	bx	r3

08003246 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800324a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003256:	6010      	str	r0, [r2, #0]
    }
 8003258:	4770      	bx	lr

0800325a <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800325a:	2000      	movs	r0, #0
 800325c:	4770      	bx	lr

0800325e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800325e:	888b      	ldrh	r3, [r1, #4]
 8003260:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003262:	2001      	movs	r0, #1
 8003264:	4770      	bx	lr

08003266 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003266:	4770      	bx	lr

08003268 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003268:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 800326c:	4770      	bx	lr

0800326e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800326e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003272:	4770      	bx	lr

08003274 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003274:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003276:	b510      	push	{r4, lr}
        return rect.width;
 8003278:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 800327c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003280:	8002      	strh	r2, [r0, #0]
 8003282:	8042      	strh	r2, [r0, #2]
 8003284:	8084      	strh	r4, [r0, #4]
 8003286:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003288:	bd10      	pop	{r4, pc}

0800328a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800328a:	2200      	movs	r2, #0
 800328c:	8002      	strh	r2, [r0, #0]
 800328e:	8042      	strh	r2, [r0, #2]
 8003290:	8082      	strh	r2, [r0, #4]
 8003292:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003294:	4770      	bx	lr

08003296 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 8003296:	7701      	strb	r1, [r0, #28]
    }
 8003298:	4770      	bx	lr

0800329a <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800329a:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 800329e:	4770      	bx	lr

080032a0 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80032a0:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80032a4:	4770      	bx	lr

080032a6 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80032a6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80032aa:	4770      	bx	lr

080032ac <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80032ac:	2001      	movs	r0, #1
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80032b0:	3098      	adds	r0, #152	@ 0x98
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80032b4:	308c      	adds	r0, #140	@ 0x8c
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80032b8:	3084      	adds	r0, #132	@ 0x84
 80032ba:	4770      	bx	lr

080032bc <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80032bc:	4770      	bx	lr
	...

080032c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	4b02      	ldr	r3, [pc, #8]	@ (80032cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80032c2:	2290      	movs	r2, #144	@ 0x90
 80032c4:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80032d0:	4770      	bx	lr

080032d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80032d2:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80032d4:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80032d8:	4770      	bx	lr

080032da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80032da:	4770      	bx	lr

080032dc <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032dc:	4770      	bx	lr

080032de <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80032de:	4770      	bx	lr

080032e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80032e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80032e4:	4611      	mov	r1, r2
 80032e6:	6840      	ldr	r0, [r0, #4]
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4718      	bx	r3

080032ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80032ee:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80032f2:	4770      	bx	lr

080032f4 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	212c      	movs	r1, #44	@ 0x2c
 80032fa:	f024 fde9 	bl	8027ed0 <_ZdlPvj>
 80032fe:	4620      	mov	r0, r4
 8003300:	bd10      	pop	{r4, pc}

08003302 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	2148      	movs	r1, #72	@ 0x48
 8003308:	f024 fde2 	bl	8027ed0 <_ZdlPvj>
 800330c:	4620      	mov	r0, r4
 800330e:	bd10      	pop	{r4, pc}

08003310 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003310:	b510      	push	{r4, lr}
 8003312:	4604      	mov	r4, r0
 8003314:	21bc      	movs	r1, #188	@ 0xbc
 8003316:	f024 fddb 	bl	8027ed0 <_ZdlPvj>
 800331a:	4620      	mov	r0, r4
 800331c:	bd10      	pop	{r4, pc}
	...

08003320 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4604      	mov	r4, r0
    HAL::initialize();
 8003324:	f00f fd73 	bl	8012e0e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800332c:	f016 fa0c 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8003330:	4601      	mov	r1, r0
 8003332:	4620      	mov	r0, r4
 8003334:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	4908      	ldr	r1, [pc, #32]	@ (800335c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800333a:	4620      	mov	r0, r4
 800333c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003340:	2300      	movs	r3, #0
 8003342:	461a      	mov	r2, r3
 8003344:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800334a:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800334e:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003350:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003356:	4a05      	ldr	r2, [pc, #20]	@ (800336c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	d0119400 	.word	0xd0119400
 8003360:	2400e3b4 	.word	0x2400e3b4
 8003364:	2400e36c 	.word	0x2400e36c
 8003368:	d0000000 	.word	0xd0000000
 800336c:	00119400 	.word	0x00119400

08003370 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8003376:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	f00c f8f2 	bl	800f564 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003380:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003382:	f00c f912 	bl	800f5aa <osMutexRelease>
        streams[handle].isActive = false;
 8003386:	2324      	movs	r3, #36	@ 0x24
 8003388:	fb03 4505 	mla	r5, r3, r5, r4
 800338c:	2300      	movs	r3, #0
 800338e:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003392:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003396:	b90b      	cbnz	r3, 800339c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003398:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800339a:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 800339c:	bd38      	pop	{r3, r4, r5, pc}

0800339e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800339e:	f00f bce6 	b.w	8012d6e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033a2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033a2:	f00f be48 	b.w	8013036 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80033a6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80033aa:	b112      	cbz	r2, 80033b2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80033ac:	6803      	ldr	r3, [r0, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4718      	bx	r3
    }
 80033b2:	4770      	bx	lr

080033b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80033b6:	6953      	ldr	r3, [r2, #20]
 80033b8:	03db      	lsls	r3, r3, #15
{
 80033ba:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033bc:	d51e      	bpl.n	80033fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80033c4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80033c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033cc:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033d0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80033d4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80033d8:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033da:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80033de:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80033e4:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80033e6:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80033ea:	d2f9      	bcs.n	80033e0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80033ec:	3b20      	subs	r3, #32
 80033ee:	f113 0f20 	cmn.w	r3, #32
 80033f2:	d1f2      	bne.n	80033da <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80033f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033f8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003404:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003406:	b131      	cbz	r1, 8003416 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800340a:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800340e:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003410:	4804      	ldr	r0, [pc, #16]	@ (8003424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003412:	f025 f8d5 	bl	80285c0 <__assert_func>
    }
 8003416:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800341a:	bd08      	pop	{r3, pc}
 800341c:	0802a088 	.word	0x0802a088
 8003420:	0802a09c 	.word	0x0802a09c
 8003424:	0802a226 	.word	0x0802a226

08003428 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003428:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800342a:	b131      	cbz	r1, 800343a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800342e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003432:	4a06      	ldr	r2, [pc, #24]	@ (800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003434:	4806      	ldr	r0, [pc, #24]	@ (8003450 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003436:	f025 f8c3 	bl	80285c0 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800343a:	6840      	ldr	r0, [r0, #4]
 800343c:	4611      	mov	r1, r2
 800343e:	6803      	ldr	r3, [r0, #0]
    }
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	4718      	bx	r3
 8003448:	0802a088 	.word	0x0802a088
 800344c:	0802a270 	.word	0x0802a270
 8003450:	0802a226 	.word	0x0802a226

08003454 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003454:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003456:	b129      	cbz	r1, 8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 800345a:	2179      	movs	r1, #121	@ 0x79
 800345c:	4a03      	ldr	r2, [pc, #12]	@ (800346c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 800345e:	4804      	ldr	r0, [pc, #16]	@ (8003470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003460:	f025 f8ae 	bl	80285c0 <__assert_func>
    }
 8003464:	68c0      	ldr	r0, [r0, #12]
 8003466:	bd08      	pop	{r3, pc}
 8003468:	0802a088 	.word	0x0802a088
 800346c:	0802a41e 	.word	0x0802a41e
 8003470:	0802a226 	.word	0x0802a226

08003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003474:	b510      	push	{r4, lr}
 8003476:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003478:	b129      	cbz	r1, 8003486 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 800347c:	21a2      	movs	r1, #162	@ 0xa2
 800347e:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003480:	4819      	ldr	r0, [pc, #100]	@ (80034e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003482:	f025 f89d 	bl	80285c0 <__assert_func>
        switch (cmd)
 8003486:	2a05      	cmp	r2, #5
 8003488:	d815      	bhi.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800348a:	e8df f002 	tbb	[pc, r2]
 800348e:	1103      	.short	0x1103
 8003490:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003494:	6840      	ldr	r0, [r0, #4]
 8003496:	6803      	ldr	r3, [r0, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	4798      	blx	r3
 800349c:	b158      	cbz	r0, 80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 800349e:	2301      	movs	r3, #1
 80034a0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80034a4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80034a8:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80034aa:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80034ae:	e002      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80034b6:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80034b8:	6203      	str	r3, [r0, #32]
 80034ba:	e7f5      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80034bc:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80034be:	2301      	movs	r3, #1
 80034c0:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80034c4:	e7f0      	b.n	80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	6203      	str	r3, [r0, #32]
            break;
 80034d0:	e7f1      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80034d2:	3b00      	subs	r3, #0
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80034dc:	e7eb      	b.n	80034b6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80034de:	bf00      	nop
 80034e0:	0802a088 	.word	0x0802a088
 80034e4:	0802a5d3 	.word	0x0802a5d3
 80034e8:	0802a226 	.word	0x0802a226

080034ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80034ec:	b510      	push	{r4, lr}
 80034ee:	460c      	mov	r4, r1
 80034f0:	4611      	mov	r1, r2
 80034f2:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80034f4:	b12c      	cbz	r4, 8003502 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 80034f8:	2190      	movs	r1, #144	@ 0x90
 80034fa:	4a06      	ldr	r2, [pc, #24]	@ (8003514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 80034fc:	4806      	ldr	r0, [pc, #24]	@ (8003518 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 80034fe:	f025 f85f 	bl	80285c0 <__assert_func>
        stream.frameNumber = 0;
 8003502:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003504:	6840      	ldr	r0, [r0, #4]
 8003506:	6803      	ldr	r3, [r0, #0]
    }
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4718      	bx	r3
 8003510:	0802a088 	.word	0x0802a088
 8003514:	0802a7a7 	.word	0x0802a7a7
 8003518:	0802a226 	.word	0x0802a226

0800351c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800351c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800351e:	b129      	cbz	r1, 800352c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003522:	2182      	movs	r1, #130	@ 0x82
 8003524:	4a05      	ldr	r2, [pc, #20]	@ (800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003526:	4806      	ldr	r0, [pc, #24]	@ (8003540 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003528:	f025 f84a 	bl	80285c0 <__assert_func>
        stream.tickCount = 0;
 800352c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003530:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003534:	bd08      	pop	{r3, pc}
 8003536:	bf00      	nop
 8003538:	0802a088 	.word	0x0802a088
 800353c:	0802a982 	.word	0x0802a982
 8003540:	0802a226 	.word	0x0802a226

08003544 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003544:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 800354c:	b153      	cbz	r3, 8003564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800354e:	f04f 31ff 	mov.w	r1, #4294967295
 8003552:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003554:	f00c f806 	bl	800f564 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003558:	2300      	movs	r3, #0
 800355a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 800355e:	2301      	movs	r3, #1
 8003560:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003564:	bd10      	pop	{r4, pc}

08003566 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003566:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800356a:	b11a      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800356c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003570:	b102      	cbz	r2, 8003574 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003572:	6018      	str	r0, [r3, #0]
        }
    }
 8003574:	4770      	bx	lr
	...

08003578 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003578:	b510      	push	{r4, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800357e:	b129      	cbz	r1, 800358c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003582:	21d0      	movs	r1, #208	@ 0xd0
 8003584:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003586:	4814      	ldr	r0, [pc, #80]	@ (80035d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003588:	f025 f81a 	bl	80285c0 <__assert_func>
        if (stream.isPlaying)
 800358c:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003590:	b133      	cbz	r3, 80035a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800359a:	6963      	ldr	r3, [r4, #20]
 800359c:	4413      	add	r3, r2
 800359e:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80035a0:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80035a4:	b90b      	cbnz	r3, 80035aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80035a6:	2001      	movs	r0, #1
    }
 80035a8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80035ae:	6803      	ldr	r3, [r0, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80035b4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80035b6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80035ba:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80035be:	2800      	cmp	r0, #0
 80035c0:	d1f1      	bne.n	80035a6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80035c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80035ca:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80035ce:	e7eb      	b.n	80035a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80035d0:	0802a088 	.word	0x0802a088
 80035d4:	0802ab3e 	.word	0x0802ab3e
 80035d8:	0802a226 	.word	0x0802a226
 80035dc:	240284e8 	.word	0x240284e8

080035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80035e2:	4c1a      	ldr	r4, [pc, #104]	@ (800364c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 80035e4:	4605      	mov	r5, r0
    HAL::endFrame();
 80035e6:	f00f fc05 	bl	8012df4 <_ZN8touchgfx3HAL8endFrameEv>
 80035ea:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80035ee:	b913      	cbnz	r3, 80035f6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 80035f0:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80035f4:	b1ab      	cbz	r3, 8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80035f6:	69e1      	ldr	r1, [r4, #28]
 80035f8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80035fc:	4353      	muls	r3, r2
 80035fe:	6922      	ldr	r2, [r4, #16]
 8003600:	434a      	muls	r2, r1
 8003602:	4293      	cmp	r3, r2
 8003604:	d30d      	bcc.n	8003622 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003606:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800360a:	b138      	cbz	r0, 800361c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003612:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003614:	bf98      	it	ls
 8003616:	f102 32ff 	addls.w	r2, r2, #4294967295
 800361a:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 800361c:	2301      	movs	r3, #1
 800361e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003622:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003624:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003626:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800362a:	f00c f853 	bl	800f6d4 <osSemaphoreRelease>
        if (uiHasMutex)
 800362e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003632:	b12b      	cbz	r3, 8003640 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003634:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003636:	f00b ffb8 	bl	800f5aa <osMutexRelease>
            uiHasMutex = false;
 800363a:	2300      	movs	r3, #0
 800363c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003640:	6868      	ldr	r0, [r5, #4]
 8003642:	6803      	ldr	r3, [r0, #0]
}
 8003644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4718      	bx	r3
 800364c:	2400e36c 	.word	0x2400e36c

08003650 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003652:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800365a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800365e:	f3bf 8f6f 	isb	sy
}
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100

08003668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	4b02      	ldr	r3, [pc, #8]	@ (8003674 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800366a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 800367c:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003680:	b9d8      	cbnz	r0, 80036ba <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003682:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003686:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003688:	2501      	movs	r5, #1
                streams[i] = Stream();
 800368a:	60d8      	str	r0, [r3, #12]
 800368c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800368e:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003692:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003694:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003698:	6158      	str	r0, [r3, #20]
 800369a:	6198      	str	r0, [r3, #24]
 800369c:	61d8      	str	r0, [r3, #28]
 800369e:	6218      	str	r0, [r3, #32]
 80036a0:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80036a2:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80036a4:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80036a8:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80036ac:	443c      	add	r4, r7
 80036ae:	42a2      	cmp	r2, r4
 80036b0:	d90a      	bls.n	80036c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80036b4:	2152      	movs	r1, #82	@ 0x52
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80036b8:	e003      	b.n	80036c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80036bc:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80036c0:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80036c2:	480b      	ldr	r0, [pc, #44]	@ (80036f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80036c4:	f024 ff7c 	bl	80285c0 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80036c8:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80036cc:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80036d0:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80036d4:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80036d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80036da:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80036dc:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e0:	0802ae96 	.word	0x0802ae96
 80036e4:	0802aed1 	.word	0x0802aed1
 80036e8:	0802acdf 	.word	0x0802acdf
 80036ec:	0802ad0f 	.word	0x0802ad0f
 80036f0:	0802a226 	.word	0x0802a226

080036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 80036f4:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80036f6:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80036f8:	4e12      	ldr	r6, [pc, #72]	@ (8003744 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 80036fa:	4604      	mov	r4, r0
 80036fc:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003700:	6003      	str	r3, [r0, #0]
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003708:	b10a      	cbz	r2, 800370e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800370a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800370c:	b900      	cbnz	r0, 8003710 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 800370e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4798      	blx	r3
 8003716:	1e43      	subs	r3, r0, #1
 8003718:	425d      	negs	r5, r3
 800371a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003720:	b130      	cbz	r0, 8003730 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	4798      	blx	r3
 8003728:	2801      	cmp	r0, #1
 800372a:	bf08      	it	eq
 800372c:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003730:	b92d      	cbnz	r5, 800373e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003734:	2127      	movs	r1, #39	@ 0x27
 8003736:	4a06      	ldr	r2, [pc, #24]	@ (8003750 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003738:	4806      	ldr	r0, [pc, #24]	@ (8003754 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800373a:	f024 ff41 	bl	80285c0 <__assert_func>
    }
 800373e:	4620      	mov	r0, r4
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	bf00      	nop
 8003744:	240284e8 	.word	0x240284e8
 8003748:	0802b184 	.word	0x0802b184
 800374c:	0802b074 	.word	0x0802b074
 8003750:	0802b0d2 	.word	0x0802b0d2
 8003754:	0802b10b 	.word	0x0802b10b

08003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003758:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 800375a:	4e24      	ldr	r6, [pc, #144]	@ (80037ec <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 800375c:	6835      	ldr	r5, [r6, #0]
 800375e:	f3bf 8f5b 	dmb	ish
 8003762:	f015 0501 	ands.w	r5, r5, #1
 8003766:	d13f      	bne.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003768:	4630      	mov	r0, r6
 800376a:	f024 fbb3 	bl	8027ed4 <__cxa_guard_acquire>
 800376e:	2800      	cmp	r0, #0
 8003770:	d03a      	beq.n	80037e8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003772:	4c1f      	ldr	r4, [pc, #124]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003774:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003776:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800377a:	6125      	str	r5, [r4, #16]
 800377c:	84e5      	strh	r5, [r4, #38]	@ 0x26
 800377e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003780:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003782:	e9c4 3500 	strd	r3, r5, [r4]
 8003786:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800378a:	f017 fbb4 	bl	801aef6 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 800378e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003792:	f011 fd5f 	bl	8015254 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003796:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003798:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 800379a:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800379c:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 800379e:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80037a2:	f7ff ffa7 	bl	80036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80037a6:	4b16      	ldr	r3, [pc, #88]	@ (8003800 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80037a8:	4816      	ldr	r0, [pc, #88]	@ (8003804 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80037aa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80037ae:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80037b0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80037b4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80037b8:	2364      	movs	r3, #100	@ 0x64
 80037ba:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80037be:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80037c2:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 80037cc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 80037d0:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 80037d4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 80037da:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80037de:	f024 ff0d 	bl	80285fc <atexit>
 80037e2:	4630      	mov	r0, r6
 80037e4:	f024 fb82 	bl	8027eec <__cxa_guard_release>
}
 80037e8:	4801      	ldr	r0, [pc, #4]	@ (80037f0 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	2400e2ac 	.word	0x2400e2ac
 80037f0:	2400e2b0 	.word	0x2400e2b0
 80037f4:	0802cb1c 	.word	0x0802cb1c
 80037f8:	0802b1a4 	.word	0x0802b1a4
 80037fc:	0802b21c 	.word	0x0802b21c
 8003800:	0802cb68 	.word	0x0802cb68
 8003804:	080032bd 	.word	0x080032bd
 8003808:	0802cba0 	.word	0x0802cba0

0800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 800380c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003810:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003812:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003814:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003818:	f04f 31ff 	mov.w	r1, #4294967295
 800381c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800381e:	f00b ff2d 	bl	800f67c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003822:	f04f 31ff 	mov.w	r1, #4294967295
 8003826:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003828:	f00b fe9c 	bl	800f564 <osMutexAcquire>
                if (stream.doDecode)
 800382c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003830:	b343      	cbz	r3, 8003884 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003832:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003834:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003838:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 800383a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 800383e:	f1b8 0f00 	cmp.w	r8, #0
 8003842:	d023      	beq.n	800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	4641      	mov	r1, r8
 8003848:	4628      	mov	r0, r5
 800384a:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003856:	9700      	str	r7, [sp, #0]
 8003858:	4628      	mov	r0, r5
 800385a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800385e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003862:	68a1      	ldr	r1, [r4, #8]
 8003864:	47c0      	blx	r8
                    stream.frameCount++;
 8003866:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003868:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 800386c:	3301      	adds	r3, #1
 800386e:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003870:	b1f0      	cbz	r0, 80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003872:	682b      	ldr	r3, [r5, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	4798      	blx	r3
 800387a:	3801      	subs	r0, #1
                    stream.doDecode = false;
 800387c:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800387e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003880:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003884:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003886:	f00b fe90 	bl	800f5aa <osMutexRelease>
        while (1)
 800388a:	e7c5      	b.n	8003818 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 800388c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800388e:	2a00      	cmp	r2, #0
 8003890:	d0de      	beq.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003892:	4628      	mov	r0, r5
 8003894:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003898:	4798      	blx	r3
 800389a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800389c:	4401      	add	r1, r0
 800389e:	4628      	mov	r0, r5
 80038a0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80038a6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80038aa:	4413      	add	r3, r2
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	e7cf      	b.n	8003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80038b0:	2001      	movs	r0, #1
 80038b2:	e7e3      	b.n	800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080038b4 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80038b4:	4801      	ldr	r0, [pc, #4]	@ (80038bc <videoTaskFunc+0x8>)
{
 80038b6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80038b8:	f7ff ffa8 	bl	800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80038bc:	2400e36c 	.word	0x2400e36c

080038c0 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80038c0:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80038c2:	4814      	ldr	r0, [pc, #80]	@ (8003914 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038c4:	2500      	movs	r5, #0
 80038c6:	f7fe fbeb 	bl	80020a0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ca:	4c13      	ldr	r4, [pc, #76]	@ (8003918 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 80038ce:	462a      	mov	r2, r5
 80038d0:	4629      	mov	r1, r5
 80038d2:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038da:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038dc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038de:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038e0:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80038e4:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80038e8:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80038ec:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80038f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80038f4:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80038f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 80038fc:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003900:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003904:	f00b fe70 	bl	800f5e8 <osSemaphoreNew>
 8003908:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 800390a:	4628      	mov	r0, r5
 800390c:	f00b fdf5 	bl	800f4fa <osMutexNew>
 8003910:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	2400e3b4 	.word	0x2400e3b4
 8003918:	2400e36c 	.word	0x2400e36c
 800391c:	0802b268 	.word	0x0802b268

08003920 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_17_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003920:	4770      	bx	lr

08003922 <_ZN23ApplicationFontProviderD0Ev>:
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	2104      	movs	r1, #4
 8003928:	f024 fad2 	bl	8027ed0 <_ZdlPvj>
 800392c:	4620      	mov	r0, r4
 800392e:	bd10      	pop	{r4, pc}

08003930 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003930:	b508      	push	{r3, lr}
    switch (typography)
 8003932:	2903      	cmp	r1, #3
 8003934:	d813      	bhi.n	800395e <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8003936:	e8df f001 	tbb	[pc, r1]
 800393a:	0602      	.short	0x0602
 800393c:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800393e:	f004 fd89 	bl	8008454 <_ZN17TypedTextDatabase8getFontsEv>
 8003942:	6800      	ldr	r0, [r0, #0]
        // verdana_17_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8003944:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003946:	f004 fd85 	bl	8008454 <_ZN17TypedTextDatabase8getFontsEv>
 800394a:	6840      	ldr	r0, [r0, #4]
 800394c:	e7fa      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800394e:	f004 fd81 	bl	8008454 <_ZN17TypedTextDatabase8getFontsEv>
 8003952:	6880      	ldr	r0, [r0, #8]
 8003954:	e7f6      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003956:	f004 fd7d 	bl	8008454 <_ZN17TypedTextDatabase8getFontsEv>
 800395a:	68c0      	ldr	r0, [r0, #12]
 800395c:	e7f2      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800395e:	2000      	movs	r0, #0
 8003960:	e7f0      	b.n	8003944 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08003964 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003964:	4800      	ldr	r0, [pc, #0]	@ (8003968 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003966:	4770      	bx	lr
 8003968:	0802b2b8 	.word	0x0802b2b8

0800396c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800396c:	200c      	movs	r0, #12
 800396e:	4770      	bx	lr

08003970 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003970:	b513      	push	{r0, r1, r4, lr}
 8003972:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003974:	b151      	cbz	r1, 800398c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800397a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800397c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003980:	689c      	ldr	r4, [r3, #8]
 8003982:	f10d 0303 	add.w	r3, sp, #3
 8003986:	47a0      	blx	r4
        return glyph;
    }
 8003988:	b002      	add	sp, #8
 800398a:	bd10      	pop	{r4, pc}
            return 0;
 800398c:	4608      	mov	r0, r1
 800398e:	e7fb      	b.n	8003988 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003990 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003990:	89c0      	ldrh	r0, [r0, #14]
 8003992:	4770      	bx	lr

08003994 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003994:	8a00      	ldrh	r0, [r0, #16]
 8003996:	4770      	bx	lr

08003998 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003998:	88c0      	ldrh	r0, [r0, #6]
 800399a:	4770      	bx	lr

0800399c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800399c:	8880      	ldrh	r0, [r0, #4]
 800399e:	4770      	bx	lr

080039a0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80039a0:	7a80      	ldrb	r0, [r0, #10]
    }
 80039a2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80039a6:	4770      	bx	lr

080039a8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80039a8:	7a80      	ldrb	r0, [r0, #10]
    }
 80039aa:	09c0      	lsrs	r0, r0, #7
 80039ac:	4770      	bx	lr

080039ae <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80039ae:	2000      	movs	r0, #0
 80039b0:	4770      	bx	lr
	...

080039b4 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80039b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80039bc <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	00000000 	.word	0x00000000

080039c0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80039c0:	4770      	bx	lr

080039c2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80039c2:	4770      	bx	lr

080039c4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80039c4:	4770      	bx	lr

080039c6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80039c6:	4770      	bx	lr

080039c8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80039c8:	4770      	bx	lr

080039ca <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80039ca:	4770      	bx	lr

080039cc <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80039cc:	b530      	push	{r4, r5, lr}
 80039ce:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80039d0:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80039d2:	4604      	mov	r4, r0
        rect.width = width;
 80039d4:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80039d6:	466d      	mov	r5, sp
 80039d8:	4601      	mov	r1, r0
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039de:	343c      	adds	r4, #60	@ 0x3c
 80039e0:	4628      	mov	r0, r5
 80039e2:	4798      	blx	r3
 80039e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80039ec:	b005      	add	sp, #20
 80039ee:	bd30      	pop	{r4, r5, pc}

080039f0 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80039f0:	b530      	push	{r4, r5, lr}
 80039f2:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80039f4:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80039f6:	4604      	mov	r4, r0
        rect.height = height;
 80039f8:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80039fa:	466d      	mov	r5, sp
 80039fc:	4601      	mov	r1, r0
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a02:	343c      	adds	r4, #60	@ 0x3c
 8003a04:	4628      	mov	r0, r5
 8003a06:	4798      	blx	r3
 8003a08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003a10:	b005      	add	sp, #20
 8003a12:	bd30      	pop	{r4, r5, pc}

08003a14 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8003a14:	2200      	movs	r2, #0
 8003a16:	8002      	strh	r2, [r0, #0]
 8003a18:	8042      	strh	r2, [r0, #2]
 8003a1a:	8082      	strh	r2, [r0, #4]
 8003a1c:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003a1e:	4770      	bx	lr

08003a20 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003a20:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003a24:	4770      	bx	lr

08003a26 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003a26:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	4604      	mov	r4, r0
        setX(x);
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003a2e:	4615      	mov	r5, r2
        setX(x);
 8003a30:	4798      	blx	r3
        setBaselineY(baselineY);
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8003a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003a3e:	4718      	bx	r3

08003a40 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003a40:	2000      	movs	r0, #0
 8003a42:	4770      	bx	lr

08003a44 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003a44:	2200      	movs	r2, #0
 8003a46:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003a4a:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003a4c:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 8003a50:	4770      	bx	lr

08003a52 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003a52:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003a54:	4770      	bx	lr

08003a56 <_ZN18CalculatorViewBase18sendToCalculator_0Ev>:
     * Virtual Action Handlers
     */
    virtual void sendToCalculator_0()
    {
        // Override and implement this function in Calculator
    }
 8003a56:	4770      	bx	lr

08003a58 <_ZN18CalculatorViewBase18sendToCalculator_1Ev>:
    virtual void sendToCalculator_1()
    {
        // Override and implement this function in Calculator
    }
 8003a58:	4770      	bx	lr

08003a5a <_ZN18CalculatorViewBase18sendToCalculator_2Ev>:
    virtual void sendToCalculator_2()
    {
        // Override and implement this function in Calculator
    }
 8003a5a:	4770      	bx	lr

08003a5c <_ZN18CalculatorViewBase18sendToCalculator_3Ev>:
    virtual void sendToCalculator_3()
    {
        // Override and implement this function in Calculator
    }
 8003a5c:	4770      	bx	lr

08003a5e <_ZN18CalculatorViewBase18sendToCalculator_4Ev>:
    virtual void sendToCalculator_4()
    {
        // Override and implement this function in Calculator
    }
 8003a5e:	4770      	bx	lr

08003a60 <_ZN18CalculatorViewBase18sendToCalculator_5Ev>:
    virtual void sendToCalculator_5()
    {
        // Override and implement this function in Calculator
    }
 8003a60:	4770      	bx	lr

08003a62 <_ZN18CalculatorViewBase18sendToCalculator_6Ev>:
    virtual void sendToCalculator_6()
    {
        // Override and implement this function in Calculator
    }
 8003a62:	4770      	bx	lr

08003a64 <_ZN18CalculatorViewBase18sendToCalculator_7Ev>:
    virtual void sendToCalculator_7()
    {
        // Override and implement this function in Calculator
    }
 8003a64:	4770      	bx	lr

08003a66 <_ZN18CalculatorViewBase18sendToCalculator_8Ev>:
    virtual void sendToCalculator_8()
    {
        // Override and implement this function in Calculator
    }
 8003a66:	4770      	bx	lr

08003a68 <_ZN18CalculatorViewBase18sendToCalculator_9Ev>:
    virtual void sendToCalculator_9()
    {
        // Override and implement this function in Calculator
    }
 8003a68:	4770      	bx	lr

08003a6a <_ZN18CalculatorViewBase20sendToCalculator_AddEv>:
    virtual void sendToCalculator_Add()
    {
        // Override and implement this function in Calculator
    }
 8003a6a:	4770      	bx	lr

08003a6c <_ZN18CalculatorViewBase23sendToCalculator_EqualsEv>:
    virtual void sendToCalculator_Equals()
    {
        // Override and implement this function in Calculator
    }
 8003a6c:	4770      	bx	lr

08003a6e <_ZN18CalculatorViewBase23sendToCalculator_DeleteEv>:
    virtual void sendToCalculator_Delete()
    {
        // Override and implement this function in Calculator
    }
 8003a6e:	4770      	bx	lr

08003a70 <_ZN18CalculatorViewBase32sendToCalculator_OpenParenthesisEv>:
    virtual void sendToCalculator_OpenParenthesis()
    {
        // Override and implement this function in Calculator
    }
 8003a70:	4770      	bx	lr

08003a72 <_ZN18CalculatorViewBase33sendToCalculator_CloseParenthesisEv>:
    virtual void sendToCalculator_CloseParenthesis()
    {
        // Override and implement this function in Calculator
    }
 8003a72:	4770      	bx	lr

08003a74 <_ZN18CalculatorViewBase25sendToCalculator_SubtractEv>:
    virtual void sendToCalculator_Subtract()
    {
        // Override and implement this function in Calculator
    }
 8003a74:	4770      	bx	lr

08003a76 <_ZN18CalculatorViewBase25sendToCalculator_MultiplyEv>:
    virtual void sendToCalculator_Multiply()
    {
        // Override and implement this function in Calculator
    }
 8003a76:	4770      	bx	lr

08003a78 <_ZN18CalculatorViewBase23sendToCalculator_DivideEv>:
    virtual void sendToCalculator_Divide()
    {
        // Override and implement this function in Calculator
    }
 8003a78:	4770      	bx	lr

08003a7a <_ZN18CalculatorViewBase22sendToCalculator_CommaEv>:
    virtual void sendToCalculator_Comma()
    {
        // Override and implement this function in Calculator
    }
 8003a7a:	4770      	bx	lr

08003a7c <_ZN18CalculatorViewBase22sendToCalculator_ClearEv>:
    virtual void sendToCalculator_Clear()
    {
        // Override and implement this function in Calculator
    }
 8003a7c:	4770      	bx	lr

08003a7e <_ZN18CalculatorViewBaseD1Ev>:
}

CalculatorViewBase::~CalculatorViewBase()
{

}
 8003a7e:	4770      	bx	lr

08003a80 <_ZN18CalculatorViewBase11setupScreenEv>:

void CalculatorViewBase::setupScreen()
{

}
 8003a80:	4770      	bx	lr

08003a82 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type, typename T1>
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003a82:	4770      	bx	lr

08003a84 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED1Ev>:
 * receives a click event.
 *
 * @tparam T specifies the type to extend with the ClickListener behavior.
 */
template <class T>
class ClickListener : public T
 8003a84:	4770      	bx	lr

08003a86 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003a86:	4770      	bx	lr

08003a88 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
     *
     * @param  t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid
     */
    virtual void execute(T1 t1)
 8003a88:	b430      	push	{r4, r5}
    {
        (pobject->*pmemfun)(t1);
 8003a8a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003a8c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003a8e:	68c2      	ldr	r2, [r0, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	1055      	asrs	r5, r2, #1
 8003a94:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003a98:	07d2      	lsls	r2, r2, #31
 8003a9a:	bf48      	it	mi
 8003a9c:	5962      	ldrmi	r2, [r4, r5]
    }
 8003a9e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003aa0:	bf48      	it	mi
 8003aa2:	58d3      	ldrmi	r3, [r2, r3]
 8003aa4:	4718      	bx	r3

08003aa6 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    /**
     * Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 8003aa6:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003aa8:	6840      	ldr	r0, [r0, #4]
 8003aaa:	b130      	cbz	r0, 8003aba <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	b91a      	cbnz	r2, 8003ab8 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003ab0:	68d8      	ldr	r0, [r3, #12]
 8003ab2:	f000 0001 	and.w	r0, r0, #1
 8003ab6:	4770      	bx	lr
 8003ab8:	2001      	movs	r0, #1
    }
 8003aba:	4770      	bx	lr

08003abc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003abc:	b510      	push	{r4, lr}
 8003abe:	4604      	mov	r4, r0
    }
 8003ac0:	2108      	movs	r1, #8
 8003ac2:	f024 fa05 	bl	8027ed0 <_ZdlPvj>
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	bd10      	pop	{r4, pc}

08003aca <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003aca:	b510      	push	{r4, lr}
 8003acc:	4604      	mov	r4, r0
 8003ace:	214c      	movs	r1, #76	@ 0x4c
 8003ad0:	f024 f9fe 	bl	8027ed0 <_ZdlPvj>
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	bd10      	pop	{r4, pc}

08003ad8 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED0Ev>:
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	4604      	mov	r4, r0
 8003adc:	2130      	movs	r1, #48	@ 0x30
 8003ade:	f024 f9f7 	bl	8027ed0 <_ZdlPvj>
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	bd10      	pop	{r4, pc}

08003ae6 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	4604      	mov	r4, r0
 8003aea:	2110      	movs	r1, #16
 8003aec:	f024 f9f0 	bl	8027ed0 <_ZdlPvj>
 8003af0:	4620      	mov	r0, r4
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <_ZN18CalculatorViewBaseD0Ev>:
CalculatorViewBase::~CalculatorViewBase()
 8003af4:	b510      	push	{r4, lr}
 8003af6:	4604      	mov	r4, r0
}
 8003af8:	f44f 61de 	mov.w	r1, #1776	@ 0x6f0
 8003afc:	f024 f9e8 	bl	8027ed0 <_ZdlPvj>
 8003b00:	4620      	mov	r0, r4
 8003b02:	bd10      	pop	{r4, pc}

08003b04 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void CalculatorViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8003b04:	f500 7349 	add.w	r3, r0, #804	@ 0x324
 8003b08:	4299      	cmp	r1, r3
{
 8003b0a:	b570      	push	{r4, r5, r6, lr}
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	460d      	mov	r5, r1
    if (&src == &HomeButton)
 8003b10:	d103      	bne.n	8003b1a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003b12:	f015 fe19 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
 8003b16:	f003 fe77 	bl	8007808 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
    if (&src == &CalculatorButton_0)
 8003b1a:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8003b1e:	429d      	cmp	r5, r3
 8003b20:	d103      	bne.n	8003b2a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //CalculatorButtonClicked_0
        //When CalculatorButton_0 clicked call virtual function
        //Call sendToCalculator_0
        sendToCalculator_0();
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	4620      	mov	r0, r4
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_1)
 8003b2a:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 8003b2e:	429d      	cmp	r5, r3
 8003b30:	d103      	bne.n	8003b3a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
    {
        //CalculatorButtonClicked_1
        //When CalculatorButton_1 clicked call virtual function
        //Call sendToCalculator_1
        sendToCalculator_1();
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	4620      	mov	r0, r4
 8003b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b38:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_2)
 8003b3a:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 8003b3e:	429d      	cmp	r5, r3
 8003b40:	d103      	bne.n	8003b4a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
    {
        //CalculatorButtonClicked_2
        //When CalculatorButton_2 clicked call virtual function
        //Call sendToCalculator_2
        sendToCalculator_2();
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	4620      	mov	r0, r4
 8003b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b48:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_3)
 8003b4a:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8003b4e:	429d      	cmp	r5, r3
 8003b50:	d103      	bne.n	8003b5a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
    {
        //CalculatorButtonClicked_3
        //When CalculatorButton_3 clicked call virtual function
        //Call sendToCalculator_3
        sendToCalculator_3();
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	4620      	mov	r0, r4
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_4)
 8003b5a:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 8003b5e:	429d      	cmp	r5, r3
 8003b60:	d103      	bne.n	8003b6a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
    {
        //CalculatorButtonClicked_4
        //When CalculatorButton_4 clicked call virtual function
        //Call sendToCalculator_4
        sendToCalculator_4();
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	4620      	mov	r0, r4
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_5)
 8003b6a:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8003b6e:	429d      	cmp	r5, r3
 8003b70:	d103      	bne.n	8003b7a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x76>
    {
        //CalculatorButtonClicked_5
        //When CalculatorButton_5 clicked call virtual function
        //Call sendToCalculator_5
        sendToCalculator_5();
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	4620      	mov	r0, r4
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_6)
 8003b7a:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 8003b7e:	429d      	cmp	r5, r3
 8003b80:	d103      	bne.n	8003b8a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
    {
        //CalculatorButtonClicked_6
        //When CalculatorButton_6 clicked call virtual function
        //Call sendToCalculator_6
        sendToCalculator_6();
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	4620      	mov	r0, r4
 8003b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b88:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_7)
 8003b8a:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 8003b8e:	429d      	cmp	r5, r3
 8003b90:	d103      	bne.n	8003b9a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x96>
    {
        //CalculatorButtonClicked_7
        //When CalculatorButton_7 clicked call virtual function
        //Call sendToCalculator_7
        sendToCalculator_7();
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	4620      	mov	r0, r4
 8003b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b98:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_8)
 8003b9a:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 8003b9e:	429d      	cmp	r5, r3
 8003ba0:	d103      	bne.n	8003baa <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa6>
    {
        //CalculatorButtonClicked_8
        //When CalculatorButton_8 clicked call virtual function
        //Call sendToCalculator_8
        sendToCalculator_8();
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_9)
 8003baa:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	d103      	bne.n	8003bba <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb6>
    {
        //CalculatorButtonClicked_9
        //When CalculatorButton_9 clicked call virtual function
        //Call sendToCalculator_9
        sendToCalculator_9();
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Add)
 8003bba:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 8003bbe:	429d      	cmp	r5, r3
 8003bc0:	d103      	bne.n	8003bca <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc6>
    {
        //CalculatorButtonClicked_Add
        //When CalculatorButton_Add clicked call virtual function
        //Call sendToCalculator_Add
        sendToCalculator_Add();
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Equals)
 8003bca:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 8003bce:	429d      	cmp	r5, r3
 8003bd0:	d103      	bne.n	8003bda <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
    {
        //CalculatorButtonClicked_Equals
        //When CalculatorButton_Equals clicked call virtual function
        //Call sendToCalculator_Equals
        sendToCalculator_Equals();
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Delete)
 8003bda:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 8003bde:	429d      	cmp	r5, r3
 8003be0:	d103      	bne.n	8003bea <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe6>
    {
        //CalculatorButtonClicked_Delete
        //When CalculatorButton_Delete clicked call virtual function
        //Call sendToCalculator_Delete
        sendToCalculator_Delete();
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	4620      	mov	r0, r4
 8003be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_OpenParenthesis)
 8003bea:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
 8003bee:	429d      	cmp	r5, r3
 8003bf0:	d103      	bne.n	8003bfa <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf6>
    {
        //CalculatorButtonClicked_OpenParenthesis
        //When CalculatorButton_OpenParenthesis clicked call virtual function
        //Call sendToCalculator_OpenParenthesis
        sendToCalculator_OpenParenthesis();
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_CloseParenthesis)
 8003bfa:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8003bfe:	429d      	cmp	r5, r3
 8003c00:	d103      	bne.n	8003c0a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x106>
    {
        //CalculatorButtonClicked_CloseParenthesis
        //When CalculatorButton_CloseParenthesis clicked call virtual function
        //Call sendToCalculator_CloseParenthesis
        sendToCalculator_CloseParenthesis();
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	4620      	mov	r0, r4
 8003c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c08:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Subtract)
 8003c0a:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 8003c0e:	429d      	cmp	r5, r3
 8003c10:	d103      	bne.n	8003c1a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x116>
    {
        //CalculatorButtonClicked_Subtract
        //When CalculatorButton_Subtract clicked call virtual function
        //Call sendToCalculator_Subtract
        sendToCalculator_Subtract();
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	4620      	mov	r0, r4
 8003c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c18:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Multiply)
 8003c1a:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 8003c1e:	429d      	cmp	r5, r3
 8003c20:	d103      	bne.n	8003c2a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x126>
    {
        //CalculatorButtonClicked_Multiply
        //When CalculatorButton_Multiply clicked call virtual function
        //Call sendToCalculator_Multiply
        sendToCalculator_Multiply();
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	4620      	mov	r0, r4
 8003c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c28:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Divide)
 8003c2a:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 8003c2e:	429d      	cmp	r5, r3
 8003c30:	d103      	bne.n	8003c3a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x136>
    {
        //CalculatorButtonClicked_Divide
        //When CalculatorButton_Divide clicked call virtual function
        //Call sendToCalculator_Divide
        sendToCalculator_Divide();
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	4620      	mov	r0, r4
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Comma)
 8003c3a:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 8003c3e:	429d      	cmp	r5, r3
 8003c40:	d103      	bne.n	8003c4a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x146>
    {
        //CalculatorButtonClicked_Comma
        //When CalculatorButton_Comma clicked call virtual function
        //Call sendToCalculator_Comma
        sendToCalculator_Comma();
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	4620      	mov	r0, r4
 8003c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c48:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Clear)
 8003c4a:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
 8003c4e:	429d      	cmp	r5, r3
 8003c50:	d105      	bne.n	8003c5e <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x15a>
    {
        //CalculatorButtonClicked_Clear
        //When CalculatorButton_Clear clicked call virtual function
        //Call sendToCalculator_Clear
        sendToCalculator_Clear();
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	4620      	mov	r0, r4
 8003c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    }
}
 8003c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        sendToCalculator_Clear();
 8003c5c:	4718      	bx	r3
}
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}

08003c60 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 8003c60:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8003c62:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8003c66:	b10b      	cbz	r3, 8003c6c <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8003c68:	f7ff fb9d 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8003c6c:	bd08      	pop	{r3, pc}

08003c6e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003c6e:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003c70:	f7ff fb99 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003c74:	bd08      	pop	{r3, pc}

08003c76 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003c76:	b570      	push	{r4, r5, r6, lr}
 8003c78:	4604      	mov	r4, r0
    {
        T::handleClickEvent(event);
        if (clickAction && clickAction->isValid())
 8003c7a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
 8003c7c:	460d      	mov	r5, r1
        if (clickAction && clickAction->isValid())
 8003c7e:	b158      	cbz	r0, 8003c98 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
 8003c80:	6803      	ldr	r3, [r0, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4798      	blx	r3
 8003c86:	b138      	cbz	r0, 8003c98 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
        {
            clickAction->execute(*this, event);
 8003c88:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003c8a:	462a      	mov	r2, r5
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	6803      	ldr	r3, [r0, #0]
        }
    }
 8003c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            clickAction->execute(*this, event);
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4718      	bx	r3
    }
 8003c98:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c9c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003c9c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003c9e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003ca0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003ca2:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003ca6:	b28d      	uxth	r5, r1
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b92b      	cbnz	r3, 8003cb8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003cac:	4b10      	ldr	r3, [pc, #64]	@ (8003cf0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003cae:	216c      	movs	r1, #108	@ 0x6c
 8003cb0:	4a10      	ldr	r2, [pc, #64]	@ (8003cf4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003cb2:	4811      	ldr	r0, [pc, #68]	@ (8003cf8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003cb4:	f024 fc84 	bl	80285c0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003cb8:	4910      	ldr	r1, [pc, #64]	@ (8003cfc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003cba:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003cbc:	8809      	ldrh	r1, [r1, #0]
 8003cbe:	4291      	cmp	r1, r2
 8003cc0:	d803      	bhi.n	8003cca <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d00 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003cc4:	216d      	movs	r1, #109	@ 0x6d
 8003cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003cc8:	e7f3      	b.n	8003cb2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003cca:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003cce:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003cd6:	6803      	ldr	r3, [r0, #0]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4798      	blx	r3
 8003cdc:	1a29      	subs	r1, r5, r0
 8003cde:	4633      	mov	r3, r6
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	b209      	sxth	r1, r1
    }
 8003ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003ce8:	4718      	bx	r3
 8003cea:	bf00      	nop
 8003cec:	24028540 	.word	0x24028540
 8003cf0:	0802b3a8 	.word	0x0802b3a8
 8003cf4:	0802b3ea 	.word	0x0802b3ea
 8003cf8:	0802b425 	.word	0x0802b425
 8003cfc:	24028544 	.word	0x24028544
 8003d00:	0802b47a 	.word	0x0802b47a
 8003d04:	24028548 	.word	0x24028548

08003d08 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003d08:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	4604      	mov	r4, r0
        setX(x);
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003d10:	4615      	mov	r5, r2
        setX(x);
 8003d12:	4798      	blx	r3
        setY(y);
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	4620      	mov	r0, r4
 8003d18:	4629      	mov	r1, r5
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003d20:	4718      	bx	r3

08003d22 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003d22:	b570      	push	{r4, r5, r6, lr}
 8003d24:	4604      	mov	r4, r0
 8003d26:	461d      	mov	r5, r3
 8003d28:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003d2c:	f7ff ffec 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	4629      	mov	r1, r5
 8003d34:	4620      	mov	r0, r4
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	4798      	blx	r3
        setHeight(height);
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	4620      	mov	r0, r4
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003d46:	4718      	bx	r3

08003d48 <_ZN8touchgfx6WidgetC1Ev>:
 8003d48:	2200      	movs	r2, #0
 8003d4a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003d4e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003d52:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003d56:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8003d5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d5e:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8003d60:	4a01      	ldr	r2, [pc, #4]	@ (8003d68 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003d62:	6002      	str	r2, [r0, #0]
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	0802b510 	.word	0x0802b510

08003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8003d6e:	4b19      	ldr	r3, [pc, #100]	@ (8003dd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8003d70:	4606      	mov	r6, r0
 8003d72:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	428b      	cmp	r3, r1
 8003d78:	d92a      	bls.n	8003dd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003d7a:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b92b      	cbnz	r3, 8003d8c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003d80:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8003d82:	216c      	movs	r1, #108	@ 0x6c
 8003d84:	4a16      	ldr	r2, [pc, #88]	@ (8003de0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8003d86:	4817      	ldr	r0, [pc, #92]	@ (8003de4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8003d88:	f024 fc1a 	bl	80285c0 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003d8c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8003d90:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	f004 fb4a 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	4607      	mov	r7, r0
 8003da4:	4628      	mov	r0, r5
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	4798      	blx	r3
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	4604      	mov	r4, r0
 8003dae:	4639      	mov	r1, r7
 8003db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db2:	4628      	mov	r0, r5
 8003db4:	4798      	blx	r3
 8003db6:	fb14 f400 	smulbb	r4, r4, r0
 8003dba:	682b      	ldr	r3, [r5, #0]
 8003dbc:	4639      	mov	r1, r7
 8003dbe:	b2a4      	uxth	r4, r4
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	4798      	blx	r3
 8003dc6:	1823      	adds	r3, r4, r0
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8003dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e7fa      	b.n	8003dca <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8003dd4:	24028544 	.word	0x24028544
 8003dd8:	24028540 	.word	0x24028540
 8003ddc:	0802b3a8 	.word	0x0802b3a8
 8003de0:	0802b3ea 	.word	0x0802b3ea
 8003de4:	0802b425 	.word	0x0802b425
 8003de8:	24028548 	.word	0x24028548
 8003dec:	2402854c 	.word	0x2402854c

08003df0 <_ZN18CalculatorViewBaseC1Ev>:
CalculatorViewBase::CalculatorViewBase() :
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df4:	4604      	mov	r4, r0
 8003df6:	b09d      	sub	sp, #116	@ 0x74
template <class T>
class View : public Screen
{
public:
    View()
        : presenter(0)
 8003df8:	f04f 0800 	mov.w	r8, #0
 8003dfc:	f017 fc0e 	bl	801b61c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 8003e00:	4626      	mov	r6, r4
 8003e02:	4bdd      	ldr	r3, [pc, #884]	@ (8004178 <_ZN18CalculatorViewBaseC1Ev+0x388>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003e04:	2226      	movs	r2, #38	@ 0x26
 8003e06:	4641      	mov	r1, r8
 8003e08:	f8c4 803c 	str.w	r8, [r4, #60]	@ 0x3c
 8003e0c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8003e10:	f846 3b40 	str.w	r3, [r6], #64
 8003e14:	4630      	mov	r0, r6
 8003e16:	f024 fe6f 	bl	8028af8 <memset>
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f7ff ff94 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 8003e20:	4bd6      	ldr	r3, [pc, #856]	@ (800417c <_ZN18CalculatorViewBaseC1Ev+0x38c>)
 8003e22:	4658      	mov	r0, fp
        : color(col)
 8003e24:	f8c4 8068 	str.w	r8, [r4, #104]	@ 0x68
 8003e28:	6423      	str	r3, [r4, #64]	@ 0x40
 8003e2a:	23ff      	movs	r3, #255	@ 0xff
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003e2c:	f64f 75ff 	movw	r5, #65535	@ 0xffff
        touchable = touch;
 8003e30:	f04f 0701 	mov.w	r7, #1
 8003e34:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8003e38:	f04f 0a02 	mov.w	sl, #2
 8003e3c:	f013 f900 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e40:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
    CalculatorButton_0.setAction(buttonCallback);
 8003e44:	f504 69dc 	add.w	r9, r4, #1760	@ 0x6e0
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	9302      	str	r3, [sp, #8]
 8003e4c:	f013 f8f8 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e50:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
 8003e54:	4618      	mov	r0, r3
 8003e56:	9303      	str	r3, [sp, #12]
 8003e58:	f013 f8f2 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e5c:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 8003e60:	4618      	mov	r0, r3
 8003e62:	9304      	str	r3, [sp, #16]
 8003e64:	f013 f8ec 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e68:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	9305      	str	r3, [sp, #20]
 8003e70:	f013 f8e6 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e74:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 8003e78:	4618      	mov	r0, r3
 8003e7a:	9306      	str	r3, [sp, #24]
 8003e7c:	f013 f8e0 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e80:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 8003e84:	4618      	mov	r0, r3
 8003e86:	9307      	str	r3, [sp, #28]
 8003e88:	f013 f8da 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e8c:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 8003e90:	4618      	mov	r0, r3
 8003e92:	9308      	str	r3, [sp, #32]
 8003e94:	f013 f8d4 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e98:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ea0:	f013 f8ce 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ea4:	f504 733d 	add.w	r3, r4, #756	@ 0x2f4
        : T(), clickAction(0)
 8003ea8:	a91a      	add	r1, sp, #104	@ 0x68
 8003eaa:	f8ad 5068 	strh.w	r5, [sp, #104]	@ 0x68
 8003eae:	4618      	mov	r0, r3
 8003eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eb2:	f012 f8b3 	bl	801601c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003eb6:	4bb2      	ldr	r3, [pc, #712]	@ (8004180 <_ZN18CalculatorViewBaseC1Ev+0x390>)
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003eb8:	2226      	movs	r2, #38	@ 0x26
 8003eba:	4641      	mov	r1, r8
 8003ebc:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
 8003ec0:	f504 7349 	add.w	r3, r4, #804	@ 0x324
 8003ec4:	f884 7318 	strb.w	r7, [r4, #792]	@ 0x318
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f8c4 8320 	str.w	r8, [r4, #800]	@ 0x320
 8003ece:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ed0:	f024 fe12 	bl	8028af8 <memset>
 8003ed4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003ed6:	f7ff ff37 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8003eda:	4baa      	ldr	r3, [pc, #680]	@ (8004184 <_ZN18CalculatorViewBaseC1Ev+0x394>)
 8003edc:	f884 7348 	strb.w	r7, [r4, #840]	@ 0x348
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003ee0:	1d27      	adds	r7, r4, #4
 8003ee2:	f8c4 3324 	str.w	r3, [r4, #804]	@ 0x324
 8003ee6:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8003eea:	f8a4 5352 	strh.w	r5, [r4, #850]	@ 0x352
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f8a4 5354 	strh.w	r5, [r4, #852]	@ 0x354
 8003ef4:	f884 5356 	strb.w	r5, [r4, #854]	@ 0x356
 8003ef8:	f8c4 834c 	str.w	r8, [r4, #844]	@ 0x34c
 8003efc:	f884 8350 	strb.w	r8, [r4, #848]	@ 0x350
 8003f00:	930c      	str	r3, [sp, #48]	@ 0x30
 8003f02:	f013 f89d 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f06:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8003f0e:	f013 f897 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f12:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 8003f16:	4618      	mov	r0, r3
 8003f18:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f1a:	f013 f891 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f1e:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 8003f22:	4618      	mov	r0, r3
 8003f24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f26:	f013 f88b 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f2a:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8003f2e:	4618      	mov	r0, r3
 8003f30:	9310      	str	r3, [sp, #64]	@ 0x40
 8003f32:	f013 f885 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f36:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	9311      	str	r3, [sp, #68]	@ 0x44
 8003f3e:	f013 f87f 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f42:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8003f46:	4618      	mov	r0, r3
 8003f48:	9312      	str	r3, [sp, #72]	@ 0x48
 8003f4a:	f013 f879 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f4e:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 8003f52:	4618      	mov	r0, r3
 8003f54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f56:	f013 f873 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f5a:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 8003f5e:	4618      	mov	r0, r3
 8003f60:	9314      	str	r3, [sp, #80]	@ 0x50
 8003f62:	f013 f86d 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f66:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8003f6e:	f013 f867 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f72:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 8003f76:	4618      	mov	r0, r3
 8003f78:	9316      	str	r3, [sp, #88]	@ 0x58
 8003f7a:	f013 f861 	bl	8017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003f7e:	f504 63ce 	add.w	r3, r4, #1648	@ 0x670
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003f82:	2226      	movs	r2, #38	@ 0x26
 8003f84:	4641      	mov	r1, r8
 8003f86:	4618      	mov	r0, r3
 8003f88:	9317      	str	r3, [sp, #92]	@ 0x5c
 8003f8a:	f024 fdb5 	bl	8028af8 <memset>
 8003f8e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003f90:	f7ff feda 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 8003f94:	4b7c      	ldr	r3, [pc, #496]	@ (8004188 <_ZN18CalculatorViewBaseC1Ev+0x398>)
 8003f96:	f8a4 569c 	strh.w	r5, [r4, #1692]	@ 0x69c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003f9a:	f04f 35ff 	mov.w	r5, #4294967295
 8003f9e:	f8c4 3698 	str.w	r3, [r4, #1688]	@ 0x698
 8003fa2:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
    __background.setPosition(0, 0, 800, 480);
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f8c4 36a4 	str.w	r3, [r4, #1700]	@ 0x6a4
 8003fae:	4641      	mov	r1, r8
        : TextAreaWithWildcardBase(), wc1(0)
 8003fb0:	4b76      	ldr	r3, [pc, #472]	@ (800418c <_ZN18CalculatorViewBaseC1Ev+0x39c>)
 8003fb2:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
 8003fb6:	f8c4 3670 	str.w	r3, [r4, #1648]	@ 0x670
        : pobject(pObject), pmemfun(pmemfun_1)
 8003fba:	4b75      	ldr	r3, [pc, #468]	@ (8004190 <_ZN18CalculatorViewBaseC1Ev+0x3a0>)
        : color(col)
 8003fbc:	f8c4 86a0 	str.w	r8, [r4, #1696]	@ 0x6a0
 8003fc0:	f8c4 36e0 	str.w	r3, [r4, #1760]	@ 0x6e0
 8003fc4:	4b73      	ldr	r3, [pc, #460]	@ (8004194 <_ZN18CalculatorViewBaseC1Ev+0x3a4>)
 8003fc6:	f8a4 86a8 	strh.w	r8, [r4, #1704]	@ 0x6a8
 8003fca:	f8c4 36e8 	str.w	r3, [r4, #1768]	@ 0x6e8
 8003fce:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003fd2:	f8c4 86ac 	str.w	r8, [r4, #1708]	@ 0x6ac
              text(0)
 8003fd6:	f8c4 86b4 	str.w	r8, [r4, #1716]	@ 0x6b4
 8003fda:	f8c4 86b8 	str.w	r8, [r4, #1720]	@ 0x6b8
 8003fde:	f8c4 46e4 	str.w	r4, [r4, #1764]	@ 0x6e4
 8003fe2:	f8c4 86ec 	str.w	r8, [r4, #1772]	@ 0x6ec
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003fec:	f7ff fe99 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003ff0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003ff4:	4631      	mov	r1, r6
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	66a3      	str	r3, [r4, #104]	@ 0x68
        rotation = textRotation;
 8003ffa:	2603      	movs	r6, #3
 8003ffc:	f00d fdb4 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_0.setXY(541, 247);
 8004000:	4658      	mov	r0, fp
 8004002:	22f7      	movs	r2, #247	@ 0xf7
 8004004:	f240 211d 	movw	r1, #541	@ 0x21d
 8004008:	f7ff fe7e 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_0.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800400c:	aa1a      	add	r2, sp, #104	@ 0x68
 800400e:	a919      	add	r1, sp, #100	@ 0x64
 8004010:	4658      	mov	r0, fp
 8004012:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004016:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 800401a:	f012 fda1 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800401e:	f04f 0306 	mov.w	r3, #6
        updateTextPosition();
 8004022:	4658      	mov	r0, fp
 8004024:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8004028:	f7ff fea0 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800402c:	4659      	mov	r1, fp
 800402e:	4638      	mov	r0, r7
        rotation = textRotation;
 8004030:	f884 60b0 	strb.w	r6, [r4, #176]	@ 0xb0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004034:	f8c4 9094 	str.w	r9, [r4, #148]	@ 0x94
 8004038:	f04f 0b01 	mov.w	fp, #1
        colorPressed = col;
 800403c:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 8004040:	f00d fd92 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_OpenParenthesis.setXY(651, 356);
 8004044:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004048:	f240 218b 	movw	r1, #651	@ 0x28b
 800404c:	9802      	ldr	r0, [sp, #8]
 800404e:	f7ff fe5b 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_OpenParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004052:	aa1a      	add	r2, sp, #104	@ 0x68
 8004054:	a919      	add	r1, sp, #100	@ 0x64
 8004056:	9802      	ldr	r0, [sp, #8]
 8004058:	f8ad b064 	strh.w	fp, [sp, #100]	@ 0x64
 800405c:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004060:	f012 fd7e 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004064:	f04f 0107 	mov.w	r1, #7
        updateTextPosition();
 8004068:	9802      	ldr	r0, [sp, #8]
 800406a:	f8a4 10ec 	strh.w	r1, [r4, #236]	@ 0xec
 800406e:	f7ff fe7d 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004072:	9902      	ldr	r1, [sp, #8]
 8004074:	4638      	mov	r0, r7
        rotation = textRotation;
 8004076:	f884 60f8 	strb.w	r6, [r4, #248]	@ 0xf8
 800407a:	f8c4 90dc 	str.w	r9, [r4, #220]	@ 0xdc
        colorPressed = col;
 800407e:	e9c4 553c 	strd	r5, r5, [r4, #240]	@ 0xf0
 8004082:	f00d fd71 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Clear.setXY(319, 25);
 8004086:	2219      	movs	r2, #25
 8004088:	f240 113f 	movw	r1, #319	@ 0x13f
 800408c:	9803      	ldr	r0, [sp, #12]
 800408e:	f7ff fe3b 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Clear.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004092:	a819      	add	r0, sp, #100	@ 0x64
 8004094:	aa1a      	add	r2, sp, #104	@ 0x68
 8004096:	f8ad 8064 	strh.w	r8, [sp, #100]	@ 0x64
 800409a:	4601      	mov	r1, r0
 800409c:	9803      	ldr	r0, [sp, #12]
 800409e:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80040a2:	f012 fd5d 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80040a6:	2305      	movs	r3, #5
        updateTextPosition();
 80040a8:	9803      	ldr	r0, [sp, #12]
 80040aa:	f8a4 3134 	strh.w	r3, [r4, #308]	@ 0x134
 80040ae:	f7ff fe5d 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80040b2:	9903      	ldr	r1, [sp, #12]
 80040b4:	4638      	mov	r0, r7
        rotation = textRotation;
 80040b6:	f884 6140 	strb.w	r6, [r4, #320]	@ 0x140
 80040ba:	f8c4 9124 	str.w	r9, [r4, #292]	@ 0x124
        colorPressed = col;
 80040be:	e9c4 554e 	strd	r5, r5, [r4, #312]	@ 0x138
 80040c2:	f00d fd51 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Delete.setXY(208, 25);
 80040c6:	2219      	movs	r2, #25
 80040c8:	21d0      	movs	r1, #208	@ 0xd0
 80040ca:	9804      	ldr	r0, [sp, #16]
 80040cc:	f7ff fe1c 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Delete.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80040d0:	a819      	add	r0, sp, #100	@ 0x64
 80040d2:	aa1a      	add	r2, sp, #104	@ 0x68
 80040d4:	f8ad 8064 	strh.w	r8, [sp, #100]	@ 0x64
 80040d8:	4601      	mov	r1, r0
 80040da:	9804      	ldr	r0, [sp, #16]
 80040dc:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80040e0:	f012 fd3e 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80040e4:	9804      	ldr	r0, [sp, #16]
 80040e6:	f8a4 617c 	strh.w	r6, [r4, #380]	@ 0x17c
 80040ea:	f7ff fe3f 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80040ee:	9904      	ldr	r1, [sp, #16]
 80040f0:	4638      	mov	r0, r7
        rotation = textRotation;
 80040f2:	f884 6188 	strb.w	r6, [r4, #392]	@ 0x188
 80040f6:	f8c4 916c 	str.w	r9, [r4, #364]	@ 0x16c
        colorPressed = col;
 80040fa:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
 80040fe:	f00d fd33 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_CloseParenthesis.setXY(651, 247);
 8004102:	22f7      	movs	r2, #247	@ 0xf7
 8004104:	f240 218b 	movw	r1, #651	@ 0x28b
 8004108:	9805      	ldr	r0, [sp, #20]
 800410a:	f7ff fdfd 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_CloseParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800410e:	a819      	add	r0, sp, #100	@ 0x64
 8004110:	f8ad b064 	strh.w	fp, [sp, #100]	@ 0x64
 8004114:	f04f 0b04 	mov.w	fp, #4
 8004118:	aa1a      	add	r2, sp, #104	@ 0x68
 800411a:	4601      	mov	r1, r0
 800411c:	9805      	ldr	r0, [sp, #20]
 800411e:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004122:	f012 fd1d 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004126:	9805      	ldr	r0, [sp, #20]
 8004128:	f8a4 b1c4 	strh.w	fp, [r4, #452]	@ 0x1c4
 800412c:	f7ff fe1e 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004130:	9905      	ldr	r1, [sp, #20]
 8004132:	4638      	mov	r0, r7
        rotation = textRotation;
 8004134:	f884 61d0 	strb.w	r6, [r4, #464]	@ 0x1d0
 8004138:	f8c4 91b4 	str.w	r9, [r4, #436]	@ 0x1b4
        colorPressed = col;
 800413c:	e9c4 5572 	strd	r5, r5, [r4, #456]	@ 0x1c8
 8004140:	f00d fd12 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Subtract.setXY(541, 25);
 8004144:	2219      	movs	r2, #25
 8004146:	f240 211d 	movw	r1, #541	@ 0x21d
 800414a:	9806      	ldr	r0, [sp, #24]
 800414c:	f7ff fddc 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Subtract.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004150:	a819      	add	r0, sp, #100	@ 0x64
 8004152:	f04f 0301 	mov.w	r3, #1
 8004156:	aa1a      	add	r2, sp, #104	@ 0x68
 8004158:	4601      	mov	r1, r0
 800415a:	9806      	ldr	r0, [sp, #24]
 800415c:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004160:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004164:	f012 fcfc 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004168:	2308      	movs	r3, #8
        updateTextPosition();
 800416a:	9806      	ldr	r0, [sp, #24]
 800416c:	f8a4 320c 	strh.w	r3, [r4, #524]	@ 0x20c
 8004170:	f7ff fdfc 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004174:	e010      	b.n	8004198 <_ZN18CalculatorViewBaseC1Ev+0x3a8>
 8004176:	bf00      	nop
 8004178:	0802b6a4 	.word	0x0802b6a4
 800417c:	0802d080 	.word	0x0802d080
 8004180:	0802b618 	.word	0x0802b618
 8004184:	0802d0e8 	.word	0x0802d0e8
 8004188:	0802b578 	.word	0x0802b578
 800418c:	0802b588 	.word	0x0802b588
 8004190:	0802b68c 	.word	0x0802b68c
 8004194:	08003b05 	.word	0x08003b05
 8004198:	9906      	ldr	r1, [sp, #24]
 800419a:	4638      	mov	r0, r7
        rotation = textRotation;
 800419c:	f884 6218 	strb.w	r6, [r4, #536]	@ 0x218
 80041a0:	f8c4 91fc 	str.w	r9, [r4, #508]	@ 0x1fc
        colorPressed = col;
 80041a4:	e9c4 5584 	strd	r5, r5, [r4, #528]	@ 0x210
 80041a8:	f00d fcde 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Add.setXY(430, 25);
 80041ac:	2219      	movs	r2, #25
 80041ae:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80041b2:	9807      	ldr	r0, [sp, #28]
 80041b4:	f7ff fda8 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Add.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80041b8:	a819      	add	r0, sp, #100	@ 0x64
 80041ba:	f04f 0301 	mov.w	r3, #1
 80041be:	aa1a      	add	r2, sp, #104	@ 0x68
 80041c0:	4601      	mov	r1, r0
 80041c2:	9807      	ldr	r0, [sp, #28]
 80041c4:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80041c8:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80041cc:	f012 fcc8 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80041d0:	2309      	movs	r3, #9
        updateTextPosition();
 80041d2:	9807      	ldr	r0, [sp, #28]
 80041d4:	f8a4 3254 	strh.w	r3, [r4, #596]	@ 0x254
 80041d8:	f7ff fdc8 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80041dc:	9907      	ldr	r1, [sp, #28]
 80041de:	4638      	mov	r0, r7
 80041e0:	f8c4 9244 	str.w	r9, [r4, #580]	@ 0x244
        colorPressed = col;
 80041e4:	e9c4 5596 	strd	r5, r5, [r4, #600]	@ 0x258
 80041e8:	f00d fcbe 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Divide.setXY(651, 25);
 80041ec:	2219      	movs	r2, #25
 80041ee:	f240 218b 	movw	r1, #651	@ 0x28b
 80041f2:	9808      	ldr	r0, [sp, #32]
 80041f4:	f7ff fd88 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Divide.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80041f8:	a819      	add	r0, sp, #100	@ 0x64
 80041fa:	f04f 0301 	mov.w	r3, #1
 80041fe:	aa1a      	add	r2, sp, #104	@ 0x68
 8004200:	4601      	mov	r1, r0
 8004202:	9808      	ldr	r0, [sp, #32]
 8004204:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004208:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 800420c:	f012 fca8 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004210:	220a      	movs	r2, #10
        updateTextPosition();
 8004212:	9808      	ldr	r0, [sp, #32]
 8004214:	f8a4 229c 	strh.w	r2, [r4, #668]	@ 0x29c
 8004218:	f7ff fda8 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800421c:	9908      	ldr	r1, [sp, #32]
 800421e:	4638      	mov	r0, r7
        rotation = textRotation;
 8004220:	f884 62a8 	strb.w	r6, [r4, #680]	@ 0x2a8
 8004224:	f8c4 928c 	str.w	r9, [r4, #652]	@ 0x28c
        colorPressed = col;
 8004228:	e9c4 55a8 	strd	r5, r5, [r4, #672]	@ 0x2a0
 800422c:	f00d fc9c 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Multiply.setXY(651, 140);
 8004230:	228c      	movs	r2, #140	@ 0x8c
 8004232:	f240 218b 	movw	r1, #651	@ 0x28b
 8004236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004238:	f7ff fd66 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Multiply.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800423c:	a819      	add	r0, sp, #100	@ 0x64
 800423e:	f04f 0301 	mov.w	r3, #1
 8004242:	aa1a      	add	r2, sp, #104	@ 0x68
 8004244:	4601      	mov	r1, r0
 8004246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004248:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 800424c:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004250:	f012 fc86 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004254:	220b      	movs	r2, #11
        updateTextPosition();
 8004256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004258:	f8a4 22e4 	strh.w	r2, [r4, #740]	@ 0x2e4
 800425c:	f7ff fd86 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004260:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004262:	4638      	mov	r0, r7
        rotation = textRotation;
 8004264:	f884 62f0 	strb.w	r6, [r4, #752]	@ 0x2f0
 8004268:	f8c4 92d4 	str.w	r9, [r4, #724]	@ 0x2d4
        colorPressed = col;
 800426c:	e9c4 55ba 	strd	r5, r5, [r4, #744]	@ 0x2e8
 8004270:	f00d fc7a 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ROATATED_ID));
 8004274:	a81a      	add	r0, sp, #104	@ 0x68
 8004276:	2309      	movs	r3, #9
 8004278:	4601      	mov	r1, r0
 800427a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800427c:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 8004280:	f012 fda7 	bl	8016dd2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 8004284:	2337      	movs	r3, #55	@ 0x37
 8004286:	2210      	movs	r2, #16
 8004288:	2117      	movs	r1, #23
 800428a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	f7ff fd48 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004292:	4641      	mov	r1, r8
 8004294:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004296:	f011 fe7c 	bl	8015f92 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 800429a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800429c:	4638      	mov	r0, r7
 800429e:	f00d fc63 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 80042a2:	220e      	movs	r2, #14
 80042a4:	2114      	movs	r1, #20
 80042a6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80042a8:	f7ff fd2e 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 80042ac:	a819      	add	r0, sp, #100	@ 0x64
 80042ae:	aa1a      	add	r2, sp, #104	@ 0x68
 80042b0:	f8ad b064 	strh.w	fp, [sp, #100]	@ 0x64
 80042b4:	4601      	mov	r1, r0
 80042b6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80042b8:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 80042bc:	f012 fc50 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80042c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80042c2:	4638      	mov	r0, r7
 80042c4:	f8c4 934c 	str.w	r9, [r4, #844]	@ 0x34c
 80042c8:	f04f 0b11 	mov.w	fp, #17
 80042cc:	f00d fc4c 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_9.setXY(208, 137);
 80042d0:	2289      	movs	r2, #137	@ 0x89
 80042d2:	21d0      	movs	r1, #208	@ 0xd0
 80042d4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80042d6:	f7ff fd17 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80042da:	a819      	add	r0, sp, #100	@ 0x64
 80042dc:	aa1a      	add	r2, sp, #104	@ 0x68
 80042de:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80042e2:	4601      	mov	r1, r0
 80042e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80042e6:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 80042ea:	f012 fc39 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80042ee:	2316      	movs	r3, #22
        updateTextPosition();
 80042f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80042f2:	f8a4 3390 	strh.w	r3, [r4, #912]	@ 0x390
 80042f6:	f7ff fd39 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80042fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80042fc:	4638      	mov	r0, r7
        rotation = textRotation;
 80042fe:	f884 639c 	strb.w	r6, [r4, #924]	@ 0x39c
 8004302:	f8c4 9380 	str.w	r9, [r4, #896]	@ 0x380
        colorPressed = col;
 8004306:	e9c4 55e5 	strd	r5, r5, [r4, #916]	@ 0x394
 800430a:	f00d fc2d 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_8.setXY(208, 247);
 800430e:	22f7      	movs	r2, #247	@ 0xf7
 8004310:	21d0      	movs	r1, #208	@ 0xd0
 8004312:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004314:	f7ff fcf8 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004318:	a819      	add	r0, sp, #100	@ 0x64
 800431a:	aa1a      	add	r2, sp, #104	@ 0x68
 800431c:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004320:	4601      	mov	r1, r0
 8004322:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004324:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 8004328:	f012 fc1a 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800432c:	2315      	movs	r3, #21
        updateTextPosition();
 800432e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004330:	f8a4 33d8 	strh.w	r3, [r4, #984]	@ 0x3d8
 8004334:	f7ff fd1a 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004338:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800433a:	4638      	mov	r0, r7
        rotation = textRotation;
 800433c:	f884 63e4 	strb.w	r6, [r4, #996]	@ 0x3e4
 8004340:	f8c4 93c8 	str.w	r9, [r4, #968]	@ 0x3c8
        colorPressed = col;
 8004344:	e9c4 55f7 	strd	r5, r5, [r4, #988]	@ 0x3dc
 8004348:	f00d fc0e 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_7.setXY(208, 356);
 800434c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004350:	21d0      	movs	r1, #208	@ 0xd0
 8004352:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004354:	f7ff fcd8 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004358:	a819      	add	r0, sp, #100	@ 0x64
 800435a:	aa1a      	add	r2, sp, #104	@ 0x68
 800435c:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004360:	4601      	mov	r1, r0
 8004362:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004364:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 8004368:	f012 fbfa 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800436c:	2314      	movs	r3, #20
        updateTextPosition();
 800436e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004370:	f8a4 3420 	strh.w	r3, [r4, #1056]	@ 0x420
 8004374:	f7ff fcfa 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004378:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800437a:	4638      	mov	r0, r7
        color = col;
 800437c:	f8c4 5424 	str.w	r5, [r4, #1060]	@ 0x424
        colorPressed = col;
 8004380:	f8c4 5428 	str.w	r5, [r4, #1064]	@ 0x428
        rotation = textRotation;
 8004384:	f884 642c 	strb.w	r6, [r4, #1068]	@ 0x42c
 8004388:	f8c4 9410 	str.w	r9, [r4, #1040]	@ 0x410
 800438c:	f00d fbec 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_6.setXY(319, 137);
 8004390:	2289      	movs	r2, #137	@ 0x89
 8004392:	f240 113f 	movw	r1, #319	@ 0x13f
 8004396:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004398:	f7ff fcb6 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800439c:	a819      	add	r0, sp, #100	@ 0x64
 800439e:	aa1a      	add	r2, sp, #104	@ 0x68
 80043a0:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80043a4:	4601      	mov	r1, r0
 80043a6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80043a8:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 80043ac:	f012 fbd8 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80043b0:	2313      	movs	r3, #19
        updateTextPosition();
 80043b2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80043b4:	f8a4 3468 	strh.w	r3, [r4, #1128]	@ 0x468
 80043b8:	f7ff fcd8 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80043bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80043be:	4638      	mov	r0, r7
        color = col;
 80043c0:	f8c4 546c 	str.w	r5, [r4, #1132]	@ 0x46c
        colorPressed = col;
 80043c4:	f8c4 5470 	str.w	r5, [r4, #1136]	@ 0x470
        rotation = textRotation;
 80043c8:	f884 6474 	strb.w	r6, [r4, #1140]	@ 0x474
 80043cc:	f8c4 9458 	str.w	r9, [r4, #1112]	@ 0x458
 80043d0:	f00d fbca 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_5.setXY(319, 247);
 80043d4:	22f7      	movs	r2, #247	@ 0xf7
 80043d6:	f240 113f 	movw	r1, #319	@ 0x13f
 80043da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80043dc:	f7ff fc94 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80043e0:	a819      	add	r0, sp, #100	@ 0x64
 80043e2:	aa1a      	add	r2, sp, #104	@ 0x68
 80043e4:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80043e8:	4601      	mov	r1, r0
 80043ea:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80043ec:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 80043f0:	f012 fbb6 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80043f4:	2312      	movs	r3, #18
        updateTextPosition();
 80043f6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80043f8:	f8a4 34b0 	strh.w	r3, [r4, #1200]	@ 0x4b0
 80043fc:	f7ff fcb6 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004400:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004402:	4638      	mov	r0, r7
        color = col;
 8004404:	f8c4 54b4 	str.w	r5, [r4, #1204]	@ 0x4b4
        colorPressed = col;
 8004408:	f8c4 54b8 	str.w	r5, [r4, #1208]	@ 0x4b8
        rotation = textRotation;
 800440c:	f884 64bc 	strb.w	r6, [r4, #1212]	@ 0x4bc
 8004410:	f8c4 94a0 	str.w	r9, [r4, #1184]	@ 0x4a0
 8004414:	f00d fba8 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_4.setXY(319, 356);
 8004418:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800441c:	f240 113f 	movw	r1, #319	@ 0x13f
 8004420:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004422:	f7ff fc71 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004426:	a819      	add	r0, sp, #100	@ 0x64
 8004428:	aa1a      	add	r2, sp, #104	@ 0x68
 800442a:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 800442e:	4601      	mov	r1, r0
 8004430:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004432:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 8004436:	f012 fb93 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 800443a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800443c:	f8a4 b4f8 	strh.w	fp, [r4, #1272]	@ 0x4f8
 8004440:	f7ff fc94 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004444:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004446:	4638      	mov	r0, r7
        color = col;
 8004448:	f8c4 54fc 	str.w	r5, [r4, #1276]	@ 0x4fc
        colorPressed = col;
 800444c:	f8c4 5500 	str.w	r5, [r4, #1280]	@ 0x500
        rotation = textRotation;
 8004450:	f884 6504 	strb.w	r6, [r4, #1284]	@ 0x504
 8004454:	f8c4 94e8 	str.w	r9, [r4, #1256]	@ 0x4e8
 8004458:	f00d fb86 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_3.setXY(430, 356);
 800445c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004460:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004464:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004466:	f7ff fc4f 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800446a:	a819      	add	r0, sp, #100	@ 0x64
 800446c:	aa1a      	add	r2, sp, #104	@ 0x68
 800446e:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004472:	4601      	mov	r1, r0
 8004474:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004476:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 800447a:	f012 fb71 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800447e:	2310      	movs	r3, #16
        updateTextPosition();
 8004480:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004482:	f8a4 3540 	strh.w	r3, [r4, #1344]	@ 0x540
 8004486:	f7ff fc71 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800448a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800448c:	4638      	mov	r0, r7
        color = col;
 800448e:	f8c4 5544 	str.w	r5, [r4, #1348]	@ 0x544
        colorPressed = col;
 8004492:	f8c4 5548 	str.w	r5, [r4, #1352]	@ 0x548
        rotation = textRotation;
 8004496:	f884 654c 	strb.w	r6, [r4, #1356]	@ 0x54c
 800449a:	f8c4 9530 	str.w	r9, [r4, #1328]	@ 0x530
 800449e:	f00d fb63 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_2.setXY(430, 247);
 80044a2:	22f7      	movs	r2, #247	@ 0xf7
 80044a4:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80044a8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80044aa:	f7ff fc2d 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80044ae:	a819      	add	r0, sp, #100	@ 0x64
 80044b0:	aa1a      	add	r2, sp, #104	@ 0x68
 80044b2:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80044b6:	4601      	mov	r1, r0
 80044b8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80044ba:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 80044be:	f012 fb4f 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80044c2:	230f      	movs	r3, #15
        updateTextPosition();
 80044c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80044c6:	f8a4 3588 	strh.w	r3, [r4, #1416]	@ 0x588
 80044ca:	f7ff fc4f 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80044ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80044d0:	4638      	mov	r0, r7
        color = col;
 80044d2:	f8c4 558c 	str.w	r5, [r4, #1420]	@ 0x58c
        colorPressed = col;
 80044d6:	f8c4 5590 	str.w	r5, [r4, #1424]	@ 0x590
        rotation = textRotation;
 80044da:	f884 6594 	strb.w	r6, [r4, #1428]	@ 0x594
 80044de:	f8c4 9578 	str.w	r9, [r4, #1400]	@ 0x578
 80044e2:	f00d fb41 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_1.setXY(430, 140);
 80044e6:	228c      	movs	r2, #140	@ 0x8c
 80044e8:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80044ec:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80044ee:	f7ff fc0b 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80044f2:	a819      	add	r0, sp, #100	@ 0x64
 80044f4:	aa1a      	add	r2, sp, #104	@ 0x68
 80044f6:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80044fa:	4601      	mov	r1, r0
 80044fc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80044fe:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 8004502:	f012 fb2d 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004506:	230e      	movs	r3, #14
        updateTextPosition();
 8004508:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800450a:	f8a4 35d0 	strh.w	r3, [r4, #1488]	@ 0x5d0
 800450e:	f7ff fc2d 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004512:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004514:	4638      	mov	r0, r7
        color = col;
 8004516:	f8c4 55d4 	str.w	r5, [r4, #1492]	@ 0x5d4
        colorPressed = col;
 800451a:	f8c4 55d8 	str.w	r5, [r4, #1496]	@ 0x5d8
        rotation = textRotation;
 800451e:	f884 65dc 	strb.w	r6, [r4, #1500]	@ 0x5dc
 8004522:	f8c4 95c0 	str.w	r9, [r4, #1472]	@ 0x5c0
 8004526:	f00d fb1f 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Equals.setXY(541, 140);
 800452a:	228c      	movs	r2, #140	@ 0x8c
 800452c:	f240 211d 	movw	r1, #541	@ 0x21d
 8004530:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004532:	f7ff fbe9 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
 8004536:	f04f 0206 	mov.w	r2, #6
 800453a:	f04f 0107 	mov.w	r1, #7
    CalculatorButton_Equals.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800453e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004540:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8004544:	aa1a      	add	r2, sp, #104	@ 0x68
 8004546:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 800454a:	a919      	add	r1, sp, #100	@ 0x64
 800454c:	f012 fb08 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004550:	230d      	movs	r3, #13
        updateTextPosition();
 8004552:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004554:	f8a4 3618 	strh.w	r3, [r4, #1560]	@ 0x618
 8004558:	f7ff fc08 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800455c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800455e:	4638      	mov	r0, r7
        color = col;
 8004560:	f8c4 561c 	str.w	r5, [r4, #1564]	@ 0x61c
        colorPressed = col;
 8004564:	f8c4 5620 	str.w	r5, [r4, #1568]	@ 0x620
        rotation = textRotation;
 8004568:	f884 6624 	strb.w	r6, [r4, #1572]	@ 0x624
 800456c:	f8c4 9608 	str.w	r9, [r4, #1544]	@ 0x608
 8004570:	f00d fafa 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Comma.setXY(541, 356);
 8004574:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004578:	f240 211d 	movw	r1, #541	@ 0x21d
 800457c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800457e:	f7ff fbc3 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
 8004582:	f04f 0301 	mov.w	r3, #1
    CalculatorButton_Comma.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004586:	aa1a      	add	r2, sp, #104	@ 0x68
 8004588:	a919      	add	r1, sp, #100	@ 0x64
 800458a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800458c:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004590:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004594:	f012 fae4 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004598:	230c      	movs	r3, #12
        updateTextPosition();
 800459a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800459c:	f8a4 3660 	strh.w	r3, [r4, #1632]	@ 0x660
 80045a0:	f7ff fbe4 	bl	8003d6c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80045a4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80045a6:	4638      	mov	r0, r7
        color = col;
 80045a8:	f8c4 5664 	str.w	r5, [r4, #1636]	@ 0x664
        colorPressed = col;
 80045ac:	f8c4 5668 	str.w	r5, [r4, #1640]	@ 0x668
        rotation = textRotation;
 80045b0:	f884 666c 	strb.w	r6, [r4, #1644]	@ 0x66c
 80045b4:	f8c4 9650 	str.w	r9, [r4, #1616]	@ 0x650
 80045b8:	f00d fad6 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    TextResult.setPosition(109, 25, 89, 431);
 80045bc:	f240 13af 	movw	r3, #431	@ 0x1af
 80045c0:	2219      	movs	r2, #25
 80045c2:	216d      	movs	r1, #109	@ 0x6d
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	2359      	movs	r3, #89	@ 0x59
 80045c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80045ca:	f7ff fbaa 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80045ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004648 <_ZN18CalculatorViewBaseC1Ev+0x858>)
        color = newColor;
 80045d0:	f8c4 56a0 	str.w	r5, [r4, #1696]	@ 0x6a0
 80045d4:	681b      	ldr	r3, [r3, #0]
        boundingArea = calculateBoundingArea();
 80045d6:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
    Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YKNQ).getText());
 80045da:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
        linespace = space;
 80045de:	f8a4 86a4 	strh.w	r8, [r4, #1700]	@ 0x6a4
        rotation = textRotation;
 80045e2:	f884 66a8 	strb.w	r6, [r4, #1704]	@ 0x6a8
        boundingArea = calculateBoundingArea();
 80045e6:	f8c4 86ac 	str.w	r8, [r4, #1708]	@ 0x6ac
 80045ea:	f8c4 86b4 	str.w	r8, [r4, #1716]	@ 0x6b4
 80045ee:	b92b      	cbnz	r3, 80045fc <_ZN18CalculatorViewBaseC1Ev+0x80c>
 80045f0:	4b16      	ldr	r3, [pc, #88]	@ (800464c <_ZN18CalculatorViewBaseC1Ev+0x85c>)
 80045f2:	2160      	movs	r1, #96	@ 0x60
 80045f4:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <_ZN18CalculatorViewBaseC1Ev+0x860>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80045f6:	4817      	ldr	r0, [pc, #92]	@ (8004654 <_ZN18CalculatorViewBaseC1Ev+0x864>)
 80045f8:	f023 ffe2 	bl	80285c0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80045fc:	4b16      	ldr	r3, [pc, #88]	@ (8004658 <_ZN18CalculatorViewBaseC1Ev+0x868>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b91b      	cbnz	r3, 800460a <_ZN18CalculatorViewBaseC1Ev+0x81a>
 8004602:	4b16      	ldr	r3, [pc, #88]	@ (800465c <_ZN18CalculatorViewBaseC1Ev+0x86c>)
 8004604:	2161      	movs	r1, #97	@ 0x61
 8004606:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <_ZN18CalculatorViewBaseC1Ev+0x860>)
 8004608:	e7f5      	b.n	80045f6 <_ZN18CalculatorViewBaseC1Ev+0x806>
        return texts->getText(typedTextId);
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <_ZN18CalculatorViewBaseC1Ev+0x870>)
 800460c:	4641      	mov	r1, r8
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	f003 ff10 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 8004614:	4a13      	ldr	r2, [pc, #76]	@ (8004664 <_ZN18CalculatorViewBaseC1Ev+0x874>)
 8004616:	4603      	mov	r3, r0
 8004618:	4659      	mov	r1, fp
 800461a:	4628      	mov	r0, r5
 800461c:	f018 fcc8 	bl	801cfb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8004620:	4b11      	ldr	r3, [pc, #68]	@ (8004668 <_ZN18CalculatorViewBaseC1Ev+0x878>)
    TextResult.setTypedText(touchgfx::TypedText(T_TEXTRESULT));
 8004622:	a91a      	add	r1, sp, #104	@ 0x68
 8004624:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004626:	931a      	str	r3, [sp, #104]	@ 0x68
 8004628:	f04f 0301 	mov.w	r3, #1
        wc1 = value;
 800462c:	f8c4 56b8 	str.w	r5, [r4, #1720]	@ 0x6b8
 8004630:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
 8004634:	f012 fa36 	bl	8016aa4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004638:	4638      	mov	r0, r7
 800463a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800463c:	f00d fa94 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004640:	4620      	mov	r0, r4
 8004642:	b01d      	add	sp, #116	@ 0x74
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	24028540 	.word	0x24028540
 800464c:	0802b3a8 	.word	0x0802b3a8
 8004650:	0802b4b8 	.word	0x0802b4b8
 8004654:	0802b425 	.word	0x0802b425
 8004658:	24028544 	.word	0x24028544
 800465c:	0802b47a 	.word	0x0802b47a
 8004660:	2402854c 	.word	0x2402854c
 8004664:	0802b503 	.word	0x0802b503
 8004668:	0802b578 	.word	0x0802b578

0800466c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 800466c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800466e:	4770      	bx	lr

08004670 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004670:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 8004674:	4770      	bx	lr

08004676 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8004676:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004678:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 800467a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800467c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004680:	4362      	muls	r2, r4
 8004682:	4361      	muls	r1, r4
    }
 8004684:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004688:	4718      	bx	r3

0800468a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 800468a:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800468e:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 8004694:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004696:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800469a:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 800469e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	db1a      	blt.n	80046de <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 80046a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80046ac:	ee30 0a07 	vadd.f32	s0, s0, s14
 80046b0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80046b4:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 80046b8:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 80046bc:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	db1e      	blt.n	8004704 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 80046c6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80046ca:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80046ce:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80046d2:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 80046d6:	4623      	mov	r3, r4
    }
 80046d8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 80046dc:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80046de:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80046e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80046e6:	ee17 3a10 	vmov	r3, s14
 80046ea:	3b01      	subs	r3, #1
 80046ec:	ee30 0a66 	vsub.f32	s0, s0, s13
 80046f0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80046f4:	ee30 0a26 	vadd.f32	s0, s0, s13
 80046f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80046fc:	ee10 1a10 	vmov	r1, s0
 8004700:	4419      	add	r1, r3
 8004702:	e7d9      	b.n	80046b8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8004704:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800470c:	ee17 3a90 	vmov	r3, s15
 8004710:	3b01      	subs	r3, #1
 8004712:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8004716:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800471a:	ee70 0a87 	vadd.f32	s1, s1, s14
 800471e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8004722:	ee10 2a90 	vmov	r2, s1
 8004726:	441a      	add	r2, r3
 8004728:	e7d5      	b.n	80046d6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

0800472a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800472a:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800472c:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 800472e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004734:	4362      	muls	r2, r4
    }
 8004736:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800473a:	4718      	bx	r3

0800473c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 800473c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004740:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8004746:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004748:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800474c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 8004750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	db0b      	blt.n	8004772 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 800475a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800475e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004762:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004766:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800476a:	4623      	mov	r3, r4
    }
 800476c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004770:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004772:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800477a:	ee17 3a90 	vmov	r3, s15
 800477e:	3b01      	subs	r3, #1
 8004780:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004784:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004788:	ee30 0a07 	vadd.f32	s0, s0, s14
 800478c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004790:	ee10 2a10 	vmov	r2, s0
 8004794:	441a      	add	r2, r3
 8004796:	e7e8      	b.n	800476a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

08004798 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8004798:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800479a:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 800479c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800479e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047a2:	4362      	muls	r2, r4
 80047a4:	4361      	muls	r1, r4
    }
 80047a6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 80047aa:	4718      	bx	r3

080047ac <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 80047ac:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 80047b0:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80047b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 80047b6:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80047b8:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 80047bc:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 80047c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80047c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c8:	db1a      	blt.n	8004800 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 80047ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80047ce:	ee30 0a07 	vadd.f32	s0, s0, s14
 80047d2:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80047d6:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 80047da:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 80047de:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80047e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e6:	db1e      	blt.n	8004826 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 80047e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80047ec:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80047f0:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80047f4:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 80047f8:	4623      	mov	r3, r4
    }
 80047fa:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 80047fe:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004800:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004804:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004808:	ee17 3a10 	vmov	r3, s14
 800480c:	3b01      	subs	r3, #1
 800480e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004812:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8004816:	ee30 0a26 	vadd.f32	s0, s0, s13
 800481a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800481e:	ee10 1a10 	vmov	r1, s0
 8004822:	4419      	add	r1, r3
 8004824:	e7d9      	b.n	80047da <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8004826:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800482a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800482e:	ee17 3a90 	vmov	r3, s15
 8004832:	3b01      	subs	r3, #1
 8004834:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8004838:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800483c:	ee70 0a87 	vadd.f32	s1, s1, s14
 8004840:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8004844:	ee10 2a90 	vmov	r2, s1
 8004848:	441a      	add	r2, r3
 800484a:	e7d5      	b.n	80047f8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

0800484c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800484c:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800484e:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8004850:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8004852:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004856:	4362      	muls	r2, r4
    }
 8004858:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800485c:	4718      	bx	r3

0800485e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 800485e:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004862:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 8004868:	b410      	push	{r4}
        const float fs = f * (float)scale;
 800486a:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800486e:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 8004872:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487a:	db0b      	blt.n	8004894 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 800487c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004880:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004884:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004888:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800488c:	4623      	mov	r3, r4
    }
 800488e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004892:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004894:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800489c:	ee17 3a90 	vmov	r3, s15
 80048a0:	3b01      	subs	r3, #1
 80048a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80048a6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80048aa:	ee30 0a07 	vadd.f32	s0, s0, s14
 80048ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80048b2:	ee10 2a10 	vmov	r2, s0
 80048b6:	441a      	add	r2, r3
 80048b8:	e7e8      	b.n	800488c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

080048ba <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 80048ba:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 80048be:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db07      	blt.n	80048d4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80048c4:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80048c8:	fb90 f0f2 	sdiv	r0, r0, r2
 80048cc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80048d0:	1040      	asrs	r0, r0, #1
 80048d2:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80048d4:	f06f 0101 	mvn.w	r1, #1
 80048d8:	fb01 2003 	mla	r0, r1, r3, r2
 80048dc:	3801      	subs	r0, #1
 80048de:	fb90 f0f2 	sdiv	r0, r0, r2
 80048e2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80048e6:	1040      	asrs	r0, r0, #1
 80048e8:	4240      	negs	r0, r0
    }
 80048ea:	4770      	bx	lr

080048ec <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 80048ec:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 80048f0:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 80048f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80048fc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004900:	4770      	bx	lr

08004902 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8004902:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8004906:	4770      	bx	lr

08004908 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8004908:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 800490c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 800490e:	2b00      	cmp	r3, #0
 8004910:	db07      	blt.n	8004922 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004912:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004916:	fb90 f0f2 	sdiv	r0, r0, r2
 800491a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800491e:	1040      	asrs	r0, r0, #1
 8004920:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004922:	f06f 0101 	mvn.w	r1, #1
 8004926:	fb01 2003 	mla	r0, r1, r3, r2
 800492a:	3801      	subs	r0, #1
 800492c:	fb90 f0f2 	sdiv	r0, r0, r2
 8004930:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004934:	1040      	asrs	r0, r0, #1
 8004936:	4240      	negs	r0, r0
    }
 8004938:	4770      	bx	lr

0800493a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 800493a:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 800493e:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8004942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004946:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800494a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800494e:	4770      	bx	lr

08004950 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8004950:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 8004954:	4770      	bx	lr

08004956 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8004956:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 800495a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 800495c:	2b00      	cmp	r3, #0
 800495e:	db07      	blt.n	8004970 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004960:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004964:	fb90 f0f2 	sdiv	r0, r0, r2
 8004968:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800496c:	1040      	asrs	r0, r0, #1
 800496e:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004970:	f06f 0101 	mvn.w	r1, #1
 8004974:	fb01 2003 	mla	r0, r1, r3, r2
 8004978:	3801      	subs	r0, #1
 800497a:	fb90 f0f2 	sdiv	r0, r0, r2
 800497e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004982:	1040      	asrs	r0, r0, #1
 8004984:	4240      	negs	r0, r0
    }
 8004986:	4770      	bx	lr

08004988 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8004988:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 800498c:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8004990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004994:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004998:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800499c:	4770      	bx	lr

0800499e <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 800499e:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 80049a2:	4770      	bx	lr

080049a4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 80049a4:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 80049a8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db07      	blt.n	80049be <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80049ae:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80049b2:	fb90 f0f2 	sdiv	r0, r0, r2
 80049b6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80049ba:	1040      	asrs	r0, r0, #1
 80049bc:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80049be:	f06f 0101 	mvn.w	r1, #1
 80049c2:	fb01 2003 	mla	r0, r1, r3, r2
 80049c6:	3801      	subs	r0, #1
 80049c8:	fb90 f0f2 	sdiv	r0, r0, r2
 80049cc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80049d0:	1040      	asrs	r0, r0, #1
 80049d2:	4240      	negs	r0, r0
    }
 80049d4:	4770      	bx	lr

080049d6 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 80049d6:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 80049da:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80049de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80049e6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80049ea:	4770      	bx	lr

080049ec <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 80049ec:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 80049f0:	4770      	bx	lr

080049f2 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 80049f2:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 80049f4:	b570      	push	{r4, r5, r6, lr}
 80049f6:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 80049fc:	460d      	mov	r5, r1
 80049fe:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8004a00:	4798      	blx	r3
        setScaleY(scale, updateData);
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	4632      	mov	r2, r6
 8004a06:	4629      	mov	r1, r5
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 8004a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8004a12:	4718      	bx	r3

08004a14 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8004a14:	6803      	ldr	r3, [r0, #0]
 8004a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a1a:	4718      	bx	r3

08004a1c <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8004a1c:	6803      	ldr	r3, [r0, #0]
 8004a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a22:	4718      	bx	r3

08004a24 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8004a24:	6803      	ldr	r3, [r0, #0]
 8004a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a2a:	4718      	bx	r3

08004a2c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a2c:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8004a2e:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8004a30:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 8004a36:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 8004a38:	db0e      	blt.n	8004a58 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8004a3a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004a3e:	fb92 f1f4 	sdiv	r1, r2, r4
 8004a42:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004a46:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a48:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 8004a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004a50:	3a01      	subs	r2, #1
 8004a52:	440a      	add	r2, r1
 8004a54:	4249      	negs	r1, r1
 8004a56:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004a58:	f06f 0101 	mvn.w	r1, #1
 8004a5c:	fb01 4102 	mla	r1, r1, r2, r4
 8004a60:	3901      	subs	r1, #1
 8004a62:	fb91 f1f4 	sdiv	r1, r1, r4
 8004a66:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004a6a:	1049      	asrs	r1, r1, #1
 8004a6c:	4249      	negs	r1, r1
 8004a6e:	e7eb      	b.n	8004a48 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08004a70 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8004a70:	6803      	ldr	r3, [r0, #0]
 8004a72:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004a76:	4718      	bx	r3

08004a78 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8004a78:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8004a7a:	6803      	ldr	r3, [r0, #0]
 8004a7c:	4351      	muls	r1, r2
 8004a7e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004a82:	4718      	bx	r3

08004a84 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 8004a84:	6803      	ldr	r3, [r0, #0]
 8004a86:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8004a8a:	4718      	bx	r3

08004a8c <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8004a8c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8004a90:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8004a96:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 8004a9a:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8004a9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa6:	db08      	blt.n	8004aba <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8004aa8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004aac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004ab0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ab4:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8004ab8:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004aba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ac2:	ee17 3a90 	vmov	r3, s15
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004acc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004ad0:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004ad4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ad8:	ee10 1a10 	vmov	r1, s0
 8004adc:	4419      	add	r1, r3
 8004ade:	e7eb      	b.n	8004ab8 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08004ae0 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8004ae0:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 8004ae4:	4770      	bx	lr

08004ae6 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8004ae6:	6803      	ldr	r3, [r0, #0]
 8004ae8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004aec:	4718      	bx	r3

08004aee <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8004aee:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8004af0:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8004af2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 8004af6:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8004af8:	4798      	blx	r3
        if (i >= 0)
 8004afa:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8004afc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8004afe:	db07      	blt.n	8004b10 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8004b00:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004b04:	fb90 f0f3 	sdiv	r0, r0, r3
 8004b08:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004b0c:	1040      	asrs	r0, r0, #1
    }
 8004b0e:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004b10:	f06f 0201 	mvn.w	r2, #1
 8004b14:	fb02 3000 	mla	r0, r2, r0, r3
 8004b18:	3801      	subs	r0, #1
 8004b1a:	fb90 f0f3 	sdiv	r0, r0, r3
 8004b1e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004b22:	1040      	asrs	r0, r0, #1
 8004b24:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8004b26:	e7f2      	b.n	8004b0e <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08004b28 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8004b28:	6803      	ldr	r3, [r0, #0]
 8004b2a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004b2e:	4718      	bx	r3

08004b30 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8004b30:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8004b32:	b510      	push	{r4, lr}
 8004b34:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8004b36:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8004b3a:	4798      	blx	r3
 8004b3c:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8004b40:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8004b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b48:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004b4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8004b52:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 8004b56:	4770      	bx	lr

08004b58 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8004b58:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8004b5a:	6803      	ldr	r3, [r0, #0]
 8004b5c:	4351      	muls	r1, r2
 8004b5e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8004b62:	4718      	bx	r3

08004b64 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 8004b64:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8004b68:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8004b6e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 8004b72:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8004b76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7e:	db08      	blt.n	8004b92 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8004b80:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004b84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004b8c:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8004b90:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004b92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b9a:	ee17 3a90 	vmov	r3, s15
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004ba4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004ba8:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004bac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bb0:	ee10 1a10 	vmov	r1, s0
 8004bb4:	4419      	add	r1, r3
 8004bb6:	e7eb      	b.n	8004b90 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08004bb8 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8004bb8:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 8004bbc:	4770      	bx	lr

08004bbe <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8004bbe:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8004bc0:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8004bc2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 8004bc6:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8004bc8:	4798      	blx	r3
        if (i >= 0)
 8004bca:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8004bcc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8004bce:	db07      	blt.n	8004be0 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8004bd0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004bd4:	fb90 f0f3 	sdiv	r0, r0, r3
 8004bd8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004bdc:	1040      	asrs	r0, r0, #1
    }
 8004bde:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004be0:	f06f 0201 	mvn.w	r2, #1
 8004be4:	fb02 3000 	mla	r0, r2, r0, r3
 8004be8:	3801      	subs	r0, #1
 8004bea:	fb90 f0f3 	sdiv	r0, r0, r3
 8004bee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004bf2:	1040      	asrs	r0, r0, #1
 8004bf4:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8004bf6:	e7f2      	b.n	8004bde <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08004bf8 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8004bf8:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8004bfe:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8004c02:	4798      	blx	r3
 8004c04:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8004c08:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8004c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c10:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004c14:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004c18:	bd10      	pop	{r4, pc}

08004c1a <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8004c1a:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8004c1e:	4770      	bx	lr

08004c20 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
 8004c20:	4608      	mov	r0, r1
 8004c22:	4770      	bx	lr

08004c24 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8004c24:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8004c26:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 8004c28:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8004c2a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	4604      	mov	r4, r0
        if (i >= 0)
 8004c32:	db0e      	blt.n	8004c52 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 8004c34:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004c38:	fb91 f1f2 	sdiv	r1, r1, r2
 8004c3c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004c40:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8004c42:	b209      	sxth	r1, r1
 8004c44:	4620      	mov	r0, r4
 8004c46:	4798      	blx	r3
 8004c48:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8004c4c:	fb02 3000 	mla	r0, r2, r0, r3
 8004c50:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004c52:	f06f 0001 	mvn.w	r0, #1
 8004c56:	fb00 2101 	mla	r1, r0, r1, r2
 8004c5a:	3901      	subs	r1, #1
 8004c5c:	fb91 f1f2 	sdiv	r1, r1, r2
 8004c60:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004c64:	1049      	asrs	r1, r1, #1
 8004c66:	4249      	negs	r1, r1
 8004c68:	e7eb      	b.n	8004c42 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

08004c6a <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 8004c6a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004c6c:	4770      	bx	lr

08004c6e <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 8004c6e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8004c70:	4770      	bx	lr

08004c72 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 8004c72:	6803      	ldr	r3, [r0, #0]
 8004c74:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c78:	4718      	bx	r3

08004c7a <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 8004c7a:	6803      	ldr	r3, [r0, #0]
 8004c7c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8004c80:	4718      	bx	r3

08004c82 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 8004c82:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 8004c84:	6803      	ldr	r3, [r0, #0]
 8004c86:	4351      	muls	r1, r2
 8004c88:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004c8c:	4718      	bx	r3

08004c8e <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004c8e:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8004c90:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004c92:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8004c96:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004c98:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 8004c9c:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8004ca0:	4798      	blx	r3
 8004ca2:	462b      	mov	r3, r5
 8004ca4:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8004ca8:	4620      	mov	r0, r4
    }
 8004caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8004cae:	4718      	bx	r3

08004cb0 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 8004cb0:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
 8004cb4:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8004cb8:	4419      	add	r1, r3
    }
 8004cba:	1a08      	subs	r0, r1, r0
 8004cbc:	4770      	bx	lr

08004cbe <_ZN16DiagnoseViewBase11setupScreenEv>:
}

void DiagnoseViewBase::setupScreen()
{

}
 8004cbe:	4770      	bx	lr

08004cc0 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004cc0:	4770      	bx	lr

08004cc2 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 8004cc2:	4770      	bx	lr

08004cc4 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004cc4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004cc6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004cc8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004cca:	68c2      	ldr	r2, [r0, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	1055      	asrs	r5, r2, #1
 8004cd0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004cd4:	07d2      	lsls	r2, r2, #31
 8004cd6:	bf48      	it	mi
 8004cd8:	5962      	ldrmi	r2, [r4, r5]
    }
 8004cda:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004cdc:	bf48      	it	mi
 8004cde:	58d3      	ldrmi	r3, [r2, r3]
 8004ce0:	4718      	bx	r3

08004ce2 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004ce2:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004ce4:	6840      	ldr	r0, [r0, #4]
 8004ce6:	b130      	cbz	r0, 8004cf6 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	b91a      	cbnz	r2, 8004cf4 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004cec:	68d8      	ldr	r0, [r3, #12]
 8004cee:	f000 0001 	and.w	r0, r0, #1
 8004cf2:	4770      	bx	lr
 8004cf4:	2001      	movs	r0, #1
    }
 8004cf6:	4770      	bx	lr

08004cf8 <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8004d00:	f023 f8e6 	bl	8027ed0 <_ZdlPvj>
 8004d04:	4620      	mov	r0, r4
 8004d06:	bd10      	pop	{r4, pc}

08004d08 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	2110      	movs	r1, #16
 8004d0e:	f023 f8df 	bl	8027ed0 <_ZdlPvj>
 8004d12:	4620      	mov	r0, r4
 8004d14:	bd10      	pop	{r4, pc}
	...

08004d18 <_ZN16DiagnoseViewBaseD1Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 8004d18:	4b03      	ldr	r3, [pc, #12]	@ (8004d28 <_ZN16DiagnoseViewBaseD1Ev+0x10>)
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004d20:	f013 f844 	bl	8017dac <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004d24:	4620      	mov	r0, r4
 8004d26:	bd10      	pop	{r4, pc}
 8004d28:	0802ba04 	.word	0x0802ba04

08004d2c <_ZN16DiagnoseViewBaseD0Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 8004d2c:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <_ZN16DiagnoseViewBaseD0Ev+0x1c>)
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	4604      	mov	r4, r0
 8004d32:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8004d34:	f013 f83a 	bl	8017dac <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8004d38:	f243 417c 	movw	r1, #13436	@ 0x347c
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f023 f8c7 	bl	8027ed0 <_ZdlPvj>
 8004d42:	4620      	mov	r0, r4
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	bf00      	nop
 8004d48:	0802ba04 	.word	0x0802ba04

08004d4c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8004d4c:	b508      	push	{r3, lr}
        if (alpha > 0)
 8004d4e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004d52:	b10b      	cbz	r3, 8004d58 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 8004d54:	f7fe fb27 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8004d58:	bd08      	pop	{r3, pc}
	...

08004d5c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8004d5c:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8004d5e:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8004d60:	db03      	blt.n	8004d6a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 8004d62:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 8004d66:	4294      	cmp	r4, r2
 8004d68:	dc06      	bgt.n	8004d78 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 8004d6a:	4b08      	ldr	r3, [pc, #32]	@ (8004d8c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 8004d6c:	f240 6139 	movw	r1, #1593	@ 0x639
 8004d70:	4a07      	ldr	r2, [pc, #28]	@ (8004d90 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 8004d72:	4808      	ldr	r0, [pc, #32]	@ (8004d94 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 8004d74:	f023 fc24 	bl	80285c0 <__assert_func>
        return yValues[dataIndex(index)];
 8004d78:	6803      	ldr	r3, [r0, #0]
 8004d7a:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 8004d7e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8004d82:	4798      	blx	r3
    }
 8004d84:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	bf00      	nop
 8004d8c:	0802b720 	.word	0x0802b720
 8004d90:	0802b743 	.word	0x0802b743
 8004d94:	0802b792 	.word	0x0802b792

08004d98 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8004d98:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8004d9a:	b510      	push	{r4, lr}
 8004d9c:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8004d9e:	db03      	blt.n	8004da8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8004da0:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8004da4:	429a      	cmp	r2, r3
 8004da6:	dc06      	bgt.n	8004db6 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8004da8:	4b07      	ldr	r3, [pc, #28]	@ (8004dc8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8004daa:	f240 6133 	movw	r1, #1587	@ 0x633
 8004dae:	4a07      	ldr	r2, [pc, #28]	@ (8004dcc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8004db0:	4807      	ldr	r0, [pc, #28]	@ (8004dd0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8004db2:	f023 fc05 	bl	80285c0 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 8004db6:	6803      	ldr	r3, [r0, #0]
 8004db8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8004dbc:	4798      	blx	r3
 8004dbe:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8004dc2:	fb02 3000 	mla	r0, r2, r0, r3
 8004dc6:	bd10      	pop	{r4, pc}
 8004dc8:	0802b720 	.word	0x0802b720
 8004dcc:	0802b7fd 	.word	0x0802b7fd
 8004dd0:	0802b792 	.word	0x0802b792

08004dd4 <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void DiagnoseViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8004dd4:	f200 409c 	addw	r0, r0, #1180	@ 0x49c
 8004dd8:	4288      	cmp	r0, r1
{
 8004dda:	b508      	push	{r3, lr}
    if (&src == &HomeButton)
 8004ddc:	d105      	bne.n	8004dea <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~DiagnoseViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004dde:	f014 fcb3 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
}
 8004de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoMainScreenScreenNoTransition();
 8004de6:	f002 bd0f 	b.w	8007808 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
}
 8004dea:	bd08      	pop	{r3, pc}

08004dec <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8004dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8004dee:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8004df0:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8004df2:	f016 fa5d 	bl	801b2b0 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8004df6:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8004df8:	462a      	mov	r2, r5
 8004dfa:	9901      	ldr	r1, [sp, #4]
 8004dfc:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8004e00:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8004e04:	db04      	blt.n	8004e10 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8004e06:	f016 fa72 	bl	801b2ee <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8004e0a:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8004e0c:	b003      	add	sp, #12
 8004e0e:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8004e10:	f016 fa6d 	bl	801b2ee <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8004e14:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 8004e16:	e7f9      	b.n	8004e0c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08004e18 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8004e18:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004e1a:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8004e1e:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8004e20:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 8004e24:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 8004e28:	4423      	add	r3, r4
 8004e2a:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8004e2c:	b22d      	sxth	r5, r5
 8004e2e:	442c      	add	r4, r5
 8004e30:	1e69      	subs	r1, r5, #1
 8004e32:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 8004e36:	3c01      	subs	r4, #1
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	1af0      	subs	r0, r6, r3
 8004e3c:	f7ff ffd6 	bl	8004dec <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8004e40:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8004e44:	bd70      	pop	{r4, r5, r6, pc}

08004e46 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8004e46:	b538      	push	{r3, r4, r5, lr}
 8004e48:	4604      	mov	r4, r0
 8004e4a:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004e4c:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 8004e50:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 8004e54:	440b      	add	r3, r1
 8004e56:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8004e5a:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8004e5c:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 8004e60:	b209      	sxth	r1, r1
 8004e62:	1a12      	subs	r2, r2, r0
 8004e64:	1a28      	subs	r0, r5, r0
 8004e66:	3901      	subs	r1, #1
 8004e68:	f7ff ffc0 	bl	8004dec <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8004e6c:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 8004e70:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004e74:	bd38      	pop	{r3, r4, r5, pc}
	...

08004e78 <_ZN16DiagnoseViewBaseC1Ev>:
DiagnoseViewBase::DiagnoseViewBase() :
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	b091      	sub	sp, #68	@ 0x44
 8004e80:	2600      	movs	r6, #0
 8004e82:	f016 fbcb 	bl	801b61c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &DiagnoseViewBase::buttonCallbackHandler)
 8004e86:	46a2      	mov	sl, r4
 8004e88:	4be5      	ldr	r3, [pc, #916]	@ (8005220 <_ZN16DiagnoseViewBaseC1Ev+0x3a8>)
        : Widget(), alpha(255), color(0)
 8004e8a:	2226      	movs	r2, #38	@ 0x26
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8004e90:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8004e94:	f84a 3b40 	str.w	r3, [sl], #64
 8004e98:	4650      	mov	r0, sl
 8004e9a:	f023 fe2d 	bl	8028af8 <memset>
 8004e9e:	4650      	mov	r0, sl
 8004ea0:	f7fe ff52 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 8004ea4:	4bdf      	ldr	r3, [pc, #892]	@ (8005224 <_ZN16DiagnoseViewBaseC1Ev+0x3ac>)
 8004ea6:	f504 7982 	add.w	r9, r4, #260	@ 0x104
 8004eaa:	4640      	mov	r0, r8
 8004eac:	6423      	str	r3, [r4, #64]	@ 0x40
 8004eae:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 8004eb0:	66a6      	str	r6, [r4, #104]	@ 0x68
 8004eb2:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8004eb6:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8004eba:	f504 75be 	add.w	r5, r4, #380	@ 0x17c
 8004ebe:	f00c fd91 	bl	80119e4 <_ZN8touchgfx12DigitalClockC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004ec2:	2226      	movs	r2, #38	@ 0x26
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	4648      	mov	r0, r9
 8004ec8:	f023 fe16 	bl	8028af8 <memset>
 8004ecc:	4648      	mov	r0, r9
 8004ece:	f7fe ff3b 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 8004ed2:	4bd5      	ldr	r3, [pc, #852]	@ (8005228 <_ZN16DiagnoseViewBaseC1Ev+0x3b0>)
 8004ed4:	f504 72a6 	add.w	r2, r4, #332	@ 0x14c
 8004ed8:	a90e      	add	r1, sp, #56	@ 0x38
 8004eda:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
 8004ede:	f04f 0b01 	mov.w	fp, #1
 8004ee2:	4bd2      	ldr	r3, [pc, #840]	@ (800522c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f8a4 7130 	strh.w	r7, [r4, #304]	@ 0x130
 8004eea:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 8004eee:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8004ef2:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
 8004ef6:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	f8a4 613c 	strh.w	r6, [r4, #316]	@ 0x13c
 8004f02:	f8c4 6140 	str.w	r6, [r4, #320]	@ 0x140
 8004f06:	9203      	str	r2, [sp, #12]
 8004f08:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
              text(0)
 8004f0c:	e9c4 3651 	strd	r3, r6, [r4, #324]	@ 0x144
 8004f10:	f011 f884 	bl	801601c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8004f14:	4bc6      	ldr	r3, [pc, #792]	@ (8005230 <_ZN16DiagnoseViewBaseC1Ev+0x3b8>)
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004f16:	2164      	movs	r1, #100	@ 0x64
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8004f1e:	f8c4 6178 	str.w	r6, [r4, #376]	@ 0x178
 8004f22:	f884 b170 	strb.w	fp, [r4, #368]	@ 0x170
 8004f26:	f010 fd35 	bl	8015994 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8004f2a:	4bc2      	ldr	r3, [pc, #776]	@ (8005234 <_ZN16DiagnoseViewBaseC1Ev+0x3bc>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	2263      	movs	r2, #99	@ 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004f30:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
{
public:
    GraphWrapAndClear()
        : GraphWrapAndClearData(CAPACITY, y)
 8004f34:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8004f38:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8004f3a:	e9c4 36b0 	strd	r3, r6, [r4, #704]	@ 0x2c0
 8004f3e:	e9c4 b6ae 	strd	fp, r6, [r4, #696]	@ 0x2b8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8004f42:	f7ff fb98 	bl	8004676 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8004f46:	f504 628b 	add.w	r2, r4, #1112	@ 0x458
 8004f4a:	4bbb      	ldr	r3, [pc, #748]	@ (8005238 <_ZN16DiagnoseViewBaseC1Ev+0x3c0>)
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	9206      	str	r2, [sp, #24]
 8004f50:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
 8004f54:	f010 f97e 	bl	8015254 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8004f58:	f504 6191 	add.w	r1, r4, #1160	@ 0x488
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8004f5c:	4bb7      	ldr	r3, [pc, #732]	@ (800523c <_ZN16DiagnoseViewBaseC1Ev+0x3c4>)
 8004f5e:	f04f 0202 	mov.w	r2, #2
 8004f62:	4608      	mov	r0, r1
 8004f64:	9107      	str	r1, [sp, #28]
 8004f66:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
 8004f6a:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 8004f6e:	f7fe fbc1 	bl	80036f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8004f72:	4bb3      	ldr	r3, [pc, #716]	@ (8005240 <_ZN16DiagnoseViewBaseC1Ev+0x3c8>)
 8004f74:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
        : Widget(), action(), pressed(false)
 8004f78:	2226      	movs	r2, #38	@ 0x26
 8004f7a:	f8c4 3488 	str.w	r3, [r4, #1160]	@ 0x488
 8004f7e:	3324      	adds	r3, #36	@ 0x24
 8004f80:	9104      	str	r1, [sp, #16]
 8004f82:	4631      	mov	r1, r6
 8004f84:	f8c4 3490 	str.w	r3, [r4, #1168]	@ 0x490
 8004f88:	9804      	ldr	r0, [sp, #16]
 8004f8a:	f8c4 6494 	str.w	r6, [r4, #1172]	@ 0x494
 8004f8e:	f023 fdb3 	bl	8028af8 <memset>
 8004f92:	9804      	ldr	r0, [sp, #16]
 8004f94:	f7fe fed8 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 8004f98:	f504 619a 	add.w	r1, r4, #1232	@ 0x4d0
 8004f9c:	4ba9      	ldr	r3, [pc, #676]	@ (8005244 <_ZN16DiagnoseViewBaseC1Ev+0x3cc>)
 8004f9e:	4608      	mov	r0, r1
 8004fa0:	f8a4 74ca 	strh.w	r7, [r4, #1226]	@ 0x4ca
 8004fa4:	f8c4 349c 	str.w	r3, [r4, #1180]	@ 0x49c
 8004fa8:	f8a4 74cc 	strh.w	r7, [r4, #1228]	@ 0x4cc
 8004fac:	f884 74ce 	strb.w	r7, [r4, #1230]	@ 0x4ce
 8004fb0:	1d27      	adds	r7, r4, #4
 8004fb2:	f8c4 64c4 	str.w	r6, [r4, #1220]	@ 0x4c4
 8004fb6:	f884 64c8 	strb.w	r6, [r4, #1224]	@ 0x4c8
 8004fba:	f884 b4c0 	strb.w	fp, [r4, #1216]	@ 0x4c0
 8004fbe:	9105      	str	r1, [sp, #20]
 8004fc0:	f00d fb7c 	bl	80126bc <_ZN8touchgfx19ScrollableContainerC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004fc4:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8004fc8:	4a9f      	ldr	r2, [pc, #636]	@ (8005248 <_ZN16DiagnoseViewBaseC1Ev+0x3d0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8004fca:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8004fce:	f204 508c 	addw	r0, r4, #1420	@ 0x58c
 8004fd2:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
 8004fd6:	4a9d      	ldr	r2, [pc, #628]	@ (800524c <_ZN16DiagnoseViewBaseC1Ev+0x3d4>)
 8004fd8:	f8c3 4470 	str.w	r4, [r3, #1136]	@ 0x470
 8004fdc:	f8c3 2474 	str.w	r2, [r3, #1140]	@ 0x474
 8004fe0:	f8c3 6478 	str.w	r6, [r3, #1144]	@ 0x478
 8004fe4:	f012 fed8 	bl	8017d98 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8004fe8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004fec:	4632      	mov	r2, r6
 8004fee:	4650      	mov	r0, sl
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004ff8:	f7fe fe93 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004ffc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005000:	4651      	mov	r1, sl
 8005002:	4638      	mov	r0, r7
 8005004:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005006:	f00c fdaf 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseClock.setPosition(529, 12, 256, 72);
 800500a:	2348      	movs	r3, #72	@ 0x48
 800500c:	f8df a258 	ldr.w	sl, [pc, #600]	@ 8005268 <_ZN16DiagnoseViewBaseC1Ev+0x3f0>
 8005010:	220c      	movs	r2, #12
 8005012:	4640      	mov	r0, r8
 8005014:	f240 2111 	movw	r1, #529	@ 0x211
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800501e:	f7fe fe80 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8005022:	4640      	mov	r0, r8
 8005024:	4651      	mov	r1, sl
 8005026:	f00c fc1b 	bl	8011860 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 800502a:	4b80      	ldr	r3, [pc, #512]	@ (800522c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RGBC));
 800502c:	4640      	mov	r0, r8
 800502e:	a90e      	add	r1, sp, #56	@ 0x38
 8005030:	930e      	str	r3, [sp, #56]	@ 0x38
 8005032:	2319      	movs	r3, #25
 8005034:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8005038:	f00c fc25 	bl	8011886 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    DiagnoseClock.displayLeadingZeroForHourIndicator(true);
 800503c:	4640      	mov	r0, r8
 800503e:	4659      	mov	r1, fp
 8005040:	f00c fd1e 	bl	8011a80 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    DiagnoseClock.setTime24Hour(10, 10, 0);
 8005044:	220a      	movs	r2, #10
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 8005046:	2303      	movs	r3, #3
 8005048:	4640      	mov	r0, r8
 800504a:	4611      	mov	r1, r2
 800504c:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 8005050:	4633      	mov	r3, r6
 8005052:	f00c fd18 	bl	8011a86 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 8005056:	4641      	mov	r1, r8
 8005058:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 800505a:	f10d 0820 	add.w	r8, sp, #32
 800505e:	f00c fd83 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseTitile.setPosition(0, 12, 800, 62);
 8005062:	233e      	movs	r3, #62	@ 0x3e
 8005064:	220c      	movs	r2, #12
 8005066:	4631      	mov	r1, r6
 8005068:	4648      	mov	r0, r9
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005070:	f7fe fe57 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005074:	4649      	mov	r1, r9
 8005076:	4640      	mov	r0, r8
        color = newColor;
 8005078:	f8c4 a134 	str.w	sl, [r4, #308]	@ 0x134
        linespace = space;
 800507c:	f8a4 6138 	strh.w	r6, [r4, #312]	@ 0x138
        boundingArea = calculateBoundingArea();
 8005080:	f011 fa76 	bl	8016570 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8005084:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 8005088:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800508c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005090:	4b66      	ldr	r3, [pc, #408]	@ (800522c <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseTitile.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HCE1));
 8005092:	a90e      	add	r1, sp, #56	@ 0x38
 8005094:	4648      	mov	r0, r9
 8005096:	930e      	str	r3, [sp, #56]	@ 0x38
 8005098:	231a      	movs	r3, #26
 800509a:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 800509e:	f011 fd01 	bl	8016aa4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	f00c fd5f 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80050aa:	2308      	movs	r3, #8
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
 80050ac:	a90e      	add	r1, sp, #56	@ 0x38
 80050ae:	9803      	ldr	r0, [sp, #12]
 80050b0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80050b4:	f011 fe8d 	bl	8016dd2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 80050b8:	2337      	movs	r3, #55	@ 0x37
 80050ba:	2210      	movs	r2, #16
 80050bc:	2117      	movs	r1, #23
 80050be:	9803      	ldr	r0, [sp, #12]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	f7fe fe2e 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80050c6:	4631      	mov	r1, r6
 80050c8:	9803      	ldr	r0, [sp, #12]
 80050ca:	f010 ff62 	bl	8015f92 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80050ce:	9903      	ldr	r1, [sp, #12]
 80050d0:	4638      	mov	r0, r7
 80050d2:	f00c fd49 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(400, 90, 320, 240);
 80050d6:	23f0      	movs	r3, #240	@ 0xf0
 80050d8:	225a      	movs	r2, #90	@ 0x5a
 80050da:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80050de:	4628      	mov	r0, r5
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80050e6:	f7fe fe1c 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 80050ea:	4632      	mov	r2, r6
 80050ec:	4659      	mov	r1, fp
 80050ee:	4628      	mov	r0, r5
 80050f0:	f7ff fc7f 	bl	80049f2 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 80050f4:	4633      	mov	r3, r6
 80050f6:	4632      	mov	r2, r6
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	9600      	str	r6, [sp, #0]
 80050fe:	f010 fbfa 	bl	80158f6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8005102:	4633      	mov	r3, r6
 8005104:	4632      	mov	r2, r6
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	9600      	str	r6, [sp, #0]
 800510c:	f010 fb1a 	bl	8015744 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8005110:	2264      	movs	r2, #100	@ 0x64
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	f7ff fb3f 	bl	8004798 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 800511a:	4b4d      	ldr	r3, [pc, #308]	@ (8005250 <_ZN16DiagnoseViewBaseC1Ev+0x3d8>)
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 800511c:	f04f 0202 	mov.w	r2, #2
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8005120:	9906      	ldr	r1, [sp, #24]
 8005122:	f8c4 3494 	str.w	r3, [r4, #1172]	@ 0x494
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8005126:	f249 7314 	movw	r3, #38676	@ 0x9714
 800512a:	4628      	mov	r0, r5
 800512c:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 8005130:	f8a4 3498 	strh.w	r3, [r4, #1176]	@ 0x498
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8005134:	23c5      	movs	r3, #197	@ 0xc5
 8005136:	f884 349a 	strb.w	r3, [r4, #1178]	@ 0x49a
        canvasPainter = &painter;
 800513a:	9b07      	ldr	r3, [sp, #28]
 800513c:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
 8005140:	f010 fb0b 	bl	801575a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8005144:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005148:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005254 <_ZN16DiagnoseViewBaseC1Ev+0x3dc>
 800514c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005150:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	f2c1 82d5 	blt.w	800670a <_ZN16DiagnoseViewBaseC1Ev+0x1892>
            return (int)(fs + 0.5f);
 8005160:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800516c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005170:	4628      	mov	r0, r5
 8005172:	f010 fccc 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005176:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800517a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005258 <_ZN16DiagnoseViewBaseC1Ev+0x3e0>
 800517e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005182:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	f2c1 82d0 	blt.w	8006732 <_ZN16DiagnoseViewBaseC1Ev+0x18ba>
            return (int)(fs + 0.5f);
 8005192:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800519a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800519e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051a2:	4628      	mov	r0, r5
 80051a4:	f010 fcb3 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051a8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80051ac:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800525c <_ZN16DiagnoseViewBaseC1Ev+0x3e4>
 80051b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	f2c1 82cb 	blt.w	800675a <_ZN16DiagnoseViewBaseC1Ev+0x18e2>
            return (int)(fs + 0.5f);
 80051c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051d4:	4628      	mov	r0, r5
 80051d6:	f010 fc9a 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051da:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80051de:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005260 <_ZN16DiagnoseViewBaseC1Ev+0x3e8>
 80051e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	f2c1 82c6 	blt.w	8006782 <_ZN16DiagnoseViewBaseC1Ev+0x190a>
            return (int)(fs + 0.5f);
 80051f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80051fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005202:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005206:	4628      	mov	r0, r5
 8005208:	f010 fc81 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800520c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005210:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005264 <_ZN16DiagnoseViewBaseC1Ev+0x3ec>
 8005214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800521c:	e04c      	b.n	80052b8 <_ZN16DiagnoseViewBaseC1Ev+0x440>
 800521e:	bf00      	nop
 8005220:	0802ba04 	.word	0x0802ba04
 8005224:	0802d080 	.word	0x0802d080
 8005228:	0802cff0 	.word	0x0802cff0
 800522c:	0802b578 	.word	0x0802b578
 8005230:	0802b618 	.word	0x0802b618
 8005234:	0802cc38 	.word	0x0802cc38
 8005238:	0802b854 	.word	0x0802b854
 800523c:	0802cf00 	.word	0x0802cf00
 8005240:	0802cb68 	.word	0x0802cb68
 8005244:	0802d0e8 	.word	0x0802d0e8
 8005248:	0802b9ec 	.word	0x0802b9ec
 800524c:	08004dd5 	.word	0x08004dd5
 8005250:	ff1497c5 	.word	0xff1497c5
 8005254:	42977c6e 	.word	0x42977c6e
 8005258:	42896904 	.word	0x42896904
 800525c:	4260f242 	.word	0x4260f242
 8005260:	42219ceb 	.word	0x42219ceb
 8005264:	41c1580b 	.word	0x41c1580b
 8005268:	ffa3baff 	.word	0xffa3baff
 800526c:	412b3abd 	.word	0x412b3abd
 8005270:	4028ee39 	.word	0x4028ee39
 8005274:	3fbb0111 	.word	0x3fbb0111
 8005278:	40e4c02f 	.word	0x40e4c02f
 800527c:	4191a071 	.word	0x4191a071
 8005280:	42001183 	.word	0x42001183
 8005284:	4236064a 	.word	0x4236064a
 8005288:	425f6b59 	.word	0x425f6b59
 800528c:	4274bdec 	.word	0x4274bdec
 8005290:	4273f7a5 	.word	0x4273f7a5
 8005294:	4260ece7 	.word	0x4260ece7
 8005298:	42443795 	.word	0x42443795
 800529c:	4228f3d0 	.word	0x4228f3d0
 80052a0:	4219ddfc 	.word	0x4219ddfc
 80052a4:	421e8856 	.word	0x421e8856
 80052a8:	423958f2 	.word	0x423958f2
 80052ac:	4266cf1d 	.word	0x4266cf1d
 80052b0:	428f1fe1 	.word	0x428f1fe1
 80052b4:	42a9edc2 	.word	0x42a9edc2
        if (fs >= 0)
 80052b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c0:	f2c1 8273 	blt.w	80067aa <_ZN16DiagnoseViewBaseC1Ev+0x1932>
            return (int)(fs + 0.5f);
 80052c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80052c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052d4:	4628      	mov	r0, r5
 80052d6:	f010 fc1a 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052da:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80052de:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 800526c <_ZN16DiagnoseViewBaseC1Ev+0x3f4>
 80052e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	f2c1 826e 	blt.w	80067d2 <_ZN16DiagnoseViewBaseC1Ev+0x195a>
            return (int)(fs + 0.5f);
 80052f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80052fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005302:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005306:	4628      	mov	r0, r5
 8005308:	f010 fc01 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800530c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005310:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 8005270 <_ZN16DiagnoseViewBaseC1Ev+0x3f8>
 8005314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005318:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800531c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	f2c1 8269 	blt.w	80067fa <_ZN16DiagnoseViewBaseC1Ev+0x1982>
            return (int)(fs + 0.5f);
 8005328:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800532c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005334:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005338:	4628      	mov	r0, r5
 800533a:	f010 fbe8 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800533e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005342:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 8005274 <_ZN16DiagnoseViewBaseC1Ev+0x3fc>
 8005346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800534a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800534e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	f2c1 8264 	blt.w	8006822 <_ZN16DiagnoseViewBaseC1Ev+0x19aa>
            return (int)(fs + 0.5f);
 800535a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800535e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005366:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800536a:	4628      	mov	r0, r5
 800536c:	f010 fbcf 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005370:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005374:	ed1f 7a40 	vldr	s14, [pc, #-256]	@ 8005278 <_ZN16DiagnoseViewBaseC1Ev+0x400>
 8005378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005388:	f2c1 825f 	blt.w	800684a <_ZN16DiagnoseViewBaseC1Ev+0x19d2>
            return (int)(fs + 0.5f);
 800538c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005398:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800539c:	4628      	mov	r0, r5
 800539e:	f010 fbb6 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053a2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80053a6:	ed1f 7a4b 	vldr	s14, [pc, #-300]	@ 800527c <_ZN16DiagnoseViewBaseC1Ev+0x404>
 80053aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ba:	f2c1 825a 	blt.w	8006872 <_ZN16DiagnoseViewBaseC1Ev+0x19fa>
            return (int)(fs + 0.5f);
 80053be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80053c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053ce:	4628      	mov	r0, r5
 80053d0:	f010 fb9d 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053d4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80053d8:	ed1f 7a57 	vldr	s14, [pc, #-348]	@ 8005280 <_ZN16DiagnoseViewBaseC1Ev+0x408>
 80053dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ec:	f2c1 8255 	blt.w	800689a <_ZN16DiagnoseViewBaseC1Ev+0x1a22>
            return (int)(fs + 0.5f);
 80053f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80053f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005400:	4628      	mov	r0, r5
 8005402:	f010 fb84 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005406:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800540a:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 8005284 <_ZN16DiagnoseViewBaseC1Ev+0x40c>
 800540e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005412:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	f2c1 8250 	blt.w	80068c2 <_ZN16DiagnoseViewBaseC1Ev+0x1a4a>
            return (int)(fs + 0.5f);
 8005422:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800542a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800542e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005432:	4628      	mov	r0, r5
 8005434:	f010 fb6b 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005438:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800543c:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8005288 <_ZN16DiagnoseViewBaseC1Ev+0x410>
 8005440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005444:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005450:	f2c1 824b 	blt.w	80068ea <_ZN16DiagnoseViewBaseC1Ev+0x1a72>
            return (int)(fs + 0.5f);
 8005454:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800545c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005460:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005464:	4628      	mov	r0, r5
 8005466:	f010 fb52 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800546a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800546e:	ed1f 7a79 	vldr	s14, [pc, #-484]	@ 800528c <_ZN16DiagnoseViewBaseC1Ev+0x414>
 8005472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005476:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800547a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800547e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005482:	f2c1 8246 	blt.w	8006912 <_ZN16DiagnoseViewBaseC1Ev+0x1a9a>
            return (int)(fs + 0.5f);
 8005486:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800548a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800548e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005492:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005496:	4628      	mov	r0, r5
 8005498:	f010 fb39 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800549c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80054a0:	ed1f 7a85 	vldr	s14, [pc, #-532]	@ 8005290 <_ZN16DiagnoseViewBaseC1Ev+0x418>
 80054a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b4:	f2c1 8241 	blt.w	800693a <_ZN16DiagnoseViewBaseC1Ev+0x1ac2>
            return (int)(fs + 0.5f);
 80054b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80054bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054c8:	4628      	mov	r0, r5
 80054ca:	f010 fb20 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054ce:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80054d2:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 8005294 <_ZN16DiagnoseViewBaseC1Ev+0x41c>
 80054d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e6:	f2c1 823c 	blt.w	8006962 <_ZN16DiagnoseViewBaseC1Ev+0x1aea>
            return (int)(fs + 0.5f);
 80054ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80054ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054fa:	4628      	mov	r0, r5
 80054fc:	f010 fb07 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005500:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005504:	ed1f 7a9c 	vldr	s14, [pc, #-624]	@ 8005298 <_ZN16DiagnoseViewBaseC1Ev+0x420>
 8005508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005518:	f2c1 8237 	blt.w	800698a <_ZN16DiagnoseViewBaseC1Ev+0x1b12>
            return (int)(fs + 0.5f);
 800551c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005528:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800552c:	4628      	mov	r0, r5
 800552e:	f010 faee 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005532:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005536:	ed1f 7aa7 	vldr	s14, [pc, #-668]	@ 800529c <_ZN16DiagnoseViewBaseC1Ev+0x424>
 800553a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800553e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	f2c1 8232 	blt.w	80069b2 <_ZN16DiagnoseViewBaseC1Ev+0x1b3a>
            return (int)(fs + 0.5f);
 800554e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800555a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800555e:	4628      	mov	r0, r5
 8005560:	f010 fad5 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005564:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005568:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 80052a0 <_ZN16DiagnoseViewBaseC1Ev+0x428>
 800556c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005570:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557c:	f2c1 822d 	blt.w	80069da <_ZN16DiagnoseViewBaseC1Ev+0x1b62>
            return (int)(fs + 0.5f);
 8005580:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800558c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005590:	4628      	mov	r0, r5
 8005592:	f010 fabc 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005596:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800559a:	ed1f 7abe 	vldr	s14, [pc, #-760]	@ 80052a4 <_ZN16DiagnoseViewBaseC1Ev+0x42c>
 800559e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ae:	f2c1 8228 	blt.w	8006a02 <_ZN16DiagnoseViewBaseC1Ev+0x1b8a>
            return (int)(fs + 0.5f);
 80055b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80055b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055be:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055c2:	4628      	mov	r0, r5
 80055c4:	f010 faa3 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055c8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80055cc:	ed1f 7aca 	vldr	s14, [pc, #-808]	@ 80052a8 <_ZN16DiagnoseViewBaseC1Ev+0x430>
 80055d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e0:	f2c1 8223 	blt.w	8006a2a <_ZN16DiagnoseViewBaseC1Ev+0x1bb2>
            return (int)(fs + 0.5f);
 80055e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80055e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055f4:	4628      	mov	r0, r5
 80055f6:	f010 fa8a 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055fa:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80055fe:	ed1f 7ad5 	vldr	s14, [pc, #-852]	@ 80052ac <_ZN16DiagnoseViewBaseC1Ev+0x434>
 8005602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005606:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800560a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005612:	f2c1 821e 	blt.w	8006a52 <_ZN16DiagnoseViewBaseC1Ev+0x1bda>
            return (int)(fs + 0.5f);
 8005616:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800561a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800561e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005622:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005626:	4628      	mov	r0, r5
 8005628:	f010 fa71 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800562c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005630:	ed1f 7ae1 	vldr	s14, [pc, #-900]	@ 80052b0 <_ZN16DiagnoseViewBaseC1Ev+0x438>
 8005634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005638:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800563c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005644:	f2c1 8219 	blt.w	8006a7a <_ZN16DiagnoseViewBaseC1Ev+0x1c02>
            return (int)(fs + 0.5f);
 8005648:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800564c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005654:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005658:	4628      	mov	r0, r5
 800565a:	f010 fa58 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800565e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005662:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 80052b4 <_ZN16DiagnoseViewBaseC1Ev+0x43c>
 8005666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800566e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005676:	f2c1 8214 	blt.w	8006aa2 <_ZN16DiagnoseViewBaseC1Ev+0x1c2a>
            return (int)(fs + 0.5f);
 800567a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800567e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005686:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800568a:	4628      	mov	r0, r5
 800568c:	f010 fa3f 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005690:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005694:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 8005a64 <_ZN16DiagnoseViewBaseC1Ev+0xbec>
 8005698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80056a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a8:	f2c1 820f 	blt.w	8006aca <_ZN16DiagnoseViewBaseC1Ev+0x1c52>
            return (int)(fs + 0.5f);
 80056ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80056b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80056bc:	4628      	mov	r0, r5
 80056be:	f010 fa26 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80056c2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80056c6:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 8005a68 <_ZN16DiagnoseViewBaseC1Ev+0xbf0>
 80056ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80056d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056da:	f2c1 820a 	blt.w	8006af2 <_ZN16DiagnoseViewBaseC1Ev+0x1c7a>
            return (int)(fs + 0.5f);
 80056de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80056e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056ea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80056ee:	4628      	mov	r0, r5
 80056f0:	f010 fa0d 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80056f4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80056f8:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8005a6c <_ZN16DiagnoseViewBaseC1Ev+0xbf4>
 80056fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005700:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570c:	f2c1 8205 	blt.w	8006b1a <_ZN16DiagnoseViewBaseC1Ev+0x1ca2>
            return (int)(fs + 0.5f);
 8005710:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005714:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800571c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005720:	4628      	mov	r0, r5
 8005722:	f010 f9f4 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005726:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800572a:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8005a70 <_ZN16DiagnoseViewBaseC1Ev+0xbf8>
 800572e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005732:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	f2c1 8200 	blt.w	8006b42 <_ZN16DiagnoseViewBaseC1Ev+0x1cca>
            return (int)(fs + 0.5f);
 8005742:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800574a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800574e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005752:	4628      	mov	r0, r5
 8005754:	f010 f9db 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005758:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800575c:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8005a74 <_ZN16DiagnoseViewBaseC1Ev+0xbfc>
 8005760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005764:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800576c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005770:	f2c1 81fb 	blt.w	8006b6a <_ZN16DiagnoseViewBaseC1Ev+0x1cf2>
            return (int)(fs + 0.5f);
 8005774:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800577c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005780:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005784:	4628      	mov	r0, r5
 8005786:	f010 f9c2 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800578a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800578e:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005a78 <_ZN16DiagnoseViewBaseC1Ev+0xc00>
 8005792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005796:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800579a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a2:	f2c1 81f6 	blt.w	8006b92 <_ZN16DiagnoseViewBaseC1Ev+0x1d1a>
            return (int)(fs + 0.5f);
 80057a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80057b6:	4628      	mov	r0, r5
 80057b8:	f010 f9a9 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80057bc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80057c0:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8005a7c <_ZN16DiagnoseViewBaseC1Ev+0xc04>
 80057c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80057cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	f2c1 81f1 	blt.w	8006bba <_ZN16DiagnoseViewBaseC1Ev+0x1d42>
            return (int)(fs + 0.5f);
 80057d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057e4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80057e8:	4628      	mov	r0, r5
 80057ea:	f010 f990 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80057ee:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80057f2:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8005a80 <_ZN16DiagnoseViewBaseC1Ev+0xc08>
 80057f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80057fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005806:	f2c1 81ec 	blt.w	8006be2 <_ZN16DiagnoseViewBaseC1Ev+0x1d6a>
            return (int)(fs + 0.5f);
 800580a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800580e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005816:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800581a:	4628      	mov	r0, r5
 800581c:	f010 f977 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005820:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005824:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005a84 <_ZN16DiagnoseViewBaseC1Ev+0xc0c>
 8005828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005838:	f2c1 81e7 	blt.w	8006c0a <_ZN16DiagnoseViewBaseC1Ev+0x1d92>
            return (int)(fs + 0.5f);
 800583c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005848:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800584c:	4628      	mov	r0, r5
 800584e:	f010 f95e 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005852:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005856:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8005a88 <_ZN16DiagnoseViewBaseC1Ev+0xc10>
 800585a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800585e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586a:	f2c1 81e2 	blt.w	8006c32 <_ZN16DiagnoseViewBaseC1Ev+0x1dba>
            return (int)(fs + 0.5f);
 800586e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800587a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800587e:	4628      	mov	r0, r5
 8005880:	f010 f945 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005884:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005888:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005a8c <_ZN16DiagnoseViewBaseC1Ev+0xc14>
 800588c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005890:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589c:	f2c1 81dd 	blt.w	8006c5a <_ZN16DiagnoseViewBaseC1Ev+0x1de2>
            return (int)(fs + 0.5f);
 80058a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80058b0:	4628      	mov	r0, r5
 80058b2:	f010 f92c 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80058b6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80058ba:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8005a90 <_ZN16DiagnoseViewBaseC1Ev+0xc18>
 80058be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058c2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80058c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ce:	f2c1 81d8 	blt.w	8006c82 <_ZN16DiagnoseViewBaseC1Ev+0x1e0a>
            return (int)(fs + 0.5f);
 80058d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058de:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80058e2:	4628      	mov	r0, r5
 80058e4:	f010 f913 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80058e8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80058ec:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8005a94 <_ZN16DiagnoseViewBaseC1Ev+0xc1c>
 80058f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80058f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005900:	f2c1 81d3 	blt.w	8006caa <_ZN16DiagnoseViewBaseC1Ev+0x1e32>
            return (int)(fs + 0.5f);
 8005904:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800590c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005910:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005914:	4628      	mov	r0, r5
 8005916:	f010 f8fa 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800591a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800591e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8005a98 <_ZN16DiagnoseViewBaseC1Ev+0xc20>
 8005922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005926:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800592a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005932:	f2c1 81ce 	blt.w	8006cd2 <_ZN16DiagnoseViewBaseC1Ev+0x1e5a>
            return (int)(fs + 0.5f);
 8005936:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800593a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800593e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005942:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005946:	4628      	mov	r0, r5
 8005948:	f010 f8e1 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800594c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005950:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005a9c <_ZN16DiagnoseViewBaseC1Ev+0xc24>
 8005954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005958:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800595c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005964:	f2c1 81c9 	blt.w	8006cfa <_ZN16DiagnoseViewBaseC1Ev+0x1e82>
            return (int)(fs + 0.5f);
 8005968:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800596c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005974:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005978:	4628      	mov	r0, r5
 800597a:	f010 f8c8 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800597e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005982:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005aa0 <_ZN16DiagnoseViewBaseC1Ev+0xc28>
 8005986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800598a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800598e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	f2c1 81c4 	blt.w	8006d22 <_ZN16DiagnoseViewBaseC1Ev+0x1eaa>
            return (int)(fs + 0.5f);
 800599a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800599e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059a6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80059aa:	4628      	mov	r0, r5
 80059ac:	f010 f8af 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80059b0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80059b4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005aa4 <_ZN16DiagnoseViewBaseC1Ev+0xc2c>
 80059b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80059c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c8:	f2c1 81bf 	blt.w	8006d4a <_ZN16DiagnoseViewBaseC1Ev+0x1ed2>
            return (int)(fs + 0.5f);
 80059cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80059d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059d8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80059dc:	4628      	mov	r0, r5
 80059de:	f010 f896 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80059e2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80059e6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005aa8 <_ZN16DiagnoseViewBaseC1Ev+0xc30>
 80059ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80059f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fa:	f2c1 81ba 	blt.w	8006d72 <_ZN16DiagnoseViewBaseC1Ev+0x1efa>
            return (int)(fs + 0.5f);
 80059fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a0a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f010 f87d 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a14:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a18:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005aac <_ZN16DiagnoseViewBaseC1Ev+0xc34>
 8005a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a20:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2c:	f2c1 81b5 	blt.w	8006d9a <_ZN16DiagnoseViewBaseC1Ev+0x1f22>
            return (int)(fs + 0.5f);
 8005a30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a3c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a40:	4628      	mov	r0, r5
 8005a42:	f010 f864 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a46:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a4a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005ab0 <_ZN16DiagnoseViewBaseC1Ev+0xc38>
 8005a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a52:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5e:	f2c1 81b0 	blt.w	8006dc2 <_ZN16DiagnoseViewBaseC1Ev+0x1f4a>
 8005a62:	e04d      	b.n	8005b00 <_ZN16DiagnoseViewBaseC1Ev+0xc88>
 8005a64:	42bdc083 	.word	0x42bdc083
 8005a68:	42c5d585 	.word	0x42c5d585
 8005a6c:	42bfe1a1 	.word	0x42bfe1a1
 8005a70:	42aca41f 	.word	0x42aca41f
 8005a74:	428fbf28 	.word	0x428fbf28
 8005a78:	425dbdf6 	.word	0x425dbdf6
 8005a7c:	4220c971 	.word	0x4220c971
 8005a80:	41e79e30 	.word	0x41e79e30
 8005a84:	41bba58a 	.word	0x41bba58a
 8005a88:	41c03ddf 	.word	0x41c03ddf
 8005a8c:	41ec3b01 	.word	0x41ec3b01
 8005a90:	4216a066 	.word	0x4216a066
 8005a94:	423647a4 	.word	0x423647a4
 8005a98:	424a6d26 	.word	0x424a6d26
 8005a9c:	424bddc7 	.word	0x424bddc7
 8005aa0:	4238b3be 	.word	0x4238b3be
 8005aa4:	4214dd41 	.word	0x4214dd41
 8005aa8:	41d25c19 	.word	0x41d25c19
 8005aac:	41826af2 	.word	0x41826af2
 8005ab0:	412184c0 	.word	0x412184c0
 8005ab4:	411c803f 	.word	0x411c803f
 8005ab8:	4181733e 	.word	0x4181733e
 8005abc:	41e4c438 	.word	0x41e4c438
 8005ac0:	4233c65c 	.word	0x4233c65c
 8005ac4:	4278ee70 	.word	0x4278ee70
 8005ac8:	429a8141 	.word	0x429a8141
 8005acc:	42aea312 	.word	0x42aea312
 8005ad0:	42b5c855 	.word	0x42b5c855
 8005ad4:	42afd4b1 	.word	0x42afd4b1
 8005ad8:	429f9a06 	.word	0x429f9a06
 8005adc:	428a19ce 	.word	0x428a19ce
 8005ae0:	426a8187 	.word	0x426a8187
 8005ae4:	424cd9b6 	.word	0x424cd9b6
 8005ae8:	4242344c 	.word	0x4242344c
 8005aec:	424c13d3 	.word	0x424c13d3
 8005af0:	426631d4 	.word	0x426631d4
 8005af4:	4283ced6 	.word	0x4283ced6
 8005af8:	4292837e 	.word	0x4292837e
 8005afc:	4299d153 	.word	0x4299d153
            return (int)(fs + 0.5f);
 8005b00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b0c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b10:	4628      	mov	r0, r5
 8005b12:	f00f fffc 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b16:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b1a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8005ab4 <_ZN16DiagnoseViewBaseC1Ev+0xc3c>
 8005b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b22:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2e:	f2c1 815c 	blt.w	8006dea <_ZN16DiagnoseViewBaseC1Ev+0x1f72>
            return (int)(fs + 0.5f);
 8005b32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b3e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b42:	4628      	mov	r0, r5
 8005b44:	f00f ffe3 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b48:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b4c:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8005ab8 <_ZN16DiagnoseViewBaseC1Ev+0xc40>
 8005b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b60:	f2c1 8157 	blt.w	8006e12 <_ZN16DiagnoseViewBaseC1Ev+0x1f9a>
            return (int)(fs + 0.5f);
 8005b64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b70:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b74:	4628      	mov	r0, r5
 8005b76:	f00f ffca 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b7a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b7e:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 8005abc <_ZN16DiagnoseViewBaseC1Ev+0xc44>
 8005b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b86:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b92:	f2c1 8152 	blt.w	8006e3a <_ZN16DiagnoseViewBaseC1Ev+0x1fc2>
            return (int)(fs + 0.5f);
 8005b96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ba2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f00f ffb1 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005bac:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005bb0:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8005ac0 <_ZN16DiagnoseViewBaseC1Ev+0xc48>
 8005bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc4:	f2c1 814d 	blt.w	8006e62 <_ZN16DiagnoseViewBaseC1Ev+0x1fea>
            return (int)(fs + 0.5f);
 8005bc8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bd4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f00f ff98 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005bde:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005be2:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 8005ac4 <_ZN16DiagnoseViewBaseC1Ev+0xc4c>
 8005be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf6:	f2c1 8148 	blt.w	8006e8a <_ZN16DiagnoseViewBaseC1Ev+0x2012>
            return (int)(fs + 0.5f);
 8005bfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c06:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f00f ff7f 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c10:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c14:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 8005ac8 <_ZN16DiagnoseViewBaseC1Ev+0xc50>
 8005c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c28:	f2c1 8143 	blt.w	8006eb2 <_ZN16DiagnoseViewBaseC1Ev+0x203a>
            return (int)(fs + 0.5f);
 8005c2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c38:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f00f ff66 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c42:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c46:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8005acc <_ZN16DiagnoseViewBaseC1Ev+0xc54>
 8005c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	f2c1 813e 	blt.w	8006eda <_ZN16DiagnoseViewBaseC1Ev+0x2062>
            return (int)(fs + 0.5f);
 8005c5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c6a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f00f ff4d 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c74:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c78:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 8005ad0 <_ZN16DiagnoseViewBaseC1Ev+0xc58>
 8005c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c80:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8c:	f2c1 8139 	blt.w	8006f02 <_ZN16DiagnoseViewBaseC1Ev+0x208a>
            return (int)(fs + 0.5f);
 8005c90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c9c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f00f ff34 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ca6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005caa:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8005ad4 <_ZN16DiagnoseViewBaseC1Ev+0xc5c>
 8005cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005cb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbe:	f2c1 8134 	blt.w	8006f2a <_ZN16DiagnoseViewBaseC1Ev+0x20b2>
            return (int)(fs + 0.5f);
 8005cc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f00f ff1b 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005cd8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005cdc:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8005ad8 <_ZN16DiagnoseViewBaseC1Ev+0xc60>
 8005ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ce8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf0:	f2c1 812f 	blt.w	8006f52 <_ZN16DiagnoseViewBaseC1Ev+0x20da>
            return (int)(fs + 0.5f);
 8005cf4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d00:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d04:	4628      	mov	r0, r5
 8005d06:	f00f ff02 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d0a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d0e:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8005adc <_ZN16DiagnoseViewBaseC1Ev+0xc64>
 8005d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d16:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d22:	f2c1 812a 	blt.w	8006f7a <_ZN16DiagnoseViewBaseC1Ev+0x2102>
            return (int)(fs + 0.5f);
 8005d26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d32:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d36:	4628      	mov	r0, r5
 8005d38:	f00f fee9 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d3c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d40:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 8005ae0 <_ZN16DiagnoseViewBaseC1Ev+0xc68>
 8005d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d48:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d54:	f2c1 8125 	blt.w	8006fa2 <_ZN16DiagnoseViewBaseC1Ev+0x212a>
            return (int)(fs + 0.5f);
 8005d58:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d64:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f00f fed0 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d6e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d72:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 8005ae4 <_ZN16DiagnoseViewBaseC1Ev+0xc6c>
 8005d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	f2c1 8120 	blt.w	8006fca <_ZN16DiagnoseViewBaseC1Ev+0x2152>
            return (int)(fs + 0.5f);
 8005d8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d96:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f00f feb7 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005da0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005da4:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 8005ae8 <_ZN16DiagnoseViewBaseC1Ev+0xc70>
 8005da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db8:	f2c1 811b 	blt.w	8006ff2 <_ZN16DiagnoseViewBaseC1Ev+0x217a>
            return (int)(fs + 0.5f);
 8005dbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dc8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f00f fe9e 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005dd2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005dd6:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 8005aec <_ZN16DiagnoseViewBaseC1Ev+0xc74>
 8005dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dde:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dea:	f2c1 8116 	blt.w	800701a <_ZN16DiagnoseViewBaseC1Ev+0x21a2>
            return (int)(fs + 0.5f);
 8005dee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dfa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f00f fe85 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e04:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e08:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 8005af0 <_ZN16DiagnoseViewBaseC1Ev+0xc78>
 8005e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e10:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1c:	f2c1 8111 	blt.w	8007042 <_ZN16DiagnoseViewBaseC1Ev+0x21ca>
            return (int)(fs + 0.5f);
 8005e20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e2c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e30:	4628      	mov	r0, r5
 8005e32:	f00f fe6c 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e36:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e3a:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8005af4 <_ZN16DiagnoseViewBaseC1Ev+0xc7c>
 8005e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e42:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4e:	f2c1 810c 	blt.w	800706a <_ZN16DiagnoseViewBaseC1Ev+0x21f2>
            return (int)(fs + 0.5f);
 8005e52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e5e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e62:	4628      	mov	r0, r5
 8005e64:	f00f fe53 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e68:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e6c:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 8005af8 <_ZN16DiagnoseViewBaseC1Ev+0xc80>
 8005e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e74:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e80:	f2c1 8107 	blt.w	8007092 <_ZN16DiagnoseViewBaseC1Ev+0x221a>
            return (int)(fs + 0.5f);
 8005e84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e90:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e94:	4628      	mov	r0, r5
 8005e96:	f00f fe3a 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e9a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e9e:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 8005afc <_ZN16DiagnoseViewBaseC1Ev+0xc84>
 8005ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb2:	f2c1 8102 	blt.w	80070ba <_ZN16DiagnoseViewBaseC1Ev+0x2242>
            return (int)(fs + 0.5f);
 8005eb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ec2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f00f fe21 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ecc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ed0:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 80062a0 <_ZN16DiagnoseViewBaseC1Ev+0x1428>
 8005ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005edc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee4:	f2c1 80fd 	blt.w	80070e2 <_ZN16DiagnoseViewBaseC1Ev+0x226a>
            return (int)(fs + 0.5f);
 8005ee8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ef4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f00f fe08 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005efe:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f02:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 80062a4 <_ZN16DiagnoseViewBaseC1Ev+0x142c>
 8005f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f16:	f2c1 80f8 	blt.w	800710a <_ZN16DiagnoseViewBaseC1Ev+0x2292>
            return (int)(fs + 0.5f);
 8005f1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f26:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f00f fdef 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f30:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f34:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80062a8 <_ZN16DiagnoseViewBaseC1Ev+0x1430>
 8005f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f48:	f2c1 80f3 	blt.w	8007132 <_ZN16DiagnoseViewBaseC1Ev+0x22ba>
            return (int)(fs + 0.5f);
 8005f4c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f58:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f00f fdd6 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f62:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f66:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80062ac <_ZN16DiagnoseViewBaseC1Ev+0x1434>
 8005f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7a:	f2c1 80ee 	blt.w	800715a <_ZN16DiagnoseViewBaseC1Ev+0x22e2>
            return (int)(fs + 0.5f);
 8005f7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f8a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f00f fdbd 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f94:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f98:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 80062b0 <_ZN16DiagnoseViewBaseC1Ev+0x1438>
 8005f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fac:	f2c1 80e9 	blt.w	8007182 <_ZN16DiagnoseViewBaseC1Ev+0x230a>
            return (int)(fs + 0.5f);
 8005fb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fbc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f00f fda4 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005fc6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005fca:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80062b4 <_ZN16DiagnoseViewBaseC1Ev+0x143c>
 8005fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fde:	f2c1 80e4 	blt.w	80071aa <_ZN16DiagnoseViewBaseC1Ev+0x2332>
            return (int)(fs + 0.5f);
 8005fe2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f00f fd8b 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ff8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ffc:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80062b8 <_ZN16DiagnoseViewBaseC1Ev+0x1440>
 8006000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006004:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006010:	f2c1 80df 	blt.w	80071d2 <_ZN16DiagnoseViewBaseC1Ev+0x235a>
            return (int)(fs + 0.5f);
 8006014:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800601c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006020:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006024:	4628      	mov	r0, r5
 8006026:	f00f fd72 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800602a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800602e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 80062bc <_ZN16DiagnoseViewBaseC1Ev+0x1444>
 8006032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006036:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800603a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800603e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006042:	f2c1 80da 	blt.w	80071fa <_ZN16DiagnoseViewBaseC1Ev+0x2382>
            return (int)(fs + 0.5f);
 8006046:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800604a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800604e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006052:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006056:	4628      	mov	r0, r5
 8006058:	f00f fd59 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800605c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006060:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80062c0 <_ZN16DiagnoseViewBaseC1Ev+0x1448>
 8006064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006068:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800606c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	f2c1 80d5 	blt.w	8007222 <_ZN16DiagnoseViewBaseC1Ev+0x23aa>
            return (int)(fs + 0.5f);
 8006078:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800607c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006084:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006088:	4628      	mov	r0, r5
 800608a:	f00f fd40 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800608e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006092:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80062c4 <_ZN16DiagnoseViewBaseC1Ev+0x144c>
 8006096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800609a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800609e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a6:	f2c1 80d0 	blt.w	800724a <_ZN16DiagnoseViewBaseC1Ev+0x23d2>
            return (int)(fs + 0.5f);
 80060aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060b6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060ba:	4628      	mov	r0, r5
 80060bc:	f00f fd27 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060c0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060c4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80062c8 <_ZN16DiagnoseViewBaseC1Ev+0x1450>
 80060c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d8:	f2c1 80cb 	blt.w	8007272 <_ZN16DiagnoseViewBaseC1Ev+0x23fa>
            return (int)(fs + 0.5f);
 80060dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060ec:	4628      	mov	r0, r5
 80060ee:	f00f fd0e 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060f2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060f6:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80062cc <_ZN16DiagnoseViewBaseC1Ev+0x1454>
 80060fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610a:	f2c1 80c6 	blt.w	800729a <_ZN16DiagnoseViewBaseC1Ev+0x2422>
            return (int)(fs + 0.5f);
 800610e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800611a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800611e:	4628      	mov	r0, r5
 8006120:	f00f fcf5 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006124:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006128:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80062d0 <_ZN16DiagnoseViewBaseC1Ev+0x1458>
 800612c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006130:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613c:	f2c1 80c1 	blt.w	80072c2 <_ZN16DiagnoseViewBaseC1Ev+0x244a>
            return (int)(fs + 0.5f);
 8006140:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800614c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006150:	4628      	mov	r0, r5
 8006152:	f00f fcdc 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006156:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800615a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80062d4 <_ZN16DiagnoseViewBaseC1Ev+0x145c>
 800615e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006162:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616e:	f2c1 80bc 	blt.w	80072ea <_ZN16DiagnoseViewBaseC1Ev+0x2472>
            return (int)(fs + 0.5f);
 8006172:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800617a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006182:	4628      	mov	r0, r5
 8006184:	f00f fcc3 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006188:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800618c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80062d8 <_ZN16DiagnoseViewBaseC1Ev+0x1460>
 8006190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006194:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a0:	f2c1 80b7 	blt.w	8007312 <_ZN16DiagnoseViewBaseC1Ev+0x249a>
            return (int)(fs + 0.5f);
 80061a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061b4:	4628      	mov	r0, r5
 80061b6:	f00f fcaa 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061ba:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061be:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80062dc <_ZN16DiagnoseViewBaseC1Ev+0x1464>
 80061c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d2:	f2c1 80b2 	blt.w	800733a <_ZN16DiagnoseViewBaseC1Ev+0x24c2>
            return (int)(fs + 0.5f);
 80061d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061e6:	4628      	mov	r0, r5
 80061e8:	f00f fc91 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061ec:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061f0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80062e0 <_ZN16DiagnoseViewBaseC1Ev+0x1468>
 80061f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061f8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006204:	f2c1 80ad 	blt.w	8007362 <_ZN16DiagnoseViewBaseC1Ev+0x24ea>
            return (int)(fs + 0.5f);
 8006208:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800620c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006214:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006218:	4628      	mov	r0, r5
 800621a:	f00f fc78 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800621e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006222:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80062e4 <_ZN16DiagnoseViewBaseC1Ev+0x146c>
 8006226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800622a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800622e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006236:	f2c1 80a8 	blt.w	800738a <_ZN16DiagnoseViewBaseC1Ev+0x2512>
            return (int)(fs + 0.5f);
 800623a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800623e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006246:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800624a:	4628      	mov	r0, r5
 800624c:	f00f fc5f 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006250:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006254:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80062e8 <_ZN16DiagnoseViewBaseC1Ev+0x1470>
 8006258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800625c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006268:	f2c1 80a3 	blt.w	80073b2 <_ZN16DiagnoseViewBaseC1Ev+0x253a>
            return (int)(fs + 0.5f);
 800626c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006278:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800627c:	4628      	mov	r0, r5
 800627e:	f00f fc46 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006282:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006286:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80062ec <_ZN16DiagnoseViewBaseC1Ev+0x1474>
 800628a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800628e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629a:	f2c1 809e 	blt.w	80073da <_ZN16DiagnoseViewBaseC1Ev+0x2562>
 800629e:	e049      	b.n	8006334 <_ZN16DiagnoseViewBaseC1Ev+0x14bc>
 80062a0:	4295fa02 	.word	0x4295fa02
 80062a4:	4285e50c 	.word	0x4285e50c
 80062a8:	4256f26f 	.word	0x4256f26f
 80062ac:	42167451 	.word	0x42167451
 80062b0:	41ad0597 	.word	0x41ad0597
 80062b4:	410e92d7 	.word	0x410e92d7
 80062b8:	3ff86e6e 	.word	0x3ff86e6e
 80062bc:	3ffaf599 	.word	0x3ffaf599
 80062c0:	410b128e 	.word	0x410b128e
 80062c4:	41a35230 	.word	0x41a35230
 80062c8:	42099166 	.word	0x42099166
 80062cc:	423e2093 	.word	0x423e2093
 80062d0:	426489ab 	.word	0x426489ab
 80062d4:	42761f9c 	.word	0x42761f9c
 80062d8:	4271dbd0 	.word	0x4271dbd0
 80062dc:	425c7cf8 	.word	0x425c7cf8
 80062e0:	423f37ee 	.word	0x423f37ee
 80062e4:	42254e0a 	.word	0x42254e0a
 80062e8:	42192202 	.word	0x42192202
 80062ec:	422183b0 	.word	0x422183b0
 80062f0:	423fde06 	.word	0x423fde06
 80062f4:	426fbac7 	.word	0x426fbac7
 80062f8:	4293ddf2 	.word	0x4293ddf2
 80062fc:	42ade74e 	.word	0x42ade74e
 8006300:	42c007bb 	.word	0x42c007bb
 8006304:	42c5d556 	.word	0x42c5d556
 8006308:	42bd8271 	.word	0x42bd8271
 800630c:	42a8528b 	.word	0x42a8528b
 8006310:	428a52fd 	.word	0x428a52fd
 8006314:	4252d134 	.word	0x4252d134
 8006318:	4217da1a 	.word	0x4217da1a
 800631c:	41dcc932 	.word	0x41dcc932
 8006320:	41b921ff 	.word	0x41b921ff
 8006324:	41c54a38 	.word	0x41c54a38
 8006328:	41f649c0 	.word	0x41f649c0
 800632c:	421c52f7 	.word	0x421c52f7
 8006330:	423ab963 	.word	0x423ab963
            return (int)(fs + 0.5f);
 8006334:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800633c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006340:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006344:	4628      	mov	r0, r5
 8006346:	f00f fbe2 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800634a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800634e:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 80062f0 <_ZN16DiagnoseViewBaseC1Ev+0x1478>
 8006352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006356:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800635a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006362:	f2c1 804e 	blt.w	8007402 <_ZN16DiagnoseViewBaseC1Ev+0x258a>
            return (int)(fs + 0.5f);
 8006366:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800636a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800636e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006372:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006376:	4628      	mov	r0, r5
 8006378:	f00f fbc9 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800637c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006380:	ed1f 7a24 	vldr	s14, [pc, #-144]	@ 80062f4 <_ZN16DiagnoseViewBaseC1Ev+0x147c>
 8006384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006388:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800638c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006394:	f2c1 8049 	blt.w	800742a <_ZN16DiagnoseViewBaseC1Ev+0x25b2>
            return (int)(fs + 0.5f);
 8006398:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800639c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063a8:	4628      	mov	r0, r5
 80063aa:	f00f fbb0 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063ae:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063b2:	ed1f 7a2f 	vldr	s14, [pc, #-188]	@ 80062f8 <_ZN16DiagnoseViewBaseC1Ev+0x1480>
 80063b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c6:	f2c1 8044 	blt.w	8007452 <_ZN16DiagnoseViewBaseC1Ev+0x25da>
            return (int)(fs + 0.5f);
 80063ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063da:	4628      	mov	r0, r5
 80063dc:	f00f fb97 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063e0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063e4:	ed1f 7a3b 	vldr	s14, [pc, #-236]	@ 80062fc <_ZN16DiagnoseViewBaseC1Ev+0x1484>
 80063e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f8:	f2c1 803f 	blt.w	800747a <_ZN16DiagnoseViewBaseC1Ev+0x2602>
            return (int)(fs + 0.5f);
 80063fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006408:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800640c:	4628      	mov	r0, r5
 800640e:	f00f fb7e 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006412:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006416:	ed1f 7a46 	vldr	s14, [pc, #-280]	@ 8006300 <_ZN16DiagnoseViewBaseC1Ev+0x1488>
 800641a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800641e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800642a:	f2c1 803a 	blt.w	80074a2 <_ZN16DiagnoseViewBaseC1Ev+0x262a>
            return (int)(fs + 0.5f);
 800642e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006432:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800643a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800643e:	4628      	mov	r0, r5
 8006440:	f00f fb65 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006444:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006448:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 8006304 <_ZN16DiagnoseViewBaseC1Ev+0x148c>
 800644c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006450:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645c:	f2c1 8035 	blt.w	80074ca <_ZN16DiagnoseViewBaseC1Ev+0x2652>
            return (int)(fs + 0.5f);
 8006460:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800646c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006470:	4628      	mov	r0, r5
 8006472:	f00f fb4c 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006476:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800647a:	ed1f 7a5d 	vldr	s14, [pc, #-372]	@ 8006308 <_ZN16DiagnoseViewBaseC1Ev+0x1490>
 800647e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006482:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648e:	f2c1 8030 	blt.w	80074f2 <_ZN16DiagnoseViewBaseC1Ev+0x267a>
            return (int)(fs + 0.5f);
 8006492:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006496:	ee77 7a87 	vadd.f32	s15, s15, s14
 800649a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800649e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064a2:	4628      	mov	r0, r5
 80064a4:	f00f fb33 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80064a8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064ac:	ed1f 7a69 	vldr	s14, [pc, #-420]	@ 800630c <_ZN16DiagnoseViewBaseC1Ev+0x1494>
 80064b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c0:	f2c1 802b 	blt.w	800751a <_ZN16DiagnoseViewBaseC1Ev+0x26a2>
            return (int)(fs + 0.5f);
 80064c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064d4:	4628      	mov	r0, r5
 80064d6:	f00f fb1a 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80064da:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064de:	ed1f 7a74 	vldr	s14, [pc, #-464]	@ 8006310 <_ZN16DiagnoseViewBaseC1Ev+0x1498>
 80064e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f2:	f2c1 8026 	blt.w	8007542 <_ZN16DiagnoseViewBaseC1Ev+0x26ca>
            return (int)(fs + 0.5f);
 80064f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006502:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006506:	4628      	mov	r0, r5
 8006508:	f00f fb01 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800650c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006510:	ed1f 7a80 	vldr	s14, [pc, #-512]	@ 8006314 <_ZN16DiagnoseViewBaseC1Ev+0x149c>
 8006514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006518:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800651c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006524:	f2c1 8021 	blt.w	800756a <_ZN16DiagnoseViewBaseC1Ev+0x26f2>
            return (int)(fs + 0.5f);
 8006528:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800652c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006534:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006538:	4628      	mov	r0, r5
 800653a:	f00f fae8 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800653e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006542:	ed1f 7a8b 	vldr	s14, [pc, #-556]	@ 8006318 <_ZN16DiagnoseViewBaseC1Ev+0x14a0>
 8006546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800654a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800654e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006556:	f2c1 801c 	blt.w	8007592 <_ZN16DiagnoseViewBaseC1Ev+0x271a>
            return (int)(fs + 0.5f);
 800655a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800655e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006566:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800656a:	4628      	mov	r0, r5
 800656c:	f00f facf 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006570:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006574:	ed1f 7a97 	vldr	s14, [pc, #-604]	@ 800631c <_ZN16DiagnoseViewBaseC1Ev+0x14a4>
 8006578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006588:	f2c1 8017 	blt.w	80075ba <_ZN16DiagnoseViewBaseC1Ev+0x2742>
            return (int)(fs + 0.5f);
 800658c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006598:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800659c:	4628      	mov	r0, r5
 800659e:	f00f fab6 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065a2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80065a6:	ed1f 7aa2 	vldr	s14, [pc, #-648]	@ 8006320 <_ZN16DiagnoseViewBaseC1Ev+0x14a8>
 80065aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ba:	f2c1 8012 	blt.w	80075e2 <_ZN16DiagnoseViewBaseC1Ev+0x276a>
            return (int)(fs + 0.5f);
 80065be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80065ce:	4628      	mov	r0, r5
 80065d0:	f00f fa9d 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065d4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80065d8:	ed1f 7aae 	vldr	s14, [pc, #-696]	@ 8006324 <_ZN16DiagnoseViewBaseC1Ev+0x14ac>
 80065dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ec:	f2c1 800d 	blt.w	800760a <_ZN16DiagnoseViewBaseC1Ev+0x2792>
            return (int)(fs + 0.5f);
 80065f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006600:	4628      	mov	r0, r5
 8006602:	f00f fa84 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006606:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800660a:	ed1f 7ab9 	vldr	s14, [pc, #-740]	@ 8006328 <_ZN16DiagnoseViewBaseC1Ev+0x14b0>
 800660e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006612:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661e:	f2c1 8008 	blt.w	8007632 <_ZN16DiagnoseViewBaseC1Ev+0x27ba>
            return (int)(fs + 0.5f);
 8006622:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800662a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800662e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006632:	4628      	mov	r0, r5
 8006634:	f00f fa6b 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006638:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800663c:	ed1f 7ac5 	vldr	s14, [pc, #-788]	@ 800632c <_ZN16DiagnoseViewBaseC1Ev+0x14b4>
 8006640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006644:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006650:	f2c1 8003 	blt.w	800765a <_ZN16DiagnoseViewBaseC1Ev+0x27e2>
            return (int)(fs + 0.5f);
 8006654:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800665c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006660:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006664:	4628      	mov	r0, r5
 8006666:	f00f fa52 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800666a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800666e:	ed1f 7ad0 	vldr	s14, [pc, #-832]	@ 8006330 <_ZN16DiagnoseViewBaseC1Ev+0x14b8>
 8006672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006676:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800667a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006682:	f2c0 87fe 	blt.w	8007682 <_ZN16DiagnoseViewBaseC1Ev+0x280a>
            return (int)(fs + 0.5f);
 8006686:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800668a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800668e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006692:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006696:	4628      	mov	r0, r5
 8006698:	f00f fa39 	bl	8015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 800669c:	4629      	mov	r1, r5
 800669e:	4638      	mov	r0, r7
 80066a0:	f00b fa62 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 80066a4:	9804      	ldr	r0, [sp, #16]
 80066a6:	220e      	movs	r2, #14
 80066a8:	2114      	movs	r1, #20
 80066aa:	f7fd fb2d 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
 80066ae:	2304      	movs	r3, #4
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 80066b0:	aa0e      	add	r2, sp, #56	@ 0x38
 80066b2:	a90d      	add	r1, sp, #52	@ 0x34
 80066b4:	9804      	ldr	r0, [sp, #16]
 80066b6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80066ba:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80066be:	f010 fa4f 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    HomeButton.setAction(buttonCallback);
 80066c2:	f504 5351 	add.w	r3, r4, #13376	@ 0x3440
 80066c6:	9904      	ldr	r1, [sp, #16]
 80066c8:	4638      	mov	r0, r7
 80066ca:	332c      	adds	r3, #44	@ 0x2c
        action = &callback;
 80066cc:	f8c4 34c4 	str.w	r3, [r4, #1220]	@ 0x4c4
 80066d0:	f00b fa4a 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scrollableContainer1.setPosition(0, 80, 307, 400);
 80066d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80066d8:	2250      	movs	r2, #80	@ 0x50
 80066da:	9805      	ldr	r0, [sp, #20]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	2100      	movs	r1, #0
 80066e0:	f240 1333 	movw	r3, #307	@ 0x133
 80066e4:	f7fd fb1d 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80066e8:	9805      	ldr	r0, [sp, #20]
 80066ea:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 80066ee:	f00c fb21 	bl	8012d34 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    scrollableContainer1.setScrollbarsAlpha(255);
 80066f2:	9805      	ldr	r0, [sp, #20]
 80066f4:	21ff      	movs	r1, #255	@ 0xff
 80066f6:	f00c fb22 	bl	8012d3e <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
 80066fa:	4638      	mov	r0, r7
 80066fc:	9905      	ldr	r1, [sp, #20]
 80066fe:	f00b fa33 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006702:	4620      	mov	r0, r4
 8006704:	b011      	add	sp, #68	@ 0x44
 8006706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800670a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800670e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006712:	ee17 3a10 	vmov	r3, s14
 8006716:	3b01      	subs	r3, #1
 8006718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800671c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006728:	ee17 1a90 	vmov	r1, s15
 800672c:	4419      	add	r1, r3
 800672e:	f7fe bd1f 	b.w	8005170 <_ZN16DiagnoseViewBaseC1Ev+0x2f8>
 8006732:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006736:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800673a:	ee17 3a10 	vmov	r3, s14
 800673e:	3b01      	subs	r3, #1
 8006740:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006744:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006750:	ee17 1a90 	vmov	r1, s15
 8006754:	4419      	add	r1, r3
 8006756:	f7fe bd24 	b.w	80051a2 <_ZN16DiagnoseViewBaseC1Ev+0x32a>
 800675a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800675e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006762:	ee17 3a10 	vmov	r3, s14
 8006766:	3b01      	subs	r3, #1
 8006768:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800676c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006778:	ee17 1a90 	vmov	r1, s15
 800677c:	4419      	add	r1, r3
 800677e:	f7fe bd29 	b.w	80051d4 <_ZN16DiagnoseViewBaseC1Ev+0x35c>
 8006782:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006786:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800678a:	ee17 3a10 	vmov	r3, s14
 800678e:	3b01      	subs	r3, #1
 8006790:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006794:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a0:	ee17 1a90 	vmov	r1, s15
 80067a4:	4419      	add	r1, r3
 80067a6:	f7fe bd2e 	b.w	8005206 <_ZN16DiagnoseViewBaseC1Ev+0x38e>
 80067aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067b2:	ee17 3a10 	vmov	r3, s14
 80067b6:	3b01      	subs	r3, #1
 80067b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067bc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80067c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067c8:	ee17 1a90 	vmov	r1, s15
 80067cc:	4419      	add	r1, r3
 80067ce:	f7fe bd81 	b.w	80052d4 <_ZN16DiagnoseViewBaseC1Ev+0x45c>
 80067d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067da:	ee17 3a10 	vmov	r3, s14
 80067de:	3b01      	subs	r3, #1
 80067e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067e4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80067e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067f0:	ee17 1a90 	vmov	r1, s15
 80067f4:	4419      	add	r1, r3
 80067f6:	f7fe bd86 	b.w	8005306 <_ZN16DiagnoseViewBaseC1Ev+0x48e>
 80067fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006802:	ee17 3a10 	vmov	r3, s14
 8006806:	3b01      	subs	r3, #1
 8006808:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800680c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006818:	ee17 1a90 	vmov	r1, s15
 800681c:	4419      	add	r1, r3
 800681e:	f7fe bd8b 	b.w	8005338 <_ZN16DiagnoseViewBaseC1Ev+0x4c0>
 8006822:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006826:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800682a:	ee17 3a10 	vmov	r3, s14
 800682e:	3b01      	subs	r3, #1
 8006830:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006834:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006840:	ee17 1a90 	vmov	r1, s15
 8006844:	4419      	add	r1, r3
 8006846:	f7fe bd90 	b.w	800536a <_ZN16DiagnoseViewBaseC1Ev+0x4f2>
 800684a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800684e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006852:	ee17 3a10 	vmov	r3, s14
 8006856:	3b01      	subs	r3, #1
 8006858:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800685c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006868:	ee17 1a90 	vmov	r1, s15
 800686c:	4419      	add	r1, r3
 800686e:	f7fe bd95 	b.w	800539c <_ZN16DiagnoseViewBaseC1Ev+0x524>
 8006872:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006876:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800687a:	ee17 3a10 	vmov	r3, s14
 800687e:	3b01      	subs	r3, #1
 8006880:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006884:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006890:	ee17 1a90 	vmov	r1, s15
 8006894:	4419      	add	r1, r3
 8006896:	f7fe bd9a 	b.w	80053ce <_ZN16DiagnoseViewBaseC1Ev+0x556>
 800689a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800689e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068a2:	ee17 3a10 	vmov	r3, s14
 80068a6:	3b01      	subs	r3, #1
 80068a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068ac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80068b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b8:	ee17 1a90 	vmov	r1, s15
 80068bc:	4419      	add	r1, r3
 80068be:	f7fe bd9f 	b.w	8005400 <_ZN16DiagnoseViewBaseC1Ev+0x588>
 80068c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068ca:	ee17 3a10 	vmov	r3, s14
 80068ce:	3b01      	subs	r3, #1
 80068d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068d4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80068d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e0:	ee17 1a90 	vmov	r1, s15
 80068e4:	4419      	add	r1, r3
 80068e6:	f7fe bda4 	b.w	8005432 <_ZN16DiagnoseViewBaseC1Ev+0x5ba>
 80068ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068f2:	ee17 3a10 	vmov	r3, s14
 80068f6:	3b01      	subs	r3, #1
 80068f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068fc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006908:	ee17 1a90 	vmov	r1, s15
 800690c:	4419      	add	r1, r3
 800690e:	f7fe bda9 	b.w	8005464 <_ZN16DiagnoseViewBaseC1Ev+0x5ec>
 8006912:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006916:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800691a:	ee17 3a10 	vmov	r3, s14
 800691e:	3b01      	subs	r3, #1
 8006920:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006924:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800692c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006930:	ee17 1a90 	vmov	r1, s15
 8006934:	4419      	add	r1, r3
 8006936:	f7fe bdae 	b.w	8005496 <_ZN16DiagnoseViewBaseC1Ev+0x61e>
 800693a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800693e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006942:	ee17 3a10 	vmov	r3, s14
 8006946:	3b01      	subs	r3, #1
 8006948:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800694c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006958:	ee17 1a90 	vmov	r1, s15
 800695c:	4419      	add	r1, r3
 800695e:	f7fe bdb3 	b.w	80054c8 <_ZN16DiagnoseViewBaseC1Ev+0x650>
 8006962:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006966:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800696a:	ee17 3a10 	vmov	r3, s14
 800696e:	3b01      	subs	r3, #1
 8006970:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006974:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006980:	ee17 1a90 	vmov	r1, s15
 8006984:	4419      	add	r1, r3
 8006986:	f7fe bdb8 	b.w	80054fa <_ZN16DiagnoseViewBaseC1Ev+0x682>
 800698a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800698e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006992:	ee17 3a10 	vmov	r3, s14
 8006996:	3b01      	subs	r3, #1
 8006998:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800699c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80069a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069a8:	ee17 1a90 	vmov	r1, s15
 80069ac:	4419      	add	r1, r3
 80069ae:	f7fe bdbd 	b.w	800552c <_ZN16DiagnoseViewBaseC1Ev+0x6b4>
 80069b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069ba:	ee17 3a10 	vmov	r3, s14
 80069be:	3b01      	subs	r3, #1
 80069c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069c4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80069c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069d0:	ee17 1a90 	vmov	r1, s15
 80069d4:	4419      	add	r1, r3
 80069d6:	f7fe bdc2 	b.w	800555e <_ZN16DiagnoseViewBaseC1Ev+0x6e6>
 80069da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069e2:	ee17 3a10 	vmov	r3, s14
 80069e6:	3b01      	subs	r3, #1
 80069e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069ec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80069f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069f8:	ee17 1a90 	vmov	r1, s15
 80069fc:	4419      	add	r1, r3
 80069fe:	f7fe bdc7 	b.w	8005590 <_ZN16DiagnoseViewBaseC1Ev+0x718>
 8006a02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a0a:	ee17 3a10 	vmov	r3, s14
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a14:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a20:	ee17 1a90 	vmov	r1, s15
 8006a24:	4419      	add	r1, r3
 8006a26:	f7fe bdcc 	b.w	80055c2 <_ZN16DiagnoseViewBaseC1Ev+0x74a>
 8006a2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a2e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a32:	ee17 3a10 	vmov	r3, s14
 8006a36:	3b01      	subs	r3, #1
 8006a38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a3c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a48:	ee17 1a90 	vmov	r1, s15
 8006a4c:	4419      	add	r1, r3
 8006a4e:	f7fe bdd1 	b.w	80055f4 <_ZN16DiagnoseViewBaseC1Ev+0x77c>
 8006a52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a5a:	ee17 3a10 	vmov	r3, s14
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a64:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a70:	ee17 1a90 	vmov	r1, s15
 8006a74:	4419      	add	r1, r3
 8006a76:	f7fe bdd6 	b.w	8005626 <_ZN16DiagnoseViewBaseC1Ev+0x7ae>
 8006a7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a82:	ee17 3a10 	vmov	r3, s14
 8006a86:	3b01      	subs	r3, #1
 8006a88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a8c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a98:	ee17 1a90 	vmov	r1, s15
 8006a9c:	4419      	add	r1, r3
 8006a9e:	f7fe bddb 	b.w	8005658 <_ZN16DiagnoseViewBaseC1Ev+0x7e0>
 8006aa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006aa6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006aaa:	ee17 3a10 	vmov	r3, s14
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ab4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac0:	ee17 1a90 	vmov	r1, s15
 8006ac4:	4419      	add	r1, r3
 8006ac6:	f7fe bde0 	b.w	800568a <_ZN16DiagnoseViewBaseC1Ev+0x812>
 8006aca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ace:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ad2:	ee17 3a10 	vmov	r3, s14
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006adc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ae8:	ee17 1a90 	vmov	r1, s15
 8006aec:	4419      	add	r1, r3
 8006aee:	f7fe bde5 	b.w	80056bc <_ZN16DiagnoseViewBaseC1Ev+0x844>
 8006af2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006af6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006afa:	ee17 3a10 	vmov	r3, s14
 8006afe:	3b01      	subs	r3, #1
 8006b00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b04:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b10:	ee17 1a90 	vmov	r1, s15
 8006b14:	4419      	add	r1, r3
 8006b16:	f7fe bdea 	b.w	80056ee <_ZN16DiagnoseViewBaseC1Ev+0x876>
 8006b1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b1e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b22:	ee17 3a10 	vmov	r3, s14
 8006b26:	3b01      	subs	r3, #1
 8006b28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b2c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b38:	ee17 1a90 	vmov	r1, s15
 8006b3c:	4419      	add	r1, r3
 8006b3e:	f7fe bdef 	b.w	8005720 <_ZN16DiagnoseViewBaseC1Ev+0x8a8>
 8006b42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b46:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b4a:	ee17 3a10 	vmov	r3, s14
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b54:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b60:	ee17 1a90 	vmov	r1, s15
 8006b64:	4419      	add	r1, r3
 8006b66:	f7fe bdf4 	b.w	8005752 <_ZN16DiagnoseViewBaseC1Ev+0x8da>
 8006b6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b6e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b72:	ee17 3a10 	vmov	r3, s14
 8006b76:	3b01      	subs	r3, #1
 8006b78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b7c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b88:	ee17 1a90 	vmov	r1, s15
 8006b8c:	4419      	add	r1, r3
 8006b8e:	f7fe bdf9 	b.w	8005784 <_ZN16DiagnoseViewBaseC1Ev+0x90c>
 8006b92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b9a:	ee17 3a10 	vmov	r3, s14
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ba4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bb0:	ee17 1a90 	vmov	r1, s15
 8006bb4:	4419      	add	r1, r3
 8006bb6:	f7fe bdfe 	b.w	80057b6 <_ZN16DiagnoseViewBaseC1Ev+0x93e>
 8006bba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006bbe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bc2:	ee17 3a10 	vmov	r3, s14
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bcc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bd8:	ee17 1a90 	vmov	r1, s15
 8006bdc:	4419      	add	r1, r3
 8006bde:	f7fe be03 	b.w	80057e8 <_ZN16DiagnoseViewBaseC1Ev+0x970>
 8006be2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006be6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bea:	ee17 3a10 	vmov	r3, s14
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bf4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c00:	ee17 1a90 	vmov	r1, s15
 8006c04:	4419      	add	r1, r3
 8006c06:	f7fe be08 	b.w	800581a <_ZN16DiagnoseViewBaseC1Ev+0x9a2>
 8006c0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c12:	ee17 3a10 	vmov	r3, s14
 8006c16:	3b01      	subs	r3, #1
 8006c18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c1c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c28:	ee17 1a90 	vmov	r1, s15
 8006c2c:	4419      	add	r1, r3
 8006c2e:	f7fe be0d 	b.w	800584c <_ZN16DiagnoseViewBaseC1Ev+0x9d4>
 8006c32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c3a:	ee17 3a10 	vmov	r3, s14
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c44:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c50:	ee17 1a90 	vmov	r1, s15
 8006c54:	4419      	add	r1, r3
 8006c56:	f7fe be12 	b.w	800587e <_ZN16DiagnoseViewBaseC1Ev+0xa06>
 8006c5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c62:	ee17 3a10 	vmov	r3, s14
 8006c66:	3b01      	subs	r3, #1
 8006c68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c6c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c78:	ee17 1a90 	vmov	r1, s15
 8006c7c:	4419      	add	r1, r3
 8006c7e:	f7fe be17 	b.w	80058b0 <_ZN16DiagnoseViewBaseC1Ev+0xa38>
 8006c82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c8a:	ee17 3a10 	vmov	r3, s14
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c94:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ca0:	ee17 1a90 	vmov	r1, s15
 8006ca4:	4419      	add	r1, r3
 8006ca6:	f7fe be1c 	b.w	80058e2 <_ZN16DiagnoseViewBaseC1Ev+0xa6a>
 8006caa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cb2:	ee17 3a10 	vmov	r3, s14
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cbc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cc8:	ee17 1a90 	vmov	r1, s15
 8006ccc:	4419      	add	r1, r3
 8006cce:	f7fe be21 	b.w	8005914 <_ZN16DiagnoseViewBaseC1Ev+0xa9c>
 8006cd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cd6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cda:	ee17 3a10 	vmov	r3, s14
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ce4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cf0:	ee17 1a90 	vmov	r1, s15
 8006cf4:	4419      	add	r1, r3
 8006cf6:	f7fe be26 	b.w	8005946 <_ZN16DiagnoseViewBaseC1Ev+0xace>
 8006cfa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cfe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d02:	ee17 3a10 	vmov	r3, s14
 8006d06:	3b01      	subs	r3, #1
 8006d08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d0c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d18:	ee17 1a90 	vmov	r1, s15
 8006d1c:	4419      	add	r1, r3
 8006d1e:	f7fe be2b 	b.w	8005978 <_ZN16DiagnoseViewBaseC1Ev+0xb00>
 8006d22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d26:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d2a:	ee17 3a10 	vmov	r3, s14
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d34:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d40:	ee17 1a90 	vmov	r1, s15
 8006d44:	4419      	add	r1, r3
 8006d46:	f7fe be30 	b.w	80059aa <_ZN16DiagnoseViewBaseC1Ev+0xb32>
 8006d4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d4e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d52:	ee17 3a10 	vmov	r3, s14
 8006d56:	3b01      	subs	r3, #1
 8006d58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d5c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d68:	ee17 1a90 	vmov	r1, s15
 8006d6c:	4419      	add	r1, r3
 8006d6e:	f7fe be35 	b.w	80059dc <_ZN16DiagnoseViewBaseC1Ev+0xb64>
 8006d72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d76:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d7a:	ee17 3a10 	vmov	r3, s14
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d84:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d90:	ee17 1a90 	vmov	r1, s15
 8006d94:	4419      	add	r1, r3
 8006d96:	f7fe be3a 	b.w	8005a0e <_ZN16DiagnoseViewBaseC1Ev+0xb96>
 8006d9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d9e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006da2:	ee17 3a10 	vmov	r3, s14
 8006da6:	3b01      	subs	r3, #1
 8006da8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db8:	ee17 1a90 	vmov	r1, s15
 8006dbc:	4419      	add	r1, r3
 8006dbe:	f7fe be3f 	b.w	8005a40 <_ZN16DiagnoseViewBaseC1Ev+0xbc8>
 8006dc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dc6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006dca:	ee17 3a10 	vmov	r3, s14
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dd4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de0:	ee17 1a90 	vmov	r1, s15
 8006de4:	4419      	add	r1, r3
 8006de6:	f7fe be93 	b.w	8005b10 <_ZN16DiagnoseViewBaseC1Ev+0xc98>
 8006dea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006df2:	ee17 3a10 	vmov	r3, s14
 8006df6:	3b01      	subs	r3, #1
 8006df8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dfc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e08:	ee17 1a90 	vmov	r1, s15
 8006e0c:	4419      	add	r1, r3
 8006e0e:	f7fe be98 	b.w	8005b42 <_ZN16DiagnoseViewBaseC1Ev+0xcca>
 8006e12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e1a:	ee17 3a10 	vmov	r3, s14
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e24:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e30:	ee17 1a90 	vmov	r1, s15
 8006e34:	4419      	add	r1, r3
 8006e36:	f7fe be9d 	b.w	8005b74 <_ZN16DiagnoseViewBaseC1Ev+0xcfc>
 8006e3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e42:	ee17 3a10 	vmov	r3, s14
 8006e46:	3b01      	subs	r3, #1
 8006e48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e4c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e58:	ee17 1a90 	vmov	r1, s15
 8006e5c:	4419      	add	r1, r3
 8006e5e:	f7fe bea2 	b.w	8005ba6 <_ZN16DiagnoseViewBaseC1Ev+0xd2e>
 8006e62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e6a:	ee17 3a10 	vmov	r3, s14
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e74:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e80:	ee17 1a90 	vmov	r1, s15
 8006e84:	4419      	add	r1, r3
 8006e86:	f7fe bea7 	b.w	8005bd8 <_ZN16DiagnoseViewBaseC1Ev+0xd60>
 8006e8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e8e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e92:	ee17 3a10 	vmov	r3, s14
 8006e96:	3b01      	subs	r3, #1
 8006e98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e9c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ea8:	ee17 1a90 	vmov	r1, s15
 8006eac:	4419      	add	r1, r3
 8006eae:	f7fe beac 	b.w	8005c0a <_ZN16DiagnoseViewBaseC1Ev+0xd92>
 8006eb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006eb6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006eba:	ee17 3a10 	vmov	r3, s14
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ec4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed0:	ee17 1a90 	vmov	r1, s15
 8006ed4:	4419      	add	r1, r3
 8006ed6:	f7fe beb1 	b.w	8005c3c <_ZN16DiagnoseViewBaseC1Ev+0xdc4>
 8006eda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ede:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ee2:	ee17 3a10 	vmov	r3, s14
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006eec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef8:	ee17 1a90 	vmov	r1, s15
 8006efc:	4419      	add	r1, r3
 8006efe:	f7fe beb6 	b.w	8005c6e <_ZN16DiagnoseViewBaseC1Ev+0xdf6>
 8006f02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f0a:	ee17 3a10 	vmov	r3, s14
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f14:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f20:	ee17 1a90 	vmov	r1, s15
 8006f24:	4419      	add	r1, r3
 8006f26:	f7fe bebb 	b.w	8005ca0 <_ZN16DiagnoseViewBaseC1Ev+0xe28>
 8006f2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f2e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f32:	ee17 3a10 	vmov	r3, s14
 8006f36:	3b01      	subs	r3, #1
 8006f38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f3c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f48:	ee17 1a90 	vmov	r1, s15
 8006f4c:	4419      	add	r1, r3
 8006f4e:	f7fe bec0 	b.w	8005cd2 <_ZN16DiagnoseViewBaseC1Ev+0xe5a>
 8006f52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f5a:	ee17 3a10 	vmov	r3, s14
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f64:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f70:	ee17 1a90 	vmov	r1, s15
 8006f74:	4419      	add	r1, r3
 8006f76:	f7fe bec5 	b.w	8005d04 <_ZN16DiagnoseViewBaseC1Ev+0xe8c>
 8006f7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f7e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f82:	ee17 3a10 	vmov	r3, s14
 8006f86:	3b01      	subs	r3, #1
 8006f88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f8c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f98:	ee17 1a90 	vmov	r1, s15
 8006f9c:	4419      	add	r1, r3
 8006f9e:	f7fe beca 	b.w	8005d36 <_ZN16DiagnoseViewBaseC1Ev+0xebe>
 8006fa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fa6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006faa:	ee17 3a10 	vmov	r3, s14
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fb4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fc0:	ee17 1a90 	vmov	r1, s15
 8006fc4:	4419      	add	r1, r3
 8006fc6:	f7fe becf 	b.w	8005d68 <_ZN16DiagnoseViewBaseC1Ev+0xef0>
 8006fca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fd2:	ee17 3a10 	vmov	r3, s14
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fdc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fe8:	ee17 1a90 	vmov	r1, s15
 8006fec:	4419      	add	r1, r3
 8006fee:	f7fe bed4 	b.w	8005d9a <_ZN16DiagnoseViewBaseC1Ev+0xf22>
 8006ff2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ff6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ffa:	ee17 3a10 	vmov	r3, s14
 8006ffe:	3b01      	subs	r3, #1
 8007000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007004:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007010:	ee17 1a90 	vmov	r1, s15
 8007014:	4419      	add	r1, r3
 8007016:	f7fe bed9 	b.w	8005dcc <_ZN16DiagnoseViewBaseC1Ev+0xf54>
 800701a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800701e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007022:	ee17 3a10 	vmov	r3, s14
 8007026:	3b01      	subs	r3, #1
 8007028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800702c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007038:	ee17 1a90 	vmov	r1, s15
 800703c:	4419      	add	r1, r3
 800703e:	f7fe bede 	b.w	8005dfe <_ZN16DiagnoseViewBaseC1Ev+0xf86>
 8007042:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007046:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800704a:	ee17 3a10 	vmov	r3, s14
 800704e:	3b01      	subs	r3, #1
 8007050:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007054:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007060:	ee17 1a90 	vmov	r1, s15
 8007064:	4419      	add	r1, r3
 8007066:	f7fe bee3 	b.w	8005e30 <_ZN16DiagnoseViewBaseC1Ev+0xfb8>
 800706a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800706e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007072:	ee17 3a10 	vmov	r3, s14
 8007076:	3b01      	subs	r3, #1
 8007078:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800707c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007088:	ee17 1a90 	vmov	r1, s15
 800708c:	4419      	add	r1, r3
 800708e:	f7fe bee8 	b.w	8005e62 <_ZN16DiagnoseViewBaseC1Ev+0xfea>
 8007092:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007096:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800709a:	ee17 3a10 	vmov	r3, s14
 800709e:	3b01      	subs	r3, #1
 80070a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070a4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b0:	ee17 1a90 	vmov	r1, s15
 80070b4:	4419      	add	r1, r3
 80070b6:	f7fe beed 	b.w	8005e94 <_ZN16DiagnoseViewBaseC1Ev+0x101c>
 80070ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070c2:	ee17 3a10 	vmov	r3, s14
 80070c6:	3b01      	subs	r3, #1
 80070c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070cc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070d8:	ee17 1a90 	vmov	r1, s15
 80070dc:	4419      	add	r1, r3
 80070de:	f7fe bef2 	b.w	8005ec6 <_ZN16DiagnoseViewBaseC1Ev+0x104e>
 80070e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070ea:	ee17 3a10 	vmov	r3, s14
 80070ee:	3b01      	subs	r3, #1
 80070f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070f4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007100:	ee17 1a90 	vmov	r1, s15
 8007104:	4419      	add	r1, r3
 8007106:	f7fe bef7 	b.w	8005ef8 <_ZN16DiagnoseViewBaseC1Ev+0x1080>
 800710a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800710e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007112:	ee17 3a10 	vmov	r3, s14
 8007116:	3b01      	subs	r3, #1
 8007118:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800711c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007128:	ee17 1a90 	vmov	r1, s15
 800712c:	4419      	add	r1, r3
 800712e:	f7fe befc 	b.w	8005f2a <_ZN16DiagnoseViewBaseC1Ev+0x10b2>
 8007132:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007136:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800713a:	ee17 3a10 	vmov	r3, s14
 800713e:	3b01      	subs	r3, #1
 8007140:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007144:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007150:	ee17 1a90 	vmov	r1, s15
 8007154:	4419      	add	r1, r3
 8007156:	f7fe bf01 	b.w	8005f5c <_ZN16DiagnoseViewBaseC1Ev+0x10e4>
 800715a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800715e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007162:	ee17 3a10 	vmov	r3, s14
 8007166:	3b01      	subs	r3, #1
 8007168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800716c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007178:	ee17 1a90 	vmov	r1, s15
 800717c:	4419      	add	r1, r3
 800717e:	f7fe bf06 	b.w	8005f8e <_ZN16DiagnoseViewBaseC1Ev+0x1116>
 8007182:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007186:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800718a:	ee17 3a10 	vmov	r3, s14
 800718e:	3b01      	subs	r3, #1
 8007190:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007194:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071a0:	ee17 1a90 	vmov	r1, s15
 80071a4:	4419      	add	r1, r3
 80071a6:	f7fe bf0b 	b.w	8005fc0 <_ZN16DiagnoseViewBaseC1Ev+0x1148>
 80071aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80071b2:	ee17 3a10 	vmov	r3, s14
 80071b6:	3b01      	subs	r3, #1
 80071b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071bc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80071c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071c8:	ee17 1a90 	vmov	r1, s15
 80071cc:	4419      	add	r1, r3
 80071ce:	f7fe bf10 	b.w	8005ff2 <_ZN16DiagnoseViewBaseC1Ev+0x117a>
 80071d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80071da:	ee17 3a10 	vmov	r3, s14
 80071de:	3b01      	subs	r3, #1
 80071e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071e4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80071e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071f0:	ee17 1a90 	vmov	r1, s15
 80071f4:	4419      	add	r1, r3
 80071f6:	f7fe bf15 	b.w	8006024 <_ZN16DiagnoseViewBaseC1Ev+0x11ac>
 80071fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007202:	ee17 3a10 	vmov	r3, s14
 8007206:	3b01      	subs	r3, #1
 8007208:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800720c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007218:	ee17 1a90 	vmov	r1, s15
 800721c:	4419      	add	r1, r3
 800721e:	f7fe bf1a 	b.w	8006056 <_ZN16DiagnoseViewBaseC1Ev+0x11de>
 8007222:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007226:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800722a:	ee17 3a10 	vmov	r3, s14
 800722e:	3b01      	subs	r3, #1
 8007230:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007234:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007240:	ee17 1a90 	vmov	r1, s15
 8007244:	4419      	add	r1, r3
 8007246:	f7fe bf1f 	b.w	8006088 <_ZN16DiagnoseViewBaseC1Ev+0x1210>
 800724a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800724e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007252:	ee17 3a10 	vmov	r3, s14
 8007256:	3b01      	subs	r3, #1
 8007258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800725c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007268:	ee17 1a90 	vmov	r1, s15
 800726c:	4419      	add	r1, r3
 800726e:	f7fe bf24 	b.w	80060ba <_ZN16DiagnoseViewBaseC1Ev+0x1242>
 8007272:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007276:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800727a:	ee17 3a10 	vmov	r3, s14
 800727e:	3b01      	subs	r3, #1
 8007280:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007284:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007290:	ee17 1a90 	vmov	r1, s15
 8007294:	4419      	add	r1, r3
 8007296:	f7fe bf29 	b.w	80060ec <_ZN16DiagnoseViewBaseC1Ev+0x1274>
 800729a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800729e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072a2:	ee17 3a10 	vmov	r3, s14
 80072a6:	3b01      	subs	r3, #1
 80072a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072ac:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072b8:	ee17 1a90 	vmov	r1, s15
 80072bc:	4419      	add	r1, r3
 80072be:	f7fe bf2e 	b.w	800611e <_ZN16DiagnoseViewBaseC1Ev+0x12a6>
 80072c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072ca:	ee17 3a10 	vmov	r3, s14
 80072ce:	3b01      	subs	r3, #1
 80072d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072d4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e0:	ee17 1a90 	vmov	r1, s15
 80072e4:	4419      	add	r1, r3
 80072e6:	f7fe bf33 	b.w	8006150 <_ZN16DiagnoseViewBaseC1Ev+0x12d8>
 80072ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072f2:	ee17 3a10 	vmov	r3, s14
 80072f6:	3b01      	subs	r3, #1
 80072f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072fc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007308:	ee17 1a90 	vmov	r1, s15
 800730c:	4419      	add	r1, r3
 800730e:	f7fe bf38 	b.w	8006182 <_ZN16DiagnoseViewBaseC1Ev+0x130a>
 8007312:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007316:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800731a:	ee17 3a10 	vmov	r3, s14
 800731e:	3b01      	subs	r3, #1
 8007320:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007324:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007330:	ee17 1a90 	vmov	r1, s15
 8007334:	4419      	add	r1, r3
 8007336:	f7fe bf3d 	b.w	80061b4 <_ZN16DiagnoseViewBaseC1Ev+0x133c>
 800733a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800733e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007342:	ee17 3a10 	vmov	r3, s14
 8007346:	3b01      	subs	r3, #1
 8007348:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800734c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007358:	ee17 1a90 	vmov	r1, s15
 800735c:	4419      	add	r1, r3
 800735e:	f7fe bf42 	b.w	80061e6 <_ZN16DiagnoseViewBaseC1Ev+0x136e>
 8007362:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007366:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800736a:	ee17 3a10 	vmov	r3, s14
 800736e:	3b01      	subs	r3, #1
 8007370:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007374:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007380:	ee17 1a90 	vmov	r1, s15
 8007384:	4419      	add	r1, r3
 8007386:	f7fe bf47 	b.w	8006218 <_ZN16DiagnoseViewBaseC1Ev+0x13a0>
 800738a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800738e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007392:	ee17 3a10 	vmov	r3, s14
 8007396:	3b01      	subs	r3, #1
 8007398:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800739c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073a8:	ee17 1a90 	vmov	r1, s15
 80073ac:	4419      	add	r1, r3
 80073ae:	f7fe bf4c 	b.w	800624a <_ZN16DiagnoseViewBaseC1Ev+0x13d2>
 80073b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073ba:	ee17 3a10 	vmov	r3, s14
 80073be:	3b01      	subs	r3, #1
 80073c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073c4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073d0:	ee17 1a90 	vmov	r1, s15
 80073d4:	4419      	add	r1, r3
 80073d6:	f7fe bf51 	b.w	800627c <_ZN16DiagnoseViewBaseC1Ev+0x1404>
 80073da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073e2:	ee17 3a10 	vmov	r3, s14
 80073e6:	3b01      	subs	r3, #1
 80073e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073ec:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073f8:	ee17 1a90 	vmov	r1, s15
 80073fc:	4419      	add	r1, r3
 80073fe:	f7fe bfa1 	b.w	8006344 <_ZN16DiagnoseViewBaseC1Ev+0x14cc>
 8007402:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007406:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800740a:	ee17 3a10 	vmov	r3, s14
 800740e:	3b01      	subs	r3, #1
 8007410:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007414:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007420:	ee17 1a90 	vmov	r1, s15
 8007424:	4419      	add	r1, r3
 8007426:	f7fe bfa6 	b.w	8006376 <_ZN16DiagnoseViewBaseC1Ev+0x14fe>
 800742a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800742e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007432:	ee17 3a10 	vmov	r3, s14
 8007436:	3b01      	subs	r3, #1
 8007438:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800743c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007448:	ee17 1a90 	vmov	r1, s15
 800744c:	4419      	add	r1, r3
 800744e:	f7fe bfab 	b.w	80063a8 <_ZN16DiagnoseViewBaseC1Ev+0x1530>
 8007452:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007456:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800745a:	ee17 3a10 	vmov	r3, s14
 800745e:	3b01      	subs	r3, #1
 8007460:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007464:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007470:	ee17 1a90 	vmov	r1, s15
 8007474:	4419      	add	r1, r3
 8007476:	f7fe bfb0 	b.w	80063da <_ZN16DiagnoseViewBaseC1Ev+0x1562>
 800747a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800747e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007482:	ee17 3a10 	vmov	r3, s14
 8007486:	3b01      	subs	r3, #1
 8007488:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800748c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007498:	ee17 1a90 	vmov	r1, s15
 800749c:	4419      	add	r1, r3
 800749e:	f7fe bfb5 	b.w	800640c <_ZN16DiagnoseViewBaseC1Ev+0x1594>
 80074a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074aa:	ee17 3a10 	vmov	r3, s14
 80074ae:	3b01      	subs	r3, #1
 80074b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074b4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c0:	ee17 1a90 	vmov	r1, s15
 80074c4:	4419      	add	r1, r3
 80074c6:	f7fe bfba 	b.w	800643e <_ZN16DiagnoseViewBaseC1Ev+0x15c6>
 80074ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074d2:	ee17 3a10 	vmov	r3, s14
 80074d6:	3b01      	subs	r3, #1
 80074d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074dc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074e8:	ee17 1a90 	vmov	r1, s15
 80074ec:	4419      	add	r1, r3
 80074ee:	f7fe bfbf 	b.w	8006470 <_ZN16DiagnoseViewBaseC1Ev+0x15f8>
 80074f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074fa:	ee17 3a10 	vmov	r3, s14
 80074fe:	3b01      	subs	r3, #1
 8007500:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007504:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007510:	ee17 1a90 	vmov	r1, s15
 8007514:	4419      	add	r1, r3
 8007516:	f7fe bfc4 	b.w	80064a2 <_ZN16DiagnoseViewBaseC1Ev+0x162a>
 800751a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800751e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007522:	ee17 3a10 	vmov	r3, s14
 8007526:	3b01      	subs	r3, #1
 8007528:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800752c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007538:	ee17 1a90 	vmov	r1, s15
 800753c:	4419      	add	r1, r3
 800753e:	f7fe bfc9 	b.w	80064d4 <_ZN16DiagnoseViewBaseC1Ev+0x165c>
 8007542:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007546:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800754a:	ee17 3a10 	vmov	r3, s14
 800754e:	3b01      	subs	r3, #1
 8007550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007554:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007560:	ee17 1a90 	vmov	r1, s15
 8007564:	4419      	add	r1, r3
 8007566:	f7fe bfce 	b.w	8006506 <_ZN16DiagnoseViewBaseC1Ev+0x168e>
 800756a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800756e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007572:	ee17 3a10 	vmov	r3, s14
 8007576:	3b01      	subs	r3, #1
 8007578:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800757c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007588:	ee17 1a90 	vmov	r1, s15
 800758c:	4419      	add	r1, r3
 800758e:	f7fe bfd3 	b.w	8006538 <_ZN16DiagnoseViewBaseC1Ev+0x16c0>
 8007592:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007596:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800759a:	ee17 3a10 	vmov	r3, s14
 800759e:	3b01      	subs	r3, #1
 80075a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075a4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075b0:	ee17 1a90 	vmov	r1, s15
 80075b4:	4419      	add	r1, r3
 80075b6:	f7fe bfd8 	b.w	800656a <_ZN16DiagnoseViewBaseC1Ev+0x16f2>
 80075ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075c2:	ee17 3a10 	vmov	r3, s14
 80075c6:	3b01      	subs	r3, #1
 80075c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075cc:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075d8:	ee17 1a90 	vmov	r1, s15
 80075dc:	4419      	add	r1, r3
 80075de:	f7fe bfdd 	b.w	800659c <_ZN16DiagnoseViewBaseC1Ev+0x1724>
 80075e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075ea:	ee17 3a10 	vmov	r3, s14
 80075ee:	3b01      	subs	r3, #1
 80075f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075f4:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007600:	ee17 1a90 	vmov	r1, s15
 8007604:	4419      	add	r1, r3
 8007606:	f7fe bfe2 	b.w	80065ce <_ZN16DiagnoseViewBaseC1Ev+0x1756>
 800760a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800760e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007612:	ee17 3a10 	vmov	r3, s14
 8007616:	3b01      	subs	r3, #1
 8007618:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800761c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007628:	ee17 1a90 	vmov	r1, s15
 800762c:	4419      	add	r1, r3
 800762e:	f7fe bfe7 	b.w	8006600 <_ZN16DiagnoseViewBaseC1Ev+0x1788>
 8007632:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007636:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800763a:	ee17 3a10 	vmov	r3, s14
 800763e:	3b01      	subs	r3, #1
 8007640:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007644:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007650:	ee17 1a90 	vmov	r1, s15
 8007654:	4419      	add	r1, r3
 8007656:	f7fe bfec 	b.w	8006632 <_ZN16DiagnoseViewBaseC1Ev+0x17ba>
 800765a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800765e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007662:	ee17 3a10 	vmov	r3, s14
 8007666:	3b01      	subs	r3, #1
 8007668:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800766c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007678:	ee17 1a90 	vmov	r1, s15
 800767c:	4419      	add	r1, r3
 800767e:	f7fe bff1 	b.w	8006664 <_ZN16DiagnoseViewBaseC1Ev+0x17ec>
 8007682:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007686:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800768a:	ee17 3a10 	vmov	r3, s14
 800768e:	3b01      	subs	r3, #1
 8007690:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007694:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a0:	ee17 1a90 	vmov	r1, s15
 80076a4:	4419      	add	r1, r3
 80076a6:	f7fe bff6 	b.w	8006696 <_ZN16DiagnoseViewBaseC1Ev+0x181e>
 80076aa:	bf00      	nop

080076ac <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80076ac:	4770      	bx	lr

080076ae <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80076ae:	4770      	bx	lr

080076b0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80076b0:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80076b4:	6808      	ldr	r0, [r1, #0]
 80076b6:	6849      	ldr	r1, [r1, #4]
 80076b8:	c303      	stmia	r3!, {r0, r1}
    }
 80076ba:	4770      	bx	lr

080076bc <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80076bc:	4770      	bx	lr

080076be <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80076be:	4770      	bx	lr

080076c0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80076c0:	6041      	str	r1, [r0, #4]
    }
 80076c2:	4770      	bx	lr

080076c4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80076c4:	4770      	bx	lr
	...

080076c8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80076ca:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80076ce:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// MainScreen

void FrontendApplicationBase::gotoMainScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80076d8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80076dc:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoMainScreenScreenNoTransition();
    }
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	08007b09 	.word	0x08007b09

080076e8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80076e8:	2301      	movs	r3, #1
 80076ea:	7203      	strb	r3, [r0, #8]
    }
 80076ec:	4770      	bx	lr

080076ee <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80076ee:	4770      	bx	lr

080076f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80076f0:	4770      	bx	lr

080076f2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80076f2:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80076f4:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80076f6:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80076f8:	68c2      	ldr	r2, [r0, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	1054      	asrs	r4, r2, #1
 80076fe:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8007702:	07d2      	lsls	r2, r2, #31
 8007704:	bf48      	it	mi
 8007706:	590a      	ldrmi	r2, [r1, r4]
    }
 8007708:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800770c:	bf48      	it	mi
 800770e:	58d3      	ldrmi	r3, [r2, r3]
 8007710:	4718      	bx	r3

08007712 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8007712:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8007714:	6840      	ldr	r0, [r0, #4]
 8007716:	b130      	cbz	r0, 8007726 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	b91a      	cbnz	r2, 8007724 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800771c:	68d8      	ldr	r0, [r3, #12]
 800771e:	f000 0001 	and.w	r0, r0, #1
 8007722:	4770      	bx	lr
 8007724:	2001      	movs	r0, #1
    }
 8007726:	4770      	bx	lr

08007728 <_ZN8touchgfx12NoTransitionD0Ev>:
 8007728:	b510      	push	{r4, lr}
 800772a:	4604      	mov	r4, r0
 800772c:	210c      	movs	r1, #12
 800772e:	f020 fbcf 	bl	8027ed0 <_ZdlPvj>
 8007732:	4620      	mov	r0, r4
 8007734:	bd10      	pop	{r4, pc}

08007736 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007736:	b510      	push	{r4, lr}
 8007738:	4604      	mov	r4, r0
 800773a:	2110      	movs	r1, #16
 800773c:	f020 fbc8 	bl	8027ed0 <_ZdlPvj>
 8007740:	4620      	mov	r0, r4
 8007742:	bd10      	pop	{r4, pc}

08007744 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8007744:	b510      	push	{r4, lr}
 8007746:	4604      	mov	r4, r0
 8007748:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800774c:	f020 fbc0 	bl	8027ed0 <_ZdlPvj>
 8007750:	4620      	mov	r0, r4
 8007752:	bd10      	pop	{r4, pc}

08007754 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8007754:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8007756:	f011 fff7 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 800775a:	6803      	ldr	r3, [r0, #0]
    }
 800775c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8007760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007762:	4718      	bx	r3

08007764 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8007764:	b510      	push	{r4, lr}
 8007766:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8007768:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 800776c:	b158      	cbz	r0, 8007786 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800776e:	6803      	ldr	r3, [r0, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	4798      	blx	r3
 8007774:	b138      	cbz	r0, 8007786 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8007776:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8007786:	bd10      	pop	{r4, pc}

08007788 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8007788:	4b04      	ldr	r3, [pc, #16]	@ (800779c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007790:	b10a      	cbz	r2, 8007796 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8007792:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007794:	b900      	cbnz	r0, 8007798 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8007796:	6898      	ldr	r0, [r3, #8]
    }
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	240284e8 	.word	0x240284e8

080077a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	4617      	mov	r7, r2
 80077a4:	4604      	mov	r4, r0
 80077a6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80077a8:	f012 f8de 	bl	8019968 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 80077ae:	2500      	movs	r5, #0
        instance = this;
 80077b0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80077b2:	4629      	mov	r1, r5
      model(m)
 80077b4:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80077b6:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 80077b8:	4b11      	ldr	r3, [pc, #68]	@ (8007800 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 80077ba:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 80077be:	4b11      	ldr	r3, [pc, #68]	@ (8007804 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80077c6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80077c8:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 80077cc:	689b      	ldr	r3, [r3, #8]
      model(m)
 80077ce:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80077d2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 fdf1 	bl	80083bc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80077da:	f7ff ffd5 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 80077de:	f01a fcec 	bl	80221ba <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80077e2:	f7ff ffd1 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 80077e6:	f01a fd5f 	bl	80222a8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80077ea:	f7ff ffcd 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 80077ee:	f01a fd67 	bl	80222c0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80077f2:	4620      	mov	r0, r4
 80077f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f6:	bf00      	nop
 80077f8:	2402853c 	.word	0x2402853c
 80077fc:	0802bf00 	.word	0x0802bf00
 8007800:	0802bee8 	.word	0x0802bee8
 8007804:	240284e8 	.word	0x240284e8

08007808 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007808:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv+0x1c>)
 800780a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800780e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007812:	2300      	movs	r3, #0
 8007814:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8007818:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800781c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	08007b09 	.word	0x08007b09

08007828 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>:
 8007828:	4b06      	ldr	r3, [pc, #24]	@ (8007844 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv+0x1c>)
 800782a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800782e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007832:	2300      	movs	r3, #0
 8007834:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Diagnose

void FrontendApplicationBase::gotoDiagnoseScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoDiagnoseScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007838:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800783c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	080079bd 	.word	0x080079bd

08007848 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>:
 8007848:	4b06      	ldr	r3, [pc, #24]	@ (8007864 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv+0x1c>)
 800784a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800784e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007852:	2300      	movs	r3, #0
 8007854:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Calculator

void FrontendApplicationBase::gotoCalculatorScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007858:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800785c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	08007871 	.word	0x08007871

08007868 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8007868:	6803      	ldr	r3, [r0, #0]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	4718      	bx	r3
	...

08007870 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl()
{
 8007870:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<CalculatorView, CalculatorPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007874:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8007878:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800787a:	68b0      	ldr	r0, [r6, #8]
 800787c:	6803      	ldr	r3, [r0, #0]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	4798      	blx	r3
 8007882:	f240 63f3 	movw	r3, #1779	@ 0x6f3
 8007886:	4298      	cmp	r0, r3
 8007888:	d805      	bhi.n	8007896 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x26>
 800788a:	4b44      	ldr	r3, [pc, #272]	@ (800799c <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x12c>)
 800788c:	21a3      	movs	r1, #163	@ 0xa3
 800788e:	4a44      	ldr	r2, [pc, #272]	@ (80079a0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007890:	4844      	ldr	r0, [pc, #272]	@ (80079a4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x134>)
 8007892:	f020 fe95 	bl	80285c0 <__assert_func>
 8007896:	6870      	ldr	r0, [r6, #4]
 8007898:	6803      	ldr	r3, [r0, #0]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	4798      	blx	r3
 800789e:	280f      	cmp	r0, #15
 80078a0:	d803      	bhi.n	80078aa <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x3a>
 80078a2:	4b41      	ldr	r3, [pc, #260]	@ (80079a8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x138>)
 80078a4:	21a4      	movs	r1, #164	@ 0xa4
 80078a6:	4a3e      	ldr	r2, [pc, #248]	@ (80079a0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
 80078a8:	e7f2      	b.n	8007890 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80078aa:	68f0      	ldr	r0, [r6, #12]
 80078ac:	6803      	ldr	r3, [r0, #0]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	4798      	blx	r3
 80078b2:	280b      	cmp	r0, #11
 80078b4:	d803      	bhi.n	80078be <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x4e>
 80078b6:	4b3d      	ldr	r3, [pc, #244]	@ (80079ac <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x13c>)
 80078b8:	21a5      	movs	r1, #165	@ 0xa5
 80078ba:	4a39      	ldr	r2, [pc, #228]	@ (80079a0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
 80078bc:	e7e8      	b.n	8007890 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80078be:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80079b4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80078c2:	f011 ff41 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80078c6:	3004      	adds	r0, #4
 80078c8:	f011 ff7c 	bl	80197c4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80078cc:	f8d9 0000 	ldr.w	r0, [r9]
 80078d0:	b110      	cbz	r0, 80078d8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80078d2:	6803      	ldr	r3, [r0, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	4798      	blx	r3
    if (*currentTrans)
 80078d8:	f8d9 0000 	ldr.w	r0, [r9]
 80078dc:	b110      	cbz	r0, 80078e4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80078de:	6803      	ldr	r3, [r0, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4798      	blx	r3
    if (*currentScreen)
 80078e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80079b8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x148>
 80078e8:	f8d8 0000 	ldr.w	r0, [r8]
 80078ec:	b110      	cbz	r0, 80078f4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80078ee:	6803      	ldr	r3, [r0, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	4798      	blx	r3
    if (*currentPresenter)
 80078f4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80078f8:	b110      	cbz	r0, 8007900 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80078fa:	6803      	ldr	r3, [r0, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	4798      	blx	r3
    if (*currentScreen)
 8007900:	f8d8 0000 	ldr.w	r0, [r8]
 8007904:	b110      	cbz	r0, 800790c <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8007906:	6803      	ldr	r3, [r0, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4798      	blx	r3
    if (*currentPresenter)
 800790c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007910:	b110      	cbz	r0, 8007918 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8007912:	6803      	ldr	r3, [r0, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007918:	2100      	movs	r1, #0
 800791a:	68f0      	ldr	r0, [r6, #12]
 800791c:	f7ff ffa4 	bl	8007868 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 8007920:	f04f 0b00 	mov.w	fp, #0
 8007924:	4b22      	ldr	r3, [pc, #136]	@ (80079b0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x140>)
 8007926:	4604      	mov	r4, r0
 8007928:	f8c0 b004 	str.w	fp, [r0, #4]
 800792c:	4659      	mov	r1, fp
 800792e:	f880 b008 	strb.w	fp, [r0, #8]
 8007932:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007934:	68b0      	ldr	r0, [r6, #8]
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	4798      	blx	r3
 800793c:	4605      	mov	r5, r0
 800793e:	f000 fdd7 	bl	80084f0 <_ZN14CalculatorViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007942:	6870      	ldr	r0, [r6, #4]
 8007944:	4659      	mov	r1, fp
 8007946:	6803      	ldr	r3, [r0, #0]
 8007948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794a:	4798      	blx	r3
 800794c:	4606      	mov	r6, r0
 800794e:	4629      	mov	r1, r5
 8007950:	f000 fdac 	bl	80084ac <_ZN19CalculatorPresenterC1ER14CalculatorView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8007954:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007956:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 800795a:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 800795c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007960:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8007964:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007968:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800796a:	f8c6 a008 	str.w	sl, [r6, #8]
 800796e:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8007970:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8007972:	4798      	blx	r3
    newPresenter->activate();
 8007974:	6833      	ldr	r3, [r6, #0]
 8007976:	4630      	mov	r0, r6
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800797c:	4621      	mov	r1, r4
 800797e:	4628      	mov	r0, r5
 8007980:	f013 fff8 	bl	801b974 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	4620      	mov	r0, r4
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	4798      	blx	r3
    newTransition->invalidate();
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	4620      	mov	r0, r4
 8007990:	695b      	ldr	r3, [r3, #20]
}
 8007992:	b001      	add	sp, #4
 8007994:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	4718      	bx	r3
 800799a:	bf00      	nop
 800799c:	0802ba30 	.word	0x0802ba30
 80079a0:	0802babe 	.word	0x0802babe
 80079a4:	0802bb96 	.word	0x0802bb96
 80079a8:	0802bbeb 	.word	0x0802bbeb
 80079ac:	0802bc8e 	.word	0x0802bc8e
 80079b0:	0802bf54 	.word	0x0802bf54
 80079b4:	24028530 	.word	0x24028530
 80079b8:	2402852c 	.word	0x2402852c

080079bc <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv>:
{
 80079bc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<DiagnoseView, DiagnosePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80079c0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80079c4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80079c6:	68b0      	ldr	r0, [r6, #8]
 80079c8:	6803      	ldr	r3, [r0, #0]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	4798      	blx	r3
 80079ce:	f243 437b 	movw	r3, #13435	@ 0x347b
 80079d2:	4298      	cmp	r0, r3
 80079d4:	d805      	bhi.n	80079e2 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x26>
 80079d6:	4b44      	ldr	r3, [pc, #272]	@ (8007ae8 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x12c>)
 80079d8:	21a3      	movs	r1, #163	@ 0xa3
 80079da:	4a44      	ldr	r2, [pc, #272]	@ (8007aec <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80079dc:	4844      	ldr	r0, [pc, #272]	@ (8007af0 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x134>)
 80079de:	f020 fdef 	bl	80285c0 <__assert_func>
 80079e2:	6870      	ldr	r0, [r6, #4]
 80079e4:	6803      	ldr	r3, [r0, #0]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	4798      	blx	r3
 80079ea:	280f      	cmp	r0, #15
 80079ec:	d803      	bhi.n	80079f6 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x3a>
 80079ee:	4b41      	ldr	r3, [pc, #260]	@ (8007af4 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x138>)
 80079f0:	21a4      	movs	r1, #164	@ 0xa4
 80079f2:	4a3e      	ldr	r2, [pc, #248]	@ (8007aec <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 80079f4:	e7f2      	b.n	80079dc <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80079f6:	68f0      	ldr	r0, [r6, #12]
 80079f8:	6803      	ldr	r3, [r0, #0]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	4798      	blx	r3
 80079fe:	280b      	cmp	r0, #11
 8007a00:	d803      	bhi.n	8007a0a <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x4e>
 8007a02:	4b3d      	ldr	r3, [pc, #244]	@ (8007af8 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x13c>)
 8007a04:	21a5      	movs	r1, #165	@ 0xa5
 8007a06:	4a39      	ldr	r2, [pc, #228]	@ (8007aec <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 8007a08:	e7e8      	b.n	80079dc <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8007a0a:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8007b00 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8007a0e:	f011 fe9b 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8007a12:	3004      	adds	r0, #4
 8007a14:	f011 fed6 	bl	80197c4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8007a18:	f8d9 0000 	ldr.w	r0, [r9]
 8007a1c:	b110      	cbz	r0, 8007a24 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8007a1e:	6803      	ldr	r3, [r0, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	4798      	blx	r3
    if (*currentTrans)
 8007a24:	f8d9 0000 	ldr.w	r0, [r9]
 8007a28:	b110      	cbz	r0, 8007a30 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4798      	blx	r3
    if (*currentScreen)
 8007a30:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8007b04 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x148>
 8007a34:	f8d8 0000 	ldr.w	r0, [r8]
 8007a38:	b110      	cbz	r0, 8007a40 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8007a3a:	6803      	ldr	r3, [r0, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	4798      	blx	r3
    if (*currentPresenter)
 8007a40:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007a44:	b110      	cbz	r0, 8007a4c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8007a46:	6803      	ldr	r3, [r0, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	4798      	blx	r3
    if (*currentScreen)
 8007a4c:	f8d8 0000 	ldr.w	r0, [r8]
 8007a50:	b110      	cbz	r0, 8007a58 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8007a52:	6803      	ldr	r3, [r0, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4798      	blx	r3
    if (*currentPresenter)
 8007a58:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007a5c:	b110      	cbz	r0, 8007a64 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8007a5e:	6803      	ldr	r3, [r0, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007a64:	2100      	movs	r1, #0
 8007a66:	68f0      	ldr	r0, [r6, #12]
 8007a68:	f7ff fefe 	bl	8007868 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007a6c:	f04f 0b00 	mov.w	fp, #0
 8007a70:	4b22      	ldr	r3, [pc, #136]	@ (8007afc <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x140>)
 8007a72:	4604      	mov	r4, r0
 8007a74:	f8c0 b004 	str.w	fp, [r0, #4]
 8007a78:	4659      	mov	r1, fp
 8007a7a:	f880 b008 	strb.w	fp, [r0, #8]
 8007a7e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007a80:	68b0      	ldr	r0, [r6, #8]
 8007a82:	6803      	ldr	r3, [r0, #0]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	4798      	blx	r3
 8007a88:	4605      	mov	r5, r0
 8007a8a:	f000 fe25 	bl	80086d8 <_ZN12DiagnoseViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007a8e:	6870      	ldr	r0, [r6, #4]
 8007a90:	4659      	mov	r1, fp
 8007a92:	6803      	ldr	r3, [r0, #0]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	4798      	blx	r3
 8007a98:	4606      	mov	r6, r0
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f000 fdfa 	bl	8008694 <_ZN17DiagnosePresenterC1ER12DiagnoseView>
    model->bind(newPresenter);
 8007aa0:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007aa2:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8007aa6:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8007aa8:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007aac:	f8c8 5000 	str.w	r5, [r8]
 8007ab0:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	f8c6 a008 	str.w	sl, [r6, #8]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8007abe:	4798      	blx	r3
    newPresenter->activate();
 8007ac0:	6833      	ldr	r3, [r6, #0]
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4628      	mov	r0, r5
 8007acc:	f013 ff52 	bl	801b974 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	4798      	blx	r3
    newTransition->invalidate();
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	4620      	mov	r0, r4
 8007adc:	695b      	ldr	r3, [r3, #20]
}
 8007ade:	b001      	add	sp, #4
 8007ae0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	4718      	bx	r3
 8007ae6:	bf00      	nop
 8007ae8:	0802ba30 	.word	0x0802ba30
 8007aec:	0802bd31 	.word	0x0802bd31
 8007af0:	0802bb96 	.word	0x0802bb96
 8007af4:	0802bbeb 	.word	0x0802bbeb
 8007af8:	0802bc8e 	.word	0x0802bc8e
 8007afc:	0802bf54 	.word	0x0802bf54
 8007b00:	24028530 	.word	0x24028530
 8007b04:	2402852c 	.word	0x2402852c

08007b08 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv>:
{
 8007b08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MainScreenView, MainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007b0c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8007b10:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007b12:	68b0      	ldr	r0, [r6, #8]
 8007b14:	6803      	ldr	r3, [r0, #0]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	4798      	blx	r3
 8007b1a:	f5b0 7f2b 	cmp.w	r0, #684	@ 0x2ac
 8007b1e:	d205      	bcs.n	8007b2c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x24>
 8007b20:	4b43      	ldr	r3, [pc, #268]	@ (8007c30 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x128>)
 8007b22:	21a3      	movs	r1, #163	@ 0xa3
 8007b24:	4a43      	ldr	r2, [pc, #268]	@ (8007c34 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007b26:	4844      	ldr	r0, [pc, #272]	@ (8007c38 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x130>)
 8007b28:	f020 fd4a 	bl	80285c0 <__assert_func>
 8007b2c:	6870      	ldr	r0, [r6, #4]
 8007b2e:	6803      	ldr	r3, [r0, #0]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	4798      	blx	r3
 8007b34:	280f      	cmp	r0, #15
 8007b36:	d803      	bhi.n	8007b40 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x38>
 8007b38:	4b40      	ldr	r3, [pc, #256]	@ (8007c3c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x134>)
 8007b3a:	21a4      	movs	r1, #164	@ 0xa4
 8007b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8007c34 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 8007b3e:	e7f2      	b.n	8007b26 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007b40:	68f0      	ldr	r0, [r6, #12]
 8007b42:	6803      	ldr	r3, [r0, #0]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	4798      	blx	r3
 8007b48:	280b      	cmp	r0, #11
 8007b4a:	d803      	bhi.n	8007b54 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x4c>
 8007b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c40 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x138>)
 8007b4e:	21a5      	movs	r1, #165	@ 0xa5
 8007b50:	4a38      	ldr	r2, [pc, #224]	@ (8007c34 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 8007b52:	e7e8      	b.n	8007b26 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8007b54:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8007c48 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8007b58:	f011 fdf6 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8007b5c:	3004      	adds	r0, #4
 8007b5e:	f011 fe31 	bl	80197c4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8007b62:	f8d9 0000 	ldr.w	r0, [r9]
 8007b66:	b110      	cbz	r0, 8007b6e <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8007b68:	6803      	ldr	r3, [r0, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4798      	blx	r3
    if (*currentTrans)
 8007b6e:	f8d9 0000 	ldr.w	r0, [r9]
 8007b72:	b110      	cbz	r0, 8007b7a <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8007b74:	6803      	ldr	r3, [r0, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4798      	blx	r3
    if (*currentScreen)
 8007b7a:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8007c4c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x144>
 8007b7e:	f8d8 0000 	ldr.w	r0, [r8]
 8007b82:	b110      	cbz	r0, 8007b8a <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8007b84:	6803      	ldr	r3, [r0, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	4798      	blx	r3
    if (*currentPresenter)
 8007b8a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007b8e:	b110      	cbz	r0, 8007b96 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8007b90:	6803      	ldr	r3, [r0, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	4798      	blx	r3
    if (*currentScreen)
 8007b96:	f8d8 0000 	ldr.w	r0, [r8]
 8007b9a:	b110      	cbz	r0, 8007ba2 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8007b9c:	6803      	ldr	r3, [r0, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4798      	blx	r3
    if (*currentPresenter)
 8007ba2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007ba6:	b110      	cbz	r0, 8007bae <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8007ba8:	6803      	ldr	r3, [r0, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007bae:	2100      	movs	r1, #0
 8007bb0:	68f0      	ldr	r0, [r6, #12]
 8007bb2:	f7ff fe59 	bl	8007868 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007bb6:	f04f 0b00 	mov.w	fp, #0
 8007bba:	4b22      	ldr	r3, [pc, #136]	@ (8007c44 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x13c>)
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	f8c0 b004 	str.w	fp, [r0, #4]
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	f880 b008 	strb.w	fp, [r0, #8]
 8007bc8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007bca:	68b0      	ldr	r0, [r6, #8]
 8007bcc:	6803      	ldr	r3, [r0, #0]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd0:	4798      	blx	r3
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	f000 fdda 	bl	800878c <_ZN14MainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007bd8:	6870      	ldr	r0, [r6, #4]
 8007bda:	4659      	mov	r1, fp
 8007bdc:	6803      	ldr	r3, [r0, #0]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be0:	4798      	blx	r3
 8007be2:	4606      	mov	r6, r0
 8007be4:	4629      	mov	r1, r5
 8007be6:	f000 fdaf 	bl	8008748 <_ZN19MainScreenPresenterC1ER14MainScreenView>
    model->bind(newPresenter);
 8007bea:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007bec:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8007bf0:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8007bf2:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007bf6:	f8c8 5000 	str.w	r5, [r8]
 8007bfa:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	f8c6 a008 	str.w	sl, [r6, #8]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8007c08:	4798      	blx	r3
    newPresenter->activate();
 8007c0a:	6833      	ldr	r3, [r6, #0]
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007c12:	4621      	mov	r1, r4
 8007c14:	4628      	mov	r0, r5
 8007c16:	f013 fead 	bl	801b974 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	4798      	blx	r3
    newTransition->invalidate();
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	4620      	mov	r0, r4
 8007c26:	695b      	ldr	r3, [r3, #20]
}
 8007c28:	b001      	add	sp, #4
 8007c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2e:	4718      	bx	r3
 8007c30:	0802ba30 	.word	0x0802ba30
 8007c34:	0802be05 	.word	0x0802be05
 8007c38:	0802bb96 	.word	0x0802bb96
 8007c3c:	0802bbeb 	.word	0x0802bbeb
 8007c40:	0802bc8e 	.word	0x0802bc8e
 8007c44:	0802bf54 	.word	0x0802bf54
 8007c48:	24028530 	.word	0x24028530
 8007c4c:	2402852c 	.word	0x2402852c

08007c50 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8007c50:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8007c52:	4770      	bx	lr

08007c54 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8007c54:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007c56:	4770      	bx	lr

08007c58 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8007c58:	4770      	bx	lr

08007c5a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8007c5a:	888b      	ldrh	r3, [r1, #4]
 8007c5c:	69c0      	ldr	r0, [r0, #28]
 8007c5e:	0adb      	lsrs	r3, r3, #11
 8007c60:	680a      	ldr	r2, [r1, #0]
 8007c62:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8007c66:	4410      	add	r0, r2
 8007c68:	4770      	bx	lr

08007c6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8007c6e:	b1ba      	cbz	r2, 8007ca0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8007c70:	7b10      	ldrb	r0, [r2, #12]
 8007c72:	b168      	cbz	r0, 8007c90 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8007c74:	7b53      	ldrb	r3, [r2, #13]
 8007c76:	7ad2      	ldrb	r2, [r2, #11]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	6a23      	ldr	r3, [r4, #32]
 8007c82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8007c86:	881a      	ldrh	r2, [r3, #0]
 8007c88:	428a      	cmp	r2, r1
 8007c8a:	d102      	bne.n	8007c92 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8007c8c:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8007c90:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8007c92:	d805      	bhi.n	8007ca0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8007c94:	3801      	subs	r0, #1
 8007c96:	3304      	adds	r3, #4
 8007c98:	b280      	uxth	r0, r0
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d1f3      	bne.n	8007c86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8007c9e:	e7f7      	b.n	8007c90 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7f5      	b.n	8007c90 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08007ca4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	212c      	movs	r1, #44	@ 0x2c
 8007caa:	f020 f911 	bl	8027ed0 <_ZdlPvj>
 8007cae:	4620      	mov	r0, r4
 8007cb0:	bd10      	pop	{r4, pc}
	...

08007cb4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8007cb4:	b530      	push	{r4, r5, lr}
 8007cb6:	b08b      	sub	sp, #44	@ 0x2c
 8007cb8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8007cba:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8007cbe:	9508      	str	r5, [sp, #32]
 8007cc0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8007cc4:	9507      	str	r5, [sp, #28]
 8007cc6:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8007cca:	9506      	str	r5, [sp, #24]
 8007ccc:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8007cd0:	9505      	str	r5, [sp, #20]
 8007cd2:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8007cd6:	9504      	str	r5, [sp, #16]
 8007cd8:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8007cdc:	9503      	str	r5, [sp, #12]
 8007cde:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8007ce2:	9502      	str	r5, [sp, #8]
 8007ce4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8007ce8:	9501      	str	r5, [sp, #4]
 8007cea:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8007cee:	9500      	str	r5, [sp, #0]
 8007cf0:	f013 f9be 	bl	801b070 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8007cf6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8007cf8:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8007cfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007cfc:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8007cfe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d00:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8007d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d04:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8007d06:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007d08:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8007d0a:	b00b      	add	sp, #44	@ 0x2c
 8007d0c:	bd30      	pop	{r4, r5, pc}
 8007d0e:	bf00      	nop
 8007d10:	0802bf78 	.word	0x0802bf78

08007d14 <_ZN18MainScreenViewBaseD1Ev>:
}

MainScreenViewBase::~MainScreenViewBase()
{

}
 8007d14:	4770      	bx	lr

08007d16 <_ZN18MainScreenViewBase11setupScreenEv>:

void MainScreenViewBase::setupScreen()
{

}
 8007d16:	4770      	bx	lr

08007d18 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007d18:	4770      	bx	lr

08007d1a <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007d1a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007d1c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8007d1e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8007d20:	68c2      	ldr	r2, [r0, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	1055      	asrs	r5, r2, #1
 8007d26:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007d2a:	07d2      	lsls	r2, r2, #31
 8007d2c:	bf48      	it	mi
 8007d2e:	5962      	ldrmi	r2, [r4, r5]
    }
 8007d30:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007d32:	bf48      	it	mi
 8007d34:	58d3      	ldrmi	r3, [r2, r3]
 8007d36:	4718      	bx	r3

08007d38 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8007d38:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8007d3a:	6840      	ldr	r0, [r0, #4]
 8007d3c:	b130      	cbz	r0, 8007d4c <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	b91a      	cbnz	r2, 8007d4a <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8007d42:	68d8      	ldr	r0, [r3, #12]
 8007d44:	f000 0001 	and.w	r0, r0, #1
 8007d48:	4770      	bx	lr
 8007d4a:	2001      	movs	r0, #1
    }
 8007d4c:	4770      	bx	lr

08007d4e <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007d4e:	b510      	push	{r4, lr}
 8007d50:	4604      	mov	r4, r0
 8007d52:	2110      	movs	r1, #16
 8007d54:	f020 f8bc 	bl	8027ed0 <_ZdlPvj>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	bd10      	pop	{r4, pc}

08007d5c <_ZN18MainScreenViewBaseD0Ev>:
MainScreenViewBase::~MainScreenViewBase()
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	4604      	mov	r4, r0
}
 8007d60:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8007d64:	f020 f8b4 	bl	8027ed0 <_ZdlPvj>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	bd10      	pop	{r4, pc}

08007d6c <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007d6c:	b538      	push	{r3, r4, r5, lr}
    if (&src == &SwitchToDiagnose)
 8007d6e:	f500 7302 	add.w	r3, r0, #520	@ 0x208
{
 8007d72:	4604      	mov	r4, r0
 8007d74:	460d      	mov	r5, r1
    if (&src == &SwitchToDiagnose)
 8007d76:	4299      	cmp	r1, r3
 8007d78:	d103      	bne.n	8007d82 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~MainScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8007d7a:	f011 fce5 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //SwitchToDiagnose
        //When SwitchToDiagnose clicked change screen to Diagnose
        //Go to Diagnose with no screen transition
        application().gotoDiagnoseScreenNoTransition();
 8007d7e:	f7ff fd53 	bl	8007828 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>
    }
    if (&src == &SwitchToCalculator)
 8007d82:	f504 741a 	add.w	r4, r4, #616	@ 0x268
 8007d86:	42a5      	cmp	r5, r4
 8007d88:	d105      	bne.n	8007d96 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
 8007d8a:	f011 fcdd 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When SwitchToCalculator clicked change screen to Calculator
        //Go to Calculator with no screen transition
        application().gotoCalculatorScreenNoTransition();
    }
}
 8007d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotoCalculatorScreenNoTransition();
 8007d92:	f7ff bd59 	b.w	8007848 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>
}
 8007d96:	bd38      	pop	{r3, r4, r5, pc}

08007d98 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8007d9c:	2226      	movs	r2, #38	@ 0x26
 8007d9e:	2100      	movs	r1, #0
 8007da0:	f020 feaa 	bl	8028af8 <memset>
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7fb ffcf 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 8007daa:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd4 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8007dac:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 8007db0:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8007db6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007db8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dbc:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8007dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc8:	8723      	strh	r3, [r4, #56]	@ 0x38
 8007dca:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8007dcc:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	bf00      	nop
 8007dd4:	0802cff0 	.word	0x0802cff0
 8007dd8:	0802b578 	.word	0x0802b578

08007ddc <_ZN8touchgfx6ButtonC1Ev>:
    Button()
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	4604      	mov	r4, r0
        : Widget(), action(), pressed(false)
 8007de0:	2226      	movs	r2, #38	@ 0x26
 8007de2:	2100      	movs	r1, #0
 8007de4:	f020 fe88 	bl	8028af8 <memset>
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7fb ffad 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 8007dee:	2300      	movs	r3, #0
    {
    }
 8007df0:	4620      	mov	r0, r4
 8007df2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007df4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        : AbstractButton(), up(), down(), alpha(255)
 8007dfe:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <_ZN8touchgfx6ButtonC1Ev+0x34>)
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e06:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8007e08:	8623      	strh	r3, [r4, #48]	@ 0x30
 8007e0a:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
 8007e0e:	bd10      	pop	{r4, pc}
 8007e10:	0802d0e8 	.word	0x0802d0e8

08007e14 <_ZN18MainScreenViewBaseC1Ev>:
MainScreenViewBase::MainScreenViewBase() :
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	4604      	mov	r4, r0
 8007e1a:	b08f      	sub	sp, #60	@ 0x3c
        : presenter(0)
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	f013 fbfd 	bl	801b61c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler)
 8007e22:	46a2      	mov	sl, r4
 8007e24:	4ba8      	ldr	r3, [pc, #672]	@ (80080c8 <_ZN18MainScreenViewBaseC1Ev+0x2b4>)
        : Widget(), alpha(255), color(0)
 8007e26:	2226      	movs	r2, #38	@ 0x26
 8007e28:	4629      	mov	r1, r5
 8007e2a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007e2c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8007e30:	f84a 3b40 	str.w	r3, [sl], #64
 8007e34:	4650      	mov	r0, sl
 8007e36:	f020 fe5f 	bl	8028af8 <memset>
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	f7fb ff84 	bl	8003d48 <_ZN8touchgfx6WidgetC1Ev>
 8007e40:	4ba2      	ldr	r3, [pc, #648]	@ (80080cc <_ZN18MainScreenViewBaseC1Ev+0x2b8>)
 8007e42:	f104 0698 	add.w	r6, r4, #152	@ 0x98
 8007e46:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8007e4a:	6423      	str	r3, [r4, #64]	@ 0x40
 8007e4c:	23ff      	movs	r3, #255	@ 0xff
 8007e4e:	a90c      	add	r1, sp, #48	@ 0x30
 8007e50:	f504 7998 	add.w	r9, r4, #304	@ 0x130
 8007e54:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8007e58:	4658      	mov	r0, fp
        : color(col)
 8007e5a:	66a5      	str	r5, [r4, #104]	@ 0x68
 8007e5c:	f504 78bc 	add.w	r8, r4, #376	@ 0x178
 8007e60:	f8ad 7030 	strh.w	r7, [sp, #48]	@ 0x30
 8007e64:	f00e f8da 	bl	801601c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f009 fdbb 	bl	80119e4 <_ZN8touchgfx12DigitalClockC1Ev>
 8007e6e:	4648      	mov	r0, r9
 8007e70:	f7ff ff92 	bl	8007d98 <_ZN8touchgfx8TextAreaC1Ev>
 8007e74:	4640      	mov	r0, r8
 8007e76:	f7ff ff8f 	bl	8007d98 <_ZN8touchgfx8TextAreaC1Ev>
 8007e7a:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	9302      	str	r3, [sp, #8]
 8007e82:	f7ff ff89 	bl	8007d98 <_ZN8touchgfx8TextAreaC1Ev>
 8007e86:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	f7ff ffa5 	bl	8007ddc <_ZN8touchgfx6ButtonC1Ev>
 8007e92:	f504 730f 	add.w	r3, r4, #572	@ 0x23c
 8007e96:	a90c      	add	r1, sp, #48	@ 0x30
 8007e98:	f8ad 7030 	strh.w	r7, [sp, #48]	@ 0x30
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	9303      	str	r3, [sp, #12]
 8007ea0:	f00e f8bc 	bl	801601c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8007ea4:	f504 731a 	add.w	r3, r4, #616	@ 0x268
 8007ea8:	1d27      	adds	r7, r4, #4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	f7ff ff95 	bl	8007ddc <_ZN8touchgfx6ButtonC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8007eb2:	4b87      	ldr	r3, [pc, #540]	@ (80080d0 <_ZN18MainScreenViewBaseC1Ev+0x2bc>)
    __background.setPosition(0, 0, 800, 480);
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4650      	mov	r0, sl
 8007eba:	e9c4 34a7 	strd	r3, r4, [r4, #668]	@ 0x29c
 8007ebe:	4b85      	ldr	r3, [pc, #532]	@ (80080d4 <_ZN18MainScreenViewBaseC1Ev+0x2c0>)
 8007ec0:	e9c4 35a9 	strd	r3, r5, [r4, #676]	@ 0x2a4
 8007ec4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8007ece:	f7fb ff28 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8007ed2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8007ed6:	4651      	mov	r1, sl
 8007ed8:	4638      	mov	r0, r7
 8007eda:	66a3      	str	r3, [r4, #104]	@ 0x68
 8007edc:	f009 fe44 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007ee0:	230b      	movs	r3, #11
    DiagnoseIcon.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_CROPPED_ID));
 8007ee2:	a90c      	add	r1, sp, #48	@ 0x30
 8007ee4:	4658      	mov	r0, fp
 8007ee6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8007eea:	f00e ff72 	bl	8016dd2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    DiagnoseIcon.setPosition(101, 112, 89, 91);
 8007eee:	235b      	movs	r3, #91	@ 0x5b
 8007ef0:	2270      	movs	r2, #112	@ 0x70
 8007ef2:	4658      	mov	r0, fp
 8007ef4:	2165      	movs	r1, #101	@ 0x65
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	2359      	movs	r3, #89	@ 0x59
 8007efa:	f7fb ff12 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8007efe:	4629      	mov	r1, r5
 8007f00:	4658      	mov	r0, fp
 8007f02:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 80080d8 <_ZN18MainScreenViewBaseC1Ev+0x2c4>
 8007f06:	f00e f844 	bl	8015f92 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8007f0a:	4659      	mov	r1, fp
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f8df b1cc 	ldr.w	fp, [pc, #460]	@ 80080dc <_ZN18MainScreenViewBaseC1Ev+0x2c8>
 8007f12:	f009 fe29 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainScreenClock.setPosition(529, 12, 256, 72);
 8007f16:	2348      	movs	r3, #72	@ 0x48
 8007f18:	220c      	movs	r2, #12
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	f240 2111 	movw	r1, #529	@ 0x211
 8007f22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f26:	f7fb fefc 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    MainScreenClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f009 fc97 	bl	8011860 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 8007f32:	231b      	movs	r3, #27
    MainScreenClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NI1A));
 8007f34:	a90c      	add	r1, sp, #48	@ 0x30
 8007f36:	4630      	mov	r0, r6
 8007f38:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8007f3c:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8007f40:	f009 fca1 	bl	8011886 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    MainScreenClock.displayLeadingZeroForHourIndicator(true);
 8007f44:	4630      	mov	r0, r6
 8007f46:	2101      	movs	r1, #1
 8007f48:	f009 fd9a 	bl	8011a80 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    MainScreenClock.setTime24Hour(10, 10, 0);
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	2303      	movs	r3, #3
 8007f50:	4630      	mov	r0, r6
 8007f52:	4611      	mov	r1, r2
 8007f54:	f884 30c7 	strb.w	r3, [r4, #199]	@ 0xc7
 8007f58:	462b      	mov	r3, r5
 8007f5a:	f009 fd94 	bl	8011a86 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8007f62:	ae06      	add	r6, sp, #24
 8007f64:	f009 fe00 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Diagnose.setPosition(87, 214, 114, 26);
 8007f68:	231a      	movs	r3, #26
 8007f6a:	22d6      	movs	r2, #214	@ 0xd6
 8007f6c:	4648      	mov	r0, r9
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	2157      	movs	r1, #87	@ 0x57
 8007f72:	2372      	movs	r3, #114	@ 0x72
 8007f74:	f7fb fed5 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007f78:	4649      	mov	r1, r9
 8007f7a:	4630      	mov	r0, r6
        color = newColor;
 8007f7c:	f8c4 b160 	str.w	fp, [r4, #352]	@ 0x160
        linespace = space;
 8007f80:	f8a4 5164 	strh.w	r5, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 8007f84:	f00e faf4 	bl	8016570 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8007f88:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 8007f8c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f94:	2317      	movs	r3, #23
    Text_Diagnose.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6UML));
 8007f96:	a90c      	add	r1, sp, #48	@ 0x30
 8007f98:	4648      	mov	r0, r9
 8007f9a:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8007f9e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8007fa2:	f00e fd7f 	bl	8016aa4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f009 fddd 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Calculator.setPosition(226, 214, 114, 26);
 8007fae:	231a      	movs	r3, #26
 8007fb0:	22d6      	movs	r2, #214	@ 0xd6
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	21e2      	movs	r1, #226	@ 0xe2
 8007fb8:	2372      	movs	r3, #114	@ 0x72
 8007fba:	f04f 0902 	mov.w	r9, #2
 8007fbe:	f7fb feb0 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007fc2:	4641      	mov	r1, r8
 8007fc4:	4630      	mov	r0, r6
        color = newColor;
 8007fc6:	f8c4 b1a8 	str.w	fp, [r4, #424]	@ 0x1a8
        linespace = space;
 8007fca:	f8a4 51ac 	strh.w	r5, [r4, #428]	@ 0x1ac
        boundingArea = calculateBoundingArea();
 8007fce:	f00e facf 	bl	8016570 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8007fd2:	f504 73da 	add.w	r3, r4, #436	@ 0x1b4
 8007fd6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007fda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Text_Calculator.setTypedText(touchgfx::TypedText(T___SINGLEUSE_10PZ));
 8007fde:	a90c      	add	r1, sp, #48	@ 0x30
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8007fe6:	f8ad 9034 	strh.w	r9, [sp, #52]	@ 0x34
 8007fea:	f00e fd5b 	bl	8016aa4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007fee:	4641      	mov	r1, r8
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f009 fdb9 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainTitle.setPosition(0, 12, 566, 69);
 8007ff6:	2345      	movs	r3, #69	@ 0x45
 8007ff8:	220c      	movs	r2, #12
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	9802      	ldr	r0, [sp, #8]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	f240 2336 	movw	r3, #566	@ 0x236
 8008004:	f7fb fe8d 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8008008:	9902      	ldr	r1, [sp, #8]
 800800a:	4630      	mov	r0, r6
        color = newColor;
 800800c:	f8c4 b1f0 	str.w	fp, [r4, #496]	@ 0x1f0
        linespace = space;
 8008010:	f8a4 51f4 	strh.w	r5, [r4, #500]	@ 0x1f4
        boundingArea = calculateBoundingArea();
 8008014:	f00e faac 	bl	8016570 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008018:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
 800801c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008020:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008024:	2318      	movs	r3, #24
    MainTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HFBR));
 8008026:	a90c      	add	r1, sp, #48	@ 0x30
 8008028:	9802      	ldr	r0, [sp, #8]
    SwitchToDiagnose.setAction(buttonCallback);
 800802a:	f504 7627 	add.w	r6, r4, #668	@ 0x29c
 800802e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8008032:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
    MainTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HFBR));
 8008036:	f00e fd35 	bl	8016aa4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800803a:	9902      	ldr	r1, [sp, #8]
 800803c:	4638      	mov	r0, r7
 800803e:	f009 fd93 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToDiagnose.setXY(95, 107);
 8008042:	9804      	ldr	r0, [sp, #16]
 8008044:	226b      	movs	r2, #107	@ 0x6b
 8008046:	215f      	movs	r1, #95	@ 0x5f
 8008048:	f7fb fe5e 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToDiagnose.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800804c:	aa0c      	add	r2, sp, #48	@ 0x30
 800804e:	a90b      	add	r1, sp, #44	@ 0x2c
 8008050:	9804      	ldr	r0, [sp, #16]
 8008052:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8008056:	f8ad 9030 	strh.w	r9, [sp, #48]	@ 0x30
 800805a:	f00e fd81 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800805e:	9904      	ldr	r1, [sp, #16]
 8008060:	4638      	mov	r0, r7
        action = &callback;
 8008062:	f8c4 6230 	str.w	r6, [r4, #560]	@ 0x230
 8008066:	f009 fd7f 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800806a:	2305      	movs	r3, #5
    CalculatorIcon.setBitmap(touchgfx::Bitmap(BITMAP_CALCULATOR_LOGO_ID));
 800806c:	a90c      	add	r1, sp, #48	@ 0x30
 800806e:	9803      	ldr	r0, [sp, #12]
 8008070:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8008074:	f00e fead 	bl	8016dd2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    CalculatorIcon.setPosition(239, 111, 89, 92);
 8008078:	235c      	movs	r3, #92	@ 0x5c
 800807a:	226f      	movs	r2, #111	@ 0x6f
 800807c:	9803      	ldr	r0, [sp, #12]
 800807e:	21ef      	movs	r1, #239	@ 0xef
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	2359      	movs	r3, #89	@ 0x59
 8008084:	f7fb fe4d 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
    CalculatorIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008088:	4629      	mov	r1, r5
 800808a:	9803      	ldr	r0, [sp, #12]
 800808c:	f00d ff81 	bl	8015f92 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008090:	9903      	ldr	r1, [sp, #12]
 8008092:	4638      	mov	r0, r7
 8008094:	f009 fd68 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToCalculator.setXY(233, 107);
 8008098:	9805      	ldr	r0, [sp, #20]
 800809a:	226b      	movs	r2, #107	@ 0x6b
 800809c:	21e9      	movs	r1, #233	@ 0xe9
 800809e:	f7fb fe33 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToCalculator.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80080a2:	aa0c      	add	r2, sp, #48	@ 0x30
 80080a4:	a90b      	add	r1, sp, #44	@ 0x2c
 80080a6:	9805      	ldr	r0, [sp, #20]
 80080a8:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 80080ac:	f8ad 9030 	strh.w	r9, [sp, #48]	@ 0x30
 80080b0:	f00e fd56 	bl	8016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80080b4:	4638      	mov	r0, r7
 80080b6:	9905      	ldr	r1, [sp, #20]
 80080b8:	f8c4 6290 	str.w	r6, [r4, #656]	@ 0x290
 80080bc:	f009 fd54 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80080c0:	4620      	mov	r0, r4
 80080c2:	b00f      	add	sp, #60	@ 0x3c
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	0802bff8 	.word	0x0802bff8
 80080cc:	0802d080 	.word	0x0802d080
 80080d0:	0802bfe0 	.word	0x0802bfe0
 80080d4:	08007d6d 	.word	0x08007d6d
 80080d8:	0802b578 	.word	0x0802b578
 80080dc:	ffa3baff 	.word	0xffa3baff

080080e0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80080e0:	4770      	bx	lr
	...

080080e4 <_Z23getFont_verdana_10_4bppv>:
{
 80080e4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80080e6:	4d17      	ldr	r5, [pc, #92]	@ (8008144 <_Z23getFont_verdana_10_4bppv+0x60>)
{
 80080e8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80080ea:	682c      	ldr	r4, [r5, #0]
 80080ec:	f3bf 8f5b 	dmb	ish
 80080f0:	f014 0401 	ands.w	r4, r4, #1
 80080f4:	d122      	bne.n	800813c <_Z23getFont_verdana_10_4bppv+0x58>
 80080f6:	4628      	mov	r0, r5
 80080f8:	f01f feec 	bl	8027ed4 <__cxa_guard_acquire>
 80080fc:	b1f0      	cbz	r0, 800813c <_Z23getFont_verdana_10_4bppv+0x58>
 80080fe:	233f      	movs	r3, #63	@ 0x3f
 8008100:	2204      	movs	r2, #4
 8008102:	4911      	ldr	r1, [pc, #68]	@ (8008148 <_Z23getFont_verdana_10_4bppv+0x64>)
 8008104:	9309      	str	r3, [sp, #36]	@ 0x24
 8008106:	4b11      	ldr	r3, [pc, #68]	@ (800814c <_Z23getFont_verdana_10_4bppv+0x68>)
 8008108:	4811      	ldr	r0, [pc, #68]	@ (8008150 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800810a:	9308      	str	r3, [sp, #32]
 800810c:	4b11      	ldr	r3, [pc, #68]	@ (8008154 <_Z23getFont_verdana_10_4bppv+0x70>)
 800810e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	2301      	movs	r3, #1
 8008114:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	230a      	movs	r3, #10
 800811e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	22bf      	movs	r2, #191	@ 0xbf
 8008126:	230c      	movs	r3, #12
 8008128:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800812c:	f7ff fdc2 	bl	8007cb4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008130:	4809      	ldr	r0, [pc, #36]	@ (8008158 <_Z23getFont_verdana_10_4bppv+0x74>)
 8008132:	f020 fa63 	bl	80285fc <atexit>
 8008136:	4628      	mov	r0, r5
 8008138:	f01f fed8 	bl	8027eec <__cxa_guard_release>
    return verdana_10_4bpp;
}
 800813c:	4804      	ldr	r0, [pc, #16]	@ (8008150 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800813e:	b00f      	add	sp, #60	@ 0x3c
 8008140:	bd30      	pop	{r4, r5, pc}
 8008142:	bf00      	nop
 8008144:	2400e3fc 	.word	0x2400e3fc
 8008148:	08044290 	.word	0x08044290
 800814c:	08046c60 	.word	0x08046c60
 8008150:	2400e400 	.word	0x2400e400
 8008154:	08047458 	.word	0x08047458
 8008158:	080080e1 	.word	0x080080e1

0800815c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_17_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_17_4bpp();

touchgfx::GeneratedFont& getFont_verdana_17_4bpp()
{
    static touchgfx::GeneratedFont verdana_17_4bpp(glyphs_verdana_17_4bpp, 191, 21, 17, 1, 0, 4, 1, 1, 1, unicodes_verdana_17_4bpp, kerning_verdana_17_4bpp, 63, 0, 0, 0);
 800815c:	4770      	bx	lr
	...

08008160 <_Z23getFont_verdana_17_4bppv>:
{
 8008160:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_17_4bpp(glyphs_verdana_17_4bpp, 191, 21, 17, 1, 0, 4, 1, 1, 1, unicodes_verdana_17_4bpp, kerning_verdana_17_4bpp, 63, 0, 0, 0);
 8008162:	4d17      	ldr	r5, [pc, #92]	@ (80081c0 <_Z23getFont_verdana_17_4bppv+0x60>)
{
 8008164:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_17_4bpp(glyphs_verdana_17_4bpp, 191, 21, 17, 1, 0, 4, 1, 1, 1, unicodes_verdana_17_4bpp, kerning_verdana_17_4bpp, 63, 0, 0, 0);
 8008166:	682c      	ldr	r4, [r5, #0]
 8008168:	f3bf 8f5b 	dmb	ish
 800816c:	f014 0401 	ands.w	r4, r4, #1
 8008170:	d122      	bne.n	80081b8 <_Z23getFont_verdana_17_4bppv+0x58>
 8008172:	4628      	mov	r0, r5
 8008174:	f01f feae 	bl	8027ed4 <__cxa_guard_acquire>
 8008178:	b1f0      	cbz	r0, 80081b8 <_Z23getFont_verdana_17_4bppv+0x58>
 800817a:	233f      	movs	r3, #63	@ 0x3f
 800817c:	2204      	movs	r2, #4
 800817e:	4911      	ldr	r1, [pc, #68]	@ (80081c4 <_Z23getFont_verdana_17_4bppv+0x64>)
 8008180:	9309      	str	r3, [sp, #36]	@ 0x24
 8008182:	4b11      	ldr	r3, [pc, #68]	@ (80081c8 <_Z23getFont_verdana_17_4bppv+0x68>)
 8008184:	4811      	ldr	r0, [pc, #68]	@ (80081cc <_Z23getFont_verdana_17_4bppv+0x6c>)
 8008186:	9308      	str	r3, [sp, #32]
 8008188:	4b11      	ldr	r3, [pc, #68]	@ (80081d0 <_Z23getFont_verdana_17_4bppv+0x70>)
 800818a:	940a      	str	r4, [sp, #40]	@ 0x28
 800818c:	9307      	str	r3, [sp, #28]
 800818e:	2301      	movs	r3, #1
 8008190:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	2311      	movs	r3, #17
 800819a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	22bf      	movs	r2, #191	@ 0xbf
 80081a2:	2315      	movs	r3, #21
 80081a4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80081a8:	f7ff fd84 	bl	8007cb4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80081ac:	4809      	ldr	r0, [pc, #36]	@ (80081d4 <_Z23getFont_verdana_17_4bppv+0x74>)
 80081ae:	f020 fa25 	bl	80285fc <atexit>
 80081b2:	4628      	mov	r0, r5
 80081b4:	f01f fe9a 	bl	8027eec <__cxa_guard_release>
    return verdana_17_4bpp;
}
 80081b8:	4804      	ldr	r0, [pc, #16]	@ (80081cc <_Z23getFont_verdana_17_4bppv+0x6c>)
 80081ba:	b00f      	add	sp, #60	@ 0x3c
 80081bc:	bd30      	pop	{r4, r5, pc}
 80081be:	bf00      	nop
 80081c0:	2400e42c 	.word	0x2400e42c
 80081c4:	08044d04 	.word	0x08044d04
 80081c8:	08046c94 	.word	0x08046c94
 80081cc:	2400e430 	.word	0x2400e430
 80081d0:	0804745c 	.word	0x0804745c
 80081d4:	0800815d 	.word	0x0800815d

080081d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80081d8:	4770      	bx	lr
	...

080081dc <_Z23getFont_verdana_20_4bppv>:
{
 80081dc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80081de:	4d17      	ldr	r5, [pc, #92]	@ (800823c <_Z23getFont_verdana_20_4bppv+0x60>)
{
 80081e0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80081e2:	682c      	ldr	r4, [r5, #0]
 80081e4:	f3bf 8f5b 	dmb	ish
 80081e8:	f014 0401 	ands.w	r4, r4, #1
 80081ec:	d122      	bne.n	8008234 <_Z23getFont_verdana_20_4bppv+0x58>
 80081ee:	4628      	mov	r0, r5
 80081f0:	f01f fe70 	bl	8027ed4 <__cxa_guard_acquire>
 80081f4:	b1f0      	cbz	r0, 8008234 <_Z23getFont_verdana_20_4bppv+0x58>
 80081f6:	233f      	movs	r3, #63	@ 0x3f
 80081f8:	22bf      	movs	r2, #191	@ 0xbf
 80081fa:	4911      	ldr	r1, [pc, #68]	@ (8008240 <_Z23getFont_verdana_20_4bppv+0x64>)
 80081fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fe:	4b11      	ldr	r3, [pc, #68]	@ (8008244 <_Z23getFont_verdana_20_4bppv+0x68>)
 8008200:	4811      	ldr	r0, [pc, #68]	@ (8008248 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8008202:	9308      	str	r3, [sp, #32]
 8008204:	4b11      	ldr	r3, [pc, #68]	@ (800824c <_Z23getFont_verdana_20_4bppv+0x70>)
 8008206:	940a      	str	r4, [sp, #40]	@ 0x28
 8008208:	9307      	str	r3, [sp, #28]
 800820a:	2301      	movs	r3, #1
 800820c:	9401      	str	r4, [sp, #4]
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008214:	2304      	movs	r3, #4
 8008216:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800821a:	2314      	movs	r3, #20
 800821c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	2319      	movs	r3, #25
 8008224:	f7ff fd46 	bl	8007cb4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008228:	4809      	ldr	r0, [pc, #36]	@ (8008250 <_Z23getFont_verdana_20_4bppv+0x74>)
 800822a:	f020 f9e7 	bl	80285fc <atexit>
 800822e:	4628      	mov	r0, r5
 8008230:	f01f fe5c 	bl	8027eec <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8008234:	4804      	ldr	r0, [pc, #16]	@ (8008248 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8008236:	b00f      	add	sp, #60	@ 0x3c
 8008238:	bd30      	pop	{r4, r5, pc}
 800823a:	bf00      	nop
 800823c:	2400e45c 	.word	0x2400e45c
 8008240:	08045778 	.word	0x08045778
 8008244:	08046e40 	.word	0x08046e40
 8008248:	2400e460 	.word	0x2400e460
 800824c:	08047460 	.word	0x08047460
 8008250:	080081d9 	.word	0x080081d9

08008254 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008254:	4770      	bx	lr
	...

08008258 <_Z23getFont_verdana_40_4bppv>:
{
 8008258:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800825a:	4d17      	ldr	r5, [pc, #92]	@ (80082b8 <_Z23getFont_verdana_40_4bppv+0x60>)
{
 800825c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800825e:	682c      	ldr	r4, [r5, #0]
 8008260:	f3bf 8f5b 	dmb	ish
 8008264:	f014 0401 	ands.w	r4, r4, #1
 8008268:	d123      	bne.n	80082b2 <_Z23getFont_verdana_40_4bppv+0x5a>
 800826a:	4628      	mov	r0, r5
 800826c:	f01f fe32 	bl	8027ed4 <__cxa_guard_acquire>
 8008270:	b1f8      	cbz	r0, 80082b2 <_Z23getFont_verdana_40_4bppv+0x5a>
 8008272:	233f      	movs	r3, #63	@ 0x3f
 8008274:	2204      	movs	r2, #4
 8008276:	4911      	ldr	r1, [pc, #68]	@ (80082bc <_Z23getFont_verdana_40_4bppv+0x64>)
 8008278:	9309      	str	r3, [sp, #36]	@ 0x24
 800827a:	4b11      	ldr	r3, [pc, #68]	@ (80082c0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800827c:	4811      	ldr	r0, [pc, #68]	@ (80082c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	4b11      	ldr	r3, [pc, #68]	@ (80082c8 <_Z23getFont_verdana_40_4bppv+0x70>)
 8008282:	940a      	str	r4, [sp, #40]	@ 0x28
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	2302      	movs	r3, #2
 8008288:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800828c:	2301      	movs	r3, #1
 800828e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8008292:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008296:	2328      	movs	r3, #40	@ 0x28
 8008298:	22bf      	movs	r2, #191	@ 0xbf
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2330      	movs	r3, #48	@ 0x30
 800829e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80082a2:	f7ff fd07 	bl	8007cb4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80082a6:	4809      	ldr	r0, [pc, #36]	@ (80082cc <_Z23getFont_verdana_40_4bppv+0x74>)
 80082a8:	f020 f9a8 	bl	80285fc <atexit>
 80082ac:	4628      	mov	r0, r5
 80082ae:	f01f fe1d 	bl	8027eec <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80082b2:	4804      	ldr	r0, [pc, #16]	@ (80082c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80082b4:	b00f      	add	sp, #60	@ 0x3c
 80082b6:	bd30      	pop	{r4, r5, pc}
 80082b8:	2400e48c 	.word	0x2400e48c
 80082bc:	080461ec 	.word	0x080461ec
 80082c0:	08047054 	.word	0x08047054
 80082c4:	2400e490 	.word	0x2400e490
 80082c8:	08047464 	.word	0x08047464
 80082cc:	08008255 	.word	0x08008255

080082d0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80082d0:	2000      	movs	r0, #0
 80082d2:	4770      	bx	lr

080082d4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80082d4:	2000      	movs	r0, #0
 80082d6:	4770      	bx	lr

080082d8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80082d8:	b40e      	push	{r1, r2, r3}
 80082da:	b503      	push	{r0, r1, lr}
 80082dc:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80082de:	2100      	movs	r1, #0
{
 80082e0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80082e4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80082e6:	f012 f9c7 	bl	801a678 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80082ea:	b002      	add	sp, #8
 80082ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80082f0:	b003      	add	sp, #12
 80082f2:	4770      	bx	lr

080082f4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80082f4:	b40c      	push	{r2, r3}
 80082f6:	b507      	push	{r0, r1, r2, lr}
 80082f8:	ab04      	add	r3, sp, #16
 80082fa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80082fe:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008300:	f012 f9ba 	bl	801a678 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8008304:	b003      	add	sp, #12
 8008306:	f85d eb04 	ldr.w	lr, [sp], #4
 800830a:	b002      	add	sp, #8
 800830c:	4770      	bx	lr
	...

08008310 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8008310:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8008312:	b510      	push	{r4, lr}
 8008314:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8008316:	b373      	cbz	r3, 8008376 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008318:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800831a:	b92b      	cbnz	r3, 8008328 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 800831c:	4b18      	ldr	r3, [pc, #96]	@ (8008380 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800831e:	21c5      	movs	r1, #197	@ 0xc5
 8008320:	4a18      	ldr	r2, [pc, #96]	@ (8008384 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008322:	4819      	ldr	r0, [pc, #100]	@ (8008388 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8008324:	f020 f94c 	bl	80285c0 <__assert_func>
            return buffer[pos];
 8008328:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800832a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800832e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8008330:	b30b      	cbz	r3, 8008376 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8008332:	f014 f883 	bl	801c43c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8008336:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8008338:	2b01      	cmp	r3, #1
 800833a:	d803      	bhi.n	8008344 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800833c:	4b13      	ldr	r3, [pc, #76]	@ (800838c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800833e:	21cb      	movs	r1, #203	@ 0xcb
 8008340:	4a13      	ldr	r2, [pc, #76]	@ (8008390 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8008342:	e7ee      	b.n	8008322 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8008344:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008346:	f640 103f 	movw	r0, #2367	@ 0x93f
 800834a:	1c53      	adds	r3, r2, #1
 800834c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800834e:	2b09      	cmp	r3, #9
 8008350:	4619      	mov	r1, r3
 8008352:	bf88      	it	hi
 8008354:	f1a3 010a 	subhi.w	r1, r3, #10
 8008358:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800835c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800835e:	4281      	cmp	r1, r0
 8008360:	d109      	bne.n	8008376 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8008362:	2b0a      	cmp	r3, #10
 8008364:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008368:	bf28      	it	cs
 800836a:	2300      	movcs	r3, #0
            return buffer[pos];
 800836c:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800836e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008372:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8008374:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8008376:	4620      	mov	r0, r4
}
 8008378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800837c:	f013 bf60 	b.w	801c240 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008380:	0802c024 	.word	0x0802c024
 8008384:	0802c02d 	.word	0x0802c02d
 8008388:	0802c0d8 	.word	0x0802c0d8
 800838c:	0802c130 	.word	0x0802c130
 8008390:	0802c13e 	.word	0x0802c13e

08008394 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8008394:	f013 bf1d 	b.w	801c1d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08008398 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008398:	b510      	push	{r4, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	ac02      	add	r4, sp, #8
 800839e:	e884 0006 	stmia.w	r4, {r1, r2}
 80083a2:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80083a4:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80083a6:	4621      	mov	r1, r4
    va_start(pArg, format);
 80083a8:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	f010 fd91 	bl	8018ed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80083b6:	b006      	add	sp, #24
 80083b8:	bd10      	pop	{r4, pc}
	...

080083bc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80083bc:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80083be:	bb18      	cbnz	r0, 8008408 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80083c0:	4b12      	ldr	r3, [pc, #72]	@ (800840c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80083c2:	4813      	ldr	r0, [pc, #76]	@ (8008410 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80083c4:	681c      	ldr	r4, [r3, #0]
 80083c6:	4913      	ldr	r1, [pc, #76]	@ (8008414 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80083c8:	b1b4      	cbz	r4, 80083f8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	4422      	add	r2, r4
 80083ce:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80083d0:	6862      	ldr	r2, [r4, #4]
 80083d2:	4422      	add	r2, r4
 80083d4:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80083d6:	68a2      	ldr	r2, [r4, #8]
 80083d8:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80083da:	4b0f      	ldr	r3, [pc, #60]	@ (8008418 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80083e0:	f000 f838 	bl	8008454 <_ZN17TypedTextDatabase8getFontsEv>
 80083e4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80083e6:	f000 f833 	bl	8008450 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80083ea:	4b0c      	ldr	r3, [pc, #48]	@ (800841c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80083ec:	601c      	str	r4, [r3, #0]
        fonts = f;
 80083ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008420 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80083f0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80083f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008424 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80083f4:	8018      	strh	r0, [r3, #0]
    }
}
 80083f6:	e007      	b.n	8008408 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80083f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008428 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80083fa:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80083fc:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80083fe:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008400:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8008402:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8008404:	2c00      	cmp	r4, #0
 8008406:	d1e8      	bne.n	80083da <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8008408:	bd38      	pop	{r3, r4, r5, pc}
 800840a:	bf00      	nop
 800840c:	2400e4c8 	.word	0x2400e4c8
 8008410:	2400e4c0 	.word	0x2400e4c0
 8008414:	2400e4bc 	.word	0x2400e4bc
 8008418:	2400e4c4 	.word	0x2400e4c4
 800841c:	24028540 	.word	0x24028540
 8008420:	24028548 	.word	0x24028548
 8008424:	24028544 	.word	0x24028544
 8008428:	903fe230 	.word	0x903fe230
 800842c:	903fe1c0 	.word	0x903fe1c0
 8008430:	903fe2d4 	.word	0x903fe2d4

08008434 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800843c:	4b03      	ldr	r3, [pc, #12]	@ (800844c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800843e:	681b      	ldr	r3, [r3, #0]
}
 8008440:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	2400e4bc 	.word	0x2400e4bc
 800844c:	2400e4c0 	.word	0x2400e4c0

08008450 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8008450:	201c      	movs	r0, #28
 8008452:	4770      	bx	lr

08008454 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8008454:	4800      	ldr	r0, [pc, #0]	@ (8008458 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8008456:	4770      	bx	lr
 8008458:	2400e4cc 	.word	0x2400e4cc

0800845c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_17_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800845c:	b510      	push	{r4, lr}
};
 800845e:	4c07      	ldr	r4, [pc, #28]	@ (800847c <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
 8008460:	f7ff febc 	bl	80081dc <_Z23getFont_verdana_20_4bppv>
};
 8008464:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8008466:	f7ff fef7 	bl	8008258 <_Z23getFont_verdana_40_4bppv>
};
 800846a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 800846c:	f7ff fe3a 	bl	80080e4 <_Z23getFont_verdana_10_4bppv>
};
 8008470:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_17_4bpp())
 8008472:	f7ff fe75 	bl	8008160 <_Z23getFont_verdana_17_4bppv>
};
 8008476:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8008478:	bd10      	pop	{r4, pc}
 800847a:	bf00      	nop
 800847c:	2400e4cc 	.word	0x2400e4cc

08008480 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8008480:	b510      	push	{r4, lr}
    pointArray = 0;
 8008482:	2400      	movs	r4, #0
 8008484:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8008486:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8008488:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800848a:	601c      	str	r4, [r3, #0]
}
 800848c:	bd10      	pop	{r4, pc}

0800848e <_ZN19CalculatorPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~CalculatorPresenter() {}
 800848e:	4770      	bx	lr

08008490 <_ZThn4_N19CalculatorPresenterD1Ev>:
 8008490:	3804      	subs	r0, #4
 8008492:	4770      	bx	lr

08008494 <_ZN19CalculatorPresenter10deactivateEv>:
}

void CalculatorPresenter::activate()
{

}
 8008494:	4770      	bx	lr

08008496 <_ZN19CalculatorPresenterD0Ev>:
 8008496:	b510      	push	{r4, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	2110      	movs	r1, #16
 800849c:	f01f fd18 	bl	8027ed0 <_ZdlPvj>
 80084a0:	4620      	mov	r0, r4
 80084a2:	bd10      	pop	{r4, pc}

080084a4 <_ZThn4_N19CalculatorPresenterD0Ev>:
 80084a4:	f1a0 0004 	sub.w	r0, r0, #4
 80084a8:	e7f5      	b.n	8008496 <_ZN19CalculatorPresenterD0Ev>
	...

080084ac <_ZN19CalculatorPresenterC1ER14CalculatorView>:
    ModelListener() : model(0) {}
 80084ac:	2200      	movs	r2, #0
    : view(v)
 80084ae:	60c1      	str	r1, [r0, #12]
 80084b0:	6082      	str	r2, [r0, #8]
 80084b2:	4a02      	ldr	r2, [pc, #8]	@ (80084bc <_ZN19CalculatorPresenterC1ER14CalculatorView+0x10>)
 80084b4:	6002      	str	r2, [r0, #0]
 80084b6:	3218      	adds	r2, #24
 80084b8:	6042      	str	r2, [r0, #4]
}
 80084ba:	4770      	bx	lr
 80084bc:	0802c218 	.word	0x0802c218

080084c0 <_ZN14CalculatorView14tearDownScreenEv>:
}

void CalculatorView::tearDownScreen()
{
    CalculatorViewBase::tearDownScreen();
}
 80084c0:	4770      	bx	lr
	...

080084c4 <_ZN14CalculatorViewD1Ev>:

class CalculatorView : public CalculatorViewBase
{
public:
    CalculatorView();
    virtual ~CalculatorView() {}
 80084c4:	4b03      	ldr	r3, [pc, #12]	@ (80084d4 <_ZN14CalculatorViewD1Ev+0x10>)
 80084c6:	b510      	push	{r4, lr}
 80084c8:	4604      	mov	r4, r0
 80084ca:	6003      	str	r3, [r0, #0]
 80084cc:	f7fb fad7 	bl	8003a7e <_ZN18CalculatorViewBaseD1Ev>
 80084d0:	4620      	mov	r0, r4
 80084d2:	bd10      	pop	{r4, pc}
 80084d4:	0802c240 	.word	0x0802c240

080084d8 <_ZN14CalculatorViewD0Ev>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	4604      	mov	r4, r0
 80084dc:	f7ff fff2 	bl	80084c4 <_ZN14CalculatorViewD1Ev>
 80084e0:	f240 61f4 	movw	r1, #1780	@ 0x6f4
 80084e4:	4620      	mov	r0, r4
 80084e6:	f01f fcf3 	bl	8027ed0 <_ZdlPvj>
 80084ea:	4620      	mov	r0, r4
 80084ec:	bd10      	pop	{r4, pc}
	...

080084f0 <_ZN14CalculatorViewC1Ev>:
CalculatorView::CalculatorView()
 80084f0:	b510      	push	{r4, lr}
 80084f2:	4604      	mov	r4, r0
 80084f4:	f7fb fc7c 	bl	8003df0 <_ZN18CalculatorViewBaseC1Ev>
 80084f8:	4b03      	ldr	r3, [pc, #12]	@ (8008508 <_ZN14CalculatorViewC1Ev+0x18>)
}
 80084fa:	4620      	mov	r0, r4
CalculatorView::CalculatorView()
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	2300      	movs	r3, #0
 8008500:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 8008504:	bd10      	pop	{r4, pc}
 8008506:	bf00      	nop
 8008508:	0802c240 	.word	0x0802c240

0800850c <_ZN14CalculatorView11setupScreenEv>:
    CalculatorViewBase::setupScreen();
 800850c:	f7fb bab8 	b.w	8003a80 <_ZN18CalculatorViewBase11setupScreenEv>

08008510 <_ZN14CalculatorView7addCharEc>:

bool CalculatorView::addChar(char character)
{
	if(char_counter > 15)
 8008510:	f8d0 36f0 	ldr.w	r3, [r0, #1776]	@ 0x6f0
 8008514:	2b0f      	cmp	r3, #15
{
 8008516:	b570      	push	{r4, r5, r6, lr}
 8008518:	4604      	mov	r4, r0
 800851a:	b08a      	sub	sp, #40	@ 0x28
 800851c:	460d      	mov	r5, r1
	if(char_counter > 15)
 800851e:	dc24      	bgt.n	800856a <_ZN14CalculatorView7addCharEc+0x5a>
	{
		return false;
	}
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 8008520:	f204 66bc 	addw	r6, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 8008524:	2222      	movs	r2, #34	@ 0x22
 8008526:	2100      	movs	r1, #0
 8008528:	a801      	add	r0, sp, #4
 800852a:	f020 fae5 	bl	8028af8 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 800852e:	2211      	movs	r2, #17
 8008530:	4631      	mov	r1, r6
 8008532:	a801      	add	r0, sp, #4
 8008534:	f014 f9cb 	bl	801c8ce <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter] = character;
 8008538:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 800853c:	aa0a      	add	r2, sp, #40	@ 0x28
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 800853e:	2111      	movs	r1, #17
 8008540:	4630      	mov	r0, r6
	new_buf[char_counter] = character;
 8008542:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008546:	4a0a      	ldr	r2, [pc, #40]	@ (8008570 <_ZN14CalculatorView7addCharEc+0x60>)
	new_buf[char_counter] = character;
 8008548:	f823 5c24 	strh.w	r5, [r3, #-36]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 800854c:	ab01      	add	r3, sp, #4
 800854e:	f014 fd2f 	bl	801cfb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 8008552:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008556:	f012 f9ba 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter++;
 800855a:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 800855e:	2001      	movs	r0, #1
 8008560:	3301      	adds	r3, #1
 8008562:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
	return true;
}
 8008566:	b00a      	add	sp, #40	@ 0x28
 8008568:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 800856a:	2000      	movs	r0, #0
 800856c:	e7fb      	b.n	8008566 <_ZN14CalculatorView7addCharEc+0x56>
 800856e:	bf00      	nop
 8008570:	0802b503 	.word	0x0802b503

08008574 <_ZN14CalculatorView18sendToCalculator_0Ev>:
	char_counter = 0;
}

void CalculatorView::sendToCalculator_0()
{
	addChar('0');
 8008574:	2130      	movs	r1, #48	@ 0x30
 8008576:	f7ff bfcb 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

0800857a <_ZN14CalculatorView18sendToCalculator_1Ev>:
}

void CalculatorView::sendToCalculator_1()
{
	addChar('1');
 800857a:	2131      	movs	r1, #49	@ 0x31
 800857c:	f7ff bfc8 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

08008580 <_ZN14CalculatorView18sendToCalculator_2Ev>:
}

void CalculatorView::sendToCalculator_2()
{
	addChar('2');
 8008580:	2132      	movs	r1, #50	@ 0x32
 8008582:	f7ff bfc5 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

08008586 <_ZN14CalculatorView18sendToCalculator_3Ev>:
}

void CalculatorView::sendToCalculator_3()
{
	addChar('3');
 8008586:	2133      	movs	r1, #51	@ 0x33
 8008588:	f7ff bfc2 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

0800858c <_ZN14CalculatorView18sendToCalculator_4Ev>:
}

void CalculatorView::sendToCalculator_4()
{
	addChar('4');
 800858c:	2134      	movs	r1, #52	@ 0x34
 800858e:	f7ff bfbf 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

08008592 <_ZN14CalculatorView18sendToCalculator_5Ev>:
}

void CalculatorView::sendToCalculator_5()
{
	addChar('5');
 8008592:	2135      	movs	r1, #53	@ 0x35
 8008594:	f7ff bfbc 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

08008598 <_ZN14CalculatorView18sendToCalculator_6Ev>:
}

void CalculatorView::sendToCalculator_6()
{
	addChar('6');
 8008598:	2136      	movs	r1, #54	@ 0x36
 800859a:	f7ff bfb9 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

0800859e <_ZN14CalculatorView18sendToCalculator_7Ev>:
}

void CalculatorView::sendToCalculator_7()
{
	addChar('7');
 800859e:	2137      	movs	r1, #55	@ 0x37
 80085a0:	f7ff bfb6 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085a4 <_ZN14CalculatorView18sendToCalculator_8Ev>:
}

void CalculatorView::sendToCalculator_8()
{
	addChar('8');
 80085a4:	2138      	movs	r1, #56	@ 0x38
 80085a6:	f7ff bfb3 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085aa <_ZN14CalculatorView18sendToCalculator_9Ev>:
}

void CalculatorView::sendToCalculator_9()
{
	addChar('9');
 80085aa:	2139      	movs	r1, #57	@ 0x39
 80085ac:	f7ff bfb0 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085b0 <_ZN14CalculatorView20sendToCalculator_AddEv>:
}

void CalculatorView::sendToCalculator_Add()
{
	addChar('+');
 80085b0:	212b      	movs	r1, #43	@ 0x2b
 80085b2:	f7ff bfad 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085b6 <_ZN14CalculatorView32sendToCalculator_OpenParenthesisEv>:
	removeLastChar();
}

void CalculatorView::sendToCalculator_OpenParenthesis()
{
	addChar('(');
 80085b6:	2128      	movs	r1, #40	@ 0x28
 80085b8:	f7ff bfaa 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085bc <_ZN14CalculatorView33sendToCalculator_CloseParenthesisEv>:
}

void CalculatorView::sendToCalculator_CloseParenthesis()
{
	addChar(')');
 80085bc:	2129      	movs	r1, #41	@ 0x29
 80085be:	f7ff bfa7 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085c2 <_ZN14CalculatorView25sendToCalculator_SubtractEv>:
}

void CalculatorView::sendToCalculator_Subtract()
{
	addChar('-');
 80085c2:	212d      	movs	r1, #45	@ 0x2d
 80085c4:	f7ff bfa4 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085c8 <_ZN14CalculatorView25sendToCalculator_MultiplyEv>:
}

void CalculatorView::sendToCalculator_Multiply()
{
	addChar('*');
 80085c8:	212a      	movs	r1, #42	@ 0x2a
 80085ca:	f7ff bfa1 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085ce <_ZN14CalculatorView23sendToCalculator_DivideEv>:
}

void CalculatorView::sendToCalculator_Divide()
{
	addChar('/');
 80085ce:	212f      	movs	r1, #47	@ 0x2f
 80085d0:	f7ff bf9e 	b.w	8008510 <_ZN14CalculatorView7addCharEc>

080085d4 <_ZN14CalculatorView22sendToCalculator_CommaEv>:
}

void CalculatorView::sendToCalculator_Comma()
{
	addChar(',');
 80085d4:	212c      	movs	r1, #44	@ 0x2c
 80085d6:	f7ff bf9b 	b.w	8008510 <_ZN14CalculatorView7addCharEc>
	...

080085dc <_ZN14CalculatorView14removeLastCharEv>:
	if(char_counter < 1)
 80085dc:	f8d0 36f0 	ldr.w	r3, [r0, #1776]	@ 0x6f0
 80085e0:	2b00      	cmp	r3, #0
{
 80085e2:	b530      	push	{r4, r5, lr}
 80085e4:	4604      	mov	r4, r0
 80085e6:	b08b      	sub	sp, #44	@ 0x2c
	if(char_counter < 1)
 80085e8:	dd26      	ble.n	8008638 <_ZN14CalculatorView14removeLastCharEv+0x5c>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80085ea:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 80085ee:	2222      	movs	r2, #34	@ 0x22
 80085f0:	2100      	movs	r1, #0
 80085f2:	a801      	add	r0, sp, #4
 80085f4:	f020 fa80 	bl	8028af8 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 80085f8:	2211      	movs	r2, #17
 80085fa:	4629      	mov	r1, r5
 80085fc:	a801      	add	r0, sp, #4
 80085fe:	f014 f966 	bl	801c8ce <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter-1] = '\0';
 8008602:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8008606:	aa0a      	add	r2, sp, #40	@ 0x28
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008608:	2111      	movs	r1, #17
	new_buf[char_counter-1] = '\0';
 800860a:	3b01      	subs	r3, #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 800860c:	4628      	mov	r0, r5
	new_buf[char_counter-1] = '\0';
 800860e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008612:	2200      	movs	r2, #0
 8008614:	f823 2c24 	strh.w	r2, [r3, #-36]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008618:	ab01      	add	r3, sp, #4
 800861a:	4a08      	ldr	r2, [pc, #32]	@ (800863c <_ZN14CalculatorView14removeLastCharEv+0x60>)
 800861c:	f014 fcc8 	bl	801cfb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 8008620:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008624:	f012 f953 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter--;
 8008628:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 800862c:	2001      	movs	r0, #1
 800862e:	3b01      	subs	r3, #1
 8008630:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 8008634:	b00b      	add	sp, #44	@ 0x2c
 8008636:	bd30      	pop	{r4, r5, pc}
		return false;
 8008638:	2000      	movs	r0, #0
 800863a:	e7fb      	b.n	8008634 <_ZN14CalculatorView14removeLastCharEv+0x58>
 800863c:	0802b503 	.word	0x0802b503

08008640 <_ZN14CalculatorView23sendToCalculator_DeleteEv>:
	removeLastChar();
 8008640:	f7ff bfcc 	b.w	80085dc <_ZN14CalculatorView14removeLastCharEv>

08008644 <_ZN14CalculatorView9clearTextEv>:
{
 8008644:	b510      	push	{r4, lr}
 8008646:	b08a      	sub	sp, #40	@ 0x28
 8008648:	4604      	mov	r4, r0
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 800864a:	2222      	movs	r2, #34	@ 0x22
 800864c:	2100      	movs	r1, #0
 800864e:	a801      	add	r0, sp, #4
 8008650:	f020 fa52 	bl	8028af8 <memset>
	touchgfx::Unicode::strncpy(TextResultBuffer, new_buf, TEXTRESULT_SIZE);
 8008654:	2211      	movs	r2, #17
 8008656:	a901      	add	r1, sp, #4
 8008658:	f204 60bc 	addw	r0, r4, #1724	@ 0x6bc
 800865c:	f014 f937 	bl	801c8ce <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	TextResult.invalidate();
 8008660:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008664:	f012 f933 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 800866e:	b00a      	add	sp, #40	@ 0x28
 8008670:	bd10      	pop	{r4, pc}

08008672 <_ZN14CalculatorView22sendToCalculator_ClearEv>:
}

void CalculatorView::sendToCalculator_Clear()
{
	clearText();
 8008672:	f7ff bfe7 	b.w	8008644 <_ZN14CalculatorView9clearTextEv>

08008676 <_ZN17DiagnosePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~DiagnosePresenter() {}
 8008676:	4770      	bx	lr

08008678 <_ZThn4_N17DiagnosePresenterD1Ev>:
 8008678:	3804      	subs	r0, #4
 800867a:	4770      	bx	lr

0800867c <_ZN17DiagnosePresenter10deactivateEv>:
}

void DiagnosePresenter::activate()
{

}
 800867c:	4770      	bx	lr

0800867e <_ZN17DiagnosePresenterD0Ev>:
 800867e:	b510      	push	{r4, lr}
 8008680:	4604      	mov	r4, r0
 8008682:	2110      	movs	r1, #16
 8008684:	f01f fc24 	bl	8027ed0 <_ZdlPvj>
 8008688:	4620      	mov	r0, r4
 800868a:	bd10      	pop	{r4, pc}

0800868c <_ZThn4_N17DiagnosePresenterD0Ev>:
 800868c:	f1a0 0004 	sub.w	r0, r0, #4
 8008690:	e7f5      	b.n	800867e <_ZN17DiagnosePresenterD0Ev>
	...

08008694 <_ZN17DiagnosePresenterC1ER12DiagnoseView>:
 8008694:	2200      	movs	r2, #0
    : view(v)
 8008696:	60c1      	str	r1, [r0, #12]
 8008698:	6082      	str	r2, [r0, #8]
 800869a:	4a02      	ldr	r2, [pc, #8]	@ (80086a4 <_ZN17DiagnosePresenterC1ER12DiagnoseView+0x10>)
 800869c:	6002      	str	r2, [r0, #0]
 800869e:	3218      	adds	r2, #24
 80086a0:	6042      	str	r2, [r0, #4]
}
 80086a2:	4770      	bx	lr
 80086a4:	0802c2c4 	.word	0x0802c2c4

080086a8 <_ZN12DiagnoseView14tearDownScreenEv>:
}

void DiagnoseView::tearDownScreen()
{
    DiagnoseViewBase::tearDownScreen();
}
 80086a8:	4770      	bx	lr
	...

080086ac <_ZN12DiagnoseViewD1Ev>:

class DiagnoseView : public DiagnoseViewBase
{
public:
    DiagnoseView();
    virtual ~DiagnoseView() {}
 80086ac:	4b03      	ldr	r3, [pc, #12]	@ (80086bc <_ZN12DiagnoseViewD1Ev+0x10>)
 80086ae:	b510      	push	{r4, lr}
 80086b0:	4604      	mov	r4, r0
 80086b2:	6003      	str	r3, [r0, #0]
 80086b4:	f7fc fb30 	bl	8004d18 <_ZN16DiagnoseViewBaseD1Ev>
 80086b8:	4620      	mov	r0, r4
 80086ba:	bd10      	pop	{r4, pc}
 80086bc:	0802c2ec 	.word	0x0802c2ec

080086c0 <_ZN12DiagnoseViewD0Ev>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	f7ff fff2 	bl	80086ac <_ZN12DiagnoseViewD1Ev>
 80086c8:	f243 417c 	movw	r1, #13436	@ 0x347c
 80086cc:	4620      	mov	r0, r4
 80086ce:	f01f fbff 	bl	8027ed0 <_ZdlPvj>
 80086d2:	4620      	mov	r0, r4
 80086d4:	bd10      	pop	{r4, pc}
	...

080086d8 <_ZN12DiagnoseViewC1Ev>:
DiagnoseView::DiagnoseView()
 80086d8:	b510      	push	{r4, lr}
 80086da:	4604      	mov	r4, r0
 80086dc:	f7fc fbcc 	bl	8004e78 <_ZN16DiagnoseViewBaseC1Ev>
 80086e0:	4b01      	ldr	r3, [pc, #4]	@ (80086e8 <_ZN12DiagnoseViewC1Ev+0x10>)
}
 80086e2:	4620      	mov	r0, r4
DiagnoseView::DiagnoseView()
 80086e4:	6023      	str	r3, [r4, #0]
}
 80086e6:	bd10      	pop	{r4, pc}
 80086e8:	0802c2ec 	.word	0x0802c2ec

080086ec <_ZN12DiagnoseView11setupScreenEv>:
    DiagnoseViewBase::setupScreen();
 80086ec:	f7fc bae7 	b.w	8004cbe <_ZN16DiagnoseViewBase11setupScreenEv>

080086f0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80086f0:	4770      	bx	lr

080086f2 <_ZN19FrontendApplicationD0Ev>:
 80086f2:	b510      	push	{r4, lr}
 80086f4:	4604      	mov	r4, r0
 80086f6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80086fa:	f01f fbe9 	bl	8027ed0 <_ZdlPvj>
 80086fe:	4620      	mov	r0, r4
 8008700:	bd10      	pop	{r4, pc}

08008702 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8008702:	b510      	push	{r4, lr}
 8008704:	4604      	mov	r4, r0
    {
        model.tick();
 8008706:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800870a:	f000 f84e 	bl	80087aa <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800870e:	4620      	mov	r0, r4
    }
 8008710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8008714:	f011 b8b4 	b.w	8019880 <_ZN8touchgfx11Application15handleTickEventEv>

08008718 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008718:	b510      	push	{r4, lr}
 800871a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800871c:	f7ff f840 	bl	80077a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008720:	4b01      	ldr	r3, [pc, #4]	@ (8008728 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8008722:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8008724:	6023      	str	r3, [r4, #0]
}
 8008726:	bd10      	pop	{r4, pc}
 8008728:	0802c320 	.word	0x0802c320

0800872c <_ZN19MainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainScreenPresenter() {}
 800872c:	4770      	bx	lr

0800872e <_ZThn4_N19MainScreenPresenterD1Ev>:
 800872e:	3804      	subs	r0, #4
 8008730:	4770      	bx	lr

08008732 <_ZN19MainScreenPresenter10deactivateEv>:
}

void MainScreenPresenter::activate()
{

}
 8008732:	4770      	bx	lr

08008734 <_ZN19MainScreenPresenterD0Ev>:
 8008734:	b510      	push	{r4, lr}
 8008736:	4604      	mov	r4, r0
 8008738:	2110      	movs	r1, #16
 800873a:	f01f fbc9 	bl	8027ed0 <_ZdlPvj>
 800873e:	4620      	mov	r0, r4
 8008740:	bd10      	pop	{r4, pc}

08008742 <_ZThn4_N19MainScreenPresenterD0Ev>:
 8008742:	f1a0 0004 	sub.w	r0, r0, #4
 8008746:	e7f5      	b.n	8008734 <_ZN19MainScreenPresenterD0Ev>

08008748 <_ZN19MainScreenPresenterC1ER14MainScreenView>:
 8008748:	2200      	movs	r2, #0
    : view(v)
 800874a:	60c1      	str	r1, [r0, #12]
 800874c:	6082      	str	r2, [r0, #8]
 800874e:	4a02      	ldr	r2, [pc, #8]	@ (8008758 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x10>)
 8008750:	6002      	str	r2, [r0, #0]
 8008752:	3218      	adds	r2, #24
 8008754:	6042      	str	r2, [r0, #4]
}
 8008756:	4770      	bx	lr
 8008758:	0802c374 	.word	0x0802c374

0800875c <_ZN14MainScreenView14tearDownScreenEv>:
}

void MainScreenView::tearDownScreen()
{
    MainScreenViewBase::tearDownScreen();
}
 800875c:	4770      	bx	lr
	...

08008760 <_ZN14MainScreenViewD1Ev>:

class MainScreenView : public MainScreenViewBase
{
public:
    MainScreenView();
    virtual ~MainScreenView() {}
 8008760:	4b03      	ldr	r3, [pc, #12]	@ (8008770 <_ZN14MainScreenViewD1Ev+0x10>)
 8008762:	b510      	push	{r4, lr}
 8008764:	4604      	mov	r4, r0
 8008766:	6003      	str	r3, [r0, #0]
 8008768:	f7ff fad4 	bl	8007d14 <_ZN18MainScreenViewBaseD1Ev>
 800876c:	4620      	mov	r0, r4
 800876e:	bd10      	pop	{r4, pc}
 8008770:	0802c39c 	.word	0x0802c39c

08008774 <_ZN14MainScreenViewD0Ev>:
 8008774:	b510      	push	{r4, lr}
 8008776:	4604      	mov	r4, r0
 8008778:	f7ff fff2 	bl	8008760 <_ZN14MainScreenViewD1Ev>
 800877c:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8008780:	4620      	mov	r0, r4
 8008782:	f01f fba5 	bl	8027ed0 <_ZdlPvj>
 8008786:	4620      	mov	r0, r4
 8008788:	bd10      	pop	{r4, pc}
	...

0800878c <_ZN14MainScreenViewC1Ev>:
MainScreenView::MainScreenView()
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
 8008790:	f7ff fb40 	bl	8007e14 <_ZN18MainScreenViewBaseC1Ev>
 8008794:	4b01      	ldr	r3, [pc, #4]	@ (800879c <_ZN14MainScreenViewC1Ev+0x10>)
}
 8008796:	4620      	mov	r0, r4
MainScreenView::MainScreenView()
 8008798:	6023      	str	r3, [r4, #0]
}
 800879a:	bd10      	pop	{r4, pc}
 800879c:	0802c39c 	.word	0x0802c39c

080087a0 <_ZN14MainScreenView11setupScreenEv>:
    MainScreenViewBase::setupScreen();
 80087a0:	f7ff bab9 	b.w	8007d16 <_ZN18MainScreenViewBase11setupScreenEv>

080087a4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80087a4:	2200      	movs	r2, #0
 80087a6:	6002      	str	r2, [r0, #0]
{

}
 80087a8:	4770      	bx	lr

080087aa <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80087aa:	4770      	bx	lr

080087ac <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80087ac:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80087ae:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80087b2:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80087b4:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80087b6:	2302      	movs	r3, #2
 80087b8:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80087ba:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80087be:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80087c2:	4770      	bx	lr

080087c4 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80087c4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80087c8:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80087ca:	bf04      	itt	eq
 80087cc:	2300      	moveq	r3, #0
 80087ce:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 80087d2:	2000      	movs	r0, #0
 80087d4:	4770      	bx	lr

080087d6 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80087d6:	2000      	movs	r0, #0
 80087d8:	4770      	bx	lr

080087da <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80087da:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80087dc:	6904      	ldr	r4, [r0, #16]
 80087de:	8900      	ldrh	r0, [r0, #8]
 80087e0:	46a4      	mov	ip, r4
}
 80087e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80087e6:	4760      	bx	ip

080087e8 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80087e8:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80087ea:	68c4      	ldr	r4, [r0, #12]
 80087ec:	8900      	ldrh	r0, [r0, #8]
 80087ee:	46a4      	mov	ip, r4
}
 80087f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80087f4:	4760      	bx	ip

080087f6 <FT6X06_GestureConfig>:
{
 80087f6:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80087f8:	f100 0518 	add.w	r5, r0, #24
{
 80087fc:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80087fe:	7809      	ldrb	r1, [r1, #0]
 8008800:	4628      	mov	r0, r5
 8008802:	f000 f911 	bl	8008a28 <ft6x06_radian_value>
 8008806:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8008808:	7931      	ldrb	r1, [r6, #4]
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f918 	bl	8008a40 <ft6x06_offset_left_right>
 8008810:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8008812:	7a31      	ldrb	r1, [r6, #8]
 8008814:	4628      	mov	r0, r5
 8008816:	f000 f91f 	bl	8008a58 <ft6x06_offset_up_down>
 800881a:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800881c:	7b31      	ldrb	r1, [r6, #12]
 800881e:	4628      	mov	r0, r5
 8008820:	f000 f926 	bl	8008a70 <ft6x06_disatnce_left_right>
 8008824:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008826:	7c31      	ldrb	r1, [r6, #16]
 8008828:	4628      	mov	r0, r5
 800882a:	f000 f92d 	bl	8008a88 <ft6x06_distance_up_down>
 800882e:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008830:	7d31      	ldrb	r1, [r6, #20]
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f934 	bl	8008aa0 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8008838:	42c4      	cmn	r4, r0
}
 800883a:	bf14      	ite	ne
 800883c:	f04f 30ff 	movne.w	r0, #4294967295
 8008840:	2000      	moveq	r0, #0
 8008842:	bd70      	pop	{r4, r5, r6, pc}

08008844 <FT6X06_ReadID>:
{
 8008844:	b513      	push	{r0, r1, r4, lr}
 8008846:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8008848:	3018      	adds	r0, #24
 800884a:	f10d 0107 	add.w	r1, sp, #7
 800884e:	f000 f93f 	bl	8008ad0 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8008852:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008856:	6023      	str	r3, [r4, #0]
}
 8008858:	b002      	add	sp, #8
 800885a:	bd10      	pop	{r4, pc}

0800885c <FT6X06_GetState>:
{
 800885c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800885e:	f100 0518 	add.w	r5, r0, #24
{
 8008862:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008864:	a901      	add	r1, sp, #4
 8008866:	4628      	mov	r0, r5
 8008868:	f000 f8d1 	bl	8008a0e <ft6x06_td_status>
 800886c:	bb08      	cbnz	r0, 80088b2 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800886e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8008872:	2b02      	cmp	r3, #2
 8008874:	bf98      	it	ls
 8008876:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008878:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800887a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800887c:	2103      	movs	r1, #3
 800887e:	4628      	mov	r0, r5
 8008880:	eb0d 0203 	add.w	r2, sp, r3
 8008884:	f000 f8b0 	bl	80089e8 <ft6x06_read_reg>
 8008888:	b9b0      	cbnz	r0, 80088b8 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800888a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800888e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008898:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800889a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800889e:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80088a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60a3      	str	r3, [r4, #8]
}
 80088ae:	b003      	add	sp, #12
 80088b0:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	e7df      	b.n	8008878 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80088bc:	e7f7      	b.n	80088ae <FT6X06_GetState+0x52>

080088be <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80088be:	3018      	adds	r0, #24
 80088c0:	f000 b8a0 	b.w	8008a04 <ft6x06_gest_id>

080088c4 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80088c4:	2101      	movs	r1, #1
 80088c6:	3018      	adds	r0, #24
 80088c8:	f000 b8f6 	b.w	8008ab8 <ft6x06_g_mode>

080088cc <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80088cc:	2100      	movs	r1, #0
 80088ce:	3018      	adds	r0, #24
 80088d0:	f000 b8f2 	b.w	8008ab8 <ft6x06_g_mode>

080088d4 <FT6X06_Init>:
{
 80088d4:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80088d6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80088da:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80088dc:	b96b      	cbnz	r3, 80088fa <FT6X06_Init+0x26>
    pObj->IO.Init();
 80088de:	6803      	ldr	r3, [r0, #0]
 80088e0:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff fff2 	bl	80088cc <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80088e8:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80088ea:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80088ee:	bf18      	it	ne
 80088f0:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80088f2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 80088f6:	4240      	negs	r0, r0
}
 80088f8:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 80088fa:	2000      	movs	r0, #0
  return ret;
 80088fc:	e7fc      	b.n	80088f8 <FT6X06_Init+0x24>

080088fe <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 80088fe:	2000      	movs	r0, #0
 8008900:	4770      	bx	lr

08008902 <FT6X06_GetMultiTouchState>:
{
 8008902:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008904:	f100 0518 	add.w	r5, r0, #24
{
 8008908:	b085      	sub	sp, #20
 800890a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800890c:	4628      	mov	r0, r5
 800890e:	a901      	add	r1, sp, #4
 8008910:	f000 f87d 	bl	8008a0e <ft6x06_td_status>
 8008914:	2800      	cmp	r0, #0
 8008916:	d145      	bne.n	80089a4 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8008918:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800891c:	2b02      	cmp	r3, #2
 800891e:	bf98      	it	ls
 8008920:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8008922:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008924:	230c      	movs	r3, #12
 8008926:	aa01      	add	r2, sp, #4
 8008928:	2103      	movs	r1, #3
 800892a:	4628      	mov	r0, r5
 800892c:	f000 f85c 	bl	80089e8 <ft6x06_read_reg>
 8008930:	2800      	cmp	r0, #0
 8008932:	d13a      	bne.n	80089aa <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008934:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008938:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800893c:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800893e:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008940:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8008944:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008946:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008948:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800894c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008950:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008952:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008956:	021b      	lsls	r3, r3, #8
 8008958:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800895c:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800895e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008962:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8008964:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008968:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800896a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800896e:	091b      	lsrs	r3, r3, #4
 8008970:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008972:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8008974:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008976:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800897a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800897c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800897e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008982:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8008984:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800898e:	430b      	orrs	r3, r1
 8008990:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8008992:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008996:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8008998:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80089a0:	b005      	add	sp, #20
 80089a2:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	e7bb      	b.n	8008922 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80089ae:	e7f7      	b.n	80089a0 <FT6X06_GetMultiTouchState+0x9e>

080089b0 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80089b0:	b190      	cbz	r0, 80089d8 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80089b2:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80089b4:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80089b6:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80089b8:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80089ba:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80089bc:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80089be:	68ca      	ldr	r2, [r1, #12]
 80089c0:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80089c2:	690a      	ldr	r2, [r1, #16]
 80089c4:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80089c6:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80089c8:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80089ca:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80089cc:	4a04      	ldr	r2, [pc, #16]	@ (80089e0 <FT6X06_RegisterBusIO+0x30>)
 80089ce:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80089d0:	4a04      	ldr	r2, [pc, #16]	@ (80089e4 <FT6X06_RegisterBusIO+0x34>)
 80089d2:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80089d4:	b103      	cbz	r3, 80089d8 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80089d6:	4718      	bx	r3
}
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	080087db 	.word	0x080087db
 80089e4:	080087e9 	.word	0x080087e9

080089e8 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80089e8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80089ea:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80089ee:	46a4      	mov	ip, r4
}
 80089f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80089f4:	4760      	bx	ip

080089f6 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80089f6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80089f8:	6804      	ldr	r4, [r0, #0]
 80089fa:	6880      	ldr	r0, [r0, #8]
 80089fc:	46a4      	mov	ip, r4
}
 80089fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008a02:	4760      	bx	ip

08008a04 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8008a04:	2301      	movs	r3, #1
{
 8008a06:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f7ff bfed 	b.w	80089e8 <ft6x06_read_reg>

08008a0e <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8008a0e:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8008a10:	460a      	mov	r2, r1
{
 8008a12:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8008a14:	2301      	movs	r3, #1
 8008a16:	2102      	movs	r1, #2
 8008a18:	f7ff ffe6 	bl	80089e8 <ft6x06_read_reg>
  
  if(ret == 0)
 8008a1c:	b918      	cbnz	r0, 8008a26 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8008a1e:	7823      	ldrb	r3, [r4, #0]
 8008a20:	f003 030f 	and.w	r3, r3, #15
 8008a24:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8008a26:	bd10      	pop	{r4, pc}

08008a28 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008a28:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8008a2a:	2301      	movs	r3, #1
{
 8008a2c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8008a30:	f10d 0207 	add.w	r2, sp, #7
 8008a34:	2191      	movs	r1, #145	@ 0x91
 8008a36:	f7ff ffde 	bl	80089f6 <ft6x06_write_reg>
}
 8008a3a:	b003      	add	sp, #12
 8008a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08008a40 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008a40:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8008a42:	2301      	movs	r3, #1
{
 8008a44:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8008a48:	f10d 0207 	add.w	r2, sp, #7
 8008a4c:	2192      	movs	r1, #146	@ 0x92
 8008a4e:	f7ff ffd2 	bl	80089f6 <ft6x06_write_reg>
}
 8008a52:	b003      	add	sp, #12
 8008a54:	f85d fb04 	ldr.w	pc, [sp], #4

08008a58 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008a58:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8008a5a:	2301      	movs	r3, #1
{
 8008a5c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8008a60:	f10d 0207 	add.w	r2, sp, #7
 8008a64:	2193      	movs	r1, #147	@ 0x93
 8008a66:	f7ff ffc6 	bl	80089f6 <ft6x06_write_reg>
}
 8008a6a:	b003      	add	sp, #12
 8008a6c:	f85d fb04 	ldr.w	pc, [sp], #4

08008a70 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008a70:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8008a72:	2301      	movs	r3, #1
{
 8008a74:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8008a78:	f10d 0207 	add.w	r2, sp, #7
 8008a7c:	2194      	movs	r1, #148	@ 0x94
 8008a7e:	f7ff ffba 	bl	80089f6 <ft6x06_write_reg>
}
 8008a82:	b003      	add	sp, #12
 8008a84:	f85d fb04 	ldr.w	pc, [sp], #4

08008a88 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008a88:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8008a8a:	2301      	movs	r3, #1
{
 8008a8c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8008a90:	f10d 0207 	add.w	r2, sp, #7
 8008a94:	2195      	movs	r1, #149	@ 0x95
 8008a96:	f7ff ffae 	bl	80089f6 <ft6x06_write_reg>
}
 8008a9a:	b003      	add	sp, #12
 8008a9c:	f85d fb04 	ldr.w	pc, [sp], #4

08008aa0 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008aa0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8008aa2:	2301      	movs	r3, #1
{
 8008aa4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8008aa8:	f10d 0207 	add.w	r2, sp, #7
 8008aac:	2196      	movs	r1, #150	@ 0x96
 8008aae:	f7ff ffa2 	bl	80089f6 <ft6x06_write_reg>
}
 8008ab2:	b003      	add	sp, #12
 8008ab4:	f85d fb04 	ldr.w	pc, [sp], #4

08008ab8 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008ab8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8008aba:	2301      	movs	r3, #1
{
 8008abc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8008ac0:	f10d 0207 	add.w	r2, sp, #7
 8008ac4:	21a4      	movs	r1, #164	@ 0xa4
 8008ac6:	f7ff ff96 	bl	80089f6 <ft6x06_write_reg>
}
 8008aca:	b003      	add	sp, #12
 8008acc:	f85d fb04 	ldr.w	pc, [sp], #4

08008ad0 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8008ad0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	21a8      	movs	r1, #168	@ 0xa8
 8008ad6:	f7ff bf87 	b.w	80089e8 <ft6x06_read_reg>
	...

08008adc <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8008adc:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4b07      	ldr	r3, [pc, #28]	@ (8008b00 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8008ae2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8008ae6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8008ae8:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008aea:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8008aec:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008af2:	f006 f9f5 	bl	800eee0 <HAL_SDRAM_SendCommand>
 8008af6:	3800      	subs	r0, #0
 8008af8:	bf18      	it	ne
 8008afa:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008afc:	4240      	negs	r0, r0
 8008afe:	bd08      	pop	{r3, pc}
 8008b00:	2400e4dc 	.word	0x2400e4dc

08008b04 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8008b04:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8008b06:	2202      	movs	r2, #2
 8008b08:	4b08      	ldr	r3, [pc, #32]	@ (8008b2c <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8008b0a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8008b0e:	2101      	movs	r1, #1
 8008b10:	2200      	movs	r2, #0
 8008b12:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	f006 f9e0 	bl	800eee0 <HAL_SDRAM_SendCommand>
 8008b20:	3800      	subs	r0, #0
 8008b22:	bf18      	it	ne
 8008b24:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008b26:	4240      	negs	r0, r0
 8008b28:	bd08      	pop	{r3, pc}
 8008b2a:	bf00      	nop
 8008b2c:	2400e4dc 	.word	0x2400e4dc

08008b30 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8008b30:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008b32:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8008b36:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008b38:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8008b3a:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8008b3c:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8008b3e:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8008b40:	6991      	ldr	r1, [r2, #24]
 8008b42:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008b44:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8008b46:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008b48:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8008b4a:	4907      	ldr	r1, [pc, #28]	@ (8008b68 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8008b4c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8008b4e:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8008b50:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8008b52:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b5a:	f006 f9c1 	bl	800eee0 <HAL_SDRAM_SendCommand>
 8008b5e:	3800      	subs	r0, #0
 8008b60:	bf18      	it	ne
 8008b62:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008b64:	4240      	negs	r0, r0
 8008b66:	bd10      	pop	{r4, pc}
 8008b68:	2400e4dc 	.word	0x2400e4dc

08008b6c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8008b6c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8008b6e:	4b08      	ldr	r3, [pc, #32]	@ (8008b90 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8008b70:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8008b74:	2108      	movs	r1, #8
 8008b76:	2200      	movs	r2, #0
 8008b78:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b80:	4619      	mov	r1, r3
 8008b82:	f006 f9ad 	bl	800eee0 <HAL_SDRAM_SendCommand>
 8008b86:	3800      	subs	r0, #0
 8008b88:	bf18      	it	ne
 8008b8a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008b8c:	4240      	negs	r0, r0
 8008b8e:	bd08      	pop	{r3, pc}
 8008b90:	2400e4dc 	.word	0x2400e4dc

08008b94 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8008b94:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8008b96:	f006 f9c2 	bl	800ef1e <HAL_SDRAM_ProgramRefreshRate>
 8008b9a:	3800      	subs	r0, #0
 8008b9c:	bf18      	it	ne
 8008b9e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008ba0:	4240      	negs	r0, r0
 8008ba2:	bd08      	pop	{r3, pc}

08008ba4 <IS42S32800J_Init>:
{
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8008ba8:	6809      	ldr	r1, [r1, #0]
{
 8008baa:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8008bac:	f7ff ff96 	bl	8008adc <IS42S32800J_ClockEnable>
 8008bb0:	b110      	cbz	r0, 8008bb8 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8008bb8:	f001 fc7c 	bl	800a4b4 <HAL_GetTick>
 8008bbc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8008bbe:	f001 fc79 	bl	800a4b4 <HAL_GetTick>
 8008bc2:	4286      	cmp	r6, r0
 8008bc4:	d0fb      	beq.n	8008bbe <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8008bc6:	6821      	ldr	r1, [r4, #0]
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f7ff ff9b 	bl	8008b04 <IS42S32800J_Precharge>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d1ef      	bne.n	8008bb2 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	e9d4 1200 	ldrd	r1, r2, [r4]
 8008bd8:	f7ff ffc8 	bl	8008b6c <IS42S32800J_RefreshMode>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d1e8      	bne.n	8008bb2 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8008be0:	4621      	mov	r1, r4
 8008be2:	4628      	mov	r0, r5
 8008be4:	f7ff ffa4 	bl	8008b30 <IS42S32800J_ModeRegConfig>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d1e2      	bne.n	8008bb2 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8008bec:	68a1      	ldr	r1, [r4, #8]
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f7ff ffd0 	bl	8008b94 <IS42S32800J_RefreshRate>
 8008bf4:	3800      	subs	r0, #0
 8008bf6:	bf18      	it	ne
 8008bf8:	2001      	movne	r0, #1
 8008bfa:	4240      	negs	r0, r0
  return ret;
 8008bfc:	e7db      	b.n	8008bb6 <IS42S32800J_Init+0x12>

08008bfe <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8008bfe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8008c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8008c0a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8008c0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008c12:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8008c16:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c1a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	4770      	bx	lr

08008c20 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008c20:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008c22:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8008c26:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8008c28:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008c2c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8008c2e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8008c30:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8008c32:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8008c34:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008c36:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8008c38:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c3a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008c3c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8008c3e:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8008c40:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8008c42:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c44:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008c46:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008c4a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8008c4e:	2310      	movs	r3, #16
 8008c50:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8008c52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008c56:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8008c58:	f240 1301 	movw	r3, #257	@ 0x101
 8008c5c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c62:	f004 fd44 	bl	800d6ee <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8008c66:	2800      	cmp	r0, #0

}
 8008c68:	bf14      	ite	ne
 8008c6a:	f06f 0004 	mvnne.w	r0, #4
 8008c6e:	2000      	moveq	r0, #0
 8008c70:	b015      	add	sp, #84	@ 0x54
 8008c72:	f85d fb04 	ldr.w	pc, [sp], #4

08008c76 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008c76:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c78:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8008c7c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008c7e:	bf08      	it	eq
 8008c80:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8008c84:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008c86:	bf18      	it	ne
 8008c88:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8008c8c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c8e:	a906      	add	r1, sp, #24
{
 8008c90:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008c92:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8008c94:	2306      	movs	r3, #6
 8008c96:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008c98:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008c9a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8008c9e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8008ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008ca2:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008ca4:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ca8:	f004 fc20 	bl	800d4ec <HAL_QSPI_Command>
 8008cac:	bb20      	cbnz	r0, 8008cf8 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8008cae:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8008cb2:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008cb4:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8008cb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8008cba:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008cbc:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8008cbe:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8008cc2:	f04f 0310 	mov.w	r3, #16
 8008cc6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8008cca:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008cce:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8008cd0:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008cd4:	bf14      	ite	ne
 8008cd6:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8008cda:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008cde:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008ce0:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ce2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008ce6:	f004 fd02 	bl	800d6ee <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8008cea:	2800      	cmp	r0, #0
 8008cec:	bf14      	ite	ne
 8008cee:	f06f 0004 	mvnne.w	r0, #4
 8008cf2:	2000      	moveq	r0, #0
}
 8008cf4:	b015      	add	sp, #84	@ 0x54
 8008cf6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8008cf8:	f06f 0001 	mvn.w	r0, #1
 8008cfc:	e7fa      	b.n	8008cf4 <MT25TL01G_WriteEnable+0x7e>

08008cfe <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008cfe:	2903      	cmp	r1, #3
{
 8008d00:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008d02:	bf08      	it	eq
 8008d04:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8008d08:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008d0a:	bf18      	it	ne
 8008d0c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8008d10:	4604      	mov	r4, r0
 8008d12:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008d14:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8008d16:	23b7      	movs	r3, #183	@ 0xb7
 8008d18:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008d1a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008d1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008d20:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008d22:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008d24:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008d26:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8008d2a:	f7ff ffa4 	bl	8008c76 <MT25TL01G_WriteEnable>
 8008d2e:	b118      	cbz	r0, 8008d38 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8008d30:	f06f 0001 	mvn.w	r0, #1
}
 8008d34:	b00f      	add	sp, #60	@ 0x3c
 8008d36:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d3c:	4669      	mov	r1, sp
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f004 fbd4 	bl	800d4ec <HAL_QSPI_Command>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d1f3      	bne.n	8008d30 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7ff ff68 	bl	8008c20 <MT25TL01G_AutoPollingMemReady>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d0ef      	beq.n	8008d34 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8008d54:	e7ec      	b.n	8008d30 <MT25TL01G_Enter4BytesAddressMode+0x32>

08008d56 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8008d56:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8008d5c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008d62:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8008d64:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d66:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8008d68:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008d6a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008d6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008d70:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008d72:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008d74:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008d76:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d7a:	f004 fbb7 	bl	800d4ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8008d7e:	2800      	cmp	r0, #0
}
 8008d80:	bf14      	ite	ne
 8008d82:	f06f 0001 	mvnne.w	r0, #1
 8008d86:	2000      	moveq	r0, #0
 8008d88:	b00f      	add	sp, #60	@ 0x3c
 8008d8a:	f85d fb04 	ldr.w	pc, [sp], #4

08008d8e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8008d8e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8008d94:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d96:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008d9a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8008d9c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d9e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8008da0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008da2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008da4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008da8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008daa:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008dac:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008dae:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008db2:	f004 fb9b 	bl	800d4ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8008db6:	2800      	cmp	r0, #0
}
 8008db8:	bf14      	ite	ne
 8008dba:	f06f 0001 	mvnne.w	r0, #1
 8008dbe:	2000      	moveq	r0, #0
 8008dc0:	b00f      	add	sp, #60	@ 0x3c
 8008dc2:	f85d fb04 	ldr.w	pc, [sp], #4

08008dc6 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008dc6:	b500      	push	{lr}
 8008dc8:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8008dca:	2903      	cmp	r1, #3
 8008dcc:	d80e      	bhi.n	8008dec <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8008dce:	e8df f001 	tbb	[pc, r1]
 8008dd2:	2902      	.short	0x2902
 8008dd4:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008dd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008dda:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8008ddc:	230e      	movs	r3, #14
 8008dde:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8008de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008de4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8008de6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008dea:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8008dec:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8008dee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008df2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008df6:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8008df8:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008dfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8008dfe:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e00:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008e02:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008e06:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e08:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008e0a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8008e0c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008e10:	f004 fcbe 	bl	800d790 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8008e14:	2800      	cmp	r0, #0
}
 8008e16:	bf14      	ite	ne
 8008e18:	f06f 0005 	mvnne.w	r0, #5
 8008e1c:	2000      	moveq	r0, #0
 8008e1e:	b011      	add	sp, #68	@ 0x44
 8008e20:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008e24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e28:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8008e2a:	233d      	movs	r3, #61	@ 0x3d
 8008e2c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8008e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e32:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8008e34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e38:	e7d7      	b.n	8008dea <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e3e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8008e40:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8008e42:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8008e44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008e48:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008e4a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8008e4e:	e7cc      	b.n	8008dea <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008e50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008e54:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8008e56:	23ed      	movs	r3, #237	@ 0xed
 8008e58:	e7f3      	b.n	8008e42 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08008e5a <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008e5a:	b500      	push	{lr}
 8008e5c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8008e5e:	2903      	cmp	r1, #3
 8008e60:	d80e      	bhi.n	8008e80 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8008e62:	e8df f001 	tbb	[pc, r1]
 8008e66:	2502      	.short	0x2502
 8008e68:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e6e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8008e70:	230c      	movs	r3, #12
 8008e72:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8008e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e78:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8008e7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008e7e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8008e80:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008e82:	466a      	mov	r2, sp
 8008e84:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8008e86:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8008e88:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8008e8c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008e92:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008e94:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8008e98:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008e9c:	f004 fc78 	bl	800d790 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8008ea0:	2800      	cmp	r0, #0
}
 8008ea2:	bf14      	ite	ne
 8008ea4:	f06f 0005 	mvnne.w	r0, #5
 8008ea8:	2000      	moveq	r0, #0
 8008eaa:	b011      	add	sp, #68	@ 0x44
 8008eac:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008eb4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8008eb6:	23bc      	movs	r3, #188	@ 0xbc
 8008eb8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8008eba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ebe:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8008ec0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ec4:	e7db      	b.n	8008e7e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008eca:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8008ecc:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8008ece:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8008ed0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008ed4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008ed6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8008eda:	e7d0      	b.n	8008e7e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008edc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008ee0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8008ee2:	23eb      	movs	r3, #235	@ 0xeb
 8008ee4:	e7f3      	b.n	8008ece <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08008ee6 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008ee6:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8008eec:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008eee:	bf18      	it	ne
 8008ef0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8008ef4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008ef6:	bf08      	it	eq
 8008ef8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008efc:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008efe:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8008f00:	2366      	movs	r3, #102	@ 0x66
 8008f02:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008f04:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f06:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008f0a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008f0c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008f0e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008f10:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f14:	f004 faea 	bl	800d4ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8008f18:	2800      	cmp	r0, #0
}
 8008f1a:	bf14      	ite	ne
 8008f1c:	f06f 0001 	mvnne.w	r0, #1
 8008f20:	2000      	moveq	r0, #0
 8008f22:	b00f      	add	sp, #60	@ 0x3c
 8008f24:	f85d fb04 	ldr.w	pc, [sp], #4

08008f28 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008f28:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8008f2e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008f30:	bf18      	it	ne
 8008f32:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8008f36:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008f38:	bf08      	it	eq
 8008f3a:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f3e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008f40:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8008f42:	2399      	movs	r3, #153	@ 0x99
 8008f44:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008f46:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f48:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008f4c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8008f4e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008f50:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008f52:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f56:	f004 fac9 	bl	800d4ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8008f5a:	2800      	cmp	r0, #0
}
 8008f5c:	bf14      	ite	ne
 8008f5e:	f06f 0001 	mvnne.w	r0, #1
 8008f62:	2000      	moveq	r0, #0
 8008f64:	b00f      	add	sp, #60	@ 0x3c
 8008f66:	f85d fb04 	ldr.w	pc, [sp], #4

08008f6a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008f6a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008f6c:	6884      	ldr	r4, [r0, #8]
 8008f6e:	8800      	ldrh	r0, [r0, #0]
 8008f70:	46a4      	mov	ip, r4
}
 8008f72:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008f76:	4760      	bx	ip

08008f78 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8008f78:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008f7a:	6844      	ldr	r4, [r0, #4]
 8008f7c:	8800      	ldrh	r0, [r0, #0]
 8008f7e:	46a4      	mov	ip, r4
}
 8008f80:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008f84:	4760      	bx	ip

08008f86 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8008f86:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8008f88:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8008f8e:	4798      	blx	r3
 8008f90:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008f92:	68e3      	ldr	r3, [r4, #12]
 8008f94:	4798      	blx	r3
 8008f96:	1b83      	subs	r3, r0, r6
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	d3fa      	bcc.n	8008f92 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8008f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008fa0 <OTM8009A_Init>:
{
 8008fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f100 0510 	add.w	r5, r0, #16
{
 8008faa:	4607      	mov	r7, r0
 8008fac:	460e      	mov	r6, r1
 8008fae:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4ade      	ldr	r2, [pc, #888]	@ (800932c <OTM8009A_Init+0x38c>)
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f000 fb99 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8008fba:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008fbc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8008fbe:	4adc      	ldr	r2, [pc, #880]	@ (8009330 <OTM8009A_Init+0x390>)
 8008fc0:	21ff      	movs	r1, #255	@ 0xff
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fb92 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008fc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8008fca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008fcc:	4ad9      	ldr	r2, [pc, #868]	@ (8009334 <OTM8009A_Init+0x394>)
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f000 fb8b 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8008fd6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008fd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8008fda:	4ad7      	ldr	r2, [pc, #860]	@ (8009338 <OTM8009A_Init+0x398>)
 8008fdc:	21ff      	movs	r1, #255	@ 0xff
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 fb84 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008fe4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8008fe6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008fe8:	4ad2      	ldr	r2, [pc, #840]	@ (8009334 <OTM8009A_Init+0x394>)
 8008fea:	4619      	mov	r1, r3
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 fb7d 	bl	80096ec <otm8009a_write_reg>
 8008ff2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4ad1      	ldr	r2, [pc, #836]	@ (800933c <OTM8009A_Init+0x39c>)
 8008ff8:	21c4      	movs	r1, #196	@ 0xc4
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 fb76 	bl	80096ec <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009000:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8009002:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ffbe 	bl	8008f86 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800900a:	2300      	movs	r3, #0
 800900c:	4acc      	ldr	r2, [pc, #816]	@ (8009340 <OTM8009A_Init+0x3a0>)
 800900e:	4628      	mov	r0, r5
 8009010:	4619      	mov	r1, r3
 8009012:	f000 fb6b 	bl	80096ec <otm8009a_write_reg>
 8009016:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009018:	2300      	movs	r3, #0
 800901a:	4aca      	ldr	r2, [pc, #808]	@ (8009344 <OTM8009A_Init+0x3a4>)
 800901c:	21c4      	movs	r1, #196	@ 0xc4
 800901e:	4628      	mov	r0, r5
 8009020:	f000 fb64 	bl	80096ec <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009024:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009026:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009028:	4638      	mov	r0, r7
 800902a:	f7ff ffac 	bl	8008f86 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800902e:	2300      	movs	r3, #0
 8009030:	4ac5      	ldr	r2, [pc, #788]	@ (8009348 <OTM8009A_Init+0x3a8>)
 8009032:	4628      	mov	r0, r5
 8009034:	4619      	mov	r1, r3
 8009036:	f000 fb59 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800903a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800903c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800903e:	4ac3      	ldr	r2, [pc, #780]	@ (800934c <OTM8009A_Init+0x3ac>)
 8009040:	21c5      	movs	r1, #197	@ 0xc5
 8009042:	4628      	mov	r0, r5
 8009044:	f000 fb52 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009048:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800904a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800904c:	4ac0      	ldr	r2, [pc, #768]	@ (8009350 <OTM8009A_Init+0x3b0>)
 800904e:	4619      	mov	r1, r3
 8009050:	4628      	mov	r0, r5
 8009052:	f000 fb4b 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009056:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009058:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800905a:	4abe      	ldr	r2, [pc, #760]	@ (8009354 <OTM8009A_Init+0x3b4>)
 800905c:	21c5      	movs	r1, #197	@ 0xc5
 800905e:	4628      	mov	r0, r5
 8009060:	f000 fb44 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009064:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009066:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009068:	4abb      	ldr	r2, [pc, #748]	@ (8009358 <OTM8009A_Init+0x3b8>)
 800906a:	4619      	mov	r1, r3
 800906c:	4628      	mov	r0, r5
 800906e:	f000 fb3d 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009072:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009074:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009076:	4ab9      	ldr	r2, [pc, #740]	@ (800935c <OTM8009A_Init+0x3bc>)
 8009078:	21c0      	movs	r1, #192	@ 0xc0
 800907a:	4628      	mov	r0, r5
 800907c:	f000 fb36 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009080:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009082:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009084:	4aa9      	ldr	r2, [pc, #676]	@ (800932c <OTM8009A_Init+0x38c>)
 8009086:	4619      	mov	r1, r3
 8009088:	4628      	mov	r0, r5
 800908a:	f000 fb2f 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800908e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009090:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009092:	4ab3      	ldr	r2, [pc, #716]	@ (8009360 <OTM8009A_Init+0x3c0>)
 8009094:	21d9      	movs	r1, #217	@ 0xd9
 8009096:	4628      	mov	r0, r5
 8009098:	f000 fb28 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800909c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800909e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80090a0:	4ab0      	ldr	r2, [pc, #704]	@ (8009364 <OTM8009A_Init+0x3c4>)
 80090a2:	4619      	mov	r1, r3
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 fb21 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80090aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80090ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80090ae:	4aae      	ldr	r2, [pc, #696]	@ (8009368 <OTM8009A_Init+0x3c8>)
 80090b0:	21c1      	movs	r1, #193	@ 0xc1
 80090b2:	4628      	mov	r0, r5
 80090b4:	f000 fb1a 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80090b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80090ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80090bc:	4aab      	ldr	r2, [pc, #684]	@ (800936c <OTM8009A_Init+0x3cc>)
 80090be:	4619      	mov	r1, r3
 80090c0:	4628      	mov	r0, r5
 80090c2:	f000 fb13 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80090c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80090c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80090ca:	4aa9      	ldr	r2, [pc, #676]	@ (8009370 <OTM8009A_Init+0x3d0>)
 80090cc:	21c5      	movs	r1, #197	@ 0xc5
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 fb0c 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80090d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80090d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80090d8:	4aa6      	ldr	r2, [pc, #664]	@ (8009374 <OTM8009A_Init+0x3d4>)
 80090da:	4619      	mov	r1, r3
 80090dc:	4628      	mov	r0, r5
 80090de:	f000 fb05 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80090e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80090e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80090e6:	4a9b      	ldr	r2, [pc, #620]	@ (8009354 <OTM8009A_Init+0x3b4>)
 80090e8:	21c5      	movs	r1, #197	@ 0xc5
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 fafe 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80090f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80090f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80090f4:	4a8d      	ldr	r2, [pc, #564]	@ (800932c <OTM8009A_Init+0x38c>)
 80090f6:	4619      	mov	r1, r3
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 faf7 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80090fe:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009100:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009102:	4a9d      	ldr	r2, [pc, #628]	@ (8009378 <OTM8009A_Init+0x3d8>)
 8009104:	21d8      	movs	r1, #216	@ 0xd8
 8009106:	4628      	mov	r0, r5
 8009108:	f000 faf0 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800910c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800910e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009110:	4a9a      	ldr	r2, [pc, #616]	@ (800937c <OTM8009A_Init+0x3dc>)
 8009112:	4619      	mov	r1, r3
 8009114:	4628      	mov	r0, r5
 8009116:	f000 fae9 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800911a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800911c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800911e:	4a98      	ldr	r2, [pc, #608]	@ (8009380 <OTM8009A_Init+0x3e0>)
 8009120:	21c5      	movs	r1, #197	@ 0xc5
 8009122:	4628      	mov	r0, r5
 8009124:	f000 fae2 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009128:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800912a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800912c:	4a95      	ldr	r2, [pc, #596]	@ (8009384 <OTM8009A_Init+0x3e4>)
 800912e:	4619      	mov	r1, r3
 8009130:	4628      	mov	r0, r5
 8009132:	f000 fadb 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009136:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009138:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800913a:	4a93      	ldr	r2, [pc, #588]	@ (8009388 <OTM8009A_Init+0x3e8>)
 800913c:	21c0      	movs	r1, #192	@ 0xc0
 800913e:	4628      	mov	r0, r5
 8009140:	f000 fad4 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009144:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009146:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009148:	4a90      	ldr	r2, [pc, #576]	@ (800938c <OTM8009A_Init+0x3ec>)
 800914a:	4619      	mov	r1, r3
 800914c:	4628      	mov	r0, r5
 800914e:	f000 facd 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009152:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009154:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009156:	4a8e      	ldr	r2, [pc, #568]	@ (8009390 <OTM8009A_Init+0x3f0>)
 8009158:	21c5      	movs	r1, #197	@ 0xc5
 800915a:	4628      	mov	r0, r5
 800915c:	f000 fac6 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009160:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009162:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009164:	4a8b      	ldr	r2, [pc, #556]	@ (8009394 <OTM8009A_Init+0x3f4>)
 8009166:	4619      	mov	r1, r3
 8009168:	4628      	mov	r0, r5
 800916a:	f000 fabf 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800916e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009170:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009172:	4a89      	ldr	r2, [pc, #548]	@ (8009398 <OTM8009A_Init+0x3f8>)
 8009174:	21c4      	movs	r1, #196	@ 0xc4
 8009176:	4628      	mov	r0, r5
 8009178:	f000 fab8 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800917c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800917e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009180:	4a78      	ldr	r2, [pc, #480]	@ (8009364 <OTM8009A_Init+0x3c4>)
 8009182:	4619      	mov	r1, r3
 8009184:	4628      	mov	r0, r5
 8009186:	f000 fab1 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800918a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800918c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800918e:	4a83      	ldr	r2, [pc, #524]	@ (800939c <OTM8009A_Init+0x3fc>)
 8009190:	21c1      	movs	r1, #193	@ 0xc1
 8009192:	4628      	mov	r0, r5
 8009194:	f000 faaa 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009198:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800919a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800919c:	4a80      	ldr	r2, [pc, #512]	@ (80093a0 <OTM8009A_Init+0x400>)
 800919e:	4619      	mov	r1, r3
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 faa3 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80091a6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80091a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80091aa:	4a7e      	ldr	r2, [pc, #504]	@ (80093a4 <OTM8009A_Init+0x404>)
 80091ac:	21b3      	movs	r1, #179	@ 0xb3
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 fa9c 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80091b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80091b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80091b8:	4a5e      	ldr	r2, [pc, #376]	@ (8009334 <OTM8009A_Init+0x394>)
 80091ba:	4619      	mov	r1, r3
 80091bc:	4628      	mov	r0, r5
 80091be:	f000 fa95 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80091c2:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80091c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80091c6:	4a78      	ldr	r2, [pc, #480]	@ (80093a8 <OTM8009A_Init+0x408>)
 80091c8:	21ce      	movs	r1, #206	@ 0xce
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 fa8e 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80091d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80091d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80091d4:	4a75      	ldr	r2, [pc, #468]	@ (80093ac <OTM8009A_Init+0x40c>)
 80091d6:	4619      	mov	r1, r3
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 fa87 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80091de:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80091e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80091e2:	4a73      	ldr	r2, [pc, #460]	@ (80093b0 <OTM8009A_Init+0x410>)
 80091e4:	21ce      	movs	r1, #206	@ 0xce
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 fa80 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80091ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80091ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80091f0:	4a70      	ldr	r2, [pc, #448]	@ (80093b4 <OTM8009A_Init+0x414>)
 80091f2:	4619      	mov	r1, r3
 80091f4:	4628      	mov	r0, r5
 80091f6:	f000 fa79 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80091fa:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80091fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80091fe:	4a6e      	ldr	r2, [pc, #440]	@ (80093b8 <OTM8009A_Init+0x418>)
 8009200:	21ce      	movs	r1, #206	@ 0xce
 8009202:	4628      	mov	r0, r5
 8009204:	f000 fa72 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009208:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800920a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800920c:	4a6b      	ldr	r2, [pc, #428]	@ (80093bc <OTM8009A_Init+0x41c>)
 800920e:	4619      	mov	r1, r3
 8009210:	4628      	mov	r0, r5
 8009212:	f000 fa6b 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009216:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009218:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800921a:	4a69      	ldr	r2, [pc, #420]	@ (80093c0 <OTM8009A_Init+0x420>)
 800921c:	21cf      	movs	r1, #207	@ 0xcf
 800921e:	4628      	mov	r0, r5
 8009220:	f000 fa64 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009224:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009226:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009228:	4a66      	ldr	r2, [pc, #408]	@ (80093c4 <OTM8009A_Init+0x424>)
 800922a:	4619      	mov	r1, r3
 800922c:	4628      	mov	r0, r5
 800922e:	f000 fa5d 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009232:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009234:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009236:	4a64      	ldr	r2, [pc, #400]	@ (80093c8 <OTM8009A_Init+0x428>)
 8009238:	21cf      	movs	r1, #207	@ 0xcf
 800923a:	4628      	mov	r0, r5
 800923c:	f000 fa56 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009240:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009242:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009244:	4a3b      	ldr	r2, [pc, #236]	@ (8009334 <OTM8009A_Init+0x394>)
 8009246:	4619      	mov	r1, r3
 8009248:	4628      	mov	r0, r5
 800924a:	f000 fa4f 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800924e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009250:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009252:	4a5e      	ldr	r2, [pc, #376]	@ (80093cc <OTM8009A_Init+0x42c>)
 8009254:	21cb      	movs	r1, #203	@ 0xcb
 8009256:	4628      	mov	r0, r5
 8009258:	f000 fa48 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800925c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800925e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009260:	4a5b      	ldr	r2, [pc, #364]	@ (80093d0 <OTM8009A_Init+0x430>)
 8009262:	4619      	mov	r1, r3
 8009264:	4628      	mov	r0, r5
 8009266:	f000 fa41 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800926a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800926c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800926e:	4a59      	ldr	r2, [pc, #356]	@ (80093d4 <OTM8009A_Init+0x434>)
 8009270:	21cb      	movs	r1, #203	@ 0xcb
 8009272:	4628      	mov	r0, r5
 8009274:	f000 fa3a 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009278:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800927a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800927c:	4a4b      	ldr	r2, [pc, #300]	@ (80093ac <OTM8009A_Init+0x40c>)
 800927e:	4619      	mov	r1, r3
 8009280:	4628      	mov	r0, r5
 8009282:	f000 fa33 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009286:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009288:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800928a:	4a53      	ldr	r2, [pc, #332]	@ (80093d8 <OTM8009A_Init+0x438>)
 800928c:	21cb      	movs	r1, #203	@ 0xcb
 800928e:	4628      	mov	r0, r5
 8009290:	f000 fa2c 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009294:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009296:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009298:	4a46      	ldr	r2, [pc, #280]	@ (80093b4 <OTM8009A_Init+0x414>)
 800929a:	4619      	mov	r1, r3
 800929c:	4628      	mov	r0, r5
 800929e:	f000 fa25 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80092a2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80092a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80092a6:	4a4d      	ldr	r2, [pc, #308]	@ (80093dc <OTM8009A_Init+0x43c>)
 80092a8:	21cb      	movs	r1, #203	@ 0xcb
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 fa1e 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80092b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80092b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80092b4:	4a41      	ldr	r2, [pc, #260]	@ (80093bc <OTM8009A_Init+0x41c>)
 80092b6:	4619      	mov	r1, r3
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 fa17 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80092be:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80092c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80092c2:	4a47      	ldr	r2, [pc, #284]	@ (80093e0 <OTM8009A_Init+0x440>)
 80092c4:	21cb      	movs	r1, #203	@ 0xcb
 80092c6:	4628      	mov	r0, r5
 80092c8:	f000 fa10 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80092cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80092ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80092d0:	4a3c      	ldr	r2, [pc, #240]	@ (80093c4 <OTM8009A_Init+0x424>)
 80092d2:	4619      	mov	r1, r3
 80092d4:	4628      	mov	r0, r5
 80092d6:	f000 fa09 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80092da:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80092dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80092de:	4a41      	ldr	r2, [pc, #260]	@ (80093e4 <OTM8009A_Init+0x444>)
 80092e0:	21cb      	movs	r1, #203	@ 0xcb
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 fa02 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80092e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80092ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80092ec:	4a3e      	ldr	r2, [pc, #248]	@ (80093e8 <OTM8009A_Init+0x448>)
 80092ee:	4619      	mov	r1, r3
 80092f0:	4628      	mov	r0, r5
 80092f2:	f000 f9fb 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80092f6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80092f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80092fa:	4a3c      	ldr	r2, [pc, #240]	@ (80093ec <OTM8009A_Init+0x44c>)
 80092fc:	21cb      	movs	r1, #203	@ 0xcb
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f9f4 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009304:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009306:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009308:	4a39      	ldr	r2, [pc, #228]	@ (80093f0 <OTM8009A_Init+0x450>)
 800930a:	4619      	mov	r1, r3
 800930c:	4628      	mov	r0, r5
 800930e:	f000 f9ed 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009312:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009314:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009316:	4a37      	ldr	r2, [pc, #220]	@ (80093f4 <OTM8009A_Init+0x454>)
 8009318:	21cb      	movs	r1, #203	@ 0xcb
 800931a:	4628      	mov	r0, r5
 800931c:	f000 f9e6 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009320:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009322:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009324:	4a03      	ldr	r2, [pc, #12]	@ (8009334 <OTM8009A_Init+0x394>)
 8009326:	4619      	mov	r1, r3
 8009328:	4628      	mov	r0, r5
 800932a:	e065      	b.n	80093f8 <OTM8009A_Init+0x458>
 800932c:	0802c4d5 	.word	0x0802c4d5
 8009330:	0802c4d1 	.word	0x0802c4d1
 8009334:	0802c4d6 	.word	0x0802c4d6
 8009338:	0802c4cf 	.word	0x0802c4cf
 800933c:	0802c4d7 	.word	0x0802c4d7
 8009340:	0802c4d8 	.word	0x0802c4d8
 8009344:	0802c4d9 	.word	0x0802c4d9
 8009348:	0802c4da 	.word	0x0802c4da
 800934c:	0802c4db 	.word	0x0802c4db
 8009350:	0802c4dc 	.word	0x0802c4dc
 8009354:	0802c4dd 	.word	0x0802c4dd
 8009358:	0802c4de 	.word	0x0802c4de
 800935c:	0802c4df 	.word	0x0802c4df
 8009360:	0802c4e0 	.word	0x0802c4e0
 8009364:	0802c4e3 	.word	0x0802c4e3
 8009368:	0802c4e4 	.word	0x0802c4e4
 800936c:	0802c4e5 	.word	0x0802c4e5
 8009370:	0802c4e6 	.word	0x0802c4e6
 8009374:	0802c4e7 	.word	0x0802c4e7
 8009378:	0802c4cd 	.word	0x0802c4cd
 800937c:	0802c4e8 	.word	0x0802c4e8
 8009380:	0802c4e9 	.word	0x0802c4e9
 8009384:	0802c4ea 	.word	0x0802c4ea
 8009388:	0802c4eb 	.word	0x0802c4eb
 800938c:	0802c4ec 	.word	0x0802c4ec
 8009390:	0802c4ed 	.word	0x0802c4ed
 8009394:	0802c4e1 	.word	0x0802c4e1
 8009398:	0802c4ee 	.word	0x0802c4ee
 800939c:	0802c4ef 	.word	0x0802c4ef
 80093a0:	0802c4f0 	.word	0x0802c4f0
 80093a4:	0802c4cb 	.word	0x0802c4cb
 80093a8:	0802c4c5 	.word	0x0802c4c5
 80093ac:	0802c4f1 	.word	0x0802c4f1
 80093b0:	0802c4b7 	.word	0x0802c4b7
 80093b4:	0802c4f2 	.word	0x0802c4f2
 80093b8:	0802c4a9 	.word	0x0802c4a9
 80093bc:	0802c4f3 	.word	0x0802c4f3
 80093c0:	0802c49f 	.word	0x0802c49f
 80093c4:	0802c4f4 	.word	0x0802c4f4
 80093c8:	0802c501 	.word	0x0802c501
 80093cc:	0802c495 	.word	0x0802c495
 80093d0:	0802c4f5 	.word	0x0802c4f5
 80093d4:	0802c486 	.word	0x0802c486
 80093d8:	0802c477 	.word	0x0802c477
 80093dc:	0802c46d 	.word	0x0802c46d
 80093e0:	0802c45e 	.word	0x0802c45e
 80093e4:	0802c44f 	.word	0x0802c44f
 80093e8:	0802c4f6 	.word	0x0802c4f6
 80093ec:	0802c445 	.word	0x0802c445
 80093f0:	0802c4f7 	.word	0x0802c4f7
 80093f4:	0802c43b 	.word	0x0802c43b
 80093f8:	f000 f978 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80093fc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80093fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009400:	4a8e      	ldr	r2, [pc, #568]	@ (800963c <OTM8009A_Init+0x69c>)
 8009402:	21cc      	movs	r1, #204	@ 0xcc
 8009404:	4628      	mov	r0, r5
 8009406:	f000 f971 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800940a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800940c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800940e:	4a8c      	ldr	r2, [pc, #560]	@ (8009640 <OTM8009A_Init+0x6a0>)
 8009410:	4619      	mov	r1, r3
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f96a 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009418:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800941a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800941c:	4a89      	ldr	r2, [pc, #548]	@ (8009644 <OTM8009A_Init+0x6a4>)
 800941e:	21cc      	movs	r1, #204	@ 0xcc
 8009420:	4628      	mov	r0, r5
 8009422:	f000 f963 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009426:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009428:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800942a:	4a87      	ldr	r2, [pc, #540]	@ (8009648 <OTM8009A_Init+0x6a8>)
 800942c:	4619      	mov	r1, r3
 800942e:	4628      	mov	r0, r5
 8009430:	f000 f95c 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009434:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009436:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009438:	4a84      	ldr	r2, [pc, #528]	@ (800964c <OTM8009A_Init+0x6ac>)
 800943a:	21cc      	movs	r1, #204	@ 0xcc
 800943c:	4628      	mov	r0, r5
 800943e:	f000 f955 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009442:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009444:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009446:	4a82      	ldr	r2, [pc, #520]	@ (8009650 <OTM8009A_Init+0x6b0>)
 8009448:	4619      	mov	r1, r3
 800944a:	4628      	mov	r0, r5
 800944c:	f000 f94e 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009450:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009452:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009454:	4a7f      	ldr	r2, [pc, #508]	@ (8009654 <OTM8009A_Init+0x6b4>)
 8009456:	21cc      	movs	r1, #204	@ 0xcc
 8009458:	4628      	mov	r0, r5
 800945a:	f000 f947 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800945e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009460:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009462:	4a7d      	ldr	r2, [pc, #500]	@ (8009658 <OTM8009A_Init+0x6b8>)
 8009464:	4619      	mov	r1, r3
 8009466:	4628      	mov	r0, r5
 8009468:	f000 f940 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800946c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800946e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009470:	4a7a      	ldr	r2, [pc, #488]	@ (800965c <OTM8009A_Init+0x6bc>)
 8009472:	21cc      	movs	r1, #204	@ 0xcc
 8009474:	4628      	mov	r0, r5
 8009476:	f000 f939 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800947a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800947c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800947e:	4a78      	ldr	r2, [pc, #480]	@ (8009660 <OTM8009A_Init+0x6c0>)
 8009480:	4619      	mov	r1, r3
 8009482:	4628      	mov	r0, r5
 8009484:	f000 f932 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009488:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800948a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800948c:	4a75      	ldr	r2, [pc, #468]	@ (8009664 <OTM8009A_Init+0x6c4>)
 800948e:	21cc      	movs	r1, #204	@ 0xcc
 8009490:	4628      	mov	r0, r5
 8009492:	f000 f92b 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009496:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009498:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800949a:	4a73      	ldr	r2, [pc, #460]	@ (8009668 <OTM8009A_Init+0x6c8>)
 800949c:	4619      	mov	r1, r3
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 f924 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80094a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80094a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80094a8:	4a70      	ldr	r2, [pc, #448]	@ (800966c <OTM8009A_Init+0x6cc>)
 80094aa:	21c5      	movs	r1, #197	@ 0xc5
 80094ac:	4628      	mov	r0, r5
 80094ae:	f000 f91d 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80094b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80094b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80094b6:	4a6e      	ldr	r2, [pc, #440]	@ (8009670 <OTM8009A_Init+0x6d0>)
 80094b8:	4619      	mov	r1, r3
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 f916 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80094c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80094c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80094c4:	4a6b      	ldr	r2, [pc, #428]	@ (8009674 <OTM8009A_Init+0x6d4>)
 80094c6:	21f5      	movs	r1, #245	@ 0xf5
 80094c8:	4628      	mov	r0, r5
 80094ca:	f000 f90f 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80094ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80094d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80094d2:	4a69      	ldr	r2, [pc, #420]	@ (8009678 <OTM8009A_Init+0x6d8>)
 80094d4:	4619      	mov	r1, r3
 80094d6:	4628      	mov	r0, r5
 80094d8:	f000 f908 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80094dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80094de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80094e0:	4a66      	ldr	r2, [pc, #408]	@ (800967c <OTM8009A_Init+0x6dc>)
 80094e2:	21c6      	movs	r1, #198	@ 0xc6
 80094e4:	4628      	mov	r0, r5
 80094e6:	f000 f901 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80094ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80094ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80094ee:	4a64      	ldr	r2, [pc, #400]	@ (8009680 <OTM8009A_Init+0x6e0>)
 80094f0:	4619      	mov	r1, r3
 80094f2:	4628      	mov	r0, r5
 80094f4:	f000 f8fa 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80094f8:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80094fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80094fc:	4a61      	ldr	r2, [pc, #388]	@ (8009684 <OTM8009A_Init+0x6e4>)
 80094fe:	21ff      	movs	r1, #255	@ 0xff
 8009500:	4628      	mov	r0, r5
 8009502:	f000 f8f3 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009506:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009508:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800950a:	4a5d      	ldr	r2, [pc, #372]	@ (8009680 <OTM8009A_Init+0x6e0>)
 800950c:	4619      	mov	r1, r3
 800950e:	4628      	mov	r0, r5
 8009510:	f000 f8ec 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009514:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009516:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009518:	4a59      	ldr	r2, [pc, #356]	@ (8009680 <OTM8009A_Init+0x6e0>)
 800951a:	4619      	mov	r1, r3
 800951c:	4628      	mov	r0, r5
 800951e:	f000 f8e5 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009522:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009524:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009526:	4a58      	ldr	r2, [pc, #352]	@ (8009688 <OTM8009A_Init+0x6e8>)
 8009528:	21e1      	movs	r1, #225	@ 0xe1
 800952a:	4628      	mov	r0, r5
 800952c:	f000 f8de 	bl	80096ec <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009530:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009532:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009534:	4a52      	ldr	r2, [pc, #328]	@ (8009680 <OTM8009A_Init+0x6e0>)
 8009536:	4619      	mov	r1, r3
 8009538:	4628      	mov	r0, r5
 800953a:	f000 f8d7 	bl	80096ec <otm8009a_write_reg>
 800953e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8009540:	2310      	movs	r3, #16
 8009542:	4a52      	ldr	r2, [pc, #328]	@ (800968c <OTM8009A_Init+0x6ec>)
 8009544:	21e2      	movs	r1, #226	@ 0xe2
 8009546:	4628      	mov	r0, r5
 8009548:	f000 f8d0 	bl	80096ec <otm8009a_write_reg>
 800954c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800954e:	2300      	movs	r3, #0
 8009550:	4a4f      	ldr	r2, [pc, #316]	@ (8009690 <OTM8009A_Init+0x6f0>)
 8009552:	2111      	movs	r1, #17
 8009554:	4628      	mov	r0, r5
 8009556:	f000 f8c9 	bl	80096ec <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800955a:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800955c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800955e:	4638      	mov	r0, r7
 8009560:	f7ff fd11 	bl	8008f86 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8009564:	4f4b      	ldr	r7, [pc, #300]	@ (8009694 <OTM8009A_Init+0x6f4>)
 8009566:	2e00      	cmp	r6, #0
 8009568:	d061      	beq.n	800962e <OTM8009A_Init+0x68e>
 800956a:	2e02      	cmp	r6, #2
 800956c:	d107      	bne.n	800957e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800956e:	2300      	movs	r3, #0
 8009570:	4a49      	ldr	r2, [pc, #292]	@ (8009698 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8009572:	213a      	movs	r1, #58	@ 0x3a
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f8b9 	bl	80096ec <otm8009a_write_reg>
 800957a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800957c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800957e:	f1b8 0f01 	cmp.w	r8, #1
 8009582:	d157      	bne.n	8009634 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8009584:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009586:	f10d 0207 	add.w	r2, sp, #7
 800958a:	2136      	movs	r1, #54	@ 0x36
 800958c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800958e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009592:	2300      	movs	r3, #0
 8009594:	f000 f8aa 	bl	80096ec <otm8009a_write_reg>
 8009598:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800959a:	2304      	movs	r3, #4
 800959c:	4a3f      	ldr	r2, [pc, #252]	@ (800969c <OTM8009A_Init+0x6fc>)
 800959e:	212a      	movs	r1, #42	@ 0x2a
 80095a0:	4628      	mov	r0, r5
 80095a2:	f000 f8a3 	bl	80096ec <otm8009a_write_reg>
 80095a6:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80095a8:	2304      	movs	r3, #4
 80095aa:	4a3d      	ldr	r2, [pc, #244]	@ (80096a0 <OTM8009A_Init+0x700>)
 80095ac:	212b      	movs	r1, #43	@ 0x2b
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f89c 	bl	80096ec <otm8009a_write_reg>
 80095b4:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80095b6:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80095ba:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80095bc:	2300      	movs	r3, #0
 80095be:	4a39      	ldr	r2, [pc, #228]	@ (80096a4 <OTM8009A_Init+0x704>)
 80095c0:	2151      	movs	r1, #81	@ 0x51
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 f892 	bl	80096ec <otm8009a_write_reg>
 80095c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80095ca:	4633      	mov	r3, r6
 80095cc:	4a36      	ldr	r2, [pc, #216]	@ (80096a8 <OTM8009A_Init+0x708>)
 80095ce:	2153      	movs	r1, #83	@ 0x53
 80095d0:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80095d2:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80095d4:	f000 f88a 	bl	80096ec <otm8009a_write_reg>
 80095d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80095da:	4633      	mov	r3, r6
 80095dc:	4a33      	ldr	r2, [pc, #204]	@ (80096ac <OTM8009A_Init+0x70c>)
 80095de:	2155      	movs	r1, #85	@ 0x55
 80095e0:	4628      	mov	r0, r5
 80095e2:	f000 f883 	bl	80096ec <otm8009a_write_reg>
 80095e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80095e8:	4633      	mov	r3, r6
 80095ea:	4a31      	ldr	r2, [pc, #196]	@ (80096b0 <OTM8009A_Init+0x710>)
 80095ec:	215e      	movs	r1, #94	@ 0x5e
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 f87c 	bl	80096ec <otm8009a_write_reg>
 80095f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80095f6:	4633      	mov	r3, r6
 80095f8:	4a2e      	ldr	r2, [pc, #184]	@ (80096b4 <OTM8009A_Init+0x714>)
 80095fa:	2129      	movs	r1, #41	@ 0x29
 80095fc:	4628      	mov	r0, r5
 80095fe:	f000 f875 	bl	80096ec <otm8009a_write_reg>
 8009602:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009604:	4633      	mov	r3, r6
 8009606:	4631      	mov	r1, r6
 8009608:	4a1d      	ldr	r2, [pc, #116]	@ (8009680 <OTM8009A_Init+0x6e0>)
 800960a:	4628      	mov	r0, r5
 800960c:	f000 f86e 	bl	80096ec <otm8009a_write_reg>
 8009610:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8009612:	4633      	mov	r3, r6
 8009614:	4a28      	ldr	r2, [pc, #160]	@ (80096b8 <OTM8009A_Init+0x718>)
 8009616:	212c      	movs	r1, #44	@ 0x2c
 8009618:	4628      	mov	r0, r5
 800961a:	f000 f867 	bl	80096ec <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800961e:	42c4      	cmn	r4, r0
}
 8009620:	bf14      	ite	ne
 8009622:	f04f 30ff 	movne.w	r0, #4294967295
 8009626:	4630      	moveq	r0, r6
 8009628:	b002      	add	sp, #8
 800962a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800962e:	4633      	mov	r3, r6
 8009630:	4a22      	ldr	r2, [pc, #136]	@ (80096bc <OTM8009A_Init+0x71c>)
 8009632:	e79e      	b.n	8009572 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8009634:	2300      	movs	r3, #0
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	e7bf      	b.n	80095ba <OTM8009A_Init+0x61a>
 800963a:	bf00      	nop
 800963c:	0802c431 	.word	0x0802c431
 8009640:	0802c4f5 	.word	0x0802c4f5
 8009644:	0802c422 	.word	0x0802c422
 8009648:	0802c4f1 	.word	0x0802c4f1
 800964c:	0802c413 	.word	0x0802c413
 8009650:	0802c4f2 	.word	0x0802c4f2
 8009654:	0802c409 	.word	0x0802c409
 8009658:	0802c4f3 	.word	0x0802c4f3
 800965c:	0802c3fa 	.word	0x0802c3fa
 8009660:	0802c4f4 	.word	0x0802c4f4
 8009664:	0802c3eb 	.word	0x0802c3eb
 8009668:	0802c4e1 	.word	0x0802c4e1
 800966c:	0802c502 	.word	0x0802c502
 8009670:	0802c503 	.word	0x0802c503
 8009674:	0802c504 	.word	0x0802c504
 8009678:	0802c505 	.word	0x0802c505
 800967c:	0802c506 	.word	0x0802c506
 8009680:	0802c4d5 	.word	0x0802c4d5
 8009684:	0802c3e8 	.word	0x0802c3e8
 8009688:	0802c3d8 	.word	0x0802c3d8
 800968c:	0802c3c8 	.word	0x0802c3c8
 8009690:	0802c4f8 	.word	0x0802c4f8
 8009694:	2400e4ec 	.word	0x2400e4ec
 8009698:	0802c4f9 	.word	0x0802c4f9
 800969c:	0802c50b 	.word	0x0802c50b
 80096a0:	0802c507 	.word	0x0802c507
 80096a4:	0802c4fb 	.word	0x0802c4fb
 80096a8:	0802c4fc 	.word	0x0802c4fc
 80096ac:	0802c4fd 	.word	0x0802c4fd
 80096b0:	0802c4fe 	.word	0x0802c4fe
 80096b4:	0802c4ff 	.word	0x0802c4ff
 80096b8:	0802c500 	.word	0x0802c500
 80096bc:	0802c4fa 	.word	0x0802c4fa

080096c0 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80096c0:	b160      	cbz	r0, 80096dc <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80096c2:	684b      	ldr	r3, [r1, #4]
 80096c4:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80096c6:	688b      	ldr	r3, [r1, #8]
 80096c8:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80096ca:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80096cc:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80096ce:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80096d0:	4b04      	ldr	r3, [pc, #16]	@ (80096e4 <OTM8009A_RegisterBusIO+0x24>)
 80096d2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80096d4:	4b04      	ldr	r3, [pc, #16]	@ (80096e8 <OTM8009A_RegisterBusIO+0x28>)
 80096d6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 80096d8:	2000      	movs	r0, #0
 80096da:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	08008f6b 	.word	0x08008f6b
 80096e8:	08008f79 	.word	0x08008f79

080096ec <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80096ec:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80096ee:	6804      	ldr	r4, [r0, #0]
 80096f0:	6880      	ldr	r0, [r0, #8]
 80096f2:	46a4      	mov	ip, r4
}
 80096f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80096f8:	4760      	bx	ip
	...

080096fc <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80096fc:	4a10      	ldr	r2, [pc, #64]	@ (8009740 <BSP_I2C4_DeInit+0x44>)
{
 80096fe:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8009700:	6813      	ldr	r3, [r2, #0]
 8009702:	3b01      	subs	r3, #1
 8009704:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8009706:	b10b      	cbz	r3, 800970c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8009708:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800970a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800970c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009710:	480c      	ldr	r0, [pc, #48]	@ (8009744 <BSP_I2C4_DeInit+0x48>)
 8009712:	f001 fe3d 	bl	800b390 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8009716:	480b      	ldr	r0, [pc, #44]	@ (8009744 <BSP_I2C4_DeInit+0x48>)
 8009718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800971c:	f001 fe38 	bl	800b390 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8009720:	4a09      	ldr	r2, [pc, #36]	@ (8009748 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009722:	480a      	ldr	r0, [pc, #40]	@ (800974c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8009724:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8009728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800972c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009730:	f002 f87e 	bl	800b830 <HAL_I2C_DeInit>
 8009734:	2800      	cmp	r0, #0
 8009736:	d0e7      	beq.n	8009708 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8009738:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800973c:	e7e5      	b.n	800970a <BSP_I2C4_DeInit+0xe>
 800973e:	bf00      	nop
 8009740:	2400ef50 	.word	0x2400ef50
 8009744:	58020c00 	.word	0x58020c00
 8009748:	58024400 	.word	0x58024400
 800974c:	2400e4f8 	.word	0x2400e4f8

08009750 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009750:	2300      	movs	r3, #0
 8009752:	2201      	movs	r2, #1
{
 8009754:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8009756:	6041      	str	r1, [r0, #4]
{
 8009758:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800975a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800975c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8009760:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009764:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009768:	f002 f80c 	bl	800b784 <HAL_I2C_Init>
 800976c:	4601      	mov	r1, r0
 800976e:	b108      	cbz	r0, 8009774 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8009770:	2001      	movs	r0, #1
}
 8009772:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009774:	4620      	mov	r0, r4
 8009776:	f002 fa32 	bl	800bbde <HAL_I2CEx_ConfigAnalogFilter>
 800977a:	4601      	mov	r1, r0
 800977c:	2800      	cmp	r0, #0
 800977e:	d1f7      	bne.n	8009770 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009780:	4620      	mov	r0, r4
 8009782:	f002 fa52 	bl	800bc2a <HAL_I2CEx_ConfigDigitalFilter>
 8009786:	3800      	subs	r0, #0
 8009788:	bf18      	it	ne
 800978a:	2001      	movne	r0, #1
 800978c:	e7f1      	b.n	8009772 <MX_I2C4_Init+0x22>
	...

08009790 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8009790:	4ba1      	ldr	r3, [pc, #644]	@ (8009a18 <BSP_I2C4_Init+0x288>)
 8009792:	48a2      	ldr	r0, [pc, #648]	@ (8009a1c <BSP_I2C4_Init+0x28c>)
{
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8009798:	6003      	str	r3, [r0, #0]
{
 800979a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 800979c:	4ba0      	ldr	r3, [pc, #640]	@ (8009a20 <BSP_I2C4_Init+0x290>)
 800979e:	681c      	ldr	r4, [r3, #0]
 80097a0:	b11c      	cbz	r4, 80097aa <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80097a2:	2000      	movs	r0, #0
}
 80097a4:	b013      	add	sp, #76	@ 0x4c
 80097a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80097aa:	2201      	movs	r2, #1
 80097ac:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80097ae:	f002 fa11 	bl	800bbd4 <HAL_I2C_GetState>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d1f5      	bne.n	80097a2 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80097b6:	4d9b      	ldr	r5, [pc, #620]	@ (8009a24 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80097b8:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80097bc:	2702      	movs	r7, #2
 80097be:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80097c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80097c4:	a90d      	add	r1, sp, #52	@ 0x34
 80097c6:	4898      	ldr	r0, [pc, #608]	@ (8009a28 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80097c8:	f043 0308 	orr.w	r3, r3, #8
 80097cc:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80097d0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80097da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80097dc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80097e0:	f043 0308 	orr.w	r3, r3, #8
 80097e4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80097e8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80097ec:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80097ee:	f003 0308 	and.w	r3, r3, #8
 80097f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80097f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80097fa:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80097fe:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009802:	f001 fcdd 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8009806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800980a:	a90d      	add	r1, sp, #52	@ 0x34
 800980c:	4886      	ldr	r0, [pc, #536]	@ (8009a28 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800980e:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009810:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009814:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009818:	f001 fcd2 	bl	800b1c0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800981c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8009820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009824:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8009828:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800982c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009830:	930c      	str	r3, [sp, #48]	@ 0x30
 8009832:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8009834:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8009838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800983c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8009840:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8009844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009848:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800984c:	f004 fcd8 	bl	800e200 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009850:	2800      	cmp	r0, #0
 8009852:	d06f      	beq.n	8009934 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009854:	4b75      	ldr	r3, [pc, #468]	@ (8009a2c <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8009856:	4622      	mov	r2, r4
 8009858:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800985a:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800985e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009862:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8009a34 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009866:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800986a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800986e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8009872:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009874:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009878:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 800987c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8009880:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8009884:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009886:	4b6a      	ldr	r3, [pc, #424]	@ (8009a30 <BSP_I2C4_Init+0x2a0>)
 8009888:	681b      	ldr	r3, [r3, #0]
{
 800988a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800988c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8009890:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8009894:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009898:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800989c:	d35d      	bcc.n	800995a <BSP_I2C4_Init+0x1ca>
 800989e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80098a0:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80098a2:	9d00      	ldr	r5, [sp, #0]
 80098a4:	42bd      	cmp	r5, r7
 80098a6:	d852      	bhi.n	800994e <BSP_I2C4_Init+0x1be>
 80098a8:	42be      	cmp	r6, r7
 80098aa:	d350      	bcc.n	800994e <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 80098ac:	4591      	cmp	r9, r2
 80098ae:	d04e      	beq.n	800994e <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80098b0:	2514      	movs	r5, #20
 80098b2:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 80098b6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80098b8:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80098ba:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80098be:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80098c0:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80098c4:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80098c8:	d93e      	bls.n	8009948 <BSP_I2C4_Init+0x1b8>
 80098ca:	4a59      	ldr	r2, [pc, #356]	@ (8009a30 <BSP_I2C4_Init+0x2a0>)
 80098cc:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80098ce:	4b58      	ldr	r3, [pc, #352]	@ (8009a30 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80098d0:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	4956      	ldr	r1, [pc, #344]	@ (8009a34 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80098da:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80098dc:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80098de:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80098e0:	0043      	lsls	r3, r0, #1
 80098e2:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 80098e6:	e9cd 2501 	strd	r2, r5, [sp, #4]
 80098ea:	f10b 0b01 	add.w	fp, fp, #1
 80098ee:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 80098f2:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80098f6:	9508      	str	r5, [sp, #32]
 80098f8:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80098fa:	9b05      	ldr	r3, [sp, #20]
 80098fc:	429f      	cmp	r7, r3
 80098fe:	d138      	bne.n	8009972 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8009900:	9b01      	ldr	r3, [sp, #4]
 8009902:	2b7f      	cmp	r3, #127	@ 0x7f
 8009904:	d816      	bhi.n	8009934 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009906:	2114      	movs	r1, #20
 8009908:	9a01      	ldr	r2, [sp, #4]
 800990a:	4b4a      	ldr	r3, [pc, #296]	@ (8009a34 <BSP_I2C4_Init+0x2a4>)
 800990c:	434a      	muls	r2, r1
 800990e:	1899      	adds	r1, r3, r2
 8009910:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009912:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009914:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009918:	684b      	ldr	r3, [r1, #4]
 800991a:	051b      	lsls	r3, r3, #20
 800991c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009920:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009922:	688b      	ldr	r3, [r1, #8]
 8009924:	041b      	lsls	r3, r3, #16
 8009926:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800992a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800992c:	68cb      	ldr	r3, [r1, #12]
 800992e:	021b      	lsls	r3, r3, #8
 8009930:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009932:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009934:	4621      	mov	r1, r4
 8009936:	4839      	ldr	r0, [pc, #228]	@ (8009a1c <BSP_I2C4_Init+0x28c>)
 8009938:	f7ff ff0a 	bl	8009750 <MX_I2C4_Init>
 800993c:	2800      	cmp	r0, #0
 800993e:	f43f af30 	beq.w	80097a2 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8009942:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009946:	e72d      	b.n	80097a4 <BSP_I2C4_Init+0x14>
 8009948:	4691      	mov	r9, r2
 800994a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800994e:	f10e 0e01 	add.w	lr, lr, #1
 8009952:	440f      	add	r7, r1
 8009954:	f1be 0f10 	cmp.w	lr, #16
 8009958:	d1a3      	bne.n	80098a2 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800995a:	f1bc 0f10 	cmp.w	ip, #16
 800995e:	4488      	add	r8, r1
 8009960:	d196      	bne.n	8009890 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009962:	3201      	adds	r2, #1
 8009964:	4401      	add	r1, r0
 8009966:	2a10      	cmp	r2, #16
 8009968:	d18f      	bne.n	800988a <BSP_I2C4_Init+0xfa>
 800996a:	f1ba 0f00 	cmp.w	sl, #0
 800996e:	d1ac      	bne.n	80098ca <BSP_I2C4_Init+0x13a>
 8009970:	e7ad      	b.n	80098ce <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009972:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009974:	f04f 0c00 	mov.w	ip, #0
 8009978:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800997a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800997e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009980:	441d      	add	r5, r3
 8009982:	441e      	add	r6, r3
 8009984:	9503      	str	r5, [sp, #12]
 8009986:	ebab 0503 	sub.w	r5, fp, r3
 800998a:	9607      	str	r6, [sp, #28]
 800998c:	006d      	lsls	r5, r5, #1
 800998e:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009990:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009992:	f240 5214 	movw	r2, #1300	@ 0x514
 8009996:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800999a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800999e:	4295      	cmp	r5, r2
 80099a0:	d92f      	bls.n	8009a02 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80099a2:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80099a6:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80099aa:	d22a      	bcs.n	8009a02 <BSP_I2C4_Init+0x272>
 80099ac:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80099ae:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80099b2:	f8dd 9000 	ldr.w	r9, [sp]
 80099b6:	442e      	add	r6, r5
 80099b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80099bc:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 80099c0:	f240 4212 	movw	r2, #1042	@ 0x412
 80099c4:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80099c8:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80099cc:	4592      	cmp	sl, r2
 80099ce:	d811      	bhi.n	80099f4 <BSP_I2C4_Init+0x264>
 80099d0:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 80099d4:	d30e      	bcc.n	80099f4 <BSP_I2C4_Init+0x264>
 80099d6:	4580      	cmp	r8, r0
 80099d8:	d90c      	bls.n	80099f4 <BSP_I2C4_Init+0x264>
              error = -error;
 80099da:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80099de:	bf28      	it	cs
 80099e0:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80099e2:	9a02      	ldr	r2, [sp, #8]
 80099e4:	4592      	cmp	sl, r2
 80099e6:	d205      	bcs.n	80099f4 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80099e8:	9a04      	ldr	r2, [sp, #16]
 80099ea:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80099ec:	9a06      	ldr	r2, [sp, #24]
 80099ee:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 80099f2:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80099f4:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 80099f8:	4498      	add	r8, r3
 80099fa:	441e      	add	r6, r3
 80099fc:	eba9 0903 	sub.w	r9, r9, r3
 8009a00:	d1dc      	bne.n	80099bc <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009a02:	9a00      	ldr	r2, [sp, #0]
 8009a04:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8009a08:	441d      	add	r5, r3
 8009a0a:	eba2 0203 	sub.w	r2, r2, r3
 8009a0e:	9200      	str	r2, [sp, #0]
 8009a10:	d1bf      	bne.n	8009992 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009a12:	3701      	adds	r7, #1
 8009a14:	3114      	adds	r1, #20
 8009a16:	e770      	b.n	80098fa <BSP_I2C4_Init+0x16a>
 8009a18:	58001c00 	.word	0x58001c00
 8009a1c:	2400e4f8 	.word	0x2400e4f8
 8009a20:	2400ef50 	.word	0x2400ef50
 8009a24:	58024400 	.word	0x58024400
 8009a28:	58020c00 	.word	0x58020c00
 8009a2c:	3b9aca00 	.word	0x3b9aca00
 8009a30:	2400e54c 	.word	0x2400e54c
 8009a34:	2400e550 	.word	0x2400e550

08009a38 <BSP_I2C4_WriteReg>:
{
 8009a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009a3a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8009a3e:	9200      	str	r2, [sp, #0]
 8009a40:	460a      	mov	r2, r1
 8009a42:	4601      	mov	r1, r0
 8009a44:	4808      	ldr	r0, [pc, #32]	@ (8009a68 <BSP_I2C4_WriteReg+0x30>)
 8009a46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f001 ff0a 	bl	800b864 <HAL_I2C_Mem_Write>
 8009a50:	b140      	cbz	r0, 8009a64 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009a52:	4805      	ldr	r0, [pc, #20]	@ (8009a68 <BSP_I2C4_WriteReg+0x30>)
 8009a54:	f002 f8c1 	bl	800bbda <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009a58:	2804      	cmp	r0, #4
 8009a5a:	bf14      	ite	ne
 8009a5c:	f06f 0003 	mvnne.w	r0, #3
 8009a60:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8009a64:	b004      	add	sp, #16
 8009a66:	bd10      	pop	{r4, pc}
 8009a68:	2400e4f8 	.word	0x2400e4f8

08009a6c <BSP_I2C4_ReadReg>:
{
 8009a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009a6e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8009a72:	9200      	str	r2, [sp, #0]
 8009a74:	460a      	mov	r2, r1
 8009a76:	4601      	mov	r1, r0
 8009a78:	4808      	ldr	r0, [pc, #32]	@ (8009a9c <BSP_I2C4_ReadReg+0x30>)
 8009a7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f001 ffca 	bl	800ba18 <HAL_I2C_Mem_Read>
 8009a84:	b140      	cbz	r0, 8009a98 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009a86:	4805      	ldr	r0, [pc, #20]	@ (8009a9c <BSP_I2C4_ReadReg+0x30>)
 8009a88:	f002 f8a7 	bl	800bbda <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009a8c:	2804      	cmp	r0, #4
 8009a8e:	bf14      	ite	ne
 8009a90:	f06f 0003 	mvnne.w	r0, #3
 8009a94:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8009a98:	b004      	add	sp, #16
 8009a9a:	bd10      	pop	{r4, pc}
 8009a9c:	2400e4f8 	.word	0x2400e4f8

08009aa0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8009aa0:	f000 bd08 	b.w	800a4b4 <HAL_GetTick>

08009aa4 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8009aa4:	4a09      	ldr	r2, [pc, #36]	@ (8009acc <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009aa6:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8009aaa:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8009aac:	684a      	ldr	r2, [r1, #4]
 8009aae:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8009ab4:	688a      	ldr	r2, [r1, #8]
 8009ab6:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8009ab8:	680a      	ldr	r2, [r1, #0]
 8009aba:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009abc:	2200      	movs	r2, #0
 8009abe:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8009ac2:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8009ac4:	68ca      	ldr	r2, [r1, #12]
 8009ac6:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8009ac8:	f003 bcc4 	b.w	800d454 <HAL_QSPI_Init>
 8009acc:	52005000 	.word	0x52005000

08009ad0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8009ad0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8009ad2:	b988      	cbnz	r0, 8009af8 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8009b00 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8009ad6:	480b      	ldr	r0, [pc, #44]	@ (8009b04 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8009ad8:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009ada:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8009adc:	b94b      	cbnz	r3, 8009af2 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009ade:	f7ff f9bc 	bl	8008e5a <MT25TL01G_EnableMemoryMappedModeSTR>
 8009ae2:	b110      	cbz	r0, 8009aea <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ae4:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8009ae8:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8009aea:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8009aec:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8009aee:	7023      	strb	r3, [r4, #0]
 8009af0:	e7fa      	b.n	8009ae8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009af2:	f7ff f968 	bl	8008dc6 <MT25TL01G_EnableMemoryMappedModeDTR>
 8009af6:	e7f4      	b.n	8009ae2 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8009af8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009afc:	e7f4      	b.n	8009ae8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8009afe:	bf00      	nop
 8009b00:	2400ef54 	.word	0x2400ef54
 8009b04:	240003c8 	.word	0x240003c8

08009b08 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8009b0e:	bb30      	cbnz	r0, 8009b5e <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8009b10:	4d17      	ldr	r5, [pc, #92]	@ (8009b70 <BSP_QSPI_ConfigFlash+0x68>)
 8009b12:	782b      	ldrb	r3, [r5, #0]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d025      	beq.n	8009b64 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009b18:	fab2 f382 	clz	r3, r2
 8009b1c:	4e15      	ldr	r6, [pc, #84]	@ (8009b74 <BSP_QSPI_ConfigFlash+0x6c>)
 8009b1e:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8009b20:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8009b26:	f003 fc95 	bl	800d454 <HAL_QSPI_Init>
 8009b2a:	b9f0      	cbnz	r0, 8009b6a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8009b2c:	786b      	ldrb	r3, [r5, #1]
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d10f      	bne.n	8009b52 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8009b32:	2c03      	cmp	r4, #3
 8009b34:	d105      	bne.n	8009b42 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8009b36:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8009b38:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8009b3a:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8009b3c:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8009b3e:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8009b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7ff f923 	bl	8008d8e <MT25TL01G_ExitQPIMode>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d0f4      	beq.n	8009b36 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b4c:	f06f 0004 	mvn.w	r0, #4
 8009b50:	e7f6      	b.n	8009b40 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8009b52:	2c03      	cmp	r4, #3
 8009b54:	d1ef      	bne.n	8009b36 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7ff f8fd 	bl	8008d56 <MT25TL01G_EnterQPIMode>
 8009b5c:	e7f4      	b.n	8009b48 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8009b5e:	f06f 0001 	mvn.w	r0, #1
 8009b62:	e7ed      	b.n	8009b40 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8009b64:	f06f 0019 	mvn.w	r0, #25
 8009b68:	e7ea      	b.n	8009b40 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8009b6a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009b6e:	e7e7      	b.n	8009b40 <BSP_QSPI_ConfigFlash+0x38>
 8009b70:	2400ef54 	.word	0x2400ef54
 8009b74:	240003c8 	.word	0x240003c8

08009b78 <BSP_QSPI_Init>:
{
 8009b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8009b80:	2800      	cmp	r0, #0
 8009b82:	f040 81ac 	bne.w	8009ede <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8009b86:	4d03      	ldr	r5, [pc, #12]	@ (8009b94 <BSP_QSPI_Init+0x1c>)
 8009b88:	782f      	ldrb	r7, [r5, #0]
 8009b8a:	b12f      	cbz	r7, 8009b98 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8009b8c:	2000      	movs	r0, #0
}
 8009b8e:	b024      	add	sp, #144	@ 0x90
 8009b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b94:	2400ef54 	.word	0x2400ef54
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8009b98:	4bc3      	ldr	r3, [pc, #780]	@ (8009ea8 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009b9a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009b9e:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009ba0:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8009ba2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8009ba6:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009baa:	48c0      	ldr	r0, [pc, #768]	@ (8009eac <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8009bac:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8009bb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bb4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8009bb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009bbc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8009bc0:	9201      	str	r2, [sp, #4]
 8009bc2:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8009bc4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bca:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8009bcc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009bce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009bd2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8009bd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009bd8:	f042 0202 	orr.w	r2, r2, #2
 8009bdc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009be0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009be4:	f002 0202 	and.w	r2, r2, #2
 8009be8:	9202      	str	r2, [sp, #8]
 8009bea:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8009bec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bf4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009bf8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009bfc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8009c00:	9203      	str	r2, [sp, #12]
 8009c02:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8009c04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c08:	f042 0208 	orr.w	r2, r2, #8
 8009c0c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009c10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c14:	f002 0208 	and.w	r2, r2, #8
 8009c18:	9204      	str	r2, [sp, #16]
 8009c1a:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8009c1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c20:	f042 0220 	orr.w	r2, r2, #32
 8009c24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009c28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c2c:	f002 0220 	and.w	r2, r2, #32
 8009c30:	9205      	str	r2, [sp, #20]
 8009c32:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8009c34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c38:	f042 0220 	orr.w	r2, r2, #32
 8009c3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009c40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c44:	f002 0220 	and.w	r2, r2, #32
 8009c48:	9206      	str	r2, [sp, #24]
 8009c4a:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8009c4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c50:	f042 0220 	orr.w	r2, r2, #32
 8009c54:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009c58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c5c:	f002 0220 	and.w	r2, r2, #32
 8009c60:	9207      	str	r2, [sp, #28]
 8009c62:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8009c64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c6c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009c70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c74:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8009c78:	9208      	str	r2, [sp, #32]
 8009c7a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8009c7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009c88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c8c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8009c90:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8009c94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009c98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c9c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009ca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009ca4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8009ca8:	920a      	str	r2, [sp, #40]	@ 0x28
 8009caa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8009cac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cb4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009cb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009cbc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8009cc0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009cc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8009cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009cc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ccc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ce2:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009ce4:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009ce6:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009cea:	f001 fa69 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009cee:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8009cf0:	a916      	add	r1, sp, #88	@ 0x58
 8009cf2:	486f      	ldr	r0, [pc, #444]	@ (8009eb0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009cf4:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8009cf6:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8009cfa:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8009cfe:	f001 fa5f 	bl	800b1c0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8009d02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8009d06:	a916      	add	r1, sp, #88	@ 0x58
 8009d08:	486a      	ldr	r0, [pc, #424]	@ (8009eb4 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8009d0a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009d0c:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009d0e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8009d10:	f001 fa56 	bl	800b1c0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009d14:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8009d16:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009d1a:	4867      	ldr	r0, [pc, #412]	@ (8009eb8 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8009d1c:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009d20:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009d22:	f001 fa4d 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8009d26:	a916      	add	r1, sp, #88	@ 0x58
 8009d28:	4864      	ldr	r0, [pc, #400]	@ (8009ebc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8009d2a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8009d2e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8009d32:	f001 fa45 	bl	800b1c0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8009d36:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8009d38:	a916      	add	r1, sp, #88	@ 0x58
 8009d3a:	485f      	ldr	r0, [pc, #380]	@ (8009eb8 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8009d3c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009d3e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8009d40:	f001 fa3e 	bl	800b1c0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8009d44:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8009d46:	a916      	add	r1, sp, #88	@ 0x58
 8009d48:	485c      	ldr	r0, [pc, #368]	@ (8009ebc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8009d4a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009d4c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8009d4e:	f001 fa37 	bl	800b1c0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8009d52:	a916      	add	r1, sp, #88	@ 0x58
 8009d54:	4856      	ldr	r0, [pc, #344]	@ (8009eb0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8009d56:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8009d5a:	f001 fa31 	bl	800b1c0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8009d5e:	a916      	add	r1, sp, #88	@ 0x58
 8009d60:	4856      	ldr	r0, [pc, #344]	@ (8009ebc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8009d62:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8009d66:	f001 fa2b 	bl	800b1c0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8009d6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8009d6e:	a916      	add	r1, sp, #88	@ 0x58
 8009d70:	484f      	ldr	r0, [pc, #316]	@ (8009eb0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8009d72:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8009d74:	f001 fa24 	bl	800b1c0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8009d78:	463a      	mov	r2, r7
 8009d7a:	210f      	movs	r1, #15
 8009d7c:	205c      	movs	r0, #92	@ 0x5c
 8009d7e:	f000 fbc9 	bl	800a514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8009d82:	205c      	movs	r0, #92	@ 0x5c
 8009d84:	f000 fbf8 	bl	800a578 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8009d88:	a811      	add	r0, sp, #68	@ 0x44
 8009d8a:	f7fe ff38 	bl	8008bfe <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8009d8e:	7863      	ldrb	r3, [r4, #1]
 8009d90:	4a4b      	ldr	r2, [pc, #300]	@ (8009ec0 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8009d92:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8009d96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009d9a:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d9e:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009da2:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8009da6:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8009daa:	a90d      	add	r1, sp, #52	@ 0x34
 8009dac:	4845      	ldr	r0, [pc, #276]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009dae:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8009db0:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009db2:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8009db4:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009db6:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8009db8:	f7ff fe74 	bl	8009aa4 <MX_QSPI_Init>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f040 8091 	bne.w	8009ee4 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8009dc2:	2103      	movs	r1, #3
 8009dc4:	483f      	ldr	r0, [pc, #252]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009dc6:	f7ff f88e 	bl	8008ee6 <MT25TL01G_ResetEnable>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f040 8084 	bne.w	8009ed8 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8009dd0:	2103      	movs	r1, #3
 8009dd2:	483c      	ldr	r0, [pc, #240]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009dd4:	f7ff f8a8 	bl	8008f28 <MT25TL01G_ResetMemory>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d17d      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009ddc:	7869      	ldrb	r1, [r5, #1]
 8009dde:	4839      	ldr	r0, [pc, #228]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009de0:	f7fe ff1e 	bl	8008c20 <MT25TL01G_AutoPollingMemReady>
 8009de4:	4601      	mov	r1, r0
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d176      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8009dea:	4836      	ldr	r0, [pc, #216]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009dec:	f7ff f87b 	bl	8008ee6 <MT25TL01G_ResetEnable>
 8009df0:	4601      	mov	r1, r0
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d170      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8009df6:	4833      	ldr	r0, [pc, #204]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009df8:	f7ff f896 	bl	8008f28 <MT25TL01G_ResetMemory>
 8009dfc:	4601      	mov	r1, r0
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d16a      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8009e02:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8009e04:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009e06:	482f      	ldr	r0, [pc, #188]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8009e08:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009e0a:	f7fe ff09 	bl	8008c20 <MT25TL01G_AutoPollingMemReady>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d162      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009e12:	7869      	ldrb	r1, [r5, #1]
 8009e14:	482b      	ldr	r0, [pc, #172]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009e16:	f7fe ff72 	bl	8008cfe <MT25TL01G_Enter4BytesAddressMode>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d15c      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009e1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8009e22:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8009e26:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e28:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009e2c:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8009e2e:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e30:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8009e32:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009e34:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8009e38:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8009e3a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009e3c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009e40:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009e44:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e48:	481e      	ldr	r0, [pc, #120]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009e4a:	f003 fb4f 	bl	800d4ec <HAL_QSPI_Command>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d142      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e56:	f10d 0102 	add.w	r1, sp, #2
 8009e5a:	481a      	ldr	r0, [pc, #104]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009e5c:	f003 fbe7 	bl	800d62e <HAL_QSPI_Receive>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d139      	bne.n	8009ed8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009e64:	7869      	ldrb	r1, [r5, #1]
 8009e66:	4817      	ldr	r0, [pc, #92]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009e68:	f7fe ff05 	bl	8008c76 <MT25TL01G_WriteEnable>
 8009e6c:	bba0      	cbnz	r0, 8009ed8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8009e6e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e74:	a916      	add	r1, sp, #88	@ 0x58
 8009e76:	4813      	ldr	r0, [pc, #76]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8009e78:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8009e7a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e82:	051b      	lsls	r3, r3, #20
 8009e84:	0d1b      	lsrs	r3, r3, #20
 8009e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e8e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e92:	f003 fb2b 	bl	800d4ec <HAL_QSPI_Command>
 8009e96:	b9f8      	cbnz	r0, 8009ed8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e9c:	f10d 0102 	add.w	r1, sp, #2
 8009ea0:	4808      	ldr	r0, [pc, #32]	@ (8009ec4 <BSP_QSPI_Init+0x34c>)
 8009ea2:	f003 fb68 	bl	800d576 <HAL_QSPI_Transmit>
 8009ea6:	e00f      	b.n	8009ec8 <BSP_QSPI_Init+0x350>
 8009ea8:	58024400 	.word	0x58024400
 8009eac:	58020400 	.word	0x58020400
 8009eb0:	58021800 	.word	0x58021800
 8009eb4:	58020c00 	.word	0x58020c00
 8009eb8:	58021c00 	.word	0x58021c00
 8009ebc:	58021400 	.word	0x58021400
 8009ec0:	0802c510 	.word	0x0802c510
 8009ec4:	240003c8 	.word	0x240003c8
 8009ec8:	b930      	cbnz	r0, 8009ed8 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8009eca:	7862      	ldrb	r2, [r4, #1]
 8009ecc:	7821      	ldrb	r1, [r4, #0]
 8009ece:	f7ff fe1b 	bl	8009b08 <BSP_QSPI_ConfigFlash>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f43f ae5a 	beq.w	8009b8c <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ed8:	f06f 0004 	mvn.w	r0, #4
 8009edc:	e657      	b.n	8009b8e <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8009ede:	f06f 0001 	mvn.w	r0, #1
 8009ee2:	e654      	b.n	8009b8e <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8009ee4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009ee8:	e651      	b.n	8009b8e <BSP_QSPI_Init+0x16>
 8009eea:	bf00      	nop

08009eec <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8009eec:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8009eee:	4604      	mov	r4, r0
 8009ef0:	b970      	cbnz	r0, 8009f10 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8009ef2:	4b09      	ldr	r3, [pc, #36]	@ (8009f18 <BSP_SDRAM_DeInit+0x2c>)
 8009ef4:	4809      	ldr	r0, [pc, #36]	@ (8009f1c <BSP_SDRAM_DeInit+0x30>)
 8009ef6:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8009ef8:	f004 ffe4 	bl	800eec4 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8009efc:	207a      	movs	r0, #122	@ 0x7a
 8009efe:	f000 fb49 	bl	800a594 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8009f02:	4807      	ldr	r0, [pc, #28]	@ (8009f20 <BSP_SDRAM_DeInit+0x34>)
 8009f04:	4b07      	ldr	r3, [pc, #28]	@ (8009f24 <BSP_SDRAM_DeInit+0x38>)
 8009f06:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8009f08:	f003 f82a 	bl	800cf60 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8009f0c:	4620      	mov	r0, r4
}
 8009f0e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8009f10:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009f14:	e7fb      	b.n	8009f0e <BSP_SDRAM_DeInit+0x22>
 8009f16:	bf00      	nop
 8009f18:	52004140 	.word	0x52004140
 8009f1c:	2400f058 	.word	0x2400f058
 8009f20:	2400ef60 	.word	0x2400ef60
 8009f24:	52000040 	.word	0x52000040

08009f28 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8009f28:	2201      	movs	r2, #1
 8009f2a:	4915      	ldr	r1, [pc, #84]	@ (8009f80 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009f2c:	4b15      	ldr	r3, [pc, #84]	@ (8009f84 <MX_SDRAM_Init+0x5c>)
{
 8009f2e:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8009f30:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8009f34:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009f36:	2104      	movs	r1, #4
 8009f38:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8009f3a:	2440      	movs	r4, #64	@ 0x40
{
 8009f3c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009f3e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8009f42:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8009f46:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8009f50:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8009f54:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8009f58:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8009f5c:	2207      	movs	r2, #7
 8009f5e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8009f60:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8009f64:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8009f66:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8009f68:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8009f6c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8009f70:	f004 ff80 	bl	800ee74 <HAL_SDRAM_Init>
}
 8009f74:	3800      	subs	r0, #0
 8009f76:	bf18      	it	ne
 8009f78:	2001      	movne	r0, #1
 8009f7a:	b008      	add	sp, #32
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	bf00      	nop
 8009f80:	52004140 	.word	0x52004140
 8009f84:	2400f058 	.word	0x2400f058

08009f88 <BSP_SDRAM_Init>:
{
 8009f88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8009f8a:	4605      	mov	r5, r0
{
 8009f8c:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f040 80dd 	bne.w	800a14e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8009f94:	4b71      	ldr	r3, [pc, #452]	@ (800a15c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8009f96:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009f98:	a909      	add	r1, sp, #36	@ 0x24
 8009f9a:	4871      	ldr	r0, [pc, #452]	@ (800a160 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8009f9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8009fa0:	4c70      	ldr	r4, [pc, #448]	@ (800a164 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8009fa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8009fa6:	4e70      	ldr	r6, [pc, #448]	@ (800a168 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8009fa8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8009fac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009fb0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009fb4:	9201      	str	r2, [sp, #4]
 8009fb6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8009fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009fbc:	f042 0201 	orr.w	r2, r2, #1
 8009fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8009fc4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009fc8:	f002 0201 	and.w	r2, r2, #1
 8009fcc:	9202      	str	r2, [sp, #8]
 8009fce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009fd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009fd4:	f042 0208 	orr.w	r2, r2, #8
 8009fd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009fdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009fe0:	f002 0208 	and.w	r2, r2, #8
 8009fe4:	9203      	str	r2, [sp, #12]
 8009fe6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009fe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009fec:	f042 0210 	orr.w	r2, r2, #16
 8009ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8009ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8009ff8:	f002 0210 	and.w	r2, r2, #16
 8009ffc:	9204      	str	r2, [sp, #16]
 8009ffe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a004:	f042 0220 	orr.w	r2, r2, #32
 800a008:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a00c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a010:	f002 0220 	and.w	r2, r2, #32
 800a014:	9205      	str	r2, [sp, #20]
 800a016:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a018:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a01c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a020:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a028:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800a02c:	9206      	str	r2, [sp, #24]
 800a02e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a030:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a034:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a038:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a03c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a040:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800a044:	9207      	str	r2, [sp, #28]
 800a046:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a04c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a054:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a05e:	9308      	str	r3, [sp, #32]
 800a060:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a062:	2301      	movs	r3, #1
 800a064:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a068:	230c      	movs	r3, #12
 800a06a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800a06e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800a072:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a074:	f001 f8a4 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a078:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a07c:	a909      	add	r1, sp, #36	@ 0x24
 800a07e:	483b      	ldr	r0, [pc, #236]	@ (800a16c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a080:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a082:	f001 f89d 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a086:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a08a:	a909      	add	r1, sp, #36	@ 0x24
 800a08c:	4838      	ldr	r0, [pc, #224]	@ (800a170 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a08e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a090:	f001 f896 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800a094:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a098:	a909      	add	r1, sp, #36	@ 0x24
 800a09a:	4836      	ldr	r0, [pc, #216]	@ (800a174 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800a09c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a09e:	f001 f88f 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800a0a2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800a0a6:	a909      	add	r1, sp, #36	@ 0x24
 800a0a8:	4833      	ldr	r0, [pc, #204]	@ (800a178 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800a0aa:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800a0ac:	f001 f888 	bl	800b1c0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800a0b0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a0b4:	a909      	add	r1, sp, #36	@ 0x24
 800a0b6:	4831      	ldr	r0, [pc, #196]	@ (800a17c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800a0b8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a0ba:	f001 f881 	bl	800b1c0 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800a0be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a0c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800a0c6:	f240 2002 	movw	r0, #514	@ 0x202
 800a0ca:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800a0ce:	6334      	str	r4, [r6, #48]	@ 0x30
 800a0d0:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800a0d2:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800a0d6:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800a0da:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800a0dc:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a0de:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800a0e0:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800a0e2:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800a0e6:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800a0ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800a0ee:	4b24      	ldr	r3, [pc, #144]	@ (800a180 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800a0f0:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800a0f2:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800a0f4:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800a0f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a0fc:	f002 ff30 	bl	800cf60 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800a100:	4620      	mov	r0, r4
 800a102:	f002 febe 	bl	800ce82 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800a106:	462a      	mov	r2, r5
 800a108:	210f      	movs	r1, #15
 800a10a:	207a      	movs	r0, #122	@ 0x7a
 800a10c:	f000 fa02 	bl	800a514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800a110:	207a      	movs	r0, #122	@ 0x7a
 800a112:	f000 fa31 	bl	800a578 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800a116:	4630      	mov	r0, r6
 800a118:	f7ff ff06 	bl	8009f28 <MX_SDRAM_Init>
 800a11c:	b9d0      	cbnz	r0, 800a154 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800a11e:	4919      	ldr	r1, [pc, #100]	@ (800a184 <BSP_SDRAM_Init+0x1fc>)
 800a120:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800a122:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800a126:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800a12a:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800a12c:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800a130:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800a132:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800a136:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800a13a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800a13c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800a13e:	f7fe fd31 	bl	8008ba4 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800a142:	2800      	cmp	r0, #0
 800a144:	bf18      	it	ne
 800a146:	f06f 0004 	mvnne.w	r0, #4
}
 800a14a:	b00f      	add	sp, #60	@ 0x3c
 800a14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800a14e:	f06f 0001 	mvn.w	r0, #1
 800a152:	e7fa      	b.n	800a14a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800a158:	e7f7      	b.n	800a14a <BSP_SDRAM_Init+0x1c2>
 800a15a:	bf00      	nop
 800a15c:	58024400 	.word	0x58024400
 800a160:	58020c00 	.word	0x58020c00
 800a164:	2400efcc 	.word	0x2400efcc
 800a168:	2400f058 	.word	0x2400f058
 800a16c:	58021000 	.word	0x58021000
 800a170:	58021400 	.word	0x58021400
 800a174:	58021800 	.word	0x58021800
 800a178:	58021c00 	.word	0x58021c00
 800a17c:	58022000 	.word	0x58022000
 800a180:	52000040 	.word	0x52000040
 800a184:	2400f038 	.word	0x2400f038

0800a188 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	460c      	mov	r4, r1
 800a18e:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a190:	4606      	mov	r6, r0
 800a192:	2800      	cmp	r0, #0
 800a194:	d15c      	bne.n	800a250 <BSP_TS_Init+0xc8>
 800a196:	680b      	ldr	r3, [r1, #0]
 800a198:	1e5a      	subs	r2, r3, #1
 800a19a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800a19e:	d257      	bcs.n	800a250 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a1a0:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a1a2:	1e51      	subs	r1, r2, #1
 800a1a4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a1a8:	d252      	bcs.n	800a250 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bf28      	it	cs
 800a1ae:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a1b0:	68e2      	ldr	r2, [r4, #12]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d84c      	bhi.n	800a250 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800a1b6:	2370      	movs	r3, #112	@ 0x70
 800a1b8:	2254      	movs	r2, #84	@ 0x54
 800a1ba:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a1be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a294 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800a1c2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800a1c6:	4b2e      	ldr	r3, [pc, #184]	@ (800a280 <BSP_TS_Init+0xf8>)
 800a1c8:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a1ca:	4b2e      	ldr	r3, [pc, #184]	@ (800a284 <BSP_TS_Init+0xfc>)
 800a1cc:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a1ce:	4b2e      	ldr	r3, [pc, #184]	@ (800a288 <BSP_TS_Init+0x100>)
 800a1d0:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a1d2:	4b2e      	ldr	r3, [pc, #184]	@ (800a28c <BSP_TS_Init+0x104>)
 800a1d4:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800a1d6:	4b2e      	ldr	r3, [pc, #184]	@ (800a290 <BSP_TS_Init+0x108>)
 800a1d8:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800a1da:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a1de:	a906      	add	r1, sp, #24
 800a1e0:	482c      	ldr	r0, [pc, #176]	@ (800a294 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800a1e2:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a1e6:	f7fe fbe3 	bl	80089b0 <FT6X06_RegisterBusIO>
 800a1ea:	b9c0      	cbnz	r0, 800a21e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800a1ec:	4669      	mov	r1, sp
 800a1ee:	4829      	ldr	r0, [pc, #164]	@ (800a294 <BSP_TS_Init+0x10c>)
 800a1f0:	f7fe fb28 	bl	8008844 <FT6X06_ReadID>
 800a1f4:	b998      	cbnz	r0, 800a21e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800a1f6:	9b00      	ldr	r3, [sp, #0]
 800a1f8:	2b11      	cmp	r3, #17
 800a1fa:	d110      	bne.n	800a21e <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800a1fc:	a903      	add	r1, sp, #12
 800a1fe:	4825      	ldr	r0, [pc, #148]	@ (800a294 <BSP_TS_Init+0x10c>)
 800a200:	f7fe fad4 	bl	80087ac <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 800a204:	4f24      	ldr	r7, [pc, #144]	@ (800a298 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800a206:	4b25      	ldr	r3, [pc, #148]	@ (800a29c <BSP_TS_Init+0x114>)
 800a208:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800a2a4 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800a20c:	4821      	ldr	r0, [pc, #132]	@ (800a294 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800a20e:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 800a212:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4798      	blx	r3
 800a21a:	4605      	mov	r5, r0
 800a21c:	b1d8      	cbz	r0, 800a256 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 800a21e:	b116      	cbz	r6, 800a226 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 800a220:	f04f 35ff 	mov.w	r5, #4294967295
 800a224:	e010      	b.n	800a248 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 800a226:	2601      	movs	r6, #1
 800a228:	e7d7      	b.n	800a1da <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a22a:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a22c:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a22e:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a230:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a232:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a234:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a23a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a23c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a23e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a240:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a242:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a244:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800a248:	4628      	mov	r0, r5
 800a24a:	b00c      	add	sp, #48	@ 0x30
 800a24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a250:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800a254:	e7f8      	b.n	800a248 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a256:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a258:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a25a:	4e11      	ldr	r6, [pc, #68]	@ (800a2a0 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a25c:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a25e:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800a260:	6863      	ldr	r3, [r4, #4]
 800a262:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800a264:	68a3      	ldr	r3, [r4, #8]
 800a266:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800a268:	68e3      	ldr	r3, [r4, #12]
 800a26a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a26c:	f8d8 3000 	ldr.w	r3, [r8]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	4798      	blx	r3
 800a274:	2800      	cmp	r0, #0
 800a276:	dad8      	bge.n	800a22a <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a278:	f06f 0504 	mvn.w	r5, #4
 800a27c:	e7e4      	b.n	800a248 <BSP_TS_Init+0xc0>
 800a27e:	bf00      	nop
 800a280:	08009791 	.word	0x08009791
 800a284:	080096fd 	.word	0x080096fd
 800a288:	08009a6d 	.word	0x08009a6d
 800a28c:	08009a39 	.word	0x08009a39
 800a290:	08009aa1 	.word	0x08009aa1
 800a294:	2400f08c 	.word	0x2400f08c
 800a298:	2400f0b4 	.word	0x2400f0b4
 800a29c:	24000038 	.word	0x24000038
 800a2a0:	2400f0b8 	.word	0x2400f0b8
 800a2a4:	2400f0e0 	.word	0x2400f0e0

0800a2a8 <BSP_TS_GetState>:
{
 800a2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d14d      	bne.n	800a34e <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a2b2:	4b28      	ldr	r3, [pc, #160]	@ (800a354 <BSP_TS_GetState+0xac>)
 800a2b4:	a901      	add	r1, sp, #4
 800a2b6:	4a28      	ldr	r2, [pc, #160]	@ (800a358 <BSP_TS_GetState+0xb0>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6810      	ldr	r0, [r2, #0]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	4798      	blx	r3
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	db41      	blt.n	800a348 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a2c4:	4925      	ldr	r1, [pc, #148]	@ (800a35c <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800a2c6:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a2c8:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a2ca:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 800a2cc:	2e00      	cmp	r6, #0
 800a2ce:	d037      	beq.n	800a340 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a2d0:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800a2d2:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a2d6:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800a2da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a2de:	bf1e      	ittt	ne
 800a2e0:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 800a2e2:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 800a2e4:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a2e6:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800a2ea:	bf1c      	itt	ne
 800a2ec:	f10e 3cff 	addne.w	ip, lr, #4294967295
 800a2f0:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800a2f4:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a2f8:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800a2fa:	bf44      	itt	mi
 800a2fc:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 800a300:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a302:	680f      	ldr	r7, [r1, #0]
 800a304:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a306:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800a308:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a30a:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a30c:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a30e:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a312:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a316:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a318:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a31a:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a31c:	bf8c      	ite	hi
 800a31e:	eba2 0c05 	subhi.w	ip, r2, r5
 800a322:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a326:	4283      	cmp	r3, r0
 800a328:	bf8c      	ite	hi
 800a32a:	1a1e      	subhi	r6, r3, r0
 800a32c:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a32e:	4567      	cmp	r7, ip
 800a330:	d301      	bcc.n	800a336 <BSP_TS_GetState+0x8e>
 800a332:	42b7      	cmp	r7, r6
 800a334:	d205      	bcs.n	800a342 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a336:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a338:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800a33a:	2000      	movs	r0, #0
}
 800a33c:	b005      	add	sp, #20
 800a33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 800a340:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a342:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800a346:	e7f8      	b.n	800a33a <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a348:	f06f 0004 	mvn.w	r0, #4
 800a34c:	e7f6      	b.n	800a33c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800a34e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a352:	e7f3      	b.n	800a33c <BSP_TS_GetState+0x94>
 800a354:	2400f0e0 	.word	0x2400f0e0
 800a358:	2400f0b4 	.word	0x2400f0b4
 800a35c:	2400f0b8 	.word	0x2400f0b8

0800a360 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a360:	4b2d      	ldr	r3, [pc, #180]	@ (800a418 <SystemInit+0xb8>)
 800a362:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a366:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800a36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	f042 0210 	orr.w	r2, r2, #16
 800a374:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a376:	4a29      	ldr	r2, [pc, #164]	@ (800a41c <SystemInit+0xbc>)
 800a378:	6813      	ldr	r3, [r2, #0]
 800a37a:	f003 030f 	and.w	r3, r3, #15
 800a37e:	2b06      	cmp	r3, #6
 800a380:	d805      	bhi.n	800a38e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a382:	6813      	ldr	r3, [r2, #0]
 800a384:	f023 030f 	bic.w	r3, r3, #15
 800a388:	f043 0307 	orr.w	r3, r3, #7
 800a38c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a38e:	4b24      	ldr	r3, [pc, #144]	@ (800a420 <SystemInit+0xc0>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	f042 0201 	orr.w	r2, r2, #1
 800a396:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a398:	2200      	movs	r2, #0
 800a39a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a39c:	4a21      	ldr	r2, [pc, #132]	@ (800a424 <SystemInit+0xc4>)
 800a39e:	6819      	ldr	r1, [r3, #0]
 800a3a0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a3a2:	491e      	ldr	r1, [pc, #120]	@ (800a41c <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800a3a4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a3a6:	680a      	ldr	r2, [r1, #0]
 800a3a8:	0712      	lsls	r2, r2, #28
 800a3aa:	d505      	bpl.n	800a3b8 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a3ac:	680a      	ldr	r2, [r1, #0]
 800a3ae:	f022 020f 	bic.w	r2, r2, #15
 800a3b2:	f042 0207 	orr.w	r2, r2, #7
 800a3b6:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a3b8:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a3ba:	491b      	ldr	r1, [pc, #108]	@ (800a428 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800a3bc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800a3be:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800a3c0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800a3c2:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a3c4:	4919      	ldr	r1, [pc, #100]	@ (800a42c <SystemInit+0xcc>)
 800a3c6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a3c8:	4919      	ldr	r1, [pc, #100]	@ (800a430 <SystemInit+0xd0>)
 800a3ca:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a3cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a3ce:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a3d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a3d2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a3d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a3d6:	6819      	ldr	r1, [r3, #0]
 800a3d8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800a3dc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a3de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800a3e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3e4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800a3e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a3f0:	4b10      	ldr	r3, [pc, #64]	@ (800a434 <SystemInit+0xd4>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	0c1b      	lsrs	r3, r3, #16
 800a3f6:	041b      	lsls	r3, r3, #16
 800a3f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3fc:	d203      	bcs.n	800a406 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a438 <SystemInit+0xd8>)
 800a400:	2201      	movs	r2, #1
 800a402:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a406:	4b0d      	ldr	r3, [pc, #52]	@ (800a43c <SystemInit+0xdc>)
 800a408:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800a40c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a40e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a412:	4b01      	ldr	r3, [pc, #4]	@ (800a418 <SystemInit+0xb8>)
 800a414:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800a416:	4770      	bx	lr
 800a418:	e000ed00 	.word	0xe000ed00
 800a41c:	52002000 	.word	0x52002000
 800a420:	58024400 	.word	0x58024400
 800a424:	eaf6ed7f 	.word	0xeaf6ed7f
 800a428:	02020200 	.word	0x02020200
 800a42c:	01ff0000 	.word	0x01ff0000
 800a430:	01010280 	.word	0x01010280
 800a434:	5c001000 	.word	0x5c001000
 800a438:	51008000 	.word	0x51008000
 800a43c:	52004000 	.word	0x52004000

0800a440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a440:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a442:	2003      	movs	r0, #3
 800a444:	f000 f854 	bl	800a4f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a448:	f003 fcde 	bl	800de08 <HAL_RCC_GetSysClockFreq>
 800a44c:	490f      	ldr	r1, [pc, #60]	@ (800a48c <HAL_Init+0x4c>)
 800a44e:	4a10      	ldr	r2, [pc, #64]	@ (800a490 <HAL_Init+0x50>)
 800a450:	698b      	ldr	r3, [r1, #24]
 800a452:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a456:	5cd3      	ldrb	r3, [r2, r3]
 800a458:	f003 031f 	and.w	r3, r3, #31
 800a45c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a45e:	698b      	ldr	r3, [r1, #24]
 800a460:	f003 030f 	and.w	r3, r3, #15
 800a464:	5cd3      	ldrb	r3, [r2, r3]
 800a466:	4a0b      	ldr	r2, [pc, #44]	@ (800a494 <HAL_Init+0x54>)
 800a468:	f003 031f 	and.w	r3, r3, #31
 800a46c:	fa20 f303 	lsr.w	r3, r0, r3
 800a470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a472:	4b09      	ldr	r3, [pc, #36]	@ (800a498 <HAL_Init+0x58>)
 800a474:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a476:	2000      	movs	r0, #0
 800a478:	f7f7 f876 	bl	8001568 <HAL_InitTick>
 800a47c:	4604      	mov	r4, r0
 800a47e:	b918      	cbnz	r0, 800a488 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a480:	f7f6 fd62 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800a484:	4620      	mov	r0, r4
 800a486:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a488:	2401      	movs	r4, #1
 800a48a:	e7fb      	b.n	800a484 <HAL_Init+0x44>
 800a48c:	58024400 	.word	0x58024400
 800a490:	0802c518 	.word	0x0802c518
 800a494:	24000068 	.word	0x24000068
 800a498:	2400006c 	.word	0x2400006c

0800a49c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a49c:	4a03      	ldr	r2, [pc, #12]	@ (800a4ac <HAL_IncTick+0x10>)
 800a49e:	4b04      	ldr	r3, [pc, #16]	@ (800a4b0 <HAL_IncTick+0x14>)
 800a4a0:	6811      	ldr	r1, [r2, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	440b      	add	r3, r1
 800a4a6:	6013      	str	r3, [r2, #0]
}
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	2400f0e4 	.word	0x2400f0e4
 800a4b0:	24000070 	.word	0x24000070

0800a4b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a4b4:	4b01      	ldr	r3, [pc, #4]	@ (800a4bc <HAL_GetTick+0x8>)
 800a4b6:	6818      	ldr	r0, [r3, #0]
}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	2400f0e4 	.word	0x2400f0e4

0800a4c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a4c4:	f7ff fff6 	bl	800a4b4 <HAL_GetTick>
 800a4c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a4ca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800a4cc:	bf1e      	ittt	ne
 800a4ce:	4b04      	ldrne	r3, [pc, #16]	@ (800a4e0 <HAL_Delay+0x20>)
 800a4d0:	781b      	ldrbne	r3, [r3, #0]
 800a4d2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a4d4:	f7ff ffee 	bl	800a4b4 <HAL_GetTick>
 800a4d8:	1b43      	subs	r3, r0, r5
 800a4da:	42a3      	cmp	r3, r4
 800a4dc:	d3fa      	bcc.n	800a4d4 <HAL_Delay+0x14>
  {
  }
}
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	24000070 	.word	0x24000070

0800a4e4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a4e4:	4b01      	ldr	r3, [pc, #4]	@ (800a4ec <HAL_GetREVID+0x8>)
 800a4e6:	6818      	ldr	r0, [r3, #0]
}
 800a4e8:	0c00      	lsrs	r0, r0, #16
 800a4ea:	4770      	bx	lr
 800a4ec:	5c001000 	.word	0x5c001000

0800a4f0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4f0:	4907      	ldr	r1, [pc, #28]	@ (800a510 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a4f2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4f4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a4f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a4fe:	0412      	lsls	r2, r2, #16
 800a500:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800a50c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a50e:	4770      	bx	lr
 800a510:	e000ed00 	.word	0xe000ed00

0800a514 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a514:	4b16      	ldr	r3, [pc, #88]	@ (800a570 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a516:	b530      	push	{r4, r5, lr}
 800a518:	68dc      	ldr	r4, [r3, #12]
 800a51a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a51e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a522:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a524:	2b04      	cmp	r3, #4
 800a526:	bf28      	it	cs
 800a528:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a52a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a52c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a530:	bf8c      	ite	hi
 800a532:	3c03      	subhi	r4, #3
 800a534:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a536:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800a53a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a53c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a540:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a544:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a548:	fa03 f304 	lsl.w	r3, r3, r4
 800a54c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a550:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a554:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a556:	db06      	blt.n	800a566 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a558:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800a55c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800a560:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a564:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a566:	f000 000f 	and.w	r0, r0, #15
 800a56a:	4a02      	ldr	r2, [pc, #8]	@ (800a574 <HAL_NVIC_SetPriority+0x60>)
 800a56c:	5413      	strb	r3, [r2, r0]
 800a56e:	e7f9      	b.n	800a564 <HAL_NVIC_SetPriority+0x50>
 800a570:	e000ed00 	.word	0xe000ed00
 800a574:	e000ed14 	.word	0xe000ed14

0800a578 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a578:	2800      	cmp	r0, #0
 800a57a:	db07      	blt.n	800a58c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a57c:	2301      	movs	r3, #1
 800a57e:	0941      	lsrs	r1, r0, #5
 800a580:	f000 001f 	and.w	r0, r0, #31
 800a584:	4a02      	ldr	r2, [pc, #8]	@ (800a590 <HAL_NVIC_EnableIRQ+0x18>)
 800a586:	4083      	lsls	r3, r0
 800a588:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	e000e100 	.word	0xe000e100

0800a594 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a594:	2800      	cmp	r0, #0
 800a596:	db0c      	blt.n	800a5b2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a598:	0943      	lsrs	r3, r0, #5
 800a59a:	2201      	movs	r2, #1
 800a59c:	f000 001f 	and.w	r0, r0, #31
 800a5a0:	4904      	ldr	r1, [pc, #16]	@ (800a5b4 <HAL_NVIC_DisableIRQ+0x20>)
 800a5a2:	3320      	adds	r3, #32
 800a5a4:	4082      	lsls	r2, r0
 800a5a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a5aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a5ae:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a5b2:	4770      	bx	lr
 800a5b4:	e000e100 	.word	0xe000e100

0800a5b8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a5b8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a5bc:	4b04      	ldr	r3, [pc, #16]	@ (800a5d0 <HAL_MPU_Disable+0x18>)
 800a5be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5c0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a5c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	e000ed00 	.word	0xe000ed00

0800a5d4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a5d4:	4b06      	ldr	r3, [pc, #24]	@ (800a5f0 <HAL_MPU_Enable+0x1c>)
 800a5d6:	f040 0001 	orr.w	r0, r0, #1
 800a5da:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a5de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a5e4:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a5e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a5ea:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a5ee:	4770      	bx	lr
 800a5f0:	e000ed00 	.word	0xe000ed00

0800a5f4 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a5f4:	7843      	ldrb	r3, [r0, #1]
 800a5f6:	4a14      	ldr	r2, [pc, #80]	@ (800a648 <HAL_MPU_ConfigRegion+0x54>)
 800a5f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a5fc:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800a600:	f023 0301 	bic.w	r3, r3, #1
 800a604:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a608:	6843      	ldr	r3, [r0, #4]
 800a60a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a60e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a610:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a612:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a614:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a618:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a61a:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a61c:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a61e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a622:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a624:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a628:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a62a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a62e:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a630:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a634:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a636:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a63a:	7a01      	ldrb	r1, [r0, #8]
 800a63c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a640:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	e000ed00 	.word	0xe000ed00

0800a64c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a64c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a64e:	4604      	mov	r4, r0
 800a650:	b908      	cbnz	r0, 800a656 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800a652:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800a654:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a656:	7f43      	ldrb	r3, [r0, #29]
 800a658:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a65c:	b913      	cbnz	r3, 800a664 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800a65e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a660:	f7f6 fc8a 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a664:	2302      	movs	r3, #2
 800a666:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a668:	7923      	ldrb	r3, [r4, #4]
 800a66a:	b9e3      	cbnz	r3, 800a6a6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	4a13      	ldr	r2, [pc, #76]	@ (800a6bc <HAL_CRC_Init+0x70>)
 800a670:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	f022 0218 	bic.w	r2, r2, #24
 800a678:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a67a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a67c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a67e:	b9d2      	cbnz	r2, 800a6b6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a684:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800a686:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	6961      	ldr	r1, [r4, #20]
 800a68c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a690:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a692:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a694:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a69c:	430a      	orrs	r2, r1
 800a69e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800a6a4:	e7d6      	b.n	800a654 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a6a6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 f808 	bl	800a6c0 <HAL_CRCEx_Polynomial_Set>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d0e2      	beq.n	800a67a <HAL_CRC_Init+0x2e>
 800a6b4:	e7cd      	b.n	800a652 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a6b6:	6922      	ldr	r2, [r4, #16]
 800a6b8:	e7e4      	b.n	800a684 <HAL_CRC_Init+0x38>
 800a6ba:	bf00      	nop
 800a6bc:	04c11db7 	.word	0x04c11db7

0800a6c0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a6c0:	07cb      	lsls	r3, r1, #31
{
 800a6c2:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a6c4:	d50d      	bpl.n	800a6e2 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a6c6:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	d31d      	bcc.n	800a708 <HAL_CRCEx_Polynomial_Set+0x48>
 800a6cc:	fa21 f403 	lsr.w	r4, r1, r3
 800a6d0:	07e4      	lsls	r4, r4, #31
 800a6d2:	d5f9      	bpl.n	800a6c8 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800a6d4:	2a10      	cmp	r2, #16
 800a6d6:	d013      	beq.n	800a700 <HAL_CRCEx_Polynomial_Set+0x40>
 800a6d8:	2a10      	cmp	r2, #16
 800a6da:	d804      	bhi.n	800a6e6 <HAL_CRCEx_Polynomial_Set+0x26>
 800a6dc:	b13a      	cbz	r2, 800a6ee <HAL_CRCEx_Polynomial_Set+0x2e>
 800a6de:	2a08      	cmp	r2, #8
 800a6e0:	d010      	beq.n	800a704 <HAL_CRCEx_Polynomial_Set+0x44>
 800a6e2:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800a6e4:	e00b      	b.n	800a6fe <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800a6e6:	2a18      	cmp	r2, #24
 800a6e8:	d1fb      	bne.n	800a6e2 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800a6ea:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800a6ec:	d8f9      	bhi.n	800a6e2 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a6ee:	6800      	ldr	r0, [r0, #0]
 800a6f0:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a6f2:	6883      	ldr	r3, [r0, #8]
 800a6f4:	f023 0318 	bic.w	r3, r3, #24
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	6083      	str	r3, [r0, #8]
 800a6fc:	2000      	movs	r0, #0
}
 800a6fe:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800a700:	2b07      	cmp	r3, #7
 800a702:	e7f3      	b.n	800a6ec <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 800a704:	2b0f      	cmp	r3, #15
 800a706:	e7f1      	b.n	800a6ec <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 800a708:	2a10      	cmp	r2, #16
 800a70a:	d1e5      	bne.n	800a6d8 <HAL_CRCEx_Polynomial_Set+0x18>
 800a70c:	e7e9      	b.n	800a6e2 <HAL_CRCEx_Polynomial_Set+0x22>

0800a70e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a70e:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a710:	4604      	mov	r4, r0
 800a712:	2800      	cmp	r0, #0
 800a714:	d036      	beq.n	800a784 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a716:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800a71a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a71e:	b91b      	cbnz	r3, 800a728 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a720:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a724:	f7f6 fc40 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a728:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a72a:	69e0      	ldr	r0, [r4, #28]
 800a72c:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a72e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a736:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a738:	6819      	ldr	r1, [r3, #0]
 800a73a:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800a73e:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800a742:	430a      	orrs	r2, r1
 800a744:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a746:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a748:	68a2      	ldr	r2, [r4, #8]
 800a74a:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800a74e:	4302      	orrs	r2, r0
 800a750:	f021 0101 	bic.w	r1, r1, #1
 800a754:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a756:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a758:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a75a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a75c:	0c12      	lsrs	r2, r2, #16
 800a75e:	0412      	lsls	r2, r2, #16
 800a760:	430a      	orrs	r2, r1
 800a762:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a764:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a766:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800a76a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800a76e:	0552      	lsls	r2, r2, #21
 800a770:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a774:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a776:	430a      	orrs	r2, r1
 800a778:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a77a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a77c:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a77e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800a782:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a784:	2001      	movs	r0, #1
 800a786:	e7fc      	b.n	800a782 <HAL_DMA2D_Init+0x74>

0800a788 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800a788:	4770      	bx	lr

0800a78a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800a78a:	4770      	bx	lr

0800a78c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a78c:	6803      	ldr	r3, [r0, #0]
{
 800a78e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a790:	685e      	ldr	r6, [r3, #4]
{
 800a792:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a794:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a796:	07f2      	lsls	r2, r6, #31
 800a798:	d514      	bpl.n	800a7c4 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a79a:	05e9      	lsls	r1, r5, #23
 800a79c:	d512      	bpl.n	800a7c4 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7a4:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a7a6:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800a7a8:	f042 0201 	orr.w	r2, r2, #1
 800a7ac:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a7b2:	2304      	movs	r3, #4
 800a7b4:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a7be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a7c0:	b103      	cbz	r3, 800a7c4 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800a7c2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a7c4:	06b2      	lsls	r2, r6, #26
 800a7c6:	d516      	bpl.n	800a7f6 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a7c8:	04ab      	lsls	r3, r5, #18
 800a7ca:	d514      	bpl.n	800a7f6 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a7d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a7da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7dc:	f043 0302 	orr.w	r3, r3, #2
 800a7e0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a7e2:	2304      	movs	r3, #4
 800a7e4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a7ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a7f0:	b10b      	cbz	r3, 800a7f6 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a7f6:	0730      	lsls	r0, r6, #28
 800a7f8:	d516      	bpl.n	800a828 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a7fa:	0529      	lsls	r1, r5, #20
 800a7fc:	d514      	bpl.n	800a828 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a806:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a808:	2208      	movs	r2, #8
 800a80a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a80c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a80e:	f043 0304 	orr.w	r3, r3, #4
 800a812:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a814:	2304      	movs	r3, #4
 800a816:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a81a:	2300      	movs	r3, #0
 800a81c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a820:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a822:	b10b      	cbz	r3, 800a828 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800a824:	4620      	mov	r0, r4
 800a826:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a828:	0772      	lsls	r2, r6, #29
 800a82a:	d50b      	bpl.n	800a844 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a82c:	056b      	lsls	r3, r5, #21
 800a82e:	d509      	bpl.n	800a844 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a830:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a832:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a83a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a83c:	2204      	movs	r2, #4
 800a83e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a840:	f7ff ffa2 	bl	800a788 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a844:	07b0      	lsls	r0, r6, #30
 800a846:	d514      	bpl.n	800a872 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a848:	05a9      	lsls	r1, r5, #22
 800a84a:	d512      	bpl.n	800a872 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a854:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a856:	2202      	movs	r2, #2
 800a858:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a85a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a85c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a85e:	2301      	movs	r3, #1
 800a860:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a864:	2300      	movs	r3, #0
 800a866:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800a86a:	6a23      	ldr	r3, [r4, #32]
 800a86c:	b10b      	cbz	r3, 800a872 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800a86e:	4620      	mov	r0, r4
 800a870:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a872:	06f2      	lsls	r2, r6, #27
 800a874:	d513      	bpl.n	800a89e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a876:	04eb      	lsls	r3, r5, #19
 800a878:	d511      	bpl.n	800a89e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a87a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a87c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a884:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a886:	2210      	movs	r2, #16
 800a888:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a88a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a88c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a88e:	2301      	movs	r3, #1
 800a890:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800a894:	2300      	movs	r3, #0
 800a896:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a89a:	f7ff ff76 	bl	800a78a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800a89e:	bd70      	pop	{r4, r5, r6, pc}

0800a8a0 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800a8ac:	f7ff fe02 	bl	800a4b4 <HAL_GetTick>
 800a8b0:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a8b6:	07d2      	lsls	r2, r2, #31
 800a8b8:	d50a      	bpl.n	800a8d0 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800a8ba:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800a8be:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800a8c0:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800a8c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8c6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800a8ca:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800a8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a8d0:	f7ff fdf0 	bl	800a4b4 <HAL_GetTick>
 800a8d4:	eba0 0008 	sub.w	r0, r0, r8
 800a8d8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a8dc:	d9e9      	bls.n	800a8b2 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800a8de:	2003      	movs	r0, #3
 800a8e0:	e7f4      	b.n	800a8cc <DSI_ShortWrite.constprop.0+0x2c>

0800a8e2 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a8e2:	7c03      	ldrb	r3, [r0, #16]
{
 800a8e4:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d05b      	beq.n	800a9a2 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800a8ea:	6803      	ldr	r3, [r0, #0]
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800a8f2:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800a8f6:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800a8f8:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800a8fa:	d507      	bpl.n	800a90c <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800a8fc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a900:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 800a904:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 800a908:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800a90c:	0788      	lsls	r0, r1, #30
 800a90e:	d505      	bpl.n	800a91c <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800a910:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a914:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 800a918:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800a91c:	0748      	lsls	r0, r1, #29
 800a91e:	d505      	bpl.n	800a92c <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800a920:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800a924:	f040 0001 	orr.w	r0, r0, #1
 800a928:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800a92c:	0708      	lsls	r0, r1, #28
 800a92e:	d505      	bpl.n	800a93c <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800a930:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800a934:	f040 0002 	orr.w	r0, r0, #2
 800a938:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800a93c:	06c8      	lsls	r0, r1, #27
 800a93e:	d505      	bpl.n	800a94c <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800a940:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800a944:	f040 000c 	orr.w	r0, r0, #12
 800a948:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800a94c:	0688      	lsls	r0, r1, #26
 800a94e:	d505      	bpl.n	800a95c <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800a950:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800a954:	f040 0010 	orr.w	r0, r0, #16
 800a958:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800a95c:	0648      	lsls	r0, r1, #25
 800a95e:	d505      	bpl.n	800a96c <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800a960:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800a964:	f040 0020 	orr.w	r0, r0, #32
 800a968:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800a96c:	0608      	lsls	r0, r1, #24
 800a96e:	d505      	bpl.n	800a97c <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800a970:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800a974:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800a978:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800a97c:	05c8      	lsls	r0, r1, #23
 800a97e:	d505      	bpl.n	800a98c <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800a980:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800a984:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800a988:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800a98c:	0589      	lsls	r1, r1, #22
 800a98e:	d505      	bpl.n	800a99c <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800a990:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800a994:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 800a998:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800a99c:	2000      	movs	r0, #0
 800a99e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 800a9a0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800a9a2:	2002      	movs	r0, #2
}
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <HAL_DSI_Init>:
{
 800a9a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a9aa:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	f000 80ea 	beq.w	800ab88 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800a9b4:	7c43      	ldrb	r3, [r0, #17]
 800a9b6:	b90b      	cbnz	r3, 800a9bc <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800a9b8:	f7f6 fb1a 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800a9ca:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a9ce:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800a9d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800a9d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800a9de:	f7ff fd69 	bl	800a4b4 <HAL_GetTick>
 800a9e2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800a9e4:	6822      	ldr	r2, [r4, #0]
 800a9e6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800a9ea:	04d9      	lsls	r1, r3, #19
 800a9ec:	d56e      	bpl.n	800aacc <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800a9ee:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800a9f2:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800a9f6:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800a9fa:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800a9fe:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800aa02:	e9d5 0300 	ldrd	r0, r3, [r5]
 800aa06:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800aa08:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800aa0c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800aa0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800aa12:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800aa14:	430b      	orrs	r3, r1
 800aa16:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800aa2a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	9301      	str	r3, [sp, #4]
 800aa34:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800aa36:	f7ff fd43 	bl	800a4c0 <HAL_Delay>
  tickstart = HAL_GetTick();
 800aa3a:	f7ff fd3b 	bl	800a4b4 <HAL_GetTick>
 800aa3e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800aa46:	05d2      	lsls	r2, r2, #23
 800aa48:	d548      	bpl.n	800aadc <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 800aa4a:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800aa4c:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800aa4e:	9202      	str	r2, [sp, #8]
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	f042 0201 	orr.w	r2, r2, #1
 800aa56:	605a      	str	r2, [r3, #4]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	f002 0201 	and.w	r2, r2, #1
 800aa5e:	9202      	str	r2, [sp, #8]
 800aa60:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800aa68:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800aa6e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800aa70:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800aa72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800aa76:	f042 0202 	orr.w	r2, r2, #2
 800aa7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800aa7e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800aa82:	f042 0204 	orr.w	r2, r2, #4
 800aa86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800aa8a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800aa8e:	f022 0203 	bic.w	r2, r2, #3
 800aa92:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800aa96:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 800aaa0:	f7ff fd08 	bl	800a4b4 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800aaa4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800aaa6:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800aaa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aaac:	079b      	lsls	r3, r3, #30
 800aaae:	d025      	beq.n	800aafc <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aab6:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800aaba:	2b94      	cmp	r3, #148	@ 0x94
 800aabc:	d025      	beq.n	800ab0a <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800aabe:	f7ff fcf9 	bl	800a4b4 <HAL_GetTick>
 800aac2:	1b80      	subs	r0, r0, r6
 800aac4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800aac8:	d9f2      	bls.n	800aab0 <HAL_DSI_Init+0x108>
 800aaca:	e014      	b.n	800aaf6 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800aacc:	f7ff fcf2 	bl	800a4b4 <HAL_GetTick>
 800aad0:	1b80      	subs	r0, r0, r6
 800aad2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800aad6:	d985      	bls.n	800a9e4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800aad8:	2003      	movs	r0, #3
 800aada:	e053      	b.n	800ab84 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800aadc:	f7ff fcea 	bl	800a4b4 <HAL_GetTick>
 800aae0:	1b80      	subs	r0, r0, r6
 800aae2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800aae6:	d9ab      	bls.n	800aa40 <HAL_DSI_Init+0x98>
 800aae8:	e7f6      	b.n	800aad8 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800aaea:	f7ff fce3 	bl	800a4b4 <HAL_GetTick>
 800aaee:	1b80      	subs	r0, r0, r6
 800aaf0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800aaf4:	d902      	bls.n	800aafc <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800aafa:	e7ed      	b.n	800aad8 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab02:	f003 0314 	and.w	r3, r3, #20
 800ab06:	2b14      	cmp	r3, #20
 800ab08:	d1ef      	bne.n	800aaea <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ab0a:	686b      	ldr	r3, [r5, #4]
 800ab0c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800ab10:	4a1e      	ldr	r2, [pc, #120]	@ (800ab8c <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800ab12:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	bf38      	it	cc
 800ab18:	2301      	movcc	r3, #1
 800ab1a:	435a      	muls	r2, r3
 800ab1c:	68ab      	ldr	r3, [r5, #8]
 800ab1e:	f003 0303 	and.w	r3, r3, #3
 800ab22:	409a      	lsls	r2, r3
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	434b      	muls	r3, r1
 800ab28:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800ab32:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800ab36:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ab3a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800ab3e:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ab40:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ab42:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800ab46:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ab4a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800ab4e:	9003      	str	r0, [sp, #12]
 800ab50:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800ab52:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 800ab54:	f022 0201 	bic.w	r2, r2, #1
 800ab58:	605a      	str	r2, [r3, #4]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	f002 0201 	and.w	r2, r2, #1
 800ab60:	9203      	str	r2, [sp, #12]
 800ab62:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800ab64:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ab68:	f022 0203 	bic.w	r2, r2, #3
 800ab6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800ab70:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800ab74:	430a      	orrs	r2, r1
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 800ab7e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800ab80:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800ab82:	7463      	strb	r3, [r4, #17]
}
 800ab84:	b004      	add	sp, #16
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800ab88:	2001      	movs	r0, #1
 800ab8a:	e7fb      	b.n	800ab84 <HAL_DSI_Init+0x1dc>
 800ab8c:	003d0900 	.word	0x003d0900

0800ab90 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 800ab90:	4770      	bx	lr

0800ab92 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800ab92:	6803      	ldr	r3, [r0, #0]
 800ab94:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800ab98:	07d1      	lsls	r1, r2, #31
{
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800ab9e:	d508      	bpl.n	800abb2 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800aba0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800aba4:	07d2      	lsls	r2, r2, #31
 800aba6:	d504      	bpl.n	800abb2 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800aba8:	2201      	movs	r2, #1
 800abaa:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800abae:	f7f7 f953 	bl	8001e58 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800abb8:	0791      	lsls	r1, r2, #30
 800abba:	d509      	bpl.n	800abd0 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800abbc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800abc0:	0792      	lsls	r2, r2, #30
 800abc2:	d505      	bpl.n	800abd0 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800abc4:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800abc6:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800abc8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800abcc:	f7f7 f976 	bl	8001ebc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800abd0:	69a3      	ldr	r3, [r4, #24]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d04e      	beq.n	800ac74 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800abd6:	6821      	ldr	r1, [r4, #0]
 800abd8:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800abdc:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800abe0:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800abe2:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800abe6:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800abea:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800abec:	b291      	uxth	r1, r2
 800abee:	b119      	cbz	r1, 800abf8 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800abf0:	6961      	ldr	r1, [r4, #20]
 800abf2:	f041 0101 	orr.w	r1, r1, #1
 800abf6:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800abf8:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800abfc:	d003      	beq.n	800ac06 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800abfe:	6962      	ldr	r2, [r4, #20]
 800ac00:	f042 0202 	orr.w	r2, r2, #2
 800ac04:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800ac06:	07d8      	lsls	r0, r3, #31
 800ac08:	d503      	bpl.n	800ac12 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800ac0a:	6962      	ldr	r2, [r4, #20]
 800ac0c:	f042 0204 	orr.w	r2, r2, #4
 800ac10:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800ac12:	0799      	lsls	r1, r3, #30
 800ac14:	d503      	bpl.n	800ac1e <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800ac16:	6962      	ldr	r2, [r4, #20]
 800ac18:	f042 0208 	orr.w	r2, r2, #8
 800ac1c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800ac1e:	f013 0f0c 	tst.w	r3, #12
 800ac22:	d003      	beq.n	800ac2c <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800ac24:	6962      	ldr	r2, [r4, #20]
 800ac26:	f042 0210 	orr.w	r2, r2, #16
 800ac2a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800ac2c:	06da      	lsls	r2, r3, #27
 800ac2e:	d503      	bpl.n	800ac38 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800ac30:	6962      	ldr	r2, [r4, #20]
 800ac32:	f042 0220 	orr.w	r2, r2, #32
 800ac36:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800ac38:	0698      	lsls	r0, r3, #26
 800ac3a:	d503      	bpl.n	800ac44 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800ac3c:	6962      	ldr	r2, [r4, #20]
 800ac3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac42:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800ac44:	0659      	lsls	r1, r3, #25
 800ac46:	d503      	bpl.n	800ac50 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800ac48:	6962      	ldr	r2, [r4, #20]
 800ac4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ac4e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800ac50:	061a      	lsls	r2, r3, #24
 800ac52:	d503      	bpl.n	800ac5c <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800ac54:	6962      	ldr	r2, [r4, #20]
 800ac56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac5a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800ac5c:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800ac60:	d003      	beq.n	800ac6a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800ac62:	6963      	ldr	r3, [r4, #20]
 800ac64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ac68:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800ac6a:	6963      	ldr	r3, [r4, #20]
 800ac6c:	b113      	cbz	r3, 800ac74 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f7ff ff8e 	bl	800ab90 <HAL_DSI_ErrorCallback>
}
 800ac74:	bd10      	pop	{r4, pc}

0800ac76 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ac76:	7c02      	ldrb	r2, [r0, #16]
{
 800ac78:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800ac7a:	2a01      	cmp	r2, #1
 800ac7c:	d00a      	beq.n	800ac94 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800ac7e:	6802      	ldr	r2, [r0, #0]
 800ac80:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800ac82:	f020 0003 	bic.w	r0, r0, #3
 800ac86:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800ac88:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800ac8a:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ac8c:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800ac8e:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 800ac90:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800ac92:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ac94:	2002      	movs	r0, #2
}
 800ac96:	4770      	bx	lr

0800ac98 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800ac98:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ac9a:	7c03      	ldrb	r3, [r0, #16]
{
 800ac9c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d069      	beq.n	800ad76 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800aca2:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800aca4:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800aca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aca8:	f042 0201 	orr.w	r2, r2, #1
 800acac:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800acae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800acb2:	f022 0201 	bic.w	r2, r2, #1
 800acb6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800acba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800acbe:	f042 0201 	orr.w	r2, r2, #1
 800acc2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800acc6:	68da      	ldr	r2, [r3, #12]
 800acc8:	f022 0203 	bic.w	r2, r2, #3
 800accc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800acce:	68da      	ldr	r2, [r3, #12]
 800acd0:	4302      	orrs	r2, r0
 800acd2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800acd4:	695a      	ldr	r2, [r3, #20]
 800acd6:	f022 0207 	bic.w	r2, r2, #7
 800acda:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800acdc:	6958      	ldr	r0, [r3, #20]
 800acde:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800ace2:	432a      	orrs	r2, r5
 800ace4:	694d      	ldr	r5, [r1, #20]
 800ace6:	432a      	orrs	r2, r5
 800ace8:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800acea:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800acec:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800acee:	691a      	ldr	r2, [r3, #16]
 800acf0:	f022 020f 	bic.w	r2, r2, #15
 800acf4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800acf6:	691a      	ldr	r2, [r3, #16]
 800acf8:	4302      	orrs	r2, r0
 800acfa:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800acfc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800ad00:	f022 020e 	bic.w	r2, r2, #14
 800ad04:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800ad08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800ad0c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800ad10:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800ad12:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800ad16:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ad18:	0c12      	lsrs	r2, r2, #16
 800ad1a:	0412      	lsls	r2, r2, #16
 800ad1c:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800ad1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ad20:	4302      	orrs	r2, r0
 800ad22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800ad24:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800ad28:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800ad2c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800ad30:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800ad34:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800ad38:	432a      	orrs	r2, r5
 800ad3a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800ad3c:	432a      	orrs	r2, r5
 800ad3e:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800ad40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800ad42:	432a      	orrs	r2, r5
 800ad44:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ad46:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800ad48:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800ad4c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ad4e:	f022 0201 	bic.w	r2, r2, #1
 800ad52:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800ad54:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ad56:	430a      	orrs	r2, r1
 800ad58:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800ad5a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ad5e:	f042 0201 	orr.w	r2, r2, #1
 800ad62:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800ad66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800ad6a:	f042 0202 	orr.w	r2, r2, #2
 800ad6e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800ad72:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800ad74:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800ad76:	2002      	movs	r0, #2
 800ad78:	e7fc      	b.n	800ad74 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800ad7c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800ad7c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ad7e:	7c03      	ldrb	r3, [r0, #16]
{
 800ad80:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d029      	beq.n	800adda <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800ad86:	6800      	ldr	r0, [r0, #0]
 800ad88:	4b15      	ldr	r3, [pc, #84]	@ (800ade0 <HAL_DSI_ConfigCommand+0x64>)
 800ad8a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800ad8c:	4023      	ands	r3, r4
 800ad8e:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800ad90:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800ad92:	e9d1 3500 	ldrd	r3, r5, [r1]
 800ad96:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800ad98:	688d      	ldr	r5, [r1, #8]
 800ad9a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800ad9c:	68cd      	ldr	r5, [r1, #12]
 800ad9e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800ada0:	690d      	ldr	r5, [r1, #16]
 800ada2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800ada4:	694d      	ldr	r5, [r1, #20]
 800ada6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800ada8:	698d      	ldr	r5, [r1, #24]
 800adaa:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800adac:	69cd      	ldr	r5, [r1, #28]
 800adae:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800adb0:	6a0d      	ldr	r5, [r1, #32]
 800adb2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800adb4:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800adb6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800adb8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800adba:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800adbc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800adbe:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 800adc0:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800adc2:	4323      	orrs	r3, r4
 800adc4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800adc6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800adc8:	f023 0302 	bic.w	r3, r3, #2
 800adcc:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800adce:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800add0:	430b      	orrs	r3, r1
 800add2:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800add4:	2000      	movs	r0, #0
 800add6:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800add8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800adda:	2002      	movs	r0, #2
 800addc:	e7fc      	b.n	800add8 <HAL_DSI_ConfigCommand+0x5c>
 800adde:	bf00      	nop
 800ade0:	fef080ff 	.word	0xfef080ff

0800ade4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ade4:	7c02      	ldrb	r2, [r0, #16]
{
 800ade6:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800ade8:	2a01      	cmp	r2, #1
 800adea:	d00a      	beq.n	800ae02 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800adec:	6802      	ldr	r2, [r0, #0]
 800adee:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800adf0:	f020 001f 	bic.w	r0, r0, #31
 800adf4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800adf6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800adf8:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800adfa:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800adfc:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800adfe:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800ae00:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ae02:	2002      	movs	r0, #2
}
 800ae04:	4770      	bx	lr

0800ae06 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800ae06:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ae08:	7c03      	ldrb	r3, [r0, #16]
{
 800ae0a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d034      	beq.n	800ae7a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800ae10:	e9d1 0300 	ldrd	r0, r3, [r1]
 800ae14:	4298      	cmp	r0, r3
 800ae16:	bf38      	it	cc
 800ae18:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800ae20:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800ae24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800ae28:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800ae2c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ae30:	4302      	orrs	r2, r0
 800ae32:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800ae36:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ae3a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800ae3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ae42:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800ae46:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800ae4a:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ae4c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800ae50:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800ae52:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ae54:	432a      	orrs	r2, r5
 800ae56:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ae58:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ae5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800ae5e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ae62:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800ae66:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800ae6a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ae6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ae72:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800ae76:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800ae78:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800ae7a:	2002      	movs	r0, #2
 800ae7c:	e7fc      	b.n	800ae78 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800ae80 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800ae80:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ae82:	7c03      	ldrb	r3, [r0, #16]
{
 800ae84:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d05b      	beq.n	800af42 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800ae8a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800ae8c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800ae8e:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800ae90:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800ae92:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800ae96:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800ae98:	689a      	ldr	r2, [r3, #8]
 800ae9a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800ae9e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800aea0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800aea2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800aea4:	b292      	uxth	r2, r2
 800aea6:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800aea8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800aeaa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800aeae:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800aeb0:	4a25      	ldr	r2, [pc, #148]	@ (800af48 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800aeb2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800aeb4:	4010      	ands	r0, r2
 800aeb6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800aeb8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800aeba:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800aebc:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800aebe:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800aec0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aec2:	4010      	ands	r0, r2
 800aec4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800aec6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aec8:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800aeca:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800aecc:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800aece:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aed2:	4010      	ands	r0, r2
 800aed4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800aed8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aedc:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800aede:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800aee0:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800aee4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800aee8:	4010      	ands	r0, r2
 800aeea:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800aeee:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800aef2:	4328      	orrs	r0, r5
 800aef4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800aef8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800aefc:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800af00:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800af04:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800af08:	698d      	ldr	r5, [r1, #24]
 800af0a:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800af0c:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800af0e:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800af10:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800af14:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800af18:	4010      	ands	r0, r2
 800af1a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800af1e:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800af22:	4328      	orrs	r0, r5
 800af24:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800af28:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800af2c:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800af2e:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800af30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800af34:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800af38:	430a      	orrs	r2, r1
 800af3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800af3e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800af40:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800af42:	2002      	movs	r0, #2
 800af44:	e7fc      	b.n	800af40 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800af46:	bf00      	nop
 800af48:	ffff0000 	.word	0xffff0000

0800af4c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800af4c:	7c03      	ldrb	r3, [r0, #16]
{
 800af4e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800af50:	2b01      	cmp	r3, #1
 800af52:	d01c      	beq.n	800af8e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800af54:	6802      	ldr	r2, [r0, #0]
 800af56:	2300      	movs	r3, #0
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	6851      	ldr	r1, [r2, #4]
 800af5c:	f041 0101 	orr.w	r1, r1, #1
 800af60:	6051      	str	r1, [r2, #4]
 800af62:	6851      	ldr	r1, [r2, #4]
 800af64:	f001 0101 	and.w	r1, r1, #1
 800af68:	9100      	str	r1, [sp, #0]
 800af6a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800af72:	f041 0108 	orr.w	r1, r1, #8
 800af76:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800af7a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800af7e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800af80:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800af82:	f002 0208 	and.w	r2, r2, #8
 800af86:	9201      	str	r2, [sp, #4]
 800af88:	9a01      	ldr	r2, [sp, #4]
}
 800af8a:	b002      	add	sp, #8
 800af8c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800af8e:	2002      	movs	r0, #2
 800af90:	e7fb      	b.n	800af8a <HAL_DSI_Start+0x3e>

0800af92 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800af92:	7c02      	ldrb	r2, [r0, #16]
{
 800af94:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800af96:	2a01      	cmp	r2, #1
 800af98:	d009      	beq.n	800afae <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800af9a:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800af9c:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800af9e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800afa2:	f042 0204 	orr.w	r2, r2, #4
 800afa6:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800afaa:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800afac:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800afae:	2002      	movs	r0, #2
}
 800afb0:	4770      	bx	lr

0800afb2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800afb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800afb4:	7c05      	ldrb	r5, [r0, #16]
{
 800afb6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800afb8:	2d01      	cmp	r5, #1
 800afba:	d009      	beq.n	800afd0 <HAL_DSI_ShortWrite+0x1e>
 800afbc:	2501      	movs	r5, #1
 800afbe:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800afc0:	9d06      	ldr	r5, [sp, #24]
 800afc2:	9500      	str	r5, [sp, #0]
 800afc4:	f7ff fc6c 	bl	800a8a0 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800afc8:	2300      	movs	r3, #0
 800afca:	7423      	strb	r3, [r4, #16]

  return status;
}
 800afcc:	b003      	add	sp, #12
 800afce:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800afd0:	2002      	movs	r0, #2
 800afd2:	e7fb      	b.n	800afcc <HAL_DSI_ShortWrite+0x1a>

0800afd4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800afd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd8:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800afda:	7c03      	ldrb	r3, [r0, #16]
{
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800afe0:	2b01      	cmp	r3, #1
{
 800afe2:	4615      	mov	r5, r2
 800afe4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 800afe8:	d052      	beq.n	800b090 <HAL_DSI_LongWrite+0xbc>
 800afea:	2301      	movs	r3, #1
 800afec:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800afee:	f7ff fa61 	bl	800a4b4 <HAL_GetTick>
 800aff2:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800aff4:	6832      	ldr	r2, [r6, #0]
 800aff6:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800aff8:	f013 0a01 	ands.w	sl, r3, #1
 800affc:	d019      	beq.n	800b032 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800affe:	2c03      	cmp	r4, #3
 800b000:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800b002:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b006:	bf28      	it	cs
 800b008:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800b00a:	4283      	cmp	r3, r0
 800b00c:	d11d      	bne.n	800b04a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800b00e:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800b010:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800b012:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800b016:	bb10      	cbnz	r0, 800b05e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800b018:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b01a:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800b01e:	0223      	lsls	r3, r4, #8
 800b020:	0224      	lsls	r4, r4, #8
 800b022:	b29b      	uxth	r3, r3
 800b024:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800b028:	431d      	orrs	r5, r3
 800b02a:	4325      	orrs	r5, r4
 800b02c:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b02e:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 800b030:	e009      	b.n	800b046 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b032:	f7ff fa3f 	bl	800a4b4 <HAL_GetTick>
 800b036:	eba0 000b 	sub.w	r0, r0, fp
 800b03a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b03e:	d9d9      	bls.n	800aff4 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800b040:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b042:	f886 a010 	strb.w	sl, [r6, #16]
}
 800b046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b04a:	f818 1003 	ldrb.w	r1, [r8, r3]
 800b04e:	3301      	adds	r3, #1
 800b050:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800b054:	fa01 f10c 	lsl.w	r1, r1, ip
 800b058:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800b05c:	e7d5      	b.n	800b00a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b05e:	2804      	cmp	r0, #4
    fifoword = 0U;
 800b060:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b064:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800b066:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b068:	bf28      	it	cs
 800b06a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b06e:	f813 8001 	ldrb.w	r8, [r3, r1]
 800b072:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800b076:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b078:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800b07c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b07e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800b082:	d1f4      	bne.n	800b06e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800b084:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800b088:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800b08a:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800b08e:	e7c2      	b.n	800b016 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800b090:	2002      	movs	r0, #2
 800b092:	e7d8      	b.n	800b046 <HAL_DSI_LongWrite+0x72>

0800b094 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800b094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b098:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b09a:	7c03      	ldrb	r3, [r0, #16]
{
 800b09c:	4605      	mov	r5, r0
 800b09e:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800b0a0:	2b01      	cmp	r3, #1
{
 800b0a2:	4617      	mov	r7, r2
 800b0a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b0a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 800b0ac:	d06f      	beq.n	800b18e <HAL_DSI_Read+0xfa>
 800b0ae:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800b0b0:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800b0b2:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800b0b4:	d90d      	bls.n	800b0d2 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800b0b6:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800b0ba:	2237      	movs	r2, #55	@ 0x37
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	b2f3      	uxtb	r3, r6
 800b0c0:	f7ff fbee 	bl	800a8a0 <DSI_ShortWrite.constprop.0>
 800b0c4:	b128      	cbz	r0, 800b0d2 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800b0c6:	2300      	movs	r3, #0

      return HAL_ERROR;
 800b0c8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800b0ca:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800b0cc:	b003      	add	sp, #12
 800b0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b0d2:	f1b9 0f06 	cmp.w	r9, #6
 800b0d6:	d10f      	bne.n	800b0f8 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b0d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800b0da:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b0dc:	021b      	lsls	r3, r3, #8
 800b0de:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800b0e2:	f043 0306 	orr.w	r3, r3, #6
 800b0e6:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800b0e8:	f7ff f9e4 	bl	800a4b4 <HAL_GetTick>
 800b0ec:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800b0ee:	2e00      	cmp	r6, #0
 800b0f0:	dc27      	bgt.n	800b142 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800b0f6:	e7e9      	b.n	800b0cc <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800b0f8:	f1b9 0f04 	cmp.w	r9, #4
 800b0fc:	d105      	bne.n	800b10a <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b0fe:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800b100:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b102:	f044 0404 	orr.w	r4, r4, #4
 800b106:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800b108:	e7ee      	b.n	800b0e8 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800b10a:	f1b9 0f14 	cmp.w	r9, #20
 800b10e:	d108      	bne.n	800b122 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b110:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b114:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b116:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b118:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800b11c:	f044 0414 	orr.w	r4, r4, #20
 800b120:	e7f1      	b.n	800b106 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800b122:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 800b126:	d1ce      	bne.n	800b0c6 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b128:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b12c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b12e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b130:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b134:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b138:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800b13c:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 800b140:	e7e1      	b.n	800b106 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800b142:	682a      	ldr	r2, [r5, #0]
 800b144:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800b146:	f013 0310 	ands.w	r3, r3, #16
 800b14a:	d10d      	bne.n	800b168 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b14c:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800b14e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b150:	4632      	mov	r2, r6
 800b152:	bf28      	it	cs
 800b154:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b156:	00d9      	lsls	r1, r3, #3
 800b158:	fa20 f101 	lsr.w	r1, r0, r1
 800b15c:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800b15e:	3301      	adds	r3, #1
 800b160:	429a      	cmp	r2, r3
 800b162:	d1f8      	bne.n	800b156 <HAL_DSI_Read+0xc2>
        pdata++;
 800b164:	4417      	add	r7, r2
        datasize--;
 800b166:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b168:	f7ff f9a4 	bl	800a4b4 <HAL_GetTick>
 800b16c:	1b00      	subs	r0, r0, r4
 800b16e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b172:	d903      	bls.n	800b17c <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800b174:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b176:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b178:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800b17a:	e7a7      	b.n	800b0cc <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800b17c:	682b      	ldr	r3, [r5, #0]
 800b17e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800b180:	0652      	lsls	r2, r2, #25
 800b182:	d4b4      	bmi.n	800b0ee <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800b184:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b188:	069b      	lsls	r3, r3, #26
 800b18a:	d49c      	bmi.n	800b0c6 <HAL_DSI_Read+0x32>
 800b18c:	e7af      	b.n	800b0ee <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800b18e:	2002      	movs	r0, #2
 800b190:	e79c      	b.n	800b0cc <HAL_DSI_Read+0x38>

0800b192 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b192:	7c02      	ldrb	r2, [r0, #16]
{
 800b194:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b196:	2a01      	cmp	r2, #1
 800b198:	d00f      	beq.n	800b1ba <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800b19a:	6802      	ldr	r2, [r0, #0]
 800b19c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b1a0:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800b1a4:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b1a8:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b1ac:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b1b0:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b1b2:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800b1b6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b1b8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b1ba:	2002      	movs	r0, #2
}
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800b1c4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1c6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800b38c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b1ca:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b1ce:	680a      	ldr	r2, [r1, #0]
 800b1d0:	fa32 f503 	lsrs.w	r5, r2, r3
 800b1d4:	d102      	bne.n	800b1dc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800b1d6:	b003      	add	sp, #12
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b1dc:	2501      	movs	r5, #1
 800b1de:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800b1e2:	ea18 0202 	ands.w	r2, r8, r2
 800b1e6:	f000 80bb 	beq.w	800b360 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1ea:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b1ec:	2703      	movs	r7, #3
 800b1ee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1f2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b1f6:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1fa:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b1fc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b200:	2f01      	cmp	r7, #1
 800b202:	d834      	bhi.n	800b26e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800b204:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b206:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b20a:	68cf      	ldr	r7, [r1, #12]
 800b20c:	fa07 f70e 	lsl.w	r7, r7, lr
 800b210:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800b214:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b216:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b218:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b21c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800b220:	409f      	lsls	r7, r3
 800b222:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800b226:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800b228:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b22a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b22c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b230:	688f      	ldr	r7, [r1, #8]
 800b232:	fa07 f70e 	lsl.w	r7, r7, lr
 800b236:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800b23a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b23c:	d119      	bne.n	800b272 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800b23e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b242:	f003 0a07 	and.w	sl, r3, #7
 800b246:	f04f 0b0f 	mov.w	fp, #15
 800b24a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800b24e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800b252:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b256:	fa0b fb0a 	lsl.w	fp, fp, sl
 800b25a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b25e:	690f      	ldr	r7, [r1, #16]
 800b260:	fa07 f70a 	lsl.w	r7, r7, sl
 800b264:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 800b268:	f8c8 7020 	str.w	r7, [r8, #32]
 800b26c:	e001      	b.n	800b272 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b26e:	2d03      	cmp	r5, #3
 800b270:	d1da      	bne.n	800b228 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800b272:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b274:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b278:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b27c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b280:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800b284:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b286:	d06b      	beq.n	800b360 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b288:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 800b28c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b290:	f003 0c03 	and.w	ip, r3, #3
 800b294:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b298:	f045 0502 	orr.w	r5, r5, #2
 800b29c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b2a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2a4:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 800b2a8:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800b2ac:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b2b0:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2b4:	f005 0502 	and.w	r5, r5, #2
 800b2b8:	9501      	str	r5, [sp, #4]
 800b2ba:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800b2bc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b2be:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b2c2:	4d31      	ldr	r5, [pc, #196]	@ (800b388 <HAL_GPIO_Init+0x1c8>)
 800b2c4:	42a8      	cmp	r0, r5
 800b2c6:	d04d      	beq.n	800b364 <HAL_GPIO_Init+0x1a4>
 800b2c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b2cc:	42a8      	cmp	r0, r5
 800b2ce:	d04b      	beq.n	800b368 <HAL_GPIO_Init+0x1a8>
 800b2d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b2d4:	42a8      	cmp	r0, r5
 800b2d6:	d049      	beq.n	800b36c <HAL_GPIO_Init+0x1ac>
 800b2d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b2dc:	42a8      	cmp	r0, r5
 800b2de:	d047      	beq.n	800b370 <HAL_GPIO_Init+0x1b0>
 800b2e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b2e4:	42a8      	cmp	r0, r5
 800b2e6:	d045      	beq.n	800b374 <HAL_GPIO_Init+0x1b4>
 800b2e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b2ec:	42a8      	cmp	r0, r5
 800b2ee:	d043      	beq.n	800b378 <HAL_GPIO_Init+0x1b8>
 800b2f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b2f4:	42a8      	cmp	r0, r5
 800b2f6:	d041      	beq.n	800b37c <HAL_GPIO_Init+0x1bc>
 800b2f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b2fc:	42a8      	cmp	r0, r5
 800b2fe:	d03f      	beq.n	800b380 <HAL_GPIO_Init+0x1c0>
 800b300:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b304:	42a8      	cmp	r0, r5
 800b306:	d03d      	beq.n	800b384 <HAL_GPIO_Init+0x1c4>
 800b308:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b30c:	42a8      	cmp	r0, r5
 800b30e:	bf14      	ite	ne
 800b310:	250a      	movne	r5, #10
 800b312:	2509      	moveq	r5, #9
 800b314:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b318:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b31c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b320:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800b322:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800b326:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800b328:	bf0c      	ite	eq
 800b32a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b32c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b32e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800b332:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800b334:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800b336:	bf0c      	ite	eq
 800b338:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b33a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b33c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 800b340:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800b342:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800b346:	bf0c      	ite	eq
 800b348:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b34a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b34c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800b34e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800b352:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800b356:	bf54      	ite	pl
 800b358:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800b35a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800b35c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 800b360:	3301      	adds	r3, #1
 800b362:	e734      	b.n	800b1ce <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b364:	2500      	movs	r5, #0
 800b366:	e7d5      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b368:	2501      	movs	r5, #1
 800b36a:	e7d3      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b36c:	2502      	movs	r5, #2
 800b36e:	e7d1      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b370:	2503      	movs	r5, #3
 800b372:	e7cf      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b374:	2504      	movs	r5, #4
 800b376:	e7cd      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b378:	2505      	movs	r5, #5
 800b37a:	e7cb      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b37c:	2506      	movs	r5, #6
 800b37e:	e7c9      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b380:	2507      	movs	r5, #7
 800b382:	e7c7      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b384:	2508      	movs	r5, #8
 800b386:	e7c5      	b.n	800b314 <HAL_GPIO_Init+0x154>
 800b388:	58020000 	.word	0x58020000
 800b38c:	58024400 	.word	0x58024400

0800b390 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800b394:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b396:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b39a:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b39e:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b3a2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800b3a6:	fa31 f302 	lsrs.w	r3, r1, r2
 800b3aa:	d101      	bne.n	800b3b0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800b3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b3b0:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 800b3b4:	ea1c 0601 	ands.w	r6, ip, r1
 800b3b8:	d070      	beq.n	800b49c <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b3ba:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b3be:	f002 0703 	and.w	r7, r2, #3
 800b3c2:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800b3c6:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b3c8:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b3cc:	fa08 f907 	lsl.w	r9, r8, r7
 800b3d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b3d4:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b3d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b4c4 <HAL_GPIO_DeInit+0x134>)
 800b3da:	4298      	cmp	r0, r3
 800b3dc:	d060      	beq.n	800b4a0 <HAL_GPIO_DeInit+0x110>
 800b3de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3e2:	4298      	cmp	r0, r3
 800b3e4:	d05e      	beq.n	800b4a4 <HAL_GPIO_DeInit+0x114>
 800b3e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3ea:	4298      	cmp	r0, r3
 800b3ec:	d05c      	beq.n	800b4a8 <HAL_GPIO_DeInit+0x118>
 800b3ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3f2:	4298      	cmp	r0, r3
 800b3f4:	d05a      	beq.n	800b4ac <HAL_GPIO_DeInit+0x11c>
 800b3f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d058      	beq.n	800b4b0 <HAL_GPIO_DeInit+0x120>
 800b3fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b402:	4298      	cmp	r0, r3
 800b404:	d056      	beq.n	800b4b4 <HAL_GPIO_DeInit+0x124>
 800b406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b40a:	4298      	cmp	r0, r3
 800b40c:	d054      	beq.n	800b4b8 <HAL_GPIO_DeInit+0x128>
 800b40e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b412:	4298      	cmp	r0, r3
 800b414:	d052      	beq.n	800b4bc <HAL_GPIO_DeInit+0x12c>
 800b416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b41a:	4298      	cmp	r0, r3
 800b41c:	d050      	beq.n	800b4c0 <HAL_GPIO_DeInit+0x130>
 800b41e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b422:	4298      	cmp	r0, r3
 800b424:	bf0c      	ite	eq
 800b426:	2309      	moveq	r3, #9
 800b428:	230a      	movne	r3, #10
 800b42a:	40bb      	lsls	r3, r7
 800b42c:	4573      	cmp	r3, lr
 800b42e:	d117      	bne.n	800b460 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b430:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b434:	ea23 0306 	bic.w	r3, r3, r6
 800b438:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b43c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b440:	ea23 0306 	bic.w	r3, r3, r6
 800b444:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800b448:	6863      	ldr	r3, [r4, #4]
 800b44a:	ea23 0306 	bic.w	r3, r3, r6
 800b44e:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	ea23 0306 	bic.w	r3, r3, r6
 800b456:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b458:	68ab      	ldr	r3, [r5, #8]
 800b45a:	ea23 0309 	bic.w	r3, r3, r9
 800b45e:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b460:	0053      	lsls	r3, r2, #1
 800b462:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b464:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b466:	fa0b f303 	lsl.w	r3, fp, r3
 800b46a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b46e:	431d      	orrs	r5, r3
 800b470:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b472:	f002 0507 	and.w	r5, r2, #7
 800b476:	6a37      	ldr	r7, [r6, #32]
 800b478:	00ad      	lsls	r5, r5, #2
 800b47a:	fa08 f505 	lsl.w	r5, r8, r5
 800b47e:	ea27 0705 	bic.w	r7, r7, r5
 800b482:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b484:	68c5      	ldr	r5, [r0, #12]
 800b486:	ea25 0503 	bic.w	r5, r5, r3
 800b48a:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b48c:	6845      	ldr	r5, [r0, #4]
 800b48e:	ea25 050c 	bic.w	r5, r5, ip
 800b492:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b494:	6885      	ldr	r5, [r0, #8]
 800b496:	ea25 0303 	bic.w	r3, r5, r3
 800b49a:	6083      	str	r3, [r0, #8]
    position++;
 800b49c:	3201      	adds	r2, #1
 800b49e:	e782      	b.n	800b3a6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e7c2      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e7c0      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	e7be      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e7bc      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	e7ba      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4b4:	2305      	movs	r3, #5
 800b4b6:	e7b8      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4b8:	2306      	movs	r3, #6
 800b4ba:	e7b6      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4bc:	2307      	movs	r3, #7
 800b4be:	e7b4      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4c0:	2308      	movs	r3, #8
 800b4c2:	e7b2      	b.n	800b42a <HAL_GPIO_DeInit+0x9a>
 800b4c4:	58020000 	.word	0x58020000

0800b4c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b4c8:	6903      	ldr	r3, [r0, #16]
 800b4ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b4cc:	bf14      	ite	ne
 800b4ce:	2001      	movne	r0, #1
 800b4d0:	2000      	moveq	r0, #0
 800b4d2:	4770      	bx	lr

0800b4d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b4d4:	b10a      	cbz	r2, 800b4da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b4d6:	6181      	str	r1, [r0, #24]
  }
}
 800b4d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b4da:	0409      	lsls	r1, r1, #16
 800b4dc:	e7fb      	b.n	800b4d6 <HAL_GPIO_WritePin+0x2>

0800b4de <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b4de:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b4e0:	ea01 0203 	and.w	r2, r1, r3
 800b4e4:	ea21 0103 	bic.w	r1, r1, r3
 800b4e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4ec:	6181      	str	r1, [r0, #24]
}
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800b4f0:	4b04      	ldr	r3, [pc, #16]	@ (800b504 <HAL_HSEM_FastTake+0x14>)
 800b4f2:	3020      	adds	r0, #32
 800b4f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800b4f8:	4b03      	ldr	r3, [pc, #12]	@ (800b508 <HAL_HSEM_FastTake+0x18>)
 800b4fa:	1ac0      	subs	r0, r0, r3
 800b4fc:	bf18      	it	ne
 800b4fe:	2001      	movne	r0, #1
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	58026400 	.word	0x58026400
 800b508:	80000300 	.word	0x80000300

0800b50c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800b50c:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800b510:	4b01      	ldr	r3, [pc, #4]	@ (800b518 <HAL_HSEM_Release+0xc>)
 800b512:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800b516:	4770      	bx	lr
 800b518:	58026400 	.word	0x58026400

0800b51c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b51c:	6803      	ldr	r3, [r0, #0]
 800b51e:	699a      	ldr	r2, [r3, #24]
 800b520:	0791      	lsls	r1, r2, #30
 800b522:	d501      	bpl.n	800b528 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b524:	2200      	movs	r2, #0
 800b526:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	07d2      	lsls	r2, r2, #31
 800b52c:	d403      	bmi.n	800b536 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b52e:	699a      	ldr	r2, [r3, #24]
 800b530:	f042 0201 	orr.w	r2, r2, #1
 800b534:	619a      	str	r2, [r3, #24]
  }
}
 800b536:	4770      	bx	lr

0800b538 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b538:	b530      	push	{r4, r5, lr}
 800b53a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b53c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b540:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b542:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800b544:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b54a:	4a05      	ldr	r2, [pc, #20]	@ (800b560 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b54c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800b54e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b556:	ea20 0002 	bic.w	r0, r0, r2
 800b55a:	4303      	orrs	r3, r0
 800b55c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b55e:	bd30      	pop	{r4, r5, pc}
 800b560:	03ff63ff 	.word	0x03ff63ff

0800b564 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800b564:	6803      	ldr	r3, [r0, #0]
{
 800b566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b56a:	699c      	ldr	r4, [r3, #24]
{
 800b56c:	4605      	mov	r5, r0
 800b56e:	460f      	mov	r7, r1
 800b570:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b572:	f014 0410 	ands.w	r4, r4, #16
 800b576:	d06f      	beq.n	800b658 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800b578:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b57a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800b57c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b57e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	699a      	ldr	r2, [r3, #24]
 800b584:	0690      	lsls	r0, r2, #26
 800b586:	d461      	bmi.n	800b64c <I2C_IsErrorOccurred+0xe8>
 800b588:	f1b8 0f00 	cmp.w	r8, #0
 800b58c:	d035      	beq.n	800b5fa <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800b58e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800b592:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800b594:	682e      	ldr	r6, [r5, #0]
 800b596:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b598:	05d9      	lsls	r1, r3, #23
 800b59a:	d505      	bpl.n	800b5a8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b59c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b5a0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800b5a4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b5a6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b5a8:	055a      	lsls	r2, r3, #21
 800b5aa:	d505      	bpl.n	800b5b8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b5ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b5b0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800b5b4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b5b6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b5b8:	059b      	lsls	r3, r3, #22
 800b5ba:	d54f      	bpl.n	800b65c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b5bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b5c0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b5c4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f7ff ffa8 	bl	800b51c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b5cc:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800b5ce:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800b5d0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800b5d4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800b5d8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800b5dc:	f023 0301 	bic.w	r3, r3, #1
 800b5e0:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800b5e2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800b5e4:	4323      	orrs	r3, r4
 800b5e6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b5e8:	2320      	movs	r3, #32
 800b5ea:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800b5f4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800b5f8:	e032      	b.n	800b660 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800b5fa:	1c7a      	adds	r2, r7, #1
 800b5fc:	d0c1      	beq.n	800b582 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b5fe:	f7fe ff59 	bl	800a4b4 <HAL_GetTick>
 800b602:	1b80      	subs	r0, r0, r6
 800b604:	42b8      	cmp	r0, r7
 800b606:	d801      	bhi.n	800b60c <I2C_IsErrorOccurred+0xa8>
 800b608:	2f00      	cmp	r7, #0
 800b60a:	d1b9      	bne.n	800b580 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800b610:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b614:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800b616:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b618:	0400      	lsls	r0, r0, #16
 800b61a:	d50a      	bpl.n	800b632 <I2C_IsErrorOccurred+0xce>
 800b61c:	0449      	lsls	r1, r1, #17
 800b61e:	d408      	bmi.n	800b632 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800b620:	2a20      	cmp	r2, #32
 800b622:	d006      	beq.n	800b632 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b62a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b62c:	f7fe ff42 	bl	800a4b4 <HAL_GetTick>
 800b630:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b632:	682b      	ldr	r3, [r5, #0]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	069b      	lsls	r3, r3, #26
 800b638:	d4a2      	bmi.n	800b580 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b63a:	f7fe ff3b 	bl	800a4b4 <HAL_GetTick>
 800b63e:	1b80      	subs	r0, r0, r6
 800b640:	2819      	cmp	r0, #25
 800b642:	d9f6      	bls.n	800b632 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b644:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b646:	f04f 0801 	mov.w	r8, #1
 800b64a:	e799      	b.n	800b580 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800b64c:	f1b8 0f00 	cmp.w	r8, #0
 800b650:	d19d      	bne.n	800b58e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b652:	2220      	movs	r2, #32
 800b654:	61da      	str	r2, [r3, #28]
 800b656:	e79a      	b.n	800b58e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800b658:	4620      	mov	r0, r4
 800b65a:	e79b      	b.n	800b594 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d1b2      	bne.n	800b5c6 <I2C_IsErrorOccurred+0x62>
}
 800b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b664 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	4604      	mov	r4, r0
 800b668:	460d      	mov	r5, r1
 800b66a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	079b      	lsls	r3, r3, #30
 800b672:	d501      	bpl.n	800b678 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800b674:	2000      	movs	r0, #0
 800b676:	e01f      	b.n	800b6b8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b678:	4632      	mov	r2, r6
 800b67a:	4629      	mov	r1, r5
 800b67c:	4620      	mov	r0, r4
 800b67e:	f7ff ff71 	bl	800b564 <I2C_IsErrorOccurred>
 800b682:	b9c0      	cbnz	r0, 800b6b6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800b684:	1c6a      	adds	r2, r5, #1
 800b686:	d0f1      	beq.n	800b66c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b688:	f7fe ff14 	bl	800a4b4 <HAL_GetTick>
 800b68c:	1b80      	subs	r0, r0, r6
 800b68e:	42a8      	cmp	r0, r5
 800b690:	d801      	bhi.n	800b696 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b692:	2d00      	cmp	r5, #0
 800b694:	d1ea      	bne.n	800b66c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	f013 0302 	ands.w	r3, r3, #2
 800b69e:	d1e5      	bne.n	800b66c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800b6a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6a6:	f042 0220 	orr.w	r2, r2, #32
 800b6aa:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b6b6:	2001      	movs	r0, #1
}
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}

0800b6ba <I2C_WaitOnFlagUntilTimeout>:
{
 800b6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6be:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	4616      	mov	r6, r2
 800b6c8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	ea37 0303 	bics.w	r3, r7, r3
 800b6d2:	bf0c      	ite	eq
 800b6d4:	2301      	moveq	r3, #1
 800b6d6:	2300      	movne	r3, #0
 800b6d8:	42b3      	cmp	r3, r6
 800b6da:	d001      	beq.n	800b6e0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e025      	b.n	800b72c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7ff ff3d 	bl	800b564 <I2C_IsErrorOccurred>
 800b6ea:	b9f0      	cbnz	r0, 800b72a <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 800b6ec:	1c6b      	adds	r3, r5, #1
 800b6ee:	d0ec      	beq.n	800b6ca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6f0:	f7fe fee0 	bl	800a4b4 <HAL_GetTick>
 800b6f4:	eba0 0008 	sub.w	r0, r0, r8
 800b6f8:	42a8      	cmp	r0, r5
 800b6fa:	d801      	bhi.n	800b700 <I2C_WaitOnFlagUntilTimeout+0x46>
 800b6fc:	2d00      	cmp	r5, #0
 800b6fe:	d1e4      	bne.n	800b6ca <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	ea37 0303 	bics.w	r3, r7, r3
 800b708:	bf0c      	ite	eq
 800b70a:	2301      	moveq	r3, #1
 800b70c:	2300      	movne	r3, #0
 800b70e:	42b3      	cmp	r3, r6
 800b710:	d1db      	bne.n	800b6ca <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b712:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b714:	f043 0320 	orr.w	r3, r3, #32
 800b718:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b71a:	2320      	movs	r3, #32
 800b71c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b720:	2300      	movs	r3, #0
 800b722:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800b726:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b72a:	2001      	movs	r0, #1
}
 800b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b730 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4604      	mov	r4, r0
 800b734:	460d      	mov	r5, r1
 800b736:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	069b      	lsls	r3, r3, #26
 800b73e:	d501      	bpl.n	800b744 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800b740:	2000      	movs	r0, #0
 800b742:	e01d      	b.n	800b780 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b744:	4632      	mov	r2, r6
 800b746:	4629      	mov	r1, r5
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff ff0b 	bl	800b564 <I2C_IsErrorOccurred>
 800b74e:	b9b0      	cbnz	r0, 800b77e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b750:	f7fe feb0 	bl	800a4b4 <HAL_GetTick>
 800b754:	1b80      	subs	r0, r0, r6
 800b756:	42a8      	cmp	r0, r5
 800b758:	d801      	bhi.n	800b75e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	d1ec      	bne.n	800b738 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	f013 0320 	ands.w	r3, r3, #32
 800b766:	d1e7      	bne.n	800b738 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b768:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b76a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b76e:	f042 0220 	orr.w	r2, r2, #32
 800b772:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b774:	2220      	movs	r2, #32
 800b776:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b77a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b77e:	2001      	movs	r0, #1
}
 800b780:	bd70      	pop	{r4, r5, r6, pc}

0800b782 <HAL_I2C_MspInit>:
}
 800b782:	4770      	bx	lr

0800b784 <HAL_I2C_Init>:
{
 800b784:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b786:	4604      	mov	r4, r0
 800b788:	2800      	cmp	r0, #0
 800b78a:	d04e      	beq.n	800b82a <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b78c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b790:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b794:	b91b      	cbnz	r3, 800b79e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800b796:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800b79a:	f7ff fff2 	bl	800b782 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b79e:	2324      	movs	r3, #36	@ 0x24
 800b7a0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	f022 0201 	bic.w	r2, r2, #1
 800b7ac:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b7ae:	6862      	ldr	r2, [r4, #4]
 800b7b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b7b4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b7b6:	689a      	ldr	r2, [r3, #8]
 800b7b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b7bc:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b7be:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b7c2:	2901      	cmp	r1, #1
 800b7c4:	d106      	bne.n	800b7d4 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b7c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b7ca:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b7cc:	685a      	ldr	r2, [r3, #4]
 800b7ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b7d2:	e007      	b.n	800b7e4 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b7d4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b7d8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b7da:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b7dc:	d1f6      	bne.n	800b7cc <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b7e4:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7e6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b7ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b7f2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b7f4:	68da      	ldr	r2, [r3, #12]
 800b7f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b7fa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b7fc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800b800:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b802:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b804:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b808:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b80a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800b80e:	430a      	orrs	r2, r1
 800b810:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	f042 0201 	orr.w	r2, r2, #1
 800b818:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800b81a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b81c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b81e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b822:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b824:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800b828:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b82a:	2001      	movs	r0, #1
 800b82c:	e7fc      	b.n	800b828 <HAL_I2C_Init+0xa4>

0800b82e <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800b82e:	4770      	bx	lr

0800b830 <HAL_I2C_DeInit>:
{
 800b830:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b832:	4604      	mov	r4, r0
 800b834:	b198      	cbz	r0, 800b85e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800b836:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b838:	2324      	movs	r3, #36	@ 0x24
 800b83a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b83e:	6813      	ldr	r3, [r2, #0]
 800b840:	f023 0301 	bic.w	r3, r3, #1
 800b844:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800b846:	f7ff fff2 	bl	800b82e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b84a:	2000      	movs	r0, #0
 800b84c:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800b84e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800b852:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b856:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b858:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800b85c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b85e:	2001      	movs	r0, #1
 800b860:	e7fc      	b.n	800b85c <HAL_I2C_DeInit+0x2c>
	...

0800b864 <HAL_I2C_Mem_Write>:
{
 800b864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b868:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b86a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b86e:	4604      	mov	r4, r0
 800b870:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b872:	2b20      	cmp	r3, #32
{
 800b874:	4616      	mov	r6, r2
 800b876:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800b87a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b87e:	f040 80c6 	bne.w	800ba0e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800b882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b884:	b113      	cbz	r3, 800b88c <HAL_I2C_Mem_Write+0x28>
 800b886:	f1ba 0f00 	cmp.w	sl, #0
 800b88a:	d106      	bne.n	800b89a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b88c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b890:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800b892:	2001      	movs	r0, #1
}
 800b894:	b003      	add	sp, #12
 800b896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b89a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	f000 80b5 	beq.w	800ba0e <HAL_I2C_Mem_Write+0x1aa>
 800b8a4:	f04f 0b01 	mov.w	fp, #1
 800b8a8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800b8ac:	f7fe fe02 	bl	800a4b4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b8b0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800b8b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b8b4:	9000      	str	r0, [sp, #0]
 800b8b6:	465a      	mov	r2, fp
 800b8b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f7ff fefc 	bl	800b6ba <I2C_WaitOnFlagUntilTimeout>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d1e5      	bne.n	800b892 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b8c6:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800b8c8:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b8ca:	fa5f f289 	uxtb.w	r2, r9
 800b8ce:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b8d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b8d4:	2340      	movs	r3, #64	@ 0x40
 800b8d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800b8da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8dc:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b8de:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800b8e0:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b8e2:	4b4c      	ldr	r3, [pc, #304]	@ (800ba14 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800b8e4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b8ee:	f7ff fe23 	bl	800b538 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8f2:	462a      	mov	r2, r5
 800b8f4:	4641      	mov	r1, r8
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7ff feb4 	bl	800b664 <I2C_WaitOnTXISFlagUntilTimeout>
 800b8fc:	bb18      	cbnz	r0, 800b946 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b8fe:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b902:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b904:	d115      	bne.n	800b932 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b906:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b908:	2200      	movs	r2, #0
 800b90a:	2180      	movs	r1, #128	@ 0x80
 800b90c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b90e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b910:	4643      	mov	r3, r8
 800b912:	9500      	str	r5, [sp, #0]
 800b914:	f7ff fed1 	bl	800b6ba <I2C_WaitOnFlagUntilTimeout>
 800b918:	b9a8      	cbnz	r0, 800b946 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b91a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	2bff      	cmp	r3, #255	@ 0xff
 800b920:	d815      	bhi.n	800b94e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800b922:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b924:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800b928:	b292      	uxth	r2, r2
 800b92a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b92c:	b2d2      	uxtb	r2, r2
 800b92e:	9000      	str	r0, [sp, #0]
 800b930:	e012      	b.n	800b958 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b932:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b934:	4641      	mov	r1, r8
 800b936:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b938:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b93a:	462a      	mov	r2, r5
 800b93c:	f7ff fe92 	bl	800b664 <I2C_WaitOnTXISFlagUntilTimeout>
 800b940:	b908      	cbnz	r0, 800b946 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	e7df      	b.n	800b906 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800b946:	2300      	movs	r3, #0
 800b948:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b94c:	e7a1      	b.n	800b892 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b94e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b954:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b956:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b958:	4639      	mov	r1, r7
 800b95a:	4620      	mov	r0, r4
 800b95c:	f7ff fdec 	bl	800b538 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b960:	462a      	mov	r2, r5
 800b962:	4641      	mov	r1, r8
 800b964:	4620      	mov	r0, r4
 800b966:	f7ff fe7d 	bl	800b664 <I2C_WaitOnTXISFlagUntilTimeout>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d191      	bne.n	800b892 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b96e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b970:	6822      	ldr	r2, [r4, #0]
 800b972:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b976:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b978:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b97a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b97c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800b97e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b980:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b982:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800b984:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800b986:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b988:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b98a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	b1b3      	cbz	r3, 800b9be <HAL_I2C_Mem_Write+0x15a>
 800b990:	b9aa      	cbnz	r2, 800b9be <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b992:	4643      	mov	r3, r8
 800b994:	2180      	movs	r1, #128	@ 0x80
 800b996:	4620      	mov	r0, r4
 800b998:	9500      	str	r5, [sp, #0]
 800b99a:	f7ff fe8e 	bl	800b6ba <I2C_WaitOnFlagUntilTimeout>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	f47f af77 	bne.w	800b892 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	2bff      	cmp	r3, #255	@ 0xff
 800b9aa:	d928      	bls.n	800b9fe <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9ac:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b9ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9b2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b9b4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f7ff fdbd 	bl	800b538 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b9be:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1cc      	bne.n	800b960 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9c6:	462a      	mov	r2, r5
 800b9c8:	4641      	mov	r1, r8
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f7ff feb0 	bl	800b730 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f47f af5e 	bne.w	800b892 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	2120      	movs	r1, #32
 800b9da:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800b9e2:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800b9e6:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800b9ea:	f022 0201 	bic.w	r2, r2, #1
 800b9ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b9f0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b9f4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b9f8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b9fc:	e74a      	b.n	800b894 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800b9fe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ba00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800ba04:	b292      	uxth	r2, r2
 800ba06:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ba08:	b2d2      	uxtb	r2, r2
 800ba0a:	9000      	str	r0, [sp, #0]
 800ba0c:	e7d3      	b.n	800b9b6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800ba0e:	2002      	movs	r0, #2
 800ba10:	e740      	b.n	800b894 <HAL_I2C_Mem_Write+0x30>
 800ba12:	bf00      	nop
 800ba14:	80002000 	.word	0x80002000

0800ba18 <HAL_I2C_Mem_Read>:
{
 800ba18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba1e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800ba22:	4604      	mov	r4, r0
 800ba24:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba26:	2b20      	cmp	r3, #32
{
 800ba28:	4616      	mov	r6, r2
 800ba2a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800ba2e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba32:	f040 80c9 	bne.w	800bbc8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800ba36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba38:	b113      	cbz	r3, 800ba40 <HAL_I2C_Mem_Read+0x28>
 800ba3a:	f1ba 0f00 	cmp.w	sl, #0
 800ba3e:	d106      	bne.n	800ba4e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ba40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba44:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800ba46:	2001      	movs	r0, #1
}
 800ba48:	b003      	add	sp, #12
 800ba4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800ba4e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	f000 80b8 	beq.w	800bbc8 <HAL_I2C_Mem_Read+0x1b0>
 800ba58:	f04f 0b01 	mov.w	fp, #1
 800ba5c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800ba60:	f7fe fd28 	bl	800a4b4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba64:	2319      	movs	r3, #25
 800ba66:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800ba68:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba6a:	465a      	mov	r2, fp
 800ba6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ba70:	4620      	mov	r0, r4
 800ba72:	f7ff fe22 	bl	800b6ba <I2C_WaitOnFlagUntilTimeout>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d1e4      	bne.n	800ba46 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ba7c:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800ba7e:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ba80:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ba82:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ba86:	2240      	movs	r2, #64	@ 0x40
 800ba88:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800ba8c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba8e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ba90:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800ba92:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ba94:	4a4d      	ldr	r2, [pc, #308]	@ (800bbcc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800ba96:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ba9a:	9200      	str	r2, [sp, #0]
 800ba9c:	fa5f f289 	uxtb.w	r2, r9
 800baa0:	f7ff fd4a 	bl	800b538 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800baa4:	462a      	mov	r2, r5
 800baa6:	4641      	mov	r1, r8
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7ff fddb 	bl	800b664 <I2C_WaitOnTXISFlagUntilTimeout>
 800baae:	bb20      	cbnz	r0, 800bafa <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bab0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bab4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bab6:	d116      	bne.n	800bae6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bab8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800baba:	2200      	movs	r2, #0
 800babc:	2140      	movs	r1, #64	@ 0x40
 800babe:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bac0:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bac2:	4643      	mov	r3, r8
 800bac4:	9500      	str	r5, [sp, #0]
 800bac6:	f7ff fdf8 	bl	800b6ba <I2C_WaitOnFlagUntilTimeout>
 800baca:	b9b0      	cbnz	r0, 800bafa <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bacc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bace:	b29b      	uxth	r3, r3
 800bad0:	2bff      	cmp	r3, #255	@ 0xff
 800bad2:	4b3f      	ldr	r3, [pc, #252]	@ (800bbd0 <HAL_I2C_Mem_Read+0x1b8>)
 800bad4:	d815      	bhi.n	800bb02 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800bad6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800bad8:	b292      	uxth	r2, r2
 800bada:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800badc:	b2d2      	uxtb	r2, r2
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bae4:	e012      	b.n	800bb0c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bae6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bae8:	4641      	mov	r1, r8
 800baea:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800baec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800baee:	462a      	mov	r2, r5
 800baf0:	f7ff fdb8 	bl	800b664 <I2C_WaitOnTXISFlagUntilTimeout>
 800baf4:	b908      	cbnz	r0, 800bafa <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	e7de      	b.n	800bab8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800bafa:	2300      	movs	r3, #0
 800bafc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bb00:	e7a1      	b.n	800ba46 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb02:	22ff      	movs	r2, #255	@ 0xff
 800bb04:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f7ff fd12 	bl	800b538 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bb14:	4643      	mov	r3, r8
 800bb16:	2200      	movs	r2, #0
 800bb18:	2104      	movs	r1, #4
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	9500      	str	r5, [sp, #0]
 800bb1e:	f7ff fdcc 	bl	800b6ba <I2C_WaitOnFlagUntilTimeout>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d18f      	bne.n	800ba46 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bb2c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800bb2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800bb30:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bb32:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800bb34:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800bb36:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bb38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bb3a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800bb3c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800bb3e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb44:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	b1b3      	cbz	r3, 800bb78 <HAL_I2C_Mem_Read+0x160>
 800bb4a:	b9aa      	cbnz	r2, 800bb78 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bb4c:	4643      	mov	r3, r8
 800bb4e:	2180      	movs	r1, #128	@ 0x80
 800bb50:	4620      	mov	r0, r4
 800bb52:	9500      	str	r5, [sp, #0]
 800bb54:	f7ff fdb1 	bl	800b6ba <I2C_WaitOnFlagUntilTimeout>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	f47f af74 	bne.w	800ba46 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	2bff      	cmp	r3, #255	@ 0xff
 800bb64:	d928      	bls.n	800bbb8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb66:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bb68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb6c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bb6e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb70:	4639      	mov	r1, r7
 800bb72:	4620      	mov	r0, r4
 800bb74:	f7ff fce0 	bl	800b538 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800bb78:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1c9      	bne.n	800bb14 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb80:	462a      	mov	r2, r5
 800bb82:	4641      	mov	r1, r8
 800bb84:	4620      	mov	r0, r4
 800bb86:	f7ff fdd3 	bl	800b730 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f47f af5b 	bne.w	800ba46 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	2120      	movs	r1, #32
 800bb94:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800bb9c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800bba0:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800bba4:	f022 0201 	bic.w	r2, r2, #1
 800bba8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bbaa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bbae:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bbb2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800bbb6:	e747      	b.n	800ba48 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800bbb8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bbbe:	b292      	uxth	r2, r2
 800bbc0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbc2:	b2d2      	uxtb	r2, r2
 800bbc4:	9000      	str	r0, [sp, #0]
 800bbc6:	e7d3      	b.n	800bb70 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800bbc8:	2002      	movs	r0, #2
 800bbca:	e73d      	b.n	800ba48 <HAL_I2C_Mem_Read+0x30>
 800bbcc:	80002000 	.word	0x80002000
 800bbd0:	80002400 	.word	0x80002400

0800bbd4 <HAL_I2C_GetState>:
  return hi2c->State;
 800bbd4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800bbd8:	4770      	bx	lr

0800bbda <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800bbda:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800bbdc:	4770      	bx	lr

0800bbde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bbde:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbe0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800bbe4:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbe6:	2a20      	cmp	r2, #32
 800bbe8:	b2d4      	uxtb	r4, r2
 800bbea:	d11c      	bne.n	800bc26 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbec:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800bbf0:	2a01      	cmp	r2, #1
 800bbf2:	d018      	beq.n	800bc26 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bbf4:	2224      	movs	r2, #36	@ 0x24
 800bbf6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bbfa:	6802      	ldr	r2, [r0, #0]
 800bbfc:	6810      	ldr	r0, [r2, #0]
 800bbfe:	f020 0001 	bic.w	r0, r0, #1
 800bc02:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bc04:	6810      	ldr	r0, [r2, #0]
 800bc06:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800bc0a:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc0c:	6810      	ldr	r0, [r2, #0]
 800bc0e:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc10:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800bc12:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800bc14:	6811      	ldr	r1, [r2, #0]
 800bc16:	f041 0101 	orr.w	r1, r1, #1
 800bc1a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800bc1c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bc20:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800bc24:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800bc26:	2002      	movs	r0, #2
 800bc28:	e7fc      	b.n	800bc24 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800bc2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bc2a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc2c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800bc30:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc32:	2a20      	cmp	r2, #32
 800bc34:	b2d4      	uxtb	r4, r2
 800bc36:	d11b      	bne.n	800bc70 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc38:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800bc3c:	2a01      	cmp	r2, #1
 800bc3e:	d017      	beq.n	800bc70 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc40:	2224      	movs	r2, #36	@ 0x24
 800bc42:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc46:	6802      	ldr	r2, [r0, #0]
 800bc48:	6810      	ldr	r0, [r2, #0]
 800bc4a:	f020 0001 	bic.w	r0, r0, #1
 800bc4e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bc50:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc52:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc56:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc5a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800bc5c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800bc5e:	6811      	ldr	r1, [r2, #0]
 800bc60:	f041 0101 	orr.w	r1, r1, #1
 800bc64:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800bc66:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bc6a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800bc6e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800bc70:	2002      	movs	r0, #2
 800bc72:	e7fc      	b.n	800bc6e <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800bc74 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800bc74:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800bc76:	2401      	movs	r4, #1
 800bc78:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800bc7a:	2500      	movs	r5, #0
 800bc7c:	194e      	adds	r6, r1, r5
 800bc7e:	443d      	add	r5, r7
 800bc80:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800bc82:	42be      	cmp	r6, r7
 800bc84:	d112      	bne.n	800bcac <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800bc86:	2c10      	cmp	r4, #16
 800bc88:	d108      	bne.n	800bc9c <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800bc8a:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800bc8c:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800bc8e:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800bc90:	601d      	str	r5, [r3, #0]
  p = 0;
 800bc92:	4623      	mov	r3, r4
  si = Huffsize[0];
 800bc94:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800bc96:	5cc8      	ldrb	r0, [r1, r3]
 800bc98:	b9d8      	cbnz	r0, 800bcd2 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800bc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800bc9c:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800bc9e:	3401      	adds	r4, #1
 800bca0:	19ee      	adds	r6, r5, r7
 800bca2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800bca6:	d9e9      	bls.n	800bc7c <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800bca8:	2001      	movs	r0, #1
 800bcaa:	e7f6      	b.n	800bc9a <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800bcac:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800bcb0:	e7e7      	b.n	800bc82 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800bcb2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800bcb6:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800bcb8:	5cc8      	ldrb	r0, [r1, r3]
 800bcba:	19dc      	adds	r4, r3, r7
 800bcbc:	42a8      	cmp	r0, r5
 800bcbe:	d0f8      	beq.n	800bcb2 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800bcc0:	2d1f      	cmp	r5, #31
 800bcc2:	d8f1      	bhi.n	800bca8 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800bcc4:	fa06 f005 	lsl.w	r0, r6, r5
 800bcc8:	42a0      	cmp	r0, r4
 800bcca:	d9ed      	bls.n	800bca8 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800bccc:	0064      	lsls	r4, r4, #1
    si++;
 800bcce:	3501      	adds	r5, #1
 800bcd0:	e7e1      	b.n	800bc96 <JPEG_Bits_To_SizeCodes+0x22>
 800bcd2:	1ae7      	subs	r7, r4, r3
 800bcd4:	e7f0      	b.n	800bcb8 <JPEG_Bits_To_SizeCodes+0x44>

0800bcd6 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800bcd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcd8:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800bcdc:	460d      	mov	r5, r1
 800bcde:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800bce0:	ab01      	add	r3, sp, #4
 800bce2:	aa43      	add	r2, sp, #268	@ 0x10c
 800bce4:	a902      	add	r1, sp, #8
 800bce6:	f7ff ffc5 	bl	800bc74 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800bcea:	b938      	cbnz	r0, 800bcfc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800bcec:	9e01      	ldr	r6, [sp, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	f104 010f 	add.w	r1, r4, #15
 800bcf4:	360f      	adds	r6, #15
 800bcf6:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800bcf8:	42a1      	cmp	r1, r4
 800bcfa:	d102      	bne.n	800bd02 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800bcfc:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800bd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800bd02:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800bd06:	2e0b      	cmp	r6, #11
 800bd08:	d80a      	bhi.n	800bd20 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800bd0a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800bd0e:	f852 cb04 	ldr.w	ip, [r2], #4
 800bd12:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800bd16:	f813 7b01 	ldrb.w	r7, [r3], #1
 800bd1a:	3f01      	subs	r7, #1
 800bd1c:	55af      	strb	r7, [r5, r6]
      k++;
 800bd1e:	e7eb      	b.n	800bcf8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800bd20:	2001      	movs	r0, #1
 800bd22:	e7eb      	b.n	800bcfc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800bd24 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800bd24:	4603      	mov	r3, r0
 800bd26:	4608      	mov	r0, r1
 800bd28:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800bd2a:	681c      	ldr	r4, [r3, #0]
{
 800bd2c:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800bd2e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d125      	bne.n	800bd82 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800bd36:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800bd3a:	a901      	add	r1, sp, #4
 800bd3c:	f7ff ffcb 	bl	800bcd6 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800bd40:	b9e8      	cbnz	r0, 800bd7e <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800bd42:	aa01      	add	r2, sp, #4
 800bd44:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800bd48:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800bd4c:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800bd4e:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800bd50:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bd52:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800bd54:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bd56:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800bd5a:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bd5c:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bd5e:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bd62:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800bd66:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bd68:	7b13      	ldrb	r3, [r2, #12]
 800bd6a:	021b      	lsls	r3, r3, #8
 800bd6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bd70:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800bd72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bd76:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800bd7a:	42b4      	cmp	r4, r6
 800bd7c:	d1e9      	bne.n	800bd52 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800bd7e:	b011      	add	sp, #68	@ 0x44
 800bd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800bd82:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d102      	bne.n	800bd90 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800bd8a:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800bd8e:	e7d4      	b.n	800bd3a <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800bd90:	2001      	movs	r0, #1
 800bd92:	e7f4      	b.n	800bd7e <JPEG_Set_HuffDC_Mem+0x5a>

0800bd94 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800bd98:	6804      	ldr	r4, [r0, #0]
{
 800bd9a:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800bd9e:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800bda0:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d149      	bne.n	800be3c <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800bda8:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800bdac:	466b      	mov	r3, sp
 800bdae:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800bdb2:	a901      	add	r1, sp, #4
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f7ff ff5d 	bl	800bc74 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d13a      	bne.n	800be34 <JPEG_Set_HuffAC_Mem+0xa0>
 800bdbe:	9b00      	ldr	r3, [sp, #0]
 800bdc0:	460d      	mov	r5, r1
 800bdc2:	f106 0c0f 	add.w	ip, r6, #15
 800bdc6:	4617      	mov	r7, r2
 800bdc8:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800bdca:	f04f 0e0a 	mov.w	lr, #10
 800bdce:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800bdd0:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800bdd2:	4561      	cmp	r1, ip
 800bdd4:	d139      	bne.n	800be4a <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800bdd6:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800bdda:	a942      	add	r1, sp, #264	@ 0x108
 800bddc:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800bde0:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800bde2:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800bde4:	6063      	str	r3, [r4, #4]
 800bde6:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800bde8:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800bdec:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800bdf0:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800bdf2:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800bdf6:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800bdf8:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800bdfc:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800bdfe:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800be02:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800be04:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800be08:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800be0a:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800be0e:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800be10:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800be12:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800be16:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800be1a:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800be1c:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800be20:	021b      	lsls	r3, r3, #8
 800be22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800be26:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800be28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be2c:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800be30:	42b4      	cmp	r4, r6
 800be32:	d1e7      	bne.n	800be04 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800be34:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800be3c:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800be40:	429a      	cmp	r2, r3
 800be42:	d10f      	bne.n	800be64 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800be44:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800be48:	e7b0      	b.n	800bdac <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800be4a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800be4e:	b15b      	cbz	r3, 800be68 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800be50:	2bf0      	cmp	r3, #240	@ 0xf0
 800be52:	d015      	beq.n	800be80 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800be54:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800be56:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800be5a:	3b01      	subs	r3, #1
 800be5c:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800be60:	2ba1      	cmp	r3, #161	@ 0xa1
 800be62:	d902      	bls.n	800be6a <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800be64:	2001      	movs	r0, #1
 800be66:	e7e5      	b.n	800be34 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800be68:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800be6a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800be6e:	f857 8b04 	ldr.w	r8, [r7], #4
 800be72:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800be76:	f815 2b01 	ldrb.w	r2, [r5], #1
 800be7a:	3a01      	subs	r2, #1
 800be7c:	54f2      	strb	r2, [r6, r3]
      k++;
 800be7e:	e7a8      	b.n	800bdd2 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800be80:	23a1      	movs	r3, #161	@ 0xa1
 800be82:	e7f2      	b.n	800be6a <JPEG_Set_HuffAC_Mem+0xd6>

0800be84 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800be84:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800be86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800be8a:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800be8c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800be8e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800be90:	f002 0203 	and.w	r2, r2, #3
 800be94:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	bf0c      	ite	eq
 800be9a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800be9e:	f022 0208 	bicne.w	r2, r2, #8
 800bea2:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	f022 0201 	bic.w	r2, r2, #1
 800beaa:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800beac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beae:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800beb2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800beb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800beba:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800bebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bec2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bec6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800beca:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	f042 0201 	orr.w	r2, r2, #1
 800bed2:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800bed4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800bed6:	f002 020c 	and.w	r2, r2, #12
 800beda:	2a08      	cmp	r2, #8
 800bedc:	d104      	bne.n	800bee8 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800bede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bee0:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800bee4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800bee6:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800bee8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800beea:	f002 020c 	and.w	r2, r2, #12
 800beee:	2a0c      	cmp	r2, #12
 800bef0:	d1f9      	bne.n	800bee6 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800bef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bef4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bef8:	e7f4      	b.n	800bee4 <JPEG_Init_Process+0x60>
	...

0800befc <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800befc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800befe:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800bf00:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800bf02:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800bf04:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800bf06:	42aa      	cmp	r2, r5
 800bf08:	d313      	bcc.n	800bf32 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800bf0a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800bf0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800bf0e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800bf10:	428b      	cmp	r3, r1
 800bf12:	d30e      	bcc.n	800bf32 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800bf14:	4f18      	ldr	r7, [pc, #96]	@ (800bf78 <JPEG_DMA_StartProcess+0x7c>)
 800bf16:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800bf18:	4f18      	ldr	r7, [pc, #96]	@ (800bf7c <JPEG_DMA_StartProcess+0x80>)
 800bf1a:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800bf1c:	4e18      	ldr	r6, [pc, #96]	@ (800bf80 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800bf1e:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800bf20:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800bf22:	4e18      	ldr	r6, [pc, #96]	@ (800bf84 <JPEG_DMA_StartProcess+0x88>)
 800bf24:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800bf26:	b105      	cbz	r5, 800bf2a <JPEG_DMA_StartProcess+0x2e>
 800bf28:	b931      	cbnz	r1, 800bf38 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800bf2a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800bf2c:	f043 0304 	orr.w	r3, r3, #4
 800bf30:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800bf32:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800bf34:	b003      	add	sp, #12
 800bf36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800bf38:	fbb2 f6f5 	udiv	r6, r2, r5
 800bf3c:	fb05 2516 	mls	r5, r5, r6, r2
 800bf40:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800bf42:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800bf44:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800bf46:	fbb3 f2f1 	udiv	r2, r3, r1
 800bf4a:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800bf4e:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800bf50:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800bf52:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800bf54:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800bf56:	9500      	str	r5, [sp, #0]
 800bf58:	69e2      	ldr	r2, [r4, #28]
 800bf5a:	f001 f848 	bl	800cfee <HAL_MDMA_Start_IT>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d1e3      	bne.n	800bf2a <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800bf62:	6822      	ldr	r2, [r4, #0]
 800bf64:	9500      	str	r5, [sp, #0]
 800bf66:	3240      	adds	r2, #64	@ 0x40
 800bf68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bf6a:	69a1      	ldr	r1, [r4, #24]
 800bf6c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800bf6e:	f001 f83e 	bl	800cfee <HAL_MDMA_Start_IT>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d0de      	beq.n	800bf34 <JPEG_DMA_StartProcess+0x38>
 800bf76:	e7d8      	b.n	800bf2a <JPEG_DMA_StartProcess+0x2e>
 800bf78:	0800c4bf 	.word	0x0800c4bf
 800bf7c:	0800c3b7 	.word	0x0800c3b7
 800bf80:	0800c97d 	.word	0x0800c97d
 800bf84:	0800c96f 	.word	0x0800c96f

0800bf88 <HAL_JPEG_Init>:
{
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f000 80f2 	beq.w	800c176 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800bf92:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800bf96:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bf9a:	b91b      	cbnz	r3, 800bfa4 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800bf9c:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800bfa0:	f7f5 f876 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800bfa4:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	4a86      	ldr	r2, [pc, #536]	@ (800c1c4 <HAL_JPEG_Init+0x23c>)
 800bfaa:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800bfae:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800bfb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bfb4:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f023 0301 	bic.w	r3, r3, #1
 800bfc4:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bfc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bfc8:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800bfcc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800bfce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bfd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800bfd4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800bfd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bfd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bfdc:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bfde:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bfe0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800bfe4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800bfe6:	4b78      	ldr	r3, [pc, #480]	@ (800c1c8 <HAL_JPEG_Init+0x240>)
 800bfe8:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800bfea:	4b78      	ldr	r3, [pc, #480]	@ (800c1cc <HAL_JPEG_Init+0x244>)
 800bfec:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800bfee:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800bff0:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800bff4:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800bff6:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bff8:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800bffa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bffc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800c000:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c002:	4333      	orrs	r3, r6
 800c004:	7c56      	ldrb	r6, [r2, #17]
 800c006:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c00a:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c00e:	4281      	cmp	r1, r0
 800c010:	d1f0      	bne.n	800bff4 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c012:	4b6f      	ldr	r3, [pc, #444]	@ (800c1d0 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c014:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800c018:	4a6e      	ldr	r2, [pc, #440]	@ (800c1d4 <HAL_JPEG_Init+0x24c>)
 800c01a:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c01e:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800c022:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c026:	4610      	mov	r0, r2
 800c028:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c02a:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800c02e:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c032:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c036:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800c038:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c03a:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c03e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c040:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800c044:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c048:	ea43 030c 	orr.w	r3, r3, ip
 800c04c:	f890 c011 	ldrb.w	ip, [r0, #17]
 800c050:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c054:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800c058:	42be      	cmp	r6, r7
 800c05a:	d1ec      	bne.n	800c036 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800c05c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800c060:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800c064:	0c1b      	lsrs	r3, r3, #16
 800c066:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800c068:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800c06c:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800c070:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c074:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800c078:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c07a:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c07e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c080:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800c084:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c088:	4333      	orrs	r3, r6
 800c08a:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800c08e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c092:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800c096:	4281      	cmp	r1, r0
 800c098:	d1ec      	bne.n	800c074 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800c09a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800c09e:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800c0a2:	4a4d      	ldr	r2, [pc, #308]	@ (800c1d8 <HAL_JPEG_Init+0x250>)
 800c0a4:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800c0a8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800c0aa:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800c0ae:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800c0b2:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c0b6:	4013      	ands	r3, r2
  *address = value;
 800c0b8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800c0c2:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800c0c6:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800c0ca:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800c0ce:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c0d2:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800c0d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c0d8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800c0dc:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c0e0:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800c0e2:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800c0e6:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800c0ea:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c0ee:	4b3b      	ldr	r3, [pc, #236]	@ (800c1dc <HAL_JPEG_Init+0x254>)
 800c0f0:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800c0f4:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c0f8:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800c0fc:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c100:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800c102:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800c106:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800c10a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c10e:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800c110:	4a33      	ldr	r2, [pc, #204]	@ (800c1e0 <HAL_JPEG_Init+0x258>)
 800c112:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800c116:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800c11a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c11e:	4b31      	ldr	r3, [pc, #196]	@ (800c1e4 <HAL_JPEG_Init+0x25c>)
 800c120:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800c124:	4b30      	ldr	r3, [pc, #192]	@ (800c1e8 <HAL_JPEG_Init+0x260>)
 800c126:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800c12a:	4b30      	ldr	r3, [pc, #192]	@ (800c1ec <HAL_JPEG_Init+0x264>)
 800c12c:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800c130:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c134:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800c136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c13a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c13e:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800c142:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c144:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c148:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c14a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800c14e:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c152:	4333      	orrs	r3, r6
 800c154:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800c158:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c15c:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c160:	4281      	cmp	r1, r0
 800c162:	d1ec      	bne.n	800c13e <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800c164:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800c168:	491a      	ldr	r1, [pc, #104]	@ (800c1d4 <HAL_JPEG_Init+0x24c>)
 800c16a:	4628      	mov	r0, r5
 800c16c:	f7ff fe12 	bl	800bd94 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c170:	b118      	cbz	r0, 800c17a <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800c172:	2301      	movs	r3, #1
 800c174:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800c176:	2001      	movs	r0, #1
}
 800c178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800c17a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800c17e:	4918      	ldr	r1, [pc, #96]	@ (800c1e0 <HAL_JPEG_Init+0x258>)
 800c180:	4628      	mov	r0, r5
 800c182:	f7ff fe07 	bl	800bd94 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c186:	2800      	cmp	r0, #0
 800c188:	d1f3      	bne.n	800c172 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800c18a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800c18e:	490d      	ldr	r1, [pc, #52]	@ (800c1c4 <HAL_JPEG_Init+0x23c>)
 800c190:	4628      	mov	r0, r5
 800c192:	f7ff fdc7 	bl	800bd24 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800c196:	2800      	cmp	r0, #0
 800c198:	d1eb      	bne.n	800c172 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800c19a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800c19e:	4914      	ldr	r1, [pc, #80]	@ (800c1f0 <HAL_JPEG_Init+0x268>)
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f7ff fdbf 	bl	800bd24 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d1e3      	bne.n	800c172 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800c1aa:	6863      	ldr	r3, [r4, #4]
 800c1ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1b0:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c1b2:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800c1b4:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800c1b6:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c1b8:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800c1bc:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800c1be:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800c1c0:	e7da      	b.n	800c178 <HAL_JPEG_Init+0x1f0>
 800c1c2:	bf00      	nop
 800c1c4:	0802c768 	.word	0x0802c768
 800c1c8:	0802c568 	.word	0x0802c568
 800c1cc:	0802c528 	.word	0x0802c528
 800c1d0:	0b0a0908 	.word	0x0b0a0908
 800c1d4:	0802c69a 	.word	0x0802c69a
 800c1d8:	ffff0000 	.word	0xffff0000
 800c1dc:	09080706 	.word	0x09080706
 800c1e0:	0802c5e8 	.word	0x0802c5e8
 800c1e4:	01000404 	.word	0x01000404
 800c1e8:	05070403 	.word	0x05070403
 800c1ec:	04040201 	.word	0x04040201
 800c1f0:	0802c74c 	.word	0x0802c74c

0800c1f4 <HAL_JPEG_GetInfo>:
{
 800c1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d06f      	beq.n	800c2dc <HAL_JPEG_GetInfo+0xe8>
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	d06d      	beq.n	800c2dc <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800c200:	6804      	ldr	r4, [r0, #0]
 800c202:	6863      	ldr	r3, [r4, #4]
 800c204:	f003 0303 	and.w	r3, r3, #3
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d047      	beq.n	800c29c <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800c20c:	6863      	ldr	r3, [r4, #4]
 800c20e:	f013 0303 	ands.w	r3, r3, #3
 800c212:	d005      	beq.n	800c220 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800c214:	6863      	ldr	r3, [r4, #4]
 800c216:	f003 0303 	and.w	r3, r3, #3
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d15e      	bne.n	800c2dc <HAL_JPEG_GetInfo+0xe8>
 800c21e:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c220:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800c222:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c224:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c228:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c22a:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c22c:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800c22e:	68e2      	ldr	r2, [r4, #12]
 800c230:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c234:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c236:	d13c      	bne.n	800c2b2 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c238:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c23a:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c23c:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c240:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c242:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c244:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c246:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c24a:	d129      	bne.n	800c2a0 <HAL_JPEG_GetInfo+0xac>
 800c24c:	4313      	orrs	r3, r2
 800c24e:	f013 0f0f 	tst.w	r3, #15
 800c252:	bf0c      	ite	eq
 800c254:	2301      	moveq	r3, #1
 800c256:	2300      	movne	r3, #0
 800c258:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800c25a:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	3450      	adds	r4, #80	@ 0x50
 800c260:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800c2e0 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800c264:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c266:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800c26a:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800c26e:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800c272:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800c276:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800c278:	fa29 f206 	lsr.w	r2, r9, r6
 800c27c:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800c27e:	2a01      	cmp	r2, #1
 800c280:	d119      	bne.n	800c2b6 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800c282:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800c284:	3608      	adds	r6, #8
 800c286:	3701      	adds	r7, #1
 800c288:	2e20      	cmp	r6, #32
 800c28a:	d1f5      	bne.n	800c278 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800c28c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c28e:	2d40      	cmp	r5, #64	@ 0x40
 800c290:	d1ed      	bne.n	800c26e <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800c292:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800c294:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800c296:	610b      	str	r3, [r1, #16]
}
 800c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29c:	2310      	movs	r3, #16
 800c29e:	e7bf      	b.n	800c220 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c2a0:	2d03      	cmp	r5, #3
 800c2a2:	d106      	bne.n	800c2b2 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	f013 0f0f 	tst.w	r3, #15
 800c2aa:	bf0c      	ite	eq
 800c2ac:	2301      	moveq	r3, #1
 800c2ae:	2300      	movne	r3, #0
 800c2b0:	e7d3      	b.n	800c25a <HAL_JPEG_GetInfo+0x66>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	e7d1      	b.n	800c25a <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c2b6:	fb0e fb02 	mul.w	fp, lr, r2
 800c2ba:	f897 a000 	ldrb.w	sl, [r7]
 800c2be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2c0:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800c2c4:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800c2c8:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800c2ca:	bf8b      	itete	hi
 800c2cc:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800c2d0:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800c2d4:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800c2d6:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800c2da:	e7d3      	b.n	800c284 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800c2dc:	2001      	movs	r0, #1
 800c2de:	e7db      	b.n	800c298 <HAL_JPEG_GetInfo+0xa4>
 800c2e0:	0802c5a8 	.word	0x0802c5a8

0800c2e4 <HAL_JPEG_Decode_DMA>:
{
 800c2e4:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	b348      	cbz	r0, 800c33e <HAL_JPEG_Decode_DMA+0x5a>
 800c2ea:	b341      	cbz	r1, 800c33e <HAL_JPEG_Decode_DMA+0x5a>
 800c2ec:	b33b      	cbz	r3, 800c33e <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800c2ee:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800c2f2:	2d01      	cmp	r5, #1
 800c2f4:	d028      	beq.n	800c348 <HAL_JPEG_Decode_DMA+0x64>
 800c2f6:	2501      	movs	r5, #1
 800c2f8:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800c2fc:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800c300:	2d01      	cmp	r5, #1
 800c302:	d11e      	bne.n	800c342 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c304:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800c306:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c308:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800c30c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c30e:	f025 050f 	bic.w	r5, r5, #15
 800c312:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c314:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c316:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800c31a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c31e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800c320:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800c322:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800c324:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800c326:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800c328:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800c32a:	f7ff fdab 	bl	800be84 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800c32e:	f7ff fde5 	bl	800befc <JPEG_DMA_StartProcess>
 800c332:	b128      	cbz	r0, 800c340 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c334:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800c336:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c33a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800c33e:	2001      	movs	r0, #1
}
 800c340:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800c342:	2300      	movs	r3, #0
 800c344:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800c348:	2002      	movs	r0, #2
 800c34a:	e7f9      	b.n	800c340 <HAL_JPEG_Decode_DMA+0x5c>

0800c34c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c34c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c34e:	f003 030c 	and.w	r3, r3, #12
 800c352:	2b0c      	cmp	r3, #12
 800c354:	d10d      	bne.n	800c372 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c356:	07cb      	lsls	r3, r1, #31
 800c358:	d503      	bpl.n	800c362 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c35a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c35c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c360:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c362:	0789      	lsls	r1, r1, #30
 800c364:	d503      	bpl.n	800c36e <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c366:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c368:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c36c:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800c36e:	2000      	movs	r0, #0
 800c370:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c372:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c374:	f003 030c 	and.w	r3, r3, #12
 800c378:	2b08      	cmp	r3, #8
 800c37a:	d1f8      	bne.n	800c36e <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c37c:	f011 0301 	ands.w	r3, r1, #1
 800c380:	d004      	beq.n	800c38c <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c382:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c384:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c388:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800c38a:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c38c:	078a      	lsls	r2, r1, #30
 800c38e:	d505      	bpl.n	800c39c <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c390:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c392:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c396:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c39a:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800c39c:	6801      	ldr	r1, [r0, #0]
 800c39e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800c3a0:	ea22 0303 	bic.w	r3, r2, r3
 800c3a4:	630b      	str	r3, [r1, #48]	@ 0x30
 800c3a6:	e7e2      	b.n	800c36e <HAL_JPEG_Pause+0x22>

0800c3a8 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800c3a8:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800c3aa:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800c3ac:	4770      	bx	lr

0800c3ae <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800c3ae:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800c3b0:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800c3b4:	4770      	bx	lr

0800c3b6 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c3b6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800c3b8:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c3ba:	6803      	ldr	r3, [r0, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	f022 0201 	bic.w	r2, r2, #1
 800c3c2:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c3c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3c6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c3ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c3d2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800c3d4:	f043 0304 	orr.w	r3, r3, #4
 800c3d8:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800c3da:	f7f6 f949 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 800c3de:	bd08      	pop	{r3, pc}

0800c3e0 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c3e0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800c3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c3e8:	b922      	cbnz	r2, 800c3f4 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	f7ff ffae 	bl	800c34c <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	e004      	b.n	800c3fe <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c3f4:	6a03      	ldr	r3, [r0, #32]
 800c3f6:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c3f8:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c3fa:	d924      	bls.n	800c446 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c3fc:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800c3fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c400:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800c404:	d11e      	bne.n	800c444 <JPEG_ReadInputData+0x64>
 800c406:	b1ea      	cbz	r2, 800c444 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800c408:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800c40c:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800c40e:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800c412:	d827      	bhi.n	800c464 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c414:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800c416:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c418:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c41a:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c41c:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800c41e:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c420:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c422:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c426:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c42a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c42c:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c430:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c434:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c438:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800c43a:	6a22      	ldr	r2, [r4, #32]
 800c43c:	f102 0204 	add.w	r2, r2, #4
 800c440:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c442:	d1e8      	bne.n	800c416 <JPEG_ReadInputData+0x36>
}
 800c444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800c446:	429a      	cmp	r2, r3
 800c448:	d1d2      	bne.n	800c3f0 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c44a:	6a01      	ldr	r1, [r0, #32]
 800c44c:	f7f6 f8a2 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800c450:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c452:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c454:	bf84      	itt	hi
 800c456:	f023 0303 	bichi.w	r3, r3, #3
 800c45a:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800c45c:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800c45e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800c460:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800c462:	e7cc      	b.n	800c3fe <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800c464:	2a03      	cmp	r2, #3
 800c466:	d918      	bls.n	800c49a <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c468:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800c46a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c46c:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c46e:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c470:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800c472:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c474:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c476:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c47a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c47e:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c480:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c484:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c488:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c48c:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800c48e:	6a22      	ldr	r2, [r4, #32]
 800c490:	f102 0204 	add.w	r2, r2, #4
 800c494:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c496:	d1e8      	bne.n	800c46a <JPEG_ReadInputData+0x8a>
 800c498:	e7d4      	b.n	800c444 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800c49a:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c49c:	6a25      	ldr	r5, [r4, #32]
 800c49e:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800c4a0:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c4a2:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800c4a4:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c4a6:	fa05 f506 	lsl.w	r5, r5, r6
 800c4aa:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800c4ae:	6a25      	ldr	r5, [r4, #32]
 800c4b0:	f105 0501 	add.w	r5, r5, #1
 800c4b4:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800c4b6:	d1f1      	bne.n	800c49c <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800c4b8:	6822      	ldr	r2, [r4, #0]
 800c4ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800c4bc:	e7c2      	b.n	800c444 <JPEG_ReadInputData+0x64>

0800c4be <JPEG_MDMAInCpltCallback>:
{
 800c4be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c4c0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c4c2:	6822      	ldr	r2, [r4, #0]
 800c4c4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c4c6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800c4ca:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800c4cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c4ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c4d2:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800c4d6:	041b      	lsls	r3, r3, #16
 800c4d8:	0c1b      	lsrs	r3, r3, #16
 800c4da:	2b0c      	cmp	r3, #12
 800c4dc:	d11a      	bne.n	800c514 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c4de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c4e0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c4e2:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c4e4:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c4e6:	695a      	ldr	r2, [r3, #20]
 800c4e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c4ea:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800c4ee:	1a9b      	subs	r3, r3, r2
 800c4f0:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c4f2:	6a21      	ldr	r1, [r4, #32]
 800c4f4:	f7f6 f84e 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800c4f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c4fa:	42ab      	cmp	r3, r5
 800c4fc:	d327      	bcc.n	800c54e <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800c4fe:	b95d      	cbnz	r5, 800c518 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c500:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800c502:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c504:	f043 0304 	orr.w	r3, r3, #4
 800c508:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c50a:	2306      	movs	r3, #6
 800c50c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800c510:	f7f6 f8ae 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 800c514:	b003      	add	sp, #12
 800c516:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c518:	fbb3 f2f5 	udiv	r2, r3, r5
 800c51c:	fb05 3212 	mls	r2, r5, r2, r3
 800c520:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c522:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c524:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c526:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c528:	04db      	lsls	r3, r3, #19
 800c52a:	d40a      	bmi.n	800c542 <JPEG_MDMAInCpltCallback+0x84>
 800c52c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c52e:	b143      	cbz	r3, 800c542 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c530:	2101      	movs	r1, #1
 800c532:	3240      	adds	r2, #64	@ 0x40
 800c534:	9100      	str	r1, [sp, #0]
 800c536:	69a1      	ldr	r1, [r4, #24]
 800c538:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c53a:	f000 fd58 	bl	800cfee <HAL_MDMA_Start_IT>
 800c53e:	2800      	cmp	r0, #0
 800c540:	d1de      	bne.n	800c500 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c542:	6822      	ldr	r2, [r4, #0]
 800c544:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c546:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c54a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c54c:	e7e2      	b.n	800c514 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d0e8      	beq.n	800c524 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800c552:	079a      	lsls	r2, r3, #30
 800c554:	d0e6      	beq.n	800c524 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c556:	f023 0303 	bic.w	r3, r3, #3
 800c55a:	3304      	adds	r3, #4
 800c55c:	e7e1      	b.n	800c522 <JPEG_MDMAInCpltCallback+0x64>

0800c55e <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c55e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c562:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c566:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800c568:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d32a      	bcc.n	800c5c4 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800c56e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c570:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800c572:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c574:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800c576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800c578:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c57a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c57c:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c57e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c580:	69e0      	ldr	r0, [r4, #28]
 800c582:	4428      	add	r0, r5
 800c584:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800c588:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c58a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c58c:	69e0      	ldr	r0, [r4, #28]
 800c58e:	4428      	add	r0, r5
 800c590:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c594:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c598:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c59a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c59c:	69e0      	ldr	r0, [r4, #28]
 800c59e:	4428      	add	r0, r5
 800c5a0:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800c5a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c5a4:	f103 0304 	add.w	r3, r3, #4
 800c5a8:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800c5aa:	d1e1      	bne.n	800c570 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c5ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c5ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d106      	bne.n	800c5c2 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c5b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c5b6:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f7f6 f809 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800c5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800c5c4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d9fb      	bls.n	800c5c2 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c5ca:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c5cc:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c5ce:	1a9b      	subs	r3, r3, r2
 800c5d0:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800c5d2:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c5d4:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800c5d6:	d105      	bne.n	800c5e4 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c5d8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c5da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c5dc:	429f      	cmp	r7, r3
 800c5de:	d119      	bne.n	800c614 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c5e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c5e2:	e7e9      	b.n	800c5b8 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800c5e4:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800c5e6:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800c5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c5ea:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c5ec:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c5ee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c5f0:	69e1      	ldr	r1, [r4, #28]
 800c5f2:	4429      	add	r1, r5
 800c5f4:	0a1d      	lsrs	r5, r3, #8
 800c5f6:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c5f8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c5fa:	69e1      	ldr	r1, [r4, #28]
 800c5fc:	4429      	add	r1, r5
 800c5fe:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c600:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c602:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c604:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c606:	69e1      	ldr	r1, [r4, #28]
 800c608:	4429      	add	r1, r5
 800c60a:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800c60c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c60e:	3304      	adds	r3, #4
 800c610:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c612:	e7de      	b.n	800c5d2 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c614:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c616:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c618:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c61a:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800c61c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800c61e:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c620:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800c622:	d114      	bne.n	800c64e <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c624:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c626:	4620      	mov	r0, r4
 800c628:	f7f5 ffd2 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800c630:	1d2b      	adds	r3, r5, #4
 800c632:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800c634:	2b03      	cmp	r3, #3
 800c636:	d8c4      	bhi.n	800c5c2 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c638:	00da      	lsls	r2, r3, #3
 800c63a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c63c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800c63e:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c640:	fa26 f202 	lsr.w	r2, r6, r2
 800c644:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800c646:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c648:	3201      	adds	r2, #1
 800c64a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800c64c:	e7f2      	b.n	800c634 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c64e:	f002 0303 	and.w	r3, r2, #3
 800c652:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c656:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c658:	00db      	lsls	r3, r3, #3
 800c65a:	fa26 f303 	lsr.w	r3, r6, r3
 800c65e:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800c662:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c664:	3301      	adds	r3, #1
 800c666:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c668:	e7d9      	b.n	800c61e <JPEG_StoreOutputData+0xc0>

0800c66a <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c66a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c66c:	f003 0303 	and.w	r3, r3, #3
 800c670:	2b02      	cmp	r3, #2
{
 800c672:	b510      	push	{r4, lr}
 800c674:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c676:	d114      	bne.n	800c6a2 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c678:	6803      	ldr	r3, [r0, #0]
 800c67a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67c:	065b      	lsls	r3, r3, #25
 800c67e:	d510      	bpl.n	800c6a2 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c680:	1d01      	adds	r1, r0, #4
 800c682:	f7ff fdb7 	bl	800c1f4 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800c686:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c688:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800c68a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c68c:	f7f5 ff4c 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c698:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c69a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c69c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c6a0:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800c6a2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c6a4:	04d9      	lsls	r1, r3, #19
 800c6a6:	d407      	bmi.n	800c6b8 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6ac:	0792      	lsls	r2, r2, #30
 800c6ae:	d544      	bpl.n	800c73a <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c6b0:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff fe94 	bl	800c3e0 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c6b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c6ba:	0499      	lsls	r1, r3, #18
 800c6bc:	d407      	bmi.n	800c6ce <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6c2:	0712      	lsls	r2, r2, #28
 800c6c4:	d53e      	bpl.n	800c744 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c6c6:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f7ff ff48 	bl	800c55e <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6d2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c6d6:	2a20      	cmp	r2, #32
 800c6d8:	d13c      	bne.n	800c754 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	f022 0201 	bic.w	r2, r2, #1
 800c6e0:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c6e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6e4:	f002 020c 	and.w	r2, r2, #12
 800c6e8:	2a08      	cmp	r2, #8
 800c6ea:	d103      	bne.n	800c6f4 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c6ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6ee:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c6f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c6f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6f6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c6fa:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800c6fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c6fe:	b133      	cbz	r3, 800c70e <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c700:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c702:	4620      	mov	r0, r4
 800c704:	69e1      	ldr	r1, [r4, #28]
 800c706:	f7f5 ff63 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800c70e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c710:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c712:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c714:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c718:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c71c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c71e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800c720:	f04f 0200 	mov.w	r2, #0
 800c724:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c728:	f04f 0201 	mov.w	r2, #1
 800c72c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c730:	d10d      	bne.n	800c74e <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c732:	f7f5 ff9f 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800c736:	2001      	movs	r0, #1
}
 800c738:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800c73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c73c:	0758      	lsls	r0, r3, #29
 800c73e:	d5bb      	bpl.n	800c6b8 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800c740:	2101      	movs	r1, #1
 800c742:	e7b6      	b.n	800c6b2 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c746:	06db      	lsls	r3, r3, #27
 800c748:	d5c1      	bpl.n	800c6ce <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800c74a:	2101      	movs	r1, #1
 800c74c:	e7bc      	b.n	800c6c8 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c74e:	f7ff fe31 	bl	800c3b4 <HAL_JPEG_EncodeCpltCallback>
 800c752:	e7f0      	b.n	800c736 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800c754:	2000      	movs	r0, #0
 800c756:	e7ef      	b.n	800c738 <JPEG_Process+0xce>

0800c758 <JPEG_DMA_PollResidualData>:
{
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	4604      	mov	r4, r0
 800c75c:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c75e:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c760:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c762:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800c766:	d122      	bne.n	800c7ae <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c76a:	06d0      	lsls	r0, r2, #27
 800c76c:	d51f      	bpl.n	800c7ae <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800c76e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800c770:	69e1      	ldr	r1, [r4, #28]
 800c772:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c774:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800c776:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c778:	69e2      	ldr	r2, [r4, #28]
 800c77a:	440a      	add	r2, r1
 800c77c:	0a19      	lsrs	r1, r3, #8
 800c77e:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c780:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c782:	69e2      	ldr	r2, [r4, #28]
 800c784:	440a      	add	r2, r1
 800c786:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c788:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c78a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c78c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c78e:	69e2      	ldr	r2, [r4, #28]
 800c790:	440a      	add	r2, r1
 800c792:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800c794:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c796:	3304      	adds	r3, #4
 800c798:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c79a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c79c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d105      	bne.n	800c7ae <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c7a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	69e1      	ldr	r1, [r4, #28]
 800c7a8:	f7f5 ff12 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800c7ac:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c7ae:	3e01      	subs	r6, #1
 800c7b0:	d1d5      	bne.n	800c75e <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c7b2:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800c7b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c7b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c7b8:	06c9      	lsls	r1, r1, #27
 800c7ba:	d501      	bpl.n	800c7c0 <JPEG_DMA_PollResidualData+0x68>
 800c7bc:	0492      	lsls	r2, r2, #18
 800c7be:	d420      	bmi.n	800c802 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	f022 0201 	bic.w	r2, r2, #1
 800c7c6:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800c7c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c7ca:	b133      	cbz	r3, 800c7da <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c7cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	69e1      	ldr	r1, [r4, #28]
 800c7d2:	f7f5 fefd 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800c7da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c7dc:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c7de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c7e0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c7e4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c7e8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c7ea:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800c7ec:	f04f 0200 	mov.w	r2, #0
 800c7f0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c7f4:	f04f 0201 	mov.w	r2, #1
 800c7f8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c7fc:	d102      	bne.n	800c804 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c7fe:	f7f5 ff39 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800c802:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c804:	f7ff fdd6 	bl	800c3b4 <HAL_JPEG_EncodeCpltCallback>
}
 800c808:	e7fb      	b.n	800c802 <JPEG_DMA_PollResidualData+0xaa>

0800c80a <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800c80a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c80c:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800c810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c812:	4604      	mov	r4, r0
 800c814:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800c816:	d014      	beq.n	800c842 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c818:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c81a:	f003 030c 	and.w	r3, r3, #12
 800c81e:	2b0c      	cmp	r3, #12
 800c820:	d146      	bne.n	800c8b0 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c822:	07cb      	lsls	r3, r1, #31
 800c824:	d520      	bpl.n	800c868 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800c826:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c828:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c82c:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c82e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c830:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800c832:	b941      	cbnz	r1, 800c846 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c834:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c836:	f043 0304 	orr.w	r3, r3, #4
 800c83a:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c83c:	2306      	movs	r3, #6
 800c83e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800c842:	2001      	movs	r0, #1
 800c844:	e01d      	b.n	800c882 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800c846:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c848:	fbb3 f2f1 	udiv	r2, r3, r1
 800c84c:	fb01 3212 	mls	r2, r1, r2, r3
 800c850:	1a9b      	subs	r3, r3, r2
 800c852:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800c854:	b143      	cbz	r3, 800c868 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c856:	6822      	ldr	r2, [r4, #0]
 800c858:	2101      	movs	r1, #1
 800c85a:	3240      	adds	r2, #64	@ 0x40
 800c85c:	9100      	str	r1, [sp, #0]
 800c85e:	69a1      	ldr	r1, [r4, #24]
 800c860:	f000 fbc5 	bl	800cfee <HAL_MDMA_Start_IT>
 800c864:	2800      	cmp	r0, #0
 800c866:	d1e5      	bne.n	800c834 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c868:	07a8      	lsls	r0, r5, #30
 800c86a:	d509      	bpl.n	800c880 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800c86c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c86e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c872:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800c874:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c876:	0419      	lsls	r1, r3, #16
 800c878:	d505      	bpl.n	800c886 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800c87a:	4620      	mov	r0, r4
 800c87c:	f7ff ff6c 	bl	800c758 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800c880:	2000      	movs	r0, #0
}
 800c882:	b003      	add	sp, #12
 800c884:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c886:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800c888:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800c88a:	2900      	cmp	r1, #0
 800c88c:	d0d2      	beq.n	800c834 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800c88e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c890:	fbb3 f2f1 	udiv	r2, r3, r1
 800c894:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c898:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800c89a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c89c:	2201      	movs	r2, #1
 800c89e:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800c8a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c8a2:	9200      	str	r2, [sp, #0]
 800c8a4:	69e2      	ldr	r2, [r4, #28]
 800c8a6:	f000 fba2 	bl	800cfee <HAL_MDMA_Start_IT>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d0e8      	beq.n	800c880 <HAL_JPEG_Resume+0x76>
 800c8ae:	e7c1      	b.n	800c834 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c8b0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c8b2:	f003 030c 	and.w	r3, r3, #12
 800c8b6:	2b08      	cmp	r3, #8
 800c8b8:	d1e2      	bne.n	800c880 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c8ba:	f011 0301 	ands.w	r3, r1, #1
 800c8be:	d004      	beq.n	800c8ca <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800c8c0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c8c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c8c6:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800c8c8:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c8ca:	07aa      	lsls	r2, r5, #30
 800c8cc:	d505      	bpl.n	800c8da <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800c8ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c8d0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800c8d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c8d8:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800c8da:	6821      	ldr	r1, [r4, #0]
 800c8dc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	630b      	str	r3, [r1, #48]	@ 0x30
 800c8e2:	e7cd      	b.n	800c880 <HAL_JPEG_Resume+0x76>

0800c8e4 <JPEG_DMA_EndProcess>:
{
 800c8e4:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c8e6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800c8e8:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c8ea:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c8f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d105      	bne.n	800c90a <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c8fe:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800c900:	69c1      	ldr	r1, [r0, #28]
 800c902:	f7f5 fe65 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800c90e:	f015 0510 	ands.w	r5, r5, #16
 800c912:	d124      	bne.n	800c95e <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800c914:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c916:	b12b      	cbz	r3, 800c924 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c918:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c91a:	4620      	mov	r0, r4
 800c91c:	69e1      	ldr	r1, [r4, #28]
 800c91e:	f7f5 fe57 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c922:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c924:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c926:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c928:	6813      	ldr	r3, [r2, #0]
 800c92a:	f023 0301 	bic.w	r3, r3, #1
 800c92e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800c930:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c932:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c934:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c938:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c93c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c93e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800c940:	f04f 0200 	mov.w	r2, #0
 800c944:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c948:	f04f 0201 	mov.w	r2, #1
 800c94c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c950:	d102      	bne.n	800c958 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c952:	f7f5 fe8f 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800c956:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c958:	f7ff fd2c 	bl	800c3b4 <HAL_JPEG_EncodeCpltCallback>
 800c95c:	e7fb      	b.n	800c956 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c95e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c960:	049b      	lsls	r3, r3, #18
 800c962:	d4f8      	bmi.n	800c956 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800c964:	4620      	mov	r0, r4
}
 800c966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800c96a:	f7ff bef5 	b.w	800c758 <JPEG_DMA_PollResidualData>

0800c96e <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c96e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800c970:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c972:	041b      	lsls	r3, r3, #16
 800c974:	d501      	bpl.n	800c97a <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800c976:	f7ff bfb5 	b.w	800c8e4 <JPEG_DMA_EndProcess>
}
 800c97a:	4770      	bx	lr

0800c97c <JPEG_MDMAOutCpltCallback>:
{
 800c97c:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c97e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c984:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c988:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800c98a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c98c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800c990:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800c994:	0412      	lsls	r2, r2, #16
 800c996:	0c12      	lsrs	r2, r2, #16
 800c998:	2a0c      	cmp	r2, #12
 800c99a:	d125      	bne.n	800c9e8 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800c99c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c99e:	069a      	lsls	r2, r3, #26
 800c9a0:	d424      	bmi.n	800c9ec <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c9a2:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c9a8:	695a      	ldr	r2, [r3, #20]
 800c9aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c9ac:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800c9b0:	1a9b      	subs	r3, r3, r2
 800c9b2:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c9b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c9b6:	f7f5 fe0b 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c9ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c9bc:	049b      	lsls	r3, r3, #18
 800c9be:	d415      	bmi.n	800c9ec <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c9c0:	6821      	ldr	r1, [r4, #0]
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	3144      	adds	r1, #68	@ 0x44
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c9ca:	69e2      	ldr	r2, [r4, #28]
 800c9cc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800c9ce:	f000 fb0e 	bl	800cfee <HAL_MDMA_Start_IT>
 800c9d2:	b158      	cbz	r0, 800c9ec <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c9d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800c9d6:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c9d8:	f043 0304 	orr.w	r3, r3, #4
 800c9dc:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c9de:	2306      	movs	r3, #6
 800c9e0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800c9e4:	f7f5 fe44 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 800c9e8:	b002      	add	sp, #8
 800c9ea:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c9ec:	6822      	ldr	r2, [r4, #0]
 800c9ee:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c9f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c9f4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c9f6:	e7f7      	b.n	800c9e8 <JPEG_MDMAOutCpltCallback+0x6c>

0800c9f8 <HAL_JPEG_IRQHandler>:
{
 800c9f8:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800c9fa:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800c9fe:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ca00:	3b03      	subs	r3, #3
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d850      	bhi.n	800caa8 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ca06:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ca08:	f003 030c 	and.w	r3, r3, #12
 800ca0c:	2b08      	cmp	r3, #8
 800ca0e:	d103      	bne.n	800ca18 <HAL_JPEG_IRQHandler+0x20>
}
 800ca10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800ca14:	f7ff be29 	b.w	800c66a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ca18:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ca1a:	f003 030c 	and.w	r3, r3, #12
 800ca1e:	2b0c      	cmp	r3, #12
 800ca20:	d142      	bne.n	800caa8 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ca22:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ca24:	f003 0303 	and.w	r3, r3, #3
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d114      	bne.n	800ca56 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ca2c:	6803      	ldr	r3, [r0, #0]
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca30:	0659      	lsls	r1, r3, #25
 800ca32:	d510      	bpl.n	800ca56 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ca34:	1d01      	adds	r1, r0, #4
 800ca36:	f7ff fbdd 	bl	800c1f4 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ca3a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ca3c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ca3e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ca40:	f7f5 fd72 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca4c:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ca4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca54:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca5a:	0692      	lsls	r2, r2, #26
 800ca5c:	d524      	bpl.n	800caa8 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ca5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800ca60:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ca62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ca66:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	f022 0201 	bic.w	r2, r2, #1
 800ca6e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ca70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca72:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ca76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ca78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca7a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ca7e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800ca80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d101      	bne.n	800ca8c <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800ca88:	f000 fafa 	bl	800d080 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800ca8c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ca8e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d103      	bne.n	800ca9e <HAL_JPEG_IRQHandler+0xa6>
}
 800ca96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800ca9a:	f000 baf1 	b.w	800d080 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800ca9e:	4620      	mov	r0, r4
}
 800caa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800caa4:	f7ff bf1e 	b.w	800c8e4 <JPEG_DMA_EndProcess>
}
 800caa8:	bd10      	pop	{r4, pc}

0800caaa <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800caaa:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800caac:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800caae:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cab2:	3284      	adds	r2, #132	@ 0x84
 800cab4:	1883      	adds	r3, r0, r2
{
 800cab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800caba:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800cabc:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cac0:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cac2:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cac6:	684c      	ldr	r4, [r1, #4]
 800cac8:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cacc:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800cad0:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cad4:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cad6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800cad8:	68c5      	ldr	r5, [r0, #12]
 800cada:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800cade:	443d      	add	r5, r7
 800cae0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800cae4:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800cae6:	68c6      	ldr	r6, [r0, #12]
 800cae8:	68cd      	ldr	r5, [r1, #12]
 800caea:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800caee:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800caf0:	689d      	ldr	r5, [r3, #8]
 800caf2:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800caf6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800caf8:	688d      	ldr	r5, [r1, #8]
 800cafa:	68c7      	ldr	r7, [r0, #12]
 800cafc:	3501      	adds	r5, #1
 800cafe:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800cb02:	443d      	add	r5, r7
 800cb04:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800cb08:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800cb0a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800cb0c:	691d      	ldr	r5, [r3, #16]
 800cb0e:	f025 0507 	bic.w	r5, r5, #7
 800cb12:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800cb14:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cb16:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800cb18:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800cb1c:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cb20:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800cb24:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800cb28:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800cb2c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800cb30:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800cb34:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800cb36:	695d      	ldr	r5, [r3, #20]
 800cb38:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800cb3c:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800cb3e:	694d      	ldr	r5, [r1, #20]
 800cb40:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800cb42:	69dd      	ldr	r5, [r3, #28]
 800cb44:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800cb48:	f025 0507 	bic.w	r5, r5, #7
 800cb4c:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800cb4e:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800cb52:	433d      	orrs	r5, r7
 800cb54:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800cb56:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800cb58:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800cb5a:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800cb5e:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cb60:	b31e      	cbz	r6, 800cbaa <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800cb62:	2e01      	cmp	r6, #1
 800cb64:	d023      	beq.n	800cbae <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800cb66:	1eb5      	subs	r5, r6, #2
 800cb68:	2d02      	cmp	r5, #2
 800cb6a:	d922      	bls.n	800cbb2 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800cb6c:	2e07      	cmp	r6, #7
 800cb6e:	bf14      	ite	ne
 800cb70:	2501      	movne	r5, #1
 800cb72:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cb74:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cb76:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cb7a:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cb7e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cb80:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cb82:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800cb84:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cb86:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800cb88:	436e      	muls	r6, r5
 800cb8a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800cb8e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800cb90:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800cb92:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800cb96:	f024 0407 	bic.w	r4, r4, #7
 800cb9a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cb9c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800cb9e:	5883      	ldr	r3, [r0, r2]
 800cba0:	f043 0301 	orr.w	r3, r3, #1
 800cba4:	5083      	str	r3, [r0, r2]
}
 800cba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800cbaa:	2504      	movs	r5, #4
 800cbac:	e7e2      	b.n	800cb74 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800cbae:	2503      	movs	r5, #3
 800cbb0:	e7e0      	b.n	800cb74 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800cbb2:	2502      	movs	r5, #2
 800cbb4:	e7de      	b.n	800cb74 <LTDC_SetConfig+0xca>
	...

0800cbb8 <HAL_LTDC_Init>:
{
 800cbb8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800cbba:	4604      	mov	r4, r0
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d063      	beq.n	800cc88 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800cbc0:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800cbc4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800cbc8:	b91b      	cbnz	r3, 800cbd2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800cbca:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800cbce:	f7f4 fae5 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	699a      	ldr	r2, [r3, #24]
 800cbdc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800cbe0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cbe2:	6999      	ldr	r1, [r3, #24]
 800cbe4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800cbe8:	4302      	orrs	r2, r0
 800cbea:	68e0      	ldr	r0, [r4, #12]
 800cbec:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800cbee:	6920      	ldr	r0, [r4, #16]
 800cbf0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800cbf2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cbf4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800cbf6:	4925      	ldr	r1, [pc, #148]	@ (800cc8c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cbf8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800cbfa:	689a      	ldr	r2, [r3, #8]
 800cbfc:	400a      	ands	r2, r1
 800cbfe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cc00:	689a      	ldr	r2, [r3, #8]
 800cc02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cc06:	69a0      	ldr	r0, [r4, #24]
 800cc08:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800cc0a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cc0c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800cc0e:	68da      	ldr	r2, [r3, #12]
 800cc10:	400a      	ands	r2, r1
 800cc12:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800cc14:	68da      	ldr	r2, [r3, #12]
 800cc16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cc1a:	6a20      	ldr	r0, [r4, #32]
 800cc1c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800cc1e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800cc20:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800cc22:	691a      	ldr	r2, [r3, #16]
 800cc24:	400a      	ands	r2, r1
 800cc26:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800cc28:	691a      	ldr	r2, [r3, #16]
 800cc2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cc2e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cc30:	4302      	orrs	r2, r0
 800cc32:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800cc34:	695a      	ldr	r2, [r3, #20]
 800cc36:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800cc38:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800cc3a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800cc3c:	695a      	ldr	r2, [r3, #20]
 800cc3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cc42:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cc44:	430a      	orrs	r2, r1
 800cc46:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800cc4a:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cc4e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800cc52:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cc56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800cc58:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800cc5a:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800cc5e:	432a      	orrs	r2, r5
 800cc60:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800cc64:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800cc66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cc6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800cc6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc6e:	f042 0206 	orr.w	r2, r2, #6
 800cc72:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800cc74:	699a      	ldr	r2, [r3, #24]
 800cc76:	f042 0201 	orr.w	r2, r2, #1
 800cc7a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800cc7c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800cc7e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800cc82:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800cc88:	2001      	movs	r0, #1
 800cc8a:	e7fc      	b.n	800cc86 <HAL_LTDC_Init+0xce>
 800cc8c:	f000f800 	.word	0xf000f800

0800cc90 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800cc90:	4770      	bx	lr

0800cc92 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800cc92:	4770      	bx	lr

0800cc94 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800cc94:	4770      	bx	lr

0800cc96 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800cc96:	6803      	ldr	r3, [r0, #0]
{
 800cc98:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800cc9a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800cc9c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800cc9e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800cca0:	0772      	lsls	r2, r6, #29
 800cca2:	d514      	bpl.n	800ccce <HAL_LTDC_IRQHandler+0x38>
 800cca4:	0769      	lsls	r1, r5, #29
 800cca6:	d512      	bpl.n	800ccce <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800cca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccaa:	f022 0204 	bic.w	r2, r2, #4
 800ccae:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ccb0:	2204      	movs	r2, #4
 800ccb2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ccb4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800ccb8:	f043 0301 	orr.w	r3, r3, #1
 800ccbc:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800ccc0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ccc2:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800ccc6:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800ccca:	f7ff ffe1 	bl	800cc90 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ccce:	07b2      	lsls	r2, r6, #30
 800ccd0:	d516      	bpl.n	800cd00 <HAL_LTDC_IRQHandler+0x6a>
 800ccd2:	07ab      	lsls	r3, r5, #30
 800ccd4:	d514      	bpl.n	800cd00 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ccd6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800ccd8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ccda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccdc:	f022 0202 	bic.w	r2, r2, #2
 800cce0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800cce2:	2202      	movs	r2, #2
 800cce4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800cce6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800ccea:	4313      	orrs	r3, r2
 800ccec:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ccf0:	2304      	movs	r3, #4
 800ccf2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800ccfc:	f7ff ffc8 	bl	800cc90 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800cd00:	07f0      	lsls	r0, r6, #31
 800cd02:	d510      	bpl.n	800cd26 <HAL_LTDC_IRQHandler+0x90>
 800cd04:	07e9      	lsls	r1, r5, #31
 800cd06:	d50e      	bpl.n	800cd26 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800cd08:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800cd0a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800cd0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd0e:	f022 0201 	bic.w	r2, r2, #1
 800cd12:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800cd14:	2201      	movs	r2, #1
 800cd16:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800cd18:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800cd1a:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800cd1e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800cd22:	f7ff ffb6 	bl	800cc92 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800cd26:	0732      	lsls	r2, r6, #28
 800cd28:	d511      	bpl.n	800cd4e <HAL_LTDC_IRQHandler+0xb8>
 800cd2a:	072b      	lsls	r3, r5, #28
 800cd2c:	d50f      	bpl.n	800cd4e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800cd2e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800cd30:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800cd32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd34:	f022 0208 	bic.w	r2, r2, #8
 800cd38:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800cd3a:	2208      	movs	r2, #8
 800cd3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800cd44:	2300      	movs	r3, #0
 800cd46:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800cd4a:	f7ff ffa3 	bl	800cc94 <HAL_LTDC_ReloadEventCallback>
}
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}

0800cd50 <HAL_LTDC_ConfigLayer>:
{
 800cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800cd54:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800cd58:	4606      	mov	r6, r0
 800cd5a:	460f      	mov	r7, r1
 800cd5c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	f04f 0002 	mov.w	r0, #2
 800cd64:	d01f      	beq.n	800cda6 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cd66:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800cd68:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cd6c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cd6e:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cd72:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800cd76:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cd7a:	3438      	adds	r4, #56	@ 0x38
 800cd7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd88:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	4662      	mov	r2, ip
 800cd8e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800cd90:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800cd92:	f7ff fe8a 	bl	800caaa <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800cd96:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800cd98:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800cd9a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800cd9e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800cda2:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800cda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cdac <HAL_LTDC_SetPitch>:
{
 800cdac:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800cdae:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	f04f 0302 	mov.w	r3, #2
 800cdb8:	d02c      	beq.n	800ce14 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800cdba:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cdbc:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800cdc0:	fb04 0402 	mla	r4, r4, r2, r0
 800cdc4:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cdc6:	b33c      	cbz	r4, 800ce18 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800cdc8:	2c01      	cmp	r4, #1
 800cdca:	d027      	beq.n	800ce1c <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800cdcc:	1ea5      	subs	r5, r4, #2
 800cdce:	429d      	cmp	r5, r3
 800cdd0:	d902      	bls.n	800cdd8 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800cdd2:	2c07      	cmp	r4, #7
 800cdd4:	bf18      	it	ne
 800cdd6:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800cdd8:	01d2      	lsls	r2, r2, #7
 800cdda:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800cddc:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800cdde:	3284      	adds	r2, #132	@ 0x84
 800cde0:	4422      	add	r2, r4
 800cde2:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800cde4:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800cde8:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800cdec:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800cdee:	4c0c      	ldr	r4, [pc, #48]	@ (800ce20 <HAL_LTDC_SetPitch+0x74>)
 800cdf0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cdf2:	f045 0501 	orr.w	r5, r5, #1
 800cdf6:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800cdf8:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800cdfa:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800cdfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800ce00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce02:	f043 0301 	orr.w	r3, r3, #1
 800ce06:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800ce18:	2304      	movs	r3, #4
 800ce1a:	e7dd      	b.n	800cdd8 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e7db      	b.n	800cdd8 <HAL_LTDC_SetPitch+0x2c>
 800ce20:	50001000 	.word	0x50001000

0800ce24 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ce24:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800ce26:	6804      	ldr	r4, [r0, #0]
 800ce28:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ce2c:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800ce30:	6965      	ldr	r5, [r4, #20]
 800ce32:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800ce36:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800ce3a:	ea45 0503 	orr.w	r5, r5, r3
 800ce3e:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ce40:	9d03      	ldr	r5, [sp, #12]
 800ce42:	6963      	ldr	r3, [r4, #20]
 800ce44:	f105 35ff 	add.w	r5, r5, #4294967295
 800ce48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce4c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800ce50:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800ce52:	f04f 031f 	mov.w	r3, #31
 800ce56:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800ce58:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800ce5a:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800ce5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ce5e:	bf0c      	ite	eq
 800ce60:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ce64:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ce68:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ce6c:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800ce6e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ce70:	bf0c      	ite	eq
 800ce72:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800ce76:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800ce7a:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800ce7c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800ce7e:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800ce80:	bd30      	pop	{r4, r5, pc}

0800ce82 <HAL_MDMA_Init>:
{
 800ce82:	b538      	push	{r3, r4, r5, lr}
 800ce84:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ce86:	f7fd fb15 	bl	800a4b4 <HAL_GetTick>
 800ce8a:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800ce8c:	2c00      	cmp	r4, #0
 800ce8e:	d061      	beq.n	800cf54 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800ce90:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800ce92:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800ce94:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ce98:	2302      	movs	r3, #2
 800ce9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800ce9e:	68d3      	ldr	r3, [r2, #12]
 800cea0:	f023 0301 	bic.w	r3, r3, #1
 800cea4:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	68da      	ldr	r2, [r3, #12]
 800ceaa:	07d2      	lsls	r2, r2, #31
 800ceac:	d448      	bmi.n	800cf40 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ceae:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ceb6:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800ceba:	430a      	orrs	r2, r1
 800cebc:	69e1      	ldr	r1, [r4, #28]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	6a21      	ldr	r1, [r4, #32]
 800cec2:	430a      	orrs	r2, r1
 800cec4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cec6:	430a      	orrs	r2, r1
 800cec8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ceca:	430a      	orrs	r2, r1
 800cecc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cece:	430a      	orrs	r2, r1
 800ced0:	68a1      	ldr	r1, [r4, #8]
 800ced2:	430a      	orrs	r2, r1
 800ced4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ced6:	3901      	subs	r1, #1
 800ced8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800cedc:	6861      	ldr	r1, [r4, #4]
 800cede:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cee2:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800cee4:	d103      	bne.n	800ceee <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800cee6:	691a      	ldr	r2, [r3, #16]
 800cee8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800ceec:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ceee:	2200      	movs	r2, #0
 800cef0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800cef2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800cef4:	2a00      	cmp	r2, #0
 800cef6:	da04      	bge.n	800cf02 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800cef8:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800cefa:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800cefc:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800cf00:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800cf02:	b292      	uxth	r2, r2
 800cf04:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800cf06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cf08:	2a00      	cmp	r2, #0
 800cf0a:	da25      	bge.n	800cf58 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800cf0c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800cf0e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800cf10:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800cf14:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cf16:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cf18:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800cf1c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cf20:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800cf22:	f04f 0200 	mov.w	r2, #0
 800cf26:	d019      	beq.n	800cf5c <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800cf28:	b2c9      	uxtb	r1, r1
 800cf2a:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800cf2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800cf2e:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800cf30:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800cf32:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800cf34:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800cf36:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800cf3a:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800cf3e:	e00a      	b.n	800cf56 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800cf40:	f7fd fab8 	bl	800a4b4 <HAL_GetTick>
 800cf44:	1b40      	subs	r0, r0, r5
 800cf46:	2805      	cmp	r0, #5
 800cf48:	d9ad      	bls.n	800cea6 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800cf4a:	2340      	movs	r3, #64	@ 0x40
 800cf4c:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800cf54:	2001      	movs	r0, #1
}
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cf58:	6a18      	ldr	r0, [r3, #32]
 800cf5a:	e7dd      	b.n	800cf18 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800cf5c:	629a      	str	r2, [r3, #40]	@ 0x28
 800cf5e:	e7e5      	b.n	800cf2c <HAL_MDMA_Init+0xaa>

0800cf60 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800cf60:	b1d8      	cbz	r0, 800cf9a <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800cf62:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800cf64:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800cf66:	68d3      	ldr	r3, [r2, #12]
 800cf68:	f023 0301 	bic.w	r3, r3, #1
 800cf6c:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800cf72:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800cf74:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800cf76:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800cf78:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800cf7a:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800cf7c:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800cf7e:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800cf80:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800cf82:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800cf84:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800cf86:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800cf88:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800cf8a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800cf8e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800cf92:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800cf96:	4618      	mov	r0, r3
 800cf98:	4770      	bx	lr
    return HAL_ERROR;
 800cf9a:	2001      	movs	r0, #1
}
 800cf9c:	4770      	bx	lr

0800cf9e <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800cf9e:	4603      	mov	r3, r0
{
 800cfa0:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800cfa2:	b300      	cbz	r0, 800cfe6 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800cfa4:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800cfa8:	2801      	cmp	r0, #1
 800cfaa:	d01e      	beq.n	800cfea <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800cfac:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800cfae:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800cfb2:	42a5      	cmp	r5, r4
 800cfb4:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800cfb6:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800cfba:	d112      	bne.n	800cfe2 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800cfbc:	681c      	ldr	r4, [r3, #0]
 800cfbe:	6925      	ldr	r5, [r4, #16]
 800cfc0:	006d      	lsls	r5, r5, #1
 800cfc2:	d407      	bmi.n	800cfd4 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800cfc4:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800cfc6:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800cfc8:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800cfca:	b939      	cbnz	r1, 800cfdc <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800cfcc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800cfd0:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800cfd2:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800cfda:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800cfdc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cfe0:	e7f6      	b.n	800cfd0 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	e7f6      	b.n	800cfd4 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	e7f7      	b.n	800cfda <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800cfea:	2002      	movs	r0, #2
 800cfec:	e7f5      	b.n	800cfda <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800cfee <HAL_MDMA_Start_IT>:
{
 800cfee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800cff0:	4604      	mov	r4, r0
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d042      	beq.n	800d07c <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800cff6:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800cffa:	2d01      	cmp	r5, #1
 800cffc:	d03c      	beq.n	800d078 <HAL_MDMA_Start_IT+0x8a>
 800cffe:	2501      	movs	r5, #1
 800d000:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d004:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800d008:	2d01      	cmp	r5, #1
 800d00a:	f04f 0500 	mov.w	r5, #0
 800d00e:	d131      	bne.n	800d074 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800d010:	2602      	movs	r6, #2
 800d012:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d016:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800d018:	6805      	ldr	r5, [r0, #0]
 800d01a:	68ee      	ldr	r6, [r5, #12]
 800d01c:	f026 0601 	bic.w	r6, r6, #1
 800d020:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800d022:	9e06      	ldr	r6, [sp, #24]
 800d024:	9600      	str	r6, [sp, #0]
 800d026:	f7ff fefd 	bl	800ce24 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800d02a:	68eb      	ldr	r3, [r5, #12]
 800d02c:	f043 0306 	orr.w	r3, r3, #6
 800d030:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800d032:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d034:	b11b      	cbz	r3, 800d03e <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800d036:	68eb      	ldr	r3, [r5, #12]
 800d038:	f043 0310 	orr.w	r3, r3, #16
 800d03c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d03e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d040:	b11b      	cbz	r3, 800d04a <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800d042:	68eb      	ldr	r3, [r5, #12]
 800d044:	f043 0308 	orr.w	r3, r3, #8
 800d048:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800d04a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d04c:	b11b      	cbz	r3, 800d056 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800d04e:	68eb      	ldr	r3, [r5, #12]
 800d050:	f043 0320 	orr.w	r3, r3, #32
 800d054:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800d056:	68eb      	ldr	r3, [r5, #12]
 800d058:	f043 0301 	orr.w	r3, r3, #1
 800d05c:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d05e:	6863      	ldr	r3, [r4, #4]
 800d060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d064:	d103      	bne.n	800d06e <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800d066:	68eb      	ldr	r3, [r5, #12]
 800d068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d06c:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800d06e:	2000      	movs	r0, #0
}
 800d070:	b002      	add	sp, #8
 800d072:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800d074:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800d078:	2002      	movs	r0, #2
 800d07a:	e7f9      	b.n	800d070 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800d07c:	2001      	movs	r0, #1
 800d07e:	e7f7      	b.n	800d070 <HAL_MDMA_Start_IT+0x82>

0800d080 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800d080:	b128      	cbz	r0, 800d08e <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800d082:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d086:	2b02      	cmp	r3, #2
 800d088:	d003      	beq.n	800d092 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800d08a:	2380      	movs	r3, #128	@ 0x80
 800d08c:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800d08e:	2001      	movs	r0, #1
 800d090:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800d092:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d094:	2304      	movs	r3, #4
 800d096:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800d09a:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800d09c:	68d3      	ldr	r3, [r2, #12]
 800d09e:	f023 0301 	bic.w	r3, r3, #1
 800d0a2:	60d3      	str	r3, [r2, #12]
}
 800d0a4:	4770      	bx	lr
	...

0800d0a8 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800d0a8:	2300      	movs	r3, #0
{
 800d0aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800d0ac:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d0ae:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800d0b2:	4b58      	ldr	r3, [pc, #352]	@ (800d214 <HAL_MDMA_IRQHandler+0x16c>)
{
 800d0b4:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d0b6:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800d0b8:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d0ba:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d0bc:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d0be:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800d0c2:	3a40      	subs	r2, #64	@ 0x40
 800d0c4:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800d0c8:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d0cc:	4202      	tst	r2, r0
 800d0ce:	f000 809e 	beq.w	800d20e <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	07d1      	lsls	r1, r2, #31
 800d0d6:	d529      	bpl.n	800d12c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800d0d8:	68da      	ldr	r2, [r3, #12]
 800d0da:	0792      	lsls	r2, r2, #30
 800d0dc:	d526      	bpl.n	800d12c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800d0de:	68da      	ldr	r2, [r3, #12]
 800d0e0:	f022 0202 	bic.w	r2, r2, #2
 800d0e4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800d0e6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d0e8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800d0ea:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d0ec:	bf54      	ite	pl
 800d0ee:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800d0f2:	f041 0102 	orrmi.w	r1, r1, #2
 800d0f6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800d0f8:	0591      	lsls	r1, r2, #22
 800d0fa:	d503      	bpl.n	800d104 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800d0fc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d0fe:	f041 0104 	orr.w	r1, r1, #4
 800d102:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800d104:	05d0      	lsls	r0, r2, #23
 800d106:	d503      	bpl.n	800d110 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800d108:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d10a:	f041 0108 	orr.w	r1, r1, #8
 800d10e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800d110:	0551      	lsls	r1, r2, #21
 800d112:	d503      	bpl.n	800d11c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800d114:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d116:	f041 0110 	orr.w	r1, r1, #16
 800d11a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800d11c:	0512      	lsls	r2, r2, #20
 800d11e:	d503      	bpl.n	800d128 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800d120:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800d122:	f042 0220 	orr.w	r2, r2, #32
 800d126:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800d128:	2201      	movs	r2, #1
 800d12a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	06d0      	lsls	r0, r2, #27
 800d130:	d508      	bpl.n	800d144 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800d132:	68da      	ldr	r2, [r3, #12]
 800d134:	0691      	lsls	r1, r2, #26
 800d136:	d505      	bpl.n	800d144 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800d138:	2210      	movs	r2, #16
 800d13a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800d13c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d13e:	b10b      	cbz	r3, 800d144 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800d140:	4620      	mov	r0, r4
 800d142:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	0712      	lsls	r2, r2, #28
 800d14a:	d508      	bpl.n	800d15e <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800d14c:	68da      	ldr	r2, [r3, #12]
 800d14e:	06d0      	lsls	r0, r2, #27
 800d150:	d505      	bpl.n	800d15e <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800d152:	2208      	movs	r2, #8
 800d154:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800d156:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d158:	b10b      	cbz	r3, 800d15e <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800d15a:	4620      	mov	r0, r4
 800d15c:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	0751      	lsls	r1, r2, #29
 800d164:	d508      	bpl.n	800d178 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800d166:	68da      	ldr	r2, [r3, #12]
 800d168:	0712      	lsls	r2, r2, #28
 800d16a:	d505      	bpl.n	800d178 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800d16c:	2204      	movs	r2, #4
 800d16e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d170:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d172:	b10b      	cbz	r3, 800d178 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800d174:	4620      	mov	r0, r4
 800d176:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	0790      	lsls	r0, r2, #30
 800d17e:	d524      	bpl.n	800d1ca <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800d180:	68da      	ldr	r2, [r3, #12]
 800d182:	0751      	lsls	r1, r2, #29
 800d184:	d521      	bpl.n	800d1ca <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800d18c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800d18e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800d192:	2a04      	cmp	r2, #4
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	d10c      	bne.n	800d1b4 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800d19a:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800d19c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800d1a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800d1a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d031      	beq.n	800d20e <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800d1aa:	4620      	mov	r0, r4
}
 800d1ac:	b003      	add	sp, #12
 800d1ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800d1b2:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800d1b4:	2102      	movs	r1, #2
 800d1b6:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800d1b8:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800d1ba:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800d1be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800d1c2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d1c4:	b10b      	cbz	r3, 800d1ca <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800d1ca:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800d1cc:	b1fb      	cbz	r3, 800d20e <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800d1ce:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800d1d2:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d1d6:	2304      	movs	r3, #4
 800d1d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	68da      	ldr	r2, [r3, #12]
 800d1e0:	f022 0201 	bic.w	r2, r2, #1
 800d1e4:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800d1e6:	9a01      	ldr	r2, [sp, #4]
 800d1e8:	3201      	adds	r2, #1
 800d1ea:	42aa      	cmp	r2, r5
 800d1ec:	9201      	str	r2, [sp, #4]
 800d1ee:	d802      	bhi.n	800d1f6 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800d1f0:	68da      	ldr	r2, [r3, #12]
 800d1f2:	07d2      	lsls	r2, r2, #31
 800d1f4:	d4f7      	bmi.n	800d1e6 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d200:	bf4c      	ite	mi
 800d202:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800d204:	2301      	movpl	r3, #1
 800d206:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800d20a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d20c:	e7cb      	b.n	800d1a6 <HAL_MDMA_IRQHandler+0xfe>
}
 800d20e:	b003      	add	sp, #12
 800d210:	bd30      	pop	{r4, r5, pc}
 800d212:	bf00      	nop
 800d214:	2400006c 	.word	0x2400006c

0800d218 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d218:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d21a:	4d1c      	ldr	r5, [pc, #112]	@ (800d28c <HAL_PWREx_ConfigSupply+0x74>)
{
 800d21c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d21e:	68eb      	ldr	r3, [r5, #12]
 800d220:	f003 0307 	and.w	r3, r3, #7
 800d224:	2b06      	cmp	r3, #6
 800d226:	d006      	beq.n	800d236 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d228:	68e8      	ldr	r0, [r5, #12]
 800d22a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800d22e:	1b00      	subs	r0, r0, r4
 800d230:	bf18      	it	ne
 800d232:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800d234:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d236:	68eb      	ldr	r3, [r5, #12]
 800d238:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800d23c:	4303      	orrs	r3, r0
 800d23e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800d240:	f7fd f938 	bl	800a4b4 <HAL_GetTick>
 800d244:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d246:	686b      	ldr	r3, [r5, #4]
 800d248:	049a      	lsls	r2, r3, #18
 800d24a:	d508      	bpl.n	800d25e <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800d24c:	f1a4 031d 	sub.w	r3, r4, #29
 800d250:	2b01      	cmp	r3, #1
 800d252:	d90c      	bls.n	800d26e <HAL_PWREx_ConfigSupply+0x56>
 800d254:	3c2d      	subs	r4, #45	@ 0x2d
 800d256:	2c01      	cmp	r4, #1
 800d258:	d909      	bls.n	800d26e <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800d25a:	2000      	movs	r0, #0
 800d25c:	e7ea      	b.n	800d234 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d25e:	f7fd f929 	bl	800a4b4 <HAL_GetTick>
 800d262:	1b80      	subs	r0, r0, r6
 800d264:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d268:	d9ed      	bls.n	800d246 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800d26a:	2001      	movs	r0, #1
 800d26c:	e7e2      	b.n	800d234 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800d26e:	f7fd f921 	bl	800a4b4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d272:	4d06      	ldr	r5, [pc, #24]	@ (800d28c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800d274:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d276:	68eb      	ldr	r3, [r5, #12]
 800d278:	03db      	lsls	r3, r3, #15
 800d27a:	d4ee      	bmi.n	800d25a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d27c:	f7fd f91a 	bl	800a4b4 <HAL_GetTick>
 800d280:	1b00      	subs	r0, r0, r4
 800d282:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d286:	d9f6      	bls.n	800d276 <HAL_PWREx_ConfigSupply+0x5e>
 800d288:	e7ef      	b.n	800d26a <HAL_PWREx_ConfigSupply+0x52>
 800d28a:	bf00      	nop
 800d28c:	58024800 	.word	0x58024800

0800d290 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d294:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800d296:	b136      	cbz	r6, 800d2a6 <QSPI_Config+0x16>
 800d298:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800d29c:	d003      	beq.n	800d2a6 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d29e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800d2a0:	6804      	ldr	r4, [r0, #0]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d2a6:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d2aa:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d2ae:	f1ba 0f00 	cmp.w	sl, #0
 800d2b2:	d04c      	beq.n	800d34e <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d2b4:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d2b6:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d2b8:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800d2bc:	ea4a 0406 	orr.w	r4, sl, r6
 800d2c0:	680b      	ldr	r3, [r1, #0]
 800d2c2:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800d2c6:	ea44 0a02 	orr.w	sl, r4, r2
 800d2ca:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d2ce:	f1be 0f00 	cmp.w	lr, #0
 800d2d2:	d024      	beq.n	800d31e <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d2d4:	688e      	ldr	r6, [r1, #8]
 800d2d6:	ea4a 040e 	orr.w	r4, sl, lr
 800d2da:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d2dc:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d2de:	b19f      	cbz	r7, 800d308 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d2e0:	433b      	orrs	r3, r7
 800d2e2:	4303      	orrs	r3, r0
 800d2e4:	68c8      	ldr	r0, [r1, #12]
 800d2e6:	ea43 0309 	orr.w	r3, r3, r9
 800d2ea:	ea43 0308 	orr.w	r3, r3, r8
 800d2ee:	4333      	orrs	r3, r6
 800d2f0:	4303      	orrs	r3, r0
 800d2f2:	ea43 030c 	orr.w	r3, r3, ip
 800d2f6:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d2f8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d2fc:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d2fe:	d001      	beq.n	800d304 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d300:	684b      	ldr	r3, [r1, #4]
 800d302:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d308:	4303      	orrs	r3, r0
 800d30a:	ea43 0309 	orr.w	r3, r3, r9
 800d30e:	ea43 0308 	orr.w	r3, r3, r8
 800d312:	4333      	orrs	r3, r6
 800d314:	ea43 030c 	orr.w	r3, r3, ip
 800d318:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d31a:	616b      	str	r3, [r5, #20]
 800d31c:	e7f2      	b.n	800d304 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d31e:	b167      	cbz	r7, 800d33a <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d320:	433b      	orrs	r3, r7
 800d322:	4303      	orrs	r3, r0
 800d324:	68c8      	ldr	r0, [r1, #12]
 800d326:	ea43 0309 	orr.w	r3, r3, r9
 800d32a:	ea43 0308 	orr.w	r3, r3, r8
 800d32e:	4303      	orrs	r3, r0
 800d330:	ea43 030c 	orr.w	r3, r3, ip
 800d334:	ea43 030a 	orr.w	r3, r3, sl
 800d338:	e7de      	b.n	800d2f8 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d33a:	4303      	orrs	r3, r0
 800d33c:	ea43 0309 	orr.w	r3, r3, r9
 800d340:	ea43 0408 	orr.w	r4, r3, r8
 800d344:	ea44 030c 	orr.w	r3, r4, ip
 800d348:	ea43 030a 	orr.w	r3, r3, sl
 800d34c:	e7e5      	b.n	800d31a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d34e:	f1be 0f00 	cmp.w	lr, #0
 800d352:	d02c      	beq.n	800d3ae <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d354:	ea46 050e 	orr.w	r5, r6, lr
 800d358:	688b      	ldr	r3, [r1, #8]
 800d35a:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d35c:	694e      	ldr	r6, [r1, #20]
 800d35e:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d360:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d362:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d366:	04b6      	lsls	r6, r6, #18
 800d368:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d36a:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d36e:	b1a7      	cbz	r7, 800d39a <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d370:	433b      	orrs	r3, r7
 800d372:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d374:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d378:	ea43 0308 	orr.w	r3, r3, r8
 800d37c:	ea43 030e 	orr.w	r3, r3, lr
 800d380:	ea43 030c 	orr.w	r3, r3, ip
 800d384:	ea43 0300 	orr.w	r3, r3, r0
 800d388:	ea43 0306 	orr.w	r3, r3, r6
 800d38c:	ea43 0305 	orr.w	r3, r3, r5
 800d390:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d392:	d0b7      	beq.n	800d304 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d394:	684b      	ldr	r3, [r1, #4]
 800d396:	61a3      	str	r3, [r4, #24]
 800d398:	e7b4      	b.n	800d304 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d39a:	ea43 0308 	orr.w	r3, r3, r8
 800d39e:	ea43 030e 	orr.w	r3, r3, lr
 800d3a2:	ea43 030c 	orr.w	r3, r3, ip
 800d3a6:	4333      	orrs	r3, r6
 800d3a8:	432b      	orrs	r3, r5
 800d3aa:	6163      	str	r3, [r4, #20]
 800d3ac:	e7aa      	b.n	800d304 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d3ae:	b1d7      	cbz	r7, 800d3e6 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d3b0:	ea46 0307 	orr.w	r3, r6, r7
 800d3b4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800d3b6:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d3b8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d3bc:	ea43 0302 	orr.w	r3, r3, r2
 800d3c0:	ea43 0304 	orr.w	r3, r3, r4
 800d3c4:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800d3c6:	ea43 0304 	orr.w	r3, r3, r4
 800d3ca:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800d3cc:	ea43 0304 	orr.w	r3, r3, r4
 800d3d0:	68cc      	ldr	r4, [r1, #12]
 800d3d2:	ea43 0304 	orr.w	r3, r3, r4
 800d3d6:	694c      	ldr	r4, [r1, #20]
 800d3d8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800d3dc:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d3de:	d091      	beq.n	800d304 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d3e0:	684b      	ldr	r3, [r1, #4]
 800d3e2:	6183      	str	r3, [r0, #24]
 800d3e4:	e78e      	b.n	800d304 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800d3e6:	2e00      	cmp	r6, #0
 800d3e8:	d08c      	beq.n	800d304 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d3ea:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800d3ec:	6800      	ldr	r0, [r0, #0]
 800d3ee:	4333      	orrs	r3, r6
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	694a      	ldr	r2, [r1, #20]
 800d3fc:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800d400:	6143      	str	r3, [r0, #20]
}
 800d402:	e77f      	b.n	800d304 <QSPI_Config+0x74>

0800d404 <QSPI_WaitFlagStateUntilTimeout>:
{
 800d404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d408:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d40c:	4604      	mov	r4, r0
 800d40e:	460e      	mov	r6, r1
 800d410:	4615      	mov	r5, r2
 800d412:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d414:	6822      	ldr	r2, [r4, #0]
 800d416:	6893      	ldr	r3, [r2, #8]
 800d418:	4233      	tst	r3, r6
 800d41a:	bf14      	ite	ne
 800d41c:	2301      	movne	r3, #1
 800d41e:	2300      	moveq	r3, #0
 800d420:	42ab      	cmp	r3, r5
 800d422:	d101      	bne.n	800d428 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800d424:	2000      	movs	r0, #0
 800d426:	e012      	b.n	800d44e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800d428:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d42c:	d0f3      	beq.n	800d416 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d42e:	f7fd f841 	bl	800a4b4 <HAL_GetTick>
 800d432:	1bc0      	subs	r0, r0, r7
 800d434:	4540      	cmp	r0, r8
 800d436:	d802      	bhi.n	800d43e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800d438:	f1b8 0f00 	cmp.w	r8, #0
 800d43c:	d1ea      	bne.n	800d414 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d43e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d440:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d442:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d446:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d448:	f043 0301 	orr.w	r3, r3, #1
 800d44c:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800d44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d454 <HAL_QSPI_Init>:
{
 800d454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d456:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d458:	f7fd f82c 	bl	800a4b4 <HAL_GetTick>
 800d45c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800d45e:	2c00      	cmp	r4, #0
 800d460:	d03f      	beq.n	800d4e2 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800d462:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d466:	b92b      	cbnz	r3, 800d474 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800d468:	4620      	mov	r0, r4
 800d46a:	f7f3 fed5 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800d46e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d472:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d474:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d476:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d478:	68a3      	ldr	r3, [r4, #8]
 800d47a:	680a      	ldr	r2, [r1, #0]
 800d47c:	3b01      	subs	r3, #1
 800d47e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800d482:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d486:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d488:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d48a:	2200      	movs	r2, #0
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	2120      	movs	r1, #32
 800d490:	462b      	mov	r3, r5
 800d492:	f7ff ffb7 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800d496:	bb10      	cbnz	r0, 800d4de <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800d498:	6822      	ldr	r2, [r4, #0]
 800d49a:	69e5      	ldr	r5, [r4, #28]
 800d49c:	68e3      	ldr	r3, [r4, #12]
 800d49e:	6811      	ldr	r1, [r2, #0]
 800d4a0:	432b      	orrs	r3, r5
 800d4a2:	6a25      	ldr	r5, [r4, #32]
 800d4a4:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800d4a8:	432b      	orrs	r3, r5
 800d4aa:	6865      	ldr	r5, [r4, #4]
 800d4ac:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800d4b0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800d4b4:	430b      	orrs	r3, r1
 800d4b6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800d4b8:	6855      	ldr	r5, [r2, #4]
 800d4ba:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800d4be:	430b      	orrs	r3, r1
 800d4c0:	6921      	ldr	r1, [r4, #16]
 800d4c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d4c6:	4908      	ldr	r1, [pc, #32]	@ (800d4e8 <HAL_QSPI_Init+0x94>)
 800d4c8:	4029      	ands	r1, r5
 800d4ca:	430b      	orrs	r3, r1
 800d4cc:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800d4ce:	6813      	ldr	r3, [r2, #0]
 800d4d0:	f043 0301 	orr.w	r3, r3, #1
 800d4d4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800d4d6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d4d8:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800d4da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800d4de:	b003      	add	sp, #12
 800d4e0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800d4e2:	2001      	movs	r0, #1
 800d4e4:	e7fb      	b.n	800d4de <HAL_QSPI_Init+0x8a>
 800d4e6:	bf00      	nop
 800d4e8:	ffe0f8fe 	.word	0xffe0f8fe

0800d4ec <HAL_QSPI_Command>:
{
 800d4ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	468a      	mov	sl, r1
 800d4f4:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800d4f6:	f7fc ffdd 	bl	800a4b4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d4fa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d4fe:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800d500:	2b01      	cmp	r3, #1
 800d502:	d036      	beq.n	800d572 <HAL_QSPI_Command+0x86>
 800d504:	2301      	movs	r3, #1
 800d506:	2602      	movs	r6, #2
 800d508:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d50c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d510:	2b01      	cmp	r3, #1
 800d512:	fa5f f983 	uxtb.w	r9, r3
 800d516:	d128      	bne.n	800d56a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d518:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d51a:	4603      	mov	r3, r0
 800d51c:	2120      	movs	r1, #32
 800d51e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d520:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800d522:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d526:	f8cd 8000 	str.w	r8, [sp]
 800d52a:	f7ff ff6b 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d52e:	4605      	mov	r5, r0
 800d530:	b9a0      	cbnz	r0, 800d55c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d532:	4602      	mov	r2, r0
 800d534:	4651      	mov	r1, sl
 800d536:	4620      	mov	r0, r4
 800d538:	f7ff feaa 	bl	800d290 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800d53c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800d540:	b953      	cbnz	r3, 800d558 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d542:	463b      	mov	r3, r7
 800d544:	464a      	mov	r2, r9
 800d546:	4631      	mov	r1, r6
 800d548:	4620      	mov	r0, r4
 800d54a:	f8cd 8000 	str.w	r8, [sp]
 800d54e:	f7ff ff59 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800d552:	b960      	cbnz	r0, 800d56e <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800d558:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d55c:	2300      	movs	r3, #0
 800d55e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d562:	4628      	mov	r0, r5
 800d564:	b002      	add	sp, #8
 800d566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800d56a:	4635      	mov	r5, r6
 800d56c:	e7f6      	b.n	800d55c <HAL_QSPI_Command+0x70>
 800d56e:	4605      	mov	r5, r0
 800d570:	e7f4      	b.n	800d55c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800d572:	2502      	movs	r5, #2
 800d574:	e7f5      	b.n	800d562 <HAL_QSPI_Command+0x76>

0800d576 <HAL_QSPI_Transmit>:
{
 800d576:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d57a:	4604      	mov	r4, r0
 800d57c:	4688      	mov	r8, r1
 800d57e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800d580:	f7fc ff98 	bl	800a4b4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d584:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d588:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d58a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d04c      	beq.n	800d62a <HAL_QSPI_Transmit+0xb4>
 800d590:	2301      	movs	r3, #1
 800d592:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d596:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	b2d8      	uxtb	r0, r3
 800d59e:	d142      	bne.n	800d626 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800d5a4:	f1b8 0f00 	cmp.w	r8, #0
 800d5a8:	d038      	beq.n	800d61c <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800d5aa:	2312      	movs	r3, #18
 800d5ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d5b0:	692b      	ldr	r3, [r5, #16]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d5b6:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800d5b8:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d5bc:	3301      	adds	r3, #1
 800d5be:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d5c0:	696b      	ldr	r3, [r5, #20]
 800d5c2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800d5c6:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800d5c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d5ca:	b99b      	cbnz	r3, 800d5f4 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d5cc:	4633      	mov	r3, r6
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	2102      	movs	r1, #2
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	9700      	str	r7, [sp, #0]
 800d5d6:	f7ff ff15 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800d5da:	b910      	cbnz	r0, 800d5e2 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d5dc:	6823      	ldr	r3, [r4, #0]
 800d5de:	2202      	movs	r2, #2
 800d5e0:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d5ee:	b002      	add	sp, #8
 800d5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800d5f4:	4633      	mov	r3, r6
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	2104      	movs	r1, #4
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	9700      	str	r7, [sp, #0]
 800d5fe:	f7ff ff01 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800d602:	2800      	cmp	r0, #0
 800d604:	d1ed      	bne.n	800d5e2 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d606:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800d60e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d610:	3301      	adds	r3, #1
 800d612:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800d614:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d616:	3b01      	subs	r3, #1
 800d618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d61a:	e7d5      	b.n	800d5c8 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d61c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d61e:	f043 0308 	orr.w	r3, r3, #8
 800d622:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800d624:	e7e0      	b.n	800d5e8 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800d626:	2002      	movs	r0, #2
 800d628:	e7de      	b.n	800d5e8 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800d62a:	2002      	movs	r0, #2
 800d62c:	e7df      	b.n	800d5ee <HAL_QSPI_Transmit+0x78>

0800d62e <HAL_QSPI_Receive>:
{
 800d62e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d632:	4604      	mov	r4, r0
 800d634:	4617      	mov	r7, r2
 800d636:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800d638:	f7fc ff3c 	bl	800a4b4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d63c:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800d63e:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d640:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800d642:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d646:	2b01      	cmp	r3, #1
 800d648:	d04f      	beq.n	800d6ea <HAL_QSPI_Receive+0xbc>
 800d64a:	2301      	movs	r3, #1
 800d64c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d650:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d654:	2b01      	cmp	r3, #1
 800d656:	b2d8      	uxtb	r0, r3
 800d658:	d145      	bne.n	800d6e6 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d65a:	2300      	movs	r3, #0
 800d65c:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800d65e:	f1b8 0f00 	cmp.w	r8, #0
 800d662:	d03b      	beq.n	800d6dc <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800d664:	2322      	movs	r3, #34	@ 0x22
 800d666:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d66a:	692b      	ldr	r3, [r5, #16]
 800d66c:	3301      	adds	r3, #1
 800d66e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d670:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800d672:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d676:	3301      	adds	r3, #1
 800d678:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d67a:	6969      	ldr	r1, [r5, #20]
 800d67c:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800d680:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800d684:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800d686:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800d688:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d68a:	b99b      	cbnz	r3, 800d6b4 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d68c:	4633      	mov	r3, r6
 800d68e:	2201      	movs	r2, #1
 800d690:	2102      	movs	r1, #2
 800d692:	4620      	mov	r0, r4
 800d694:	9700      	str	r7, [sp, #0]
 800d696:	f7ff feb5 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800d69a:	b910      	cbnz	r0, 800d6a2 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d6ae:	b002      	add	sp, #8
 800d6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800d6b4:	4633      	mov	r3, r6
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	2106      	movs	r1, #6
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	9700      	str	r7, [sp, #0]
 800d6be:	f7ff fea1 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d1ed      	bne.n	800d6a2 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d6c6:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d6ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d6cc:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800d6ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800d6d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d6da:	e7d5      	b.n	800d688 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d6dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d6de:	f043 0308 	orr.w	r3, r3, #8
 800d6e2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800d6e4:	e7e0      	b.n	800d6a8 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800d6e6:	2002      	movs	r0, #2
 800d6e8:	e7de      	b.n	800d6a8 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800d6ea:	2002      	movs	r0, #2
 800d6ec:	e7df      	b.n	800d6ae <HAL_QSPI_Receive+0x80>

0800d6ee <HAL_QSPI_AutoPolling>:
{
 800d6ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	461f      	mov	r7, r3
 800d6f6:	4689      	mov	r9, r1
 800d6f8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800d6fa:	f7fc fedb 	bl	800a4b4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d6fe:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d702:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800d704:	2b01      	cmp	r3, #1
 800d706:	d041      	beq.n	800d78c <HAL_QSPI_AutoPolling+0x9e>
 800d708:	2301      	movs	r3, #1
 800d70a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d70e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d712:	2b01      	cmp	r3, #1
 800d714:	fa5f f883 	uxtb.w	r8, r3
 800d718:	d136      	bne.n	800d788 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d71a:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d71c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d71e:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d720:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d722:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d726:	4603      	mov	r3, r0
 800d728:	9700      	str	r7, [sp, #0]
 800d72a:	4620      	mov	r0, r4
 800d72c:	f7ff fe6a 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d730:	bb20      	cbnz	r0, 800d77c <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d732:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d734:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d736:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d738:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d73a:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800d73c:	686b      	ldr	r3, [r5, #4]
 800d73e:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800d740:	68ab      	ldr	r3, [r5, #8]
 800d742:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d744:	6813      	ldr	r3, [r2, #0]
 800d746:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800d74a:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d74c:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d74e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d752:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d754:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800d758:	68eb      	ldr	r3, [r5, #12]
 800d75a:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d75e:	f7ff fd97 	bl	800d290 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d762:	4633      	mov	r3, r6
 800d764:	4642      	mov	r2, r8
 800d766:	2108      	movs	r1, #8
 800d768:	4620      	mov	r0, r4
 800d76a:	9700      	str	r7, [sp, #0]
 800d76c:	f7ff fe4a 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800d770:	b920      	cbnz	r0, 800d77c <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	2208      	movs	r2, #8
 800d776:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800d778:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d77c:	2300      	movs	r3, #0
 800d77e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d782:	b003      	add	sp, #12
 800d784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800d788:	2002      	movs	r0, #2
 800d78a:	e7f7      	b.n	800d77c <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800d78c:	2002      	movs	r0, #2
 800d78e:	e7f8      	b.n	800d782 <HAL_QSPI_AutoPolling+0x94>

0800d790 <HAL_QSPI_MemoryMapped>:
{
 800d790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d792:	4604      	mov	r4, r0
 800d794:	4616      	mov	r6, r2
 800d796:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800d798:	f7fc fe8c 	bl	800a4b4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d79c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d7a0:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800d7a2:	2a01      	cmp	r2, #1
 800d7a4:	d033      	beq.n	800d80e <HAL_QSPI_MemoryMapped+0x7e>
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d7ac:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800d7b0:	2a01      	cmp	r2, #1
 800d7b2:	d12a      	bne.n	800d80a <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d7b4:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d7b6:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d7b8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d7ba:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d7bc:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d7c0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d7c2:	9100      	str	r1, [sp, #0]
 800d7c4:	2120      	movs	r1, #32
 800d7c6:	f7ff fe1d 	bl	800d404 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	b9b8      	cbnz	r0, 800d7fe <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	6872      	ldr	r2, [r6, #4]
 800d7d2:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d7d4:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d7d6:	f020 0008 	bic.w	r0, r0, #8
 800d7da:	ea40 0002 	orr.w	r0, r0, r2
 800d7de:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d7e0:	d107      	bne.n	800d7f2 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d7e2:	6832      	ldr	r2, [r6, #0]
 800d7e4:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d7e6:	2210      	movs	r2, #16
 800d7e8:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800d7f0:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d7f2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f7ff fd49 	bl	800d290 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800d7fe:	2300      	movs	r3, #0
 800d800:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d804:	4628      	mov	r0, r5
 800d806:	b003      	add	sp, #12
 800d808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800d80a:	2502      	movs	r5, #2
 800d80c:	e7f7      	b.n	800d7fe <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800d80e:	2502      	movs	r5, #2
 800d810:	e7f8      	b.n	800d804 <HAL_QSPI_MemoryMapped+0x74>
	...

0800d814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d816:	4604      	mov	r4, r0
 800d818:	2800      	cmp	r0, #0
 800d81a:	d074      	beq.n	800d906 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d81c:	6803      	ldr	r3, [r0, #0]
 800d81e:	07d8      	lsls	r0, r3, #31
 800d820:	d45e      	bmi.n	800d8e0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	0799      	lsls	r1, r3, #30
 800d826:	f100 80ad 	bmi.w	800d984 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	06da      	lsls	r2, r3, #27
 800d82e:	d527      	bpl.n	800d880 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d830:	4a9c      	ldr	r2, [pc, #624]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800d832:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d834:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d83a:	2b08      	cmp	r3, #8
 800d83c:	d007      	beq.n	800d84e <HAL_RCC_OscConfig+0x3a>
 800d83e:	2b18      	cmp	r3, #24
 800d840:	f040 8103 	bne.w	800da4a <HAL_RCC_OscConfig+0x236>
 800d844:	f001 0303 	and.w	r3, r1, #3
 800d848:	2b01      	cmp	r3, #1
 800d84a:	f040 80fe 	bne.w	800da4a <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d84e:	6813      	ldr	r3, [r2, #0]
 800d850:	05db      	lsls	r3, r3, #23
 800d852:	d502      	bpl.n	800d85a <HAL_RCC_OscConfig+0x46>
 800d854:	69e3      	ldr	r3, [r4, #28]
 800d856:	2b80      	cmp	r3, #128	@ 0x80
 800d858:	d155      	bne.n	800d906 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d85a:	f7fc fe43 	bl	800a4e4 <HAL_GetREVID>
 800d85e:	f241 0303 	movw	r3, #4099	@ 0x1003
 800d862:	6a21      	ldr	r1, [r4, #32]
 800d864:	4298      	cmp	r0, r3
 800d866:	4b8f      	ldr	r3, [pc, #572]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800d868:	f200 80e8 	bhi.w	800da3c <HAL_RCC_OscConfig+0x228>
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	2920      	cmp	r1, #32
 800d870:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800d874:	bf0c      	ite	eq
 800d876:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800d87a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800d87e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	0719      	lsls	r1, r3, #28
 800d884:	f100 8123 	bmi.w	800dace <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	069a      	lsls	r2, r3, #26
 800d88c:	f100 8144 	bmi.w	800db18 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	075d      	lsls	r5, r3, #29
 800d894:	d51e      	bpl.n	800d8d4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d896:	4d84      	ldr	r5, [pc, #528]	@ (800daa8 <HAL_RCC_OscConfig+0x294>)
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d89e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d8a0:	f7fc fe08 	bl	800a4b4 <HAL_GetTick>
 800d8a4:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d8a6:	682b      	ldr	r3, [r5, #0]
 800d8a8:	05da      	lsls	r2, r3, #23
 800d8aa:	f140 815a 	bpl.w	800db62 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8ae:	68a3      	ldr	r3, [r4, #8]
 800d8b0:	4d7c      	ldr	r5, [pc, #496]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	f040 815c 	bne.w	800db70 <HAL_RCC_OscConfig+0x35c>
 800d8b8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d8ba:	f043 0301 	orr.w	r3, r3, #1
 800d8be:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d8c0:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800d8c4:	f7fc fdf6 	bl	800a4b4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d8c8:	4e76      	ldr	r6, [pc, #472]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800d8ca:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d8cc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800d8ce:	079b      	lsls	r3, r3, #30
 800d8d0:	f140 8174 	bpl.w	800dbbc <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d8d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d8d6:	2900      	cmp	r1, #0
 800d8d8:	f040 8177 	bne.w	800dbca <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800d8dc:	2000      	movs	r0, #0
 800d8de:	e02b      	b.n	800d938 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d8e0:	4a70      	ldr	r2, [pc, #448]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800d8e2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d8e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d8e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d8ea:	2b10      	cmp	r3, #16
 800d8ec:	d005      	beq.n	800d8fa <HAL_RCC_OscConfig+0xe6>
 800d8ee:	2b18      	cmp	r3, #24
 800d8f0:	d10b      	bne.n	800d90a <HAL_RCC_OscConfig+0xf6>
 800d8f2:	f001 0303 	and.w	r3, r1, #3
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	d107      	bne.n	800d90a <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d8fa:	6813      	ldr	r3, [r2, #0]
 800d8fc:	039a      	lsls	r2, r3, #14
 800d8fe:	d590      	bpl.n	800d822 <HAL_RCC_OscConfig+0xe>
 800d900:	6863      	ldr	r3, [r4, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d18d      	bne.n	800d822 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800d906:	2001      	movs	r0, #1
 800d908:	e016      	b.n	800d938 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d90a:	6863      	ldr	r3, [r4, #4]
 800d90c:	4d65      	ldr	r5, [pc, #404]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800d90e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d912:	d112      	bne.n	800d93a <HAL_RCC_OscConfig+0x126>
 800d914:	682b      	ldr	r3, [r5, #0]
 800d916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d91a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d91c:	f7fc fdca 	bl	800a4b4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d920:	4e60      	ldr	r6, [pc, #384]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800d922:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d924:	6833      	ldr	r3, [r6, #0]
 800d926:	039b      	lsls	r3, r3, #14
 800d928:	f53f af7b 	bmi.w	800d822 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d92c:	f7fc fdc2 	bl	800a4b4 <HAL_GetTick>
 800d930:	1b40      	subs	r0, r0, r5
 800d932:	2864      	cmp	r0, #100	@ 0x64
 800d934:	d9f6      	bls.n	800d924 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800d936:	2003      	movs	r0, #3
}
 800d938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d93a:	b9a3      	cbnz	r3, 800d966 <HAL_RCC_OscConfig+0x152>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d94a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d94c:	f7fc fdb2 	bl	800a4b4 <HAL_GetTick>
 800d950:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d952:	682b      	ldr	r3, [r5, #0]
 800d954:	039f      	lsls	r7, r3, #14
 800d956:	f57f af64 	bpl.w	800d822 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d95a:	f7fc fdab 	bl	800a4b4 <HAL_GetTick>
 800d95e:	1b80      	subs	r0, r0, r6
 800d960:	2864      	cmp	r0, #100	@ 0x64
 800d962:	d9f6      	bls.n	800d952 <HAL_RCC_OscConfig+0x13e>
 800d964:	e7e7      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d966:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d96a:	682b      	ldr	r3, [r5, #0]
 800d96c:	d103      	bne.n	800d976 <HAL_RCC_OscConfig+0x162>
 800d96e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d972:	602b      	str	r3, [r5, #0]
 800d974:	e7ce      	b.n	800d914 <HAL_RCC_OscConfig+0x100>
 800d976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d97a:	602b      	str	r3, [r5, #0]
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d982:	e7ca      	b.n	800d91a <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d984:	4947      	ldr	r1, [pc, #284]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800d986:	68e2      	ldr	r2, [r4, #12]
 800d988:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d98a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d98c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800d990:	d003      	beq.n	800d99a <HAL_RCC_OscConfig+0x186>
 800d992:	2b18      	cmp	r3, #24
 800d994:	d12a      	bne.n	800d9ec <HAL_RCC_OscConfig+0x1d8>
 800d996:	0780      	lsls	r0, r0, #30
 800d998:	d128      	bne.n	800d9ec <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d99a:	680b      	ldr	r3, [r1, #0]
 800d99c:	075b      	lsls	r3, r3, #29
 800d99e:	d501      	bpl.n	800d9a4 <HAL_RCC_OscConfig+0x190>
 800d9a0:	2a00      	cmp	r2, #0
 800d9a2:	d0b0      	beq.n	800d906 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d9a4:	4d3f      	ldr	r5, [pc, #252]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800d9a6:	682b      	ldr	r3, [r5, #0]
 800d9a8:	f023 0319 	bic.w	r3, r3, #25
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d9b0:	f7fc fd80 	bl	800a4b4 <HAL_GetTick>
 800d9b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d9b6:	682b      	ldr	r3, [r5, #0]
 800d9b8:	075f      	lsls	r7, r3, #29
 800d9ba:	d511      	bpl.n	800d9e0 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9bc:	f7fc fd92 	bl	800a4e4 <HAL_GetREVID>
 800d9c0:	f241 0303 	movw	r3, #4099	@ 0x1003
 800d9c4:	6922      	ldr	r2, [r4, #16]
 800d9c6:	4298      	cmp	r0, r3
 800d9c8:	686b      	ldr	r3, [r5, #4]
 800d9ca:	d822      	bhi.n	800da12 <HAL_RCC_OscConfig+0x1fe>
 800d9cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d9d0:	2a40      	cmp	r2, #64	@ 0x40
 800d9d2:	bf0c      	ite	eq
 800d9d4:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800d9d8:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800d9dc:	606b      	str	r3, [r5, #4]
 800d9de:	e724      	b.n	800d82a <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d9e0:	f7fc fd68 	bl	800a4b4 <HAL_GetTick>
 800d9e4:	1b80      	subs	r0, r0, r6
 800d9e6:	2802      	cmp	r0, #2
 800d9e8:	d9e5      	bls.n	800d9b6 <HAL_RCC_OscConfig+0x1a2>
 800d9ea:	e7a4      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d9ec:	4d2d      	ldr	r5, [pc, #180]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d9ee:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d9f0:	b1a2      	cbz	r2, 800da1c <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d9f2:	f023 0319 	bic.w	r3, r3, #25
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d9fa:	f7fc fd5b 	bl	800a4b4 <HAL_GetTick>
 800d9fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	0758      	lsls	r0, r3, #29
 800da04:	d4da      	bmi.n	800d9bc <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da06:	f7fc fd55 	bl	800a4b4 <HAL_GetTick>
 800da0a:	1b80      	subs	r0, r0, r6
 800da0c:	2802      	cmp	r0, #2
 800da0e:	d9f7      	bls.n	800da00 <HAL_RCC_OscConfig+0x1ec>
 800da10:	e791      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da12:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800da16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da1a:	e7df      	b.n	800d9dc <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800da1c:	f023 0301 	bic.w	r3, r3, #1
 800da20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800da22:	f7fc fd47 	bl	800a4b4 <HAL_GetTick>
 800da26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800da28:	682b      	ldr	r3, [r5, #0]
 800da2a:	0759      	lsls	r1, r3, #29
 800da2c:	f57f aefd 	bpl.w	800d82a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da30:	f7fc fd40 	bl	800a4b4 <HAL_GetTick>
 800da34:	1b80      	subs	r0, r0, r6
 800da36:	2802      	cmp	r0, #2
 800da38:	d9f6      	bls.n	800da28 <HAL_RCC_OscConfig+0x214>
 800da3a:	e77c      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800da42:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800da46:	60da      	str	r2, [r3, #12]
 800da48:	e71a      	b.n	800d880 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800da4a:	69e3      	ldr	r3, [r4, #28]
 800da4c:	4d15      	ldr	r5, [pc, #84]	@ (800daa4 <HAL_RCC_OscConfig+0x290>)
 800da4e:	b36b      	cbz	r3, 800daac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800da58:	f7fc fd2c 	bl	800a4b4 <HAL_GetTick>
 800da5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800da5e:	682b      	ldr	r3, [r5, #0]
 800da60:	05df      	lsls	r7, r3, #23
 800da62:	d511      	bpl.n	800da88 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800da64:	f7fc fd3e 	bl	800a4e4 <HAL_GetREVID>
 800da68:	f241 0303 	movw	r3, #4099	@ 0x1003
 800da6c:	6a22      	ldr	r2, [r4, #32]
 800da6e:	4298      	cmp	r0, r3
 800da70:	d810      	bhi.n	800da94 <HAL_RCC_OscConfig+0x280>
 800da72:	686b      	ldr	r3, [r5, #4]
 800da74:	2a20      	cmp	r2, #32
 800da76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800da7a:	bf0c      	ite	eq
 800da7c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800da80:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800da84:	606b      	str	r3, [r5, #4]
 800da86:	e6fb      	b.n	800d880 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800da88:	f7fc fd14 	bl	800a4b4 <HAL_GetTick>
 800da8c:	1b80      	subs	r0, r0, r6
 800da8e:	2802      	cmp	r0, #2
 800da90:	d9e5      	bls.n	800da5e <HAL_RCC_OscConfig+0x24a>
 800da92:	e750      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800da94:	68eb      	ldr	r3, [r5, #12]
 800da96:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800da9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da9e:	60eb      	str	r3, [r5, #12]
 800daa0:	e6ee      	b.n	800d880 <HAL_RCC_OscConfig+0x6c>
 800daa2:	bf00      	nop
 800daa4:	58024400 	.word	0x58024400
 800daa8:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dab2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dab4:	f7fc fcfe 	bl	800a4b4 <HAL_GetTick>
 800dab8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800daba:	682b      	ldr	r3, [r5, #0]
 800dabc:	05d8      	lsls	r0, r3, #23
 800dabe:	f57f aedf 	bpl.w	800d880 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dac2:	f7fc fcf7 	bl	800a4b4 <HAL_GetTick>
 800dac6:	1b80      	subs	r0, r0, r6
 800dac8:	2802      	cmp	r0, #2
 800daca:	d9f6      	bls.n	800daba <HAL_RCC_OscConfig+0x2a6>
 800dacc:	e733      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dace:	6963      	ldr	r3, [r4, #20]
 800dad0:	4da5      	ldr	r5, [pc, #660]	@ (800dd68 <HAL_RCC_OscConfig+0x554>)
 800dad2:	b183      	cbz	r3, 800daf6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800dad4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800dad6:	f043 0301 	orr.w	r3, r3, #1
 800dada:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800dadc:	f7fc fcea 	bl	800a4b4 <HAL_GetTick>
 800dae0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dae2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800dae4:	079b      	lsls	r3, r3, #30
 800dae6:	f53f aecf 	bmi.w	800d888 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800daea:	f7fc fce3 	bl	800a4b4 <HAL_GetTick>
 800daee:	1b80      	subs	r0, r0, r6
 800daf0:	2802      	cmp	r0, #2
 800daf2:	d9f6      	bls.n	800dae2 <HAL_RCC_OscConfig+0x2ce>
 800daf4:	e71f      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800daf6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800daf8:	f023 0301 	bic.w	r3, r3, #1
 800dafc:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800dafe:	f7fc fcd9 	bl	800a4b4 <HAL_GetTick>
 800db02:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800db04:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800db06:	079f      	lsls	r7, r3, #30
 800db08:	f57f aebe 	bpl.w	800d888 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db0c:	f7fc fcd2 	bl	800a4b4 <HAL_GetTick>
 800db10:	1b80      	subs	r0, r0, r6
 800db12:	2802      	cmp	r0, #2
 800db14:	d9f6      	bls.n	800db04 <HAL_RCC_OscConfig+0x2f0>
 800db16:	e70e      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800db18:	69a3      	ldr	r3, [r4, #24]
 800db1a:	4d93      	ldr	r5, [pc, #588]	@ (800dd68 <HAL_RCC_OscConfig+0x554>)
 800db1c:	b183      	cbz	r3, 800db40 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800db1e:	682b      	ldr	r3, [r5, #0]
 800db20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800db24:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800db26:	f7fc fcc5 	bl	800a4b4 <HAL_GetTick>
 800db2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800db2c:	682b      	ldr	r3, [r5, #0]
 800db2e:	0498      	lsls	r0, r3, #18
 800db30:	f53f aeae 	bmi.w	800d890 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800db34:	f7fc fcbe 	bl	800a4b4 <HAL_GetTick>
 800db38:	1b80      	subs	r0, r0, r6
 800db3a:	2802      	cmp	r0, #2
 800db3c:	d9f6      	bls.n	800db2c <HAL_RCC_OscConfig+0x318>
 800db3e:	e6fa      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db46:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800db48:	f7fc fcb4 	bl	800a4b4 <HAL_GetTick>
 800db4c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800db4e:	682b      	ldr	r3, [r5, #0]
 800db50:	0499      	lsls	r1, r3, #18
 800db52:	f57f ae9d 	bpl.w	800d890 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800db56:	f7fc fcad 	bl	800a4b4 <HAL_GetTick>
 800db5a:	1b80      	subs	r0, r0, r6
 800db5c:	2802      	cmp	r0, #2
 800db5e:	d9f6      	bls.n	800db4e <HAL_RCC_OscConfig+0x33a>
 800db60:	e6e9      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db62:	f7fc fca7 	bl	800a4b4 <HAL_GetTick>
 800db66:	1b80      	subs	r0, r0, r6
 800db68:	2864      	cmp	r0, #100	@ 0x64
 800db6a:	f67f ae9c 	bls.w	800d8a6 <HAL_RCC_OscConfig+0x92>
 800db6e:	e6e2      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db70:	b9b3      	cbnz	r3, 800dba0 <HAL_RCC_OscConfig+0x38c>
 800db72:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db74:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db78:	f023 0301 	bic.w	r3, r3, #1
 800db7c:	672b      	str	r3, [r5, #112]	@ 0x70
 800db7e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800db80:	f023 0304 	bic.w	r3, r3, #4
 800db84:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800db86:	f7fc fc95 	bl	800a4b4 <HAL_GetTick>
 800db8a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800db8c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800db8e:	0798      	lsls	r0, r3, #30
 800db90:	f57f aea0 	bpl.w	800d8d4 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db94:	f7fc fc8e 	bl	800a4b4 <HAL_GetTick>
 800db98:	1b80      	subs	r0, r0, r6
 800db9a:	42b8      	cmp	r0, r7
 800db9c:	d9f6      	bls.n	800db8c <HAL_RCC_OscConfig+0x378>
 800db9e:	e6ca      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dba0:	2b05      	cmp	r3, #5
 800dba2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dba4:	d103      	bne.n	800dbae <HAL_RCC_OscConfig+0x39a>
 800dba6:	f043 0304 	orr.w	r3, r3, #4
 800dbaa:	672b      	str	r3, [r5, #112]	@ 0x70
 800dbac:	e684      	b.n	800d8b8 <HAL_RCC_OscConfig+0xa4>
 800dbae:	f023 0301 	bic.w	r3, r3, #1
 800dbb2:	672b      	str	r3, [r5, #112]	@ 0x70
 800dbb4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dbb6:	f023 0304 	bic.w	r3, r3, #4
 800dbba:	e680      	b.n	800d8be <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbbc:	f7fc fc7a 	bl	800a4b4 <HAL_GetTick>
 800dbc0:	1b40      	subs	r0, r0, r5
 800dbc2:	42b8      	cmp	r0, r7
 800dbc4:	f67f ae82 	bls.w	800d8cc <HAL_RCC_OscConfig+0xb8>
 800dbc8:	e6b5      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800dbca:	4d67      	ldr	r5, [pc, #412]	@ (800dd68 <HAL_RCC_OscConfig+0x554>)
 800dbcc:	692b      	ldr	r3, [r5, #16]
 800dbce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dbd2:	2b18      	cmp	r3, #24
 800dbd4:	d07a      	beq.n	800dccc <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800dbd6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dbd8:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800dbda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbde:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dbe0:	d167      	bne.n	800dcb2 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800dbe2:	f7fc fc67 	bl	800a4b4 <HAL_GetTick>
 800dbe6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dbe8:	682b      	ldr	r3, [r5, #0]
 800dbea:	0199      	lsls	r1, r3, #6
 800dbec:	d45b      	bmi.n	800dca6 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dbee:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800dbf0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800dbf2:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800dbf6:	f023 0303 	bic.w	r3, r3, #3
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dbfe:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800dc02:	62ab      	str	r3, [r5, #40]	@ 0x28
 800dc04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	3a01      	subs	r2, #1
 800dc0c:	025b      	lsls	r3, r3, #9
 800dc0e:	0412      	lsls	r2, r2, #16
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dc16:	4313      	orrs	r3, r2
 800dc18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dc1a:	3a01      	subs	r2, #1
 800dc1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc20:	4313      	orrs	r3, r2
 800dc22:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800dc24:	3a01      	subs	r2, #1
 800dc26:	0612      	lsls	r2, r2, #24
 800dc28:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800dc30:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dc32:	f023 0301 	bic.w	r3, r3, #1
 800dc36:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dc38:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800dc3a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800dc3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dc40:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dc44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dc48:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dc4a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dc4c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800dc4e:	f023 030c 	bic.w	r3, r3, #12
 800dc52:	4313      	orrs	r3, r2
 800dc54:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800dc56:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dc58:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800dc5a:	f023 0302 	bic.w	r3, r3, #2
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dc62:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dc64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc68:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dc6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc70:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800dc72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dc74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dc78:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800dc7a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dc7c:	f043 0301 	orr.w	r3, r3, #1
 800dc80:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800dc82:	682b      	ldr	r3, [r5, #0]
 800dc84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dc88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dc8a:	f7fc fc13 	bl	800a4b4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc8e:	4d36      	ldr	r5, [pc, #216]	@ (800dd68 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800dc90:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc92:	682b      	ldr	r3, [r5, #0]
 800dc94:	019a      	lsls	r2, r3, #6
 800dc96:	f53f ae21 	bmi.w	800d8dc <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc9a:	f7fc fc0b 	bl	800a4b4 <HAL_GetTick>
 800dc9e:	1b00      	subs	r0, r0, r4
 800dca0:	2802      	cmp	r0, #2
 800dca2:	d9f6      	bls.n	800dc92 <HAL_RCC_OscConfig+0x47e>
 800dca4:	e647      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dca6:	f7fc fc05 	bl	800a4b4 <HAL_GetTick>
 800dcaa:	1b80      	subs	r0, r0, r6
 800dcac:	2802      	cmp	r0, #2
 800dcae:	d99b      	bls.n	800dbe8 <HAL_RCC_OscConfig+0x3d4>
 800dcb0:	e641      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800dcb2:	f7fc fbff 	bl	800a4b4 <HAL_GetTick>
 800dcb6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dcb8:	682b      	ldr	r3, [r5, #0]
 800dcba:	019b      	lsls	r3, r3, #6
 800dcbc:	f57f ae0e 	bpl.w	800d8dc <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dcc0:	f7fc fbf8 	bl	800a4b4 <HAL_GetTick>
 800dcc4:	1b00      	subs	r0, r0, r4
 800dcc6:	2802      	cmp	r0, #2
 800dcc8:	d9f6      	bls.n	800dcb8 <HAL_RCC_OscConfig+0x4a4>
 800dcca:	e634      	b.n	800d936 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dccc:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dcce:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dcd0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dcd2:	f43f ae18 	beq.w	800d906 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcd6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dcda:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800dcdc:	4281      	cmp	r1, r0
 800dcde:	f47f ae12 	bne.w	800d906 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dce2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dce6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dce8:	428a      	cmp	r2, r1
 800dcea:	f47f ae0c 	bne.w	800d906 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dcee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800dcf0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800dcf4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcf6:	4291      	cmp	r1, r2
 800dcf8:	f47f ae05 	bne.w	800d906 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dcfc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800dcfe:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800dd02:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dd04:	4291      	cmp	r1, r2
 800dd06:	f47f adfe 	bne.w	800d906 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dd0a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dd0c:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800dd10:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dd12:	4291      	cmp	r1, r2
 800dd14:	f47f adf7 	bne.w	800d906 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dd18:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800dd1a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800dd1e:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dd20:	4293      	cmp	r3, r2
 800dd22:	f47f adf0 	bne.w	800d906 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800dd26:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800dd28:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800dd2a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	f43f add4 	beq.w	800d8dc <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800dd34:	4d0c      	ldr	r5, [pc, #48]	@ (800dd68 <HAL_RCC_OscConfig+0x554>)
 800dd36:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dd38:	f023 0301 	bic.w	r3, r3, #1
 800dd3c:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800dd3e:	f7fc fbb9 	bl	800a4b4 <HAL_GetTick>
 800dd42:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800dd44:	f7fc fbb6 	bl	800a4b4 <HAL_GetTick>
 800dd48:	42b0      	cmp	r0, r6
 800dd4a:	d0fb      	beq.n	800dd44 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dd4c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800dd4e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800dd50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dd58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dd5c:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800dd5e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800dd60:	f043 0301 	orr.w	r3, r3, #1
 800dd64:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800dd66:	e5b9      	b.n	800d8dc <HAL_RCC_OscConfig+0xc8>
 800dd68:	58024400 	.word	0x58024400

0800dd6c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	4c23      	ldr	r4, [pc, #140]	@ (800ddfc <HAL_RCC_MCOConfig+0x90>)
 800dd70:	b088      	sub	sp, #32
 800dd72:	460e      	mov	r6, r1
 800dd74:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800dd76:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800dd7a:	b9f8      	cbnz	r0, 800ddbc <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800dd7c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd80:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800dd84:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800dd86:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800dd8a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800dd8e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800dd90:	f003 0301 	and.w	r3, r3, #1
 800dd94:	9301      	str	r3, [sp, #4]
 800dd96:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd98:	2302      	movs	r3, #2
 800dd9a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd9e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dda0:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800dda4:	4816      	ldr	r0, [pc, #88]	@ (800de00 <HAL_RCC_MCOConfig+0x94>)
 800dda6:	f7fd fa0b 	bl	800b1c0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800ddaa:	6923      	ldr	r3, [r4, #16]
 800ddac:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800ddb0:	ea43 0106 	orr.w	r1, r3, r6
 800ddb4:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800ddb6:	6121      	str	r1, [r4, #16]
  }
}
 800ddb8:	b008      	add	sp, #32
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800ddbc:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddc4:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ddc6:	480f      	ldr	r0, [pc, #60]	@ (800de04 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800ddc8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800ddcc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800ddd0:	f003 0304 	and.w	r3, r3, #4
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddd8:	2302      	movs	r3, #2
 800ddda:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddde:	2300      	movs	r3, #0
 800dde0:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800dde4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800dde6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800dde8:	f7fd f9ea 	bl	800b1c0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800ddec:	6923      	ldr	r3, [r4, #16]
 800ddee:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800ddf2:	ea43 0106 	orr.w	r1, r3, r6
 800ddf6:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800ddfa:	e7dc      	b.n	800ddb6 <HAL_RCC_MCOConfig+0x4a>
 800ddfc:	58024400 	.word	0x58024400
 800de00:	58020000 	.word	0x58020000
 800de04:	58020800 	.word	0x58020800

0800de08 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de08:	4b49      	ldr	r3, [pc, #292]	@ (800df30 <HAL_RCC_GetSysClockFreq+0x128>)
 800de0a:	691a      	ldr	r2, [r3, #16]
 800de0c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800de10:	2a10      	cmp	r2, #16
{
 800de12:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800de14:	f000 8088 	beq.w	800df28 <HAL_RCC_GetSysClockFreq+0x120>
 800de18:	2a18      	cmp	r2, #24
 800de1a:	d00c      	beq.n	800de36 <HAL_RCC_GetSysClockFreq+0x2e>
 800de1c:	2a00      	cmp	r2, #0
 800de1e:	f040 8085 	bne.w	800df2c <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	4843      	ldr	r0, [pc, #268]	@ (800df34 <HAL_RCC_GetSysClockFreq+0x12c>)
 800de26:	f012 0f20 	tst.w	r2, #32
 800de2a:	d003      	beq.n	800de34 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800de32:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800de34:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de36:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800de38:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800de3a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800de3c:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800de40:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800de46:	d0f5      	beq.n	800de34 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de48:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800de4c:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de50:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de54:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de58:	4362      	muls	r2, r4
 800de5a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800de5e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800de64:	ee06 2a90 	vmov	s13, r2
 800de68:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800de6c:	d04e      	beq.n	800df0c <HAL_RCC_GetSysClockFreq+0x104>
 800de6e:	2902      	cmp	r1, #2
 800de70:	d03e      	beq.n	800def0 <HAL_RCC_GetSysClockFreq+0xe8>
 800de72:	2900      	cmp	r1, #0
 800de74:	d14a      	bne.n	800df0c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	0692      	lsls	r2, r2, #26
 800de7a:	d527      	bpl.n	800decc <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de7c:	6819      	ldr	r1, [r3, #0]
 800de7e:	4a2d      	ldr	r2, [pc, #180]	@ (800df34 <HAL_RCC_GetSysClockFreq+0x12c>)
 800de80:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de86:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de8c:	ee07 2a90 	vmov	s15, r2
 800de90:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800de94:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800de98:	ee07 3a10 	vmov	s14, r3
 800de9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dea0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dea4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800dea8:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800deac:	4b20      	ldr	r3, [pc, #128]	@ (800df30 <HAL_RCC_GetSysClockFreq+0x128>)
 800deae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deb0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800deb4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800deb6:	ee07 3a10 	vmov	s14, r3
 800deba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800debe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dec2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800dec6:	ee17 0a90 	vmov	r0, s15
 800deca:	e7b3      	b.n	800de34 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800decc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ded2:	ee07 3a90 	vmov	s15, r3
 800ded6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800deda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dede:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dee2:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800df38 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dee6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800deea:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800deee:	e7dd      	b.n	800deac <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800def0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800def2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def6:	ee07 3a90 	vmov	s15, r3
 800defa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800defe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df02:	ee77 7a86 	vadd.f32	s15, s15, s12
 800df06:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800df3c <HAL_RCC_GetSysClockFreq+0x134>
 800df0a:	e7ec      	b.n	800dee6 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df12:	ee07 3a90 	vmov	s15, r3
 800df16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800df22:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800df40 <HAL_RCC_GetSysClockFreq+0x138>
 800df26:	e7de      	b.n	800dee6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800df28:	4806      	ldr	r0, [pc, #24]	@ (800df44 <HAL_RCC_GetSysClockFreq+0x13c>)
 800df2a:	e783      	b.n	800de34 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800df2c:	4806      	ldr	r0, [pc, #24]	@ (800df48 <HAL_RCC_GetSysClockFreq+0x140>)
 800df2e:	e781      	b.n	800de34 <HAL_RCC_GetSysClockFreq+0x2c>
 800df30:	58024400 	.word	0x58024400
 800df34:	03d09000 	.word	0x03d09000
 800df38:	4c742400 	.word	0x4c742400
 800df3c:	4bbebc20 	.word	0x4bbebc20
 800df40:	4a742400 	.word	0x4a742400
 800df44:	017d7840 	.word	0x017d7840
 800df48:	003d0900 	.word	0x003d0900

0800df4c <HAL_RCC_ClockConfig>:
{
 800df4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df50:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800df52:	4604      	mov	r4, r0
 800df54:	b910      	cbnz	r0, 800df5c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800df56:	2001      	movs	r0, #1
}
 800df58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800df5c:	4a88      	ldr	r2, [pc, #544]	@ (800e180 <HAL_RCC_ClockConfig+0x234>)
 800df5e:	6813      	ldr	r3, [r2, #0]
 800df60:	f003 030f 	and.w	r3, r3, #15
 800df64:	428b      	cmp	r3, r1
 800df66:	f0c0 8093 	bcc.w	800e090 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	075f      	lsls	r7, r3, #29
 800df6e:	f100 809b 	bmi.w	800e0a8 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df72:	071e      	lsls	r6, r3, #28
 800df74:	d50b      	bpl.n	800df8e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800df76:	4983      	ldr	r1, [pc, #524]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800df78:	6960      	ldr	r0, [r4, #20]
 800df7a:	69ca      	ldr	r2, [r1, #28]
 800df7c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800df80:	4290      	cmp	r0, r2
 800df82:	d904      	bls.n	800df8e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800df84:	69ca      	ldr	r2, [r1, #28]
 800df86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800df8a:	4302      	orrs	r2, r0
 800df8c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df8e:	06d8      	lsls	r0, r3, #27
 800df90:	d50b      	bpl.n	800dfaa <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800df92:	497c      	ldr	r1, [pc, #496]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800df94:	69a0      	ldr	r0, [r4, #24]
 800df96:	69ca      	ldr	r2, [r1, #28]
 800df98:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800df9c:	4290      	cmp	r0, r2
 800df9e:	d904      	bls.n	800dfaa <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dfa0:	69ca      	ldr	r2, [r1, #28]
 800dfa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dfa6:	4302      	orrs	r2, r0
 800dfa8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dfaa:	0699      	lsls	r1, r3, #26
 800dfac:	d50b      	bpl.n	800dfc6 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dfae:	4975      	ldr	r1, [pc, #468]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800dfb0:	69e0      	ldr	r0, [r4, #28]
 800dfb2:	6a0a      	ldr	r2, [r1, #32]
 800dfb4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800dfb8:	4290      	cmp	r0, r2
 800dfba:	d904      	bls.n	800dfc6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dfbc:	6a0a      	ldr	r2, [r1, #32]
 800dfbe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800dfc2:	4302      	orrs	r2, r0
 800dfc4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dfc6:	079a      	lsls	r2, r3, #30
 800dfc8:	d50b      	bpl.n	800dfe2 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dfca:	496e      	ldr	r1, [pc, #440]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800dfcc:	68e0      	ldr	r0, [r4, #12]
 800dfce:	698a      	ldr	r2, [r1, #24]
 800dfd0:	f002 020f 	and.w	r2, r2, #15
 800dfd4:	4290      	cmp	r0, r2
 800dfd6:	d904      	bls.n	800dfe2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dfd8:	698a      	ldr	r2, [r1, #24]
 800dfda:	f022 020f 	bic.w	r2, r2, #15
 800dfde:	4302      	orrs	r2, r0
 800dfe0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dfe2:	07df      	lsls	r7, r3, #31
 800dfe4:	d46e      	bmi.n	800e0c4 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dfe6:	6823      	ldr	r3, [r4, #0]
 800dfe8:	079e      	lsls	r6, r3, #30
 800dfea:	f100 80a1 	bmi.w	800e130 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dfee:	4964      	ldr	r1, [pc, #400]	@ (800e180 <HAL_RCC_ClockConfig+0x234>)
 800dff0:	680a      	ldr	r2, [r1, #0]
 800dff2:	f002 020f 	and.w	r2, r2, #15
 800dff6:	42aa      	cmp	r2, r5
 800dff8:	f200 80a8 	bhi.w	800e14c <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dffc:	0758      	lsls	r0, r3, #29
 800dffe:	f100 80b1 	bmi.w	800e164 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e002:	0719      	lsls	r1, r3, #28
 800e004:	d50b      	bpl.n	800e01e <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e006:	495f      	ldr	r1, [pc, #380]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e008:	6960      	ldr	r0, [r4, #20]
 800e00a:	69ca      	ldr	r2, [r1, #28]
 800e00c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e010:	4290      	cmp	r0, r2
 800e012:	d204      	bcs.n	800e01e <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e014:	69ca      	ldr	r2, [r1, #28]
 800e016:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e01a:	4302      	orrs	r2, r0
 800e01c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e01e:	06da      	lsls	r2, r3, #27
 800e020:	d50b      	bpl.n	800e03a <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e022:	4958      	ldr	r1, [pc, #352]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e024:	69a0      	ldr	r0, [r4, #24]
 800e026:	69ca      	ldr	r2, [r1, #28]
 800e028:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e02c:	4290      	cmp	r0, r2
 800e02e:	d204      	bcs.n	800e03a <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e030:	69ca      	ldr	r2, [r1, #28]
 800e032:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e036:	4302      	orrs	r2, r0
 800e038:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e03a:	069b      	lsls	r3, r3, #26
 800e03c:	d50b      	bpl.n	800e056 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e03e:	4a51      	ldr	r2, [pc, #324]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e040:	69e1      	ldr	r1, [r4, #28]
 800e042:	6a13      	ldr	r3, [r2, #32]
 800e044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e048:	4299      	cmp	r1, r3
 800e04a:	d204      	bcs.n	800e056 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e04c:	6a13      	ldr	r3, [r2, #32]
 800e04e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e052:	430b      	orrs	r3, r1
 800e054:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e056:	f7ff fed7 	bl	800de08 <HAL_RCC_GetSysClockFreq>
 800e05a:	494a      	ldr	r1, [pc, #296]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e05c:	4a4a      	ldr	r2, [pc, #296]	@ (800e188 <HAL_RCC_ClockConfig+0x23c>)
 800e05e:	698b      	ldr	r3, [r1, #24]
 800e060:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800e064:	5cd3      	ldrb	r3, [r2, r3]
 800e066:	f003 031f 	and.w	r3, r3, #31
 800e06a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e06c:	698b      	ldr	r3, [r1, #24]
 800e06e:	f003 030f 	and.w	r3, r3, #15
 800e072:	5cd3      	ldrb	r3, [r2, r3]
 800e074:	4a45      	ldr	r2, [pc, #276]	@ (800e18c <HAL_RCC_ClockConfig+0x240>)
 800e076:	f003 031f 	and.w	r3, r3, #31
 800e07a:	fa20 f303 	lsr.w	r3, r0, r3
 800e07e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800e080:	4b43      	ldr	r3, [pc, #268]	@ (800e190 <HAL_RCC_ClockConfig+0x244>)
 800e082:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800e084:	4b43      	ldr	r3, [pc, #268]	@ (800e194 <HAL_RCC_ClockConfig+0x248>)
}
 800e086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800e08a:	6818      	ldr	r0, [r3, #0]
 800e08c:	f7f3 ba6c 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e090:	6813      	ldr	r3, [r2, #0]
 800e092:	f023 030f 	bic.w	r3, r3, #15
 800e096:	430b      	orrs	r3, r1
 800e098:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e09a:	6813      	ldr	r3, [r2, #0]
 800e09c:	f003 030f 	and.w	r3, r3, #15
 800e0a0:	428b      	cmp	r3, r1
 800e0a2:	f47f af58 	bne.w	800df56 <HAL_RCC_ClockConfig+0xa>
 800e0a6:	e760      	b.n	800df6a <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e0a8:	4936      	ldr	r1, [pc, #216]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e0aa:	6920      	ldr	r0, [r4, #16]
 800e0ac:	698a      	ldr	r2, [r1, #24]
 800e0ae:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e0b2:	4290      	cmp	r0, r2
 800e0b4:	f67f af5d 	bls.w	800df72 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e0b8:	698a      	ldr	r2, [r1, #24]
 800e0ba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e0be:	4302      	orrs	r2, r0
 800e0c0:	618a      	str	r2, [r1, #24]
 800e0c2:	e756      	b.n	800df72 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e0c4:	4b2f      	ldr	r3, [pc, #188]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e0c6:	68a1      	ldr	r1, [r4, #8]
 800e0c8:	699a      	ldr	r2, [r3, #24]
 800e0ca:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800e0ce:	430a      	orrs	r2, r1
 800e0d0:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e0d2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0d4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e0d6:	2902      	cmp	r1, #2
 800e0d8:	d11d      	bne.n	800e116 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0da:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e0de:	f43f af3a 	beq.w	800df56 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e0e2:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e0e4:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0e8:	4f26      	ldr	r7, [pc, #152]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e0ea:	f022 0207 	bic.w	r2, r2, #7
 800e0ee:	430a      	orrs	r2, r1
 800e0f0:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800e0f2:	f7fc f9df 	bl	800a4b4 <HAL_GetTick>
 800e0f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	6862      	ldr	r2, [r4, #4]
 800e0fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e100:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800e104:	f43f af6f 	beq.w	800dfe6 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e108:	f7fc f9d4 	bl	800a4b4 <HAL_GetTick>
 800e10c:	1b80      	subs	r0, r0, r6
 800e10e:	4540      	cmp	r0, r8
 800e110:	d9f2      	bls.n	800e0f8 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800e112:	2003      	movs	r0, #3
 800e114:	e720      	b.n	800df58 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e116:	2903      	cmp	r1, #3
 800e118:	d102      	bne.n	800e120 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e11a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800e11e:	e7de      	b.n	800e0de <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e120:	2901      	cmp	r1, #1
 800e122:	d102      	bne.n	800e12a <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e124:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800e128:	e7d9      	b.n	800e0de <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e12a:	f012 0f04 	tst.w	r2, #4
 800e12e:	e7d6      	b.n	800e0de <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e130:	4914      	ldr	r1, [pc, #80]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e132:	68e0      	ldr	r0, [r4, #12]
 800e134:	698a      	ldr	r2, [r1, #24]
 800e136:	f002 020f 	and.w	r2, r2, #15
 800e13a:	4290      	cmp	r0, r2
 800e13c:	f4bf af57 	bcs.w	800dfee <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e140:	698a      	ldr	r2, [r1, #24]
 800e142:	f022 020f 	bic.w	r2, r2, #15
 800e146:	4302      	orrs	r2, r0
 800e148:	618a      	str	r2, [r1, #24]
 800e14a:	e750      	b.n	800dfee <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e14c:	680a      	ldr	r2, [r1, #0]
 800e14e:	f022 020f 	bic.w	r2, r2, #15
 800e152:	432a      	orrs	r2, r5
 800e154:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e156:	680a      	ldr	r2, [r1, #0]
 800e158:	f002 020f 	and.w	r2, r2, #15
 800e15c:	42aa      	cmp	r2, r5
 800e15e:	f47f aefa 	bne.w	800df56 <HAL_RCC_ClockConfig+0xa>
 800e162:	e74b      	b.n	800dffc <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e164:	4907      	ldr	r1, [pc, #28]	@ (800e184 <HAL_RCC_ClockConfig+0x238>)
 800e166:	6920      	ldr	r0, [r4, #16]
 800e168:	698a      	ldr	r2, [r1, #24]
 800e16a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e16e:	4290      	cmp	r0, r2
 800e170:	f4bf af47 	bcs.w	800e002 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e174:	698a      	ldr	r2, [r1, #24]
 800e176:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e17a:	4302      	orrs	r2, r0
 800e17c:	618a      	str	r2, [r1, #24]
 800e17e:	e740      	b.n	800e002 <HAL_RCC_ClockConfig+0xb6>
 800e180:	52002000 	.word	0x52002000
 800e184:	58024400 	.word	0x58024400
 800e188:	0802c518 	.word	0x0802c518
 800e18c:	24000068 	.word	0x24000068
 800e190:	2400006c 	.word	0x2400006c
 800e194:	24000074 	.word	0x24000074

0800e198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e198:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e19a:	f7ff fe35 	bl	800de08 <HAL_RCC_GetSysClockFreq>
 800e19e:	4a0b      	ldr	r2, [pc, #44]	@ (800e1cc <HAL_RCC_GetHCLKFreq+0x34>)
 800e1a0:	490b      	ldr	r1, [pc, #44]	@ (800e1d0 <HAL_RCC_GetHCLKFreq+0x38>)
 800e1a2:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e1a4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e1a6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e1aa:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e1ae:	5ccb      	ldrb	r3, [r1, r3]
 800e1b0:	f003 031f 	and.w	r3, r3, #31
 800e1b4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e1b8:	5c88      	ldrb	r0, [r1, r2]
 800e1ba:	4a06      	ldr	r2, [pc, #24]	@ (800e1d4 <HAL_RCC_GetHCLKFreq+0x3c>)
 800e1bc:	f000 001f 	and.w	r0, r0, #31
 800e1c0:	fa23 f000 	lsr.w	r0, r3, r0
 800e1c4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e1c6:	4a04      	ldr	r2, [pc, #16]	@ (800e1d8 <HAL_RCC_GetHCLKFreq+0x40>)
 800e1c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800e1ca:	bd08      	pop	{r3, pc}
 800e1cc:	58024400 	.word	0x58024400
 800e1d0:	0802c518 	.word	0x0802c518
 800e1d4:	24000068 	.word	0x24000068
 800e1d8:	2400006c 	.word	0x2400006c

0800e1dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e1dc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e1de:	f7ff ffdb 	bl	800e198 <HAL_RCC_GetHCLKFreq>
 800e1e2:	4b05      	ldr	r3, [pc, #20]	@ (800e1f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e1e4:	4a05      	ldr	r2, [pc, #20]	@ (800e1fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800e1e6:	69db      	ldr	r3, [r3, #28]
 800e1e8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e1ec:	5cd3      	ldrb	r3, [r2, r3]
 800e1ee:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e1f2:	40d8      	lsrs	r0, r3
 800e1f4:	bd08      	pop	{r3, pc}
 800e1f6:	bf00      	nop
 800e1f8:	58024400 	.word	0x58024400
 800e1fc:	0802c518 	.word	0x0802c518

0800e200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e200:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e202:	f7ff ffc9 	bl	800e198 <HAL_RCC_GetHCLKFreq>
 800e206:	4b05      	ldr	r3, [pc, #20]	@ (800e21c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800e208:	4a05      	ldr	r2, [pc, #20]	@ (800e220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e20a:	69db      	ldr	r3, [r3, #28]
 800e20c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800e210:	5cd3      	ldrb	r3, [r2, r3]
 800e212:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e216:	40d8      	lsrs	r0, r3
 800e218:	bd08      	pop	{r3, pc}
 800e21a:	bf00      	nop
 800e21c:	58024400 	.word	0x58024400
 800e220:	0802c518 	.word	0x0802c518

0800e224 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e224:	233f      	movs	r3, #63	@ 0x3f
 800e226:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e228:	4b11      	ldr	r3, [pc, #68]	@ (800e270 <HAL_RCC_GetClockConfig+0x4c>)
 800e22a:	691a      	ldr	r2, [r3, #16]
 800e22c:	f002 0207 	and.w	r2, r2, #7
 800e230:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e232:	699a      	ldr	r2, [r3, #24]
 800e234:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800e238:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e23a:	699a      	ldr	r2, [r3, #24]
 800e23c:	f002 020f 	and.w	r2, r2, #15
 800e240:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e242:	699a      	ldr	r2, [r3, #24]
 800e244:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e248:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e24a:	69da      	ldr	r2, [r3, #28]
 800e24c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e250:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e252:	69da      	ldr	r2, [r3, #28]
 800e254:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e258:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e25a:	6a1b      	ldr	r3, [r3, #32]
 800e25c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e260:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e262:	4b04      	ldr	r3, [pc, #16]	@ (800e274 <HAL_RCC_GetClockConfig+0x50>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 030f 	and.w	r3, r3, #15
 800e26a:	600b      	str	r3, [r1, #0]
}
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	58024400 	.word	0x58024400
 800e274:	52002000 	.word	0x52002000

0800e278 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e27a:	4c3a      	ldr	r4, [pc, #232]	@ (800e364 <RCCEx_PLL2_Config+0xec>)
{
 800e27c:	4606      	mov	r6, r0
 800e27e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e280:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e282:	f003 0303 	and.w	r3, r3, #3
 800e286:	2b03      	cmp	r3, #3
 800e288:	d069      	beq.n	800e35e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e290:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e292:	f7fc f90f 	bl	800a4b4 <HAL_GetTick>
 800e296:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	011a      	lsls	r2, r3, #4
 800e29c:	d44b      	bmi.n	800e336 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e29e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e2a0:	6832      	ldr	r2, [r6, #0]
 800e2a2:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e2a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800e2aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2ac:	68b3      	ldr	r3, [r6, #8]
 800e2ae:	68f2      	ldr	r2, [r6, #12]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	3a01      	subs	r2, #1
 800e2b4:	025b      	lsls	r3, r3, #9
 800e2b6:	0412      	lsls	r2, r2, #16
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	6872      	ldr	r2, [r6, #4]
 800e2c2:	3a01      	subs	r2, #1
 800e2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	6932      	ldr	r2, [r6, #16]
 800e2cc:	3a01      	subs	r2, #1
 800e2ce:	0612      	lsls	r2, r2, #24
 800e2d0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e2d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e2da:	6972      	ldr	r2, [r6, #20]
 800e2dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e2e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e2e6:	69b2      	ldr	r2, [r6, #24]
 800e2e8:	f023 0320 	bic.w	r3, r3, #32
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e2f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e2f2:	f023 0310 	bic.w	r3, r3, #16
 800e2f6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e2f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e2fa:	69f2      	ldr	r2, [r6, #28]
 800e2fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e300:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e304:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e308:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e30a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e30c:	f043 0310 	orr.w	r3, r3, #16
 800e310:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e312:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800e314:	b9b5      	cbnz	r5, 800e344 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e316:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e31a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e31c:	4c11      	ldr	r4, [pc, #68]	@ (800e364 <RCCEx_PLL2_Config+0xec>)
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e324:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e326:	f7fc f8c5 	bl	800a4b4 <HAL_GetTick>
 800e32a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e32c:	6823      	ldr	r3, [r4, #0]
 800e32e:	011b      	lsls	r3, r3, #4
 800e330:	d50f      	bpl.n	800e352 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800e332:	2000      	movs	r0, #0
 800e334:	e005      	b.n	800e342 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e336:	f7fc f8bd 	bl	800a4b4 <HAL_GetTick>
 800e33a:	1bc0      	subs	r0, r0, r7
 800e33c:	2802      	cmp	r0, #2
 800e33e:	d9ab      	bls.n	800e298 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800e340:	2003      	movs	r0, #3
}
 800e342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800e344:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e346:	bf0c      	ite	eq
 800e348:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e34c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800e350:	e7e3      	b.n	800e31a <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e352:	f7fc f8af 	bl	800a4b4 <HAL_GetTick>
 800e356:	1b40      	subs	r0, r0, r5
 800e358:	2802      	cmp	r0, #2
 800e35a:	d9e7      	bls.n	800e32c <RCCEx_PLL2_Config+0xb4>
 800e35c:	e7f0      	b.n	800e340 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800e35e:	2001      	movs	r0, #1
 800e360:	e7ef      	b.n	800e342 <RCCEx_PLL2_Config+0xca>
 800e362:	bf00      	nop
 800e364:	58024400 	.word	0x58024400

0800e368 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e36a:	4c3a      	ldr	r4, [pc, #232]	@ (800e454 <RCCEx_PLL3_Config+0xec>)
{
 800e36c:	4606      	mov	r6, r0
 800e36e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e370:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e372:	f003 0303 	and.w	r3, r3, #3
 800e376:	2b03      	cmp	r3, #3
 800e378:	d069      	beq.n	800e44e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e380:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e382:	f7fc f897 	bl	800a4b4 <HAL_GetTick>
 800e386:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e388:	6823      	ldr	r3, [r4, #0]
 800e38a:	009a      	lsls	r2, r3, #2
 800e38c:	d44b      	bmi.n	800e426 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e38e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e390:	6832      	ldr	r2, [r6, #0]
 800e392:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800e396:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800e39a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e39c:	68b3      	ldr	r3, [r6, #8]
 800e39e:	68f2      	ldr	r2, [r6, #12]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	3a01      	subs	r2, #1
 800e3a4:	025b      	lsls	r3, r3, #9
 800e3a6:	0412      	lsls	r2, r2, #16
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	6872      	ldr	r2, [r6, #4]
 800e3b2:	3a01      	subs	r2, #1
 800e3b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	6932      	ldr	r2, [r6, #16]
 800e3bc:	3a01      	subs	r2, #1
 800e3be:	0612      	lsls	r2, r2, #24
 800e3c0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e3c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e3ca:	6972      	ldr	r2, [r6, #20]
 800e3cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e3d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e3d6:	69b2      	ldr	r2, [r6, #24]
 800e3d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e3e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e3e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e3e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e3e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e3ea:	69f2      	ldr	r2, [r6, #28]
 800e3ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e3f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e3f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e3f8:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e3fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e3fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e400:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e402:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800e404:	b9b5      	cbnz	r5, 800e434 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e406:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e40a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e40c:	4c11      	ldr	r4, [pc, #68]	@ (800e454 <RCCEx_PLL3_Config+0xec>)
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e414:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e416:	f7fc f84d 	bl	800a4b4 <HAL_GetTick>
 800e41a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	d50f      	bpl.n	800e442 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800e422:	2000      	movs	r0, #0
 800e424:	e005      	b.n	800e432 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e426:	f7fc f845 	bl	800a4b4 <HAL_GetTick>
 800e42a:	1bc0      	subs	r0, r0, r7
 800e42c:	2802      	cmp	r0, #2
 800e42e:	d9ab      	bls.n	800e388 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800e430:	2003      	movs	r0, #3
}
 800e432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800e434:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e436:	bf0c      	ite	eq
 800e438:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e43c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800e440:	e7e3      	b.n	800e40a <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e442:	f7fc f837 	bl	800a4b4 <HAL_GetTick>
 800e446:	1b40      	subs	r0, r0, r5
 800e448:	2802      	cmp	r0, #2
 800e44a:	d9e7      	bls.n	800e41c <RCCEx_PLL3_Config+0xb4>
 800e44c:	e7f0      	b.n	800e430 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800e44e:	2001      	movs	r0, #1
 800e450:	e7ef      	b.n	800e432 <RCCEx_PLL3_Config+0xca>
 800e452:	bf00      	nop
 800e454:	58024400 	.word	0x58024400

0800e458 <HAL_RCCEx_PeriphCLKConfig>:
{
 800e458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e45c:	6803      	ldr	r3, [r0, #0]
{
 800e45e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e460:	011c      	lsls	r4, r3, #4
 800e462:	d51e      	bpl.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e464:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800e466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e46a:	d02a      	beq.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e46c:	d80f      	bhi.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800e46e:	b1d3      	cbz	r3, 800e4a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800e470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e474:	d01d      	beq.n	800e4b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800e476:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e478:	682b      	ldr	r3, [r5, #0]
 800e47a:	05d8      	lsls	r0, r3, #23
 800e47c:	d54f      	bpl.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800e47e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800e480:	2b04      	cmp	r3, #4
 800e482:	d84b      	bhi.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800e484:	e8df f003 	tbb	[pc, r3]
 800e488:	27443d22 	.word	0x27443d22
 800e48c:	27          	.byte	0x27
 800e48d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e48e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e492:	d1f0      	bne.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e494:	4a86      	ldr	r2, [pc, #536]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e496:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800e498:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e49a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e49e:	430b      	orrs	r3, r1
 800e4a0:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e4a2:	2600      	movs	r6, #0
 800e4a4:	e7e8      	b.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4a6:	4a82      	ldr	r2, [pc, #520]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e4a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e4aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e4b0:	e7f0      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e4b2:	2102      	movs	r1, #2
 800e4b4:	3008      	adds	r0, #8
 800e4b6:	f7ff fedf 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4ba:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d1db      	bne.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800e4c0:	e7e8      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4c2:	2102      	movs	r1, #2
 800e4c4:	3028      	adds	r0, #40	@ 0x28
 800e4c6:	f7ff ff4f 	bl	800e368 <RCCEx_PLL3_Config>
 800e4ca:	e7f6      	b.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4cc:	4a78      	ldr	r2, [pc, #480]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e4ce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e4d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800e4d6:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800e4d8:	bb1c      	cbnz	r4, 800e522 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e4da:	4a75      	ldr	r2, [pc, #468]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e4dc:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800e4de:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e4e0:	f023 0307 	bic.w	r3, r3, #7
 800e4e4:	430b      	orrs	r3, r1
 800e4e6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e4e8:	682b      	ldr	r3, [r5, #0]
 800e4ea:	0599      	lsls	r1, r3, #22
 800e4ec:	d528      	bpl.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800e4ee:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800e4f0:	2b80      	cmp	r3, #128	@ 0x80
 800e4f2:	d043      	beq.n	800e57c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800e4f4:	d817      	bhi.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800e4f6:	b3a3      	cbz	r3, 800e562 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800e4f8:	2b40      	cmp	r3, #64	@ 0x40
 800e4fa:	d038      	beq.n	800e56e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e4fc:	2601      	movs	r6, #1
 800e4fe:	4634      	mov	r4, r6
 800e500:	e01e      	b.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e502:	2100      	movs	r1, #0
 800e504:	f105 0008 	add.w	r0, r5, #8
 800e508:	f7ff feb6 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e50c:	4604      	mov	r4, r0
        break;
 800e50e:	e7e3      	b.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e510:	2100      	movs	r1, #0
 800e512:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e516:	f7ff ff27 	bl	800e368 <RCCEx_PLL3_Config>
 800e51a:	e7f7      	b.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800e51c:	2601      	movs	r6, #1
 800e51e:	4634      	mov	r4, r6
 800e520:	e7e2      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e522:	4626      	mov	r6, r4
 800e524:	e7e0      	b.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800e526:	2bc0      	cmp	r3, #192	@ 0xc0
 800e528:	d002      	beq.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800e52a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e52e:	d1e5      	bne.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800e530:	bb54      	cbnz	r4, 800e588 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e532:	4a5f      	ldr	r2, [pc, #380]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e534:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e536:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e538:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800e53c:	430b      	orrs	r3, r1
 800e53e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	055a      	lsls	r2, r3, #21
 800e544:	d531      	bpl.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800e546:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800e54a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e54e:	d049      	beq.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800e550:	d81c      	bhi.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x134>
 800e552:	2b00      	cmp	r3, #0
 800e554:	d039      	beq.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e556:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e55a:	d03c      	beq.n	800e5d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800e55c:	2601      	movs	r6, #1
 800e55e:	4634      	mov	r4, r6
 800e560:	e023      	b.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e562:	4a53      	ldr	r2, [pc, #332]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e564:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e56a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e56c:	e7e0      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e56e:	2100      	movs	r1, #0
 800e570:	f105 0008 	add.w	r0, r5, #8
 800e574:	f7ff fe80 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e578:	4604      	mov	r4, r0
        break;
 800e57a:	e7d9      	b.n	800e530 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e57c:	2100      	movs	r1, #0
 800e57e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e582:	f7ff fef1 	bl	800e368 <RCCEx_PLL3_Config>
 800e586:	e7f7      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800e588:	4626      	mov	r6, r4
 800e58a:	e7d9      	b.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800e58c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e590:	d002      	beq.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800e592:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e596:	d1e1      	bne.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800e598:	bb54      	cbnz	r4, 800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e59a:	4a45      	ldr	r2, [pc, #276]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e59c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800e5a0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e5a2:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800e5a6:	430b      	orrs	r3, r1
 800e5a8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	051b      	lsls	r3, r3, #20
 800e5ae:	d530      	bpl.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800e5b0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800e5b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e5b8:	d045      	beq.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e5ba:	d81b      	bhi.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800e5bc:	b3b3      	cbz	r3, 800e62c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800e5be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5c2:	d039      	beq.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800e5c4:	2601      	movs	r6, #1
 800e5c6:	4634      	mov	r4, r6
 800e5c8:	e023      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5ca:	4a39      	ldr	r2, [pc, #228]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e5cc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e5ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e5d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e5d4:	e7e0      	b.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	f105 0008 	add.w	r0, r5, #8
 800e5dc:	f7ff fe4c 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e5e0:	4604      	mov	r4, r0
        break;
 800e5e2:	e7d9      	b.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e5ea:	f7ff febd 	bl	800e368 <RCCEx_PLL3_Config>
 800e5ee:	e7f7      	b.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800e5f0:	4626      	mov	r6, r4
 800e5f2:	e7da      	b.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800e5f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e5f8:	d002      	beq.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e5fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e5fe:	d1e1      	bne.n	800e5c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800e600:	bb3c      	cbnz	r4, 800e652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e602:	4a2b      	ldr	r2, [pc, #172]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e604:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800e608:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e60a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800e60e:	430b      	orrs	r3, r1
 800e610:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e612:	682b      	ldr	r3, [r5, #0]
 800e614:	019f      	lsls	r7, r3, #6
 800e616:	d528      	bpl.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800e618:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e61a:	2b20      	cmp	r3, #32
 800e61c:	d03e      	beq.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800e61e:	d81a      	bhi.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800e620:	b1db      	cbz	r3, 800e65a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e622:	2b10      	cmp	r3, #16
 800e624:	d034      	beq.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800e626:	2601      	movs	r6, #1
 800e628:	4634      	mov	r4, r6
 800e62a:	e01e      	b.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e62c:	4a20      	ldr	r2, [pc, #128]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e62e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e634:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e636:	e7e3      	b.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e638:	2100      	movs	r1, #0
 800e63a:	f105 0008 	add.w	r0, r5, #8
 800e63e:	f7ff fe1b 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e642:	4604      	mov	r4, r0
        break;
 800e644:	e7dc      	b.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e646:	2100      	movs	r1, #0
 800e648:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e64c:	f7ff fe8c 	bl	800e368 <RCCEx_PLL3_Config>
 800e650:	e7f7      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e652:	4626      	mov	r6, r4
 800e654:	e7dd      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800e656:	2b30      	cmp	r3, #48	@ 0x30
 800e658:	d1e5      	bne.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800e65a:	bb34      	cbnz	r4, 800e6aa <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e65c:	4a14      	ldr	r2, [pc, #80]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e65e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e660:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800e662:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800e666:	430b      	orrs	r3, r1
 800e668:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e66a:	682b      	ldr	r3, [r5, #0]
 800e66c:	04d8      	lsls	r0, r3, #19
 800e66e:	d530      	bpl.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800e670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e676:	f000 8097 	beq.w	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800e67a:	d81b      	bhi.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f000 8086 	beq.w	800e78e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800e682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e686:	f000 8088 	beq.w	800e79a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800e68a:	2601      	movs	r6, #1
 800e68c:	4634      	mov	r4, r6
 800e68e:	e020      	b.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e690:	4a07      	ldr	r2, [pc, #28]	@ (800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800e692:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e698:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e69a:	e7de      	b.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e69c:	2102      	movs	r1, #2
 800e69e:	f105 0008 	add.w	r0, r5, #8
 800e6a2:	f7ff fde9 	bl	800e278 <RCCEx_PLL2_Config>
 800e6a6:	4604      	mov	r4, r0
        break;
 800e6a8:	e7d7      	b.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e6aa:	4626      	mov	r6, r4
 800e6ac:	e7dd      	b.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800e6ae:	bf00      	nop
 800e6b0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800e6b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e6b8:	d002      	beq.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800e6ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6be:	d1e4      	bne.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800e6c0:	2c00      	cmp	r4, #0
 800e6c2:	d177      	bne.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e6c4:	4a9e      	ldr	r2, [pc, #632]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e6c6:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800e6c8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e6ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e6ce:	430b      	orrs	r3, r1
 800e6d0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e6d2:	682b      	ldr	r3, [r5, #0]
 800e6d4:	0499      	lsls	r1, r3, #18
 800e6d6:	d50c      	bpl.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800e6d8:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800e6da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6de:	f000 8083 	beq.w	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800e6e2:	d869      	bhi.n	800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d06f      	beq.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800e6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6ec:	d075      	beq.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e6ee:	2601      	movs	r6, #1
 800e6f0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e6f2:	682b      	ldr	r3, [r5, #0]
 800e6f4:	045a      	lsls	r2, r3, #17
 800e6f6:	d50e      	bpl.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800e6f8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800e6fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e700:	f000 8093 	beq.w	800e82a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800e704:	d878      	bhi.n	800e7f8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800e706:	2b00      	cmp	r3, #0
 800e708:	d07e      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800e70a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e70e:	f000 8085 	beq.w	800e81c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800e712:	2601      	movs	r6, #1
 800e714:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e716:	682b      	ldr	r3, [r5, #0]
 800e718:	015b      	lsls	r3, r3, #5
 800e71a:	d515      	bpl.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800e71c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e71e:	b14b      	cbz	r3, 800e734 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800e720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e724:	f040 8089 	bne.w	800e83a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e728:	2101      	movs	r1, #1
 800e72a:	f105 0008 	add.w	r0, r5, #8
 800e72e:	f7ff fda3 	bl	800e278 <RCCEx_PLL2_Config>
 800e732:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e734:	2c00      	cmp	r4, #0
 800e736:	f040 8083 	bne.w	800e840 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800e73a:	4a81      	ldr	r2, [pc, #516]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e73c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800e73e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800e740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e744:	430b      	orrs	r3, r1
 800e746:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	041f      	lsls	r7, r3, #16
 800e74c:	d511      	bpl.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800e74e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e754:	d076      	beq.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800e756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e75a:	d079      	beq.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d17e      	bne.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800e760:	2c00      	cmp	r4, #0
 800e762:	d17f      	bne.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e764:	4a76      	ldr	r2, [pc, #472]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e766:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800e768:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e76a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800e76e:	430b      	orrs	r3, r1
 800e770:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e772:	682b      	ldr	r3, [r5, #0]
 800e774:	01d8      	lsls	r0, r3, #7
 800e776:	f140 8085 	bpl.w	800e884 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800e77a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800e77c:	2b03      	cmp	r3, #3
 800e77e:	f200 80e5 	bhi.w	800e94c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800e782:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e786:	0076      	.short	0x0076
 800e788:	00d50071 	.word	0x00d50071
 800e78c:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e78e:	4a6c      	ldr	r2, [pc, #432]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e790:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e796:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e798:	e792      	b.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e79a:	2100      	movs	r1, #0
 800e79c:	f105 0008 	add.w	r0, r5, #8
 800e7a0:	f7ff fd6a 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e7a4:	4604      	mov	r4, r0
        break;
 800e7a6:	e78b      	b.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e7ae:	f7ff fddb 	bl	800e368 <RCCEx_PLL3_Config>
 800e7b2:	e7f7      	b.n	800e7a4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800e7b4:	4626      	mov	r6, r4
 800e7b6:	e78c      	b.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800e7b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e7bc:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800e7c0:	d002      	beq.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800e7c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e7c6:	d192      	bne.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800e7c8:	b9a4      	cbnz	r4, 800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e7ca:	4a5d      	ldr	r2, [pc, #372]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e7cc:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800e7ce:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e7d0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800e7d4:	430b      	orrs	r3, r1
 800e7d6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e7d8:	e78b      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e7da:	2101      	movs	r1, #1
 800e7dc:	f105 0008 	add.w	r0, r5, #8
 800e7e0:	f7ff fd4a 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e7e4:	4604      	mov	r4, r0
        break;
 800e7e6:	e7ef      	b.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e7e8:	2101      	movs	r1, #1
 800e7ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e7ee:	f7ff fdbb 	bl	800e368 <RCCEx_PLL3_Config>
 800e7f2:	e7f7      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800e7f4:	4626      	mov	r6, r4
 800e7f6:	e77c      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800e7f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e7fc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800e800:	d002      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800e802:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e806:	d184      	bne.n	800e712 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800e808:	b9ac      	cbnz	r4, 800e836 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e80a:	4a4d      	ldr	r2, [pc, #308]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e80c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800e810:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e812:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800e816:	430b      	orrs	r3, r1
 800e818:	6593      	str	r3, [r2, #88]	@ 0x58
 800e81a:	e77c      	b.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e81c:	2101      	movs	r1, #1
 800e81e:	f105 0008 	add.w	r0, r5, #8
 800e822:	f7ff fd29 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e826:	4604      	mov	r4, r0
        break;
 800e828:	e7ee      	b.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e82a:	2101      	movs	r1, #1
 800e82c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e830:	f7ff fd9a 	bl	800e368 <RCCEx_PLL3_Config>
 800e834:	e7f7      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800e836:	4626      	mov	r6, r4
 800e838:	e76d      	b.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800e83a:	2601      	movs	r6, #1
 800e83c:	4634      	mov	r4, r6
 800e83e:	e783      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800e840:	4626      	mov	r6, r4
 800e842:	e781      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e844:	4a3e      	ldr	r2, [pc, #248]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e846:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e84c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800e84e:	e787      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e850:	2101      	movs	r1, #1
 800e852:	f105 0008 	add.w	r0, r5, #8
 800e856:	f7ff fd0f 	bl	800e278 <RCCEx_PLL2_Config>
 800e85a:	4604      	mov	r4, r0
        break;
 800e85c:	e780      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800e85e:	2601      	movs	r6, #1
 800e860:	4634      	mov	r4, r6
 800e862:	e786      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800e864:	4626      	mov	r6, r4
 800e866:	e784      	b.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e868:	4a35      	ldr	r2, [pc, #212]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e86a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800e86c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e870:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800e872:	2c00      	cmp	r4, #0
 800e874:	d16d      	bne.n	800e952 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e876:	4a32      	ldr	r2, [pc, #200]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e878:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800e87a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800e87c:	f023 0303 	bic.w	r3, r3, #3
 800e880:	430b      	orrs	r3, r1
 800e882:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	0259      	lsls	r1, r3, #9
 800e888:	d539      	bpl.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e88a:	4f2e      	ldr	r7, [pc, #184]	@ (800e944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e892:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800e894:	f7fb fe0e 	bl	800a4b4 <HAL_GetTick>
 800e898:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	05da      	lsls	r2, r3, #23
 800e89e:	d55a      	bpl.n	800e956 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800e8a0:	2c00      	cmp	r4, #0
 800e8a2:	d176      	bne.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e8a4:	4b26      	ldr	r3, [pc, #152]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e8a6:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800e8aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e8ac:	4042      	eors	r2, r0
 800e8ae:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800e8b2:	d00b      	beq.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e8b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800e8b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e8b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800e8bc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800e8c0:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e8c2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e8c4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800e8c8:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800e8ca:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e8cc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800e8d0:	d04a      	beq.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e8d2:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800e8d6:	491a      	ldr	r1, [pc, #104]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e8d8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e8dc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800e8e0:	d153      	bne.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x532>
 800e8e2:	6908      	ldr	r0, [r1, #16]
 800e8e4:	4a18      	ldr	r2, [pc, #96]	@ (800e948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800e8e6:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800e8ea:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800e8ee:	4302      	orrs	r2, r0
 800e8f0:	610a      	str	r2, [r1, #16]
 800e8f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8f6:	4a12      	ldr	r2, [pc, #72]	@ (800e940 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800e8f8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800e8fa:	430b      	orrs	r3, r1
 800e8fc:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e8fe:	682b      	ldr	r3, [r5, #0]
 800e900:	07d8      	lsls	r0, r3, #31
 800e902:	d50a      	bpl.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800e904:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800e908:	2b10      	cmp	r3, #16
 800e90a:	d05b      	beq.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800e90c:	d843      	bhi.n	800e996 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d047      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800e912:	2b08      	cmp	r3, #8
 800e914:	d04f      	beq.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800e916:	2601      	movs	r6, #1
 800e918:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e91a:	682b      	ldr	r3, [r5, #0]
 800e91c:	0799      	lsls	r1, r3, #30
 800e91e:	d567      	bpl.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e920:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800e922:	2b05      	cmp	r3, #5
 800e924:	d87a      	bhi.n	800ea1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800e926:	e8df f003 	tbb	[pc, r3]
 800e92a:	555b      	.short	0x555b
 800e92c:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e930:	2102      	movs	r1, #2
 800e932:	f105 0008 	add.w	r0, r5, #8
 800e936:	f7ff fc9f 	bl	800e278 <RCCEx_PLL2_Config>
 800e93a:	4604      	mov	r4, r0
        break;
 800e93c:	e799      	b.n	800e872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e93e:	bf00      	nop
 800e940:	58024400 	.word	0x58024400
 800e944:	58024800 	.word	0x58024800
 800e948:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800e94c:	2601      	movs	r6, #1
 800e94e:	4634      	mov	r4, r6
 800e950:	e798      	b.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800e952:	4626      	mov	r6, r4
 800e954:	e796      	b.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e956:	f7fb fdad 	bl	800a4b4 <HAL_GetTick>
 800e95a:	eba0 0008 	sub.w	r0, r0, r8
 800e95e:	2864      	cmp	r0, #100	@ 0x64
 800e960:	d99b      	bls.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800e962:	2603      	movs	r6, #3
 800e964:	4634      	mov	r4, r6
 800e966:	e7ca      	b.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800e968:	f7fb fda4 	bl	800a4b4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e96c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800ea28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800e970:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e972:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e976:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e97a:	079b      	lsls	r3, r3, #30
 800e97c:	d4a9      	bmi.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e97e:	f7fb fd99 	bl	800a4b4 <HAL_GetTick>
 800e982:	1bc0      	subs	r0, r0, r7
 800e984:	4548      	cmp	r0, r9
 800e986:	d9f6      	bls.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800e988:	e7eb      	b.n	800e962 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e98a:	690a      	ldr	r2, [r1, #16]
 800e98c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800e990:	e7ae      	b.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e992:	4626      	mov	r6, r4
 800e994:	e7b3      	b.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800e996:	f023 0208 	bic.w	r2, r3, #8
 800e99a:	2a20      	cmp	r2, #32
 800e99c:	d001      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800e99e:	2b18      	cmp	r3, #24
 800e9a0:	d1b9      	bne.n	800e916 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800e9a2:	b9ac      	cbnz	r4, 800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e9a4:	4a20      	ldr	r2, [pc, #128]	@ (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e9a6:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800e9aa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800e9ac:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800e9b0:	430b      	orrs	r3, r1
 800e9b2:	6553      	str	r3, [r2, #84]	@ 0x54
 800e9b4:	e7b1      	b.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9b6:	2101      	movs	r1, #1
 800e9b8:	f105 0008 	add.w	r0, r5, #8
 800e9bc:	f7ff fc5c 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9c0:	4604      	mov	r4, r0
        break;
 800e9c2:	e7ee      	b.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800e9ca:	f7ff fccd 	bl	800e368 <RCCEx_PLL3_Config>
 800e9ce:	e7f7      	b.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800e9d0:	4626      	mov	r6, r4
 800e9d2:	e7a2      	b.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	f105 0008 	add.w	r0, r5, #8
 800e9da:	f7ff fc4d 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9de:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e9e0:	b9fc      	cbnz	r4, 800ea22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e9e2:	4a11      	ldr	r2, [pc, #68]	@ (800ea28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e9e4:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800e9e6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800e9e8:	f023 0307 	bic.w	r3, r3, #7
 800e9ec:	430b      	orrs	r3, r1
 800e9ee:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e9f0:	682b      	ldr	r3, [r5, #0]
 800e9f2:	075a      	lsls	r2, r3, #29
 800e9f4:	d52b      	bpl.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e9f6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800e9fa:	2b05      	cmp	r3, #5
 800e9fc:	f200 816e 	bhi.w	800ecdc <HAL_RCCEx_PeriphCLKConfig+0x884>
 800ea00:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ea04:	0014001a 	.word	0x0014001a
 800ea08:	001a0166 	.word	0x001a0166
 800ea0c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea10:	2101      	movs	r1, #1
 800ea12:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ea16:	f7ff fca7 	bl	800e368 <RCCEx_PLL3_Config>
 800ea1a:	e7e0      	b.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ea1c:	2601      	movs	r6, #1
 800ea1e:	4634      	mov	r4, r6
 800ea20:	e7e6      	b.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ea22:	4626      	mov	r6, r4
 800ea24:	e7e4      	b.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ea26:	bf00      	nop
 800ea28:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea2c:	2101      	movs	r1, #1
 800ea2e:	f105 0008 	add.w	r0, r5, #8
 800ea32:	f7ff fc21 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea36:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ea38:	2c00      	cmp	r4, #0
 800ea3a:	f040 8152 	bne.w	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ea3e:	4aaa      	ldr	r2, [pc, #680]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ea40:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800ea44:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ea46:	f023 0307 	bic.w	r3, r3, #7
 800ea4a:	430b      	orrs	r3, r1
 800ea4c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ea4e:	682b      	ldr	r3, [r5, #0]
 800ea50:	069b      	lsls	r3, r3, #26
 800ea52:	d510      	bpl.n	800ea76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ea54:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800ea58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea5c:	f000 8160 	beq.w	800ed20 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800ea60:	f200 8144 	bhi.w	800ecec <HAL_RCCEx_PeriphCLKConfig+0x894>
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f000 814a 	beq.w	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800ea6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea6e:	f000 8150 	beq.w	800ed12 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800ea72:	2601      	movs	r6, #1
 800ea74:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ea76:	682b      	ldr	r3, [r5, #0]
 800ea78:	065f      	lsls	r7, r3, #25
 800ea7a:	d510      	bpl.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ea7c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800ea80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea84:	f000 816e 	beq.w	800ed64 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800ea88:	f200 8152 	bhi.w	800ed30 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 8158 	beq.w	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800ea92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea96:	f000 815e 	beq.w	800ed56 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800ea9a:	2601      	movs	r6, #1
 800ea9c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ea9e:	682b      	ldr	r3, [r5, #0]
 800eaa0:	0618      	lsls	r0, r3, #24
 800eaa2:	d510      	bpl.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800eaa4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800eaa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eaac:	f000 817c 	beq.w	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800eab0:	f200 8160 	bhi.w	800ed74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f000 8166 	beq.w	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800eaba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eabe:	f000 816c 	beq.w	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800eac2:	2601      	movs	r6, #1
 800eac4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800eac6:	682b      	ldr	r3, [r5, #0]
 800eac8:	0719      	lsls	r1, r3, #28
 800eaca:	d514      	bpl.n	800eaf6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800eacc:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800ead0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ead4:	d107      	bne.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ead6:	2102      	movs	r1, #2
 800ead8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800eadc:	f7ff fc44 	bl	800e368 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800eae0:	2800      	cmp	r0, #0
 800eae2:	bf18      	it	ne
 800eae4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800eae6:	4a80      	ldr	r2, [pc, #512]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800eae8:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800eaec:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800eaee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800eaf2:	430b      	orrs	r3, r1
 800eaf4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	06da      	lsls	r2, r3, #27
 800eafa:	d514      	bpl.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800eafc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800eb00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb04:	d107      	bne.n	800eb16 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eb06:	2102      	movs	r1, #2
 800eb08:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800eb0c:	f7ff fc2c 	bl	800e368 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800eb10:	2800      	cmp	r0, #0
 800eb12:	bf18      	it	ne
 800eb14:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800eb16:	4a74      	ldr	r2, [pc, #464]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800eb18:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800eb1c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800eb1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb22:	430b      	orrs	r3, r1
 800eb24:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eb26:	682b      	ldr	r3, [r5, #0]
 800eb28:	031b      	lsls	r3, r3, #12
 800eb2a:	d51b      	bpl.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800eb2c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800eb30:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800eb34:	f000 8140 	beq.w	800edb8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800eb38:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800eb3c:	d007      	beq.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800eb3e:	2900      	cmp	r1, #0
 800eb40:	f040 8140 	bne.w	800edc4 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb44:	f105 0008 	add.w	r0, r5, #8
 800eb48:	f7ff fb96 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb4c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800eb4e:	2c00      	cmp	r4, #0
 800eb50:	f040 813b 	bne.w	800edca <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eb54:	4a64      	ldr	r2, [pc, #400]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800eb56:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800eb5a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800eb5c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800eb60:	430b      	orrs	r3, r1
 800eb62:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	035f      	lsls	r7, r3, #13
 800eb68:	d50f      	bpl.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800eb6a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800eb6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb72:	f000 813b 	beq.w	800edec <HAL_RCCEx_PeriphCLKConfig+0x994>
 800eb76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eb7a:	f000 812d 	beq.w	800edd8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800eb7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb82:	f000 8124 	beq.w	800edce <HAL_RCCEx_PeriphCLKConfig+0x976>
 800eb86:	2601      	movs	r6, #1
 800eb88:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eb8a:	682b      	ldr	r3, [r5, #0]
 800eb8c:	03d8      	lsls	r0, r3, #15
 800eb8e:	d509      	bpl.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800eb90:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f000 8133 	beq.w	800edfe <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800eb98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb9c:	f000 813d 	beq.w	800ee1a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800eba0:	2601      	movs	r6, #1
 800eba2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800eba4:	682b      	ldr	r3, [r5, #0]
 800eba6:	0099      	lsls	r1, r3, #2
 800eba8:	d507      	bpl.n	800ebba <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ebaa:	2102      	movs	r1, #2
 800ebac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ebb0:	f7ff fbda 	bl	800e368 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	bf18      	it	ne
 800ebb8:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ebba:	e9d5 3100 	ldrd	r3, r1, [r5]
 800ebbe:	039a      	lsls	r2, r3, #14
 800ebc0:	f140 8143 	bpl.w	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800ebc4:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800ebc8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800ebcc:	f000 813f 	beq.w	800ee4e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800ebd0:	f200 812c 	bhi.w	800ee2c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	f000 812f 	beq.w	800ee38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800ebda:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ebdc:	02df      	lsls	r7, r3, #11
 800ebde:	d506      	bpl.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ebe0:	4841      	ldr	r0, [pc, #260]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ebe2:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800ebe4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ebe6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ebea:	4332      	orrs	r2, r6
 800ebec:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ebee:	00de      	lsls	r6, r3, #3
 800ebf0:	d507      	bpl.n	800ec02 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ebf2:	483d      	ldr	r0, [pc, #244]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ebf4:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800ebf8:	6902      	ldr	r2, [r0, #16]
 800ebfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ebfe:	4332      	orrs	r2, r6
 800ec00:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ec02:	0298      	lsls	r0, r3, #10
 800ec04:	d506      	bpl.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ec06:	4838      	ldr	r0, [pc, #224]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ec08:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800ec0a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ec0c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ec10:	4332      	orrs	r2, r6
 800ec12:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ec14:	005a      	lsls	r2, r3, #1
 800ec16:	d509      	bpl.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ec18:	4a33      	ldr	r2, [pc, #204]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ec1a:	6910      	ldr	r0, [r2, #16]
 800ec1c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800ec20:	6110      	str	r0, [r2, #16]
 800ec22:	6910      	ldr	r0, [r2, #16]
 800ec24:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800ec28:	4330      	orrs	r0, r6
 800ec2a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	da06      	bge.n	800ec3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ec30:	482d      	ldr	r0, [pc, #180]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ec32:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ec34:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800ec36:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ec3a:	4332      	orrs	r2, r6
 800ec3c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ec3e:	021f      	lsls	r7, r3, #8
 800ec40:	d507      	bpl.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ec42:	4a29      	ldr	r2, [pc, #164]	@ (800ece8 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ec44:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800ec48:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ec4a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ec4e:	4303      	orrs	r3, r0
 800ec50:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ec52:	07ce      	lsls	r6, r1, #31
 800ec54:	d506      	bpl.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec56:	2100      	movs	r1, #0
 800ec58:	f105 0008 	add.w	r0, r5, #8
 800ec5c:	f7ff fb0c 	bl	800e278 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ec60:	4607      	mov	r7, r0
 800ec62:	b900      	cbnz	r0, 800ec66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800ec64:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ec66:	686b      	ldr	r3, [r5, #4]
 800ec68:	079c      	lsls	r4, r3, #30
 800ec6a:	d506      	bpl.n	800ec7a <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	f105 0008 	add.w	r0, r5, #8
 800ec72:	f7ff fb01 	bl	800e278 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ec76:	4606      	mov	r6, r0
 800ec78:	b900      	cbnz	r0, 800ec7c <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800ec7a:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ec7c:	686b      	ldr	r3, [r5, #4]
 800ec7e:	0758      	lsls	r0, r3, #29
 800ec80:	d506      	bpl.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ec82:	2102      	movs	r1, #2
 800ec84:	f105 0008 	add.w	r0, r5, #8
 800ec88:	f7ff faf6 	bl	800e278 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	b900      	cbnz	r0, 800ec92 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800ec90:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ec92:	686b      	ldr	r3, [r5, #4]
 800ec94:	0719      	lsls	r1, r3, #28
 800ec96:	d506      	bpl.n	800eca6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec98:	2100      	movs	r1, #0
 800ec9a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ec9e:	f7ff fb63 	bl	800e368 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800eca2:	4606      	mov	r6, r0
 800eca4:	b900      	cbnz	r0, 800eca8 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800eca6:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800eca8:	686b      	ldr	r3, [r5, #4]
 800ecaa:	06da      	lsls	r2, r3, #27
 800ecac:	d506      	bpl.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ecae:	2101      	movs	r1, #1
 800ecb0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ecb4:	f7ff fb58 	bl	800e368 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ecb8:	4604      	mov	r4, r0
 800ecba:	b900      	cbnz	r0, 800ecbe <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800ecbc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ecbe:	686b      	ldr	r3, [r5, #4]
 800ecc0:	069b      	lsls	r3, r3, #26
 800ecc2:	f100 80ca 	bmi.w	800ee5a <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800ecc6:	1e20      	subs	r0, r4, #0
 800ecc8:	bf18      	it	ne
 800ecca:	2001      	movne	r0, #1
}
 800eccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ecd6:	f7ff fb47 	bl	800e368 <RCCEx_PLL3_Config>
 800ecda:	e6ac      	b.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ecdc:	2601      	movs	r6, #1
 800ecde:	4634      	mov	r4, r6
 800ece0:	e6b5      	b.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800ece2:	4626      	mov	r6, r4
 800ece4:	e6b3      	b.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800ece6:	bf00      	nop
 800ece8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ecec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ecf0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800ecf4:	d003      	beq.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800ecf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ecfa:	f47f aeba 	bne.w	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800ecfe:	b9ac      	cbnz	r4, 800ed2c <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ed00:	4a5b      	ldr	r2, [pc, #364]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ed02:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800ed06:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ed08:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800ed0c:	430b      	orrs	r3, r1
 800ed0e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ed10:	e6b1      	b.n	800ea76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed12:	2100      	movs	r1, #0
 800ed14:	f105 0008 	add.w	r0, r5, #8
 800ed18:	f7ff faae 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed1c:	4604      	mov	r4, r0
        break;
 800ed1e:	e7ee      	b.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed20:	2102      	movs	r1, #2
 800ed22:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ed26:	f7ff fb1f 	bl	800e368 <RCCEx_PLL3_Config>
 800ed2a:	e7f7      	b.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800ed2c:	4626      	mov	r6, r4
 800ed2e:	e6a2      	b.n	800ea76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ed30:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ed34:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800ed38:	d003      	beq.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800ed3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed3e:	f47f aeac 	bne.w	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800ed42:	b9ac      	cbnz	r4, 800ed70 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ed44:	4a4a      	ldr	r2, [pc, #296]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ed46:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800ed4a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ed4c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800ed50:	430b      	orrs	r3, r1
 800ed52:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed54:	e6a3      	b.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed56:	2100      	movs	r1, #0
 800ed58:	f105 0008 	add.w	r0, r5, #8
 800ed5c:	f7ff fa8c 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed60:	4604      	mov	r4, r0
        break;
 800ed62:	e7ee      	b.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed64:	2102      	movs	r1, #2
 800ed66:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ed6a:	f7ff fafd 	bl	800e368 <RCCEx_PLL3_Config>
 800ed6e:	e7f7      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800ed70:	4626      	mov	r6, r4
 800ed72:	e694      	b.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ed74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ed78:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800ed7c:	d003      	beq.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800ed7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ed82:	f47f ae9e 	bne.w	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800ed86:	b9ac      	cbnz	r4, 800edb4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ed88:	4a39      	ldr	r2, [pc, #228]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ed8a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800ed8e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ed90:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ed94:	430b      	orrs	r3, r1
 800ed96:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed98:	e695      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	f105 0008 	add.w	r0, r5, #8
 800eda0:	f7ff fa6a 	bl	800e278 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eda4:	4604      	mov	r4, r0
        break;
 800eda6:	e7ee      	b.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eda8:	2102      	movs	r1, #2
 800edaa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800edae:	f7ff fadb 	bl	800e368 <RCCEx_PLL3_Config>
 800edb2:	e7f7      	b.n	800eda4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800edb4:	4626      	mov	r6, r4
 800edb6:	e686      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800edb8:	2102      	movs	r1, #2
 800edba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800edbe:	f7ff fad3 	bl	800e368 <RCCEx_PLL3_Config>
 800edc2:	e6c3      	b.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800edc4:	2601      	movs	r6, #1
 800edc6:	4634      	mov	r4, r6
 800edc8:	e6cc      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800edca:	4626      	mov	r6, r4
 800edcc:	e6ca      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edce:	4a28      	ldr	r2, [pc, #160]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800edd0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800edd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800edd8:	b97c      	cbnz	r4, 800edfa <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800edda:	4a25      	ldr	r2, [pc, #148]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800eddc:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800ede0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ede2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ede6:	430b      	orrs	r3, r1
 800ede8:	6553      	str	r3, [r2, #84]	@ 0x54
 800edea:	e6ce      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800edec:	2101      	movs	r1, #1
 800edee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800edf2:	f7ff fab9 	bl	800e368 <RCCEx_PLL3_Config>
 800edf6:	4604      	mov	r4, r0
        break;
 800edf8:	e7ee      	b.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800edfa:	4626      	mov	r6, r4
 800edfc:	e6c5      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edfe:	4a1c      	ldr	r2, [pc, #112]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ee00:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ee02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee06:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ee08:	b974      	cbnz	r4, 800ee28 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ee0a:	4a19      	ldr	r2, [pc, #100]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ee0c:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800ee0e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ee10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee14:	430b      	orrs	r3, r1
 800ee16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ee18:	e6c4      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee1a:	2102      	movs	r1, #2
 800ee1c:	f105 0008 	add.w	r0, r5, #8
 800ee20:	f7ff fa2a 	bl	800e278 <RCCEx_PLL2_Config>
 800ee24:	4604      	mov	r4, r0
        break;
 800ee26:	e7ef      	b.n	800ee08 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800ee28:	4626      	mov	r6, r4
 800ee2a:	e6bb      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800ee2c:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800ee30:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800ee34:	f47f aed1 	bne.w	800ebda <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800ee38:	2c00      	cmp	r4, #0
 800ee3a:	f47f aecf 	bne.w	800ebdc <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ee3e:	4c0c      	ldr	r4, [pc, #48]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ee40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee42:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ee46:	4302      	orrs	r2, r0
 800ee48:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800ee4a:	4634      	mov	r4, r6
 800ee4c:	e6c6      	b.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee4e:	4f08      	ldr	r7, [pc, #32]	@ (800ee70 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ee50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ee56:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800ee58:	e7ee      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee5a:	2102      	movs	r1, #2
 800ee5c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ee60:	f7ff fa82 	bl	800e368 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ee64:	2800      	cmp	r0, #0
 800ee66:	f43f af2e 	beq.w	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800ee6a:	2001      	movs	r0, #1
 800ee6c:	e72e      	b.n	800eccc <HAL_RCCEx_PeriphCLKConfig+0x874>
 800ee6e:	bf00      	nop
 800ee70:	58024400 	.word	0x58024400

0800ee74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ee74:	b538      	push	{r3, r4, r5, lr}
 800ee76:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ee78:	4604      	mov	r4, r0
 800ee7a:	b1f0      	cbz	r0, 800eeba <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ee7c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ee80:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ee84:	b91b      	cbnz	r3, 800ee8e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ee86:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ee8a:	f7f2 fa89 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ee8e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ee90:	1d21      	adds	r1, r4, #4
 800ee92:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ee94:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ee98:	f000 fa15 	bl	800f2c6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ee9c:	6862      	ldr	r2, [r4, #4]
 800ee9e:	4629      	mov	r1, r5
 800eea0:	6820      	ldr	r0, [r4, #0]
 800eea2:	f000 fa48 	bl	800f336 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800eea6:	4a06      	ldr	r2, [pc, #24]	@ (800eec0 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800eea8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800eeaa:	6813      	ldr	r3, [r2, #0]
 800eeac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eeb0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800eeb8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800eeba:	2001      	movs	r0, #1
 800eebc:	e7fc      	b.n	800eeb8 <HAL_SDRAM_Init+0x44>
 800eebe:	bf00      	nop
 800eec0:	52004000 	.word	0x52004000

0800eec4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800eec4:	b510      	push	{r4, lr}
 800eec6:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800eec8:	f7f2 fb04 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800eecc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800eed0:	f000 fa67 	bl	800f3a2 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800eed4:	2000      	movs	r0, #0
 800eed6:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800eeda:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800eede:	bd10      	pop	{r4, pc}

0800eee0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800eee0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800eee2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800eee6:	4605      	mov	r5, r0
 800eee8:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800eeea:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800eeec:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800eeee:	d010      	beq.n	800ef12 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800eef0:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800eef4:	2c01      	cmp	r4, #1
 800eef6:	d110      	bne.n	800ef1a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800eef8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800eefa:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800eefc:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ef00:	f000 fa5e 	bl	800f3c0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ef04:	6833      	ldr	r3, [r6, #0]
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d104      	bne.n	800ef14 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ef0a:	2305      	movs	r3, #5
 800ef0c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ef10:	2000      	movs	r0, #0
}
 800ef12:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ef14:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800ef18:	e7fa      	b.n	800ef10 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800ef1a:	2001      	movs	r0, #1
 800ef1c:	e7f9      	b.n	800ef12 <HAL_SDRAM_SendCommand+0x32>

0800ef1e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ef1e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ef20:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800ef24:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	b2d8      	uxtb	r0, r3
 800ef2a:	d00d      	beq.n	800ef48 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ef2c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	b2dd      	uxtb	r5, r3
 800ef34:	d109      	bne.n	800ef4a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ef36:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ef38:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ef3a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ef3e:	f000 fa51 	bl	800f3e4 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ef42:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ef44:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800ef48:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ef4a:	2001      	movs	r0, #1
 800ef4c:	e7fc      	b.n	800ef48 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800ef4e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ef4e:	4770      	bx	lr

0800ef50 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef50:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d12f      	bne.n	800efb8 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef58:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef5a:	4a18      	ldr	r2, [pc, #96]	@ (800efbc <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ef5c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef60:	6803      	ldr	r3, [r0, #0]
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d01a      	beq.n	800ef9c <HAL_TIM_Base_Start+0x4c>
 800ef66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef6a:	d017      	beq.n	800ef9c <HAL_TIM_Base_Start+0x4c>
 800ef6c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d013      	beq.n	800ef9c <HAL_TIM_Base_Start+0x4c>
 800ef74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d00f      	beq.n	800ef9c <HAL_TIM_Base_Start+0x4c>
 800ef7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d00b      	beq.n	800ef9c <HAL_TIM_Base_Start+0x4c>
 800ef84:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d007      	beq.n	800ef9c <HAL_TIM_Base_Start+0x4c>
 800ef8c:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d003      	beq.n	800ef9c <HAL_TIM_Base_Start+0x4c>
 800ef94:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d107      	bne.n	800efac <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef9c:	6899      	ldr	r1, [r3, #8]
 800ef9e:	4a08      	ldr	r2, [pc, #32]	@ (800efc0 <HAL_TIM_Base_Start+0x70>)
 800efa0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa2:	2a06      	cmp	r2, #6
 800efa4:	d006      	beq.n	800efb4 <HAL_TIM_Base_Start+0x64>
 800efa6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800efaa:	d003      	beq.n	800efb4 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	f042 0201 	orr.w	r2, r2, #1
 800efb2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800efb4:	2000      	movs	r0, #0
 800efb6:	4770      	bx	lr
    return HAL_ERROR;
 800efb8:	2001      	movs	r0, #1
}
 800efba:	4770      	bx	lr
 800efbc:	40010000 	.word	0x40010000
 800efc0:	00010007 	.word	0x00010007

0800efc4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800efc4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d133      	bne.n	800f034 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efcc:	2302      	movs	r3, #2
 800efce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efd2:	6803      	ldr	r3, [r0, #0]
 800efd4:	68da      	ldr	r2, [r3, #12]
 800efd6:	f042 0201 	orr.w	r2, r2, #1
 800efda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efdc:	4a16      	ldr	r2, [pc, #88]	@ (800f038 <HAL_TIM_Base_Start_IT+0x74>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d01a      	beq.n	800f018 <HAL_TIM_Base_Start_IT+0x54>
 800efe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efe6:	d017      	beq.n	800f018 <HAL_TIM_Base_Start_IT+0x54>
 800efe8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800efec:	4293      	cmp	r3, r2
 800efee:	d013      	beq.n	800f018 <HAL_TIM_Base_Start_IT+0x54>
 800eff0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d00f      	beq.n	800f018 <HAL_TIM_Base_Start_IT+0x54>
 800eff8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800effc:	4293      	cmp	r3, r2
 800effe:	d00b      	beq.n	800f018 <HAL_TIM_Base_Start_IT+0x54>
 800f000:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f004:	4293      	cmp	r3, r2
 800f006:	d007      	beq.n	800f018 <HAL_TIM_Base_Start_IT+0x54>
 800f008:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d003      	beq.n	800f018 <HAL_TIM_Base_Start_IT+0x54>
 800f010:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800f014:	4293      	cmp	r3, r2
 800f016:	d107      	bne.n	800f028 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f018:	6899      	ldr	r1, [r3, #8]
 800f01a:	4a08      	ldr	r2, [pc, #32]	@ (800f03c <HAL_TIM_Base_Start_IT+0x78>)
 800f01c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f01e:	2a06      	cmp	r2, #6
 800f020:	d006      	beq.n	800f030 <HAL_TIM_Base_Start_IT+0x6c>
 800f022:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f026:	d003      	beq.n	800f030 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	f042 0201 	orr.w	r2, r2, #1
 800f02e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800f030:	2000      	movs	r0, #0
 800f032:	4770      	bx	lr
    return HAL_ERROR;
 800f034:	2001      	movs	r0, #1
}
 800f036:	4770      	bx	lr
 800f038:	40010000 	.word	0x40010000
 800f03c:	00010007 	.word	0x00010007

0800f040 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800f040:	4770      	bx	lr

0800f042 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800f042:	4770      	bx	lr

0800f044 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800f044:	4770      	bx	lr

0800f046 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800f046:	4770      	bx	lr

0800f048 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800f048:	6803      	ldr	r3, [r0, #0]
{
 800f04a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800f04c:	68dd      	ldr	r5, [r3, #12]
{
 800f04e:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800f050:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f052:	07b2      	lsls	r2, r6, #30
 800f054:	d50d      	bpl.n	800f072 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f056:	07a9      	lsls	r1, r5, #30
 800f058:	d50b      	bpl.n	800f072 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f05a:	f06f 0202 	mvn.w	r2, #2
 800f05e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f060:	2201      	movs	r2, #1
 800f062:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	079a      	lsls	r2, r3, #30
 800f068:	d075      	beq.n	800f156 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800f06a:	f7ff ffea 	bl	800f042 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f06e:	2300      	movs	r3, #0
 800f070:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f072:	0773      	lsls	r3, r6, #29
 800f074:	d510      	bpl.n	800f098 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f076:	0768      	lsls	r0, r5, #29
 800f078:	d50e      	bpl.n	800f098 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800f080:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f084:	2202      	movs	r2, #2
 800f086:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f08e:	d068      	beq.n	800f162 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800f090:	f7ff ffd7 	bl	800f042 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f094:	2300      	movs	r3, #0
 800f096:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f098:	0731      	lsls	r1, r6, #28
 800f09a:	d50f      	bpl.n	800f0bc <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f09c:	072a      	lsls	r2, r5, #28
 800f09e:	d50d      	bpl.n	800f0bc <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800f0a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f0a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0aa:	2204      	movs	r2, #4
 800f0ac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0ae:	69db      	ldr	r3, [r3, #28]
 800f0b0:	079b      	lsls	r3, r3, #30
 800f0b2:	d05c      	beq.n	800f16e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800f0b4:	f7ff ffc5 	bl	800f042 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f0bc:	06f1      	lsls	r1, r6, #27
 800f0be:	d510      	bpl.n	800f0e2 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0c0:	06ea      	lsls	r2, r5, #27
 800f0c2:	d50e      	bpl.n	800f0e2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800f0ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0ce:	2208      	movs	r2, #8
 800f0d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0d2:	69db      	ldr	r3, [r3, #28]
 800f0d4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f0d8:	d04f      	beq.n	800f17a <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800f0da:	f7ff ffb2 	bl	800f042 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f0e2:	07f3      	lsls	r3, r6, #31
 800f0e4:	d508      	bpl.n	800f0f8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f0e6:	07e8      	lsls	r0, r5, #31
 800f0e8:	d506      	bpl.n	800f0f8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f0ea:	6823      	ldr	r3, [r4, #0]
 800f0ec:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0f0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f0f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0f4:	f7f1 ff1c 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0f8:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800f0fc:	d008      	beq.n	800f110 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0fe:	0629      	lsls	r1, r5, #24
 800f100:	d506      	bpl.n	800f110 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f102:	6823      	ldr	r3, [r4, #0]
 800f104:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800f108:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f10a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f10c:	f000 f8d9 	bl	800f2c2 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f110:	05f2      	lsls	r2, r6, #23
 800f112:	d508      	bpl.n	800f126 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f114:	062b      	lsls	r3, r5, #24
 800f116:	d506      	bpl.n	800f126 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800f11e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f120:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f122:	f000 f8cf 	bl	800f2c4 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f126:	0670      	lsls	r0, r6, #25
 800f128:	d508      	bpl.n	800f13c <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f12a:	0669      	lsls	r1, r5, #25
 800f12c:	d506      	bpl.n	800f13c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800f134:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f136:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f138:	f7ff ff85 	bl	800f046 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f13c:	06b2      	lsls	r2, r6, #26
 800f13e:	d522      	bpl.n	800f186 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f140:	06ab      	lsls	r3, r5, #26
 800f142:	d520      	bpl.n	800f186 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f144:	6823      	ldr	r3, [r4, #0]
 800f146:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800f14a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f14c:	611a      	str	r2, [r3, #16]
}
 800f14e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800f152:	f000 b8b5 	b.w	800f2c0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f156:	f7ff ff73 	bl	800f040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f15a:	4620      	mov	r0, r4
 800f15c:	f7ff ff72 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
 800f160:	e785      	b.n	800f06e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f162:	f7ff ff6d 	bl	800f040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f166:	4620      	mov	r0, r4
 800f168:	f7ff ff6c 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
 800f16c:	e792      	b.n	800f094 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f16e:	f7ff ff67 	bl	800f040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f172:	4620      	mov	r0, r4
 800f174:	f7ff ff66 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
 800f178:	e79e      	b.n	800f0b8 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f17a:	f7ff ff61 	bl	800f040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f17e:	4620      	mov	r0, r4
 800f180:	f7ff ff60 	bl	800f044 <HAL_TIM_PWM_PulseFinishedCallback>
 800f184:	e7ab      	b.n	800f0de <HAL_TIM_IRQHandler+0x96>
}
 800f186:	bd70      	pop	{r4, r5, r6, pc}

0800f188 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f188:	4a33      	ldr	r2, [pc, #204]	@ (800f258 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800f18a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f18c:	4290      	cmp	r0, r2
 800f18e:	d012      	beq.n	800f1b6 <TIM_Base_SetConfig+0x2e>
 800f190:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800f194:	d00f      	beq.n	800f1b6 <TIM_Base_SetConfig+0x2e>
 800f196:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f19a:	4290      	cmp	r0, r2
 800f19c:	d00b      	beq.n	800f1b6 <TIM_Base_SetConfig+0x2e>
 800f19e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1a2:	4290      	cmp	r0, r2
 800f1a4:	d007      	beq.n	800f1b6 <TIM_Base_SetConfig+0x2e>
 800f1a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1aa:	4290      	cmp	r0, r2
 800f1ac:	d003      	beq.n	800f1b6 <TIM_Base_SetConfig+0x2e>
 800f1ae:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f1b2:	4290      	cmp	r0, r2
 800f1b4:	d119      	bne.n	800f1ea <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800f1b6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800f1bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1be:	4a26      	ldr	r2, [pc, #152]	@ (800f258 <TIM_Base_SetConfig+0xd0>)
 800f1c0:	4290      	cmp	r0, r2
 800f1c2:	d01d      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1c4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800f1c8:	d01a      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1ca:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f1ce:	4290      	cmp	r0, r2
 800f1d0:	d016      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1d6:	4290      	cmp	r0, r2
 800f1d8:	d012      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1de:	4290      	cmp	r0, r2
 800f1e0:	d00e      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1e2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f1e6:	4290      	cmp	r0, r2
 800f1e8:	d00a      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1ea:	4a1c      	ldr	r2, [pc, #112]	@ (800f25c <TIM_Base_SetConfig+0xd4>)
 800f1ec:	4290      	cmp	r0, r2
 800f1ee:	d007      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1f4:	4290      	cmp	r0, r2
 800f1f6:	d003      	beq.n	800f200 <TIM_Base_SetConfig+0x78>
 800f1f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f1fc:	4290      	cmp	r0, r2
 800f1fe:	d103      	bne.n	800f208 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f204:	68ca      	ldr	r2, [r1, #12]
 800f206:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f208:	694a      	ldr	r2, [r1, #20]
 800f20a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f20e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800f210:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f212:	688b      	ldr	r3, [r1, #8]
 800f214:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f216:	680b      	ldr	r3, [r1, #0]
 800f218:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f21a:	4b0f      	ldr	r3, [pc, #60]	@ (800f258 <TIM_Base_SetConfig+0xd0>)
 800f21c:	4298      	cmp	r0, r3
 800f21e:	d00f      	beq.n	800f240 <TIM_Base_SetConfig+0xb8>
 800f220:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f224:	4298      	cmp	r0, r3
 800f226:	d00b      	beq.n	800f240 <TIM_Base_SetConfig+0xb8>
 800f228:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800f22c:	4298      	cmp	r0, r3
 800f22e:	d007      	beq.n	800f240 <TIM_Base_SetConfig+0xb8>
 800f230:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f234:	4298      	cmp	r0, r3
 800f236:	d003      	beq.n	800f240 <TIM_Base_SetConfig+0xb8>
 800f238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f23c:	4298      	cmp	r0, r3
 800f23e:	d101      	bne.n	800f244 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f240:	690b      	ldr	r3, [r1, #16]
 800f242:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f244:	2301      	movs	r3, #1
 800f246:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f248:	6903      	ldr	r3, [r0, #16]
 800f24a:	07db      	lsls	r3, r3, #31
 800f24c:	d503      	bpl.n	800f256 <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f24e:	6903      	ldr	r3, [r0, #16]
 800f250:	f023 0301 	bic.w	r3, r3, #1
 800f254:	6103      	str	r3, [r0, #16]
  }
}
 800f256:	4770      	bx	lr
 800f258:	40010000 	.word	0x40010000
 800f25c:	40014000 	.word	0x40014000

0800f260 <HAL_TIM_Base_Init>:
{
 800f260:	b510      	push	{r4, lr}
  if (htim == NULL)
 800f262:	4604      	mov	r4, r0
 800f264:	b350      	cbz	r0, 800f2bc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800f266:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f26a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800f26e:	b91b      	cbnz	r3, 800f278 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800f270:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f274:	f7ff fe6b 	bl	800ef4e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800f278:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f27a:	6820      	ldr	r0, [r4, #0]
 800f27c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800f27e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f282:	f7ff ff81 	bl	800f188 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f286:	2301      	movs	r3, #1
  return HAL_OK;
 800f288:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f28a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f28e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800f292:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800f296:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800f29a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f29e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f2a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f2aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f2ae:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800f2b2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f2b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800f2ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800f2bc:	2001      	movs	r0, #1
 800f2be:	e7fc      	b.n	800f2ba <HAL_TIM_Base_Init+0x5a>

0800f2c0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800f2c0:	4770      	bx	lr

0800f2c2 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800f2c4:	4770      	bx	lr

0800f2c6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f2ca:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800f2ce:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800f2d2:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800f2d6:	ea43 0308 	orr.w	r3, r3, r8
 800f2da:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800f2de:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f2e2:	6809      	ldr	r1, [r1, #0]
 800f2e4:	b991      	cbnz	r1, 800f30c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f2e6:	ea43 030e 	orr.w	r3, r3, lr
 800f2ea:	6801      	ldr	r1, [r0, #0]
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800f2f2:	ea43 030c 	orr.w	r3, r3, ip
 800f2f6:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800f2fa:	433b      	orrs	r3, r7
 800f2fc:	4333      	orrs	r3, r6
 800f2fe:	432b      	orrs	r3, r5
 800f300:	4323      	orrs	r3, r4
 800f302:	430b      	orrs	r3, r1
 800f304:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800f306:	2000      	movs	r0, #0
 800f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f30c:	6801      	ldr	r1, [r0, #0]
 800f30e:	ea43 030e 	orr.w	r3, r3, lr
 800f312:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800f316:	430b      	orrs	r3, r1
 800f318:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f31a:	ea42 030c 	orr.w	r3, r2, ip
 800f31e:	6841      	ldr	r1, [r0, #4]
 800f320:	433b      	orrs	r3, r7
 800f322:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800f326:	4333      	orrs	r3, r6
 800f328:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800f32c:	432b      	orrs	r3, r5
 800f32e:	4323      	orrs	r3, r4
 800f330:	4313      	orrs	r3, r2
 800f332:	6043      	str	r3, [r0, #4]
 800f334:	e7e7      	b.n	800f306 <FMC_SDRAM_Init+0x40>

0800f336 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f336:	68cb      	ldr	r3, [r1, #12]
 800f338:	f103 3cff 	add.w	ip, r3, #4294967295
 800f33c:	694b      	ldr	r3, [r1, #20]
{
 800f33e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f340:	3b01      	subs	r3, #1
 800f342:	680f      	ldr	r7, [r1, #0]
 800f344:	684c      	ldr	r4, [r1, #4]
 800f346:	688e      	ldr	r6, [r1, #8]
 800f348:	051b      	lsls	r3, r3, #20
 800f34a:	690d      	ldr	r5, [r1, #16]
 800f34c:	3c01      	subs	r4, #1
 800f34e:	6989      	ldr	r1, [r1, #24]
 800f350:	3e01      	subs	r6, #1
 800f352:	3d01      	subs	r5, #1
 800f354:	3f01      	subs	r7, #1
 800f356:	3901      	subs	r1, #1
 800f358:	0124      	lsls	r4, r4, #4
 800f35a:	0236      	lsls	r6, r6, #8
 800f35c:	042d      	lsls	r5, r5, #16
 800f35e:	0609      	lsls	r1, r1, #24
 800f360:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800f364:	b95a      	cbnz	r2, 800f37e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f366:	433b      	orrs	r3, r7
 800f368:	6882      	ldr	r2, [r0, #8]
 800f36a:	4323      	orrs	r3, r4
 800f36c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800f370:	4333      	orrs	r3, r6
 800f372:	432b      	orrs	r3, r5
 800f374:	430b      	orrs	r3, r1
 800f376:	4313      	orrs	r3, r2
 800f378:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800f37a:	2000      	movs	r0, #0
 800f37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f37e:	6882      	ldr	r2, [r0, #8]
 800f380:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800f384:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800f388:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f38a:	ea44 0306 	orr.w	r3, r4, r6
 800f38e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f390:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f392:	68c2      	ldr	r2, [r0, #12]
 800f394:	432b      	orrs	r3, r5
 800f396:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800f39a:	430b      	orrs	r3, r1
 800f39c:	4313      	orrs	r3, r2
 800f39e:	60c3      	str	r3, [r0, #12]
 800f3a0:	e7eb      	b.n	800f37a <FMC_SDRAM_Timing_Init+0x44>

0800f3a2 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800f3a8:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800f3ac:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800f3b0:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800f3b2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f3b6:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800f3b8:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800f3ba:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800f3bc:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800f3be:	4770      	bx	lr

0800f3c0 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f3c0:	6902      	ldr	r2, [r0, #16]
{
 800f3c2:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f3c4:	e9d1 3400 	ldrd	r3, r4, [r1]
 800f3c8:	0d92      	lsrs	r2, r2, #22
 800f3ca:	4323      	orrs	r3, r4
 800f3cc:	68cc      	ldr	r4, [r1, #12]
 800f3ce:	0592      	lsls	r2, r2, #22
 800f3d0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	688a      	ldr	r2, [r1, #8]
 800f3d8:	3a01      	subs	r2, #1
 800f3da:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800f3de:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	bd10      	pop	{r4, pc}

0800f3e4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f3e4:	6943      	ldr	r3, [r0, #20]
 800f3e6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800f3ea:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800f3ee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f3f2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	4770      	bx	lr

0800f3f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f3f8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800f3fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f3fe:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f400:	f001 fee2 	bl	80111c8 <xTaskGetSchedulerState>
 800f404:	2801      	cmp	r0, #1
 800f406:	d003      	beq.n	800f410 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800f408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800f40c:	f000 bc4a 	b.w	800fca4 <xPortSysTickHandler>
}
 800f410:	bd08      	pop	{r3, pc}
	...

0800f414 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f414:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f418:	b92b      	cbnz	r3, 800f426 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800f41a:	4b06      	ldr	r3, [pc, #24]	@ (800f434 <osKernelInitialize+0x20>)
 800f41c:	6818      	ldr	r0, [r3, #0]
 800f41e:	b928      	cbnz	r0, 800f42c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f420:	2201      	movs	r2, #1
 800f422:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f424:	4770      	bx	lr
    stat = osErrorISR;
 800f426:	f06f 0005 	mvn.w	r0, #5
 800f42a:	4770      	bx	lr
    } else {
      stat = osError;
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	2400f7a8 	.word	0x2400f7a8

0800f438 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f438:	b510      	push	{r4, lr}
 800f43a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f43e:	b95c      	cbnz	r4, 800f458 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800f440:	4b08      	ldr	r3, [pc, #32]	@ (800f464 <osKernelStart+0x2c>)
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	2a01      	cmp	r2, #1
 800f446:	d10a      	bne.n	800f45e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f448:	4a07      	ldr	r2, [pc, #28]	@ (800f468 <osKernelStart+0x30>)
 800f44a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f44c:	2202      	movs	r2, #2
 800f44e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f450:	f001 fd5a 	bl	8010f08 <vTaskStartScheduler>
      stat = osOK;
 800f454:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800f456:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800f458:	f06f 0005 	mvn.w	r0, #5
 800f45c:	e7fb      	b.n	800f456 <osKernelStart+0x1e>
      stat = osError;
 800f45e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800f462:	e7f8      	b.n	800f456 <osKernelStart+0x1e>
 800f464:	2400f7a8 	.word	0x2400f7a8
 800f468:	e000ed00 	.word	0xe000ed00

0800f46c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f46e:	4614      	mov	r4, r2
 800f470:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f472:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f474:	460b      	mov	r3, r1
  hTask = NULL;
 800f476:	9205      	str	r2, [sp, #20]
 800f478:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f47c:	b9ca      	cbnz	r2, 800f4b2 <osThreadNew+0x46>
 800f47e:	b1c0      	cbz	r0, 800f4b2 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f480:	b36c      	cbz	r4, 800f4de <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f482:	69a5      	ldr	r5, [r4, #24]
 800f484:	2d00      	cmp	r5, #0
 800f486:	bf08      	it	eq
 800f488:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f48a:	1e69      	subs	r1, r5, #1
 800f48c:	46ac      	mov	ip, r5
 800f48e:	2937      	cmp	r1, #55	@ 0x37
 800f490:	d82a      	bhi.n	800f4e8 <osThreadNew+0x7c>
 800f492:	6861      	ldr	r1, [r4, #4]
 800f494:	07c9      	lsls	r1, r1, #31
 800f496:	d427      	bmi.n	800f4e8 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f498:	6966      	ldr	r6, [r4, #20]
 800f49a:	b16e      	cbz	r6, 800f4b8 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f49c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800f49e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f4a0:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800f4a4:	b157      	cbz	r7, 800f4bc <osThreadNew+0x50>
 800f4a6:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800f4aa:	d902      	bls.n	800f4b2 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f4ac:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f4ae:	b104      	cbz	r4, 800f4b2 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f4b0:	b9e6      	cbnz	r6, 800f4ec <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f4b2:	9805      	ldr	r0, [sp, #20]
}
 800f4b4:	b007      	add	sp, #28
 800f4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800f4b8:	2280      	movs	r2, #128	@ 0x80
 800f4ba:	e7f0      	b.n	800f49e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f4bc:	f1be 0f00 	cmp.w	lr, #0
 800f4c0:	d1f7      	bne.n	800f4b2 <osThreadNew+0x46>
      if (mem == 0) {
 800f4c2:	6924      	ldr	r4, [r4, #16]
 800f4c4:	2c00      	cmp	r4, #0
 800f4c6:	d1f4      	bne.n	800f4b2 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f4c8:	ac05      	add	r4, sp, #20
 800f4ca:	b292      	uxth	r2, r2
 800f4cc:	e9cd c400 	strd	ip, r4, [sp]
 800f4d0:	f001 fbb7 	bl	8010c42 <xTaskCreate>
 800f4d4:	2801      	cmp	r0, #1
            hTask = NULL;
 800f4d6:	bf1c      	itt	ne
 800f4d8:	2300      	movne	r3, #0
 800f4da:	9305      	strne	r3, [sp, #20]
 800f4dc:	e7e9      	b.n	800f4b2 <osThreadNew+0x46>
    name = NULL;
 800f4de:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800f4e0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800f4e4:	2280      	movs	r2, #128	@ 0x80
 800f4e6:	e7ef      	b.n	800f4c8 <osThreadNew+0x5c>
        return (NULL);
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	e7e3      	b.n	800f4b4 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f4ec:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800f4f0:	9500      	str	r5, [sp, #0]
 800f4f2:	f001 fb6e 	bl	8010bd2 <xTaskCreateStatic>
 800f4f6:	9005      	str	r0, [sp, #20]
 800f4f8:	e7db      	b.n	800f4b2 <osThreadNew+0x46>

0800f4fa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f4fa:	b570      	push	{r4, r5, r6, lr}
 800f4fc:	4605      	mov	r5, r0
 800f4fe:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800f502:	b116      	cbz	r6, 800f50a <osMutexNew+0x10>
  hMutex = NULL;
 800f504:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800f506:	4620      	mov	r0, r4
 800f508:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800f50a:	b110      	cbz	r0, 800f512 <osMutexNew+0x18>
      type = attr->attr_bits;
 800f50c:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800f50e:	0733      	lsls	r3, r6, #28
 800f510:	d4f8      	bmi.n	800f504 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f512:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800f516:	b17d      	cbz	r5, 800f538 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f518:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800f51c:	b151      	cbz	r1, 800f534 <osMutexNew+0x3a>
 800f51e:	2b4f      	cmp	r3, #79	@ 0x4f
 800f520:	d9f0      	bls.n	800f504 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800f522:	b1de      	cbz	r6, 800f55c <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f524:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f526:	f000 fec6 	bl	80102b6 <xQueueCreateMutexStatic>
 800f52a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d0e9      	beq.n	800f504 <osMutexNew+0xa>
          name = attr->name;
 800f530:	682d      	ldr	r5, [r5, #0]
 800f532:	e00a      	b.n	800f54a <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f534:	2b00      	cmp	r3, #0
 800f536:	d1e5      	bne.n	800f504 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800f538:	b196      	cbz	r6, 800f560 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f53a:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800f53c:	f000 feef 	bl	801031e <xQueueCreateMutex>
 800f540:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800f542:	2800      	cmp	r0, #0
 800f544:	d0de      	beq.n	800f504 <osMutexNew+0xa>
        if (attr != NULL) {
 800f546:	2d00      	cmp	r5, #0
 800f548:	d1f2      	bne.n	800f530 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800f54a:	4629      	mov	r1, r5
 800f54c:	4620      	mov	r0, r4
 800f54e:	f001 f97b 	bl	8010848 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f552:	2e00      	cmp	r6, #0
 800f554:	d0d7      	beq.n	800f506 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f556:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800f55a:	e7d4      	b.n	800f506 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f55c:	2001      	movs	r0, #1
 800f55e:	e7e2      	b.n	800f526 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800f560:	2001      	movs	r0, #1
 800f562:	e7eb      	b.n	800f53c <osMutexNew+0x42>

0800f564 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f564:	b538      	push	{r3, r4, r5, lr}
 800f566:	4603      	mov	r3, r0
 800f568:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f56a:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800f56e:	f003 0201 	and.w	r2, r3, #1
 800f572:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f576:	b995      	cbnz	r5, 800f59e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d913      	bls.n	800f5a4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800f57c:	b162      	cbz	r2, 800f598 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f57e:	f001 f8f4 	bl	801076a <xQueueTakeMutexRecursive>
 800f582:	2801      	cmp	r0, #1
 800f584:	d101      	bne.n	800f58a <osMutexAcquire+0x26>
  stat = osOK;
 800f586:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f588:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800f58a:	2c00      	cmp	r4, #0
 800f58c:	bf14      	ite	ne
 800f58e:	f06f 0001 	mvnne.w	r0, #1
 800f592:	f06f 0002 	mvneq.w	r0, #2
 800f596:	e7f7      	b.n	800f588 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f598:	f001 f82a 	bl	80105f0 <xQueueSemaphoreTake>
 800f59c:	e7f1      	b.n	800f582 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800f59e:	f06f 0005 	mvn.w	r0, #5
 800f5a2:	e7f1      	b.n	800f588 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800f5a4:	f06f 0003 	mvn.w	r0, #3
 800f5a8:	e7ee      	b.n	800f588 <osMutexAcquire+0x24>

0800f5aa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f5aa:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f5ac:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f5b0:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800f5b2:	f002 0301 	and.w	r3, r2, #1
 800f5b6:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f5ba:	b979      	cbnz	r1, 800f5dc <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800f5bc:	2a01      	cmp	r2, #1
 800f5be:	d910      	bls.n	800f5e2 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800f5c0:	b13b      	cbz	r3, 800f5d2 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f5c2:	f000 fe8d 	bl	80102e0 <xQueueGiveMutexRecursive>
 800f5c6:	2801      	cmp	r0, #1
  stat = osOK;
 800f5c8:	bf0c      	ite	eq
 800f5ca:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800f5cc:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800f5d0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	f000 fdbc 	bl	8010152 <xQueueGenericSend>
 800f5da:	e7f4      	b.n	800f5c6 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800f5dc:	f06f 0005 	mvn.w	r0, #5
 800f5e0:	e7f6      	b.n	800f5d0 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800f5e2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f5e6:	e7f3      	b.n	800f5d0 <osMutexRelease+0x26>

0800f5e8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	460e      	mov	r6, r1
 800f5ee:	4615      	mov	r5, r2
 800f5f0:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f5f4:	b942      	cbnz	r2, 800f608 <osSemaphoreNew+0x20>
 800f5f6:	b138      	cbz	r0, 800f608 <osSemaphoreNew+0x20>
 800f5f8:	4288      	cmp	r0, r1
 800f5fa:	d305      	bcc.n	800f608 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800f5fc:	b155      	cbz	r5, 800f614 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f5fe:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800f602:	b12b      	cbz	r3, 800f610 <osSemaphoreNew+0x28>
 800f604:	2f4f      	cmp	r7, #79	@ 0x4f
 800f606:	d822      	bhi.n	800f64e <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800f608:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800f60a:	4620      	mov	r0, r4
 800f60c:	b003      	add	sp, #12
 800f60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f610:	2f00      	cmp	r7, #0
 800f612:	d1f9      	bne.n	800f608 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800f614:	2c01      	cmp	r4, #1
 800f616:	d00c      	beq.n	800f632 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f618:	4620      	mov	r0, r4
 800f61a:	4631      	mov	r1, r6
 800f61c:	f000 fd7b 	bl	8010116 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800f620:	4604      	mov	r4, r0
 800f622:	2800      	cmp	r0, #0
 800f624:	d0f0      	beq.n	800f608 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800f626:	b985      	cbnz	r5, 800f64a <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800f628:	4629      	mov	r1, r5
 800f62a:	4620      	mov	r0, r4
 800f62c:	f001 f90c 	bl	8010848 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800f630:	e7eb      	b.n	800f60a <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800f632:	2203      	movs	r2, #3
 800f634:	2100      	movs	r1, #0
 800f636:	2001      	movs	r0, #1
 800f638:	f000 fd24 	bl	8010084 <xQueueGenericCreate>
 800f63c:	e00e      	b.n	800f65c <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f63e:	461a      	mov	r2, r3
 800f640:	f000 fd47 	bl	80100d2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800f644:	4604      	mov	r4, r0
 800f646:	2800      	cmp	r0, #0
 800f648:	d0de      	beq.n	800f608 <osSemaphoreNew+0x20>
          name = attr->name;
 800f64a:	682d      	ldr	r5, [r5, #0]
 800f64c:	e7ec      	b.n	800f628 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800f64e:	2801      	cmp	r0, #1
 800f650:	d1f5      	bne.n	800f63e <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f652:	2103      	movs	r1, #3
 800f654:	9100      	str	r1, [sp, #0]
 800f656:	4611      	mov	r1, r2
 800f658:	f000 fcc6 	bl	800ffe8 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800f65c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f65e:	2800      	cmp	r0, #0
 800f660:	d0d2      	beq.n	800f608 <osSemaphoreNew+0x20>
 800f662:	2e00      	cmp	r6, #0
 800f664:	d0df      	beq.n	800f626 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f666:	2300      	movs	r3, #0
 800f668:	461a      	mov	r2, r3
 800f66a:	4619      	mov	r1, r3
 800f66c:	f000 fd71 	bl	8010152 <xQueueGenericSend>
 800f670:	2801      	cmp	r0, #1
 800f672:	d0d8      	beq.n	800f626 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800f674:	4620      	mov	r0, r4
 800f676:	f001 f911 	bl	801089c <vQueueDelete>
      if (hSemaphore != NULL) {
 800f67a:	e7c5      	b.n	800f608 <osSemaphoreNew+0x20>

0800f67c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f67c:	b513      	push	{r0, r1, r4, lr}
 800f67e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f680:	b328      	cbz	r0, 800f6ce <osSemaphoreAcquire+0x52>
 800f682:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f686:	b1cb      	cbz	r3, 800f6bc <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800f688:	bb09      	cbnz	r1, 800f6ce <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f68a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f68c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f68e:	f001 f88d 	bl	80107ac <xQueueReceiveFromISR>
 800f692:	2801      	cmp	r0, #1
 800f694:	d003      	beq.n	800f69e <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800f696:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800f69a:	b002      	add	sp, #8
 800f69c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800f69e:	9b01      	ldr	r3, [sp, #4]
 800f6a0:	b90b      	cbnz	r3, 800f6a6 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	e7f9      	b.n	800f69a <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800f6a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f6b2:	f3bf 8f4f 	dsb	sy
 800f6b6:	f3bf 8f6f 	isb	sy
 800f6ba:	e7f2      	b.n	800f6a2 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f6bc:	f000 ff98 	bl	80105f0 <xQueueSemaphoreTake>
 800f6c0:	2801      	cmp	r0, #1
 800f6c2:	d0ee      	beq.n	800f6a2 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800f6c4:	2c00      	cmp	r4, #0
 800f6c6:	d0e6      	beq.n	800f696 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800f6c8:	f06f 0001 	mvn.w	r0, #1
 800f6cc:	e7e5      	b.n	800f69a <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800f6ce:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f6d2:	e7e2      	b.n	800f69a <osSemaphoreAcquire+0x1e>

0800f6d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f6d4:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f6d6:	b318      	cbz	r0, 800f720 <osSemaphoreRelease+0x4c>
 800f6d8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f6dc:	b1cb      	cbz	r3, 800f712 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800f6de:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6e0:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800f6e2:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6e4:	f000 fe95 	bl	8010412 <xQueueGiveFromISR>
 800f6e8:	2801      	cmp	r0, #1
 800f6ea:	d004      	beq.n	800f6f6 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800f6ec:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800f6f0:	b003      	add	sp, #12
 800f6f2:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800f6f6:	9b01      	ldr	r3, [sp, #4]
 800f6f8:	b14b      	cbz	r3, 800f70e <osSemaphoreRelease+0x3a>
 800f6fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f702:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f70e:	2000      	movs	r0, #0
 800f710:	e7ee      	b.n	800f6f0 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f712:	461a      	mov	r2, r3
 800f714:	4619      	mov	r1, r3
 800f716:	f000 fd1c 	bl	8010152 <xQueueGenericSend>
 800f71a:	2801      	cmp	r0, #1
 800f71c:	d0f7      	beq.n	800f70e <osSemaphoreRelease+0x3a>
 800f71e:	e7e5      	b.n	800f6ec <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800f720:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f724:	e7e4      	b.n	800f6f0 <osSemaphoreRelease+0x1c>

0800f726 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f728:	4605      	mov	r5, r0
 800f72a:	460e      	mov	r6, r1
 800f72c:	4614      	mov	r4, r2
 800f72e:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f732:	b11f      	cbz	r7, 800f73c <osMessageQueueNew+0x16>
  hQueue = NULL;
 800f734:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f736:	4628      	mov	r0, r5
 800f738:	b003      	add	sp, #12
 800f73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d0f9      	beq.n	800f734 <osMessageQueueNew+0xe>
 800f740:	2900      	cmp	r1, #0
 800f742:	d0f7      	beq.n	800f734 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800f744:	b1da      	cbz	r2, 800f77e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f746:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800f74a:	b183      	cbz	r3, 800f76e <osMessageQueueNew+0x48>
 800f74c:	2a4f      	cmp	r2, #79	@ 0x4f
 800f74e:	d9f1      	bls.n	800f734 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f750:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f752:	2a00      	cmp	r2, #0
 800f754:	d0ee      	beq.n	800f734 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f756:	434d      	muls	r5, r1
 800f758:	6966      	ldr	r6, [r4, #20]
 800f75a:	42ae      	cmp	r6, r5
 800f75c:	d3ea      	bcc.n	800f734 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f75e:	9700      	str	r7, [sp, #0]
 800f760:	f000 fc42 	bl	800ffe8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800f764:	4605      	mov	r5, r0
 800f766:	2800      	cmp	r0, #0
 800f768:	d0e4      	beq.n	800f734 <osMessageQueueNew+0xe>
        name = attr->name;
 800f76a:	6824      	ldr	r4, [r4, #0]
 800f76c:	e011      	b.n	800f792 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f76e:	2a00      	cmp	r2, #0
 800f770:	d1e0      	bne.n	800f734 <osMessageQueueNew+0xe>
 800f772:	6923      	ldr	r3, [r4, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1dd      	bne.n	800f734 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f778:	6963      	ldr	r3, [r4, #20]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d1da      	bne.n	800f734 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800f77e:	4628      	mov	r0, r5
 800f780:	2200      	movs	r2, #0
 800f782:	4631      	mov	r1, r6
 800f784:	f000 fc7e 	bl	8010084 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800f788:	4605      	mov	r5, r0
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d0d2      	beq.n	800f734 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800f78e:	2c00      	cmp	r4, #0
 800f790:	d1eb      	bne.n	800f76a <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800f792:	4621      	mov	r1, r4
 800f794:	4628      	mov	r0, r5
 800f796:	f001 f857 	bl	8010848 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800f79a:	e7cc      	b.n	800f736 <osMessageQueueNew+0x10>

0800f79c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f79c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f79e:	461c      	mov	r4, r3
 800f7a0:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f7a4:	b1de      	cbz	r6, 800f7de <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7a6:	b338      	cbz	r0, 800f7f8 <osMessageQueuePut+0x5c>
 800f7a8:	b331      	cbz	r1, 800f7f8 <osMessageQueuePut+0x5c>
 800f7aa:	bb2b      	cbnz	r3, 800f7f8 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f7ac:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f7ae:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f7b0:	f000 fdd2 	bl	8010358 <xQueueGenericSendFromISR>
 800f7b4:	2801      	cmp	r0, #1
 800f7b6:	d003      	beq.n	800f7c0 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800f7b8:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800f7bc:	b002      	add	sp, #8
 800f7be:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800f7c0:	9b01      	ldr	r3, [sp, #4]
 800f7c2:	b90b      	cbnz	r3, 800f7c8 <osMessageQueuePut+0x2c>
  stat = osOK;
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	e7f9      	b.n	800f7bc <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800f7c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f7cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	e7f2      	b.n	800f7c4 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f7de:	b158      	cbz	r0, 800f7f8 <osMessageQueuePut+0x5c>
 800f7e0:	b151      	cbz	r1, 800f7f8 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f7e2:	4633      	mov	r3, r6
 800f7e4:	4622      	mov	r2, r4
 800f7e6:	f000 fcb4 	bl	8010152 <xQueueGenericSend>
 800f7ea:	2801      	cmp	r0, #1
 800f7ec:	d0ea      	beq.n	800f7c4 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800f7ee:	2c00      	cmp	r4, #0
 800f7f0:	d0e2      	beq.n	800f7b8 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800f7f2:	f06f 0001 	mvn.w	r0, #1
 800f7f6:	e7e1      	b.n	800f7bc <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800f7f8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f7fc:	e7de      	b.n	800f7bc <osMessageQueuePut+0x20>

0800f7fe <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f7fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f800:	461c      	mov	r4, r3
 800f802:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f806:	b1db      	cbz	r3, 800f840 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f808:	b330      	cbz	r0, 800f858 <osMessageQueueGet+0x5a>
 800f80a:	b329      	cbz	r1, 800f858 <osMessageQueueGet+0x5a>
 800f80c:	bb24      	cbnz	r4, 800f858 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f80e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f810:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f812:	f000 ffcb 	bl	80107ac <xQueueReceiveFromISR>
 800f816:	2801      	cmp	r0, #1
 800f818:	d003      	beq.n	800f822 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800f81a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800f81e:	b003      	add	sp, #12
 800f820:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800f822:	9b01      	ldr	r3, [sp, #4]
 800f824:	b90b      	cbnz	r3, 800f82a <osMessageQueueGet+0x2c>
  stat = osOK;
 800f826:	2000      	movs	r0, #0
 800f828:	e7f9      	b.n	800f81e <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800f82a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f832:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	e7f2      	b.n	800f826 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f840:	b150      	cbz	r0, 800f858 <osMessageQueueGet+0x5a>
 800f842:	b149      	cbz	r1, 800f858 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f844:	4622      	mov	r2, r4
 800f846:	f000 fe35 	bl	80104b4 <xQueueReceive>
 800f84a:	2801      	cmp	r0, #1
 800f84c:	d0eb      	beq.n	800f826 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800f84e:	2c00      	cmp	r4, #0
 800f850:	d0e3      	beq.n	800f81a <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800f852:	f06f 0001 	mvn.w	r0, #1
 800f856:	e7e2      	b.n	800f81e <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800f858:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f85c:	e7df      	b.n	800f81e <osMessageQueueGet+0x20>
	...

0800f860 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f860:	4b03      	ldr	r3, [pc, #12]	@ (800f870 <vApplicationGetIdleTaskMemory+0x10>)
 800f862:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f864:	4b03      	ldr	r3, [pc, #12]	@ (800f874 <vApplicationGetIdleTaskMemory+0x14>)
 800f866:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f868:	2380      	movs	r3, #128	@ 0x80
 800f86a:	6013      	str	r3, [r2, #0]
}
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	2400f748 	.word	0x2400f748
 800f874:	2400f548 	.word	0x2400f548

0800f878 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f878:	4b03      	ldr	r3, [pc, #12]	@ (800f888 <vApplicationGetTimerTaskMemory+0x10>)
 800f87a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f87c:	4b03      	ldr	r3, [pc, #12]	@ (800f88c <vApplicationGetTimerTaskMemory+0x14>)
 800f87e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f884:	6013      	str	r3, [r2, #0]
}
 800f886:	4770      	bx	lr
 800f888:	2400f4e8 	.word	0x2400f4e8
 800f88c:	2400f0e8 	.word	0x2400f0e8

0800f890 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f890:	4b10      	ldr	r3, [pc, #64]	@ (800f8d4 <prvInsertBlockIntoFreeList+0x44>)
{
 800f892:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f894:	461a      	mov	r2, r3
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4283      	cmp	r3, r0
 800f89a:	d3fb      	bcc.n	800f894 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f89c:	6854      	ldr	r4, [r2, #4]
 800f89e:	1911      	adds	r1, r2, r4
 800f8a0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8a2:	bf01      	itttt	eq
 800f8a4:	6841      	ldreq	r1, [r0, #4]
 800f8a6:	4610      	moveq	r0, r2
 800f8a8:	1909      	addeq	r1, r1, r4
 800f8aa:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8ac:	6844      	ldr	r4, [r0, #4]
 800f8ae:	1901      	adds	r1, r0, r4
 800f8b0:	428b      	cmp	r3, r1
 800f8b2:	d10c      	bne.n	800f8ce <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f8b4:	4908      	ldr	r1, [pc, #32]	@ (800f8d8 <prvInsertBlockIntoFreeList+0x48>)
 800f8b6:	6809      	ldr	r1, [r1, #0]
 800f8b8:	428b      	cmp	r3, r1
 800f8ba:	d003      	beq.n	800f8c4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f8bc:	6859      	ldr	r1, [r3, #4]
 800f8be:	4421      	add	r1, r4
 800f8c0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8c2:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8c4:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8c6:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8c8:	bf18      	it	ne
 800f8ca:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8cc:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	e7f8      	b.n	800f8c4 <prvInsertBlockIntoFreeList+0x34>
 800f8d2:	bf00      	nop
 800f8d4:	2400f7c4 	.word	0x2400f7c4
 800f8d8:	2400f7c0 	.word	0x2400f7c0

0800f8dc <pvPortMalloc>:
{
 800f8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800f8e2:	f001 f9dd 	bl	8010ca0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f8e6:	4940      	ldr	r1, [pc, #256]	@ (800f9e8 <pvPortMalloc+0x10c>)
 800f8e8:	4d40      	ldr	r5, [pc, #256]	@ (800f9ec <pvPortMalloc+0x110>)
 800f8ea:	680b      	ldr	r3, [r1, #0]
 800f8ec:	b9f3      	cbnz	r3, 800f92c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800f8ee:	4a40      	ldr	r2, [pc, #256]	@ (800f9f0 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800f8f0:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f8f2:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f8f4:	4e3f      	ldr	r6, [pc, #252]	@ (800f9f4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f8f6:	bf1b      	ittet	ne
 800f8f8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f8fa:	4b3f      	ldrne	r3, [pc, #252]	@ (800f9f8 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f8fc:	4b3f      	ldreq	r3, [pc, #252]	@ (800f9fc <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8fe:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800f902:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f904:	bf18      	it	ne
 800f906:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f908:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f90a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800f90c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f90e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800f912:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f916:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800f918:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f91a:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f91e:	4b38      	ldr	r3, [pc, #224]	@ (800fa00 <pvPortMalloc+0x124>)
 800f920:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f922:	4b38      	ldr	r3, [pc, #224]	@ (800fa04 <pvPortMalloc+0x128>)
 800f924:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f926:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f92a:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f92c:	682e      	ldr	r6, [r5, #0]
 800f92e:	4226      	tst	r6, r4
 800f930:	d155      	bne.n	800f9de <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800f932:	2c00      	cmp	r4, #0
 800f934:	d046      	beq.n	800f9c4 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800f936:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f93a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f93c:	bf1c      	itt	ne
 800f93e:	f023 0307 	bicne.w	r3, r3, #7
 800f942:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f944:	2b00      	cmp	r3, #0
 800f946:	d04a      	beq.n	800f9de <pvPortMalloc+0x102>
 800f948:	4f2e      	ldr	r7, [pc, #184]	@ (800fa04 <pvPortMalloc+0x128>)
 800f94a:	683c      	ldr	r4, [r7, #0]
 800f94c:	429c      	cmp	r4, r3
 800f94e:	d346      	bcc.n	800f9de <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800f950:	4a28      	ldr	r2, [pc, #160]	@ (800f9f4 <pvPortMalloc+0x118>)
 800f952:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f954:	6868      	ldr	r0, [r5, #4]
 800f956:	4298      	cmp	r0, r3
 800f958:	d204      	bcs.n	800f964 <pvPortMalloc+0x88>
 800f95a:	f8d5 c000 	ldr.w	ip, [r5]
 800f95e:	f1bc 0f00 	cmp.w	ip, #0
 800f962:	d115      	bne.n	800f990 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800f964:	6809      	ldr	r1, [r1, #0]
 800f966:	42a9      	cmp	r1, r5
 800f968:	d039      	beq.n	800f9de <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f96a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f96c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f970:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f972:	1ac2      	subs	r2, r0, r3
 800f974:	2a10      	cmp	r2, #16
 800f976:	d912      	bls.n	800f99e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f978:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f97a:	0741      	lsls	r1, r0, #29
 800f97c:	d00b      	beq.n	800f996 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	e7fe      	b.n	800f98e <pvPortMalloc+0xb2>
 800f990:	462a      	mov	r2, r5
 800f992:	4665      	mov	r5, ip
 800f994:	e7de      	b.n	800f954 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f996:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f998:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f99a:	f7ff ff79 	bl	800f890 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f99e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f9a0:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9a2:	4917      	ldr	r1, [pc, #92]	@ (800fa00 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9a4:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f9a6:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9a8:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800f9aa:	4a17      	ldr	r2, [pc, #92]	@ (800fa08 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9ac:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800f9ae:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800f9b0:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9b2:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800f9b4:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f9b8:	bf38      	it	cc
 800f9ba:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9bc:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f9c0:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800f9c2:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800f9c4:	f001 fa10 	bl	8010de8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9c8:	0763      	lsls	r3, r4, #29
 800f9ca:	d00a      	beq.n	800f9e2 <pvPortMalloc+0x106>
 800f9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	e7fe      	b.n	800f9dc <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800f9de:	2400      	movs	r4, #0
 800f9e0:	e7f0      	b.n	800f9c4 <pvPortMalloc+0xe8>
}
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e8:	2400f7c0 	.word	0x2400f7c0
 800f9ec:	2400f7ac 	.word	0x2400f7ac
 800f9f0:	2400f7cc 	.word	0x2400f7cc
 800f9f4:	2400f7c4 	.word	0x2400f7c4
 800f9f8:	24027e6c 	.word	0x24027e6c
 800f9fc:	000186a0 	.word	0x000186a0
 800fa00:	2400f7b8 	.word	0x2400f7b8
 800fa04:	2400f7bc 	.word	0x2400f7bc
 800fa08:	2400f7b4 	.word	0x2400f7b4

0800fa0c <vPortFree>:
{
 800fa0c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800fa0e:	4604      	mov	r4, r0
 800fa10:	b390      	cbz	r0, 800fa78 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fa12:	4a1a      	ldr	r2, [pc, #104]	@ (800fa7c <vPortFree+0x70>)
 800fa14:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fa18:	6812      	ldr	r2, [r2, #0]
 800fa1a:	4213      	tst	r3, r2
 800fa1c:	d108      	bne.n	800fa30 <vPortFree+0x24>
 800fa1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	e7fe      	b.n	800fa2e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa30:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800fa34:	b141      	cbz	r1, 800fa48 <vPortFree+0x3c>
 800fa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	e7fe      	b.n	800fa46 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa48:	ea23 0302 	bic.w	r3, r3, r2
 800fa4c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800fa50:	f001 f926 	bl	8010ca0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa54:	4a0a      	ldr	r2, [pc, #40]	@ (800fa80 <vPortFree+0x74>)
 800fa56:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa5a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa5e:	6811      	ldr	r1, [r2, #0]
 800fa60:	440b      	add	r3, r1
 800fa62:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa64:	f7ff ff14 	bl	800f890 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa68:	4a06      	ldr	r2, [pc, #24]	@ (800fa84 <vPortFree+0x78>)
 800fa6a:	6813      	ldr	r3, [r2, #0]
 800fa6c:	3301      	adds	r3, #1
}
 800fa6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800fa72:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800fa74:	f001 b9b8 	b.w	8010de8 <xTaskResumeAll>
}
 800fa78:	bd10      	pop	{r4, pc}
 800fa7a:	bf00      	nop
 800fa7c:	2400f7ac 	.word	0x2400f7ac
 800fa80:	2400f7bc 	.word	0x2400f7bc
 800fa84:	2400f7b0 	.word	0x2400f7b0

0800fa88 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa88:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fa8c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa90:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa92:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa94:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa9c:	4770      	bx	lr

0800fa9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800faa2:	4770      	bx	lr

0800faa4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800faa4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800faa6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800faa8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800faaa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800faac:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800faae:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fab0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fab2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fab4:	3301      	adds	r3, #1
 800fab6:	6003      	str	r3, [r0, #0]
}
 800fab8:	4770      	bx	lr

0800faba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800faba:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fabc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fabe:	1c63      	adds	r3, r4, #1
 800fac0:	d10a      	bne.n	800fad8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fac2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fac4:	685a      	ldr	r2, [r3, #4]
 800fac6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fac8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800faca:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800facc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800face:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fad0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fad2:	3301      	adds	r3, #1
 800fad4:	6003      	str	r3, [r0, #0]
}
 800fad6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fad8:	f100 0208 	add.w	r2, r0, #8
 800fadc:	4613      	mov	r3, r2
 800fade:	6852      	ldr	r2, [r2, #4]
 800fae0:	6815      	ldr	r5, [r2, #0]
 800fae2:	42a5      	cmp	r5, r4
 800fae4:	d9fa      	bls.n	800fadc <vListInsert+0x22>
 800fae6:	e7ed      	b.n	800fac4 <vListInsert+0xa>

0800fae8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fae8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800faea:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800faee:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800faf0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800faf2:	6859      	ldr	r1, [r3, #4]
 800faf4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800faf6:	bf08      	it	eq
 800faf8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fafa:	2200      	movs	r2, #0
 800fafc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	3a01      	subs	r2, #1
 800fb02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb04:	6818      	ldr	r0, [r3, #0]
}
 800fb06:	4770      	bx	lr

0800fb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb08:	4808      	ldr	r0, [pc, #32]	@ (800fb2c <prvPortStartFirstTask+0x24>)
 800fb0a:	6800      	ldr	r0, [r0, #0]
 800fb0c:	6800      	ldr	r0, [r0, #0]
 800fb0e:	f380 8808 	msr	MSP, r0
 800fb12:	f04f 0000 	mov.w	r0, #0
 800fb16:	f380 8814 	msr	CONTROL, r0
 800fb1a:	b662      	cpsie	i
 800fb1c:	b661      	cpsie	f
 800fb1e:	f3bf 8f4f 	dsb	sy
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	df00      	svc	0
 800fb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb2a:	0000      	.short	0x0000
 800fb2c:	e000ed08 	.word	0xe000ed08

0800fb30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb30:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fb40 <vPortEnableVFP+0x10>
 800fb34:	6801      	ldr	r1, [r0, #0]
 800fb36:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fb3a:	6001      	str	r1, [r0, #0]
 800fb3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb3e:	0000      	.short	0x0000
 800fb40:	e000ed88 	.word	0xe000ed88

0800fb44 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800fb44:	2300      	movs	r3, #0
{
 800fb46:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800fb48:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800fb4a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb80 <prvTaskExitError+0x3c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	d008      	beq.n	800fb64 <prvTaskExitError+0x20>
 800fb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb56:	f383 8811 	msr	BASEPRI, r3
 800fb5a:	f3bf 8f6f 	isb	sy
 800fb5e:	f3bf 8f4f 	dsb	sy
 800fb62:	e7fe      	b.n	800fb62 <prvTaskExitError+0x1e>
 800fb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb68:	f383 8811 	msr	BASEPRI, r3
 800fb6c:	f3bf 8f6f 	isb	sy
 800fb70:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800fb74:	9b01      	ldr	r3, [sp, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d0fc      	beq.n	800fb74 <prvTaskExitError+0x30>
}
 800fb7a:	b002      	add	sp, #8
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	24000078 	.word	0x24000078

0800fb84 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb88:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb8c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800fb90:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb92:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb94:	4b03      	ldr	r3, [pc, #12]	@ (800fba4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb96:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb98:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb9a:	f06f 0302 	mvn.w	r3, #2
 800fb9e:	6203      	str	r3, [r0, #32]
}
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	0800fb45 	.word	0x0800fb45
	...

0800fbb0 <SVC_Handler>:
	__asm volatile (
 800fbb0:	4b07      	ldr	r3, [pc, #28]	@ (800fbd0 <pxCurrentTCBConst2>)
 800fbb2:	6819      	ldr	r1, [r3, #0]
 800fbb4:	6808      	ldr	r0, [r1, #0]
 800fbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbba:	f380 8809 	msr	PSP, r0
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f04f 0000 	mov.w	r0, #0
 800fbc6:	f380 8811 	msr	BASEPRI, r0
 800fbca:	4770      	bx	lr
 800fbcc:	f3af 8000 	nop.w

0800fbd0 <pxCurrentTCBConst2>:
 800fbd0:	240283ac 	.word	0x240283ac

0800fbd4 <vPortEnterCritical>:
 800fbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd8:	f383 8811 	msr	BASEPRI, r3
 800fbdc:	f3bf 8f6f 	isb	sy
 800fbe0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800fbe4:	4a0a      	ldr	r2, [pc, #40]	@ (800fc10 <vPortEnterCritical+0x3c>)
 800fbe6:	6813      	ldr	r3, [r2, #0]
 800fbe8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800fbea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800fbec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800fbee:	d10e      	bne.n	800fc0e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fbf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fbf4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	b143      	cbz	r3, 800fc0e <vPortEnterCritical+0x3a>
 800fbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc00:	f383 8811 	msr	BASEPRI, r3
 800fc04:	f3bf 8f6f 	isb	sy
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	e7fe      	b.n	800fc0c <vPortEnterCritical+0x38>
}
 800fc0e:	4770      	bx	lr
 800fc10:	24000078 	.word	0x24000078

0800fc14 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800fc14:	4a08      	ldr	r2, [pc, #32]	@ (800fc38 <vPortExitCritical+0x24>)
 800fc16:	6813      	ldr	r3, [r2, #0]
 800fc18:	b943      	cbnz	r3, 800fc2c <vPortExitCritical+0x18>
 800fc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1e:	f383 8811 	msr	BASEPRI, r3
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	e7fe      	b.n	800fc2a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800fc2c:	3b01      	subs	r3, #1
 800fc2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc30:	b90b      	cbnz	r3, 800fc36 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc32:	f383 8811 	msr	BASEPRI, r3
}
 800fc36:	4770      	bx	lr
 800fc38:	24000078 	.word	0x24000078
 800fc3c:	00000000 	.word	0x00000000

0800fc40 <PendSV_Handler>:
	__asm volatile
 800fc40:	f3ef 8009 	mrs	r0, PSP
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	4b15      	ldr	r3, [pc, #84]	@ (800fca0 <pxCurrentTCBConst>)
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	f01e 0f10 	tst.w	lr, #16
 800fc50:	bf08      	it	eq
 800fc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5a:	6010      	str	r0, [r2, #0]
 800fc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fc64:	f380 8811 	msr	BASEPRI, r0
 800fc68:	f3bf 8f4f 	dsb	sy
 800fc6c:	f3bf 8f6f 	isb	sy
 800fc70:	f001 f998 	bl	8010fa4 <vTaskSwitchContext>
 800fc74:	f04f 0000 	mov.w	r0, #0
 800fc78:	f380 8811 	msr	BASEPRI, r0
 800fc7c:	bc09      	pop	{r0, r3}
 800fc7e:	6819      	ldr	r1, [r3, #0]
 800fc80:	6808      	ldr	r0, [r1, #0]
 800fc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc86:	f01e 0f10 	tst.w	lr, #16
 800fc8a:	bf08      	it	eq
 800fc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc90:	f380 8809 	msr	PSP, r0
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	f3af 8000 	nop.w

0800fca0 <pxCurrentTCBConst>:
 800fca0:	240283ac 	.word	0x240283ac

0800fca4 <xPortSysTickHandler>:
{
 800fca4:	b508      	push	{r3, lr}
	__asm volatile
 800fca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcaa:	f383 8811 	msr	BASEPRI, r3
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800fcb6:	f001 f801 	bl	8010cbc <xTaskIncrementTick>
 800fcba:	b128      	cbz	r0, 800fcc8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fcbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fcc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800fcc8:	2300      	movs	r3, #0
 800fcca:	f383 8811 	msr	BASEPRI, r3
}
 800fcce:	bd08      	pop	{r3, pc}

0800fcd0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcd0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800fcd4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fcd6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcda:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fcdc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fcde:	4b04      	ldr	r3, [pc, #16]	@ (800fcf0 <vPortSetupTimerInterrupt+0x20>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fce6:	3b01      	subs	r3, #1
 800fce8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fcea:	2307      	movs	r3, #7
 800fcec:	6113      	str	r3, [r2, #16]
}
 800fcee:	4770      	bx	lr
 800fcf0:	2400006c 	.word	0x2400006c

0800fcf4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fcf4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800fcf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fcfa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800fcfe:	4a38      	ldr	r2, [pc, #224]	@ (800fde0 <xPortStartScheduler+0xec>)
 800fd00:	4291      	cmp	r1, r2
 800fd02:	d108      	bne.n	800fd16 <xPortStartScheduler+0x22>
	__asm volatile
 800fd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	e7fe      	b.n	800fd14 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd16:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800fd1a:	4b32      	ldr	r3, [pc, #200]	@ (800fde4 <xPortStartScheduler+0xf0>)
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d108      	bne.n	800fd32 <xPortStartScheduler+0x3e>
 800fd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd24:	f383 8811 	msr	BASEPRI, r3
 800fd28:	f3bf 8f6f 	isb	sy
 800fd2c:	f3bf 8f4f 	dsb	sy
 800fd30:	e7fe      	b.n	800fd30 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd32:	4b2d      	ldr	r3, [pc, #180]	@ (800fde8 <xPortStartScheduler+0xf4>)
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	b2d2      	uxtb	r2, r2
 800fd38:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd3a:	22ff      	movs	r2, #255	@ 0xff
 800fd3c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd3e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd40:	4a2a      	ldr	r2, [pc, #168]	@ (800fdec <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd48:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fd4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fd50:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd52:	2307      	movs	r3, #7
 800fd54:	4a26      	ldr	r2, [pc, #152]	@ (800fdf0 <xPortStartScheduler+0xfc>)
 800fd56:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd58:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800fd5c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd5e:	0609      	lsls	r1, r1, #24
 800fd60:	d40a      	bmi.n	800fd78 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd62:	2b03      	cmp	r3, #3
 800fd64:	d011      	beq.n	800fd8a <xPortStartScheduler+0x96>
 800fd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	e7fe      	b.n	800fd76 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800fd78:	3b01      	subs	r3, #1
 800fd7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fd80:	005b      	lsls	r3, r3, #1
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	f88d 3003 	strb.w	r3, [sp, #3]
 800fd88:	e7e6      	b.n	800fd58 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd8e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800fd92:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd94:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd96:	9b01      	ldr	r3, [sp, #4]
 800fd98:	4a13      	ldr	r2, [pc, #76]	@ (800fde8 <xPortStartScheduler+0xf4>)
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd9e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800fda2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fda6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fdaa:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800fdae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fdb2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800fdb6:	f7ff ff8b 	bl	800fcd0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fdba:	4b0e      	ldr	r3, [pc, #56]	@ (800fdf4 <xPortStartScheduler+0x100>)
 800fdbc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800fdbe:	f7ff feb7 	bl	800fb30 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fdc2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800fdc6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fdca:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800fdce:	f7ff fe9b 	bl	800fb08 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800fdd2:	f001 f8e7 	bl	8010fa4 <vTaskSwitchContext>
}
 800fdd6:	4628      	mov	r0, r5
	prvTaskExitError();
 800fdd8:	f7ff feb4 	bl	800fb44 <prvTaskExitError>
}
 800fddc:	b003      	add	sp, #12
 800fdde:	bd30      	pop	{r4, r5, pc}
 800fde0:	410fc271 	.word	0x410fc271
 800fde4:	410fc270 	.word	0x410fc270
 800fde8:	e000e400 	.word	0xe000e400
 800fdec:	24027e70 	.word	0x24027e70
 800fdf0:	24027e6c 	.word	0x24027e6c
 800fdf4:	24000078 	.word	0x24000078

0800fdf8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fdf8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fdfc:	2b0f      	cmp	r3, #15
 800fdfe:	d90e      	bls.n	800fe1e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe00:	4a11      	ldr	r2, [pc, #68]	@ (800fe48 <vPortValidateInterruptPriority+0x50>)
 800fe02:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe04:	4a11      	ldr	r2, [pc, #68]	@ (800fe4c <vPortValidateInterruptPriority+0x54>)
 800fe06:	7812      	ldrb	r2, [r2, #0]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d908      	bls.n	800fe1e <vPortValidateInterruptPriority+0x26>
 800fe0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	e7fe      	b.n	800fe1c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fe22:	4a0b      	ldr	r2, [pc, #44]	@ (800fe50 <vPortValidateInterruptPriority+0x58>)
 800fe24:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800fe28:	6812      	ldr	r2, [r2, #0]
 800fe2a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d908      	bls.n	800fe44 <vPortValidateInterruptPriority+0x4c>
 800fe32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe36:	f383 8811 	msr	BASEPRI, r3
 800fe3a:	f3bf 8f6f 	isb	sy
 800fe3e:	f3bf 8f4f 	dsb	sy
 800fe42:	e7fe      	b.n	800fe42 <vPortValidateInterruptPriority+0x4a>
	}
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	e000e3f0 	.word	0xe000e3f0
 800fe4c:	24027e70 	.word	0x24027e70
 800fe50:	24027e6c 	.word	0x24027e6c

0800fe54 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fe54:	b510      	push	{r4, lr}
 800fe56:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe58:	f7ff febc 	bl	800fbd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fe5c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800fe5e:	f7ff fed9 	bl	800fc14 <vPortExitCritical>

	return xReturn;
}
 800fe62:	fab4 f084 	clz	r0, r4
 800fe66:	0940      	lsrs	r0, r0, #5
 800fe68:	bd10      	pop	{r4, pc}

0800fe6a <prvCopyDataToQueue>:
{
 800fe6a:	b570      	push	{r4, r5, r6, lr}
 800fe6c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe6e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800fe70:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe72:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe74:	b942      	cbnz	r2, 800fe88 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe76:	6806      	ldr	r6, [r0, #0]
 800fe78:	b99e      	cbnz	r6, 800fea2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe7a:	6880      	ldr	r0, [r0, #8]
 800fe7c:	f001 f9f2 	bl	8011264 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe80:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe82:	3501      	adds	r5, #1
 800fe84:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800fe86:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800fe88:	b96e      	cbnz	r6, 800fea6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe8a:	6840      	ldr	r0, [r0, #4]
 800fe8c:	f018 ff15 	bl	8028cba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe90:	6863      	ldr	r3, [r4, #4]
 800fe92:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800fe94:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe96:	68a2      	ldr	r2, [r4, #8]
 800fe98:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe9a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe9c:	bf24      	itt	cs
 800fe9e:	6823      	ldrcs	r3, [r4, #0]
 800fea0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800fea2:	2000      	movs	r0, #0
 800fea4:	e7ed      	b.n	800fe82 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fea6:	68c0      	ldr	r0, [r0, #12]
 800fea8:	f018 ff07 	bl	8028cba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800feac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	4251      	negs	r1, r2
 800feb2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800feb4:	6822      	ldr	r2, [r4, #0]
 800feb6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800feb8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800feba:	bf3e      	ittt	cc
 800febc:	68a3      	ldrcc	r3, [r4, #8]
 800febe:	185b      	addcc	r3, r3, r1
 800fec0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800fec2:	2e02      	cmp	r6, #2
 800fec4:	d1ed      	bne.n	800fea2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fec6:	b10d      	cbz	r5, 800fecc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800fec8:	3d01      	subs	r5, #1
 800feca:	e7ea      	b.n	800fea2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800fecc:	4628      	mov	r0, r5
 800fece:	e7d8      	b.n	800fe82 <prvCopyDataToQueue+0x18>

0800fed0 <prvCopyDataFromQueue>:
{
 800fed0:	4603      	mov	r3, r0
 800fed2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800fed6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fed8:	b162      	cbz	r2, 800fef4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800feda:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fedc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fede:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fee0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fee2:	60dc      	str	r4, [r3, #12]
}
 800fee4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fee8:	bf24      	itt	cs
 800feea:	6819      	ldrcs	r1, [r3, #0]
 800feec:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800feee:	68d9      	ldr	r1, [r3, #12]
 800fef0:	f018 bee3 	b.w	8028cba <memcpy>
}
 800fef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <prvUnlockQueue>:
{
 800fefa:	b570      	push	{r4, r5, r6, lr}
 800fefc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800fefe:	f7ff fe69 	bl	800fbd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ff02:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff06:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800ff0a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff0c:	2d00      	cmp	r5, #0
 800ff0e:	dc14      	bgt.n	800ff3a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800ff10:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff12:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800ff16:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800ff1a:	f7ff fe7b 	bl	800fc14 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ff1e:	f7ff fe59 	bl	800fbd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ff22:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800ff26:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff28:	2d00      	cmp	r5, #0
 800ff2a:	dc12      	bgt.n	800ff52 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800ff2c:	23ff      	movs	r3, #255	@ 0xff
 800ff2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800ff32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800ff36:	f7ff be6d 	b.w	800fc14 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d0e7      	beq.n	800ff10 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff40:	4630      	mov	r0, r6
 800ff42:	f001 f8ab 	bl	801109c <xTaskRemoveFromEventList>
 800ff46:	b108      	cbz	r0, 800ff4c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800ff48:	f001 f932 	bl	80111b0 <vTaskMissedYield>
			--cTxLock;
 800ff4c:	3d01      	subs	r5, #1
 800ff4e:	b26d      	sxtb	r5, r5
 800ff50:	e7dc      	b.n	800ff0c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff52:	6923      	ldr	r3, [r4, #16]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d0e9      	beq.n	800ff2c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f001 f89f 	bl	801109c <xTaskRemoveFromEventList>
 800ff5e:	b108      	cbz	r0, 800ff64 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800ff60:	f001 f926 	bl	80111b0 <vTaskMissedYield>
				--cRxLock;
 800ff64:	3d01      	subs	r5, #1
 800ff66:	b26d      	sxtb	r5, r5
 800ff68:	e7de      	b.n	800ff28 <prvUnlockQueue+0x2e>

0800ff6a <xQueueGenericReset>:
{
 800ff6a:	b538      	push	{r3, r4, r5, lr}
 800ff6c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ff6e:	4604      	mov	r4, r0
 800ff70:	b940      	cbnz	r0, 800ff84 <xQueueGenericReset+0x1a>
 800ff72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff76:	f383 8811 	msr	BASEPRI, r3
 800ff7a:	f3bf 8f6f 	isb	sy
 800ff7e:	f3bf 8f4f 	dsb	sy
 800ff82:	e7fe      	b.n	800ff82 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800ff84:	f7ff fe26 	bl	800fbd4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff88:	6822      	ldr	r2, [r4, #0]
 800ff8a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff8e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff90:	434b      	muls	r3, r1
 800ff92:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff94:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff96:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff98:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ff9a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800ff9c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff9e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ffa0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ffa2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ffa6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800ffaa:	b9a5      	cbnz	r5, 800ffd6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffac:	6923      	ldr	r3, [r4, #16]
 800ffae:	b173      	cbz	r3, 800ffce <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffb0:	f104 0010 	add.w	r0, r4, #16
 800ffb4:	f001 f872 	bl	801109c <xTaskRemoveFromEventList>
 800ffb8:	b148      	cbz	r0, 800ffce <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800ffba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ffbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ffce:	f7ff fe21 	bl	800fc14 <vPortExitCritical>
}
 800ffd2:	2001      	movs	r0, #1
 800ffd4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ffd6:	f104 0010 	add.w	r0, r4, #16
 800ffda:	f7ff fd55 	bl	800fa88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ffde:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ffe2:	f7ff fd51 	bl	800fa88 <vListInitialise>
 800ffe6:	e7f2      	b.n	800ffce <xQueueGenericReset+0x64>

0800ffe8 <xQueueGenericCreateStatic>:
	{
 800ffe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffea:	460d      	mov	r5, r1
 800ffec:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ffee:	b940      	cbnz	r0, 8010002 <xQueueGenericCreateStatic+0x1a>
 800fff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	e7fe      	b.n	8010000 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8010002:	b943      	cbnz	r3, 8010016 <xQueueGenericCreateStatic+0x2e>
 8010004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	e7fe      	b.n	8010014 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010016:	b14a      	cbz	r2, 801002c <xQueueGenericCreateStatic+0x44>
 8010018:	b991      	cbnz	r1, 8010040 <xQueueGenericCreateStatic+0x58>
 801001a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801001e:	f383 8811 	msr	BASEPRI, r3
 8010022:	f3bf 8f6f 	isb	sy
 8010026:	f3bf 8f4f 	dsb	sy
 801002a:	e7fe      	b.n	801002a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801002c:	b141      	cbz	r1, 8010040 <xQueueGenericCreateStatic+0x58>
 801002e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010032:	f383 8811 	msr	BASEPRI, r3
 8010036:	f3bf 8f6f 	isb	sy
 801003a:	f3bf 8f4f 	dsb	sy
 801003e:	e7fe      	b.n	801003e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010040:	2350      	movs	r3, #80	@ 0x50
 8010042:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010044:	9b01      	ldr	r3, [sp, #4]
 8010046:	2b50      	cmp	r3, #80	@ 0x50
 8010048:	d008      	beq.n	801005c <xQueueGenericCreateStatic+0x74>
 801004a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801004e:	f383 8811 	msr	BASEPRI, r3
 8010052:	f3bf 8f6f 	isb	sy
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	e7fe      	b.n	801005a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801005c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801005e:	2d00      	cmp	r5, #0
 8010060:	bf08      	it	eq
 8010062:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010064:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010066:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 801006a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 801006c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010070:	4620      	mov	r0, r4
 8010072:	f7ff ff7a 	bl	800ff6a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8010076:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 801007a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 801007c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8010080:	b003      	add	sp, #12
 8010082:	bd30      	pop	{r4, r5, pc}

08010084 <xQueueGenericCreate>:
	{
 8010084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010086:	460d      	mov	r5, r1
 8010088:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801008a:	4606      	mov	r6, r0
 801008c:	b940      	cbnz	r0, 80100a0 <xQueueGenericCreate+0x1c>
 801008e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010092:	f383 8811 	msr	BASEPRI, r3
 8010096:	f3bf 8f6f 	isb	sy
 801009a:	f3bf 8f4f 	dsb	sy
 801009e:	e7fe      	b.n	801009e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80100a2:	3050      	adds	r0, #80	@ 0x50
 80100a4:	f7ff fc1a 	bl	800f8dc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80100a8:	4604      	mov	r4, r0
 80100aa:	b170      	cbz	r0, 80100ca <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80100ac:	2300      	movs	r3, #0
 80100ae:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80100b2:	b165      	cbz	r5, 80100ce <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100b4:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80100b8:	2101      	movs	r1, #1
 80100ba:	4620      	mov	r0, r4
 80100bc:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80100be:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80100c2:	f7ff ff52 	bl	800ff6a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80100c6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80100ca:	4620      	mov	r0, r4
 80100cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80100ce:	4603      	mov	r3, r0
 80100d0:	e7f2      	b.n	80100b8 <xQueueGenericCreate+0x34>

080100d2 <xQueueCreateCountingSemaphoreStatic>:
	{
 80100d2:	b513      	push	{r0, r1, r4, lr}
 80100d4:	4613      	mov	r3, r2
 80100d6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80100d8:	b940      	cbnz	r0, 80100ec <xQueueCreateCountingSemaphoreStatic+0x1a>
 80100da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100de:	f383 8811 	msr	BASEPRI, r3
 80100e2:	f3bf 8f6f 	isb	sy
 80100e6:	f3bf 8f4f 	dsb	sy
 80100ea:	e7fe      	b.n	80100ea <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80100ec:	4288      	cmp	r0, r1
 80100ee:	d208      	bcs.n	8010102 <xQueueCreateCountingSemaphoreStatic+0x30>
 80100f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	e7fe      	b.n	8010100 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010102:	2202      	movs	r2, #2
 8010104:	9200      	str	r2, [sp, #0]
 8010106:	2200      	movs	r2, #0
 8010108:	4611      	mov	r1, r2
 801010a:	f7ff ff6d 	bl	800ffe8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 801010e:	b100      	cbz	r0, 8010112 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010110:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8010112:	b002      	add	sp, #8
 8010114:	bd10      	pop	{r4, pc}

08010116 <xQueueCreateCountingSemaphore>:
	{
 8010116:	b510      	push	{r4, lr}
 8010118:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 801011a:	b940      	cbnz	r0, 801012e <xQueueCreateCountingSemaphore+0x18>
 801011c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010120:	f383 8811 	msr	BASEPRI, r3
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	e7fe      	b.n	801012c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 801012e:	4288      	cmp	r0, r1
 8010130:	d208      	bcs.n	8010144 <xQueueCreateCountingSemaphore+0x2e>
 8010132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	e7fe      	b.n	8010142 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010144:	2202      	movs	r2, #2
 8010146:	2100      	movs	r1, #0
 8010148:	f7ff ff9c 	bl	8010084 <xQueueGenericCreate>
		if( xHandle != NULL )
 801014c:	b100      	cbz	r0, 8010150 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801014e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8010150:	bd10      	pop	{r4, pc}

08010152 <xQueueGenericSend>:
{
 8010152:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010156:	460f      	mov	r7, r1
 8010158:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 801015a:	4604      	mov	r4, r0
{
 801015c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801015e:	b940      	cbnz	r0, 8010172 <xQueueGenericSend+0x20>
 8010160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	e7fe      	b.n	8010170 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010172:	b951      	cbnz	r1, 801018a <xQueueGenericSend+0x38>
 8010174:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010176:	b143      	cbz	r3, 801018a <xQueueGenericSend+0x38>
 8010178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801017c:	f383 8811 	msr	BASEPRI, r3
 8010180:	f3bf 8f6f 	isb	sy
 8010184:	f3bf 8f4f 	dsb	sy
 8010188:	e7fe      	b.n	8010188 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801018a:	2e02      	cmp	r6, #2
 801018c:	d10b      	bne.n	80101a6 <xQueueGenericSend+0x54>
 801018e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010190:	2b01      	cmp	r3, #1
 8010192:	d008      	beq.n	80101a6 <xQueueGenericSend+0x54>
 8010194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	e7fe      	b.n	80101a4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101a6:	f001 f80f 	bl	80111c8 <xTaskGetSchedulerState>
 80101aa:	4605      	mov	r5, r0
 80101ac:	b330      	cbz	r0, 80101fc <xQueueGenericSend+0xaa>
 80101ae:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80101b0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80101b4:	f7ff fd0e 	bl	800fbd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80101ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80101bc:	429a      	cmp	r2, r3
 80101be:	d301      	bcc.n	80101c4 <xQueueGenericSend+0x72>
 80101c0:	2e02      	cmp	r6, #2
 80101c2:	d127      	bne.n	8010214 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101c4:	4632      	mov	r2, r6
 80101c6:	4639      	mov	r1, r7
 80101c8:	4620      	mov	r0, r4
 80101ca:	f7ff fe4e 	bl	800fe6a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80101d0:	b11b      	cbz	r3, 80101da <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101d2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80101d6:	f000 ff61 	bl	801109c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80101da:	b148      	cbz	r0, 80101f0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80101dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80101e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80101f0:	f7ff fd10 	bl	800fc14 <vPortExitCritical>
				return pdPASS;
 80101f4:	2001      	movs	r0, #1
}
 80101f6:	b004      	add	sp, #16
 80101f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101fc:	9b01      	ldr	r3, [sp, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d0d6      	beq.n	80101b0 <xQueueGenericSend+0x5e>
 8010202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	e7fe      	b.n	8010212 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010214:	9b01      	ldr	r3, [sp, #4]
 8010216:	b91b      	cbnz	r3, 8010220 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8010218:	f7ff fcfc 	bl	800fc14 <vPortExitCritical>
					return errQUEUE_FULL;
 801021c:	2000      	movs	r0, #0
 801021e:	e7ea      	b.n	80101f6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8010220:	b915      	cbnz	r5, 8010228 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010222:	a802      	add	r0, sp, #8
 8010224:	f000 ff7c 	bl	8011120 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010228:	f7ff fcf4 	bl	800fc14 <vPortExitCritical>
		vTaskSuspendAll();
 801022c:	f000 fd38 	bl	8010ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010230:	f7ff fcd0 	bl	800fbd4 <vPortEnterCritical>
 8010234:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010238:	2bff      	cmp	r3, #255	@ 0xff
 801023a:	d101      	bne.n	8010240 <xQueueGenericSend+0xee>
 801023c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8010240:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010244:	2bff      	cmp	r3, #255	@ 0xff
 8010246:	d101      	bne.n	801024c <xQueueGenericSend+0xfa>
 8010248:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 801024c:	f7ff fce2 	bl	800fc14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010250:	a901      	add	r1, sp, #4
 8010252:	a802      	add	r0, sp, #8
 8010254:	f000 ff70 	bl	8011138 <xTaskCheckForTimeOut>
 8010258:	bb38      	cbnz	r0, 80102aa <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801025a:	f7ff fcbb 	bl	800fbd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801025e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010260:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010262:	429a      	cmp	r2, r3
 8010264:	d10e      	bne.n	8010284 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010266:	f7ff fcd5 	bl	800fc14 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801026a:	9901      	ldr	r1, [sp, #4]
 801026c:	f104 0010 	add.w	r0, r4, #16
 8010270:	f000 fedc 	bl	801102c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010274:	4620      	mov	r0, r4
 8010276:	f7ff fe40 	bl	800fefa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801027a:	f000 fdb5 	bl	8010de8 <xTaskResumeAll>
 801027e:	b148      	cbz	r0, 8010294 <xQueueGenericSend+0x142>
 8010280:	2501      	movs	r5, #1
 8010282:	e797      	b.n	80101b4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8010284:	f7ff fcc6 	bl	800fc14 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010288:	4620      	mov	r0, r4
 801028a:	f7ff fe36 	bl	800fefa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801028e:	f000 fdab 	bl	8010de8 <xTaskResumeAll>
 8010292:	e7f5      	b.n	8010280 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8010294:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801029c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	e7ea      	b.n	8010280 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80102aa:	4620      	mov	r0, r4
 80102ac:	f7ff fe25 	bl	800fefa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102b0:	f000 fd9a 	bl	8010de8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80102b4:	e7b2      	b.n	801021c <xQueueGenericSend+0xca>

080102b6 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80102b6:	2200      	movs	r2, #0
	{
 80102b8:	460b      	mov	r3, r1
 80102ba:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80102bc:	4611      	mov	r1, r2
 80102be:	9000      	str	r0, [sp, #0]
 80102c0:	2001      	movs	r0, #1
 80102c2:	f7ff fe91 	bl	800ffe8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80102c6:	4604      	mov	r4, r0
 80102c8:	b138      	cbz	r0, 80102da <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80102ca:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80102cc:	461a      	mov	r2, r3
 80102ce:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80102d0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80102d2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80102d4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80102d6:	f7ff ff3c 	bl	8010152 <xQueueGenericSend>
	}
 80102da:	4620      	mov	r0, r4
 80102dc:	b002      	add	sp, #8
 80102de:	bd10      	pop	{r4, pc}

080102e0 <xQueueGiveMutexRecursive>:
	{
 80102e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80102e2:	4604      	mov	r4, r0
 80102e4:	b940      	cbnz	r0, 80102f8 <xQueueGiveMutexRecursive+0x18>
 80102e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102ea:	f383 8811 	msr	BASEPRI, r3
 80102ee:	f3bf 8f6f 	isb	sy
 80102f2:	f3bf 8f4f 	dsb	sy
 80102f6:	e7fe      	b.n	80102f6 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80102f8:	6885      	ldr	r5, [r0, #8]
 80102fa:	f000 ff5f 	bl	80111bc <xTaskGetCurrentTaskHandle>
 80102fe:	4285      	cmp	r5, r0
 8010300:	d10b      	bne.n	801031a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010302:	68e3      	ldr	r3, [r4, #12]
 8010304:	3b01      	subs	r3, #1
 8010306:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010308:	b10b      	cbz	r3, 801030e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 801030a:	2001      	movs	r0, #1
	}
 801030c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801030e:	461a      	mov	r2, r3
 8010310:	4619      	mov	r1, r3
 8010312:	4620      	mov	r0, r4
 8010314:	f7ff ff1d 	bl	8010152 <xQueueGenericSend>
 8010318:	e7f7      	b.n	801030a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 801031a:	2000      	movs	r0, #0
		return xReturn;
 801031c:	e7f6      	b.n	801030c <xQueueGiveMutexRecursive+0x2c>

0801031e <xQueueCreateMutex>:
	{
 801031e:	b570      	push	{r4, r5, r6, lr}
 8010320:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010322:	2050      	movs	r0, #80	@ 0x50
 8010324:	f7ff fada 	bl	800f8dc <pvPortMalloc>
 8010328:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 801032a:	b198      	cbz	r0, 8010354 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801032c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 801032e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010330:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010332:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8010336:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801033a:	f7ff fe16 	bl	800ff6a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801033e:	462b      	mov	r3, r5
 8010340:	462a      	mov	r2, r5
 8010342:	4629      	mov	r1, r5
 8010344:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8010346:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801034a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801034c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801034e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010350:	f7ff feff 	bl	8010152 <xQueueGenericSend>
	}
 8010354:	4620      	mov	r0, r4
 8010356:	bd70      	pop	{r4, r5, r6, pc}

08010358 <xQueueGenericSendFromISR>:
{
 8010358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801035c:	4689      	mov	r9, r1
 801035e:	4617      	mov	r7, r2
 8010360:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8010362:	4604      	mov	r4, r0
 8010364:	b940      	cbnz	r0, 8010378 <xQueueGenericSendFromISR+0x20>
 8010366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	e7fe      	b.n	8010376 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010378:	b951      	cbnz	r1, 8010390 <xQueueGenericSendFromISR+0x38>
 801037a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801037c:	b143      	cbz	r3, 8010390 <xQueueGenericSendFromISR+0x38>
 801037e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010382:	f383 8811 	msr	BASEPRI, r3
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	e7fe      	b.n	801038e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010390:	2e02      	cmp	r6, #2
 8010392:	d10b      	bne.n	80103ac <xQueueGenericSendFromISR+0x54>
 8010394:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010396:	2b01      	cmp	r3, #1
 8010398:	d008      	beq.n	80103ac <xQueueGenericSendFromISR+0x54>
 801039a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801039e:	f383 8811 	msr	BASEPRI, r3
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	e7fe      	b.n	80103aa <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103ac:	f7ff fd24 	bl	800fdf8 <vPortValidateInterruptPriority>
	__asm volatile
 80103b0:	f3ef 8811 	mrs	r8, BASEPRI
 80103b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b8:	f383 8811 	msr	BASEPRI, r3
 80103bc:	f3bf 8f6f 	isb	sy
 80103c0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80103c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d301      	bcc.n	80103d0 <xQueueGenericSendFromISR+0x78>
 80103cc:	2e02      	cmp	r6, #2
 80103ce:	d11e      	bne.n	801040e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 80103d0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103d4:	4632      	mov	r2, r6
 80103d6:	4649      	mov	r1, r9
 80103d8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80103da:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103de:	f7ff fd44 	bl	800fe6a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80103e2:	1c6b      	adds	r3, r5, #1
 80103e4:	d10e      	bne.n	8010404 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80103e8:	b13b      	cbz	r3, 80103fa <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103ea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80103ee:	f000 fe55 	bl	801109c <xTaskRemoveFromEventList>
 80103f2:	b110      	cbz	r0, 80103fa <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 80103f4:	b10f      	cbz	r7, 80103fa <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80103f6:	2301      	movs	r3, #1
 80103f8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80103fa:	2001      	movs	r0, #1
	__asm volatile
 80103fc:	f388 8811 	msr	BASEPRI, r8
}
 8010400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010404:	3501      	adds	r5, #1
 8010406:	b26d      	sxtb	r5, r5
 8010408:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 801040c:	e7f5      	b.n	80103fa <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 801040e:	2000      	movs	r0, #0
 8010410:	e7f4      	b.n	80103fc <xQueueGenericSendFromISR+0xa4>

08010412 <xQueueGiveFromISR>:
{
 8010412:	b570      	push	{r4, r5, r6, lr}
 8010414:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010416:	4604      	mov	r4, r0
 8010418:	b940      	cbnz	r0, 801042c <xQueueGiveFromISR+0x1a>
	__asm volatile
 801041a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801041e:	f383 8811 	msr	BASEPRI, r3
 8010422:	f3bf 8f6f 	isb	sy
 8010426:	f3bf 8f4f 	dsb	sy
 801042a:	e7fe      	b.n	801042a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 801042c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801042e:	b143      	cbz	r3, 8010442 <xQueueGiveFromISR+0x30>
 8010430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010434:	f383 8811 	msr	BASEPRI, r3
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	e7fe      	b.n	8010440 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010442:	6803      	ldr	r3, [r0, #0]
 8010444:	b953      	cbnz	r3, 801045c <xQueueGiveFromISR+0x4a>
 8010446:	6883      	ldr	r3, [r0, #8]
 8010448:	b143      	cbz	r3, 801045c <xQueueGiveFromISR+0x4a>
 801044a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801044e:	f383 8811 	msr	BASEPRI, r3
 8010452:	f3bf 8f6f 	isb	sy
 8010456:	f3bf 8f4f 	dsb	sy
 801045a:	e7fe      	b.n	801045a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801045c:	f7ff fccc 	bl	800fdf8 <vPortValidateInterruptPriority>
	__asm volatile
 8010460:	f3ef 8611 	mrs	r6, BASEPRI
 8010464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010468:	f383 8811 	msr	BASEPRI, r3
 801046c:	f3bf 8f6f 	isb	sy
 8010470:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010474:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010476:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010478:	4293      	cmp	r3, r2
 801047a:	d919      	bls.n	80104b0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 801047c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010480:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8010482:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8010484:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010486:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8010488:	d10d      	bne.n	80104a6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801048a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801048c:	b13b      	cbz	r3, 801049e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801048e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010492:	f000 fe03 	bl	801109c <xTaskRemoveFromEventList>
 8010496:	b110      	cbz	r0, 801049e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8010498:	b10d      	cbz	r5, 801049e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801049a:	2301      	movs	r3, #1
 801049c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 801049e:	2001      	movs	r0, #1
	__asm volatile
 80104a0:	f386 8811 	msr	BASEPRI, r6
}
 80104a4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80104a6:	3301      	adds	r3, #1
 80104a8:	b25b      	sxtb	r3, r3
 80104aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80104ae:	e7f6      	b.n	801049e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80104b0:	2000      	movs	r0, #0
 80104b2:	e7f5      	b.n	80104a0 <xQueueGiveFromISR+0x8e>

080104b4 <xQueueReceive>:
{
 80104b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80104b8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 80104ba:	4604      	mov	r4, r0
{
 80104bc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80104be:	b940      	cbnz	r0, 80104d2 <xQueueReceive+0x1e>
	__asm volatile
 80104c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104c4:	f383 8811 	msr	BASEPRI, r3
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	e7fe      	b.n	80104d0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104d2:	b951      	cbnz	r1, 80104ea <xQueueReceive+0x36>
 80104d4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80104d6:	b143      	cbz	r3, 80104ea <xQueueReceive+0x36>
 80104d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104dc:	f383 8811 	msr	BASEPRI, r3
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	e7fe      	b.n	80104e8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104ea:	f000 fe6d 	bl	80111c8 <xTaskGetSchedulerState>
 80104ee:	4605      	mov	r5, r0
 80104f0:	b318      	cbz	r0, 801053a <xQueueReceive+0x86>
 80104f2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80104f4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80104f8:	f7ff fb6c 	bl	800fbd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104fc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104fe:	b347      	cbz	r7, 8010552 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010500:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010502:	4631      	mov	r1, r6
 8010504:	4620      	mov	r0, r4
 8010506:	f7ff fce3 	bl	800fed0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801050a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801050c:	6923      	ldr	r3, [r4, #16]
 801050e:	b173      	cbz	r3, 801052e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010510:	f104 0010 	add.w	r0, r4, #16
 8010514:	f000 fdc2 	bl	801109c <xTaskRemoveFromEventList>
 8010518:	b148      	cbz	r0, 801052e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 801051a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801051e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010522:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010526:	f3bf 8f4f 	dsb	sy
 801052a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801052e:	f7ff fb71 	bl	800fc14 <vPortExitCritical>
				return pdPASS;
 8010532:	2001      	movs	r0, #1
}
 8010534:	b004      	add	sp, #16
 8010536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801053a:	9b01      	ldr	r3, [sp, #4]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d0d9      	beq.n	80104f4 <xQueueReceive+0x40>
 8010540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	e7fe      	b.n	8010550 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010552:	9b01      	ldr	r3, [sp, #4]
 8010554:	b91b      	cbnz	r3, 801055e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8010556:	f7ff fb5d 	bl	800fc14 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801055a:	2000      	movs	r0, #0
 801055c:	e7ea      	b.n	8010534 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 801055e:	b915      	cbnz	r5, 8010566 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010560:	a802      	add	r0, sp, #8
 8010562:	f000 fddd 	bl	8011120 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010566:	f7ff fb55 	bl	800fc14 <vPortExitCritical>
		vTaskSuspendAll();
 801056a:	f000 fb99 	bl	8010ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801056e:	f7ff fb31 	bl	800fbd4 <vPortEnterCritical>
 8010572:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010576:	2bff      	cmp	r3, #255	@ 0xff
 8010578:	d101      	bne.n	801057e <xQueueReceive+0xca>
 801057a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 801057e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010582:	2bff      	cmp	r3, #255	@ 0xff
 8010584:	d101      	bne.n	801058a <xQueueReceive+0xd6>
 8010586:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 801058a:	f7ff fb43 	bl	800fc14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801058e:	a901      	add	r1, sp, #4
 8010590:	a802      	add	r0, sp, #8
 8010592:	f000 fdd1 	bl	8011138 <xTaskCheckForTimeOut>
 8010596:	bb00      	cbnz	r0, 80105da <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010598:	4620      	mov	r0, r4
 801059a:	f7ff fc5b 	bl	800fe54 <prvIsQueueEmpty>
 801059e:	b1b0      	cbz	r0, 80105ce <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80105a0:	9901      	ldr	r1, [sp, #4]
 80105a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80105a6:	f000 fd41 	bl	801102c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80105aa:	4620      	mov	r0, r4
 80105ac:	f7ff fca5 	bl	800fefa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80105b0:	f000 fc1a 	bl	8010de8 <xTaskResumeAll>
 80105b4:	b948      	cbnz	r0, 80105ca <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80105b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80105ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	f3bf 8f6f 	isb	sy
 80105ca:	2501      	movs	r5, #1
 80105cc:	e794      	b.n	80104f8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80105ce:	4620      	mov	r0, r4
 80105d0:	f7ff fc93 	bl	800fefa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105d4:	f000 fc08 	bl	8010de8 <xTaskResumeAll>
 80105d8:	e7f7      	b.n	80105ca <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80105da:	4620      	mov	r0, r4
 80105dc:	f7ff fc8d 	bl	800fefa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105e0:	f000 fc02 	bl	8010de8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105e4:	4620      	mov	r0, r4
 80105e6:	f7ff fc35 	bl	800fe54 <prvIsQueueEmpty>
 80105ea:	2800      	cmp	r0, #0
 80105ec:	d0ed      	beq.n	80105ca <xQueueReceive+0x116>
 80105ee:	e7b4      	b.n	801055a <xQueueReceive+0xa6>

080105f0 <xQueueSemaphoreTake>:
{
 80105f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105f2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80105f4:	4604      	mov	r4, r0
{
 80105f6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80105f8:	b940      	cbnz	r0, 801060c <xQueueSemaphoreTake+0x1c>
 80105fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105fe:	f383 8811 	msr	BASEPRI, r3
 8010602:	f3bf 8f6f 	isb	sy
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	e7fe      	b.n	801060a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 801060c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 801060e:	b145      	cbz	r5, 8010622 <xQueueSemaphoreTake+0x32>
 8010610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	e7fe      	b.n	8010620 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010622:	f000 fdd1 	bl	80111c8 <xTaskGetSchedulerState>
 8010626:	4606      	mov	r6, r0
 8010628:	b320      	cbz	r0, 8010674 <xQueueSemaphoreTake+0x84>
 801062a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 801062c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 801062e:	f7ff fad1 	bl	800fbd4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010632:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010634:	b353      	cbz	r3, 801068c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010636:	3b01      	subs	r3, #1
 8010638:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801063a:	6823      	ldr	r3, [r4, #0]
 801063c:	b913      	cbnz	r3, 8010644 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801063e:	f000 fea1 	bl	8011384 <pvTaskIncrementMutexHeldCount>
 8010642:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010644:	6923      	ldr	r3, [r4, #16]
 8010646:	b173      	cbz	r3, 8010666 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010648:	f104 0010 	add.w	r0, r4, #16
 801064c:	f000 fd26 	bl	801109c <xTaskRemoveFromEventList>
 8010650:	b148      	cbz	r0, 8010666 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8010652:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801065a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801065e:	f3bf 8f4f 	dsb	sy
 8010662:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010666:	f7ff fad5 	bl	800fc14 <vPortExitCritical>
				return pdPASS;
 801066a:	2001      	movs	r0, #1
}
 801066c:	b005      	add	sp, #20
 801066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010670:	4635      	mov	r5, r6
 8010672:	e7db      	b.n	801062c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010674:	9b01      	ldr	r3, [sp, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d0fa      	beq.n	8010670 <xQueueSemaphoreTake+0x80>
 801067a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801067e:	f383 8811 	msr	BASEPRI, r3
 8010682:	f3bf 8f6f 	isb	sy
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	e7fe      	b.n	801068a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801068c:	9b01      	ldr	r3, [sp, #4]
 801068e:	b953      	cbnz	r3, 80106a6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010690:	2d00      	cmp	r5, #0
 8010692:	d066      	beq.n	8010762 <xQueueSemaphoreTake+0x172>
 8010694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010698:	f383 8811 	msr	BASEPRI, r3
 801069c:	f3bf 8f6f 	isb	sy
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	e7fe      	b.n	80106a4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 80106a6:	b916      	cbnz	r6, 80106ae <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106a8:	a802      	add	r0, sp, #8
 80106aa:	f000 fd39 	bl	8011120 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80106ae:	f7ff fab1 	bl	800fc14 <vPortExitCritical>
		vTaskSuspendAll();
 80106b2:	f000 faf5 	bl	8010ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106b6:	f7ff fa8d 	bl	800fbd4 <vPortEnterCritical>
 80106ba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80106be:	2bff      	cmp	r3, #255	@ 0xff
 80106c0:	d101      	bne.n	80106c6 <xQueueSemaphoreTake+0xd6>
 80106c2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80106c6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80106ca:	2bff      	cmp	r3, #255	@ 0xff
 80106cc:	d101      	bne.n	80106d2 <xQueueSemaphoreTake+0xe2>
 80106ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80106d2:	f7ff fa9f 	bl	800fc14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106d6:	a901      	add	r1, sp, #4
 80106d8:	a802      	add	r0, sp, #8
 80106da:	f000 fd2d 	bl	8011138 <xTaskCheckForTimeOut>
 80106de:	bb50      	cbnz	r0, 8010736 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106e0:	4620      	mov	r0, r4
 80106e2:	f7ff fbb7 	bl	800fe54 <prvIsQueueEmpty>
 80106e6:	b300      	cbz	r0, 801072a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	b93b      	cbnz	r3, 80106fc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 80106ec:	f7ff fa72 	bl	800fbd4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106f0:	68a0      	ldr	r0, [r4, #8]
 80106f2:	f000 fd79 	bl	80111e8 <xTaskPriorityInherit>
 80106f6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80106f8:	f7ff fa8c 	bl	800fc14 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106fc:	9901      	ldr	r1, [sp, #4]
 80106fe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010702:	f000 fc93 	bl	801102c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010706:	4620      	mov	r0, r4
 8010708:	f7ff fbf7 	bl	800fefa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801070c:	f000 fb6c 	bl	8010de8 <xTaskResumeAll>
 8010710:	b948      	cbnz	r0, 8010726 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8010712:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801071a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	2601      	movs	r6, #1
 8010728:	e781      	b.n	801062e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 801072a:	4620      	mov	r0, r4
 801072c:	f7ff fbe5 	bl	800fefa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010730:	f000 fb5a 	bl	8010de8 <xTaskResumeAll>
 8010734:	e7f7      	b.n	8010726 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8010736:	4620      	mov	r0, r4
 8010738:	f7ff fbdf 	bl	800fefa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801073c:	f000 fb54 	bl	8010de8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010740:	4620      	mov	r0, r4
 8010742:	f7ff fb87 	bl	800fe54 <prvIsQueueEmpty>
 8010746:	2800      	cmp	r0, #0
 8010748:	d0ed      	beq.n	8010726 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 801074a:	b165      	cbz	r5, 8010766 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 801074c:	f7ff fa42 	bl	800fbd4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010750:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010752:	b119      	cbz	r1, 801075c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010754:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010756:	6819      	ldr	r1, [r3, #0]
 8010758:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801075c:	68a0      	ldr	r0, [r4, #8]
 801075e:	f000 fdc3 	bl	80112e8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010762:	f7ff fa57 	bl	800fc14 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010766:	2000      	movs	r0, #0
 8010768:	e780      	b.n	801066c <xQueueSemaphoreTake+0x7c>

0801076a <xQueueTakeMutexRecursive>:
	{
 801076a:	b570      	push	{r4, r5, r6, lr}
 801076c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 801076e:	4604      	mov	r4, r0
 8010770:	b940      	cbnz	r0, 8010784 <xQueueTakeMutexRecursive+0x1a>
 8010772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010776:	f383 8811 	msr	BASEPRI, r3
 801077a:	f3bf 8f6f 	isb	sy
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	e7fe      	b.n	8010782 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010784:	6886      	ldr	r6, [r0, #8]
 8010786:	f000 fd19 	bl	80111bc <xTaskGetCurrentTaskHandle>
 801078a:	4286      	cmp	r6, r0
 801078c:	d104      	bne.n	8010798 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801078e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8010790:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010792:	3301      	adds	r3, #1
 8010794:	60e3      	str	r3, [r4, #12]
	}
 8010796:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010798:	4629      	mov	r1, r5
 801079a:	4620      	mov	r0, r4
 801079c:	f7ff ff28 	bl	80105f0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d0f8      	beq.n	8010796 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80107a4:	68e3      	ldr	r3, [r4, #12]
 80107a6:	3301      	adds	r3, #1
 80107a8:	60e3      	str	r3, [r4, #12]
 80107aa:	e7f4      	b.n	8010796 <xQueueTakeMutexRecursive+0x2c>

080107ac <xQueueReceiveFromISR>:
{
 80107ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107b0:	4689      	mov	r9, r1
 80107b2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80107b4:	4604      	mov	r4, r0
 80107b6:	b940      	cbnz	r0, 80107ca <xQueueReceiveFromISR+0x1e>
 80107b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	e7fe      	b.n	80107c8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107ca:	b951      	cbnz	r1, 80107e2 <xQueueReceiveFromISR+0x36>
 80107cc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80107ce:	b143      	cbz	r3, 80107e2 <xQueueReceiveFromISR+0x36>
 80107d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107d4:	f383 8811 	msr	BASEPRI, r3
 80107d8:	f3bf 8f6f 	isb	sy
 80107dc:	f3bf 8f4f 	dsb	sy
 80107e0:	e7fe      	b.n	80107e0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107e2:	f7ff fb09 	bl	800fdf8 <vPortValidateInterruptPriority>
	__asm volatile
 80107e6:	f3ef 8711 	mrs	r7, BASEPRI
 80107ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107fa:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107fc:	b30d      	cbz	r5, 8010842 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80107fe:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010802:	4649      	mov	r1, r9
 8010804:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010806:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8010808:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801080a:	f7ff fb61 	bl	800fed0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801080e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8010810:	1c73      	adds	r3, r6, #1
 8010812:	d111      	bne.n	8010838 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010814:	6923      	ldr	r3, [r4, #16]
 8010816:	b153      	cbz	r3, 801082e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010818:	f104 0010 	add.w	r0, r4, #16
 801081c:	f000 fc3e 	bl	801109c <xTaskRemoveFromEventList>
 8010820:	b128      	cbz	r0, 801082e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8010822:	f1b8 0f00 	cmp.w	r8, #0
 8010826:	d002      	beq.n	801082e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010828:	2301      	movs	r3, #1
 801082a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 801082e:	2001      	movs	r0, #1
	__asm volatile
 8010830:	f387 8811 	msr	BASEPRI, r7
}
 8010834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010838:	3601      	adds	r6, #1
 801083a:	b276      	sxtb	r6, r6
 801083c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8010840:	e7f5      	b.n	801082e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8010842:	4628      	mov	r0, r5
 8010844:	e7f4      	b.n	8010830 <xQueueReceiveFromISR+0x84>
	...

08010848 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010848:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801084a:	4a07      	ldr	r2, [pc, #28]	@ (8010868 <vQueueAddToRegistry+0x20>)
	{
 801084c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801084e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010852:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8010856:	b91d      	cbnz	r5, 8010860 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010858:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801085c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801085e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010860:	3301      	adds	r3, #1
 8010862:	2b08      	cmp	r3, #8
 8010864:	d1f3      	bne.n	801084e <vQueueAddToRegistry+0x6>
 8010866:	e7fa      	b.n	801085e <vQueueAddToRegistry+0x16>
 8010868:	24027e74 	.word	0x24027e74

0801086c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801086c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801086e:	4a09      	ldr	r2, [pc, #36]	@ (8010894 <vQueueUnregisterQueue+0x28>)
	{
 8010870:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010872:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010876:	00dc      	lsls	r4, r3, #3
 8010878:	4281      	cmp	r1, r0
 801087a:	d106      	bne.n	801088a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801087c:	4a06      	ldr	r2, [pc, #24]	@ (8010898 <vQueueUnregisterQueue+0x2c>)
 801087e:	2100      	movs	r1, #0
 8010880:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010884:	4422      	add	r2, r4
 8010886:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010888:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801088a:	3301      	adds	r3, #1
 801088c:	2b08      	cmp	r3, #8
 801088e:	d1f0      	bne.n	8010872 <vQueueUnregisterQueue+0x6>
 8010890:	e7fa      	b.n	8010888 <vQueueUnregisterQueue+0x1c>
 8010892:	bf00      	nop
 8010894:	24027e78 	.word	0x24027e78
 8010898:	24027e74 	.word	0x24027e74

0801089c <vQueueDelete>:
{
 801089c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 801089e:	b940      	cbnz	r0, 80108b2 <vQueueDelete+0x16>
	__asm volatile
 80108a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a4:	f383 8811 	msr	BASEPRI, r3
 80108a8:	f3bf 8f6f 	isb	sy
 80108ac:	f3bf 8f4f 	dsb	sy
 80108b0:	e7fe      	b.n	80108b0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80108b2:	f7ff ffdb 	bl	801086c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80108b6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80108ba:	b91b      	cbnz	r3, 80108c4 <vQueueDelete+0x28>
}
 80108bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80108c0:	f7ff b8a4 	b.w	800fa0c <vPortFree>
}
 80108c4:	bd10      	pop	{r4, pc}

080108c6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80108c6:	b570      	push	{r4, r5, r6, lr}
 80108c8:	4604      	mov	r4, r0
 80108ca:	460d      	mov	r5, r1
 80108cc:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80108ce:	f7ff f981 	bl	800fbd4 <vPortEnterCritical>
 80108d2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80108d6:	2bff      	cmp	r3, #255	@ 0xff
 80108d8:	d102      	bne.n	80108e0 <vQueueWaitForMessageRestricted+0x1a>
 80108da:	2300      	movs	r3, #0
 80108dc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80108e0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80108e4:	2bff      	cmp	r3, #255	@ 0xff
 80108e6:	d102      	bne.n	80108ee <vQueueWaitForMessageRestricted+0x28>
 80108e8:	2300      	movs	r3, #0
 80108ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80108ee:	f7ff f991 	bl	800fc14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80108f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80108f4:	b92b      	cbnz	r3, 8010902 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80108f6:	4632      	mov	r2, r6
 80108f8:	4629      	mov	r1, r5
 80108fa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80108fe:	f000 fbaf 	bl	8011060 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010902:	4620      	mov	r0, r4
	}
 8010904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010908:	f7ff baf7 	b.w	800fefa <prvUnlockQueue>

0801090c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801090c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010910:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010912:	f7ff f95f 	bl	800fbd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010916:	4b2f      	ldr	r3, [pc, #188]	@ (80109d4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8010918:	4e2f      	ldr	r6, [pc, #188]	@ (80109d8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	4f2f      	ldr	r7, [pc, #188]	@ (80109dc <prvAddNewTaskToReadyList+0xd0>)
 801091e:	3201      	adds	r2, #1
 8010920:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8010922:	6835      	ldr	r5, [r6, #0]
 8010924:	2d00      	cmp	r5, #0
 8010926:	d14a      	bne.n	80109be <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010928:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b01      	cmp	r3, #1
 801092e:	d11f      	bne.n	8010970 <prvAddNewTaskToReadyList+0x64>
 8010930:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010932:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010934:	4640      	mov	r0, r8
 8010936:	f7ff f8a7 	bl	800fa88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801093a:	f108 0814 	add.w	r8, r8, #20
 801093e:	2d38      	cmp	r5, #56	@ 0x38
 8010940:	d1f7      	bne.n	8010932 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010942:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8010a04 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8010946:	4d26      	ldr	r5, [pc, #152]	@ (80109e0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8010948:	4640      	mov	r0, r8
 801094a:	f7ff f89d 	bl	800fa88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801094e:	4628      	mov	r0, r5
 8010950:	f7ff f89a 	bl	800fa88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010954:	4823      	ldr	r0, [pc, #140]	@ (80109e4 <prvAddNewTaskToReadyList+0xd8>)
 8010956:	f7ff f897 	bl	800fa88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801095a:	4823      	ldr	r0, [pc, #140]	@ (80109e8 <prvAddNewTaskToReadyList+0xdc>)
 801095c:	f7ff f894 	bl	800fa88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010960:	4822      	ldr	r0, [pc, #136]	@ (80109ec <prvAddNewTaskToReadyList+0xe0>)
 8010962:	f7ff f891 	bl	800fa88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010966:	4b22      	ldr	r3, [pc, #136]	@ (80109f0 <prvAddNewTaskToReadyList+0xe4>)
 8010968:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801096c:	4b21      	ldr	r3, [pc, #132]	@ (80109f4 <prvAddNewTaskToReadyList+0xe8>)
 801096e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8010970:	4a21      	ldr	r2, [pc, #132]	@ (80109f8 <prvAddNewTaskToReadyList+0xec>)
 8010972:	6813      	ldr	r3, [r2, #0]
 8010974:	3301      	adds	r3, #1
 8010976:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8010978:	4a20      	ldr	r2, [pc, #128]	@ (80109fc <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801097a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 801097c:	6811      	ldr	r1, [r2, #0]
 801097e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010980:	428b      	cmp	r3, r1
 8010982:	d900      	bls.n	8010986 <prvAddNewTaskToReadyList+0x7a>
 8010984:	6013      	str	r3, [r2, #0]
 8010986:	2014      	movs	r0, #20
 8010988:	1d21      	adds	r1, r4, #4
 801098a:	fb00 7003 	mla	r0, r0, r3, r7
 801098e:	f7ff f889 	bl	800faa4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010992:	f7ff f93f 	bl	800fc14 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010996:	4b1a      	ldr	r3, [pc, #104]	@ (8010a00 <prvAddNewTaskToReadyList+0xf4>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	b173      	cbz	r3, 80109ba <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801099c:	6833      	ldr	r3, [r6, #0]
 801099e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109a0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d209      	bcs.n	80109ba <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80109a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80109aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	f3bf 8f6f 	isb	sy
}
 80109ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80109be:	4b10      	ldr	r3, [pc, #64]	@ (8010a00 <prvAddNewTaskToReadyList+0xf4>)
 80109c0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80109c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80109c4:	2a00      	cmp	r2, #0
 80109c6:	d1d3      	bne.n	8010970 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80109c8:	6832      	ldr	r2, [r6, #0]
 80109ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d8cf      	bhi.n	8010970 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80109d0:	6034      	str	r4, [r6, #0]
 80109d2:	e7cd      	b.n	8010970 <prvAddNewTaskToReadyList+0x64>
 80109d4:	24027ed8 	.word	0x24027ed8
 80109d8:	240283ac 	.word	0x240283ac
 80109dc:	24027f4c 	.word	0x24027f4c
 80109e0:	24027f24 	.word	0x24027f24
 80109e4:	24027f08 	.word	0x24027f08
 80109e8:	24027ef4 	.word	0x24027ef4
 80109ec:	24027edc 	.word	0x24027edc
 80109f0:	24027f20 	.word	0x24027f20
 80109f4:	24027f1c 	.word	0x24027f1c
 80109f8:	24027ebc 	.word	0x24027ebc
 80109fc:	24027ed0 	.word	0x24027ed0
 8010a00:	24027ecc 	.word	0x24027ecc
 8010a04:	24027f38 	.word	0x24027f38

08010a08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a0a:	4b15      	ldr	r3, [pc, #84]	@ (8010a60 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8010a0c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a0e:	4d15      	ldr	r5, [pc, #84]	@ (8010a64 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010a10:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8010a12:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a14:	6828      	ldr	r0, [r5, #0]
 8010a16:	3004      	adds	r0, #4
 8010a18:	f7ff f866 	bl	800fae8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a1c:	1c73      	adds	r3, r6, #1
 8010a1e:	d107      	bne.n	8010a30 <prvAddCurrentTaskToDelayedList+0x28>
 8010a20:	b137      	cbz	r7, 8010a30 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a22:	6829      	ldr	r1, [r5, #0]
 8010a24:	4810      	ldr	r0, [pc, #64]	@ (8010a68 <prvAddCurrentTaskToDelayedList+0x60>)
 8010a26:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a2c:	f7ff b83a 	b.w	800faa4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a30:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a32:	682b      	ldr	r3, [r5, #0]
 8010a34:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a36:	d307      	bcc.n	8010a48 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a38:	4b0c      	ldr	r3, [pc, #48]	@ (8010a6c <prvAddCurrentTaskToDelayedList+0x64>)
 8010a3a:	6818      	ldr	r0, [r3, #0]
 8010a3c:	6829      	ldr	r1, [r5, #0]
}
 8010a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a42:	3104      	adds	r1, #4
 8010a44:	f7ff b839 	b.w	800faba <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a48:	4b09      	ldr	r3, [pc, #36]	@ (8010a70 <prvAddCurrentTaskToDelayedList+0x68>)
 8010a4a:	6818      	ldr	r0, [r3, #0]
 8010a4c:	6829      	ldr	r1, [r5, #0]
 8010a4e:	3104      	adds	r1, #4
 8010a50:	f7ff f833 	bl	800faba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a54:	4b07      	ldr	r3, [pc, #28]	@ (8010a74 <prvAddCurrentTaskToDelayedList+0x6c>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	42a2      	cmp	r2, r4
 8010a5a:	d900      	bls.n	8010a5e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8010a5c:	601c      	str	r4, [r3, #0]
}
 8010a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a60:	24027ed4 	.word	0x24027ed4
 8010a64:	240283ac 	.word	0x240283ac
 8010a68:	24027edc 	.word	0x24027edc
 8010a6c:	24027f1c 	.word	0x24027f1c
 8010a70:	24027f20 	.word	0x24027f20
 8010a74:	24027eb8 	.word	0x24027eb8

08010a78 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a78:	4a06      	ldr	r2, [pc, #24]	@ (8010a94 <prvResetNextTaskUnblockTime+0x1c>)
 8010a7a:	6813      	ldr	r3, [r2, #0]
 8010a7c:	6819      	ldr	r1, [r3, #0]
 8010a7e:	4b06      	ldr	r3, [pc, #24]	@ (8010a98 <prvResetNextTaskUnblockTime+0x20>)
 8010a80:	b919      	cbnz	r1, 8010a8a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8010a82:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010a86:	601a      	str	r2, [r3, #0]
}
 8010a88:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a8a:	6812      	ldr	r2, [r2, #0]
 8010a8c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010a8e:	68d2      	ldr	r2, [r2, #12]
 8010a90:	6852      	ldr	r2, [r2, #4]
 8010a92:	e7f8      	b.n	8010a86 <prvResetNextTaskUnblockTime+0xe>
 8010a94:	24027f20 	.word	0x24027f20
 8010a98:	24027eb8 	.word	0x24027eb8

08010a9c <prvDeleteTCB>:
	{
 8010a9c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a9e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8010aa2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010aa4:	b93b      	cbnz	r3, 8010ab6 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8010aa6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010aa8:	f7fe ffb0 	bl	800fa0c <vPortFree>
				vPortFree( pxTCB );
 8010aac:	4620      	mov	r0, r4
	}
 8010aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8010ab2:	f7fe bfab 	b.w	800fa0c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d0f9      	beq.n	8010aae <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d008      	beq.n	8010ad0 <prvDeleteTCB+0x34>
 8010abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	e7fe      	b.n	8010ace <prvDeleteTCB+0x32>
	}
 8010ad0:	bd10      	pop	{r4, pc}
	...

08010ad4 <prvIdleTask>:
{
 8010ad4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010ad6:	4c14      	ldr	r4, [pc, #80]	@ (8010b28 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ad8:	4f14      	ldr	r7, [pc, #80]	@ (8010b2c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8010ada:	4d15      	ldr	r5, [pc, #84]	@ (8010b30 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010adc:	6823      	ldr	r3, [r4, #0]
 8010ade:	b983      	cbnz	r3, 8010b02 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010ae0:	4b14      	ldr	r3, [pc, #80]	@ (8010b34 <prvIdleTask+0x60>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d909      	bls.n	8010afc <prvIdleTask+0x28>
				taskYIELD();
 8010ae8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010af0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010af4:	f3bf 8f4f 	dsb	sy
 8010af8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8010afc:	f7ef fdfc 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010b00:	e7eb      	b.n	8010ada <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8010b02:	f7ff f867 	bl	800fbd4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b0a:	1d30      	adds	r0, r6, #4
 8010b0c:	f7fe ffec 	bl	800fae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	3b01      	subs	r3, #1
 8010b14:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010b1c:	f7ff f87a 	bl	800fc14 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010b20:	4630      	mov	r0, r6
 8010b22:	f7ff ffbb 	bl	8010a9c <prvDeleteTCB>
 8010b26:	e7d9      	b.n	8010adc <prvIdleTask+0x8>
 8010b28:	24027ef0 	.word	0x24027ef0
 8010b2c:	24027ef4 	.word	0x24027ef4
 8010b30:	24027ed8 	.word	0x24027ed8
 8010b34:	24027f4c 	.word	0x24027f4c

08010b38 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b3c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010b3e:	4607      	mov	r7, r0
 8010b40:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b42:	21a5      	movs	r1, #165	@ 0xa5
 8010b44:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010b46:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010b48:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010b4a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b4e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010b50:	f017 ffd2 	bl	8028af8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010b54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010b56:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010b58:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8010b5c:	b3b5      	cbz	r5, 8010bcc <prvInitialiseNewTask.constprop.0+0x94>
 8010b5e:	1e6b      	subs	r3, r5, #1
 8010b60:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8010b64:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010b66:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010b6a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8010b6e:	b109      	cbz	r1, 8010b74 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b70:	42ab      	cmp	r3, r5
 8010b72:	d1f8      	bne.n	8010b66 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010b74:	2300      	movs	r3, #0
 8010b76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010b7a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8010b7c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010b80:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010b82:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8010b84:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010b88:	bf28      	it	cs
 8010b8a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8010b8c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010b8e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b90:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010b94:	f7fe ff83 	bl	800fa9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010b98:	f104 0018 	add.w	r0, r4, #24
 8010b9c:	f7fe ff7f 	bl	800fa9e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8010ba0:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ba4:	4642      	mov	r2, r8
 8010ba6:	4639      	mov	r1, r7
 8010ba8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010baa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bac:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010bae:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8010bb0:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010bb4:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010bb8:	f7fe ffe4 	bl	800fb84 <pxPortInitialiseStack>
 8010bbc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010bbe:	f1b9 0f00 	cmp.w	r9, #0
 8010bc2:	d001      	beq.n	8010bc8 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010bc4:	f8c9 4000 	str.w	r4, [r9]
}
 8010bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010bcc:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8010bd0:	e7d3      	b.n	8010b7a <prvInitialiseNewTask.constprop.0+0x42>

08010bd2 <xTaskCreateStatic>:
	{
 8010bd2:	b570      	push	{r4, r5, r6, lr}
 8010bd4:	b086      	sub	sp, #24
 8010bd6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010bda:	b945      	cbnz	r5, 8010bee <xTaskCreateStatic+0x1c>
 8010bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be0:	f383 8811 	msr	BASEPRI, r3
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	f3bf 8f4f 	dsb	sy
 8010bec:	e7fe      	b.n	8010bec <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8010bee:	b944      	cbnz	r4, 8010c02 <xTaskCreateStatic+0x30>
 8010bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf4:	f383 8811 	msr	BASEPRI, r3
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	e7fe      	b.n	8010c00 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c02:	2660      	movs	r6, #96	@ 0x60
 8010c04:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c06:	9e05      	ldr	r6, [sp, #20]
 8010c08:	2e60      	cmp	r6, #96	@ 0x60
 8010c0a:	d008      	beq.n	8010c1e <xTaskCreateStatic+0x4c>
 8010c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	e7fe      	b.n	8010c1c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c1e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c20:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c22:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c24:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010c28:	ad04      	add	r5, sp, #16
 8010c2a:	9402      	str	r4, [sp, #8]
 8010c2c:	9501      	str	r5, [sp, #4]
 8010c2e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010c30:	9500      	str	r5, [sp, #0]
 8010c32:	f7ff ff81 	bl	8010b38 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c36:	4620      	mov	r0, r4
 8010c38:	f7ff fe68 	bl	801090c <prvAddNewTaskToReadyList>
	}
 8010c3c:	9804      	ldr	r0, [sp, #16]
 8010c3e:	b006      	add	sp, #24
 8010c40:	bd70      	pop	{r4, r5, r6, pc}

08010c42 <xTaskCreate>:
	{
 8010c42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c46:	4607      	mov	r7, r0
 8010c48:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010c4a:	0090      	lsls	r0, r2, #2
	{
 8010c4c:	4688      	mov	r8, r1
 8010c4e:	4616      	mov	r6, r2
 8010c50:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010c52:	f7fe fe43 	bl	800f8dc <pvPortMalloc>
			if( pxStack != NULL )
 8010c56:	4605      	mov	r5, r0
 8010c58:	b920      	cbnz	r0, 8010c64 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010c5a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010c5e:	b005      	add	sp, #20
 8010c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010c64:	2060      	movs	r0, #96	@ 0x60
 8010c66:	f7fe fe39 	bl	800f8dc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	b198      	cbz	r0, 8010c96 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010c6e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8010c70:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010c72:	4632      	mov	r2, r6
 8010c74:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010c76:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c7c:	9002      	str	r0, [sp, #8]
 8010c7e:	4638      	mov	r0, r7
 8010c80:	9301      	str	r3, [sp, #4]
 8010c82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c84:	9300      	str	r3, [sp, #0]
 8010c86:	464b      	mov	r3, r9
 8010c88:	f7ff ff56 	bl	8010b38 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f7ff fe3d 	bl	801090c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010c92:	2001      	movs	r0, #1
 8010c94:	e7e3      	b.n	8010c5e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8010c96:	4628      	mov	r0, r5
 8010c98:	f7fe feb8 	bl	800fa0c <vPortFree>
		if( pxNewTCB != NULL )
 8010c9c:	e7dd      	b.n	8010c5a <xTaskCreate+0x18>
	...

08010ca0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010ca0:	4a02      	ldr	r2, [pc, #8]	@ (8010cac <vTaskSuspendAll+0xc>)
 8010ca2:	6813      	ldr	r3, [r2, #0]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	6013      	str	r3, [r2, #0]
}
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	24027eb4 	.word	0x24027eb4

08010cb0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010cb0:	4b01      	ldr	r3, [pc, #4]	@ (8010cb8 <xTaskGetTickCount+0x8>)
 8010cb2:	6818      	ldr	r0, [r3, #0]
}
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	24027ed4 	.word	0x24027ed4

08010cbc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8010dbc <xTaskIncrementTick+0x100>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
{
 8010cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d172      	bne.n	8010dae <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8010dc0 <xTaskIncrementTick+0x104>)
 8010cca:	681c      	ldr	r4, [r3, #0]
 8010ccc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8010cce:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010cd0:	b9bc      	cbnz	r4, 8010d02 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8010cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8010dc4 <xTaskIncrementTick+0x108>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	6812      	ldr	r2, [r2, #0]
 8010cd8:	b142      	cbz	r2, 8010cec <xTaskIncrementTick+0x30>
 8010cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	e7fe      	b.n	8010cea <xTaskIncrementTick+0x2e>
 8010cec:	4a36      	ldr	r2, [pc, #216]	@ (8010dc8 <xTaskIncrementTick+0x10c>)
 8010cee:	6819      	ldr	r1, [r3, #0]
 8010cf0:	6810      	ldr	r0, [r2, #0]
 8010cf2:	6018      	str	r0, [r3, #0]
 8010cf4:	6011      	str	r1, [r2, #0]
 8010cf6:	4a35      	ldr	r2, [pc, #212]	@ (8010dcc <xTaskIncrementTick+0x110>)
 8010cf8:	6813      	ldr	r3, [r2, #0]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	6013      	str	r3, [r2, #0]
 8010cfe:	f7ff febb 	bl	8010a78 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d02:	4d33      	ldr	r5, [pc, #204]	@ (8010dd0 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8010d04:	f04f 0b00 	mov.w	fp, #0
 8010d08:	4e32      	ldr	r6, [pc, #200]	@ (8010dd4 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d0a:	682b      	ldr	r3, [r5, #0]
 8010d0c:	4f32      	ldr	r7, [pc, #200]	@ (8010dd8 <xTaskIncrementTick+0x11c>)
 8010d0e:	429c      	cmp	r4, r3
 8010d10:	d212      	bcs.n	8010d38 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010d12:	683a      	ldr	r2, [r7, #0]
 8010d14:	2114      	movs	r1, #20
 8010d16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010d18:	434a      	muls	r2, r1
 8010d1a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8010d1c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8010d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8010ddc <xTaskIncrementTick+0x120>)
 8010d20:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8010d22:	bf28      	it	cs
 8010d24:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8010d28:	2a00      	cmp	r2, #0
 8010d2a:	bf18      	it	ne
 8010d2c:	f04f 0b01 	movne.w	fp, #1
}
 8010d30:	4658      	mov	r0, fp
 8010d32:	b003      	add	sp, #12
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d38:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8010dc4 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8010d3c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8010de4 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d40:	f8d9 2000 	ldr.w	r2, [r9]
 8010d44:	6812      	ldr	r2, [r2, #0]
 8010d46:	b91a      	cbnz	r2, 8010d50 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d48:	f04f 32ff 	mov.w	r2, #4294967295
 8010d4c:	602a      	str	r2, [r5, #0]
					break;
 8010d4e:	e7e0      	b.n	8010d12 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d50:	f8d9 2000 	ldr.w	r2, [r9]
 8010d54:	68d2      	ldr	r2, [r2, #12]
 8010d56:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8010d5e:	428c      	cmp	r4, r1
 8010d60:	d201      	bcs.n	8010d66 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8010d62:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010d64:	e7d5      	b.n	8010d12 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d66:	f108 0304 	add.w	r3, r8, #4
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	9301      	str	r3, [sp, #4]
 8010d6e:	f7fe febb 	bl	800fae8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010d72:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8010d76:	b119      	cbz	r1, 8010d80 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d78:	f108 0018 	add.w	r0, r8, #24
 8010d7c:	f7fe feb4 	bl	800fae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d80:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8010d84:	f8da 1000 	ldr.w	r1, [sl]
 8010d88:	4288      	cmp	r0, r1
 8010d8a:	d901      	bls.n	8010d90 <xTaskIncrementTick+0xd4>
 8010d8c:	f8ca 0000 	str.w	r0, [sl]
 8010d90:	2314      	movs	r3, #20
 8010d92:	9901      	ldr	r1, [sp, #4]
 8010d94:	fb03 6000 	mla	r0, r3, r0, r6
 8010d98:	f7fe fe84 	bl	800faa4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d9c:	6838      	ldr	r0, [r7, #0]
 8010d9e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8010da2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8010da4:	4291      	cmp	r1, r2
 8010da6:	bf28      	it	cs
 8010da8:	f04f 0b01 	movcs.w	fp, #1
 8010dac:	e7c8      	b.n	8010d40 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8010dae:	4a0c      	ldr	r2, [pc, #48]	@ (8010de0 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8010db0:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 8010db4:	6813      	ldr	r3, [r2, #0]
 8010db6:	3301      	adds	r3, #1
 8010db8:	6013      	str	r3, [r2, #0]
 8010dba:	e7b9      	b.n	8010d30 <xTaskIncrementTick+0x74>
 8010dbc:	24027eb4 	.word	0x24027eb4
 8010dc0:	24027ed4 	.word	0x24027ed4
 8010dc4:	24027f20 	.word	0x24027f20
 8010dc8:	24027f1c 	.word	0x24027f1c
 8010dcc:	24027ec0 	.word	0x24027ec0
 8010dd0:	24027eb8 	.word	0x24027eb8
 8010dd4:	24027f4c 	.word	0x24027f4c
 8010dd8:	240283ac 	.word	0x240283ac
 8010ddc:	24027ec4 	.word	0x24027ec4
 8010de0:	24027ec8 	.word	0x24027ec8
 8010de4:	24027ed0 	.word	0x24027ed0

08010de8 <xTaskResumeAll>:
{
 8010de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8010dec:	4c30      	ldr	r4, [pc, #192]	@ (8010eb0 <xTaskResumeAll+0xc8>)
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	b943      	cbnz	r3, 8010e04 <xTaskResumeAll+0x1c>
 8010df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df6:	f383 8811 	msr	BASEPRI, r3
 8010dfa:	f3bf 8f6f 	isb	sy
 8010dfe:	f3bf 8f4f 	dsb	sy
 8010e02:	e7fe      	b.n	8010e02 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8010e04:	f7fe fee6 	bl	800fbd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e0e:	6824      	ldr	r4, [r4, #0]
 8010e10:	b12c      	cbz	r4, 8010e1e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8010e12:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010e14:	f7fe fefe 	bl	800fc14 <vPortExitCritical>
}
 8010e18:	4620      	mov	r0, r4
 8010e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010e1e:	4b25      	ldr	r3, [pc, #148]	@ (8010eb4 <xTaskResumeAll+0xcc>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d0f5      	beq.n	8010e12 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e26:	4d24      	ldr	r5, [pc, #144]	@ (8010eb8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8010e28:	4e24      	ldr	r6, [pc, #144]	@ (8010ebc <xTaskResumeAll+0xd4>)
 8010e2a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8010ecc <xTaskResumeAll+0xe4>
 8010e2e:	e01d      	b.n	8010e6c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e30:	68eb      	ldr	r3, [r5, #12]
 8010e32:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e34:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e36:	f104 0018 	add.w	r0, r4, #24
 8010e3a:	f7fe fe55 	bl	800fae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f7fe fe52 	bl	800fae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010e44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010e46:	6832      	ldr	r2, [r6, #0]
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d900      	bls.n	8010e4e <xTaskResumeAll+0x66>
 8010e4c:	6033      	str	r3, [r6, #0]
 8010e4e:	2014      	movs	r0, #20
 8010e50:	4639      	mov	r1, r7
 8010e52:	fb00 8003 	mla	r0, r0, r3, r8
 8010e56:	f7fe fe25 	bl	800faa4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e5a:	4b19      	ldr	r3, [pc, #100]	@ (8010ec0 <xTaskResumeAll+0xd8>)
 8010e5c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d302      	bcc.n	8010e6c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8010e66:	4b17      	ldr	r3, [pc, #92]	@ (8010ec4 <xTaskResumeAll+0xdc>)
 8010e68:	2201      	movs	r2, #1
 8010e6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e6c:	682b      	ldr	r3, [r5, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1de      	bne.n	8010e30 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8010e72:	b10c      	cbz	r4, 8010e78 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8010e74:	f7ff fe00 	bl	8010a78 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010e78:	4d13      	ldr	r5, [pc, #76]	@ (8010ec8 <xTaskResumeAll+0xe0>)
 8010e7a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8010e7c:	b144      	cbz	r4, 8010e90 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8010e7e:	4e11      	ldr	r6, [pc, #68]	@ (8010ec4 <xTaskResumeAll+0xdc>)
 8010e80:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8010e82:	f7ff ff1b 	bl	8010cbc <xTaskIncrementTick>
 8010e86:	b100      	cbz	r0, 8010e8a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8010e88:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010e8a:	3c01      	subs	r4, #1
 8010e8c:	d1f9      	bne.n	8010e82 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8010e8e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8010e90:	4b0c      	ldr	r3, [pc, #48]	@ (8010ec4 <xTaskResumeAll+0xdc>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d0bc      	beq.n	8010e12 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8010e98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ea0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8010eac:	2401      	movs	r4, #1
 8010eae:	e7b1      	b.n	8010e14 <xTaskResumeAll+0x2c>
 8010eb0:	24027eb4 	.word	0x24027eb4
 8010eb4:	24027ed8 	.word	0x24027ed8
 8010eb8:	24027f08 	.word	0x24027f08
 8010ebc:	24027ed0 	.word	0x24027ed0
 8010ec0:	240283ac 	.word	0x240283ac
 8010ec4:	24027ec4 	.word	0x24027ec4
 8010ec8:	24027ec8 	.word	0x24027ec8
 8010ecc:	24027f4c 	.word	0x24027f4c

08010ed0 <vTaskSetApplicationTaskTag>:
	{
 8010ed0:	b538      	push	{r3, r4, r5, lr}
 8010ed2:	460d      	mov	r5, r1
		if( xTask == NULL )
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	b908      	cbnz	r0, 8010edc <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8010ed8:	4b04      	ldr	r3, [pc, #16]	@ (8010eec <vTaskSetApplicationTaskTag+0x1c>)
 8010eda:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8010edc:	f7fe fe7a 	bl	800fbd4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8010ee0:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 8010ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8010ee6:	f7fe be95 	b.w	800fc14 <vPortExitCritical>
 8010eea:	bf00      	nop
 8010eec:	240283ac 	.word	0x240283ac

08010ef0 <xTaskCallApplicationTaskHook>:
	{
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	4608      	mov	r0, r1
		if( xTask == NULL )
 8010ef4:	b90b      	cbnz	r3, 8010efa <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8010ef6:	4b03      	ldr	r3, [pc, #12]	@ (8010f04 <xTaskCallApplicationTaskHook+0x14>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8010efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010efc:	b103      	cbz	r3, 8010f00 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8010efe:	4718      	bx	r3
	}
 8010f00:	4618      	mov	r0, r3
 8010f02:	4770      	bx	lr
 8010f04:	240283ac 	.word	0x240283ac

08010f08 <vTaskStartScheduler>:
{
 8010f08:	b510      	push	{r4, lr}
 8010f0a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010f0c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010f0e:	aa07      	add	r2, sp, #28
 8010f10:	a906      	add	r1, sp, #24
 8010f12:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010f14:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010f18:	f7fe fca2 	bl	800f860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010f1c:	9b05      	ldr	r3, [sp, #20]
 8010f1e:	9a07      	ldr	r2, [sp, #28]
 8010f20:	9302      	str	r3, [sp, #8]
 8010f22:	9b06      	ldr	r3, [sp, #24]
 8010f24:	4919      	ldr	r1, [pc, #100]	@ (8010f8c <vTaskStartScheduler+0x84>)
 8010f26:	481a      	ldr	r0, [pc, #104]	@ (8010f90 <vTaskStartScheduler+0x88>)
 8010f28:	e9cd 4300 	strd	r4, r3, [sp]
 8010f2c:	4623      	mov	r3, r4
 8010f2e:	f7ff fe50 	bl	8010bd2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8010f32:	b340      	cbz	r0, 8010f86 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8010f34:	f000 fa84 	bl	8011440 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010f38:	2801      	cmp	r0, #1
 8010f3a:	d119      	bne.n	8010f70 <vTaskStartScheduler+0x68>
 8010f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f50:	4b10      	ldr	r3, [pc, #64]	@ (8010f94 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 8010f52:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010f56:	4b10      	ldr	r3, [pc, #64]	@ (8010f98 <vTaskStartScheduler+0x90>)
 8010f58:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010f5a:	4b10      	ldr	r3, [pc, #64]	@ (8010f9c <vTaskStartScheduler+0x94>)
 8010f5c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8010f5e:	4b10      	ldr	r3, [pc, #64]	@ (8010fa0 <vTaskStartScheduler+0x98>)
 8010f60:	6818      	ldr	r0, [r3, #0]
 8010f62:	f7ff ffc5 	bl	8010ef0 <xTaskCallApplicationTaskHook>
}
 8010f66:	b008      	add	sp, #32
 8010f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8010f6c:	f7fe bec2 	b.w	800fcf4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010f70:	3001      	adds	r0, #1
 8010f72:	d108      	bne.n	8010f86 <vTaskStartScheduler+0x7e>
 8010f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f78:	f383 8811 	msr	BASEPRI, r3
 8010f7c:	f3bf 8f6f 	isb	sy
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	e7fe      	b.n	8010f84 <vTaskStartScheduler+0x7c>
}
 8010f86:	b008      	add	sp, #32
 8010f88:	bd10      	pop	{r4, pc}
 8010f8a:	bf00      	nop
 8010f8c:	0802c784 	.word	0x0802c784
 8010f90:	08010ad5 	.word	0x08010ad5
 8010f94:	24027eb8 	.word	0x24027eb8
 8010f98:	24027ecc 	.word	0x24027ecc
 8010f9c:	24027ed4 	.word	0x24027ed4
 8010fa0:	240283ac 	.word	0x240283ac

08010fa4 <vTaskSwitchContext>:
{
 8010fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8011018 <vTaskSwitchContext+0x74>)
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	4b1c      	ldr	r3, [pc, #112]	@ (801101c <vTaskSwitchContext+0x78>)
 8010fac:	b112      	cbz	r2, 8010fb4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8010fae:	2201      	movs	r2, #1
 8010fb0:	601a      	str	r2, [r3, #0]
}
 8010fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8010fb4:	4c1a      	ldr	r4, [pc, #104]	@ (8011020 <vTaskSwitchContext+0x7c>)
 8010fb6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fb8:	4e1a      	ldr	r6, [pc, #104]	@ (8011024 <vTaskSwitchContext+0x80>)
 8010fba:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8010fbc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8010fbe:	6820      	ldr	r0, [r4, #0]
 8010fc0:	f7ff ff96 	bl	8010ef0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fc4:	6832      	ldr	r2, [r6, #0]
 8010fc6:	4918      	ldr	r1, [pc, #96]	@ (8011028 <vTaskSwitchContext+0x84>)
 8010fc8:	fb07 f302 	mul.w	r3, r7, r2
 8010fcc:	58cd      	ldr	r5, [r1, r3]
 8010fce:	18c8      	adds	r0, r1, r3
 8010fd0:	b1ad      	cbz	r5, 8010ffe <vTaskSwitchContext+0x5a>
 8010fd2:	6845      	ldr	r5, [r0, #4]
 8010fd4:	3308      	adds	r3, #8
 8010fd6:	686d      	ldr	r5, [r5, #4]
 8010fd8:	440b      	add	r3, r1
 8010fda:	429d      	cmp	r5, r3
 8010fdc:	6045      	str	r5, [r0, #4]
 8010fde:	bf04      	itt	eq
 8010fe0:	686b      	ldreq	r3, [r5, #4]
 8010fe2:	6043      	streq	r3, [r0, #4]
 8010fe4:	2314      	movs	r3, #20
 8010fe6:	fb03 1102 	mla	r1, r3, r2, r1
 8010fea:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8010fec:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8010ff4:	6820      	ldr	r0, [r4, #0]
}
 8010ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8010ffa:	f7ff bf79 	b.w	8010ef0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ffe:	b942      	cbnz	r2, 8011012 <vTaskSwitchContext+0x6e>
 8011000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011004:	f383 8811 	msr	BASEPRI, r3
 8011008:	f3bf 8f6f 	isb	sy
 801100c:	f3bf 8f4f 	dsb	sy
 8011010:	e7fe      	b.n	8011010 <vTaskSwitchContext+0x6c>
 8011012:	3a01      	subs	r2, #1
 8011014:	e7d8      	b.n	8010fc8 <vTaskSwitchContext+0x24>
 8011016:	bf00      	nop
 8011018:	24027eb4 	.word	0x24027eb4
 801101c:	24027ec4 	.word	0x24027ec4
 8011020:	240283ac 	.word	0x240283ac
 8011024:	24027ed0 	.word	0x24027ed0
 8011028:	24027f4c 	.word	0x24027f4c

0801102c <vTaskPlaceOnEventList>:
{
 801102c:	b510      	push	{r4, lr}
 801102e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8011030:	b940      	cbnz	r0, 8011044 <vTaskPlaceOnEventList+0x18>
 8011032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011036:	f383 8811 	msr	BASEPRI, r3
 801103a:	f3bf 8f6f 	isb	sy
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	e7fe      	b.n	8011042 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011044:	4b05      	ldr	r3, [pc, #20]	@ (801105c <vTaskPlaceOnEventList+0x30>)
 8011046:	6819      	ldr	r1, [r3, #0]
 8011048:	3118      	adds	r1, #24
 801104a:	f7fe fd36 	bl	800faba <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801104e:	4620      	mov	r0, r4
 8011050:	2101      	movs	r1, #1
}
 8011052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011056:	f7ff bcd7 	b.w	8010a08 <prvAddCurrentTaskToDelayedList>
 801105a:	bf00      	nop
 801105c:	240283ac 	.word	0x240283ac

08011060 <vTaskPlaceOnEventListRestricted>:
	{
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	460d      	mov	r5, r1
 8011064:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8011066:	b940      	cbnz	r0, 801107a <vTaskPlaceOnEventListRestricted+0x1a>
 8011068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	e7fe      	b.n	8011078 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801107a:	4b07      	ldr	r3, [pc, #28]	@ (8011098 <vTaskPlaceOnEventListRestricted+0x38>)
 801107c:	6819      	ldr	r1, [r3, #0]
 801107e:	3118      	adds	r1, #24
 8011080:	f7fe fd10 	bl	800faa4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8011084:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011086:	4621      	mov	r1, r4
 8011088:	bf0c      	ite	eq
 801108a:	4628      	moveq	r0, r5
 801108c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8011090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011094:	f7ff bcb8 	b.w	8010a08 <prvAddCurrentTaskToDelayedList>
 8011098:	240283ac 	.word	0x240283ac

0801109c <xTaskRemoveFromEventList>:
{
 801109c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801109e:	68c3      	ldr	r3, [r0, #12]
 80110a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80110a2:	b944      	cbnz	r4, 80110b6 <xTaskRemoveFromEventList+0x1a>
 80110a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	e7fe      	b.n	80110b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110b6:	f104 0518 	add.w	r5, r4, #24
 80110ba:	4628      	mov	r0, r5
 80110bc:	f7fe fd14 	bl	800fae8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110c0:	4b11      	ldr	r3, [pc, #68]	@ (8011108 <xTaskRemoveFromEventList+0x6c>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	b9d3      	cbnz	r3, 80110fc <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110c6:	1d25      	adds	r5, r4, #4
 80110c8:	4628      	mov	r0, r5
 80110ca:	f7fe fd0d 	bl	800fae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80110ce:	4a0f      	ldr	r2, [pc, #60]	@ (801110c <xTaskRemoveFromEventList+0x70>)
 80110d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80110d2:	6811      	ldr	r1, [r2, #0]
 80110d4:	428b      	cmp	r3, r1
 80110d6:	d900      	bls.n	80110da <xTaskRemoveFromEventList+0x3e>
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	2014      	movs	r0, #20
 80110dc:	4a0c      	ldr	r2, [pc, #48]	@ (8011110 <xTaskRemoveFromEventList+0x74>)
 80110de:	4629      	mov	r1, r5
 80110e0:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80110e4:	f7fe fcde 	bl	800faa4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80110e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011114 <xTaskRemoveFromEventList+0x78>)
 80110ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d906      	bls.n	8011102 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 80110f4:	2001      	movs	r0, #1
 80110f6:	4b08      	ldr	r3, [pc, #32]	@ (8011118 <xTaskRemoveFromEventList+0x7c>)
 80110f8:	6018      	str	r0, [r3, #0]
}
 80110fa:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80110fc:	4629      	mov	r1, r5
 80110fe:	4807      	ldr	r0, [pc, #28]	@ (801111c <xTaskRemoveFromEventList+0x80>)
 8011100:	e7f0      	b.n	80110e4 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 8011102:	2000      	movs	r0, #0
	return xReturn;
 8011104:	e7f9      	b.n	80110fa <xTaskRemoveFromEventList+0x5e>
 8011106:	bf00      	nop
 8011108:	24027eb4 	.word	0x24027eb4
 801110c:	24027ed0 	.word	0x24027ed0
 8011110:	24027f4c 	.word	0x24027f4c
 8011114:	240283ac 	.word	0x240283ac
 8011118:	24027ec4 	.word	0x24027ec4
 801111c:	24027f08 	.word	0x24027f08

08011120 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011120:	4b03      	ldr	r3, [pc, #12]	@ (8011130 <vTaskInternalSetTimeOutState+0x10>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011126:	4b03      	ldr	r3, [pc, #12]	@ (8011134 <vTaskInternalSetTimeOutState+0x14>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	6043      	str	r3, [r0, #4]
}
 801112c:	4770      	bx	lr
 801112e:	bf00      	nop
 8011130:	24027ec0 	.word	0x24027ec0
 8011134:	24027ed4 	.word	0x24027ed4

08011138 <xTaskCheckForTimeOut>:
{
 8011138:	b570      	push	{r4, r5, r6, lr}
 801113a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 801113c:	4605      	mov	r5, r0
 801113e:	b940      	cbnz	r0, 8011152 <xTaskCheckForTimeOut+0x1a>
 8011140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	e7fe      	b.n	8011150 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8011152:	b941      	cbnz	r1, 8011166 <xTaskCheckForTimeOut+0x2e>
 8011154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011158:	f383 8811 	msr	BASEPRI, r3
 801115c:	f3bf 8f6f 	isb	sy
 8011160:	f3bf 8f4f 	dsb	sy
 8011164:	e7fe      	b.n	8011164 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8011166:	f7fe fd35 	bl	800fbd4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801116a:	4b0f      	ldr	r3, [pc, #60]	@ (80111a8 <xTaskCheckForTimeOut+0x70>)
 801116c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	1c5a      	adds	r2, r3, #1
 8011172:	d010      	beq.n	8011196 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011174:	480d      	ldr	r0, [pc, #52]	@ (80111ac <xTaskCheckForTimeOut+0x74>)
 8011176:	682e      	ldr	r6, [r5, #0]
 8011178:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801117a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801117c:	4286      	cmp	r6, r0
 801117e:	d001      	beq.n	8011184 <xTaskCheckForTimeOut+0x4c>
 8011180:	428a      	cmp	r2, r1
 8011182:	d90f      	bls.n	80111a4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011184:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011186:	4283      	cmp	r3, r0
 8011188:	d90a      	bls.n	80111a0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 801118a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 801118c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 801118e:	4413      	add	r3, r2
 8011190:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011192:	f7ff ffc5 	bl	8011120 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8011196:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011198:	f7fe fd3c 	bl	800fc14 <vPortExitCritical>
}
 801119c:	4620      	mov	r0, r4
 801119e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80111a4:	2401      	movs	r4, #1
 80111a6:	e7f7      	b.n	8011198 <xTaskCheckForTimeOut+0x60>
 80111a8:	24027ed4 	.word	0x24027ed4
 80111ac:	24027ec0 	.word	0x24027ec0

080111b0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80111b0:	4b01      	ldr	r3, [pc, #4]	@ (80111b8 <vTaskMissedYield+0x8>)
 80111b2:	2201      	movs	r2, #1
 80111b4:	601a      	str	r2, [r3, #0]
}
 80111b6:	4770      	bx	lr
 80111b8:	24027ec4 	.word	0x24027ec4

080111bc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80111bc:	4b01      	ldr	r3, [pc, #4]	@ (80111c4 <xTaskGetCurrentTaskHandle+0x8>)
 80111be:	6818      	ldr	r0, [r3, #0]
	}
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	240283ac 	.word	0x240283ac

080111c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80111c8:	4b05      	ldr	r3, [pc, #20]	@ (80111e0 <xTaskGetSchedulerState+0x18>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	b133      	cbz	r3, 80111dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111ce:	4b05      	ldr	r3, [pc, #20]	@ (80111e4 <xTaskGetSchedulerState+0x1c>)
 80111d0:	6818      	ldr	r0, [r3, #0]
 80111d2:	fab0 f080 	clz	r0, r0
 80111d6:	0940      	lsrs	r0, r0, #5
 80111d8:	0040      	lsls	r0, r0, #1
 80111da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80111dc:	2001      	movs	r0, #1
	}
 80111de:	4770      	bx	lr
 80111e0:	24027ecc 	.word	0x24027ecc
 80111e4:	24027eb4 	.word	0x24027eb4

080111e8 <xTaskPriorityInherit>:
	{
 80111e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80111ea:	4604      	mov	r4, r0
 80111ec:	b338      	cbz	r0, 801123e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80111ee:	4d1a      	ldr	r5, [pc, #104]	@ (8011258 <xTaskPriorityInherit+0x70>)
 80111f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80111f2:	682a      	ldr	r2, [r5, #0]
 80111f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d226      	bcs.n	8011248 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80111fa:	6982      	ldr	r2, [r0, #24]
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	db04      	blt.n	801120a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011200:	682a      	ldr	r2, [r5, #0]
 8011202:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011204:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8011208:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801120a:	2214      	movs	r2, #20
 801120c:	4e13      	ldr	r6, [pc, #76]	@ (801125c <xTaskPriorityInherit+0x74>)
 801120e:	fb02 6303 	mla	r3, r2, r3, r6
 8011212:	6962      	ldr	r2, [r4, #20]
 8011214:	429a      	cmp	r2, r3
 8011216:	d113      	bne.n	8011240 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011218:	1d27      	adds	r7, r4, #4
 801121a:	4638      	mov	r0, r7
 801121c:	f7fe fc64 	bl	800fae8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011220:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011222:	4a0f      	ldr	r2, [pc, #60]	@ (8011260 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011226:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011228:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801122a:	428b      	cmp	r3, r1
 801122c:	d900      	bls.n	8011230 <xTaskPriorityInherit+0x48>
 801122e:	6013      	str	r3, [r2, #0]
 8011230:	2014      	movs	r0, #20
 8011232:	4639      	mov	r1, r7
 8011234:	fb00 6003 	mla	r0, r0, r3, r6
 8011238:	f7fe fc34 	bl	800faa4 <vListInsertEnd>
				xReturn = pdTRUE;
 801123c:	2001      	movs	r0, #1
	}
 801123e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011246:	e7f9      	b.n	801123c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011248:	682b      	ldr	r3, [r5, #0]
 801124a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801124e:	4298      	cmp	r0, r3
 8011250:	bf2c      	ite	cs
 8011252:	2000      	movcs	r0, #0
 8011254:	2001      	movcc	r0, #1
 8011256:	e7f2      	b.n	801123e <xTaskPriorityInherit+0x56>
 8011258:	240283ac 	.word	0x240283ac
 801125c:	24027f4c 	.word	0x24027f4c
 8011260:	24027ed0 	.word	0x24027ed0

08011264 <xTaskPriorityDisinherit>:
	{
 8011264:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8011266:	b908      	cbnz	r0, 801126c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8011268:	2000      	movs	r0, #0
	}
 801126a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 801126c:	4b1b      	ldr	r3, [pc, #108]	@ (80112dc <xTaskPriorityDisinherit+0x78>)
 801126e:	681c      	ldr	r4, [r3, #0]
 8011270:	4284      	cmp	r4, r0
 8011272:	d008      	beq.n	8011286 <xTaskPriorityDisinherit+0x22>
 8011274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011278:	f383 8811 	msr	BASEPRI, r3
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	e7fe      	b.n	8011284 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8011286:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8011288:	b943      	cbnz	r3, 801129c <xTaskPriorityDisinherit+0x38>
 801128a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801128e:	f383 8811 	msr	BASEPRI, r3
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	f3bf 8f4f 	dsb	sy
 801129a:	e7fe      	b.n	801129a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801129c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 801129e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80112a0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80112a2:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80112a4:	4291      	cmp	r1, r2
 80112a6:	d0df      	beq.n	8011268 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1dd      	bne.n	8011268 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112ac:	1d25      	adds	r5, r4, #4
 80112ae:	4628      	mov	r0, r5
 80112b0:	f7fe fc1a 	bl	800fae8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80112b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80112ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112bc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80112be:	4a08      	ldr	r2, [pc, #32]	@ (80112e0 <xTaskPriorityDisinherit+0x7c>)
 80112c0:	6811      	ldr	r1, [r2, #0]
 80112c2:	428b      	cmp	r3, r1
 80112c4:	d900      	bls.n	80112c8 <xTaskPriorityDisinherit+0x64>
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	4a06      	ldr	r2, [pc, #24]	@ (80112e4 <xTaskPriorityDisinherit+0x80>)
 80112ca:	2014      	movs	r0, #20
 80112cc:	4629      	mov	r1, r5
 80112ce:	fb00 2003 	mla	r0, r0, r3, r2
 80112d2:	f7fe fbe7 	bl	800faa4 <vListInsertEnd>
					xReturn = pdTRUE;
 80112d6:	2001      	movs	r0, #1
		return xReturn;
 80112d8:	e7c7      	b.n	801126a <xTaskPriorityDisinherit+0x6>
 80112da:	bf00      	nop
 80112dc:	240283ac 	.word	0x240283ac
 80112e0:	24027ed0 	.word	0x24027ed0
 80112e4:	24027f4c 	.word	0x24027f4c

080112e8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80112e8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80112ea:	4604      	mov	r4, r0
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d042      	beq.n	8011376 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 80112f0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80112f2:	b942      	cbnz	r2, 8011306 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80112f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112f8:	f383 8811 	msr	BASEPRI, r3
 80112fc:	f3bf 8f6f 	isb	sy
 8011300:	f3bf 8f4f 	dsb	sy
 8011304:	e7fe      	b.n	8011304 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011306:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011308:	4299      	cmp	r1, r3
 801130a:	bf38      	it	cc
 801130c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 801130e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011310:	428b      	cmp	r3, r1
 8011312:	d030      	beq.n	8011376 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011314:	2a01      	cmp	r2, #1
 8011316:	d12e      	bne.n	8011376 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 8011318:	4a17      	ldr	r2, [pc, #92]	@ (8011378 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 801131a:	6812      	ldr	r2, [r2, #0]
 801131c:	4282      	cmp	r2, r0
 801131e:	d108      	bne.n	8011332 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8011320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011324:	f383 8811 	msr	BASEPRI, r3
 8011328:	f3bf 8f6f 	isb	sy
 801132c:	f3bf 8f4f 	dsb	sy
 8011330:	e7fe      	b.n	8011330 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011332:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011334:	4d11      	ldr	r5, [pc, #68]	@ (801137c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011336:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011338:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 801133c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801133e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011342:	bfa8      	it	ge
 8011344:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011348:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801134a:	bfa8      	it	ge
 801134c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801134e:	429a      	cmp	r2, r3
 8011350:	d111      	bne.n	8011376 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011352:	1d06      	adds	r6, r0, #4
 8011354:	4630      	mov	r0, r6
 8011356:	f7fe fbc7 	bl	800fae8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801135a:	4a09      	ldr	r2, [pc, #36]	@ (8011380 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801135c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801135e:	6811      	ldr	r1, [r2, #0]
 8011360:	428b      	cmp	r3, r1
 8011362:	d900      	bls.n	8011366 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8011364:	6013      	str	r3, [r2, #0]
 8011366:	2014      	movs	r0, #20
 8011368:	4631      	mov	r1, r6
 801136a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 801136e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8011372:	f7fe bb97 	b.w	800faa4 <vListInsertEnd>
	}
 8011376:	bd70      	pop	{r4, r5, r6, pc}
 8011378:	240283ac 	.word	0x240283ac
 801137c:	24027f4c 	.word	0x24027f4c
 8011380:	24027ed0 	.word	0x24027ed0

08011384 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8011384:	4b04      	ldr	r3, [pc, #16]	@ (8011398 <pvTaskIncrementMutexHeldCount+0x14>)
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	b11a      	cbz	r2, 8011392 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801138a:	6819      	ldr	r1, [r3, #0]
 801138c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 801138e:	3201      	adds	r2, #1
 8011390:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8011392:	6818      	ldr	r0, [r3, #0]
	}
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop
 8011398:	240283ac 	.word	0x240283ac

0801139c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 801139c:	4291      	cmp	r1, r2
{
 801139e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80113a0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80113a2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80113a4:	d80a      	bhi.n	80113bc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113a6:	1ad2      	subs	r2, r2, r3
 80113a8:	6983      	ldr	r3, [r0, #24]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d20d      	bcs.n	80113ca <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80113ae:	1d01      	adds	r1, r0, #4
 80113b0:	4b07      	ldr	r3, [pc, #28]	@ (80113d0 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80113b2:	6818      	ldr	r0, [r3, #0]
 80113b4:	f7fe fb81 	bl	800faba <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80113b8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80113ba:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80113bc:	429a      	cmp	r2, r3
 80113be:	d201      	bcs.n	80113c4 <prvInsertTimerInActiveList+0x28>
 80113c0:	4299      	cmp	r1, r3
 80113c2:	d202      	bcs.n	80113ca <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80113c4:	1d01      	adds	r1, r0, #4
 80113c6:	4b03      	ldr	r3, [pc, #12]	@ (80113d4 <prvInsertTimerInActiveList+0x38>)
 80113c8:	e7f3      	b.n	80113b2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80113ca:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80113cc:	e7f5      	b.n	80113ba <prvInsertTimerInActiveList+0x1e>
 80113ce:	bf00      	nop
 80113d0:	240284ac 	.word	0x240284ac
 80113d4:	240284b0 	.word	0x240284b0

080113d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80113d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80113da:	4c11      	ldr	r4, [pc, #68]	@ (8011420 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80113dc:	f7fe fbfa 	bl	800fbd4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80113e0:	6825      	ldr	r5, [r4, #0]
 80113e2:	b9bd      	cbnz	r5, 8011414 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80113e4:	4f0f      	ldr	r7, [pc, #60]	@ (8011424 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80113e6:	4e10      	ldr	r6, [pc, #64]	@ (8011428 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80113e8:	4638      	mov	r0, r7
 80113ea:	f7fe fb4d 	bl	800fa88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80113ee:	4630      	mov	r0, r6
 80113f0:	f7fe fb4a 	bl	800fa88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80113f4:	4b0d      	ldr	r3, [pc, #52]	@ (801142c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80113f6:	4a0e      	ldr	r2, [pc, #56]	@ (8011430 <prvCheckForValidListAndQueue+0x58>)
 80113f8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80113fa:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80113fc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80113fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011434 <prvCheckForValidListAndQueue+0x5c>)
 8011400:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011402:	4b0d      	ldr	r3, [pc, #52]	@ (8011438 <prvCheckForValidListAndQueue+0x60>)
 8011404:	9500      	str	r5, [sp, #0]
 8011406:	f7fe fdef 	bl	800ffe8 <xQueueGenericCreateStatic>
 801140a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801140c:	b110      	cbz	r0, 8011414 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801140e:	490b      	ldr	r1, [pc, #44]	@ (801143c <prvCheckForValidListAndQueue+0x64>)
 8011410:	f7ff fa1a 	bl	8010848 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8011414:	b003      	add	sp, #12
 8011416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801141a:	f7fe bbfb 	b.w	800fc14 <vPortExitCritical>
 801141e:	bf00      	nop
 8011420:	240284a8 	.word	0x240284a8
 8011424:	240284c8 	.word	0x240284c8
 8011428:	240284b4 	.word	0x240284b4
 801142c:	240284b0 	.word	0x240284b0
 8011430:	24028400 	.word	0x24028400
 8011434:	240284ac 	.word	0x240284ac
 8011438:	240283b0 	.word	0x240283b0
 801143c:	0802c789 	.word	0x0802c789

08011440 <xTimerCreateTimerTask>:
{
 8011440:	b510      	push	{r4, lr}
 8011442:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8011444:	f7ff ffc8 	bl	80113d8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011448:	4b12      	ldr	r3, [pc, #72]	@ (8011494 <xTimerCreateTimerTask+0x54>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	b1b3      	cbz	r3, 801147c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801144e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011450:	aa07      	add	r2, sp, #28
 8011452:	a906      	add	r1, sp, #24
 8011454:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011456:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801145a:	f7fe fa0d 	bl	800f878 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801145e:	9b05      	ldr	r3, [sp, #20]
 8011460:	9a07      	ldr	r2, [sp, #28]
 8011462:	9302      	str	r3, [sp, #8]
 8011464:	9b06      	ldr	r3, [sp, #24]
 8011466:	490c      	ldr	r1, [pc, #48]	@ (8011498 <xTimerCreateTimerTask+0x58>)
 8011468:	9301      	str	r3, [sp, #4]
 801146a:	2302      	movs	r3, #2
 801146c:	480b      	ldr	r0, [pc, #44]	@ (801149c <xTimerCreateTimerTask+0x5c>)
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	4623      	mov	r3, r4
 8011472:	f7ff fbae 	bl	8010bd2 <xTaskCreateStatic>
 8011476:	4b0a      	ldr	r3, [pc, #40]	@ (80114a0 <xTimerCreateTimerTask+0x60>)
 8011478:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801147a:	b940      	cbnz	r0, 801148e <xTimerCreateTimerTask+0x4e>
 801147c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011480:	f383 8811 	msr	BASEPRI, r3
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801148c:	e7fe      	b.n	801148c <xTimerCreateTimerTask+0x4c>
}
 801148e:	2001      	movs	r0, #1
 8011490:	b008      	add	sp, #32
 8011492:	bd10      	pop	{r4, pc}
 8011494:	240284a8 	.word	0x240284a8
 8011498:	0802c78e 	.word	0x0802c78e
 801149c:	0801159d 	.word	0x0801159d
 80114a0:	240284a4 	.word	0x240284a4

080114a4 <xTimerGenericCommand>:
{
 80114a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80114a6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80114a8:	4604      	mov	r4, r0
{
 80114aa:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80114ac:	b940      	cbnz	r0, 80114c0 <xTimerGenericCommand+0x1c>
 80114ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	e7fe      	b.n	80114be <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80114c0:	4d0c      	ldr	r5, [pc, #48]	@ (80114f4 <xTimerGenericCommand+0x50>)
 80114c2:	6828      	ldr	r0, [r5, #0]
 80114c4:	b178      	cbz	r0, 80114e6 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80114c6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80114c8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80114ca:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80114ce:	dc0c      	bgt.n	80114ea <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80114d0:	f7ff fe7a 	bl	80111c8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80114d4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80114d6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80114d8:	4669      	mov	r1, sp
 80114da:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80114dc:	bf0c      	ite	eq
 80114de:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80114e0:	461a      	movne	r2, r3
 80114e2:	f7fe fe36 	bl	8010152 <xQueueGenericSend>
}
 80114e6:	b004      	add	sp, #16
 80114e8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80114ea:	2300      	movs	r3, #0
 80114ec:	4669      	mov	r1, sp
 80114ee:	f7fe ff33 	bl	8010358 <xQueueGenericSendFromISR>
 80114f2:	e7f8      	b.n	80114e6 <xTimerGenericCommand+0x42>
 80114f4:	240284a8 	.word	0x240284a8

080114f8 <prvSampleTimeNow>:
{
 80114f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80114fc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8011598 <prvSampleTimeNow+0xa0>
{
 8011500:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8011502:	f7ff fbd5 	bl	8010cb0 <xTaskGetTickCount>
 8011506:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8011508:	f8d8 3000 	ldr.w	r3, [r8]
 801150c:	4283      	cmp	r3, r0
 801150e:	d909      	bls.n	8011524 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011510:	4f1f      	ldr	r7, [pc, #124]	@ (8011590 <prvSampleTimeNow+0x98>)
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	b96a      	cbnz	r2, 8011534 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8011518:	4a1e      	ldr	r2, [pc, #120]	@ (8011594 <prvSampleTimeNow+0x9c>)
 801151a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801151c:	6013      	str	r3, [r2, #0]
 801151e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8011520:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8011522:	e000      	b.n	8011526 <prvSampleTimeNow+0x2e>
 8011524:	2300      	movs	r3, #0
}
 8011526:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8011528:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 801152a:	f8c8 5000 	str.w	r5, [r8]
}
 801152e:	b002      	add	sp, #8
 8011530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011534:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011536:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011538:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801153c:	f104 0a04 	add.w	sl, r4, #4
 8011540:	4650      	mov	r0, sl
 8011542:	f7fe fad1 	bl	800fae8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011546:	6a23      	ldr	r3, [r4, #32]
 8011548:	4620      	mov	r0, r4
 801154a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801154c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011550:	075b      	lsls	r3, r3, #29
 8011552:	d5de      	bpl.n	8011512 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011554:	69a3      	ldr	r3, [r4, #24]
 8011556:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8011558:	4599      	cmp	r9, r3
 801155a:	d206      	bcs.n	801156a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801155c:	4651      	mov	r1, sl
 801155e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011560:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011562:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011564:	f7fe faa9 	bl	800faba <vListInsert>
 8011568:	e7d3      	b.n	8011512 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801156a:	2300      	movs	r3, #0
 801156c:	464a      	mov	r2, r9
 801156e:	4620      	mov	r0, r4
 8011570:	4619      	mov	r1, r3
 8011572:	9300      	str	r3, [sp, #0]
 8011574:	f7ff ff96 	bl	80114a4 <xTimerGenericCommand>
				configASSERT( xResult );
 8011578:	2800      	cmp	r0, #0
 801157a:	d1ca      	bne.n	8011512 <prvSampleTimeNow+0x1a>
 801157c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011580:	f383 8811 	msr	BASEPRI, r3
 8011584:	f3bf 8f6f 	isb	sy
 8011588:	f3bf 8f4f 	dsb	sy
 801158c:	e7fe      	b.n	801158c <prvSampleTimeNow+0x94>
 801158e:	bf00      	nop
 8011590:	240284b0 	.word	0x240284b0
 8011594:	240284ac 	.word	0x240284ac
 8011598:	240284a0 	.word	0x240284a0

0801159c <prvTimerTask>:
{
 801159c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80115a0:	4d6e      	ldr	r5, [pc, #440]	@ (801175c <prvTimerTask+0x1c0>)
{
 80115a2:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80115a4:	4e6e      	ldr	r6, [pc, #440]	@ (8011760 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80115a6:	682b      	ldr	r3, [r5, #0]
 80115a8:	f8d3 8000 	ldr.w	r8, [r3]
 80115ac:	f1b8 0f00 	cmp.w	r8, #0
 80115b0:	d035      	beq.n	801161e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115b2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80115b4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115b6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80115ba:	f7ff fb71 	bl	8010ca0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115be:	a804      	add	r0, sp, #16
 80115c0:	f7ff ff9a 	bl	80114f8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80115c4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115c6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d169      	bne.n	80116a0 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80115cc:	2c00      	cmp	r4, #0
 80115ce:	d14c      	bne.n	801166a <prvTimerTask+0xce>
 80115d0:	4540      	cmp	r0, r8
 80115d2:	d350      	bcc.n	8011676 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 80115d4:	f7ff fc08 	bl	8010de8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115de:	1d38      	adds	r0, r7, #4
 80115e0:	f7fe fa82 	bl	800fae8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80115e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80115e8:	0758      	lsls	r0, r3, #29
 80115ea:	d51a      	bpl.n	8011622 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80115ec:	69b9      	ldr	r1, [r7, #24]
 80115ee:	4643      	mov	r3, r8
 80115f0:	464a      	mov	r2, r9
 80115f2:	4638      	mov	r0, r7
 80115f4:	4441      	add	r1, r8
 80115f6:	f7ff fed1 	bl	801139c <prvInsertTimerInActiveList>
 80115fa:	b1b0      	cbz	r0, 801162a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115fc:	4623      	mov	r3, r4
 80115fe:	4642      	mov	r2, r8
 8011600:	4621      	mov	r1, r4
 8011602:	4638      	mov	r0, r7
 8011604:	9400      	str	r4, [sp, #0]
 8011606:	f7ff ff4d 	bl	80114a4 <xTimerGenericCommand>
			configASSERT( xResult );
 801160a:	b970      	cbnz	r0, 801162a <prvTimerTask+0x8e>
 801160c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011610:	f383 8811 	msr	BASEPRI, r3
 8011614:	f3bf 8f6f 	isb	sy
 8011618:	f3bf 8f4f 	dsb	sy
 801161c:	e7fe      	b.n	801161c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801161e:	2401      	movs	r4, #1
 8011620:	e7cb      	b.n	80115ba <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011622:	f023 0301 	bic.w	r3, r3, #1
 8011626:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801162a:	6a3b      	ldr	r3, [r7, #32]
 801162c:	4638      	mov	r0, r7
 801162e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011630:	2200      	movs	r2, #0
 8011632:	a904      	add	r1, sp, #16
 8011634:	6830      	ldr	r0, [r6, #0]
 8011636:	f7fe ff3d 	bl	80104b4 <xQueueReceive>
 801163a:	2800      	cmp	r0, #0
 801163c:	d0b3      	beq.n	80115a6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801163e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011640:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011642:	2b00      	cmp	r3, #0
 8011644:	db2f      	blt.n	80116a6 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011646:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011648:	6963      	ldr	r3, [r4, #20]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d132      	bne.n	80116b4 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801164e:	a803      	add	r0, sp, #12
 8011650:	f7ff ff52 	bl	80114f8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8011654:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011656:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8011658:	2b09      	cmp	r3, #9
 801165a:	d8e9      	bhi.n	8011630 <prvTimerTask+0x94>
 801165c:	e8df f003 	tbb	[pc, r3]
 8011660:	572e2e2e 	.word	0x572e2e2e
 8011664:	2e2e765e 	.word	0x2e2e765e
 8011668:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801166a:	4b3e      	ldr	r3, [pc, #248]	@ (8011764 <prvTimerTask+0x1c8>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	681c      	ldr	r4, [r3, #0]
 8011670:	fab4 f484 	clz	r4, r4
 8011674:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011676:	4622      	mov	r2, r4
 8011678:	eba8 0109 	sub.w	r1, r8, r9
 801167c:	6830      	ldr	r0, [r6, #0]
 801167e:	f7ff f922 	bl	80108c6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011682:	f7ff fbb1 	bl	8010de8 <xTaskResumeAll>
 8011686:	2800      	cmp	r0, #0
 8011688:	d1d2      	bne.n	8011630 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 801168a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801168e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011692:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011696:	f3bf 8f4f 	dsb	sy
 801169a:	f3bf 8f6f 	isb	sy
 801169e:	e7c7      	b.n	8011630 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80116a0:	f7ff fba2 	bl	8010de8 <xTaskResumeAll>
}
 80116a4:	e7c4      	b.n	8011630 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80116a6:	9b05      	ldr	r3, [sp, #20]
 80116a8:	9907      	ldr	r1, [sp, #28]
 80116aa:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80116ac:	9b04      	ldr	r3, [sp, #16]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	dbbe      	blt.n	8011630 <prvTimerTask+0x94>
 80116b2:	e7c8      	b.n	8011646 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116b4:	1d20      	adds	r0, r4, #4
 80116b6:	f7fe fa17 	bl	800fae8 <uxListRemove>
 80116ba:	e7c8      	b.n	801164e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80116bc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80116c0:	4620      	mov	r0, r4
 80116c2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80116c4:	f043 0301 	orr.w	r3, r3, #1
 80116c8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80116cc:	9b05      	ldr	r3, [sp, #20]
 80116ce:	4419      	add	r1, r3
 80116d0:	f7ff fe64 	bl	801139c <prvInsertTimerInActiveList>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d0ab      	beq.n	8011630 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116d8:	6a23      	ldr	r3, [r4, #32]
 80116da:	4620      	mov	r0, r4
 80116dc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80116de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80116e2:	0759      	lsls	r1, r3, #29
 80116e4:	d5a4      	bpl.n	8011630 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80116e6:	69a2      	ldr	r2, [r4, #24]
 80116e8:	2300      	movs	r3, #0
 80116ea:	9905      	ldr	r1, [sp, #20]
 80116ec:	4620      	mov	r0, r4
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	440a      	add	r2, r1
 80116f2:	4619      	mov	r1, r3
 80116f4:	f7ff fed6 	bl	80114a4 <xTimerGenericCommand>
							configASSERT( xResult );
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d199      	bne.n	8011630 <prvTimerTask+0x94>
 80116fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011700:	f383 8811 	msr	BASEPRI, r3
 8011704:	f3bf 8f6f 	isb	sy
 8011708:	f3bf 8f4f 	dsb	sy
 801170c:	e7fe      	b.n	801170c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801170e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011712:	f023 0301 	bic.w	r3, r3, #1
 8011716:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801171a:	e789      	b.n	8011630 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801171c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011720:	f043 0301 	orr.w	r3, r3, #1
 8011724:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011728:	9905      	ldr	r1, [sp, #20]
 801172a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801172c:	b941      	cbnz	r1, 8011740 <prvTimerTask+0x1a4>
 801172e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	e7fe      	b.n	801173e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011740:	4603      	mov	r3, r0
 8011742:	4401      	add	r1, r0
 8011744:	4620      	mov	r0, r4
 8011746:	f7ff fe29 	bl	801139c <prvInsertTimerInActiveList>
					break;
 801174a:	e771      	b.n	8011630 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801174c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011750:	079a      	lsls	r2, r3, #30
 8011752:	d4de      	bmi.n	8011712 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8011754:	4620      	mov	r0, r4
 8011756:	f7fe f959 	bl	800fa0c <vPortFree>
 801175a:	e769      	b.n	8011630 <prvTimerTask+0x94>
 801175c:	240284b0 	.word	0x240284b0
 8011760:	240284a8 	.word	0x240284a8
 8011764:	240284ac 	.word	0x240284ac

08011768 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011768:	8880      	ldrh	r0, [r0, #4]
 801176a:	4770      	bx	lr

0801176c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801176c:	b570      	push	{r4, r5, r6, lr}
 801176e:	6803      	ldr	r3, [r0, #0]
 8011770:	460c      	mov	r4, r1
 8011772:	2100      	movs	r1, #0
 8011774:	4605      	mov	r5, r0
 8011776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011778:	4798      	blx	r3
 801177a:	4606      	mov	r6, r0
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	4628      	mov	r0, r5
 8011780:	1ba4      	subs	r4, r4, r6
 8011782:	6a1b      	ldr	r3, [r3, #32]
 8011784:	b2a4      	uxth	r4, r4
 8011786:	4798      	blx	r3
 8011788:	fbb4 f0f0 	udiv	r0, r4, r0
 801178c:	bd70      	pop	{r4, r5, r6, pc}

0801178e <_ZN8touchgfx17AbstractPartition5clearEv>:
 801178e:	2300      	movs	r3, #0
 8011790:	8083      	strh	r3, [r0, #4]
 8011792:	4770      	bx	lr

08011794 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011794:	b510      	push	{r4, lr}
 8011796:	6803      	ldr	r3, [r0, #0]
 8011798:	4604      	mov	r4, r0
 801179a:	8881      	ldrh	r1, [r0, #4]
 801179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801179e:	4798      	blx	r3
 80117a0:	88a3      	ldrh	r3, [r4, #4]
 80117a2:	3301      	adds	r3, #1
 80117a4:	80a3      	strh	r3, [r4, #4]
 80117a6:	bd10      	pop	{r4, pc}

080117a8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80117a8:	6803      	ldr	r3, [r0, #0]
 80117aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ac:	4718      	bx	r3

080117ae <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80117ae:	4770      	bx	lr

080117b0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80117b0:	4a02      	ldr	r2, [pc, #8]	@ (80117bc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80117b2:	6002      	str	r2, [r0, #0]
 80117b4:	2200      	movs	r2, #0
 80117b6:	8082      	strh	r2, [r0, #4]
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	0802c7a0 	.word	0x0802c7a0

080117c0 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 80117c0:	f880 102f 	strb.w	r1, [r0, #47]	@ 0x2f
 80117c4:	4770      	bx	lr

080117c6 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 80117c6:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 80117ca:	4770      	bx	lr

080117cc <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 80117cc:	b510      	push	{r4, lr}
 80117ce:	6803      	ldr	r3, [r0, #0]
 80117d0:	4604      	mov	r4, r0
 80117d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80117d6:	4798      	blx	r3
 80117d8:	b110      	cbz	r0, 80117e0 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 80117da:	4620      	mov	r0, r4
 80117dc:	f7f1 fde3 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80117e0:	bd10      	pop	{r4, pc}

080117e2 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 80117e2:	b508      	push	{r3, lr}
 80117e4:	3034      	adds	r0, #52	@ 0x34
 80117e6:	f820 1c2c 	strh.w	r1, [r0, #-44]
 80117ea:	f7f2 f8ef 	bl	80039cc <_ZN8touchgfx8TextArea8setWidthEs>
 80117ee:	bd08      	pop	{r3, pc}

080117f0 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 80117f0:	b508      	push	{r3, lr}
 80117f2:	3034      	adds	r0, #52	@ 0x34
 80117f4:	f820 1c2a 	strh.w	r1, [r0, #-42]
 80117f8:	f7f2 f8fa 	bl	80039f0 <_ZN8touchgfx8TextArea9setHeightEs>
 80117fc:	bd08      	pop	{r3, pc}
	...

08011800 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8011800:	4a11      	ldr	r2, [pc, #68]	@ (8011848 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8011802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011806:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 801180a:	4604      	mov	r4, r0
 801180c:	8812      	ldrh	r2, [r2, #0]
 801180e:	460d      	mov	r5, r1
 8011810:	429a      	cmp	r2, r3
 8011812:	d916      	bls.n	8011842 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8011814:	6802      	ldr	r2, [r0, #0]
 8011816:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 801181a:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 801181c:	4a0b      	ldr	r2, [pc, #44]	@ (801184c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 801181e:	6812      	ldr	r2, [r2, #0]
 8011820:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011824:	4b0a      	ldr	r3, [pc, #40]	@ (8011850 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801182c:	6803      	ldr	r3, [r0, #0]
 801182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011830:	4798      	blx	r3
 8011832:	1a2a      	subs	r2, r5, r0
 8011834:	4639      	mov	r1, r7
 8011836:	4620      	mov	r0, r4
 8011838:	4633      	mov	r3, r6
 801183a:	b212      	sxth	r2, r2
 801183c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011840:	4718      	bx	r3
 8011842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011846:	bf00      	nop
 8011848:	24028544 	.word	0x24028544
 801184c:	24028540 	.word	0x24028540
 8011850:	24028548 	.word	0x24028548

08011854 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8011854:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 8011858:	4770      	bx	lr

0801185a <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 801185a:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 801185e:	4770      	bx	lr

08011860 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8011860:	b508      	push	{r3, lr}
 8011862:	3034      	adds	r0, #52	@ 0x34
 8011864:	6301      	str	r1, [r0, #48]	@ 0x30
 8011866:	f7f1 fd9e 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801186a:	bd08      	pop	{r3, pc}

0801186c <_ZNK8touchgfx12DigitalClock8getColorEv>:
 801186c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801186e:	4770      	bx	lr

08011870 <_ZN8touchgfx12DigitalClockD1Ev>:
 8011870:	4770      	bx	lr

08011872 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8011872:	3034      	adds	r0, #52	@ 0x34
 8011874:	f004 bdda 	b.w	801642c <_ZNK8touchgfx8TextArea12getTextWidthEv>

08011878 <_ZN8touchgfx12DigitalClockD0Ev>:
 8011878:	b510      	push	{r4, lr}
 801187a:	4604      	mov	r4, r0
 801187c:	2198      	movs	r1, #152	@ 0x98
 801187e:	f016 fb27 	bl	8027ed0 <_ZdlPvj>
 8011882:	4620      	mov	r0, r4
 8011884:	bd10      	pop	{r4, pc}

08011886 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8011886:	b538      	push	{r3, r4, r5, lr}
 8011888:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 801188c:	460d      	mov	r5, r1
 801188e:	4620      	mov	r0, r4
 8011890:	f7f1 fd89 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011894:	4620      	mov	r0, r4
 8011896:	4629      	mov	r1, r5
 8011898:	f005 f904 	bl	8016aa4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801189c:	4620      	mov	r0, r4
 801189e:	f7f1 fd82 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80118a2:	bd38      	pop	{r3, r4, r5, pc}

080118a4 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 80118a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118a8:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 80118ac:	4604      	mov	r4, r0
 80118ae:	4630      	mov	r0, r6
 80118b0:	f7f1 fd79 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80118b4:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 80118b8:	bb0b      	cbnz	r3, 80118fe <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 80118ba:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80118be:	4620      	mov	r0, r4
 80118c0:	4a40      	ldr	r2, [pc, #256]	@ (80119c4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 80118c2:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 80118c6:	4d40      	ldr	r5, [pc, #256]	@ (80119c8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	bf08      	it	eq
 80118cc:	4615      	moveq	r5, r2
 80118ce:	f000 f928 	bl	8011b22 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 80118d2:	4680      	mov	r8, r0
 80118d4:	4620      	mov	r0, r4
 80118d6:	f000 f937 	bl	8011b48 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80118da:	4681      	mov	r9, r0
 80118dc:	4620      	mov	r0, r4
 80118de:	f000 f92c 	bl	8011b3a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 80118e2:	2800      	cmp	r0, #0
 80118e4:	462a      	mov	r2, r5
 80118e6:	f04f 010c 	mov.w	r1, #12
 80118ea:	bf14      	ite	ne
 80118ec:	2341      	movne	r3, #65	@ 0x41
 80118ee:	2350      	moveq	r3, #80	@ 0x50
 80118f0:	4638      	mov	r0, r7
 80118f2:	e9cd 9300 	strd	r9, r3, [sp]
 80118f6:	4643      	mov	r3, r8
 80118f8:	f00b fb5a 	bl	801cfb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80118fc:	e017      	b.n	801192e <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 80118fe:	2b01      	cmp	r3, #1
 8011900:	d11b      	bne.n	801193a <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 8011902:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011906:	4620      	mov	r0, r4
 8011908:	4a30      	ldr	r2, [pc, #192]	@ (80119cc <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 801190a:	4d31      	ldr	r5, [pc, #196]	@ (80119d0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 801190c:	2b00      	cmp	r3, #0
 801190e:	bf08      	it	eq
 8011910:	4615      	moveq	r5, r2
 8011912:	f000 f903 	bl	8011b1c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8011916:	4607      	mov	r7, r0
 8011918:	4620      	mov	r0, r4
 801191a:	f000 f915 	bl	8011b48 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801191e:	462a      	mov	r2, r5
 8011920:	9000      	str	r0, [sp, #0]
 8011922:	463b      	mov	r3, r7
 8011924:	210c      	movs	r1, #12
 8011926:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801192a:	f00b fb41 	bl	801cfb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801192e:	4630      	mov	r0, r6
 8011930:	f7f1 fd39 	bl	80033a6 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011934:	b004      	add	sp, #16
 8011936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801193a:	2b02      	cmp	r3, #2
 801193c:	d126      	bne.n	801198c <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 801193e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011942:	4620      	mov	r0, r4
 8011944:	4a23      	ldr	r2, [pc, #140]	@ (80119d4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8011946:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 801194a:	4d23      	ldr	r5, [pc, #140]	@ (80119d8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 801194c:	2b00      	cmp	r3, #0
 801194e:	bf08      	it	eq
 8011950:	4615      	moveq	r5, r2
 8011952:	f000 f8e6 	bl	8011b22 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8011956:	4680      	mov	r8, r0
 8011958:	4620      	mov	r0, r4
 801195a:	f000 f8f5 	bl	8011b48 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801195e:	4681      	mov	r9, r0
 8011960:	4620      	mov	r0, r4
 8011962:	f000 f8f4 	bl	8011b4e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8011966:	4682      	mov	sl, r0
 8011968:	4620      	mov	r0, r4
 801196a:	f000 f8e6 	bl	8011b3a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 801196e:	2800      	cmp	r0, #0
 8011970:	f8cd 9000 	str.w	r9, [sp]
 8011974:	462a      	mov	r2, r5
 8011976:	bf14      	ite	ne
 8011978:	2341      	movne	r3, #65	@ 0x41
 801197a:	2350      	moveq	r3, #80	@ 0x50
 801197c:	210c      	movs	r1, #12
 801197e:	4638      	mov	r0, r7
 8011980:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011984:	4643      	mov	r3, r8
 8011986:	f00b fb13 	bl	801cfb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801198a:	e7d0      	b.n	801192e <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 801198c:	2b03      	cmp	r3, #3
 801198e:	d1ce      	bne.n	801192e <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8011990:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011994:	4620      	mov	r0, r4
 8011996:	4a11      	ldr	r2, [pc, #68]	@ (80119dc <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8011998:	4d11      	ldr	r5, [pc, #68]	@ (80119e0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 801199a:	2b00      	cmp	r3, #0
 801199c:	bf08      	it	eq
 801199e:	4615      	moveq	r5, r2
 80119a0:	f000 f8bc 	bl	8011b1c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80119a4:	4607      	mov	r7, r0
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 f8ce 	bl	8011b48 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80119ac:	4680      	mov	r8, r0
 80119ae:	4620      	mov	r0, r4
 80119b0:	f000 f8cd 	bl	8011b4e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80119b4:	463b      	mov	r3, r7
 80119b6:	462a      	mov	r2, r5
 80119b8:	210c      	movs	r1, #12
 80119ba:	e9cd 8000 	strd	r8, r0, [sp]
 80119be:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80119c2:	e799      	b.n	80118f8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 80119c4:	0802c7cc 	.word	0x0802c7cc
 80119c8:	0802c7f6 	.word	0x0802c7f6
 80119cc:	0802c7d8 	.word	0x0802c7d8
 80119d0:	0802c816 	.word	0x0802c816
 80119d4:	0802c7f3 	.word	0x0802c7f3
 80119d8:	0802c7e0 	.word	0x0802c7e0
 80119dc:	0802c813 	.word	0x0802c813
 80119e0:	0802c804 	.word	0x0802c804

080119e4 <_ZN8touchgfx12DigitalClockC1Ev>:
 80119e4:	b510      	push	{r4, lr}
 80119e6:	4604      	mov	r4, r0
 80119e8:	f000 f87c 	bl	8011ae4 <_ZN8touchgfx13AbstractClockC1Ev>
 80119ec:	2201      	movs	r2, #1
 80119ee:	4b21      	ldr	r3, [pc, #132]	@ (8011a74 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 80119f0:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 80119f4:	4620      	mov	r0, r4
 80119f6:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 80119fa:	4a1f      	ldr	r2, [pc, #124]	@ (8011a78 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	2303      	movs	r3, #3
 8011a00:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8011a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011a06:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8011a10:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 8011a14:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 8011a18:	4a18      	ldr	r2, [pc, #96]	@ (8011a7c <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 8011a1a:	66a1      	str	r1, [r4, #104]	@ 0x68
 8011a1c:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 8011a20:	6362      	str	r2, [r4, #52]	@ 0x34
 8011a22:	4622      	mov	r2, r4
 8011a24:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8011a28:	8723      	strh	r3, [r4, #56]	@ 0x38
 8011a2a:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8011a2c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 8011a2e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8011a30:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8011a34:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8011a38:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8011a3c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8011a40:	6523      	str	r3, [r4, #80]	@ 0x50
 8011a42:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8011a46:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8011a4a:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8011a4e:	6663      	str	r3, [r4, #100]	@ 0x64
 8011a50:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8011a54:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8011a58:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 8011a5c:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 8011a60:	67a3      	str	r3, [r4, #120]	@ 0x78
 8011a62:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8011a66:	f822 3f80 	strh.w	r3, [r2, #128]!
 8011a6a:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8011a6c:	f000 f87c 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011a70:	4620      	mov	r0, r4
 8011a72:	bd10      	pop	{r4, pc}
 8011a74:	0802c828 	.word	0x0802c828
 8011a78:	0802b578 	.word	0x0802b578
 8011a7c:	0802b588 	.word	0x0802b588

08011a80 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8011a80:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 8011a84:	4770      	bx	lr

08011a86 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8011a86:	b470      	push	{r4, r5, r6}
 8011a88:	2518      	movs	r5, #24
 8011a8a:	fbb1 f6f5 	udiv	r6, r1, r5
 8011a8e:	fb06 1115 	mls	r1, r6, r5, r1
 8011a92:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8011a96:	213c      	movs	r1, #60	@ 0x3c
 8011a98:	fbb2 f5f1 	udiv	r5, r2, r1
 8011a9c:	fb05 2211 	mls	r2, r5, r1, r2
 8011aa0:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 8011aa4:	fbb3 f2f1 	udiv	r2, r3, r1
 8011aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8011aac:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 8011ab0:	6803      	ldr	r3, [r0, #0]
 8011ab2:	bc70      	pop	{r4, r5, r6}
 8011ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ab8:	4718      	bx	r3

08011aba <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8011aba:	b4f0      	push	{r4, r5, r6, r7}
 8011abc:	6804      	ldr	r4, [r0, #0]
 8011abe:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8011ac2:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 8011ac6:	240c      	movs	r4, #12
 8011ac8:	2e00      	cmp	r6, #0
 8011aca:	46ac      	mov	ip, r5
 8011acc:	fbb1 f7f4 	udiv	r7, r1, r4
 8011ad0:	fb07 1114 	mls	r1, r7, r4, r1
 8011ad4:	bf18      	it	ne
 8011ad6:	2400      	movne	r4, #0
 8011ad8:	fa54 f181 	uxtab	r1, r4, r1
 8011adc:	bcf0      	pop	{r4, r5, r6, r7}
 8011ade:	b2c9      	uxtb	r1, r1
 8011ae0:	4760      	bx	ip
	...

08011ae4 <_ZN8touchgfx13AbstractClockC1Ev>:
 8011ae4:	2101      	movs	r1, #1
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8011aec:	490a      	ldr	r1, [pc, #40]	@ (8011b18 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8011aee:	8082      	strh	r2, [r0, #4]
 8011af0:	80c2      	strh	r2, [r0, #6]
 8011af2:	8102      	strh	r2, [r0, #8]
 8011af4:	8142      	strh	r2, [r0, #10]
 8011af6:	8182      	strh	r2, [r0, #12]
 8011af8:	81c2      	strh	r2, [r0, #14]
 8011afa:	8202      	strh	r2, [r0, #16]
 8011afc:	8242      	strh	r2, [r0, #18]
 8011afe:	61c2      	str	r2, [r0, #28]
 8011b00:	8402      	strh	r2, [r0, #32]
 8011b02:	8442      	strh	r2, [r0, #34]	@ 0x22
 8011b04:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8011b08:	6001      	str	r1, [r0, #0]
 8011b0a:	6282      	str	r2, [r0, #40]	@ 0x28
 8011b0c:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8011b0e:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 8011b12:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011b16:	4770      	bx	lr
 8011b18:	0802c8e8 	.word	0x0802c8e8

08011b1c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8011b1c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011b20:	4770      	bx	lr

08011b22 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8011b22:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011b26:	220c      	movs	r2, #12
 8011b28:	f100 030b 	add.w	r3, r0, #11
 8011b2c:	fb93 f0f2 	sdiv	r0, r3, r2
 8011b30:	fb02 3010 	mls	r0, r2, r0, r3
 8011b34:	3001      	adds	r0, #1
 8011b36:	b2c0      	uxtb	r0, r0
 8011b38:	4770      	bx	lr

08011b3a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8011b3a:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011b3e:	280b      	cmp	r0, #11
 8011b40:	bf8c      	ite	hi
 8011b42:	2000      	movhi	r0, #0
 8011b44:	2001      	movls	r0, #1
 8011b46:	4770      	bx	lr

08011b48 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8011b48:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8011b4c:	4770      	bx	lr

08011b4e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8011b4e:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 8011b52:	4770      	bx	lr

08011b54 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011b54:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011b56:	2000      	movs	r0, #0
 8011b58:	b12b      	cbz	r3, 8011b66 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011b5a:	b920      	cbnz	r0, 8011b66 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011b5c:	1a5a      	subs	r2, r3, r1
 8011b5e:	699b      	ldr	r3, [r3, #24]
 8011b60:	4250      	negs	r0, r2
 8011b62:	4150      	adcs	r0, r2
 8011b64:	e7f8      	b.n	8011b58 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011b66:	4770      	bx	lr

08011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011b68:	2300      	movs	r3, #0
 8011b6a:	6148      	str	r0, [r1, #20]
 8011b6c:	618b      	str	r3, [r1, #24]
 8011b6e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011b70:	b913      	cbnz	r3, 8011b78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011b72:	6281      	str	r1, [r0, #40]	@ 0x28
 8011b74:	4770      	bx	lr
 8011b76:	4613      	mov	r3, r2
 8011b78:	699a      	ldr	r2, [r3, #24]
 8011b7a:	2a00      	cmp	r2, #0
 8011b7c:	d1fb      	bne.n	8011b76 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011b7e:	6199      	str	r1, [r3, #24]
 8011b80:	4770      	bx	lr

08011b82 <_ZN8touchgfx9Container9removeAllEv>:
 8011b82:	2200      	movs	r2, #0
 8011b84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011b86:	b123      	cbz	r3, 8011b92 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011b88:	6999      	ldr	r1, [r3, #24]
 8011b8a:	6281      	str	r1, [r0, #40]	@ 0x28
 8011b8c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011b90:	e7f8      	b.n	8011b84 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011b92:	4770      	bx	lr

08011b94 <_ZN8touchgfx9Container6unlinkEv>:
 8011b94:	2300      	movs	r3, #0
 8011b96:	6283      	str	r3, [r0, #40]	@ 0x28
 8011b98:	4770      	bx	lr

08011b9a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	8002      	strh	r2, [r0, #0]
 8011b9e:	8042      	strh	r2, [r0, #2]
 8011ba0:	8082      	strh	r2, [r0, #4]
 8011ba2:	80c2      	strh	r2, [r0, #6]
 8011ba4:	4770      	bx	lr

08011ba6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011ba6:	b570      	push	{r4, r5, r6, lr}
 8011ba8:	460d      	mov	r5, r1
 8011baa:	4616      	mov	r6, r2
 8011bac:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011bae:	b13c      	cbz	r4, 8011bc0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011bb0:	6823      	ldr	r3, [r4, #0]
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	4632      	mov	r2, r6
 8011bb6:	4629      	mov	r1, r5
 8011bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bba:	4798      	blx	r3
 8011bbc:	69a4      	ldr	r4, [r4, #24]
 8011bbe:	e7f6      	b.n	8011bae <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011bc0:	bd70      	pop	{r4, r5, r6, pc}

08011bc2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011bc2:	b538      	push	{r3, r4, r5, lr}
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011bc8:	b134      	cbz	r4, 8011bd8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011bca:	682b      	ldr	r3, [r5, #0]
 8011bcc:	4621      	mov	r1, r4
 8011bce:	4628      	mov	r0, r5
 8011bd0:	689b      	ldr	r3, [r3, #8]
 8011bd2:	4798      	blx	r3
 8011bd4:	69a4      	ldr	r4, [r4, #24]
 8011bd6:	e7f7      	b.n	8011bc8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011bd8:	bd38      	pop	{r3, r4, r5, pc}

08011bda <_ZN8touchgfx9ContainerD1Ev>:
 8011bda:	4770      	bx	lr

08011bdc <_ZN8touchgfx9ContainerD0Ev>:
 8011bdc:	b510      	push	{r4, lr}
 8011bde:	4604      	mov	r4, r0
 8011be0:	212c      	movs	r1, #44	@ 0x2c
 8011be2:	f016 f975 	bl	8027ed0 <_ZdlPvj>
 8011be6:	4620      	mov	r0, r4
 8011be8:	bd10      	pop	{r4, pc}

08011bea <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011bea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011bec:	b19b      	cbz	r3, 8011c16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011bee:	428b      	cmp	r3, r1
 8011bf0:	d109      	bne.n	8011c06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011bf2:	699a      	ldr	r2, [r3, #24]
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	6159      	str	r1, [r3, #20]
 8011bf8:	6282      	str	r2, [r0, #40]	@ 0x28
 8011bfa:	b902      	cbnz	r2, 8011bfe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011bfc:	4770      	bx	lr
 8011bfe:	6199      	str	r1, [r3, #24]
 8011c00:	4770      	bx	lr
 8011c02:	4613      	mov	r3, r2
 8011c04:	b13a      	cbz	r2, 8011c16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011c06:	699a      	ldr	r2, [r3, #24]
 8011c08:	428a      	cmp	r2, r1
 8011c0a:	d1fa      	bne.n	8011c02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011c0c:	698a      	ldr	r2, [r1, #24]
 8011c0e:	619a      	str	r2, [r3, #24]
 8011c10:	2300      	movs	r3, #0
 8011c12:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011c16:	4770      	bx	lr

08011c18 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011c18:	b410      	push	{r4}
 8011c1a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	b92b      	cbnz	r3, 8011c2c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011c20:	6803      	ldr	r3, [r0, #0]
 8011c22:	4611      	mov	r1, r2
 8011c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011c2a:	4718      	bx	r3
 8011c2c:	b941      	cbnz	r1, 8011c40 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011c2e:	6193      	str	r3, [r2, #24]
 8011c30:	6282      	str	r2, [r0, #40]	@ 0x28
 8011c32:	6154      	str	r4, [r2, #20]
 8011c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c38:	4770      	bx	lr
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	d0f9      	beq.n	8011c34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011c40:	4299      	cmp	r1, r3
 8011c42:	6998      	ldr	r0, [r3, #24]
 8011c44:	d1f9      	bne.n	8011c3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011c46:	6190      	str	r0, [r2, #24]
 8011c48:	618a      	str	r2, [r1, #24]
 8011c4a:	e7f2      	b.n	8011c32 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c50:	461f      	mov	r7, r3
 8011c52:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8011c56:	460d      	mov	r5, r1
 8011c58:	4616      	mov	r6, r2
 8011c5a:	b103      	cbz	r3, 8011c5e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011c5c:	6038      	str	r0, [r7, #0]
 8011c5e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011c60:	b314      	cbz	r4, 8011ca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011c62:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8011c66:	b1eb      	cbz	r3, 8011ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c68:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011c6c:	428d      	cmp	r5, r1
 8011c6e:	db19      	blt.n	8011ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c70:	b289      	uxth	r1, r1
 8011c72:	8923      	ldrh	r3, [r4, #8]
 8011c74:	440b      	add	r3, r1
 8011c76:	b21b      	sxth	r3, r3
 8011c78:	429d      	cmp	r5, r3
 8011c7a:	da13      	bge.n	8011ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c7c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011c80:	4296      	cmp	r6, r2
 8011c82:	db0f      	blt.n	8011ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c84:	b292      	uxth	r2, r2
 8011c86:	8963      	ldrh	r3, [r4, #10]
 8011c88:	4413      	add	r3, r2
 8011c8a:	b21b      	sxth	r3, r3
 8011c8c:	429e      	cmp	r6, r3
 8011c8e:	da09      	bge.n	8011ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011c90:	6823      	ldr	r3, [r4, #0]
 8011c92:	1ab2      	subs	r2, r6, r2
 8011c94:	1a69      	subs	r1, r5, r1
 8011c96:	4620      	mov	r0, r4
 8011c98:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8011c9c:	b212      	sxth	r2, r2
 8011c9e:	463b      	mov	r3, r7
 8011ca0:	b209      	sxth	r1, r1
 8011ca2:	47c0      	blx	r8
 8011ca4:	69a4      	ldr	r4, [r4, #24]
 8011ca6:	e7db      	b.n	8011c60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011cac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb0:	4c6d      	ldr	r4, [pc, #436]	@ (8011e68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011cb2:	b0a1      	sub	sp, #132	@ 0x84
 8011cb4:	4606      	mov	r6, r0
 8011cb6:	6824      	ldr	r4, [r4, #0]
 8011cb8:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8011cba:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8011cbe:	2400      	movs	r4, #0
 8011cc0:	9303      	str	r3, [sp, #12]
 8011cc2:	802c      	strh	r4, [r5, #0]
 8011cc4:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8011cc6:	802c      	strh	r4, [r5, #0]
 8011cc8:	601c      	str	r4, [r3, #0]
 8011cca:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011cce:	f7ff ffbd 	bl	8011c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011cd2:	f1b9 0f03 	cmp.w	r9, #3
 8011cd6:	f340 80c1 	ble.w	8011e5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011cda:	4631      	mov	r1, r6
 8011cdc:	a80c      	add	r0, sp, #48	@ 0x30
 8011cde:	f008 fe91 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011ce2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8011ce6:	9306      	str	r3, [sp, #24]
 8011ce8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8011cec:	9307      	str	r3, [sp, #28]
 8011cee:	9b03      	ldr	r3, [sp, #12]
 8011cf0:	f8d3 a000 	ldr.w	sl, [r3]
 8011cf4:	f1ba 0f00 	cmp.w	sl, #0
 8011cf8:	f000 80b3 	beq.w	8011e62 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011cfc:	4651      	mov	r1, sl
 8011cfe:	a810      	add	r0, sp, #64	@ 0x40
 8011d00:	f008 fe80 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d04:	2002      	movs	r0, #2
 8011d06:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8011d0a:	9b01      	ldr	r3, [sp, #4]
 8011d0c:	9a06      	ldr	r2, [sp, #24]
 8011d0e:	fb91 f1f0 	sdiv	r1, r1, r0
 8011d12:	189d      	adds	r5, r3, r2
 8011d14:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8011d18:	9a07      	ldr	r2, [sp, #28]
 8011d1a:	4419      	add	r1, r3
 8011d1c:	9b02      	ldr	r3, [sp, #8]
 8011d1e:	4413      	add	r3, r2
 8011d20:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8011d24:	1a6d      	subs	r5, r5, r1
 8011d26:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8011d2a:	fb92 f2f0 	sdiv	r2, r2, r0
 8011d2e:	440a      	add	r2, r1
 8011d30:	1a9b      	subs	r3, r3, r2
 8011d32:	435b      	muls	r3, r3
 8011d34:	fb05 3505 	mla	r5, r5, r5, r3
 8011d38:	4f4c      	ldr	r7, [pc, #304]	@ (8011e6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011d3a:	ac10      	add	r4, sp, #64	@ 0x40
 8011d3c:	f1b9 0f0c 	cmp.w	r9, #12
 8011d40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d4c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011d54:	f04f 0303 	mov.w	r3, #3
 8011d58:	bfd8      	it	le
 8011d5a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011d5e:	f04f 0400 	mov.w	r4, #0
 8011d62:	f8cd 9000 	str.w	r9, [sp]
 8011d66:	bfcc      	ite	gt
 8011d68:	4698      	movgt	r8, r3
 8011d6a:	fb92 f8f3 	sdivle	r8, r2, r3
 8011d6e:	1c63      	adds	r3, r4, #1
 8011d70:	aa10      	add	r2, sp, #64	@ 0x40
 8011d72:	f004 0401 	and.w	r4, r4, #1
 8011d76:	f04f 0b00 	mov.w	fp, #0
 8011d7a:	9308      	str	r3, [sp, #32]
 8011d7c:	9b00      	ldr	r3, [sp, #0]
 8011d7e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011d82:	fb93 f3f8 	sdiv	r3, r3, r8
 8011d86:	3404      	adds	r4, #4
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	9304      	str	r3, [sp, #16]
 8011d8c:	9a04      	ldr	r2, [sp, #16]
 8011d8e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011d92:	fb13 f302 	smulbb	r3, r3, r2
 8011d96:	9a01      	ldr	r2, [sp, #4]
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	1899      	adds	r1, r3, r2
 8011d9c:	9305      	str	r3, [sp, #20]
 8011d9e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011da2:	b209      	sxth	r1, r1
 8011da4:	4299      	cmp	r1, r3
 8011da6:	db4d      	blt.n	8011e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011da8:	8932      	ldrh	r2, [r6, #8]
 8011daa:	4413      	add	r3, r2
 8011dac:	b21b      	sxth	r3, r3
 8011dae:	4299      	cmp	r1, r3
 8011db0:	da48      	bge.n	8011e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011db2:	9b04      	ldr	r3, [sp, #16]
 8011db4:	6827      	ldr	r7, [r4, #0]
 8011db6:	fb17 f703 	smulbb	r7, r7, r3
 8011dba:	9b02      	ldr	r3, [sp, #8]
 8011dbc:	b2bf      	uxth	r7, r7
 8011dbe:	18fa      	adds	r2, r7, r3
 8011dc0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011dc4:	b212      	sxth	r2, r2
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	db3c      	blt.n	8011e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011dca:	8970      	ldrh	r0, [r6, #10]
 8011dcc:	4403      	add	r3, r0
 8011dce:	b21b      	sxth	r3, r3
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	da37      	bge.n	8011e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011dda:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011ddc:	f7ff ff36 	bl	8011c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011de0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011de2:	b37a      	cbz	r2, 8011e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011de4:	4552      	cmp	r2, sl
 8011de6:	d02d      	beq.n	8011e44 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011de8:	4611      	mov	r1, r2
 8011dea:	a80e      	add	r0, sp, #56	@ 0x38
 8011dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8011dee:	f008 fe09 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011df2:	f04f 0e02 	mov.w	lr, #2
 8011df6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8011dfa:	9a06      	ldr	r2, [sp, #24]
 8011dfc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8011e00:	9b01      	ldr	r3, [sp, #4]
 8011e02:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8011e06:	4413      	add	r3, r2
 8011e08:	9a07      	ldr	r2, [sp, #28]
 8011e0a:	fb91 f1fe 	sdiv	r1, r1, lr
 8011e0e:	fb9c fcfe 	sdiv	ip, ip, lr
 8011e12:	4401      	add	r1, r0
 8011e14:	1a58      	subs	r0, r3, r1
 8011e16:	9b02      	ldr	r3, [sp, #8]
 8011e18:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8011e1c:	4413      	add	r3, r2
 8011e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e20:	448c      	add	ip, r1
 8011e22:	eba3 030c 	sub.w	r3, r3, ip
 8011e26:	435b      	muls	r3, r3
 8011e28:	fb00 3300 	mla	r3, r0, r0, r3
 8011e2c:	42ab      	cmp	r3, r5
 8011e2e:	d208      	bcs.n	8011e42 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011e30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011e32:	461d      	mov	r5, r3
 8011e34:	9803      	ldr	r0, [sp, #12]
 8011e36:	6001      	str	r1, [r0, #0]
 8011e38:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8011e3a:	9805      	ldr	r0, [sp, #20]
 8011e3c:	8008      	strh	r0, [r1, #0]
 8011e3e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8011e40:	800f      	strh	r7, [r1, #0]
 8011e42:	4692      	mov	sl, r2
 8011e44:	f10b 0b01 	add.w	fp, fp, #1
 8011e48:	3408      	adds	r4, #8
 8011e4a:	f1bb 0f04 	cmp.w	fp, #4
 8011e4e:	d19d      	bne.n	8011d8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011e50:	9b00      	ldr	r3, [sp, #0]
 8011e52:	9c08      	ldr	r4, [sp, #32]
 8011e54:	444b      	add	r3, r9
 8011e56:	4544      	cmp	r4, r8
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	d188      	bne.n	8011d6e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011e5c:	b021      	add	sp, #132	@ 0x84
 8011e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e62:	f04f 35ff 	mov.w	r5, #4294967295
 8011e66:	e767      	b.n	8011d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011e68:	240284e8 	.word	0x240284e8
 8011e6c:	08029640 	.word	0x08029640

08011e70 <_ZN8touchgfx4RectaNERKS0_>:
 8011e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e74:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011e78:	888c      	ldrh	r4, [r1, #4]
 8011e7a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011e7e:	443c      	add	r4, r7
 8011e80:	b2a4      	uxth	r4, r4
 8011e82:	fa0f f884 	sxth.w	r8, r4
 8011e86:	45c1      	cmp	r9, r8
 8011e88:	da2f      	bge.n	8011eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011e8a:	8882      	ldrh	r2, [r0, #4]
 8011e8c:	444a      	add	r2, r9
 8011e8e:	b292      	uxth	r2, r2
 8011e90:	fa0f fe82 	sxth.w	lr, r2
 8011e94:	4577      	cmp	r7, lr
 8011e96:	da28      	bge.n	8011eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011e98:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011e9c:	88cb      	ldrh	r3, [r1, #6]
 8011e9e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011ea2:	442b      	add	r3, r5
 8011ea4:	b21b      	sxth	r3, r3
 8011ea6:	429e      	cmp	r6, r3
 8011ea8:	da1f      	bge.n	8011eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011eaa:	88c3      	ldrh	r3, [r0, #6]
 8011eac:	4433      	add	r3, r6
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	fa0f fc83 	sxth.w	ip, r3
 8011eb4:	4565      	cmp	r5, ip
 8011eb6:	da18      	bge.n	8011eea <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011eb8:	454f      	cmp	r7, r9
 8011eba:	bfb8      	it	lt
 8011ebc:	464f      	movlt	r7, r9
 8011ebe:	42b5      	cmp	r5, r6
 8011ec0:	bfb8      	it	lt
 8011ec2:	4635      	movlt	r5, r6
 8011ec4:	45f0      	cmp	r8, lr
 8011ec6:	bfd8      	it	le
 8011ec8:	4622      	movle	r2, r4
 8011eca:	1bd2      	subs	r2, r2, r7
 8011ecc:	8082      	strh	r2, [r0, #4]
 8011ece:	884a      	ldrh	r2, [r1, #2]
 8011ed0:	88c9      	ldrh	r1, [r1, #6]
 8011ed2:	8007      	strh	r7, [r0, #0]
 8011ed4:	440a      	add	r2, r1
 8011ed6:	8045      	strh	r5, [r0, #2]
 8011ed8:	b292      	uxth	r2, r2
 8011eda:	b211      	sxth	r1, r2
 8011edc:	458c      	cmp	ip, r1
 8011ede:	bfa8      	it	ge
 8011ee0:	4613      	movge	r3, r2
 8011ee2:	1b5b      	subs	r3, r3, r5
 8011ee4:	80c3      	strh	r3, [r0, #6]
 8011ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eea:	2300      	movs	r3, #0
 8011eec:	8003      	strh	r3, [r0, #0]
 8011eee:	8043      	strh	r3, [r0, #2]
 8011ef0:	8083      	strh	r3, [r0, #4]
 8011ef2:	80c3      	strh	r3, [r0, #6]
 8011ef4:	e7f7      	b.n	8011ee6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011ef6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	dd06      	ble.n	8011f0c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011efe:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011f02:	2800      	cmp	r0, #0
 8011f04:	bfcc      	ite	gt
 8011f06:	2000      	movgt	r0, #0
 8011f08:	2001      	movle	r0, #1
 8011f0a:	4770      	bx	lr
 8011f0c:	2001      	movs	r0, #1
 8011f0e:	4770      	bx	lr

08011f10 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f14:	2300      	movs	r3, #0
 8011f16:	4604      	mov	r4, r0
 8011f18:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8011f1a:	8003      	strh	r3, [r0, #0]
 8011f1c:	8043      	strh	r3, [r0, #2]
 8011f1e:	8083      	strh	r3, [r0, #4]
 8011f20:	80c3      	strh	r3, [r0, #6]
 8011f22:	2d00      	cmp	r5, #0
 8011f24:	d040      	beq.n	8011fa8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011f26:	1d28      	adds	r0, r5, #4
 8011f28:	f7ff ffe5 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f2c:	b988      	cbnz	r0, 8011f52 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011f2e:	4620      	mov	r0, r4
 8011f30:	f7ff ffe1 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f34:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011f38:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011f3c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011f40:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011f44:	b138      	cbz	r0, 8011f56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011f46:	8022      	strh	r2, [r4, #0]
 8011f48:	8063      	strh	r3, [r4, #2]
 8011f4a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011f4e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011f52:	69ad      	ldr	r5, [r5, #24]
 8011f54:	e7e5      	b.n	8011f22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011f56:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011f5a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011f5e:	4290      	cmp	r0, r2
 8011f60:	4607      	mov	r7, r0
 8011f62:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011f66:	460e      	mov	r6, r1
 8011f68:	bfa8      	it	ge
 8011f6a:	4617      	movge	r7, r2
 8011f6c:	4299      	cmp	r1, r3
 8011f6e:	4472      	add	r2, lr
 8011f70:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011f74:	bfa8      	it	ge
 8011f76:	461e      	movge	r6, r3
 8011f78:	4440      	add	r0, r8
 8011f7a:	4471      	add	r1, lr
 8011f7c:	4463      	add	r3, ip
 8011f7e:	b200      	sxth	r0, r0
 8011f80:	8027      	strh	r7, [r4, #0]
 8011f82:	b212      	sxth	r2, r2
 8011f84:	8066      	strh	r6, [r4, #2]
 8011f86:	b209      	sxth	r1, r1
 8011f88:	b21b      	sxth	r3, r3
 8011f8a:	4290      	cmp	r0, r2
 8011f8c:	bfac      	ite	ge
 8011f8e:	ebc7 0200 	rsbge	r2, r7, r0
 8011f92:	ebc7 0202 	rsblt	r2, r7, r2
 8011f96:	4299      	cmp	r1, r3
 8011f98:	bfac      	ite	ge
 8011f9a:	ebc6 0301 	rsbge	r3, r6, r1
 8011f9e:	ebc6 0303 	rsblt	r3, r6, r3
 8011fa2:	80a2      	strh	r2, [r4, #4]
 8011fa4:	80e3      	strh	r3, [r4, #6]
 8011fa6:	e7d4      	b.n	8011f52 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011fa8:	4620      	mov	r0, r4
 8011faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011fae <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011fae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011fb2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8011fb6:	b383      	cbz	r3, 801201a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011fb8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011fba:	b374      	cbz	r4, 801201a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011fbc:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011fc0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011fc4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011fc8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011fcc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8011fd0:	b303      	cbz	r3, 8012014 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011fd2:	4668      	mov	r0, sp
 8011fd4:	1d21      	adds	r1, r4, #4
 8011fd6:	f8ad 5000 	strh.w	r5, [sp]
 8011fda:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011fde:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011fe2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011fe6:	f7ff ff43 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8011fea:	4668      	mov	r0, sp
 8011fec:	f7ff ff83 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011ff0:	b980      	cbnz	r0, 8012014 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011ff2:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ff6:	4669      	mov	r1, sp
 8011ff8:	88a2      	ldrh	r2, [r4, #4]
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	1a9b      	subs	r3, r3, r2
 8011ffe:	88e2      	ldrh	r2, [r4, #6]
 8012000:	f8ad 3000 	strh.w	r3, [sp]
 8012004:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012008:	1a9b      	subs	r3, r3, r2
 801200a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801200e:	6823      	ldr	r3, [r4, #0]
 8012010:	689b      	ldr	r3, [r3, #8]
 8012012:	4798      	blx	r3
 8012014:	69a4      	ldr	r4, [r4, #24]
 8012016:	2c00      	cmp	r4, #0
 8012018:	d1d8      	bne.n	8011fcc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801201a:	b002      	add	sp, #8
 801201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012020 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012020:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012022:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012026:	460d      	mov	r5, r1
 8012028:	4616      	mov	r6, r2
 801202a:	b323      	cbz	r3, 8012076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801202c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801202e:	b314      	cbz	r4, 8012076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012030:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012034:	b1eb      	cbz	r3, 8012072 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012036:	6828      	ldr	r0, [r5, #0]
 8012038:	466b      	mov	r3, sp
 801203a:	6869      	ldr	r1, [r5, #4]
 801203c:	c303      	stmia	r3!, {r0, r1}
 801203e:	4668      	mov	r0, sp
 8012040:	1d21      	adds	r1, r4, #4
 8012042:	f7ff ff15 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8012046:	4668      	mov	r0, sp
 8012048:	f7ff ff55 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801204c:	b988      	cbnz	r0, 8012072 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801204e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012052:	4669      	mov	r1, sp
 8012054:	88a2      	ldrh	r2, [r4, #4]
 8012056:	4620      	mov	r0, r4
 8012058:	1a9b      	subs	r3, r3, r2
 801205a:	88e2      	ldrh	r2, [r4, #6]
 801205c:	f8ad 3000 	strh.w	r3, [sp]
 8012060:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012064:	1a9b      	subs	r3, r3, r2
 8012066:	4632      	mov	r2, r6
 8012068:	f8ad 3002 	strh.w	r3, [sp, #2]
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012070:	4798      	blx	r3
 8012072:	69a4      	ldr	r4, [r4, #24]
 8012074:	e7db      	b.n	801202e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012076:	b002      	add	sp, #8
 8012078:	bd70      	pop	{r4, r5, r6, pc}

0801207a <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801207a:	2000      	movs	r0, #0
 801207c:	4770      	bx	lr

0801207e <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801207e:	2001      	movs	r0, #1
 8012080:	4770      	bx	lr

08012082 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 8012082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012084:	6803      	ldr	r3, [r0, #0]
 8012086:	4604      	mov	r4, r0
 8012088:	460e      	mov	r6, r1
 801208a:	4601      	mov	r1, r0
 801208c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012090:	4668      	mov	r0, sp
 8012092:	4615      	mov	r5, r2
 8012094:	4798      	blx	r3
 8012096:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 801209a:	b13b      	cbz	r3, 80120ac <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 801209c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80120a0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80120a4:	4293      	cmp	r3, r2
 80120a6:	bfac      	ite	ge
 80120a8:	2300      	movge	r3, #0
 80120aa:	2301      	movlt	r3, #1
 80120ac:	7033      	strb	r3, [r6, #0]
 80120ae:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80120b2:	b13b      	cbz	r3, 80120c4 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 80120b4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80120b8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80120bc:	4293      	cmp	r3, r2
 80120be:	bfac      	ite	ge
 80120c0:	2300      	movge	r3, #0
 80120c2:	2301      	movlt	r3, #1
 80120c4:	702b      	strb	r3, [r5, #0]
 80120c6:	b002      	add	sp, #8
 80120c8:	bd70      	pop	{r4, r5, r6, pc}

080120ca <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 80120ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120ce:	4604      	mov	r4, r0
 80120d0:	460f      	mov	r7, r1
 80120d2:	4616      	mov	r6, r2
 80120d4:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 80120d6:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 80120da:	f100 0964 	add.w	r9, r0, #100	@ 0x64
 80120de:	b15d      	cbz	r5, 80120f8 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 80120e0:	4545      	cmp	r5, r8
 80120e2:	d007      	beq.n	80120f4 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80120e4:	454d      	cmp	r5, r9
 80120e6:	d005      	beq.n	80120f4 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80120e8:	682b      	ldr	r3, [r5, #0]
 80120ea:	4632      	mov	r2, r6
 80120ec:	4639      	mov	r1, r7
 80120ee:	4628      	mov	r0, r5
 80120f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80120f2:	4798      	blx	r3
 80120f4:	69ad      	ldr	r5, [r5, #24]
 80120f6:	e7f2      	b.n	80120de <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 80120f8:	f8b4 3098 	ldrh.w	r3, [r4, #152]	@ 0x98
 80120fc:	441f      	add	r7, r3
 80120fe:	f8b4 309a 	ldrh.w	r3, [r4, #154]	@ 0x9a
 8012102:	441e      	add	r6, r3
 8012104:	f8a4 7098 	strh.w	r7, [r4, #152]	@ 0x98
 8012108:	f8a4 609a 	strh.w	r6, [r4, #154]	@ 0x9a
 801210c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012110 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 8012110:	4770      	bx	lr

08012112 <_ZN8touchgfx9DragEventD1Ev>:
 8012112:	4770      	bx	lr

08012114 <_ZN8touchgfx10ClickEventD1Ev>:
 8012114:	4770      	bx	lr

08012116 <_ZN8touchgfx10ClickEventD0Ev>:
 8012116:	b510      	push	{r4, lr}
 8012118:	4604      	mov	r4, r0
 801211a:	210c      	movs	r1, #12
 801211c:	f015 fed8 	bl	8027ed0 <_ZdlPvj>
 8012120:	4620      	mov	r0, r4
 8012122:	bd10      	pop	{r4, pc}

08012124 <_ZN8touchgfx9DragEventD0Ev>:
 8012124:	b510      	push	{r4, lr}
 8012126:	4604      	mov	r4, r0
 8012128:	2110      	movs	r1, #16
 801212a:	f015 fed1 	bl	8027ed0 <_ZdlPvj>
 801212e:	4620      	mov	r0, r4
 8012130:	bd10      	pop	{r4, pc}

08012132 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8012132:	b510      	push	{r4, lr}
 8012134:	4604      	mov	r4, r0
 8012136:	21bc      	movs	r1, #188	@ 0xbc
 8012138:	f015 feca 	bl	8027ed0 <_ZdlPvj>
 801213c:	4620      	mov	r0, r4
 801213e:	bd10      	pop	{r4, pc}

08012140 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8012140:	b570      	push	{r4, r5, r6, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	2300      	movs	r3, #0
 8012146:	460c      	mov	r4, r1
 8012148:	4605      	mov	r5, r0
 801214a:	aa06      	add	r2, sp, #24
 801214c:	f88d 3002 	strb.w	r3, [sp, #2]
 8012150:	f10d 0102 	add.w	r1, sp, #2
 8012154:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8012158:	6803      	ldr	r3, [r0, #0]
 801215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801215e:	4798      	blx	r3
 8012160:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012164:	b10b      	cbz	r3, 801216a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 8012166:	7923      	ldrb	r3, [r4, #4]
 8012168:	b133      	cbz	r3, 8012178 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 801216a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d068      	beq.n	8012244 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8012172:	7923      	ldrb	r3, [r4, #4]
 8012174:	2b01      	cmp	r3, #1
 8012176:	d165      	bne.n	8012244 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8012178:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801217c:	2a00      	cmp	r2, #0
 801217e:	bfb8      	it	lt
 8012180:	4252      	neglt	r2, r2
 8012182:	b213      	sxth	r3, r2
 8012184:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	@ 0x9c
 8012188:	429a      	cmp	r2, r3
 801218a:	dc5b      	bgt.n	8012244 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801218c:	8eaa      	ldrh	r2, [r5, #52]	@ 0x34
 801218e:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	@ 0xb8
 8012192:	429a      	cmp	r2, r3
 8012194:	bfa8      	it	ge
 8012196:	461a      	movge	r2, r3
 8012198:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	@ 0xba
 801219c:	b212      	sxth	r2, r2
 801219e:	2a05      	cmp	r2, #5
 80121a0:	bfb8      	it	lt
 80121a2:	2205      	movlt	r2, #5
 80121a4:	4351      	muls	r1, r2
 80121a6:	3a04      	subs	r2, #4
 80121a8:	fb91 f1f3 	sdiv	r1, r1, r3
 80121ac:	f8a5 10a8 	strh.w	r1, [r5, #168]	@ 0xa8
 80121b0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80121b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80121b8:	b289      	uxth	r1, r1
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80121c0:	bfcc      	ite	gt
 80121c2:	2001      	movgt	r0, #1
 80121c4:	4618      	movle	r0, r3
 80121c6:	00d3      	lsls	r3, r2, #3
 80121c8:	fb13 f300 	smulbb	r3, r3, r0
 80121cc:	b21b      	sxth	r3, r3
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f8a5 30ac 	strh.w	r3, [r5, #172]	@ 0xac
 80121d4:	bfb8      	it	lt
 80121d6:	425b      	neglt	r3, r3
 80121d8:	b21b      	sxth	r3, r3
 80121da:	428b      	cmp	r3, r1
 80121dc:	bfa8      	it	ge
 80121de:	460b      	movge	r3, r1
 80121e0:	4629      	mov	r1, r5
 80121e2:	f8a5 30a8 	strh.w	r3, [r5, #168]	@ 0xa8
 80121e6:	7922      	ldrb	r2, [r4, #4]
 80121e8:	682b      	ldr	r3, [r5, #0]
 80121ea:	2a01      	cmp	r2, #1
 80121ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121f0:	d12a      	bne.n	8012248 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x108>
 80121f2:	a801      	add	r0, sp, #4
 80121f4:	4798      	blx	r3
 80121f6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80121fa:	2601      	movs	r6, #1
 80121fc:	f8a5 30aa 	strh.w	r3, [r5, #170]	@ 0xaa
 8012200:	f885 60b0 	strb.w	r6, [r5, #176]	@ 0xb0
 8012204:	f007 faa0 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8012208:	4629      	mov	r1, r5
 801220a:	3004      	adds	r0, #4
 801220c:	f007 fb6a 	bl	80198e4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8012210:	7923      	ldrb	r3, [r4, #4]
 8012212:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 8012216:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
 801221a:	b198      	cbz	r0, 8012244 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801221c:	f895 30b6 	ldrb.w	r3, [r5, #182]	@ 0xb6
 8012220:	b983      	cbnz	r3, 8012244 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8012222:	4a0c      	ldr	r2, [pc, #48]	@ (8012254 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>)
 8012224:	a903      	add	r1, sp, #12
 8012226:	f8ad 3012 	strh.w	r3, [sp, #18]
 801222a:	9203      	str	r2, [sp, #12]
 801222c:	2202      	movs	r2, #2
 801222e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012232:	f88d 2010 	strb.w	r2, [sp, #16]
 8012236:	f8ad 3016 	strh.w	r3, [sp, #22]
 801223a:	6803      	ldr	r3, [r0, #0]
 801223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801223e:	4798      	blx	r3
 8012240:	f885 60b6 	strb.w	r6, [r5, #182]	@ 0xb6
 8012244:	b006      	add	sp, #24
 8012246:	bd70      	pop	{r4, r5, r6, pc}
 8012248:	a803      	add	r0, sp, #12
 801224a:	4798      	blx	r3
 801224c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012250:	e7d3      	b.n	80121fa <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8012252:	bf00      	nop
 8012254:	0802ca14 	.word	0x0802ca14

08012258 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8012258:	b470      	push	{r4, r5, r6}
 801225a:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
 801225e:	461d      	mov	r5, r3
 8012260:	b11e      	cbz	r6, 801226a <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8012262:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 8012266:	b116      	cbz	r6, 801226e <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8012268:	6028      	str	r0, [r5, #0]
 801226a:	bc70      	pop	{r4, r5, r6}
 801226c:	4770      	bx	lr
 801226e:	bc70      	pop	{r4, r5, r6}
 8012270:	f7ff bcec 	b.w	8011c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

08012274 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8012274:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012276:	f890 30b0 	ldrb.w	r3, [r0, #176]	@ 0xb0
 801227a:	4604      	mov	r4, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d049      	beq.n	8012314 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 8012280:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	@ 0xae
 8012284:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8012288:	3001      	adds	r0, #1
 801228a:	b280      	uxth	r0, r0
 801228c:	4298      	cmp	r0, r3
 801228e:	f8a4 00ae 	strh.w	r0, [r4, #174]	@ 0xae
 8012292:	d843      	bhi.n	801231c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa8>
 8012294:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8012298:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801229c:	f009 fb70 	bl	801b980 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80122a0:	4605      	mov	r5, r0
 80122a2:	b282      	uxth	r2, r0
 80122a4:	f012 0301 	ands.w	r3, r2, #1
 80122a8:	d006      	beq.n	80122b8 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 80122aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80122ae:	2800      	cmp	r0, #0
 80122b0:	bfd8      	it	le
 80122b2:	460b      	movle	r3, r1
 80122b4:	18d5      	adds	r5, r2, r3
 80122b6:	b22d      	sxth	r5, r5
 80122b8:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d02b      	beq.n	8012318 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa4>
 80122c0:	6823      	ldr	r3, [r4, #0]
 80122c2:	4621      	mov	r1, r4
 80122c4:	4668      	mov	r0, sp
 80122c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122ca:	4798      	blx	r3
 80122cc:	f8bd 6000 	ldrh.w	r6, [sp]
 80122d0:	1bae      	subs	r6, r5, r6
 80122d2:	b236      	sxth	r6, r6
 80122d4:	f894 2036 	ldrb.w	r2, [r4, #54]	@ 0x36
 80122d8:	b14a      	cbz	r2, 80122ee <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	4621      	mov	r1, r4
 80122de:	4668      	mov	r0, sp
 80122e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122e4:	4798      	blx	r3
 80122e6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80122ea:	1aad      	subs	r5, r5, r2
 80122ec:	b22a      	sxth	r2, r5
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	4631      	mov	r1, r6
 80122f2:	4620      	mov	r0, r4
 80122f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122f8:	4798      	blx	r3
 80122fa:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
 80122fe:	f894 50b0 	ldrb.w	r5, [r4, #176]	@ 0xb0
 8012302:	b93d      	cbnz	r5, 8012314 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 8012304:	f007 fa20 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8012308:	4621      	mov	r1, r4
 801230a:	3004      	adds	r0, #4
 801230c:	f007 fa41 	bl	8019792 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012310:	f8a4 50ae 	strh.w	r5, [r4, #174]	@ 0xae
 8012314:	b002      	add	sp, #8
 8012316:	bd70      	pop	{r4, r5, r6, pc}
 8012318:	2600      	movs	r6, #0
 801231a:	e7db      	b.n	80122d4 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 801231c:	2300      	movs	r3, #0
 801231e:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
 8012322:	e7ec      	b.n	80122fe <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

08012324 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	b08b      	sub	sp, #44	@ 0x2c
 801232a:	2300      	movs	r3, #0
 801232c:	4604      	mov	r4, r0
 801232e:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012332:	aa0a      	add	r2, sp, #40	@ 0x28
 8012334:	f88d 3006 	strb.w	r3, [sp, #6]
 8012338:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 801233c:	460f      	mov	r7, r1
 801233e:	f802 3d21 	strb.w	r3, [r2, #-33]!
 8012342:	6803      	ldr	r3, [r0, #0]
 8012344:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8012348:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 801234c:	f10d 0106 	add.w	r1, sp, #6
 8012350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012354:	4798      	blx	r3
 8012356:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 801235a:	2900      	cmp	r1, #0
 801235c:	d03d      	beq.n	80123da <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801235e:	42a1      	cmp	r1, r4
 8012360:	d03b      	beq.n	80123da <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8012362:	a802      	add	r0, sp, #8
 8012364:	f008 fb4e 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012368:	4621      	mov	r1, r4
 801236a:	a804      	add	r0, sp, #16
 801236c:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8012370:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8012374:	f008 fb46 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012378:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801237c:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 8012380:	eba3 030b 	sub.w	r3, r3, fp
 8012384:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8012388:	88f9      	ldrh	r1, [r7, #6]
 801238a:	4413      	add	r3, r2
 801238c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012390:	f89d c006 	ldrb.w	ip, [sp, #6]
 8012394:	eba2 020a 	sub.w	r2, r2, sl
 8012398:	b29b      	uxth	r3, r3
 801239a:	4402      	add	r2, r0
 801239c:	8938      	ldrh	r0, [r7, #8]
 801239e:	4419      	add	r1, r3
 80123a0:	b292      	uxth	r2, r2
 80123a2:	b209      	sxth	r1, r1
 80123a4:	4410      	add	r0, r2
 80123a6:	b200      	sxth	r0, r0
 80123a8:	f1bc 0f00 	cmp.w	ip, #0
 80123ac:	f040 808d 	bne.w	80124ca <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 80123b0:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 80123b4:	4473      	add	r3, lr
 80123b6:	b21b      	sxth	r3, r3
 80123b8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80123bc:	f1be 0f00 	cmp.w	lr, #0
 80123c0:	f040 80b1 	bne.w	8012526 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 80123c4:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 80123c8:	4472      	add	r2, lr
 80123ca:	b212      	sxth	r2, r2
 80123cc:	f1bc 0f00 	cmp.w	ip, #0
 80123d0:	f000 80c8 	beq.w	8012564 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 80123d4:	4290      	cmp	r0, r2
 80123d6:	f040 80ae 	bne.w	8012536 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 80123da:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 80123de:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f040 8099 	bne.w	801251a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 80123e8:	897d      	ldrh	r5, [r7, #10]
 80123ea:	89be      	ldrh	r6, [r7, #12]
 80123ec:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 80123f0:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	@ 0xb4
 80123f4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	@ 0x9e
 80123f8:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	@ 0xa0
 80123fc:	4411      	add	r1, r2
 80123fe:	442a      	add	r2, r5
 8012400:	449c      	add	ip, r3
 8012402:	4433      	add	r3, r6
 8012404:	b292      	uxth	r2, r2
 8012406:	f89d 7006 	ldrb.w	r7, [sp, #6]
 801240a:	b29b      	uxth	r3, r3
 801240c:	b289      	uxth	r1, r1
 801240e:	fa1f fc8c 	uxth.w	ip, ip
 8012412:	b215      	sxth	r5, r2
 8012414:	b21e      	sxth	r6, r3
 8012416:	b15f      	cbz	r7, 8012430 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8012418:	1a52      	subs	r2, r2, r1
 801241a:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	@ 0x9c
 801241e:	b212      	sxth	r2, r2
 8012420:	2a00      	cmp	r2, #0
 8012422:	bfb8      	it	lt
 8012424:	4252      	neglt	r2, r2
 8012426:	b212      	sxth	r2, r2
 8012428:	4297      	cmp	r7, r2
 801242a:	bfac      	ite	ge
 801242c:	2700      	movge	r7, #0
 801242e:	2701      	movlt	r7, #1
 8012430:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012434:	b152      	cbz	r2, 801244c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 8012436:	eba3 030c 	sub.w	r3, r3, ip
 801243a:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	@ 0x9c
 801243e:	b21b      	sxth	r3, r3
 8012440:	2b00      	cmp	r3, #0
 8012442:	bfb8      	it	lt
 8012444:	425b      	neglt	r3, r3
 8012446:	b21b      	sxth	r3, r3
 8012448:	429a      	cmp	r2, r3
 801244a:	db01      	blt.n	8012450 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 801244c:	2f00      	cmp	r7, #0
 801244e:	d03e      	beq.n	80124ce <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8012450:	2701      	movs	r7, #1
 8012452:	fa0f f881 	sxth.w	r8, r1
 8012456:	fa0f f98c 	sxth.w	r9, ip
 801245a:	f884 70a3 	strb.w	r7, [r4, #163]	@ 0xa3
 801245e:	b1a0      	cbz	r0, 801248a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8012460:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 8012464:	b98b      	cbnz	r3, 801248a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8012466:	4a41      	ldr	r2, [pc, #260]	@ (801256c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8012468:	a906      	add	r1, sp, #24
 801246a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801246e:	9206      	str	r2, [sp, #24]
 8012470:	2202      	movs	r2, #2
 8012472:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012476:	f88d 201c 	strb.w	r2, [sp, #28]
 801247a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801247e:	6803      	ldr	r3, [r0, #0]
 8012480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012482:	4798      	blx	r3
 8012484:	2301      	movs	r3, #1
 8012486:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 801248a:	f894 10a4 	ldrb.w	r1, [r4, #164]	@ 0xa4
 801248e:	b149      	cbz	r1, 80124a4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8012490:	eba5 0108 	sub.w	r1, r5, r8
 8012494:	b209      	sxth	r1, r1
 8012496:	b12f      	cbz	r7, 80124a4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8012498:	2900      	cmp	r1, #0
 801249a:	dc40      	bgt.n	801251e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 801249c:	bf14      	ite	ne
 801249e:	f04f 31ff 	movne.w	r1, #4294967295
 80124a2:	2100      	moveq	r1, #0
 80124a4:	f894 20a5 	ldrb.w	r2, [r4, #165]	@ 0xa5
 80124a8:	b14a      	cbz	r2, 80124be <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80124aa:	eba6 0609 	sub.w	r6, r6, r9
 80124ae:	b232      	sxth	r2, r6
 80124b0:	b12f      	cbz	r7, 80124be <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80124b2:	2a00      	cmp	r2, #0
 80124b4:	dc35      	bgt.n	8012522 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 80124b6:	bf14      	ite	ne
 80124b8:	f04f 32ff 	movne.w	r2, #4294967295
 80124bc:	2200      	moveq	r2, #0
 80124be:	6823      	ldr	r3, [r4, #0]
 80124c0:	4620      	mov	r0, r4
 80124c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80124c6:	4798      	blx	r3
 80124c8:	e024      	b.n	8012514 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80124ca:	460b      	mov	r3, r1
 80124cc:	e774      	b.n	80123b8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 80124ce:	b308      	cbz	r0, 8012514 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80124d0:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 80124d4:	b9f3      	cbnz	r3, 8012514 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80124d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80124d8:	4620      	mov	r0, r4
 80124da:	4632      	mov	r2, r6
 80124dc:	4629      	mov	r1, r5
 80124de:	f843 7d18 	str.w	r7, [r3, #-24]!
 80124e2:	f7ff fbb3 	bl	8011c4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80124e6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80124ea:	9b04      	ldr	r3, [sp, #16]
 80124ec:	4298      	cmp	r0, r3
 80124ee:	d011      	beq.n	8012514 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80124f0:	4b1e      	ldr	r3, [pc, #120]	@ (801256c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 80124f2:	a906      	add	r1, sp, #24
 80124f4:	f8ad 701e 	strh.w	r7, [sp, #30]
 80124f8:	9306      	str	r3, [sp, #24]
 80124fa:	2302      	movs	r3, #2
 80124fc:	f8ad 7020 	strh.w	r7, [sp, #32]
 8012500:	f88d 301c 	strb.w	r3, [sp, #28]
 8012504:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8012508:	6803      	ldr	r3, [r0, #0]
 801250a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801250c:	4798      	blx	r3
 801250e:	2301      	movs	r3, #1
 8012510:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 8012514:	b00b      	add	sp, #44	@ 0x2c
 8012516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251a:	2700      	movs	r7, #0
 801251c:	e79f      	b.n	801245e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 801251e:	2101      	movs	r1, #1
 8012520:	e7c0      	b.n	80124a4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8012522:	2201      	movs	r2, #1
 8012524:	e7cb      	b.n	80124be <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8012526:	f1bc 0f00 	cmp.w	ip, #0
 801252a:	f47f af56 	bne.w	80123da <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801252e:	428b      	cmp	r3, r1
 8012530:	f43f af53 	beq.w	80123da <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8012534:	4602      	mov	r2, r0
 8012536:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8012570 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 801253a:	f8ad 0020 	strh.w	r0, [sp, #32]
 801253e:	f8cd c018 	str.w	ip, [sp, #24]
 8012542:	f04f 0c00 	mov.w	ip, #0
 8012546:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801254a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801254e:	a906      	add	r1, sp, #24
 8012550:	f88d c01c 	strb.w	ip, [sp, #28]
 8012554:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8012558:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 801255c:	6803      	ldr	r3, [r0, #0]
 801255e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012560:	4798      	blx	r3
 8012562:	e73a      	b.n	80123da <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8012564:	428b      	cmp	r3, r1
 8012566:	f43f af35 	beq.w	80123d4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 801256a:	e7e4      	b.n	8012536 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 801256c:	0802ca14 	.word	0x0802ca14
 8012570:	0802ca28 	.word	0x0802ca28

08012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012576:	4604      	mov	r4, r0
 8012578:	4608      	mov	r0, r1
 801257a:	460d      	mov	r5, r1
 801257c:	f7ff fcbb 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012580:	b978      	cbnz	r0, 80125a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012582:	4620      	mov	r0, r4
 8012584:	f7ff fcb7 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012588:	f9b5 6000 	ldrsh.w	r6, [r5]
 801258c:	b150      	cbz	r0, 80125a4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801258e:	8026      	strh	r6, [r4, #0]
 8012590:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012594:	8063      	strh	r3, [r4, #2]
 8012596:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801259a:	80a3      	strh	r3, [r4, #4]
 801259c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80125a0:	80e3      	strh	r3, [r4, #6]
 80125a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125a4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80125a8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80125ac:	42b1      	cmp	r1, r6
 80125ae:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80125b2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80125b6:	460f      	mov	r7, r1
 80125b8:	88ed      	ldrh	r5, [r5, #6]
 80125ba:	bfa8      	it	ge
 80125bc:	4637      	movge	r7, r6
 80125be:	4293      	cmp	r3, r2
 80125c0:	4618      	mov	r0, r3
 80125c2:	4466      	add	r6, ip
 80125c4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80125c8:	bfa8      	it	ge
 80125ca:	4610      	movge	r0, r2
 80125cc:	442a      	add	r2, r5
 80125ce:	88e5      	ldrh	r5, [r4, #6]
 80125d0:	4461      	add	r1, ip
 80125d2:	b236      	sxth	r6, r6
 80125d4:	8027      	strh	r7, [r4, #0]
 80125d6:	442b      	add	r3, r5
 80125d8:	b209      	sxth	r1, r1
 80125da:	b212      	sxth	r2, r2
 80125dc:	8060      	strh	r0, [r4, #2]
 80125de:	b21b      	sxth	r3, r3
 80125e0:	428e      	cmp	r6, r1
 80125e2:	bfac      	ite	ge
 80125e4:	ebc7 0106 	rsbge	r1, r7, r6
 80125e8:	ebc7 0101 	rsblt	r1, r7, r1
 80125ec:	429a      	cmp	r2, r3
 80125ee:	bfac      	ite	ge
 80125f0:	ebc0 0202 	rsbge	r2, r0, r2
 80125f4:	ebc0 0203 	rsblt	r2, r0, r3
 80125f8:	80a1      	strh	r1, [r4, #4]
 80125fa:	80e2      	strh	r2, [r4, #6]
 80125fc:	e7d1      	b.n	80125a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080125fe <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 80125fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012600:	4604      	mov	r4, r0
 8012602:	2200      	movs	r2, #0
 8012604:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8012608:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 801260c:	680b      	ldr	r3, [r1, #0]
 801260e:	8022      	strh	r2, [r4, #0]
 8012610:	8062      	strh	r2, [r4, #2]
 8012612:	80e0      	strh	r0, [r4, #6]
 8012614:	4668      	mov	r0, sp
 8012616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801261a:	80a5      	strh	r5, [r4, #4]
 801261c:	4798      	blx	r3
 801261e:	4620      	mov	r0, r4
 8012620:	4669      	mov	r1, sp
 8012622:	f7ff ffa7 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012626:	4620      	mov	r0, r4
 8012628:	b003      	add	sp, #12
 801262a:	bd30      	pop	{r4, r5, pc}

0801262c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 801262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262e:	2300      	movs	r3, #0
 8012630:	4605      	mov	r5, r0
 8012632:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8012634:	f101 0738 	add.w	r7, r1, #56	@ 0x38
 8012638:	f101 0664 	add.w	r6, r1, #100	@ 0x64
 801263c:	8003      	strh	r3, [r0, #0]
 801263e:	8043      	strh	r3, [r0, #2]
 8012640:	8083      	strh	r3, [r0, #4]
 8012642:	80c3      	strh	r3, [r0, #6]
 8012644:	b164      	cbz	r4, 8012660 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8012646:	42bc      	cmp	r4, r7
 8012648:	d008      	beq.n	801265c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 801264a:	42b4      	cmp	r4, r6
 801264c:	d006      	beq.n	801265c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 801264e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012652:	b11b      	cbz	r3, 801265c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8012654:	1d21      	adds	r1, r4, #4
 8012656:	4628      	mov	r0, r5
 8012658:	f7ff ff8c 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801265c:	69a4      	ldr	r4, [r4, #24]
 801265e:	e7f1      	b.n	8012644 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8012660:	4628      	mov	r0, r5
 8012662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012664 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8012664:	b570      	push	{r4, r5, r6, lr}
 8012666:	6803      	ldr	r3, [r0, #0]
 8012668:	4604      	mov	r4, r0
 801266a:	4615      	mov	r5, r2
 801266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801266e:	4798      	blx	r3
 8012670:	6823      	ldr	r3, [r4, #0]
 8012672:	4629      	mov	r1, r5
 8012674:	4620      	mov	r0, r4
 8012676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801267c:	4718      	bx	r3
	...

08012680 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8012680:	b530      	push	{r4, r5, lr}
 8012682:	2500      	movs	r5, #0
 8012684:	6283      	str	r3, [r0, #40]	@ 0x28
 8012686:	8101      	strh	r1, [r0, #8]
 8012688:	8085      	strh	r5, [r0, #4]
 801268a:	80c5      	strh	r5, [r0, #6]
 801268c:	8185      	strh	r5, [r0, #12]
 801268e:	81c5      	strh	r5, [r0, #14]
 8012690:	8205      	strh	r5, [r0, #16]
 8012692:	8245      	strh	r5, [r0, #18]
 8012694:	61c5      	str	r5, [r0, #28]
 8012696:	8405      	strh	r5, [r0, #32]
 8012698:	8445      	strh	r5, [r0, #34]	@ 0x22
 801269a:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 801269e:	8142      	strh	r2, [r0, #10]
 80126a0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80126a4:	2501      	movs	r5, #1
 80126a6:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 80126aa:	4d03      	ldr	r5, [pc, #12]	@ (80126b8 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 80126ac:	6005      	str	r5, [r0, #0]
 80126ae:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80126b2:	f880 5026 	strb.w	r5, [r0, #38]	@ 0x26
 80126b6:	bd30      	pop	{r4, r5, pc}
 80126b8:	0802d080 	.word	0x0802d080

080126bc <_ZN8touchgfx19ScrollableContainerC1Ev>:
 80126bc:	4b2f      	ldr	r3, [pc, #188]	@ (801277c <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 80126be:	2278      	movs	r2, #120	@ 0x78
 80126c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126c2:	6003      	str	r3, [r0, #0]
 80126c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80126c8:	2500      	movs	r5, #0
 80126ca:	2601      	movs	r6, #1
 80126cc:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80126ce:	2111      	movs	r1, #17
 80126d0:	f04f 33ff 	mov.w	r3, #4294967295
 80126d4:	4604      	mov	r4, r0
 80126d6:	8085      	strh	r5, [r0, #4]
 80126d8:	80c5      	strh	r5, [r0, #6]
 80126da:	8105      	strh	r5, [r0, #8]
 80126dc:	8145      	strh	r5, [r0, #10]
 80126de:	8185      	strh	r5, [r0, #12]
 80126e0:	81c5      	strh	r5, [r0, #14]
 80126e2:	8205      	strh	r5, [r0, #16]
 80126e4:	8245      	strh	r5, [r0, #18]
 80126e6:	61c5      	str	r5, [r0, #28]
 80126e8:	8405      	strh	r5, [r0, #32]
 80126ea:	8445      	strh	r5, [r0, #34]	@ 0x22
 80126ec:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 80126f0:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
 80126f4:	6285      	str	r5, [r0, #40]	@ 0x28
 80126f6:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 80126fa:	6303      	str	r3, [r0, #48]	@ 0x30
 80126fc:	8681      	strh	r1, [r0, #52]	@ 0x34
 80126fe:	4629      	mov	r1, r5
 8012700:	f880 5036 	strb.w	r5, [r0, #54]	@ 0x36
 8012704:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8012708:	9200      	str	r2, [sp, #0]
 801270a:	3038      	adds	r0, #56	@ 0x38
 801270c:	462a      	mov	r2, r5
 801270e:	f7ff ffb7 	bl	8012680 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8012712:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012716:	462a      	mov	r2, r5
 8012718:	4629      	mov	r1, r5
 801271a:	9300      	str	r3, [sp, #0]
 801271c:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8012720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012722:	f7ff ffad 	bl	8012680 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8012726:	2305      	movs	r3, #5
 8012728:	4620      	mov	r0, r4
 801272a:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
 801272e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8012732:	4b13      	ldr	r3, [pc, #76]	@ (8012780 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8012734:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8012738:	f884 50a2 	strb.w	r5, [r4, #162]	@ 0xa2
 801273c:	f884 50a3 	strb.w	r5, [r4, #163]	@ 0xa3
 8012740:	f884 60a4 	strb.w	r6, [r4, #164]	@ 0xa4
 8012744:	f884 60a5 	strb.w	r6, [r4, #165]	@ 0xa5
 8012748:	f884 60a6 	strb.w	r6, [r4, #166]	@ 0xa6
 801274c:	f884 50a7 	strb.w	r5, [r4, #167]	@ 0xa7
 8012750:	f884 50b0 	strb.w	r5, [r4, #176]	@ 0xb0
 8012754:	f8a4 50b2 	strh.w	r5, [r4, #178]	@ 0xb2
 8012758:	f8a4 50b4 	strh.w	r5, [r4, #180]	@ 0xb4
 801275c:	f884 50b6 	strb.w	r5, [r4, #182]	@ 0xb6
 8012760:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8012764:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8012768:	f884 5089 	strb.w	r5, [r4, #137]	@ 0x89
 801276c:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8012770:	e9c4 5524 	strd	r5, r5, [r4, #144]	@ 0x90
 8012774:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 8012778:	b002      	add	sp, #8
 801277a:	bd70      	pop	{r4, r5, r6, pc}
 801277c:	0802ca3c 	.word	0x0802ca3c
 8012780:	00010007 	.word	0x00010007

08012784 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 8012784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012786:	2600      	movs	r6, #0
 8012788:	f891 30a4 	ldrb.w	r3, [r1, #164]	@ 0xa4
 801278c:	4605      	mov	r5, r0
 801278e:	460c      	mov	r4, r1
 8012790:	8006      	strh	r6, [r0, #0]
 8012792:	8046      	strh	r6, [r0, #2]
 8012794:	8086      	strh	r6, [r0, #4]
 8012796:	80c6      	strh	r6, [r0, #6]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d041      	beq.n	8012820 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801279c:	680b      	ldr	r3, [r1, #0]
 801279e:	4668      	mov	r0, sp
 80127a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127a4:	4798      	blx	r3
 80127a6:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80127aa:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d039      	beq.n	8012826 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 80127b2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80127b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	dd05      	ble.n	80127ca <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 80127be:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80127c2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80127c6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80127ca:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80127ce:	42bb      	cmp	r3, r7
 80127d0:	da26      	bge.n	8012820 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 80127d2:	f9bd 0000 	ldrsh.w	r0, [sp]
 80127d6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80127da:	4242      	negs	r2, r0
 80127dc:	4438      	add	r0, r7
 80127de:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80127e2:	b200      	sxth	r0, r0
 80127e4:	435a      	muls	r2, r3
 80127e6:	1b9e      	subs	r6, r3, r6
 80127e8:	1ac0      	subs	r0, r0, r3
 80127ea:	4343      	muls	r3, r0
 80127ec:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80127f0:	fb92 f2f7 	sdiv	r2, r2, r7
 80127f4:	fb93 f3f7 	sdiv	r3, r3, r7
 80127f8:	4413      	add	r3, r2
 80127fa:	0047      	lsls	r7, r0, #1
 80127fc:	1af3      	subs	r3, r6, r3
 80127fe:	429f      	cmp	r7, r3
 8012800:	dd05      	ble.n	801280e <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 8012802:	1afb      	subs	r3, r7, r3
 8012804:	4353      	muls	r3, r2
 8012806:	fb93 f3f6 	sdiv	r3, r3, r6
 801280a:	1ad2      	subs	r2, r2, r3
 801280c:	463b      	mov	r3, r7
 801280e:	b289      	uxth	r1, r1
 8012810:	8964      	ldrh	r4, [r4, #10]
 8012812:	80ab      	strh	r3, [r5, #4]
 8012814:	180e      	adds	r6, r1, r0
 8012816:	4411      	add	r1, r2
 8012818:	80e8      	strh	r0, [r5, #6]
 801281a:	1ba4      	subs	r4, r4, r6
 801281c:	8029      	strh	r1, [r5, #0]
 801281e:	806c      	strh	r4, [r5, #2]
 8012820:	4628      	mov	r0, r5
 8012822:	b003      	add	sp, #12
 8012824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012826:	461e      	mov	r6, r3
 8012828:	e7cf      	b.n	80127ca <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

0801282a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 801282a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801282c:	2600      	movs	r6, #0
 801282e:	f891 30a5 	ldrb.w	r3, [r1, #165]	@ 0xa5
 8012832:	4605      	mov	r5, r0
 8012834:	460c      	mov	r4, r1
 8012836:	8006      	strh	r6, [r0, #0]
 8012838:	8046      	strh	r6, [r0, #2]
 801283a:	8086      	strh	r6, [r0, #4]
 801283c:	80c6      	strh	r6, [r0, #6]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d041      	beq.n	80128c6 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8012842:	680b      	ldr	r3, [r1, #0]
 8012844:	4668      	mov	r0, sp
 8012846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801284a:	4798      	blx	r3
 801284c:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8012850:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d039      	beq.n	80128cc <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8012858:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801285c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012860:	429a      	cmp	r2, r3
 8012862:	dd05      	ble.n	8012870 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 8012864:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012868:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801286c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8012870:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012874:	42bb      	cmp	r3, r7
 8012876:	da26      	bge.n	80128c6 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8012878:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 801287c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012880:	4242      	negs	r2, r0
 8012882:	4438      	add	r0, r7
 8012884:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8012888:	b200      	sxth	r0, r0
 801288a:	435a      	muls	r2, r3
 801288c:	1b9e      	subs	r6, r3, r6
 801288e:	1ac0      	subs	r0, r0, r3
 8012890:	4343      	muls	r3, r0
 8012892:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012896:	fb92 f2f7 	sdiv	r2, r2, r7
 801289a:	fb93 f3f7 	sdiv	r3, r3, r7
 801289e:	4413      	add	r3, r2
 80128a0:	0047      	lsls	r7, r0, #1
 80128a2:	1af3      	subs	r3, r6, r3
 80128a4:	429f      	cmp	r7, r3
 80128a6:	dd05      	ble.n	80128b4 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 80128a8:	1afb      	subs	r3, r7, r3
 80128aa:	4353      	muls	r3, r2
 80128ac:	fb93 f3f6 	sdiv	r3, r3, r6
 80128b0:	1ad2      	subs	r2, r2, r3
 80128b2:	463b      	mov	r3, r7
 80128b4:	b289      	uxth	r1, r1
 80128b6:	8924      	ldrh	r4, [r4, #8]
 80128b8:	80a8      	strh	r0, [r5, #4]
 80128ba:	180e      	adds	r6, r1, r0
 80128bc:	4411      	add	r1, r2
 80128be:	80eb      	strh	r3, [r5, #6]
 80128c0:	1ba4      	subs	r4, r4, r6
 80128c2:	8069      	strh	r1, [r5, #2]
 80128c4:	802c      	strh	r4, [r5, #0]
 80128c6:	4628      	mov	r0, r5
 80128c8:	b003      	add	sp, #12
 80128ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128cc:	461e      	mov	r6, r3
 80128ce:	e7cf      	b.n	8012870 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

080128d0 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 80128d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d4:	4617      	mov	r7, r2
 80128d6:	2200      	movs	r2, #0
 80128d8:	4604      	mov	r4, r0
 80128da:	460e      	mov	r6, r1
 80128dc:	8002      	strh	r2, [r0, #0]
 80128de:	4698      	mov	r8, r3
 80128e0:	8042      	strh	r2, [r0, #2]
 80128e2:	8082      	strh	r2, [r0, #4]
 80128e4:	80c2      	strh	r2, [r0, #6]
 80128e6:	4638      	mov	r0, r7
 80128e8:	f7ff fb05 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80128ec:	4605      	mov	r5, r0
 80128ee:	b998      	cbnz	r0, 8012918 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 80128f0:	4640      	mov	r0, r8
 80128f2:	f7ff fb00 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80128f6:	f896 202c 	ldrb.w	r2, [r6, #44]	@ 0x2c
 80128fa:	f896 102d 	ldrb.w	r1, [r6, #45]	@ 0x2d
 80128fe:	b908      	cbnz	r0, 8012904 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8012900:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8012904:	8933      	ldrh	r3, [r6, #8]
 8012906:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 801290a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801290e:	8022      	strh	r2, [r4, #0]
 8012910:	8067      	strh	r7, [r4, #2]
 8012912:	1b58      	subs	r0, r3, r5
 8012914:	80e1      	strh	r1, [r4, #6]
 8012916:	80a0      	strh	r0, [r4, #4]
 8012918:	4620      	mov	r0, r4
 801291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801291e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 801291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012922:	4604      	mov	r4, r0
 8012924:	2000      	movs	r0, #0
 8012926:	460f      	mov	r7, r1
 8012928:	4616      	mov	r6, r2
 801292a:	8020      	strh	r0, [r4, #0]
 801292c:	4698      	mov	r8, r3
 801292e:	8060      	strh	r0, [r4, #2]
 8012930:	80a0      	strh	r0, [r4, #4]
 8012932:	80e0      	strh	r0, [r4, #6]
 8012934:	4618      	mov	r0, r3
 8012936:	f7ff fade 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801293a:	4605      	mov	r5, r0
 801293c:	b998      	cbnz	r0, 8012966 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 801293e:	4630      	mov	r0, r6
 8012940:	f7ff fad9 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012944:	f897 602c 	ldrb.w	r6, [r7, #44]	@ 0x2c
 8012948:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 801294c:	b908      	cbnz	r0, 8012952 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 801294e:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8012952:	897a      	ldrh	r2, [r7, #10]
 8012954:	f8b8 3000 	ldrh.w	r3, [r8]
 8012958:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 801295c:	8066      	strh	r6, [r4, #2]
 801295e:	8023      	strh	r3, [r4, #0]
 8012960:	1b50      	subs	r0, r2, r5
 8012962:	80a1      	strh	r1, [r4, #4]
 8012964:	80e0      	strh	r0, [r4, #6]
 8012966:	4620      	mov	r0, r4
 8012968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801296c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 801296c:	b570      	push	{r4, r5, r6, lr}
 801296e:	b088      	sub	sp, #32
 8012970:	4604      	mov	r4, r0
 8012972:	4601      	mov	r1, r0
 8012974:	4668      	mov	r0, sp
 8012976:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 801297a:	f7ff ff03 	bl	8012784 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 801297e:	4621      	mov	r1, r4
 8012980:	a802      	add	r0, sp, #8
 8012982:	f7ff ff52 	bl	801282a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8012986:	ab02      	add	r3, sp, #8
 8012988:	466a      	mov	r2, sp
 801298a:	4621      	mov	r1, r4
 801298c:	a804      	add	r0, sp, #16
 801298e:	f7ff ff9f 	bl	80128d0 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8012992:	ab02      	add	r3, sp, #8
 8012994:	466a      	mov	r2, sp
 8012996:	4621      	mov	r1, r4
 8012998:	a806      	add	r0, sp, #24
 801299a:	f7ff ffc0 	bl	801291e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 801299e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80129a2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 80129a6:	429a      	cmp	r2, r3
 80129a8:	da02      	bge.n	80129b0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 80129aa:	4630      	mov	r0, r6
 80129ac:	f007 ff8f 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 80129b0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80129b4:	f104 0564 	add.w	r5, r4, #100	@ 0x64
 80129b8:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	@ 0x68
 80129bc:	429a      	cmp	r2, r3
 80129be:	da02      	bge.n	80129c6 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 80129c0:	4628      	mov	r0, r5
 80129c2:	f007 ff84 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 80129c6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80129ca:	f8bd 0000 	ldrh.w	r0, [sp]
 80129ce:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80129d2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80129d6:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 80129d8:	4630      	mov	r0, r6
 80129da:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80129dc:	f7ff fe42 	bl	8012664 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80129e0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80129e4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80129e8:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80129ec:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 80129f0:	4628      	mov	r0, r5
 80129f2:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 80129f6:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80129fa:	f7ff fe33 	bl	8012664 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80129fe:	8922      	ldrh	r2, [r4, #8]
 8012a00:	2300      	movs	r3, #0
 8012a02:	a804      	add	r0, sp, #16
 8012a04:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012a08:	8962      	ldrh	r2, [r4, #10]
 8012a0a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8012a0e:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012a12:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012a16:	f7ff fa6e 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a1a:	b920      	cbnz	r0, 8012a26 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8012a1c:	6823      	ldr	r3, [r4, #0]
 8012a1e:	a904      	add	r1, sp, #16
 8012a20:	4620      	mov	r0, r4
 8012a22:	691b      	ldr	r3, [r3, #16]
 8012a24:	4798      	blx	r3
 8012a26:	a806      	add	r0, sp, #24
 8012a28:	f7ff fa65 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a2c:	b920      	cbnz	r0, 8012a38 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8012a2e:	6823      	ldr	r3, [r4, #0]
 8012a30:	a906      	add	r1, sp, #24
 8012a32:	4620      	mov	r0, r4
 8012a34:	691b      	ldr	r3, [r3, #16]
 8012a36:	4798      	blx	r3
 8012a38:	b008      	add	sp, #32
 8012a3a:	bd70      	pop	{r4, r5, r6, pc}

08012a3c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8012a3c:	b570      	push	{r4, r5, r6, lr}
 8012a3e:	790b      	ldrb	r3, [r1, #4]
 8012a40:	b08a      	sub	sp, #40	@ 0x28
 8012a42:	4604      	mov	r4, r0
 8012a44:	460d      	mov	r5, r1
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d17f      	bne.n	8012b4a <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10e>
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
 8012a50:	f890 20b0 	ldrb.w	r2, [r0, #176]	@ 0xb0
 8012a54:	b14a      	cbz	r2, 8012a6a <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2e>
 8012a56:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8012a5a:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
 8012a5e:	f006 fe73 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8012a62:	4621      	mov	r1, r4
 8012a64:	3004      	adds	r0, #4
 8012a66:	f006 fe94 	bl	8019792 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8012a6a:	4623      	mov	r3, r4
 8012a6c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8012a70:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8012a74:	f853 0bb4 	ldr.w	r0, [r3], #180
 8012a78:	9301      	str	r3, [sp, #4]
 8012a7a:	f104 03b2 	add.w	r3, r4, #178	@ 0xb2
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 8012a84:	6f86      	ldr	r6, [r0, #120]	@ 0x78
 8012a86:	4620      	mov	r0, r4
 8012a88:	47b0      	blx	r6
 8012a8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8012a8e:	42a3      	cmp	r3, r4
 8012a90:	bf04      	itt	eq
 8012a92:	2300      	moveq	r3, #0
 8012a94:	f8c4 3090 	streq.w	r3, [r4, #144]	@ 0x90
 8012a98:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8012a9c:	2900      	cmp	r1, #0
 8012a9e:	d03a      	beq.n	8012b16 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8012aa0:	2600      	movs	r6, #0
 8012aa2:	a803      	add	r0, sp, #12
 8012aa4:	f884 60b6 	strb.w	r6, [r4, #182]	@ 0xb6
 8012aa8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012aac:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 8012ab0:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8012ab4:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 8012ab8:	f007 ffa4 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012abc:	4621      	mov	r1, r4
 8012abe:	a805      	add	r0, sp, #20
 8012ac0:	f007 ffa0 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ac4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012ac8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012acc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8012ad0:	1ad2      	subs	r2, r2, r3
 8012ad2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8012ad6:	7929      	ldrb	r1, [r5, #4]
 8012ad8:	441a      	add	r2, r3
 8012ada:	88eb      	ldrh	r3, [r5, #6]
 8012adc:	f88d 1020 	strb.w	r1, [sp, #32]
 8012ae0:	a907      	add	r1, sp, #28
 8012ae2:	441a      	add	r2, r3
 8012ae4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012ae8:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8012aec:	1a1b      	subs	r3, r3, r0
 8012aee:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8012af2:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 8012af6:	4403      	add	r3, r0
 8012af8:	8928      	ldrh	r0, [r5, #8]
 8012afa:	4403      	add	r3, r0
 8012afc:	482f      	ldr	r0, [pc, #188]	@ (8012bbc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8012afe:	9007      	str	r0, [sp, #28]
 8012b00:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8012b04:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8012b08:	6803      	ldr	r3, [r0, #0]
 8012b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b0c:	4798      	blx	r3
 8012b0e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8012b12:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8012b16:	2300      	movs	r3, #0
 8012b18:	f894 20a2 	ldrb.w	r2, [r4, #162]	@ 0xa2
 8012b1c:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8012b20:	b112      	cbz	r2, 8012b28 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xec>
 8012b22:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8012b26:	b90b      	cbnz	r3, 8012b2c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xf0>
 8012b28:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8012b2c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8012b30:	b112      	cbz	r2, 8012b38 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfc>
 8012b32:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8012b36:	b90b      	cbnz	r3, 8012b3c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x100>
 8012b38:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8012b3c:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 8012b40:	4620      	mov	r0, r4
 8012b42:	f7ff ff13 	bl	801296c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012b46:	b00a      	add	sp, #40	@ 0x28
 8012b48:	bd70      	pop	{r4, r5, r6, pc}
 8012b4a:	2b02      	cmp	r3, #2
 8012b4c:	d0fb      	beq.n	8012b46 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10a>
 8012b4e:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 8012b52:	b361      	cbz	r1, 8012bae <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x172>
 8012b54:	a803      	add	r0, sp, #12
 8012b56:	f007 ff55 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b5a:	4621      	mov	r1, r4
 8012b5c:	a805      	add	r0, sp, #20
 8012b5e:	f007 ff51 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b62:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012b66:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012b6a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8012b6e:	1ad2      	subs	r2, r2, r3
 8012b70:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8012b74:	7929      	ldrb	r1, [r5, #4]
 8012b76:	441a      	add	r2, r3
 8012b78:	88eb      	ldrh	r3, [r5, #6]
 8012b7a:	f88d 1020 	strb.w	r1, [sp, #32]
 8012b7e:	a907      	add	r1, sp, #28
 8012b80:	441a      	add	r2, r3
 8012b82:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012b86:	1a1b      	subs	r3, r3, r0
 8012b88:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8012b8c:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 8012b90:	4403      	add	r3, r0
 8012b92:	8928      	ldrh	r0, [r5, #8]
 8012b94:	4403      	add	r3, r0
 8012b96:	4809      	ldr	r0, [pc, #36]	@ (8012bbc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8012b98:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	9007      	str	r0, [sp, #28]
 8012ba0:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8012ba4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8012ba8:	6803      	ldr	r3, [r0, #0]
 8012baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bac:	4798      	blx	r3
 8012bae:	2300      	movs	r3, #0
 8012bb0:	e9c4 3324 	strd	r3, r3, [r4, #144]	@ 0x90
 8012bb4:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 8012bb8:	e7ad      	b.n	8012b16 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8012bba:	bf00      	nop
 8012bbc:	0802ca14 	.word	0x0802ca14

08012bc0 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8012bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bc2:	4606      	mov	r6, r0
 8012bc4:	4615      	mov	r5, r2
 8012bc6:	460c      	mov	r4, r1
 8012bc8:	b919      	cbnz	r1, 8012bd2 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8012bca:	b912      	cbnz	r2, 8012bd2 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8012bcc:	2000      	movs	r0, #0
 8012bce:	b003      	add	sp, #12
 8012bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bd2:	6833      	ldr	r3, [r6, #0]
 8012bd4:	4631      	mov	r1, r6
 8012bd6:	4668      	mov	r0, sp
 8012bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012bdc:	4798      	blx	r3
 8012bde:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8012be2:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8012be6:	f9bd 2000 	ldrsh.w	r2, [sp]
 8012bea:	4288      	cmp	r0, r1
 8012bec:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8012bf0:	da2c      	bge.n	8012c4c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 8012bf2:	2c00      	cmp	r4, #0
 8012bf4:	dd20      	ble.n	8012c38 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 8012bf6:	1913      	adds	r3, r2, r4
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	dd01      	ble.n	8012c00 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012bfc:	4252      	negs	r2, r2
 8012bfe:	b214      	sxth	r4, r2
 8012c00:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8012c04:	4297      	cmp	r7, r2
 8012c06:	dd2c      	ble.n	8012c62 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8012c08:	2d00      	cmp	r5, #0
 8012c0a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012c0e:	dd1f      	ble.n	8012c50 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8012c10:	195a      	adds	r2, r3, r5
 8012c12:	2a00      	cmp	r2, #0
 8012c14:	dd04      	ble.n	8012c20 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8012c16:	425b      	negs	r3, r3
 8012c18:	b21d      	sxth	r5, r3
 8012c1a:	b90c      	cbnz	r4, 8012c20 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8012c1c:	2d00      	cmp	r5, #0
 8012c1e:	d0d5      	beq.n	8012bcc <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8012c20:	6833      	ldr	r3, [r6, #0]
 8012c22:	462a      	mov	r2, r5
 8012c24:	4621      	mov	r1, r4
 8012c26:	4630      	mov	r0, r6
 8012c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c2c:	4798      	blx	r3
 8012c2e:	4630      	mov	r0, r6
 8012c30:	f7ff fe9c 	bl	801296c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012c34:	2001      	movs	r0, #1
 8012c36:	e7ca      	b.n	8012bce <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8012c38:	d0e2      	beq.n	8012c00 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012c3a:	440a      	add	r2, r1
 8012c3c:	b292      	uxth	r2, r2
 8012c3e:	fa04 f382 	sxtah	r3, r4, r2
 8012c42:	4283      	cmp	r3, r0
 8012c44:	dadc      	bge.n	8012c00 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012c46:	1a84      	subs	r4, r0, r2
 8012c48:	b224      	sxth	r4, r4
 8012c4a:	e7d9      	b.n	8012c00 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012c4c:	2400      	movs	r4, #0
 8012c4e:	e7d7      	b.n	8012c00 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8012c50:	d007      	beq.n	8012c62 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8012c52:	443b      	add	r3, r7
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	fa05 f183 	sxtah	r1, r5, r3
 8012c5a:	4291      	cmp	r1, r2
 8012c5c:	dae0      	bge.n	8012c20 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8012c5e:	1ad3      	subs	r3, r2, r3
 8012c60:	e7da      	b.n	8012c18 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 8012c62:	2c00      	cmp	r4, #0
 8012c64:	d0b2      	beq.n	8012bcc <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8012c66:	2500      	movs	r5, #0
 8012c68:	e7da      	b.n	8012c20 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

08012c6a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8012c6a:	b513      	push	{r0, r1, r4, lr}
 8012c6c:	6803      	ldr	r3, [r0, #0]
 8012c6e:	4601      	mov	r1, r0
 8012c70:	4604      	mov	r4, r0
 8012c72:	4668      	mov	r0, sp
 8012c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c78:	4798      	blx	r3
 8012c7a:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8012c7e:	f9bd 1000 	ldrsh.w	r1, [sp]
 8012c82:	2800      	cmp	r0, #0
 8012c84:	dd20      	ble.n	8012cc8 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 8012c86:	4602      	mov	r2, r0
 8012c88:	2900      	cmp	r1, #0
 8012c8a:	dc0e      	bgt.n	8012caa <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8012c8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012c90:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8012c94:	440b      	add	r3, r1
 8012c96:	b21b      	sxth	r3, r3
 8012c98:	4298      	cmp	r0, r3
 8012c9a:	dd04      	ble.n	8012ca6 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8012c9c:	1a1b      	subs	r3, r3, r0
 8012c9e:	4299      	cmp	r1, r3
 8012ca0:	bfb8      	it	lt
 8012ca2:	4619      	movlt	r1, r3
 8012ca4:	b909      	cbnz	r1, 8012caa <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8012ca6:	b1f2      	cbz	r2, 8012ce6 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8012ca8:	2100      	movs	r1, #0
 8012caa:	6823      	ldr	r3, [r4, #0]
 8012cac:	4252      	negs	r2, r2
 8012cae:	4249      	negs	r1, r1
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012cb6:	b212      	sxth	r2, r2
 8012cb8:	b209      	sxth	r1, r1
 8012cba:	4798      	blx	r3
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	b002      	add	sp, #8
 8012cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cc4:	f7ff be52 	b.w	801296c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012cc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012ccc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8012cd0:	4403      	add	r3, r0
 8012cd2:	b21b      	sxth	r3, r3
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	dd04      	ble.n	8012ce2 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8012cd8:	1a9a      	subs	r2, r3, r2
 8012cda:	4282      	cmp	r2, r0
 8012cdc:	bfb8      	it	lt
 8012cde:	4602      	movlt	r2, r0
 8012ce0:	e7d2      	b.n	8012c88 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	e7d0      	b.n	8012c88 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8012ce6:	b002      	add	sp, #8
 8012ce8:	bd10      	pop	{r4, pc}

08012cea <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8012cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cec:	4605      	mov	r5, r0
 8012cee:	f100 0638 	add.w	r6, r0, #56	@ 0x38
 8012cf2:	4604      	mov	r4, r0
 8012cf4:	460f      	mov	r7, r1
 8012cf6:	f855 3b64 	ldr.w	r3, [r5], #100
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012cfe:	4798      	blx	r3
 8012d00:	6823      	ldr	r3, [r4, #0]
 8012d02:	4629      	mov	r1, r5
 8012d04:	4620      	mov	r0, r4
 8012d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d08:	4798      	blx	r3
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f7fe ff2b 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d12:	4631      	mov	r1, r6
 8012d14:	4620      	mov	r0, r4
 8012d16:	f7fe ff27 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f7fe ff23 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d22:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8012d26:	b123      	cbz	r3, 8012d32 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE+0x48>
 8012d28:	4620      	mov	r0, r4
 8012d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012d2e:	f7ff be1d 	b.w	801296c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8012d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d34 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 8012d34:	6301      	str	r1, [r0, #48]	@ 0x30
 8012d36:	6601      	str	r1, [r0, #96]	@ 0x60
 8012d38:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8012d3c:	4770      	bx	lr

08012d3e <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 8012d3e:	f880 102e 	strb.w	r1, [r0, #46]	@ 0x2e
 8012d42:	f880 105e 	strb.w	r1, [r0, #94]	@ 0x5e
 8012d46:	f880 108a 	strb.w	r1, [r0, #138]	@ 0x8a
 8012d4a:	4770      	bx	lr

08012d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012d4c:	6803      	ldr	r3, [r0, #0]
 8012d4e:	b513      	push	{r0, r1, r4, lr}
 8012d50:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8012d54:	2300      	movs	r3, #0
 8012d56:	e9cd 3300 	strd	r3, r3, [sp]
 8012d5a:	466b      	mov	r3, sp
 8012d5c:	47a0      	blx	r4
 8012d5e:	b002      	add	sp, #8
 8012d60:	bd10      	pop	{r4, pc}

08012d62 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012d62:	2301      	movs	r3, #1
 8012d64:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012d68:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012d6c:	4770      	bx	lr

08012d6e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012d6e:	2301      	movs	r3, #1
 8012d70:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012d74:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012d78:	4770      	bx	lr

08012d7a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012d7a:	6843      	ldr	r3, [r0, #4]
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	725a      	strb	r2, [r3, #9]
 8012d80:	6840      	ldr	r0, [r0, #4]
 8012d82:	6803      	ldr	r3, [r0, #0]
 8012d84:	691b      	ldr	r3, [r3, #16]
 8012d86:	4718      	bx	r3

08012d88 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012d88:	6840      	ldr	r0, [r0, #4]
 8012d8a:	6803      	ldr	r3, [r0, #0]
 8012d8c:	689b      	ldr	r3, [r3, #8]
 8012d8e:	4718      	bx	r3

08012d90 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012d90:	b530      	push	{r4, r5, lr}
 8012d92:	b08b      	sub	sp, #44	@ 0x2c
 8012d94:	6804      	ldr	r4, [r0, #0]
 8012d96:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8012d9a:	9509      	str	r5, [sp, #36]	@ 0x24
 8012d9c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012da0:	9508      	str	r5, [sp, #32]
 8012da2:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8012da6:	9507      	str	r5, [sp, #28]
 8012da8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8012dac:	9506      	str	r5, [sp, #24]
 8012dae:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8012db2:	9505      	str	r5, [sp, #20]
 8012db4:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8012db8:	9504      	str	r5, [sp, #16]
 8012dba:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8012dbe:	9503      	str	r5, [sp, #12]
 8012dc0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8012dc4:	9502      	str	r5, [sp, #8]
 8012dc6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8012dca:	e9cd 3500 	strd	r3, r5, [sp]
 8012dce:	4613      	mov	r3, r2
 8012dd0:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	47a0      	blx	r4
 8012dd6:	b00b      	add	sp, #44	@ 0x2c
 8012dd8:	bd30      	pop	{r4, r5, pc}
	...

08012ddc <_ZN8touchgfx3HAL10beginFrameEv>:
 8012ddc:	4b04      	ldr	r3, [pc, #16]	@ (8012df0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	b123      	cbz	r3, 8012dec <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012de2:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8012de6:	f080 0001 	eor.w	r0, r0, #1
 8012dea:	4770      	bx	lr
 8012dec:	2001      	movs	r0, #1
 8012dee:	4770      	bx	lr
 8012df0:	240284e6 	.word	0x240284e6

08012df4 <_ZN8touchgfx3HAL8endFrameEv>:
 8012df4:	b510      	push	{r4, lr}
 8012df6:	4604      	mov	r4, r0
 8012df8:	6840      	ldr	r0, [r0, #4]
 8012dfa:	6803      	ldr	r3, [r0, #0]
 8012dfc:	689b      	ldr	r3, [r3, #8]
 8012dfe:	4798      	blx	r3
 8012e00:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8012e04:	b113      	cbz	r3, 8012e0c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012e06:	2301      	movs	r3, #1
 8012e08:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8012e0c:	bd10      	pop	{r4, pc}

08012e0e <_ZN8touchgfx3HAL10initializeEv>:
 8012e0e:	b510      	push	{r4, lr}
 8012e10:	4604      	mov	r4, r0
 8012e12:	f7ef fdaf 	bl	8002974 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012e16:	f7ee fe05 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 8012e1a:	6860      	ldr	r0, [r4, #4]
 8012e1c:	6803      	ldr	r3, [r0, #0]
 8012e1e:	68db      	ldr	r3, [r3, #12]
 8012e20:	4798      	blx	r3
 8012e22:	68e0      	ldr	r0, [r4, #12]
 8012e24:	6803      	ldr	r3, [r0, #0]
 8012e26:	689b      	ldr	r3, [r3, #8]
 8012e28:	4798      	blx	r3
 8012e2a:	6823      	ldr	r3, [r4, #0]
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e34:	4718      	bx	r3
	...

08012e38 <_ZN8touchgfx3HAL4tickEv>:
 8012e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012e3a:	6803      	ldr	r3, [r0, #0]
 8012e3c:	4604      	mov	r4, r0
 8012e3e:	4d5b      	ldr	r5, [pc, #364]	@ (8012fac <_ZN8touchgfx3HAL4tickEv+0x174>)
 8012e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012e44:	4798      	blx	r3
 8012e46:	2800      	cmp	r0, #0
 8012e48:	f000 8095 	beq.w	8012f76 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8012e4c:	2001      	movs	r0, #1
 8012e4e:	2600      	movs	r6, #0
 8012e50:	f7ee fd4e 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012e54:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8012e58:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8012e5c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8012e60:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8012e64:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8012e68:	b133      	cbz	r3, 8012e78 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012e6a:	6823      	ldr	r3, [r4, #0]
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8012e72:	4798      	blx	r3
 8012e74:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012e78:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8012e7c:	2601      	movs	r6, #1
 8012e7e:	6862      	ldr	r2, [r4, #4]
 8012e80:	f083 0301 	eor.w	r3, r3, #1
 8012e84:	702e      	strb	r6, [r5, #0]
 8012e86:	7253      	strb	r3, [r2, #9]
 8012e88:	f006 fc5e 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8012e8c:	6803      	ldr	r3, [r0, #0]
 8012e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e90:	4798      	blx	r3
 8012e92:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012e96:	b90b      	cbnz	r3, 8012e9c <_ZN8touchgfx3HAL4tickEv+0x64>
 8012e98:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8012e9c:	f006 fc54 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8012ea0:	6803      	ldr	r3, [r0, #0]
 8012ea2:	695b      	ldr	r3, [r3, #20]
 8012ea4:	4798      	blx	r3
 8012ea6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012ea8:	6803      	ldr	r3, [r0, #0]
 8012eaa:	691b      	ldr	r3, [r3, #16]
 8012eac:	4798      	blx	r3
 8012eae:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012eb2:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8012eb6:	3b01      	subs	r3, #1
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8012ebe:	b10a      	cbz	r2, 8012ec4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d1eb      	bne.n	8012e9c <_ZN8touchgfx3HAL4tickEv+0x64>
 8012ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8012fb0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012ec6:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8012eca:	7813      	ldrb	r3, [r2, #0]
 8012ecc:	3301      	adds	r3, #1
 8012ece:	b25b      	sxtb	r3, r3
 8012ed0:	4299      	cmp	r1, r3
 8012ed2:	7013      	strb	r3, [r2, #0]
 8012ed4:	dc10      	bgt.n	8012ef8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	68e0      	ldr	r0, [r4, #12]
 8012eda:	a902      	add	r1, sp, #8
 8012edc:	7013      	strb	r3, [r2, #0]
 8012ede:	aa03      	add	r2, sp, #12
 8012ee0:	6803      	ldr	r3, [r0, #0]
 8012ee2:	68db      	ldr	r3, [r3, #12]
 8012ee4:	4798      	blx	r3
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	d050      	beq.n	8012f8e <_ZN8touchgfx3HAL4tickEv+0x156>
 8012eec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012ef6:	4798      	blx	r3
 8012ef8:	2300      	movs	r3, #0
 8012efa:	6960      	ldr	r0, [r4, #20]
 8012efc:	f88d 3007 	strb.w	r3, [sp, #7]
 8012f00:	b158      	cbz	r0, 8012f1a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012f02:	6803      	ldr	r3, [r0, #0]
 8012f04:	f10d 0107 	add.w	r1, sp, #7
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	4798      	blx	r3
 8012f0c:	b128      	cbz	r0, 8012f1a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012f0e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012f10:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012f14:	6803      	ldr	r3, [r0, #0]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	4798      	blx	r3
 8012f1a:	f104 001c 	add.w	r0, r4, #28
 8012f1e:	f014 f9bb 	bl	8027298 <_ZN8touchgfx8Gestures4tickEv>
 8012f22:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8012f26:	b30b      	cbz	r3, 8012f6c <_ZN8touchgfx3HAL4tickEv+0x134>
 8012f28:	6920      	ldr	r0, [r4, #16]
 8012f2a:	6803      	ldr	r3, [r0, #0]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	4798      	blx	r3
 8012f30:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012f32:	4606      	mov	r6, r0
 8012f34:	b903      	cbnz	r3, 8012f38 <_ZN8touchgfx3HAL4tickEv+0x100>
 8012f36:	6760      	str	r0, [r4, #116]	@ 0x74
 8012f38:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8012fb4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012f3c:	1af3      	subs	r3, r6, r3
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d914      	bls.n	8012f6c <_ZN8touchgfx3HAL4tickEv+0x134>
 8012f42:	6920      	ldr	r0, [r4, #16]
 8012f44:	6803      	ldr	r3, [r0, #0]
 8012f46:	699b      	ldr	r3, [r3, #24]
 8012f48:	4798      	blx	r3
 8012f4a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012f4c:	2264      	movs	r2, #100	@ 0x64
 8012f4e:	1af3      	subs	r3, r6, r3
 8012f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f54:	fbb0 f0f3 	udiv	r0, r0, r3
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	dc1d      	bgt.n	8012f98 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012f5c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8012f60:	6920      	ldr	r0, [r4, #16]
 8012f62:	2100      	movs	r1, #0
 8012f64:	6803      	ldr	r3, [r0, #0]
 8012f66:	69db      	ldr	r3, [r3, #28]
 8012f68:	4798      	blx	r3
 8012f6a:	6766      	str	r6, [r4, #116]	@ 0x74
 8012f6c:	f006 fbec 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 8012f70:	6803      	ldr	r3, [r0, #0]
 8012f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f74:	4798      	blx	r3
 8012f76:	6823      	ldr	r3, [r4, #0]
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012f7e:	4798      	blx	r3
 8012f80:	2001      	movs	r0, #1
 8012f82:	f7ee fce5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012f86:	2300      	movs	r3, #0
 8012f88:	702b      	strb	r3, [r5, #0]
 8012f8a:	b004      	add	sp, #16
 8012f8c:	bd70      	pop	{r4, r5, r6, pc}
 8012f8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8012f92:	4620      	mov	r0, r4
 8012f94:	4798      	blx	r3
 8012f96:	e7af      	b.n	8012ef8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012f98:	2863      	cmp	r0, #99	@ 0x63
 8012f9a:	bfcb      	itete	gt
 8012f9c:	2300      	movgt	r3, #0
 8012f9e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8012fa2:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8012fa6:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8012faa:	e7d9      	b.n	8012f60 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012fac:	240284ec 	.word	0x240284ec
 8012fb0:	240284ed 	.word	0x240284ed
 8012fb4:	05f5e100 	.word	0x05f5e100

08012fb8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012fb8:	b510      	push	{r4, lr}
 8012fba:	4604      	mov	r4, r0
 8012fbc:	f7ef fd0a 	bl	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	6863      	ldr	r3, [r4, #4]
 8012fc4:	729a      	strb	r2, [r3, #10]
 8012fc6:	bd10      	pop	{r4, pc}

08012fc8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012fc8:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8012fca:	301c      	adds	r0, #28
 8012fcc:	f014 b962 	b.w	8027294 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012fd0 <_ZN8touchgfx3HAL5touchEll>:
 8012fd0:	b530      	push	{r4, r5, lr}
 8012fd2:	b087      	sub	sp, #28
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	a804      	add	r0, sp, #16
 8012fd8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012fdc:	f006 f9c6 	bl	801936c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012fe0:	9b04      	ldr	r3, [sp, #16]
 8012fe2:	a906      	add	r1, sp, #24
 8012fe4:	a803      	add	r0, sp, #12
 8012fe6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012fea:	9b05      	ldr	r3, [sp, #20]
 8012fec:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012ff0:	f006 fa0e 	bl	8019410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012ff4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8012ff8:	f104 001c 	add.w	r0, r4, #28
 8012ffc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013000:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013004:	b189      	cbz	r1, 801302a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013006:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	4613      	mov	r3, r2
 801300e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8013012:	462a      	mov	r2, r5
 8013014:	f014 f94e 	bl	80272b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013018:	b128      	cbz	r0, 8013026 <_ZN8touchgfx3HAL5touchEll+0x56>
 801301a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801301e:	6623      	str	r3, [r4, #96]	@ 0x60
 8013020:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013024:	6663      	str	r3, [r4, #100]	@ 0x64
 8013026:	b007      	add	sp, #28
 8013028:	bd30      	pop	{r4, r5, pc}
 801302a:	f014 f983 	bl	8027334 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801302e:	2301      	movs	r3, #1
 8013030:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8013034:	e7f1      	b.n	801301a <_ZN8touchgfx3HAL5touchEll+0x4a>

08013036 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013036:	b510      	push	{r4, lr}
 8013038:	2b00      	cmp	r3, #0
 801303a:	d046      	beq.n	80130ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801303c:	ea81 0002 	eor.w	r0, r1, r2
 8013040:	07c4      	lsls	r4, r0, #31
 8013042:	d508      	bpl.n	8013056 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013044:	440b      	add	r3, r1
 8013046:	3a01      	subs	r2, #1
 8013048:	428b      	cmp	r3, r1
 801304a:	d93e      	bls.n	80130ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801304c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013050:	f801 0b01 	strb.w	r0, [r1], #1
 8013054:	e7f8      	b.n	8013048 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013056:	07d0      	lsls	r0, r2, #31
 8013058:	bf42      	ittt	mi
 801305a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801305e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013062:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013066:	2b01      	cmp	r3, #1
 8013068:	d911      	bls.n	801308e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801306a:	ea81 0402 	eor.w	r4, r1, r2
 801306e:	4610      	mov	r0, r2
 8013070:	07a4      	lsls	r4, r4, #30
 8013072:	d022      	beq.n	80130ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8013074:	f023 0401 	bic.w	r4, r3, #1
 8013078:	440c      	add	r4, r1
 801307a:	428c      	cmp	r4, r1
 801307c:	4602      	mov	r2, r0
 801307e:	d904      	bls.n	801308a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8013080:	8812      	ldrh	r2, [r2, #0]
 8013082:	3002      	adds	r0, #2
 8013084:	f821 2b02 	strh.w	r2, [r1], #2
 8013088:	e7f7      	b.n	801307a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801308a:	f003 0301 	and.w	r3, r3, #1
 801308e:	f023 0003 	bic.w	r0, r3, #3
 8013092:	4408      	add	r0, r1
 8013094:	4288      	cmp	r0, r1
 8013096:	4614      	mov	r4, r2
 8013098:	d904      	bls.n	80130a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801309a:	6824      	ldr	r4, [r4, #0]
 801309c:	3204      	adds	r2, #4
 801309e:	f841 4b04 	str.w	r4, [r1], #4
 80130a2:	e7f7      	b.n	8013094 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80130a4:	f003 0303 	and.w	r3, r3, #3
 80130a8:	3a01      	subs	r2, #1
 80130aa:	440b      	add	r3, r1
 80130ac:	428b      	cmp	r3, r1
 80130ae:	d90c      	bls.n	80130ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80130b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80130b4:	f801 0b01 	strb.w	r0, [r1], #1
 80130b8:	e7f8      	b.n	80130ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80130ba:	0790      	lsls	r0, r2, #30
 80130bc:	d0e7      	beq.n	801308e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80130be:	f832 0b02 	ldrh.w	r0, [r2], #2
 80130c2:	3b02      	subs	r3, #2
 80130c4:	f821 0b02 	strh.w	r0, [r1], #2
 80130c8:	e7e1      	b.n	801308e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80130ca:	2001      	movs	r0, #1
 80130cc:	bd10      	pop	{r4, pc}

080130ce <_ZN8touchgfx3HAL7noTouchEv>:
 80130ce:	b510      	push	{r4, lr}
 80130d0:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80130d4:	4604      	mov	r4, r0
 80130d6:	b153      	cbz	r3, 80130ee <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80130d8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80130dc:	2101      	movs	r1, #1
 80130de:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80130e2:	301c      	adds	r0, #28
 80130e4:	f014 f926 	bl	8027334 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80130e8:	2300      	movs	r3, #0
 80130ea:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80130ee:	bd10      	pop	{r4, pc}

080130f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80130f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130f4:	b085      	sub	sp, #20
 80130f6:	4604      	mov	r4, r0
 80130f8:	2000      	movs	r0, #0
 80130fa:	4699      	mov	r9, r3
 80130fc:	ad04      	add	r5, sp, #16
 80130fe:	460f      	mov	r7, r1
 8013100:	4690      	mov	r8, r2
 8013102:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013106:	69a0      	ldr	r0, [r4, #24]
 8013108:	6806      	ldr	r6, [r0, #0]
 801310a:	9501      	str	r5, [sp, #4]
 801310c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8013110:	9500      	str	r5, [sp, #0]
 8013112:	6835      	ldr	r5, [r6, #0]
 8013114:	47a8      	blx	r5
 8013116:	4d10      	ldr	r5, [pc, #64]	@ (8013158 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013118:	4606      	mov	r6, r0
 801311a:	f8a5 9000 	strh.w	r9, [r5]
 801311e:	f7f4 fb33 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 8013122:	6803      	ldr	r3, [r0, #0]
 8013124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013126:	4798      	blx	r3
 8013128:	b128      	cbz	r0, 8013136 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801312a:	2801      	cmp	r0, #1
 801312c:	d00b      	beq.n	8013146 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801312e:	4630      	mov	r0, r6
 8013130:	b005      	add	sp, #20
 8013132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013136:	882b      	ldrh	r3, [r5, #0]
 8013138:	fb08 7203 	mla	r2, r8, r3, r7
 801313c:	9b03      	ldr	r3, [sp, #12]
 801313e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013142:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8013144:	e7f3      	b.n	801312e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013146:	882a      	ldrh	r2, [r5, #0]
 8013148:	9b03      	ldr	r3, [sp, #12]
 801314a:	fb08 7202 	mla	r2, r8, r2, r7
 801314e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013152:	1a9a      	subs	r2, r3, r2
 8013154:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8013156:	e7ea      	b.n	801312e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013158:	240284e2 	.word	0x240284e2

0801315c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801315e:	b08b      	sub	sp, #44	@ 0x2c
 8013160:	4617      	mov	r7, r2
 8013162:	4604      	mov	r4, r0
 8013164:	460e      	mov	r6, r1
 8013166:	461d      	mov	r5, r3
 8013168:	f7f4 fb0e 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 801316c:	6803      	ldr	r3, [r0, #0]
 801316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013170:	4798      	blx	r3
 8013172:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8013176:	9007      	str	r0, [sp, #28]
 8013178:	4631      	mov	r1, r6
 801317a:	6822      	ldr	r2, [r4, #0]
 801317c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013180:	4b0c      	ldr	r3, [pc, #48]	@ (80131b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8013182:	4620      	mov	r0, r4
 8013184:	881b      	ldrh	r3, [r3, #0]
 8013186:	9306      	str	r3, [sp, #24]
 8013188:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801318c:	9305      	str	r3, [sp, #20]
 801318e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8013192:	9304      	str	r3, [sp, #16]
 8013194:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013198:	9303      	str	r3, [sp, #12]
 801319a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801319e:	9302      	str	r3, [sp, #8]
 80131a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80131a4:	e9cd 5300 	strd	r5, r3, [sp]
 80131a8:	463b      	mov	r3, r7
 80131aa:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80131ac:	2200      	movs	r2, #0
 80131ae:	47a8      	blx	r5
 80131b0:	b00b      	add	sp, #44	@ 0x2c
 80131b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131b4:	240284e2 	.word	0x240284e2

080131b8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80131b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131bc:	4698      	mov	r8, r3
 80131be:	6803      	ldr	r3, [r0, #0]
 80131c0:	b08b      	sub	sp, #44	@ 0x2c
 80131c2:	4617      	mov	r7, r2
 80131c4:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80131c6:	460e      	mov	r6, r1
 80131c8:	4b13      	ldr	r3, [pc, #76]	@ (8013218 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80131ca:	4604      	mov	r4, r0
 80131cc:	f8b3 9000 	ldrh.w	r9, [r3]
 80131d0:	f7f4 fada 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 80131d4:	6803      	ldr	r3, [r0, #0]
 80131d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131d8:	4798      	blx	r3
 80131da:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80131de:	2200      	movs	r2, #0
 80131e0:	4631      	mov	r1, r6
 80131e2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80131e6:	2302      	movs	r3, #2
 80131e8:	4620      	mov	r0, r4
 80131ea:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80131ee:	2301      	movs	r3, #1
 80131f0:	9305      	str	r3, [sp, #20]
 80131f2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80131f6:	9304      	str	r3, [sp, #16]
 80131f8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80131fc:	9303      	str	r3, [sp, #12]
 80131fe:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013202:	9302      	str	r3, [sp, #8]
 8013204:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013208:	e9cd 8300 	strd	r8, r3, [sp]
 801320c:	463b      	mov	r3, r7
 801320e:	47a8      	blx	r5
 8013210:	b00b      	add	sp, #44	@ 0x2c
 8013212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013216:	bf00      	nop
 8013218:	240284e2 	.word	0x240284e2

0801321c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801321c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013220:	4698      	mov	r8, r3
 8013222:	6803      	ldr	r3, [r0, #0]
 8013224:	b087      	sub	sp, #28
 8013226:	460e      	mov	r6, r1
 8013228:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 801322a:	4617      	mov	r7, r2
 801322c:	4b0f      	ldr	r3, [pc, #60]	@ (801326c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801322e:	4604      	mov	r4, r0
 8013230:	f8b3 9000 	ldrh.w	r9, [r3]
 8013234:	f7f4 faa8 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 8013238:	6803      	ldr	r3, [r0, #0]
 801323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801323c:	4798      	blx	r3
 801323e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8013242:	463a      	mov	r2, r7
 8013244:	4631      	mov	r1, r6
 8013246:	f8cd 900c 	str.w	r9, [sp, #12]
 801324a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801324e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8013252:	4620      	mov	r0, r4
 8013254:	9302      	str	r3, [sp, #8]
 8013256:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	4643      	mov	r3, r8
 8013264:	47a8      	blx	r5
 8013266:	b007      	add	sp, #28
 8013268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801326c:	240284e2 	.word	0x240284e2

08013270 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	4604      	mov	r4, r0
 8013276:	b08f      	sub	sp, #60	@ 0x3c
 8013278:	4610      	mov	r0, r2
 801327a:	460d      	mov	r5, r1
 801327c:	4691      	mov	r9, r2
 801327e:	461e      	mov	r6, r3
 8013280:	f009 febc 	bl	801cffc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013284:	2800      	cmp	r0, #0
 8013286:	f000 809d 	beq.w	80133c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801328a:	6823      	ldr	r3, [r4, #0]
 801328c:	4620      	mov	r0, r4
 801328e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8013428 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8013292:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8013296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013298:	4798      	blx	r3
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	4620      	mov	r0, r4
 801329e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 801342c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80132a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132a4:	4798      	blx	r3
 80132a6:	f8bb 3000 	ldrh.w	r3, [fp]
 80132aa:	4f5c      	ldr	r7, [pc, #368]	@ (801341c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80132ac:	9301      	str	r3, [sp, #4]
 80132ae:	f8ba 3000 	ldrh.w	r3, [sl]
 80132b2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80132b6:	4640      	mov	r0, r8
 80132b8:	9302      	str	r3, [sp, #8]
 80132ba:	883b      	ldrh	r3, [r7, #0]
 80132bc:	9303      	str	r3, [sp, #12]
 80132be:	4b58      	ldr	r3, [pc, #352]	@ (8013420 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80132c0:	881a      	ldrh	r2, [r3, #0]
 80132c2:	9305      	str	r3, [sp, #20]
 80132c4:	9204      	str	r2, [sp, #16]
 80132c6:	f009 ffe9 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80132ca:	8038      	strh	r0, [r7, #0]
 80132cc:	4640      	mov	r0, r8
 80132ce:	f00a f819 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80132d2:	9b05      	ldr	r3, [sp, #20]
 80132d4:	b280      	uxth	r0, r0
 80132d6:	8018      	strh	r0, [r3, #0]
 80132d8:	4b52      	ldr	r3, [pc, #328]	@ (8013424 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d174      	bne.n	80133ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80132e0:	883b      	ldrh	r3, [r7, #0]
 80132e2:	f8aa 0000 	strh.w	r0, [sl]
 80132e6:	f8ab 3000 	strh.w	r3, [fp]
 80132ea:	4648      	mov	r0, r9
 80132ec:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80132f0:	f009 fe84 	bl	801cffc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80132f4:	2200      	movs	r2, #0
 80132f6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80132fa:	4611      	mov	r1, r2
 80132fc:	4628      	mov	r0, r5
 80132fe:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8013302:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013306:	f7f0 fcff 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
 801330a:	2301      	movs	r3, #1
 801330c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8013310:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8013314:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013318:	2b00      	cmp	r3, #0
 801331a:	dd5c      	ble.n	80133d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801331c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013320:	2b00      	cmp	r3, #0
 8013322:	dd58      	ble.n	80133d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013324:	462a      	mov	r2, r5
 8013326:	ab0a      	add	r3, sp, #40	@ 0x28
 8013328:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801332c:	6851      	ldr	r1, [r2, #4]
 801332e:	c303      	stmia	r3!, {r0, r1}
 8013330:	4631      	mov	r1, r6
 8013332:	a80a      	add	r0, sp, #40	@ 0x28
 8013334:	f7fe fd9c 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8013338:	4b38      	ldr	r3, [pc, #224]	@ (801341c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801333a:	2100      	movs	r1, #0
 801333c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013340:	4b37      	ldr	r3, [pc, #220]	@ (8013420 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013342:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013346:	aa0a      	add	r2, sp, #40	@ 0x28
 8013348:	f9b3 3000 	ldrsh.w	r3, [r3]
 801334c:	910c      	str	r1, [sp, #48]	@ 0x30
 801334e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013352:	ab08      	add	r3, sp, #32
 8013354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013358:	e883 0003 	stmia.w	r3, {r0, r1}
 801335c:	4618      	mov	r0, r3
 801335e:	a90c      	add	r1, sp, #48	@ 0x30
 8013360:	f7fe fd86 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8013364:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8013366:	2b00      	cmp	r3, #0
 8013368:	d13c      	bne.n	80133e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801336a:	2000      	movs	r0, #0
 801336c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8013370:	2600      	movs	r6, #0
 8013372:	696b      	ldr	r3, [r5, #20]
 8013374:	a908      	add	r1, sp, #32
 8013376:	682a      	ldr	r2, [r5, #0]
 8013378:	4628      	mov	r0, r5
 801337a:	9305      	str	r3, [sp, #20]
 801337c:	616e      	str	r6, [r5, #20]
 801337e:	6892      	ldr	r2, [r2, #8]
 8013380:	4790      	blx	r2
 8013382:	9b05      	ldr	r3, [sp, #20]
 8013384:	4652      	mov	r2, sl
 8013386:	4649      	mov	r1, r9
 8013388:	616b      	str	r3, [r5, #20]
 801338a:	4628      	mov	r0, r5
 801338c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8013390:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8013394:	f7f0 fcb8 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
 8013398:	9a01      	ldr	r2, [sp, #4]
 801339a:	4b23      	ldr	r3, [pc, #140]	@ (8013428 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801339c:	4620      	mov	r0, r4
 801339e:	801a      	strh	r2, [r3, #0]
 80133a0:	9a02      	ldr	r2, [sp, #8]
 80133a2:	4b22      	ldr	r3, [pc, #136]	@ (801342c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80133a4:	801a      	strh	r2, [r3, #0]
 80133a6:	9a03      	ldr	r2, [sp, #12]
 80133a8:	4b1c      	ldr	r3, [pc, #112]	@ (801341c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80133aa:	801a      	strh	r2, [r3, #0]
 80133ac:	4b1c      	ldr	r3, [pc, #112]	@ (8013420 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80133ae:	9a04      	ldr	r2, [sp, #16]
 80133b0:	801a      	strh	r2, [r3, #0]
 80133b2:	6823      	ldr	r3, [r4, #0]
 80133b4:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80133b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133ba:	4798      	blx	r3
 80133bc:	6823      	ldr	r3, [r4, #0]
 80133be:	4620      	mov	r0, r4
 80133c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133c2:	4798      	blx	r3
 80133c4:	b00f      	add	sp, #60	@ 0x3c
 80133c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ca:	883b      	ldrh	r3, [r7, #0]
 80133cc:	f8ab 0000 	strh.w	r0, [fp]
 80133d0:	f8aa 3000 	strh.w	r3, [sl]
 80133d4:	e789      	b.n	80132ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80133d6:	462a      	mov	r2, r5
 80133d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80133da:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80133de:	6851      	ldr	r1, [r2, #4]
 80133e0:	c303      	stmia	r3!, {r0, r1}
 80133e2:	e7a9      	b.n	8013338 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80133e4:	a807      	add	r0, sp, #28
 80133e6:	f00a f8cf 	bl	801d588 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80133ea:	4606      	mov	r6, r0
 80133ec:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80133ee:	6803      	ldr	r3, [r0, #0]
 80133f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133f2:	4798      	blx	r3
 80133f4:	4286      	cmp	r6, r0
 80133f6:	d1b8      	bne.n	801336a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80133f8:	f7f4 f9c6 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 80133fc:	6803      	ldr	r3, [r0, #0]
 80133fe:	4606      	mov	r6, r0
 8013400:	a807      	add	r0, sp, #28
 8013402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013404:	9305      	str	r3, [sp, #20]
 8013406:	f00a f8bf 	bl	801d588 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801340a:	9b05      	ldr	r3, [sp, #20]
 801340c:	4601      	mov	r1, r0
 801340e:	4630      	mov	r0, r6
 8013410:	4798      	blx	r3
 8013412:	f080 0001 	eor.w	r0, r0, #1
 8013416:	b2c0      	uxtb	r0, r0
 8013418:	e7a8      	b.n	801336c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801341a:	bf00      	nop
 801341c:	240284dc 	.word	0x240284dc
 8013420:	240284de 	.word	0x240284de
 8013424:	240284e0 	.word	0x240284e0
 8013428:	240284e2 	.word	0x240284e2
 801342c:	240284e4 	.word	0x240284e4

08013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8013430:	4b07      	ldr	r3, [pc, #28]	@ (8013450 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8013432:	b510      	push	{r4, lr}
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	4604      	mov	r4, r0
 8013438:	b13b      	cbz	r3, 801344a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801343a:	6803      	ldr	r3, [r0, #0]
 801343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801343e:	4798      	blx	r3
 8013440:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013442:	4283      	cmp	r3, r0
 8013444:	d101      	bne.n	801344a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013446:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8013448:	bd10      	pop	{r4, pc}
 801344a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801344c:	e7fc      	b.n	8013448 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801344e:	bf00      	nop
 8013450:	240284e6 	.word	0x240284e6

08013454 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8013454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013458:	461d      	mov	r5, r3
 801345a:	b08a      	sub	sp, #40	@ 0x28
 801345c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013460:	4690      	mov	r8, r2
 8013462:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8013466:	2400      	movs	r4, #0
 8013468:	4607      	mov	r7, r0
 801346a:	fb06 8505 	mla	r5, r6, r5, r8
 801346e:	9404      	str	r4, [sp, #16]
 8013470:	f88d 4020 	strb.w	r4, [sp, #32]
 8013474:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013478:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801347c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013480:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013484:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013488:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801348c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013490:	f7ff ffce 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013494:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801349e:	a901      	add	r1, sp, #4
 80134a0:	9505      	str	r5, [sp, #20]
 80134a2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80134a6:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80134aa:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80134ae:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80134b2:	6803      	ldr	r3, [r0, #0]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	4798      	blx	r3
 80134b8:	b00a      	add	sp, #40	@ 0x28
 80134ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134be <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80134be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134c2:	b08b      	sub	sp, #44	@ 0x2c
 80134c4:	2400      	movs	r4, #0
 80134c6:	4691      	mov	r9, r2
 80134c8:	461d      	mov	r5, r3
 80134ca:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80134ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80134d2:	4688      	mov	r8, r1
 80134d4:	4607      	mov	r7, r0
 80134d6:	9404      	str	r4, [sp, #16]
 80134d8:	fb06 9505 	mla	r5, r6, r5, r9
 80134dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80134e0:	f7ff ffa6 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80134e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80134e8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80134f2:	a901      	add	r1, sp, #4
 80134f4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80134f8:	9505      	str	r5, [sp, #20]
 80134fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80134fe:	f8ad 401c 	strh.w	r4, [sp, #28]
 8013502:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013506:	f8cd 8010 	str.w	r8, [sp, #16]
 801350a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801350e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013512:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8013516:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801351a:	6803      	ldr	r3, [r0, #0]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	4798      	blx	r3
 8013520:	b00b      	add	sp, #44	@ 0x2c
 8013522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013528 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801352c:	b08a      	sub	sp, #40	@ 0x28
 801352e:	4698      	mov	r8, r3
 8013530:	2300      	movs	r3, #0
 8013532:	4606      	mov	r6, r0
 8013534:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8013538:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801353c:	2d0b      	cmp	r5, #11
 801353e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8013542:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8013546:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801354a:	9304      	str	r3, [sp, #16]
 801354c:	d137      	bne.n	80135be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801354e:	2380      	movs	r3, #128	@ 0x80
 8013550:	f88d 0020 	strb.w	r0, [sp, #32]
 8013554:	4630      	mov	r0, r6
 8013556:	9203      	str	r2, [sp, #12]
 8013558:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801355c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013560:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013564:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013568:	f8ad 301a 	strh.w	r3, [sp, #26]
 801356c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013570:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013574:	f7ff ff5c 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013578:	2c0b      	cmp	r4, #11
 801357a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801357e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013582:	bf94      	ite	ls
 8013584:	4b19      	ldrls	r3, [pc, #100]	@ (80135ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8013586:	2100      	movhi	r1, #0
 8013588:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801358c:	bf98      	it	ls
 801358e:	5d19      	ldrbls	r1, [r3, r4]
 8013590:	fb02 8307 	mla	r3, r2, r7, r8
 8013594:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013598:	10c9      	asrs	r1, r1, #3
 801359a:	fb01 0003 	mla	r0, r1, r3, r0
 801359e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80135a2:	a901      	add	r1, sp, #4
 80135a4:	9005      	str	r0, [sp, #20]
 80135a6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80135aa:	2300      	movs	r3, #0
 80135ac:	6870      	ldr	r0, [r6, #4]
 80135ae:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80135b2:	6803      	ldr	r3, [r0, #0]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	4798      	blx	r3
 80135b8:	b00a      	add	sp, #40	@ 0x28
 80135ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135be:	2d02      	cmp	r5, #2
 80135c0:	d109      	bne.n	80135d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80135c2:	28ff      	cmp	r0, #255	@ 0xff
 80135c4:	d105      	bne.n	80135d2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80135c6:	f1bc 0f00 	cmp.w	ip, #0
 80135ca:	bf14      	ite	ne
 80135cc:	2340      	movne	r3, #64	@ 0x40
 80135ce:	2320      	moveq	r3, #32
 80135d0:	e7be      	b.n	8013550 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80135d2:	2340      	movs	r3, #64	@ 0x40
 80135d4:	e7bc      	b.n	8013550 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80135d6:	28ff      	cmp	r0, #255	@ 0xff
 80135d8:	d105      	bne.n	80135e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80135da:	f1bc 0f00 	cmp.w	ip, #0
 80135de:	bf14      	ite	ne
 80135e0:	2304      	movne	r3, #4
 80135e2:	2301      	moveq	r3, #1
 80135e4:	e7b4      	b.n	8013550 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80135e6:	2304      	movs	r3, #4
 80135e8:	e7b2      	b.n	8013550 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80135ea:	bf00      	nop
 80135ec:	0802cad0 	.word	0x0802cad0

080135f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80135f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f4:	b08b      	sub	sp, #44	@ 0x2c
 80135f6:	461d      	mov	r5, r3
 80135f8:	2400      	movs	r4, #0
 80135fa:	4688      	mov	r8, r1
 80135fc:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8013600:	4693      	mov	fp, r2
 8013602:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8013606:	4607      	mov	r7, r0
 8013608:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801360c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8013610:	9404      	str	r4, [sp, #16]
 8013612:	bf14      	ite	ne
 8013614:	2308      	movne	r3, #8
 8013616:	2302      	moveq	r3, #2
 8013618:	fb05 b50a 	mla	r5, r5, sl, fp
 801361c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013620:	f7ff ff06 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013624:	2e0b      	cmp	r6, #11
 8013626:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801362a:	a901      	add	r1, sp, #4
 801362c:	bf98      	it	ls
 801362e:	4b13      	ldrls	r3, [pc, #76]	@ (801367c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8013630:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013634:	bf98      	it	ls
 8013636:	5d9c      	ldrbls	r4, [r3, r6]
 8013638:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801363c:	10e4      	asrs	r4, r4, #3
 801363e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013642:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013646:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801364a:	fb04 0405 	mla	r4, r4, r5, r0
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013654:	2300      	movs	r3, #0
 8013656:	9405      	str	r4, [sp, #20]
 8013658:	f8ad 301c 	strh.w	r3, [sp, #28]
 801365c:	f88d 9020 	strb.w	r9, [sp, #32]
 8013660:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8013664:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013668:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 801366c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8013670:	6803      	ldr	r3, [r0, #0]
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	4798      	blx	r3
 8013676:	b00b      	add	sp, #44	@ 0x2c
 8013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367c:	0802cad0 	.word	0x0802cad0

08013680 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013684:	461e      	mov	r6, r3
 8013686:	4b0a      	ldr	r3, [pc, #40]	@ (80136b0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013688:	460f      	mov	r7, r1
 801368a:	4690      	mov	r8, r2
 801368c:	881d      	ldrh	r5, [r3, #0]
 801368e:	f7f4 f87b 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 8013692:	6803      	ldr	r3, [r0, #0]
 8013694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013696:	4798      	blx	r3
 8013698:	280b      	cmp	r0, #11
 801369a:	bf96      	itet	ls
 801369c:	4b05      	ldrls	r3, [pc, #20]	@ (80136b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801369e:	2400      	movhi	r4, #0
 80136a0:	5c1c      	ldrbls	r4, [r3, r0]
 80136a2:	fb08 7005 	mla	r0, r8, r5, r7
 80136a6:	10e4      	asrs	r4, r4, #3
 80136a8:	fb04 6000 	mla	r0, r4, r0, r6
 80136ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b0:	240284e2 	.word	0x240284e2
 80136b4:	0802cad0 	.word	0x0802cad0

080136b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80136b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ba:	b08b      	sub	sp, #44	@ 0x2c
 80136bc:	461f      	mov	r7, r3
 80136be:	4604      	mov	r4, r0
 80136c0:	4616      	mov	r6, r2
 80136c2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80136c6:	2500      	movs	r5, #0
 80136c8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80136cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80136d0:	9504      	str	r5, [sp, #16]
 80136d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80136d6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80136da:	f8ad 301a 	strh.w	r3, [sp, #26]
 80136de:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80136e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80136e6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80136ea:	f88d 3020 	strb.w	r3, [sp, #32]
 80136ee:	f7ff fe9f 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80136f2:	463a      	mov	r2, r7
 80136f4:	4631      	mov	r1, r6
 80136f6:	4603      	mov	r3, r0
 80136f8:	4620      	mov	r0, r4
 80136fa:	f7ff ffc1 	bl	8013680 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80136fe:	4b0e      	ldr	r3, [pc, #56]	@ (8013738 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013700:	9005      	str	r0, [sp, #20]
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013708:	f7f4 f83e 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 801370c:	6803      	ldr	r3, [r0, #0]
 801370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013710:	4798      	blx	r3
 8013712:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013714:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8013718:	a901      	add	r1, sp, #4
 801371a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801371e:	9304      	str	r3, [sp, #16]
 8013720:	6860      	ldr	r0, [r4, #4]
 8013722:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8013726:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801372a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801372e:	6803      	ldr	r3, [r0, #0]
 8013730:	685b      	ldr	r3, [r3, #4]
 8013732:	4798      	blx	r3
 8013734:	b00b      	add	sp, #44	@ 0x2c
 8013736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013738:	240284e2 	.word	0x240284e2

0801373c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801373e:	b08d      	sub	sp, #52	@ 0x34
 8013740:	2501      	movs	r5, #1
 8013742:	4604      	mov	r4, r0
 8013744:	466b      	mov	r3, sp
 8013746:	9503      	str	r5, [sp, #12]
 8013748:	e883 0006 	stmia.w	r3, {r1, r2}
 801374c:	2300      	movs	r3, #0
 801374e:	f8bd 6000 	ldrh.w	r6, [sp]
 8013752:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013756:	9306      	str	r3, [sp, #24]
 8013758:	6803      	ldr	r3, [r0, #0]
 801375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801375c:	4798      	blx	r3
 801375e:	463a      	mov	r2, r7
 8013760:	4631      	mov	r1, r6
 8013762:	4603      	mov	r3, r0
 8013764:	4620      	mov	r0, r4
 8013766:	f7ff ff8b 	bl	8013680 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801376a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801376c:	9004      	str	r0, [sp, #16]
 801376e:	9307      	str	r3, [sp, #28]
 8013770:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013774:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013778:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801377c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013780:	4b0e      	ldr	r3, [pc, #56]	@ (80137bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013782:	881b      	ldrh	r3, [r3, #0]
 8013784:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013788:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801378c:	f7f3 fffc 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 8013790:	6803      	ldr	r3, [r0, #0]
 8013792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013794:	4798      	blx	r3
 8013796:	23ff      	movs	r3, #255	@ 0xff
 8013798:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801379c:	a903      	add	r1, sp, #12
 801379e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80137a2:	6860      	ldr	r0, [r4, #4]
 80137a4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80137a8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80137ac:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80137b0:	6803      	ldr	r3, [r0, #0]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	4798      	blx	r3
 80137b6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80137b8:	b00d      	add	sp, #52	@ 0x34
 80137ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137bc:	240284e2 	.word	0x240284e2

080137c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c4:	b08c      	sub	sp, #48	@ 0x30
 80137c6:	461e      	mov	r6, r3
 80137c8:	2300      	movs	r3, #0
 80137ca:	4604      	mov	r4, r0
 80137cc:	466d      	mov	r5, sp
 80137ce:	9306      	str	r3, [sp, #24]
 80137d0:	6803      	ldr	r3, [r0, #0]
 80137d2:	e885 0006 	stmia.w	r5, {r1, r2}
 80137d6:	2501      	movs	r5, #1
 80137d8:	f8bd 7000 	ldrh.w	r7, [sp]
 80137dc:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80137e0:	9503      	str	r5, [sp, #12]
 80137e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137e4:	4798      	blx	r3
 80137e6:	4642      	mov	r2, r8
 80137e8:	4639      	mov	r1, r7
 80137ea:	4603      	mov	r3, r0
 80137ec:	4620      	mov	r0, r4
 80137ee:	f7ff ff47 	bl	8013680 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80137f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80137f6:	9004      	str	r0, [sp, #16]
 80137f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80137fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013800:	9607      	str	r6, [sp, #28]
 8013802:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013806:	4b10      	ldr	r3, [pc, #64]	@ (8013848 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013808:	881b      	ldrh	r3, [r3, #0]
 801380a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801380e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013810:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013814:	f7f3 ffb8 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 8013818:	6803      	ldr	r3, [r0, #0]
 801381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801381c:	4798      	blx	r3
 801381e:	23ff      	movs	r3, #255	@ 0xff
 8013820:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013824:	a903      	add	r1, sp, #12
 8013826:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801382a:	6860      	ldr	r0, [r4, #4]
 801382c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013830:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013834:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013838:	6803      	ldr	r3, [r0, #0]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	4798      	blx	r3
 801383e:	4630      	mov	r0, r6
 8013840:	b00c      	add	sp, #48	@ 0x30
 8013842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013846:	bf00      	nop
 8013848:	240284e2 	.word	0x240284e2

0801384c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801384c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801384e:	b085      	sub	sp, #20
 8013850:	4605      	mov	r5, r0
 8013852:	ac02      	add	r4, sp, #8
 8013854:	e884 0006 	stmia.w	r4, {r1, r2}
 8013858:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801385c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013860:	f7ff fde6 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013864:	4631      	mov	r1, r6
 8013866:	4603      	mov	r3, r0
 8013868:	463a      	mov	r2, r7
 801386a:	4628      	mov	r0, r5
 801386c:	f7ff ff08 	bl	8013680 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013870:	4a05      	ldr	r2, [pc, #20]	@ (8013888 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013872:	682b      	ldr	r3, [r5, #0]
 8013874:	8812      	ldrh	r2, [r2, #0]
 8013876:	9200      	str	r2, [sp, #0]
 8013878:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801387a:	4603      	mov	r3, r0
 801387c:	4628      	mov	r0, r5
 801387e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013882:	47b0      	blx	r6
 8013884:	b005      	add	sp, #20
 8013886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013888:	240284e2 	.word	0x240284e2

0801388c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801388c:	b570      	push	{r4, r5, r6, lr}
 801388e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8013892:	4604      	mov	r4, r0
 8013894:	b19b      	cbz	r3, 80138be <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013896:	2002      	movs	r0, #2
 8013898:	f7ee f88a 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801389c:	2300      	movs	r3, #0
 801389e:	4620      	mov	r0, r4
 80138a0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80138a4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80138a8:	6823      	ldr	r3, [r4, #0]
 80138aa:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 80138ae:	f7ff fdbf 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80138b2:	4601      	mov	r1, r0
 80138b4:	4620      	mov	r0, r4
 80138b6:	462b      	mov	r3, r5
 80138b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138bc:	4718      	bx	r3
 80138be:	bd70      	pop	{r4, r5, r6, pc}

080138c0 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80138c0:	b570      	push	{r4, r5, r6, lr}
 80138c2:	4605      	mov	r5, r0
 80138c4:	460c      	mov	r4, r1
 80138c6:	2003      	movs	r0, #3
 80138c8:	b149      	cbz	r1, 80138de <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80138ca:	f7ee f811 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80138ce:	6928      	ldr	r0, [r5, #16]
 80138d0:	b168      	cbz	r0, 80138ee <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80138d2:	6803      	ldr	r3, [r0, #0]
 80138d4:	2101      	movs	r1, #1
 80138d6:	695b      	ldr	r3, [r3, #20]
 80138d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138dc:	4718      	bx	r3
 80138de:	f7ee f837 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80138e2:	6928      	ldr	r0, [r5, #16]
 80138e4:	b118      	cbz	r0, 80138ee <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80138e6:	6803      	ldr	r3, [r0, #0]
 80138e8:	4621      	mov	r1, r4
 80138ea:	695b      	ldr	r3, [r3, #20]
 80138ec:	e7f4      	b.n	80138d8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80138ee:	bd70      	pop	{r4, r5, r6, pc}

080138f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80138f0:	b538      	push	{r3, r4, r5, lr}
 80138f2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80138f6:	4604      	mov	r4, r0
 80138f8:	460d      	mov	r5, r1
 80138fa:	428b      	cmp	r3, r1
 80138fc:	d006      	beq.n	801390c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80138fe:	6803      	ldr	r3, [r0, #0]
 8013900:	b929      	cbnz	r1, 801390e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013902:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013906:	4798      	blx	r3
 8013908:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 801390c:	bd38      	pop	{r3, r4, r5, pc}
 801390e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013912:	e7f8      	b.n	8013906 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013914 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013914:	4b0d      	ldr	r3, [pc, #52]	@ (801394c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013916:	b510      	push	{r4, lr}
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	4604      	mov	r4, r0
 801391c:	b95b      	cbnz	r3, 8013936 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801391e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8013922:	2b02      	cmp	r3, #2
 8013924:	d007      	beq.n	8013936 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013926:	6840      	ldr	r0, [r0, #4]
 8013928:	f000 f91a 	bl	8013b60 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801392c:	b118      	cbz	r0, 8013936 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801392e:	6862      	ldr	r2, [r4, #4]
 8013930:	7a53      	ldrb	r3, [r2, #9]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d0fc      	beq.n	8013930 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013936:	f7ef f845 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801393a:	4620      	mov	r0, r4
 801393c:	2100      	movs	r1, #0
 801393e:	f7ff ffd7 	bl	80138f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013942:	4620      	mov	r0, r4
 8013944:	f7ff fd74 	bl	8013430 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013948:	bd10      	pop	{r4, pc}
 801394a:	bf00      	nop
 801394c:	240284e6 	.word	0x240284e6

08013950 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8013950:	b570      	push	{r4, r5, r6, lr}
 8013952:	4604      	mov	r4, r0
 8013954:	6803      	ldr	r3, [r0, #0]
 8013956:	b919      	cbnz	r1, 8013960 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8013958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801395a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801395e:	4718      	bx	r3
 8013960:	2200      	movs	r2, #0
 8013962:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8013966:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 801396a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801396c:	4798      	blx	r3
 801396e:	6863      	ldr	r3, [r4, #4]
 8013970:	2101      	movs	r1, #1
 8013972:	4605      	mov	r5, r0
 8013974:	4620      	mov	r0, r4
 8013976:	7299      	strb	r1, [r3, #10]
 8013978:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 801397c:	f7ff ffb8 	bl	80138f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013980:	4628      	mov	r0, r5
 8013982:	bd70      	pop	{r4, r5, r6, pc}

08013984 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013984:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013988:	1a13      	subs	r3, r2, r0
 801398a:	4258      	negs	r0, r3
 801398c:	4158      	adcs	r0, r3
 801398e:	4770      	bx	lr

08013990 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013990:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013994:	1a9b      	subs	r3, r3, r2
 8013996:	2b00      	cmp	r3, #0
 8013998:	bfdc      	itt	le
 801399a:	6882      	ldrle	r2, [r0, #8]
 801399c:	189b      	addle	r3, r3, r2
 801399e:	2b01      	cmp	r3, #1
 80139a0:	bfcc      	ite	gt
 80139a2:	2000      	movgt	r0, #0
 80139a4:	2001      	movle	r0, #1
 80139a6:	4770      	bx	lr

080139a8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80139a8:	6902      	ldr	r2, [r0, #16]
 80139aa:	6843      	ldr	r3, [r0, #4]
 80139ac:	2024      	movs	r0, #36	@ 0x24
 80139ae:	fb00 3002 	mla	r0, r0, r2, r3
 80139b2:	4770      	bx	lr

080139b4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80139b4:	6803      	ldr	r3, [r0, #0]
 80139b6:	691b      	ldr	r3, [r3, #16]
 80139b8:	4718      	bx	r3

080139ba <_ZN8touchgfx13DMA_Interface7executeEv>:
 80139ba:	2301      	movs	r3, #1
 80139bc:	b570      	push	{r4, r5, r6, lr}
 80139be:	7203      	strb	r3, [r0, #8]
 80139c0:	4604      	mov	r4, r0
 80139c2:	6840      	ldr	r0, [r0, #4]
 80139c4:	6803      	ldr	r3, [r0, #0]
 80139c6:	699b      	ldr	r3, [r3, #24]
 80139c8:	4798      	blx	r3
 80139ca:	6803      	ldr	r3, [r0, #0]
 80139cc:	4605      	mov	r5, r0
 80139ce:	2b40      	cmp	r3, #64	@ 0x40
 80139d0:	d00c      	beq.n	80139ec <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80139d2:	d810      	bhi.n	80139f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80139d4:	2b04      	cmp	r3, #4
 80139d6:	d01d      	beq.n	8013a14 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80139d8:	d804      	bhi.n	80139e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80139da:	2b01      	cmp	r3, #1
 80139dc:	d006      	beq.n	80139ec <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80139de:	2b02      	cmp	r3, #2
 80139e0:	d02c      	beq.n	8013a3c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80139e2:	bd70      	pop	{r4, r5, r6, pc}
 80139e4:	2b08      	cmp	r3, #8
 80139e6:	d01d      	beq.n	8013a24 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80139e8:	2b20      	cmp	r3, #32
 80139ea:	d1fa      	bne.n	80139e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80139ec:	6823      	ldr	r3, [r4, #0]
 80139ee:	4620      	mov	r0, r4
 80139f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139f2:	4798      	blx	r3
 80139f4:	e013      	b.n	8013a1e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80139f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139fa:	d0f7      	beq.n	80139ec <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80139fc:	d804      	bhi.n	8013a08 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80139fe:	2b80      	cmp	r3, #128	@ 0x80
 8013a00:	d0f4      	beq.n	80139ec <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a06:	e7f0      	b.n	80139ea <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013a0c:	d0ee      	beq.n	80139ec <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013a12:	e7e5      	b.n	80139e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013a14:	6823      	ldr	r3, [r4, #0]
 8013a16:	7f01      	ldrb	r1, [r0, #28]
 8013a18:	4620      	mov	r0, r4
 8013a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a1c:	4798      	blx	r3
 8013a1e:	6823      	ldr	r3, [r4, #0]
 8013a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a22:	e006      	b.n	8013a32 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013a24:	6823      	ldr	r3, [r4, #0]
 8013a26:	7f01      	ldrb	r1, [r0, #28]
 8013a28:	4620      	mov	r0, r4
 8013a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a2c:	4798      	blx	r3
 8013a2e:	6823      	ldr	r3, [r4, #0]
 8013a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a32:	4629      	mov	r1, r5
 8013a34:	4620      	mov	r0, r4
 8013a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a3a:	4718      	bx	r3
 8013a3c:	6823      	ldr	r3, [r4, #0]
 8013a3e:	4620      	mov	r0, r4
 8013a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a42:	4798      	blx	r3
 8013a44:	e7f3      	b.n	8013a2e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013a46 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013a46:	4770      	bx	lr

08013a48 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013a48:	4770      	bx	lr

08013a4a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8013a4a:	4770      	bx	lr

08013a4c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013a4c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013a50:	b510      	push	{r4, lr}
 8013a52:	1ad2      	subs	r2, r2, r3
 8013a54:	2a00      	cmp	r2, #0
 8013a56:	bfdc      	itt	le
 8013a58:	6884      	ldrle	r4, [r0, #8]
 8013a5a:	1912      	addle	r2, r2, r4
 8013a5c:	2a01      	cmp	r2, #1
 8013a5e:	dd16      	ble.n	8013a8e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013a60:	6842      	ldr	r2, [r0, #4]
 8013a62:	2424      	movs	r4, #36	@ 0x24
 8013a64:	fb04 2303 	mla	r3, r4, r3, r2
 8013a68:	f101 0220 	add.w	r2, r1, #32
 8013a6c:	f851 4b04 	ldr.w	r4, [r1], #4
 8013a70:	4291      	cmp	r1, r2
 8013a72:	f843 4b04 	str.w	r4, [r3], #4
 8013a76:	d1f9      	bne.n	8013a6c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013a78:	780a      	ldrb	r2, [r1, #0]
 8013a7a:	701a      	strb	r2, [r3, #0]
 8013a7c:	68c3      	ldr	r3, [r0, #12]
 8013a7e:	6882      	ldr	r2, [r0, #8]
 8013a80:	f3bf 8f5b 	dmb	ish
 8013a84:	3301      	adds	r3, #1
 8013a86:	429a      	cmp	r2, r3
 8013a88:	bfd8      	it	le
 8013a8a:	1a9b      	suble	r3, r3, r2
 8013a8c:	60c3      	str	r3, [r0, #12]
 8013a8e:	bd10      	pop	{r4, pc}

08013a90 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013a90:	6903      	ldr	r3, [r0, #16]
 8013a92:	6882      	ldr	r2, [r0, #8]
 8013a94:	f3bf 8f5b 	dmb	ish
 8013a98:	3301      	adds	r3, #1
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	bfd8      	it	le
 8013a9e:	1a9b      	suble	r3, r3, r2
 8013aa0:	6103      	str	r3, [r0, #16]
 8013aa2:	4770      	bx	lr

08013aa4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013aa4:	b570      	push	{r4, r5, r6, lr}
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	460e      	mov	r6, r1
 8013aaa:	6860      	ldr	r0, [r4, #4]
 8013aac:	6803      	ldr	r3, [r0, #0]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	4798      	blx	r3
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d1f9      	bne.n	8013aaa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8013aec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013ab8:	6828      	ldr	r0, [r5, #0]
 8013aba:	6803      	ldr	r3, [r0, #0]
 8013abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013abe:	4798      	blx	r3
 8013ac0:	f7ee ff8e 	bl	80029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013ac4:	6828      	ldr	r0, [r5, #0]
 8013ac6:	2101      	movs	r1, #1
 8013ac8:	f7ff ff12 	bl	80138f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013acc:	6860      	ldr	r0, [r4, #4]
 8013ace:	4631      	mov	r1, r6
 8013ad0:	6803      	ldr	r3, [r0, #0]
 8013ad2:	689b      	ldr	r3, [r3, #8]
 8013ad4:	4798      	blx	r3
 8013ad6:	6823      	ldr	r3, [r4, #0]
 8013ad8:	4620      	mov	r0, r4
 8013ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013adc:	4798      	blx	r3
 8013ade:	6828      	ldr	r0, [r5, #0]
 8013ae0:	6803      	ldr	r3, [r0, #0]
 8013ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013ae8:	4718      	bx	r3
 8013aea:	bf00      	nop
 8013aec:	240284e8 	.word	0x240284e8

08013af0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013af0:	b508      	push	{r3, lr}
 8013af2:	f7ee ff67 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013afa:	f7ee bf6b 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013afe <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013afe:	b510      	push	{r4, lr}
 8013b00:	4604      	mov	r4, r0
 8013b02:	2114      	movs	r1, #20
 8013b04:	f014 f9e4 	bl	8027ed0 <_ZdlPvj>
 8013b08:	4620      	mov	r0, r4
 8013b0a:	bd10      	pop	{r4, pc}

08013b0c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013b0c:	b570      	push	{r4, r5, r6, lr}
 8013b0e:	4604      	mov	r4, r0
 8013b10:	6840      	ldr	r0, [r0, #4]
 8013b12:	6803      	ldr	r3, [r0, #0]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	4798      	blx	r3
 8013b18:	4605      	mov	r5, r0
 8013b1a:	b930      	cbnz	r0, 8013b2a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013b1c:	7a23      	ldrb	r3, [r4, #8]
 8013b1e:	b123      	cbz	r3, 8013b2a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013b20:	6860      	ldr	r0, [r4, #4]
 8013b22:	6803      	ldr	r3, [r0, #0]
 8013b24:	695b      	ldr	r3, [r3, #20]
 8013b26:	4798      	blx	r3
 8013b28:	7225      	strb	r5, [r4, #8]
 8013b2a:	6860      	ldr	r0, [r4, #4]
 8013b2c:	6803      	ldr	r3, [r0, #0]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	4798      	blx	r3
 8013b32:	b928      	cbnz	r0, 8013b40 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013b34:	6823      	ldr	r3, [r4, #0]
 8013b36:	4620      	mov	r0, r4
 8013b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b3e:	4718      	bx	r3
 8013b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b44:	f7ee bf54 	b.w	80029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08013b48 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	6082      	str	r2, [r0, #8]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	4c03      	ldr	r4, [pc, #12]	@ (8013b5c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013b50:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013b54:	e9c0 4100 	strd	r4, r1, [r0]
 8013b58:	bd10      	pop	{r4, pc}
 8013b5a:	bf00      	nop
 8013b5c:	0802cae4 	.word	0x0802cae4

08013b60 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013b60:	6840      	ldr	r0, [r0, #4]
 8013b62:	6803      	ldr	r3, [r0, #0]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4718      	bx	r3

08013b68 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8013b68:	2300      	movs	r3, #0
 8013b6a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013b6c:	8503      	strh	r3, [r0, #40]	@ 0x28
 8013b6e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8013b70:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013b72:	6980      	ldr	r0, [r0, #24]
 8013b74:	b110      	cbz	r0, 8013b7c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8013b76:	6803      	ldr	r3, [r0, #0]
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	4718      	bx	r3
 8013b7c:	4770      	bx	lr

08013b7e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8013b7e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8013b82:	4770      	bx	lr

08013b84 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8013b84:	b538      	push	{r3, r4, r5, lr}
 8013b86:	0e0b      	lsrs	r3, r1, #24
 8013b88:	4604      	mov	r4, r0
 8013b8a:	460d      	mov	r5, r1
 8013b8c:	7783      	strb	r3, [r0, #30]
 8013b8e:	6803      	ldr	r3, [r0, #0]
 8013b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b92:	4798      	blx	r3
 8013b94:	6803      	ldr	r3, [r0, #0]
 8013b96:	4629      	mov	r1, r5
 8013b98:	689b      	ldr	r3, [r3, #8]
 8013b9a:	4798      	blx	r3
 8013b9c:	6823      	ldr	r3, [r4, #0]
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ba2:	4798      	blx	r3
 8013ba4:	61a0      	str	r0, [r4, #24]
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}

08013ba8 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8013ba8:	7741      	strb	r1, [r0, #29]
 8013baa:	4770      	bx	lr

08013bac <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8013bac:	b530      	push	{r4, r5, lr}
 8013bae:	460d      	mov	r5, r1
 8013bb0:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8013bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bbc:	682b      	ldr	r3, [r5, #0]
 8013bbe:	6023      	str	r3, [r4, #0]
 8013bc0:	bd30      	pop	{r4, r5, pc}

08013bc2 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8013bc2:	b538      	push	{r3, r4, r5, lr}
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	1d03      	adds	r3, r0, #4
 8013bc8:	6808      	ldr	r0, [r1, #0]
 8013bca:	2500      	movs	r5, #0
 8013bcc:	6849      	ldr	r1, [r1, #4]
 8013bce:	c303      	stmia	r3!, {r0, r1}
 8013bd0:	6813      	ldr	r3, [r2, #0]
 8013bd2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8013bd6:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8013bda:	6853      	ldr	r3, [r2, #4]
 8013bdc:	61a5      	str	r5, [r4, #24]
 8013bde:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8013be2:	f007 f97b 	bl	801aedc <_ZN8touchgfx9Matrix3x35resetEv>
 8013be6:	23ff      	movs	r3, #255	@ 0xff
 8013be8:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8013bec:	7763      	strb	r3, [r4, #29]
 8013bee:	77a3      	strb	r3, [r4, #30]
 8013bf0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8013bf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8013bfc:	bd38      	pop	{r3, r4, r5, pc}
	...

08013c00 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8013c00:	ee70 7a41 	vsub.f32	s15, s0, s2
 8013c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013c0c:	4605      	mov	r5, r0
 8013c0e:	ed2d 8b0a 	vpush	{d8-d12}
 8013c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c16:	b086      	sub	sp, #24
 8013c18:	eeb0 ba40 	vmov.f32	s22, s0
 8013c1c:	6802      	ldr	r2, [r0, #0]
 8013c1e:	eef0 ba60 	vmov.f32	s23, s1
 8013c22:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8013c26:	eef0 aa41 	vmov.f32	s21, s2
 8013c2a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8013c2c:	eeb0 aa61 	vmov.f32	s20, s3
 8013c30:	eeb0 ca42 	vmov.f32	s24, s4
 8013c34:	eef0 ca62 	vmov.f32	s25, s5
 8013c38:	d112      	bne.n	8013c60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8013c3a:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8013c3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c46:	d10b      	bne.n	8013c60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8013c48:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8013c4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8013c4e:	3901      	subs	r1, #1
 8013c50:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8013c54:	b006      	add	sp, #24
 8013c56:	ecbd 8b0a 	vpop	{d8-d12}
 8013c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c5e:	4710      	bx	r2
 8013c60:	23ff      	movs	r3, #255	@ 0xff
 8013c62:	4628      	mov	r0, r5
 8013c64:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8013c68:	77ab      	strb	r3, [r5, #30]
 8013c6a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8013c6c:	4798      	blx	r3
 8013c6e:	eeb0 0a4b 	vmov.f32	s0, s22
 8013c72:	eef0 0a6b 	vmov.f32	s1, s23
 8013c76:	4604      	mov	r4, r0
 8013c78:	4640      	mov	r0, r8
 8013c7a:	f007 f9de 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013c7e:	eef0 8a40 	vmov.f32	s17, s0
 8013c82:	ed8d 0a00 	vstr	s0, [sp]
 8013c86:	eeb0 0a6a 	vmov.f32	s0, s21
 8013c8a:	eef0 9a60 	vmov.f32	s19, s1
 8013c8e:	edcd 0a01 	vstr	s1, [sp, #4]
 8013c92:	4640      	mov	r0, r8
 8013c94:	eef0 0a4a 	vmov.f32	s1, s20
 8013c98:	f007 f9cf 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013c9c:	eef4 8a40 	vcmp.f32	s17, s0
 8013ca0:	eeb0 8a40 	vmov.f32	s16, s0
 8013ca4:	ed8d 0a02 	vstr	s0, [sp, #8]
 8013ca8:	eeb0 9a60 	vmov.f32	s18, s1
 8013cac:	edcd 0a03 	vstr	s1, [sp, #12]
 8013cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb4:	eef4 9a60 	vcmp.f32	s19, s1
 8013cb8:	bf0c      	ite	eq
 8013cba:	2301      	moveq	r3, #1
 8013cbc:	2300      	movne	r3, #0
 8013cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc2:	eef4 8a40 	vcmp.f32	s17, s0
 8013cc6:	7463      	strb	r3, [r4, #17]
 8013cc8:	bf0c      	ite	eq
 8013cca:	2301      	moveq	r3, #1
 8013ccc:	2300      	movne	r3, #0
 8013cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd2:	74a3      	strb	r3, [r4, #18]
 8013cd4:	d024      	beq.n	8013d20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013cd6:	eef4 9a60 	vcmp.f32	s19, s1
 8013cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cde:	d01f      	beq.n	8013d20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013ce0:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8013ce4:	4640      	mov	r0, r8
 8013ce6:	ee7a aacb 	vsub.f32	s21, s21, s22
 8013cea:	eeb0 0a4b 	vmov.f32	s0, s22
 8013cee:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8013cf2:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8013cf6:	eef0 0a6b 	vmov.f32	s1, s23
 8013cfa:	eea7 0acc 	vfms.f32	s0, s15, s24
 8013cfe:	eeec 0a87 	vfma.f32	s1, s25, s14
 8013d02:	f007 f99a 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013d06:	ed8d 0a04 	vstr	s0, [sp, #16]
 8013d0a:	ee30 0a68 	vsub.f32	s0, s0, s17
 8013d0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013d12:	edcd 0a05 	vstr	s1, [sp, #20]
 8013d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1a:	d121      	bne.n	8013d60 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	74a3      	strb	r3, [r4, #18]
 8013d20:	7c63      	ldrb	r3, [r4, #17]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d051      	beq.n	8013dca <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8013d26:	ee39 7a69 	vsub.f32	s14, s18, s19
 8013d2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013e20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8013d2e:	eef4 9ac9 	vcmpe.f32	s19, s18
 8013d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d3a:	edc4 7a08 	vstr	s15, [r4, #32]
 8013d3e:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8013d42:	ee17 3a90 	vmov	r3, s15
 8013d46:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8013d4a:	b21a      	sxth	r2, r3
 8013d4c:	ee17 3a90 	vmov	r3, s15
 8013d50:	bf48      	it	mi
 8013d52:	8122      	strhmi	r2, [r4, #8]
 8013d54:	b21b      	sxth	r3, r3
 8013d56:	bf56      	itet	pl
 8013d58:	80e2      	strhpl	r2, [r4, #6]
 8013d5a:	80e3      	strhmi	r3, [r4, #6]
 8013d5c:	8123      	strhpl	r3, [r4, #8]
 8013d5e:	e02c      	b.n	8013dba <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8013d60:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8013d64:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8013d68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013d6c:	edc4 7a05 	vstr	s15, [r4, #20]
 8013d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d74:	d102      	bne.n	8013d7c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8013d76:	2301      	movs	r3, #1
 8013d78:	7463      	strb	r3, [r4, #17]
 8013d7a:	e7d1      	b.n	8013d20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013d7c:	eeb0 7a69 	vmov.f32	s14, s19
 8013d80:	ee39 9a69 	vsub.f32	s18, s18, s19
 8013d84:	ee38 8a68 	vsub.f32	s16, s16, s17
 8013d88:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8013d8c:	ed84 7a06 	vstr	s14, [r4, #24]
 8013d90:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8013d94:	ee38 8a47 	vsub.f32	s16, s16, s14
 8013d98:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8013e24 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8013d9c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8013da0:	ed84 8a07 	vstr	s16, [r4, #28]
 8013da4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dac:	edc4 7a08 	vstr	s15, [r4, #32]
 8013db0:	d503      	bpl.n	8013dba <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8013db2:	eeb1 8a48 	vneg.f32	s16, s16
 8013db6:	ed84 8a07 	vstr	s16, [r4, #28]
 8013dba:	60e7      	str	r7, [r4, #12]
 8013dbc:	7426      	strb	r6, [r4, #16]
 8013dbe:	61ac      	str	r4, [r5, #24]
 8013dc0:	b006      	add	sp, #24
 8013dc2:	ecbd 8b0a 	vpop	{d8-d12}
 8013dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dca:	7ca3      	ldrb	r3, [r4, #18]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d0f4      	beq.n	8013dba <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8013dd0:	ee38 7a68 	vsub.f32	s14, s16, s17
 8013dd4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8013e20 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8013dd8:	eef4 8ac8 	vcmpe.f32	s17, s16
 8013ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de4:	edc4 7a08 	vstr	s15, [r4, #32]
 8013de8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013dec:	ee17 3a90 	vmov	r3, s15
 8013df0:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8013df4:	b21a      	sxth	r2, r3
 8013df6:	ee17 3a90 	vmov	r3, s15
 8013dfa:	bf48      	it	mi
 8013dfc:	8122      	strhmi	r2, [r4, #8]
 8013dfe:	b21b      	sxth	r3, r3
 8013e00:	bf56      	itet	pl
 8013e02:	80e2      	strhpl	r2, [r4, #6]
 8013e04:	80e3      	strhmi	r3, [r4, #6]
 8013e06:	8123      	strhpl	r3, [r4, #8]
 8013e08:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013e0c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013e10:	1a9b      	subs	r3, r3, r2
 8013e12:	ee07 3a90 	vmov	s15, r3
 8013e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e1a:	edc4 7a07 	vstr	s15, [r4, #28]
 8013e1e:	e7cc      	b.n	8013dba <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8013e20:	447ffffe 	.word	0x447ffffe
 8013e24:	44800000 	.word	0x44800000

08013e28 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8013e28:	b510      	push	{r4, lr}
 8013e2a:	ed2d 8b02 	vpush	{d8}
 8013e2e:	eef0 8a62 	vmov.f32	s17, s5
 8013e32:	2100      	movs	r1, #0
 8013e34:	4604      	mov	r4, r0
 8013e36:	eeb0 8a42 	vmov.f32	s16, s4
 8013e3a:	f013 fdbb 	bl	80279b4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8013e3e:	eef0 7a68 	vmov.f32	s15, s17
 8013e42:	6823      	ldr	r3, [r4, #0]
 8013e44:	4620      	mov	r0, r4
 8013e46:	689b      	ldr	r3, [r3, #8]
 8013e48:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013e4c:	ee17 2a90 	vmov	r2, s15
 8013e50:	eef0 7a48 	vmov.f32	s15, s16
 8013e54:	ecbd 8b02 	vpop	{d8}
 8013e58:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e60:	ee17 1a90 	vmov	r1, s15
 8013e64:	4718      	bx	r3

08013e66 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8013e66:	b510      	push	{r4, lr}
 8013e68:	ed2d 8b02 	vpush	{d8}
 8013e6c:	eef0 8a63 	vmov.f32	s17, s7
 8013e70:	2100      	movs	r1, #0
 8013e72:	4604      	mov	r4, r0
 8013e74:	eeb0 8a43 	vmov.f32	s16, s6
 8013e78:	f013 fe5e 	bl	8027b38 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8013e7c:	eef0 7a68 	vmov.f32	s15, s17
 8013e80:	6823      	ldr	r3, [r4, #0]
 8013e82:	4620      	mov	r0, r4
 8013e84:	689b      	ldr	r3, [r3, #8]
 8013e86:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013e8a:	ee17 2a90 	vmov	r2, s15
 8013e8e:	eef0 7a48 	vmov.f32	s15, s16
 8013e92:	ecbd 8b02 	vpop	{d8}
 8013e96:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e9e:	ee17 1a90 	vmov	r1, s15
 8013ea2:	4718      	bx	r3

08013ea4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8013ea4:	b513      	push	{r0, r1, r4, lr}
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8013eaa:	f007 f8c6 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013eae:	eef0 7a60 	vmov.f32	s15, s1
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013eb8:	ee17 2a90 	vmov	r2, s15
 8013ebc:	eef0 7a40 	vmov.f32	s15, s0
 8013ec0:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013ec4:	ee17 1a90 	vmov	r1, s15
 8013ec8:	b002      	add	sp, #8
 8013eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ece:	f013 bccb 	b.w	8027868 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8013ed2:	b513      	push	{r0, r1, r4, lr}
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8013ed8:	f007 f8af 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013edc:	eef0 7a60 	vmov.f32	s15, s1
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013ee6:	ee17 2a90 	vmov	r2, s15
 8013eea:	eef0 7a40 	vmov.f32	s15, s0
 8013eee:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013ef2:	ee17 1a90 	vmov	r1, s15
 8013ef6:	b002      	add	sp, #8
 8013ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013efc:	f013 bd01 	b.w	8027902 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08013f00 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8013f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f02:	2400      	movs	r4, #0
 8013f04:	9f07      	ldr	r7, [sp, #28]
 8013f06:	f04f 0e01 	mov.w	lr, #1
 8013f0a:	4626      	mov	r6, r4
 8013f0c:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8013f10:	4463      	add	r3, ip
 8013f12:	4563      	cmp	r3, ip
 8013f14:	d02d      	beq.n	8013f72 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8013f16:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8013f1a:	2d06      	cmp	r5, #6
 8013f1c:	d8f9      	bhi.n	8013f12 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8013f1e:	fa0e f505 	lsl.w	r5, lr, r5
 8013f22:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8013f26:	d10d      	bne.n	8013f44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8013f28:	f015 0f10 	tst.w	r5, #16
 8013f2c:	d117      	bne.n	8013f5e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8013f2e:	072d      	lsls	r5, r5, #28
 8013f30:	d5ef      	bpl.n	8013f12 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8013f32:	3801      	subs	r0, #1
 8013f34:	b91e      	cbnz	r6, 8013f3e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8013f36:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8013f3a:	682d      	ldr	r5, [r5, #0]
 8013f3c:	600d      	str	r5, [r1, #0]
 8013f3e:	b96c      	cbnz	r4, 8013f5c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8013f40:	2601      	movs	r6, #1
 8013f42:	e7e6      	b.n	8013f12 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8013f44:	b926      	cbnz	r6, 8013f50 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8013f46:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8013f4a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8013f4e:	600b      	str	r3, [r1, #0]
 8013f50:	b924      	cbnz	r4, 8013f5c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8013f52:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8013f56:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013f5a:	6013      	str	r3, [r2, #0]
 8013f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f5e:	3801      	subs	r0, #1
 8013f60:	b91c      	cbnz	r4, 8013f6a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8013f62:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8013f66:	6824      	ldr	r4, [r4, #0]
 8013f68:	6014      	str	r4, [r2, #0]
 8013f6a:	2e00      	cmp	r6, #0
 8013f6c:	d1f6      	bne.n	8013f5c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8013f6e:	2401      	movs	r4, #1
 8013f70:	e7cf      	b.n	8013f12 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8013f72:	b90e      	cbnz	r6, 8013f78 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8013f74:	2300      	movs	r3, #0
 8013f76:	600b      	str	r3, [r1, #0]
 8013f78:	2c00      	cmp	r4, #0
 8013f7a:	d1ef      	bne.n	8013f5c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	e7ec      	b.n	8013f5a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08013f80 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	ed2d 8b0a 	vpush	{d8-d12}
 8013f86:	eef0 ba40 	vmov.f32	s23, s0
 8013f8a:	4604      	mov	r4, r0
 8013f8c:	eeb0 ca60 	vmov.f32	s24, s1
 8013f90:	460d      	mov	r5, r1
 8013f92:	eef0 aa41 	vmov.f32	s21, s2
 8013f96:	eeb0 ba61 	vmov.f32	s22, s3
 8013f9a:	eeb0 9a42 	vmov.f32	s18, s4
 8013f9e:	eef0 9a62 	vmov.f32	s19, s5
 8013fa2:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8013fa6:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8013faa:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8013fae:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8013fb2:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8013fb6:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8013fba:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8013fbe:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013fc2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8013fc6:	f013 ffad 	bl	8027f24 <sqrtf>
 8013fca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd2:	d12e      	bne.n	8014032 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8013fd4:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8013fd8:	ee39 7acb 	vsub.f32	s14, s19, s22
 8013fdc:	eeb0 8a6a 	vmov.f32	s16, s21
 8013fe0:	eef0 8a4b 	vmov.f32	s17, s22
 8013fe4:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8013fe8:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8013fec:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8013ff0:	eee7 8aca 	vfms.f32	s17, s15, s20
 8013ff4:	2d02      	cmp	r5, #2
 8013ff6:	dc2f      	bgt.n	8014058 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8013ff8:	3501      	adds	r5, #1
 8013ffa:	eef0 1a4b 	vmov.f32	s3, s22
 8013ffe:	eeb0 1a6a 	vmov.f32	s2, s21
 8014002:	4620      	mov	r0, r4
 8014004:	4629      	mov	r1, r5
 8014006:	eef0 2a68 	vmov.f32	s5, s17
 801400a:	eeb0 2a48 	vmov.f32	s4, s16
 801400e:	eef0 0a4c 	vmov.f32	s1, s24
 8014012:	eeb0 0a6b 	vmov.f32	s0, s23
 8014016:	f7ff ffb3 	bl	8013f80 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801401a:	eef0 0a68 	vmov.f32	s1, s17
 801401e:	eeb0 0a48 	vmov.f32	s0, s16
 8014022:	4620      	mov	r0, r4
 8014024:	f7ff ff55 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014028:	eeb0 ba68 	vmov.f32	s22, s17
 801402c:	eef0 aa48 	vmov.f32	s21, s16
 8014030:	e7b9      	b.n	8013fa6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8014032:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8014036:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801403a:	ee78 8acc 	vsub.f32	s17, s17, s24
 801403e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8014042:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014046:	ee87 8a00 	vdiv.f32	s16, s14, s0
 801404a:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801404e:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8014052:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8014056:	e7cd      	b.n	8013ff4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8014058:	eef0 0a68 	vmov.f32	s1, s17
 801405c:	4620      	mov	r0, r4
 801405e:	eeb0 0a48 	vmov.f32	s0, s16
 8014062:	f7ff ff36 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014066:	ecbd 8b0a 	vpop	{d8-d12}
 801406a:	bd38      	pop	{r3, r4, r5, pc}

0801406c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 801406c:	b510      	push	{r4, lr}
 801406e:	ed2d 8b0a 	vpush	{d8-d12}
 8014072:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8014076:	4604      	mov	r4, r0
 8014078:	eeb0 ca40 	vmov.f32	s24, s0
 801407c:	2b02      	cmp	r3, #2
 801407e:	eeb0 9a60 	vmov.f32	s18, s1
 8014082:	eef0 9a41 	vmov.f32	s19, s2
 8014086:	eef0 8a61 	vmov.f32	s17, s3
 801408a:	eeb0 ba42 	vmov.f32	s22, s4
 801408e:	eef0 ba62 	vmov.f32	s23, s5
 8014092:	eeb0 aa43 	vmov.f32	s20, s6
 8014096:	eef0 aa63 	vmov.f32	s21, s7
 801409a:	eeb0 8a44 	vmov.f32	s16, s8
 801409e:	eef0 ca64 	vmov.f32	s25, s9
 80140a2:	d12c      	bne.n	80140fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 80140a4:	eef0 0a62 	vmov.f32	s1, s5
 80140a8:	eeb0 0a42 	vmov.f32	s0, s4
 80140ac:	f7ff ff11 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80140b0:	ee79 9acb 	vsub.f32	s19, s19, s22
 80140b4:	ee7a caec 	vsub.f32	s25, s21, s25
 80140b8:	ee78 8aeb 	vsub.f32	s17, s17, s23
 80140bc:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80140c0:	ee69 9aac 	vmul.f32	s19, s19, s25
 80140c4:	ee28 8a88 	vmul.f32	s16, s17, s16
 80140c8:	eef4 9ac8 	vcmpe.f32	s19, s16
 80140cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d0:	db0f      	blt.n	80140f2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80140d2:	2101      	movs	r1, #1
 80140d4:	eef0 2a6a 	vmov.f32	s5, s21
 80140d8:	eeb0 2a4a 	vmov.f32	s4, s20
 80140dc:	4620      	mov	r0, r4
 80140de:	eef0 1a6b 	vmov.f32	s3, s23
 80140e2:	eeb0 1a4b 	vmov.f32	s2, s22
 80140e6:	eef0 0a49 	vmov.f32	s1, s18
 80140ea:	eeb0 0a4c 	vmov.f32	s0, s24
 80140ee:	f7ff ff47 	bl	8013f80 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80140f2:	eef0 0a6a 	vmov.f32	s1, s21
 80140f6:	4620      	mov	r0, r4
 80140f8:	eeb0 0a4a 	vmov.f32	s0, s20
 80140fc:	e035      	b.n	801416a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d138      	bne.n	8014174 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8014102:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8014106:	ee33 6a48 	vsub.f32	s12, s6, s16
 801410a:	ee71 7a42 	vsub.f32	s15, s2, s4
 801410e:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8014112:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8014116:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801411a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014122:	d027      	beq.n	8014174 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8014124:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8014128:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 801412c:	eea4 8a83 	vfma.f32	s16, s9, s6
 8014130:	eee1 8a22 	vfma.f32	s17, s2, s5
 8014134:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8014138:	ee28 8a44 	vnmul.f32	s16, s16, s8
 801413c:	eee6 7a28 	vfma.f32	s15, s12, s17
 8014140:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8014144:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8014148:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 801414c:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8014150:	ee3c ca40 	vsub.f32	s24, s24, s0
 8014154:	ee39 9a60 	vsub.f32	s18, s18, s1
 8014158:	ee29 9a09 	vmul.f32	s18, s18, s18
 801415c:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8014160:	eef4 7ac9 	vcmpe.f32	s15, s18
 8014164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014168:	db04      	blt.n	8014174 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801416a:	f7ff feb2 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801416e:	ecbd 8b0a 	vpop	{d8-d12}
 8014172:	bd10      	pop	{r4, pc}
 8014174:	eef0 0a6b 	vmov.f32	s1, s23
 8014178:	4620      	mov	r0, r4
 801417a:	eeb0 0a4b 	vmov.f32	s0, s22
 801417e:	f7ff fea8 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014182:	e7b6      	b.n	80140f2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08014184 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8014184:	b510      	push	{r4, lr}
 8014186:	ed2d 8b0c 	vpush	{d8-d13}
 801418a:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801418e:	4604      	mov	r4, r0
 8014190:	eeb0 9a40 	vmov.f32	s18, s0
 8014194:	eef0 9a60 	vmov.f32	s19, s1
 8014198:	eef0 aa41 	vmov.f32	s21, s2
 801419c:	eeb0 ba61 	vmov.f32	s22, s3
 80141a0:	b933      	cbnz	r3, 80141b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 80141a2:	f7ff fe96 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80141a6:	eef0 0a4b 	vmov.f32	s1, s22
 80141aa:	eeb0 0a6a 	vmov.f32	s0, s21
 80141ae:	e015      	b.n	80141dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 80141b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80141b4:	2b02      	cmp	r3, #2
 80141b6:	ee71 8a40 	vsub.f32	s17, s2, s0
 80141ba:	ee31 8ae0 	vsub.f32	s16, s3, s1
 80141be:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80141c2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80141c6:	d10f      	bne.n	80141e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 80141c8:	ee70 0ae8 	vsub.f32	s1, s1, s17
 80141cc:	ee30 0a08 	vadd.f32	s0, s0, s16
 80141d0:	f7ff fe7f 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80141d4:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80141d8:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80141dc:	4620      	mov	r0, r4
 80141de:	f7ff fe78 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80141e2:	ecbd 8b0c 	vpop	{d8-d13}
 80141e6:	bd10      	pop	{r4, pc}
 80141e8:	f7ff fe73 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80141ec:	eef0 0a69 	vmov.f32	s1, s19
 80141f0:	eeb0 0a49 	vmov.f32	s0, s18
 80141f4:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8014324 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80141f8:	eeb1 aa68 	vneg.f32	s20, s17
 80141fc:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8014328 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8014200:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014204:	4620      	mov	r0, r4
 8014206:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801420a:	ed9f ca48 	vldr	s24, [pc, #288]	@ 801432c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 801420e:	eddf ca48 	vldr	s25, [pc, #288]	@ 8014330 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8014212:	ed9f da48 	vldr	s26, [pc, #288]	@ 8014334 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8014216:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801421a:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801421e:	f7ff fe58 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014222:	eef0 0a69 	vmov.f32	s1, s19
 8014226:	eeb0 0a49 	vmov.f32	s0, s18
 801422a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8014338 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 801422e:	4620      	mov	r0, r4
 8014230:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014234:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014238:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801423c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8014240:	f7ff fe47 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014244:	eef0 0a69 	vmov.f32	s1, s19
 8014248:	eeb0 0a49 	vmov.f32	s0, s18
 801424c:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801433c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8014250:	4620      	mov	r0, r4
 8014252:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014256:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801425a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801425e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8014262:	f7ff fe36 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014266:	eef0 0a69 	vmov.f32	s1, s19
 801426a:	eeb0 0a49 	vmov.f32	s0, s18
 801426e:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8014340 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8014272:	4620      	mov	r0, r4
 8014274:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014278:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801427c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8014280:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8014284:	f7ff fe25 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014288:	ee79 0a88 	vadd.f32	s1, s19, s16
 801428c:	ee39 0a28 	vadd.f32	s0, s18, s17
 8014290:	4620      	mov	r0, r4
 8014292:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8014296:	ee30 0a08 	vadd.f32	s0, s0, s16
 801429a:	f7ff fe1a 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801429e:	eef0 0a69 	vmov.f32	s1, s19
 80142a2:	eeb0 0a49 	vmov.f32	s0, s18
 80142a6:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8014344 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 80142aa:	4620      	mov	r0, r4
 80142ac:	eee8 0a27 	vfma.f32	s1, s16, s15
 80142b0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80142b4:	eeea 0a0d 	vfma.f32	s1, s20, s26
 80142b8:	eea8 0a0d 	vfma.f32	s0, s16, s26
 80142bc:	f7ff fe09 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80142c0:	eef0 0a69 	vmov.f32	s1, s19
 80142c4:	eeb0 0a49 	vmov.f32	s0, s18
 80142c8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8014348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 80142cc:	4620      	mov	r0, r4
 80142ce:	eee8 0a27 	vfma.f32	s1, s16, s15
 80142d2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80142d6:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80142da:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80142de:	f7ff fdf8 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80142e2:	eef0 0a69 	vmov.f32	s1, s19
 80142e6:	eeb0 0a49 	vmov.f32	s0, s18
 80142ea:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801434c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80142ee:	4620      	mov	r0, r4
 80142f0:	eee8 0a27 	vfma.f32	s1, s16, s15
 80142f4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80142f8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80142fc:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8014300:	f7ff fde7 	bl	8013ed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8014304:	eef0 0a69 	vmov.f32	s1, s19
 8014308:	eeb0 0a49 	vmov.f32	s0, s18
 801430c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8014350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8014310:	4620      	mov	r0, r4
 8014312:	eee8 0a27 	vfma.f32	s1, s16, s15
 8014316:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801431a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 801431e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8014322:	e73e      	b.n	80141a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8014324:	3d23d70a 	.word	0x3d23d70a
 8014328:	3e8f5c29 	.word	0x3e8f5c29
 801432c:	3f19999a 	.word	0x3f19999a
 8014330:	3f4ccccd 	.word	0x3f4ccccd
 8014334:	3f75c28f 	.word	0x3f75c28f
 8014338:	3e4ccccd 	.word	0x3e4ccccd
 801433c:	3ecccccd 	.word	0x3ecccccd
 8014340:	3f3851ec 	.word	0x3f3851ec
 8014344:	3fa3d70a 	.word	0x3fa3d70a
 8014348:	3fcccccd 	.word	0x3fcccccd
 801434c:	3fe66666 	.word	0x3fe66666
 8014350:	3ffae148 	.word	0x3ffae148

08014354 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8014354:	b570      	push	{r4, r5, r6, lr}
 8014356:	ed2d 8b06 	vpush	{d8-d10}
 801435a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801435e:	eef0 aa40 	vmov.f32	s21, s0
 8014362:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8014366:	4604      	mov	r4, r0
 8014368:	ee30 8ac8 	vsub.f32	s16, s1, s16
 801436c:	ee30 9a49 	vsub.f32	s18, s0, s18
 8014370:	eeb0 aa60 	vmov.f32	s20, s1
 8014374:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014378:	eea9 0a09 	vfma.f32	s0, s18, s18
 801437c:	f013 fdd2 	bl	8027f24 <sqrtf>
 8014380:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014388:	dd36      	ble.n	80143f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 801438a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801438e:	2600      	movs	r6, #0
 8014390:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8014394:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8014398:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 801439c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 80143a0:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80143a4:	eec8 8a26 	vdiv.f32	s17, s16, s13
 80143a8:	ee89 8a26 	vdiv.f32	s16, s18, s13
 80143ac:	ee70 9a28 	vadd.f32	s19, s0, s17
 80143b0:	ee78 8aaa 	vadd.f32	s17, s17, s21
 80143b4:	ee30 9ac8 	vsub.f32	s18, s1, s16
 80143b8:	ee3a 8a48 	vsub.f32	s16, s20, s16
 80143bc:	b1fd      	cbz	r5, 80143fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 80143be:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 80143c2:	eef0 0a49 	vmov.f32	s1, s18
 80143c6:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 80143ca:	eeb0 0a69 	vmov.f32	s0, s19
 80143ce:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 80143d2:	4620      	mov	r0, r4
 80143d4:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80143d8:	f7ff fd64 	bl	8013ea4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80143dc:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80143e0:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80143e4:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80143e8:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80143ec:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80143f0:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80143f4:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80143f8:	ecbd 8b06 	vpop	{d8-d10}
 80143fc:	bd70      	pop	{r4, r5, r6, pc}
 80143fe:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8014402:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8014406:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801440a:	b16b      	cbz	r3, 8014428 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 801440c:	eef0 1a49 	vmov.f32	s3, s18
 8014410:	4620      	mov	r0, r4
 8014412:	eeb0 1a69 	vmov.f32	s2, s19
 8014416:	eef0 0a62 	vmov.f32	s1, s5
 801441a:	eeb0 0a42 	vmov.f32	s0, s4
 801441e:	f7ff feb1 	bl	8014184 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8014422:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8014426:	e7db      	b.n	80143e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8014428:	eef0 4a48 	vmov.f32	s9, s16
 801442c:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8014430:	eeb0 4a68 	vmov.f32	s8, s17
 8014434:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8014438:	eef0 3a49 	vmov.f32	s7, s18
 801443c:	4620      	mov	r0, r4
 801443e:	eeb0 3a69 	vmov.f32	s6, s19
 8014442:	f7ff fe13 	bl	801406c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8014446:	e7cb      	b.n	80143e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08014448 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8014448:	ee07 2a90 	vmov	s15, r2
 801444c:	ee07 1a10 	vmov	s14, r1
 8014450:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014454:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8014468 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8014458:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801445c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014460:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014464:	f7ff bf76 	b.w	8014354 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014468:	3d000000 	.word	0x3d000000

0801446c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 801446c:	b538      	push	{r3, r4, r5, lr}
 801446e:	ed2d 8b02 	vpush	{d8}
 8014472:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8014476:	4604      	mov	r4, r0
 8014478:	b31d      	cbz	r5, 80144c2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 801447a:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801447e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8014482:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8014486:	ee78 8a67 	vsub.f32	s17, s16, s15
 801448a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801448e:	eef0 0a68 	vmov.f32	s1, s17
 8014492:	f7ff fd07 	bl	8013ea4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8014496:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801449a:	eef0 1a48 	vmov.f32	s3, s16
 801449e:	4620      	mov	r0, r4
 80144a0:	eeb0 0a41 	vmov.f32	s0, s2
 80144a4:	eef0 0a68 	vmov.f32	s1, s17
 80144a8:	f7ff fe6c 	bl	8014184 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80144ac:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 80144b0:	eef0 1a68 	vmov.f32	s3, s17
 80144b4:	4620      	mov	r0, r4
 80144b6:	eef0 0a48 	vmov.f32	s1, s16
 80144ba:	eeb0 0a41 	vmov.f32	s0, s2
 80144be:	f7ff fe61 	bl	8014184 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80144c2:	4628      	mov	r0, r5
 80144c4:	ecbd 8b02 	vpop	{d8}
 80144c8:	bd38      	pop	{r3, r4, r5, pc}

080144ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 80144ca:	b510      	push	{r4, lr}
 80144cc:	ed2d 8b02 	vpush	{d8}
 80144d0:	4604      	mov	r4, r0
 80144d2:	eeb0 8a40 	vmov.f32	s16, s0
 80144d6:	eef0 8a60 	vmov.f32	s17, s1
 80144da:	f7ff ffc7 	bl	801446c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80144de:	b9d0      	cbnz	r0, 8014516 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80144e0:	4620      	mov	r0, r4
 80144e2:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80144e6:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80144ea:	eef0 0a68 	vmov.f32	s1, s17
 80144ee:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80144f2:	eeb0 0a48 	vmov.f32	s0, s16
 80144f6:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80144fa:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80144fe:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8014502:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8014506:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 801450a:	f7ff fdaf 	bl	801406c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801450e:	2001      	movs	r0, #1
 8014510:	ecbd 8b02 	vpop	{d8}
 8014514:	bd10      	pop	{r4, pc}
 8014516:	2000      	movs	r0, #0
 8014518:	e7fa      	b.n	8014510 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0801451a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 801451a:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 801451e:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8014522:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8014526:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 801452a:	f7ff be2b 	b.w	8014184 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08014530 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8014530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014534:	b089      	sub	sp, #36	@ 0x24
 8014536:	461c      	mov	r4, r3
 8014538:	4682      	mov	sl, r0
 801453a:	4615      	mov	r5, r2
 801453c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014540:	f10d 0820 	add.w	r8, sp, #32
 8014544:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014546:	9304      	str	r3, [sp, #16]
 8014548:	2300      	movs	r3, #0
 801454a:	9105      	str	r1, [sp, #20]
 801454c:	9306      	str	r3, [sp, #24]
 801454e:	f848 3d04 	str.w	r3, [r8, #-4]!
 8014552:	9b04      	ldr	r3, [sp, #16]
 8014554:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8014558:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 801455c:	9b05      	ldr	r3, [sp, #20]
 801455e:	429d      	cmp	r5, r3
 8014560:	d96d      	bls.n	801463e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8014562:	3d01      	subs	r5, #1
 8014564:	f819 3005 	ldrb.w	r3, [r9, r5]
 8014568:	2b06      	cmp	r3, #6
 801456a:	d8f7      	bhi.n	801455c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801456c:	a201      	add	r2, pc, #4	@ (adr r2, 8014574 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014572:	bf00      	nop
 8014574:	08014593 	.word	0x08014593
 8014578:	0801455d 	.word	0x0801455d
 801457c:	08014591 	.word	0x08014591
 8014580:	080145b5 	.word	0x080145b5
 8014584:	080145b5 	.word	0x080145b5
 8014588:	080145b9 	.word	0x080145b9
 801458c:	080145f9 	.word	0x080145f9
 8014590:	3c02      	subs	r4, #2
 8014592:	4650      	mov	r0, sl
 8014594:	9400      	str	r4, [sp, #0]
 8014596:	462b      	mov	r3, r5
 8014598:	4642      	mov	r2, r8
 801459a:	a906      	add	r1, sp, #24
 801459c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80145a0:	f7ff fcae 	bl	8013f00 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80145a4:	eddd 0a07 	vldr	s1, [sp, #28]
 80145a8:	ed9d 0a06 	vldr	s0, [sp, #24]
 80145ac:	4630      	mov	r0, r6
 80145ae:	f7ff fed1 	bl	8014354 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80145b2:	e7d3      	b.n	801455c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80145b4:	3c01      	subs	r4, #1
 80145b6:	e7ec      	b.n	8014592 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80145b8:	f1a4 0b04 	sub.w	fp, r4, #4
 80145bc:	3c02      	subs	r4, #2
 80145be:	4650      	mov	r0, sl
 80145c0:	462b      	mov	r3, r5
 80145c2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80145c6:	f8cd b000 	str.w	fp, [sp]
 80145ca:	4642      	mov	r2, r8
 80145cc:	a906      	add	r1, sp, #24
 80145ce:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80145d2:	f7ff fc95 	bl	8013f00 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80145d6:	eddd 2a07 	vldr	s5, [sp, #28]
 80145da:	ed9d 2a06 	vldr	s4, [sp, #24]
 80145de:	4630      	mov	r0, r6
 80145e0:	ed54 1a01 	vldr	s3, [r4, #-4]
 80145e4:	ed14 1a02 	vldr	s2, [r4, #-8]
 80145e8:	edd4 0a01 	vldr	s1, [r4, #4]
 80145ec:	ed94 0a00 	vldr	s0, [r4]
 80145f0:	f7ff fc1a 	bl	8013e28 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80145f4:	465c      	mov	r4, fp
 80145f6:	e7b1      	b.n	801455c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80145f8:	f1a4 0b06 	sub.w	fp, r4, #6
 80145fc:	3c02      	subs	r4, #2
 80145fe:	4650      	mov	r0, sl
 8014600:	462b      	mov	r3, r5
 8014602:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8014606:	f8cd b000 	str.w	fp, [sp]
 801460a:	4642      	mov	r2, r8
 801460c:	a906      	add	r1, sp, #24
 801460e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8014612:	f7ff fc75 	bl	8013f00 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8014616:	eddd 3a07 	vldr	s7, [sp, #28]
 801461a:	ed9d 3a06 	vldr	s6, [sp, #24]
 801461e:	4630      	mov	r0, r6
 8014620:	ed54 2a03 	vldr	s5, [r4, #-12]
 8014624:	ed14 2a04 	vldr	s4, [r4, #-16]
 8014628:	ed54 1a01 	vldr	s3, [r4, #-4]
 801462c:	ed14 1a02 	vldr	s2, [r4, #-8]
 8014630:	edd4 0a01 	vldr	s1, [r4, #4]
 8014634:	ed94 0a00 	vldr	s0, [r4]
 8014638:	f7ff fc15 	bl	8013e66 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801463c:	e7da      	b.n	80145f4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 801463e:	9b04      	ldr	r3, [sp, #16]
 8014640:	b113      	cbz	r3, 8014648 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8014642:	4630      	mov	r0, r6
 8014644:	f7ff ff69 	bl	801451a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8014648:	b009      	add	sp, #36	@ 0x24
 801464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801464e:	bf00      	nop

08014650 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8014650:	eef0 7a60 	vmov.f32	s15, s1
 8014654:	6803      	ldr	r3, [r0, #0]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801465c:	ee17 2a90 	vmov	r2, s15
 8014660:	eef0 7a40 	vmov.f32	s15, s0
 8014664:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014668:	ee17 1a90 	vmov	r1, s15
 801466c:	4718      	bx	r3
	...

08014670 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8014670:	4b04      	ldr	r3, [pc, #16]	@ (8014684 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8014672:	b510      	push	{r4, lr}
 8014674:	4604      	mov	r4, r0
 8014676:	f840 3b14 	str.w	r3, [r0], #20
 801467a:	f002 fd0f 	bl	801709c <_ZN8touchgfx7OutlineD1Ev>
 801467e:	4620      	mov	r0, r4
 8014680:	bd10      	pop	{r4, pc}
 8014682:	bf00      	nop
 8014684:	0802d5ac 	.word	0x0802d5ac

08014688 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8014688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801468c:	ed2d 8b04 	vpush	{d8-d9}
 8014690:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8014694:	b0b5      	sub	sp, #212	@ 0xd4
 8014696:	4605      	mov	r5, r0
 8014698:	468b      	mov	fp, r1
 801469a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801469e:	9206      	str	r2, [sp, #24]
 80146a0:	461e      	mov	r6, r3
 80146a2:	2400      	movs	r4, #0
 80146a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a8:	f240 814f 	bls.w	801494a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80146ac:	23ff      	movs	r3, #255	@ 0xff
 80146ae:	1d02      	adds	r2, r0, #4
 80146b0:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8014950 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 80146b4:	f04f 0800 	mov.w	r8, #0
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	af08      	add	r7, sp, #32
 80146bc:	6981      	ldr	r1, [r0, #24]
 80146be:	a808      	add	r0, sp, #32
 80146c0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80146c2:	eef0 9a49 	vmov.f32	s19, s18
 80146c6:	f012 ff83 	bl	80275d0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80146ca:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 80146ce:	4ba1      	ldr	r3, [pc, #644]	@ (8014954 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 80146d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80146d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80146d8:	2201      	movs	r2, #1
 80146da:	9308      	str	r3, [sp, #32]
 80146dc:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80146e0:	edd5 6a08 	vldr	s13, [r5, #32]
 80146e4:	eeb0 8a49 	vmov.f32	s16, s18
 80146e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ec:	9325      	str	r3, [sp, #148]	@ 0x94
 80146ee:	f04f 0300 	mov.w	r3, #0
 80146f2:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 80146f6:	7f6a      	ldrb	r2, [r5, #29]
 80146f8:	eef0 8a49 	vmov.f32	s17, s18
 80146fc:	bf48      	it	mi
 80146fe:	eef1 7a67 	vnegmi.f32	s15, s15
 8014702:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8014706:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 801470a:	46c1      	mov	r9, r8
 801470c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8014710:	f04f 0a01 	mov.w	sl, #1
 8014714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014718:	7fab      	ldrb	r3, [r5, #30]
 801471a:	942a      	str	r4, [sp, #168]	@ 0xa8
 801471c:	435a      	muls	r2, r3
 801471e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8014722:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8014726:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 801472a:	1c53      	adds	r3, r2, #1
 801472c:	942b      	str	r4, [sp, #172]	@ 0xac
 801472e:	942c      	str	r4, [sp, #176]	@ 0xb0
 8014730:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014734:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014738:	942d      	str	r4, [sp, #180]	@ 0xb4
 801473a:	942e      	str	r4, [sp, #184]	@ 0xb8
 801473c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8014740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014744:	942f      	str	r4, [sp, #188]	@ 0xbc
 8014746:	9430      	str	r4, [sp, #192]	@ 0xc0
 8014748:	9431      	str	r4, [sp, #196]	@ 0xc4
 801474a:	9432      	str	r4, [sp, #200]	@ 0xc8
 801474c:	9433      	str	r4, [sp, #204]	@ 0xcc
 801474e:	4644      	mov	r4, r8
 8014750:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8014754:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8014758:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 801475c:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8014760:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8014764:	9b06      	ldr	r3, [sp, #24]
 8014766:	454b      	cmp	r3, r9
 8014768:	f000 80cc 	beq.w	8014904 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 801476c:	f109 0301 	add.w	r3, r9, #1
 8014770:	9305      	str	r3, [sp, #20]
 8014772:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8014776:	2b06      	cmp	r3, #6
 8014778:	d839      	bhi.n	80147ee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801477a:	e8df f003 	tbb	[pc, r3]
 801477e:	3b04      	.short	0x3b04
 8014780:	817c6f60 	.word	0x817c6f60
 8014784:	a0          	.byte	0xa0
 8014785:	00          	.byte	0x00
 8014786:	45c1      	cmp	r9, r8
 8014788:	d92b      	bls.n	80147e2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801478a:	eef0 0a49 	vmov.f32	s1, s18
 801478e:	4638      	mov	r0, r7
 8014790:	eeb0 0a69 	vmov.f32	s0, s19
 8014794:	f7ff fdde 	bl	8014354 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014798:	4638      	mov	r0, r7
 801479a:	f7ff fe67 	bl	801446c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801479e:	4681      	mov	r9, r0
 80147a0:	b9f8      	cbnz	r0, 80147e2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80147a2:	eef0 0a49 	vmov.f32	s1, s18
 80147a6:	4638      	mov	r0, r7
 80147a8:	eeb0 0a69 	vmov.f32	s0, s19
 80147ac:	f7ff fe8d 	bl	80144ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80147b0:	4628      	mov	r0, r5
 80147b2:	4623      	mov	r3, r4
 80147b4:	9a05      	ldr	r2, [sp, #20]
 80147b6:	4641      	mov	r1, r8
 80147b8:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 80147bc:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 80147c0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80147c4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80147c8:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80147cc:	e9cd b600 	strd	fp, r6, [sp]
 80147d0:	f7ff feae 	bl	8014530 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80147d4:	eef0 0a49 	vmov.f32	s1, s18
 80147d8:	eeb0 0a69 	vmov.f32	s0, s19
 80147dc:	4638      	mov	r0, r7
 80147de:	f7ff fe74 	bl	80144ca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80147e2:	eeb0 8a49 	vmov.f32	s16, s18
 80147e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80147ea:	eef0 8a69 	vmov.f32	s17, s19
 80147ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80147f2:	e7b7      	b.n	8014764 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80147f4:	45c1      	cmp	r9, r8
 80147f6:	d90d      	bls.n	8014814 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80147f8:	4638      	mov	r0, r7
 80147fa:	f7ff fe37 	bl	801446c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80147fe:	b948      	cbnz	r0, 8014814 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8014800:	4623      	mov	r3, r4
 8014802:	464a      	mov	r2, r9
 8014804:	4641      	mov	r1, r8
 8014806:	4628      	mov	r0, r5
 8014808:	e9cd a702 	strd	sl, r7, [sp, #8]
 801480c:	e9cd b600 	strd	fp, r6, [sp]
 8014810:	f7ff fe8e 	bl	8014530 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8014814:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014818:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 801481c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8014820:	3402      	adds	r4, #2
 8014822:	edd3 8a00 	vldr	s17, [r3]
 8014826:	46c8      	mov	r8, r9
 8014828:	ed93 8a01 	vldr	s16, [r3, #4]
 801482c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8014830:	eef0 9a68 	vmov.f32	s19, s17
 8014834:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8014838:	eeb0 9a48 	vmov.f32	s18, s16
 801483c:	e7d7      	b.n	80147ee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801483e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014842:	4638      	mov	r0, r7
 8014844:	3402      	adds	r4, #2
 8014846:	edd3 8a00 	vldr	s17, [r3]
 801484a:	ed93 8a01 	vldr	s16, [r3, #4]
 801484e:	eeb0 0a68 	vmov.f32	s0, s17
 8014852:	eef0 0a48 	vmov.f32	s1, s16
 8014856:	f7ff fd7d 	bl	8014354 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801485a:	e7c8      	b.n	80147ee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801485c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014860:	edd3 8a00 	vldr	s17, [r3]
 8014864:	eef0 0a48 	vmov.f32	s1, s16
 8014868:	4638      	mov	r0, r7
 801486a:	eeb0 0a68 	vmov.f32	s0, s17
 801486e:	3401      	adds	r4, #1
 8014870:	f7ff fd70 	bl	8014354 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8014874:	e7bb      	b.n	80147ee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8014876:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801487a:	ed93 8a00 	vldr	s16, [r3]
 801487e:	e7f1      	b.n	8014864 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8014880:	00a3      	lsls	r3, r4, #2
 8014882:	eef0 0a48 	vmov.f32	s1, s16
 8014886:	eeb0 0a68 	vmov.f32	s0, s17
 801488a:	4638      	mov	r0, r7
 801488c:	f103 0208 	add.w	r2, r3, #8
 8014890:	f103 090c 	add.w	r9, r3, #12
 8014894:	4433      	add	r3, r6
 8014896:	3404      	adds	r4, #4
 8014898:	4432      	add	r2, r6
 801489a:	44b1      	add	r9, r6
 801489c:	edd3 1a01 	vldr	s3, [r3, #4]
 80148a0:	ed92 2a00 	vldr	s4, [r2]
 80148a4:	edd9 2a00 	vldr	s5, [r9]
 80148a8:	ed93 1a00 	vldr	s2, [r3]
 80148ac:	9207      	str	r2, [sp, #28]
 80148ae:	f7ff fabb 	bl	8013e28 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80148b2:	9a07      	ldr	r2, [sp, #28]
 80148b4:	ed99 8a00 	vldr	s16, [r9]
 80148b8:	edd2 8a00 	vldr	s17, [r2]
 80148bc:	e797      	b.n	80147ee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80148be:	00a3      	lsls	r3, r4, #2
 80148c0:	eef0 0a48 	vmov.f32	s1, s16
 80148c4:	eeb0 0a68 	vmov.f32	s0, s17
 80148c8:	4638      	mov	r0, r7
 80148ca:	f103 0210 	add.w	r2, r3, #16
 80148ce:	f103 0914 	add.w	r9, r3, #20
 80148d2:	4433      	add	r3, r6
 80148d4:	3406      	adds	r4, #6
 80148d6:	4432      	add	r2, r6
 80148d8:	44b1      	add	r9, r6
 80148da:	edd3 2a03 	vldr	s5, [r3, #12]
 80148de:	ed92 3a00 	vldr	s6, [r2]
 80148e2:	edd9 3a00 	vldr	s7, [r9]
 80148e6:	ed93 2a02 	vldr	s4, [r3, #8]
 80148ea:	edd3 1a01 	vldr	s3, [r3, #4]
 80148ee:	ed93 1a00 	vldr	s2, [r3]
 80148f2:	9207      	str	r2, [sp, #28]
 80148f4:	f7ff fab7 	bl	8013e66 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80148f8:	9a07      	ldr	r2, [sp, #28]
 80148fa:	ed99 8a00 	vldr	s16, [r9]
 80148fe:	edd2 8a00 	vldr	s17, [r2]
 8014902:	e774      	b.n	80147ee <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8014904:	9b06      	ldr	r3, [sp, #24]
 8014906:	af08      	add	r7, sp, #32
 8014908:	4543      	cmp	r3, r8
 801490a:	d90f      	bls.n	801492c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 801490c:	4638      	mov	r0, r7
 801490e:	f7ff fdad 	bl	801446c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8014912:	b958      	cbnz	r0, 801492c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8014914:	2301      	movs	r3, #1
 8014916:	9703      	str	r7, [sp, #12]
 8014918:	f8cd b000 	str.w	fp, [sp]
 801491c:	4641      	mov	r1, r8
 801491e:	9a06      	ldr	r2, [sp, #24]
 8014920:	4628      	mov	r0, r5
 8014922:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8014926:	4623      	mov	r3, r4
 8014928:	f7ff fe02 	bl	8014530 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801492c:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8014930:	4638      	mov	r0, r7
 8014932:	f012 fee1 	bl	80276f8 <_ZN8touchgfx6Canvas6renderEh>
 8014936:	4604      	mov	r4, r0
 8014938:	4638      	mov	r0, r7
 801493a:	f7ff fe99 	bl	8014670 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801493e:	4620      	mov	r0, r4
 8014940:	b035      	add	sp, #212	@ 0xd4
 8014942:	ecbd 8b04 	vpop	{d8-d9}
 8014946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801494a:	2401      	movs	r4, #1
 801494c:	e7f7      	b.n	801493e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 801494e:	bf00      	nop
 8014950:	00000000 	.word	0x00000000
 8014954:	0802cb08 	.word	0x0802cb08

08014958 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8014958:	b510      	push	{r4, lr}
 801495a:	4604      	mov	r4, r0
 801495c:	f7ff fe88 	bl	8014670 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8014960:	21b0      	movs	r1, #176	@ 0xb0
 8014962:	4620      	mov	r0, r4
 8014964:	f013 fab4 	bl	8027ed0 <_ZdlPvj>
 8014968:	4620      	mov	r0, r4
 801496a:	bd10      	pop	{r4, pc}

0801496c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 801496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014970:	4698      	mov	r8, r3
 8014972:	23ff      	movs	r3, #255	@ 0xff
 8014974:	4607      	mov	r7, r0
 8014976:	4689      	mov	r9, r1
 8014978:	4692      	mov	sl, r2
 801497a:	1d02      	adds	r2, r0, #4
 801497c:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8014980:	2400      	movs	r4, #0
 8014982:	44ca      	add	sl, r9
 8014984:	ed2d 8b06 	vpush	{d8-d10}
 8014988:	b0aa      	sub	sp, #168	@ 0xa8
 801498a:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8014b90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	eef0 8a48 	vmov.f32	s17, s16
 8014994:	6981      	ldr	r1, [r0, #24]
 8014996:	a80d      	add	r0, sp, #52	@ 0x34
 8014998:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801499a:	f012 fe19 	bl	80275d0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801499e:	7f3b      	ldrb	r3, [r7, #28]
 80149a0:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8014b90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80149a4:	4628      	mov	r0, r5
 80149a6:	1e5a      	subs	r2, r3, #1
 80149a8:	eeb0 0a60 	vmov.f32	s0, s1
 80149ac:	4253      	negs	r3, r2
 80149ae:	4153      	adcs	r3, r2
 80149b0:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 80149b4:	f006 fb41 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80149b8:	eeb0 9a40 	vmov.f32	s18, s0
 80149bc:	eef0 9a60 	vmov.f32	s19, s1
 80149c0:	45ca      	cmp	sl, r9
 80149c2:	f000 80cd 	beq.w	8014b60 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 80149c6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80149ca:	2b06      	cmp	r3, #6
 80149cc:	d8f8      	bhi.n	80149c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80149ce:	e8df f003 	tbb	[pc, r3]
 80149d2:	0804      	.short	0x0804
 80149d4:	58533f2a 	.word	0x58533f2a
 80149d8:	8a          	.byte	0x8a
 80149d9:	00          	.byte	0x00
 80149da:	a80d      	add	r0, sp, #52	@ 0x34
 80149dc:	f012 fe6a 	bl	80276b4 <_ZN8touchgfx6Canvas5closeEv>
 80149e0:	e7ee      	b.n	80149c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80149e2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80149e6:	4628      	mov	r0, r5
 80149e8:	ed93 8a01 	vldr	s16, [r3, #4]
 80149ec:	edd3 8a00 	vldr	s17, [r3]
 80149f0:	eef0 0a48 	vmov.f32	s1, s16
 80149f4:	eeb0 0a68 	vmov.f32	s0, s17
 80149f8:	f006 fb1f 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80149fc:	a80d      	add	r0, sp, #52	@ 0x34
 80149fe:	eef0 7a60 	vmov.f32	s15, s1
 8014a02:	eeb0 9a40 	vmov.f32	s18, s0
 8014a06:	eef0 9a60 	vmov.f32	s19, s1
 8014a0a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014a0e:	ee17 2a90 	vmov	r2, s15
 8014a12:	eef0 7a40 	vmov.f32	s15, s0
 8014a16:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014a1a:	ee17 1a90 	vmov	r1, s15
 8014a1e:	f012 ff23 	bl	8027868 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014a22:	3402      	adds	r4, #2
 8014a24:	e7cc      	b.n	80149c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014a26:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	edd3 8a00 	vldr	s17, [r3]
 8014a30:	ed93 8a01 	vldr	s16, [r3, #4]
 8014a34:	eeb0 0a68 	vmov.f32	s0, s17
 8014a38:	eef0 0a48 	vmov.f32	s1, s16
 8014a3c:	f006 fafd 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014a40:	a80d      	add	r0, sp, #52	@ 0x34
 8014a42:	eeb0 9a40 	vmov.f32	s18, s0
 8014a46:	eef0 9a60 	vmov.f32	s19, s1
 8014a4a:	f7ff fe01 	bl	8014650 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8014a4e:	e7e8      	b.n	8014a22 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8014a50:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014a54:	edd3 8a00 	vldr	s17, [r3]
 8014a58:	eef0 0a48 	vmov.f32	s1, s16
 8014a5c:	4628      	mov	r0, r5
 8014a5e:	eeb0 0a68 	vmov.f32	s0, s17
 8014a62:	3401      	adds	r4, #1
 8014a64:	f006 fae9 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014a68:	a80d      	add	r0, sp, #52	@ 0x34
 8014a6a:	eef0 9a60 	vmov.f32	s19, s1
 8014a6e:	eeb0 9a40 	vmov.f32	s18, s0
 8014a72:	f7ff fded 	bl	8014650 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8014a76:	e7a3      	b.n	80149c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014a78:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014a7c:	ed93 8a00 	vldr	s16, [r3]
 8014a80:	e7ea      	b.n	8014a58 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8014a82:	1ca3      	adds	r3, r4, #2
 8014a84:	4628      	mov	r0, r5
 8014a86:	3404      	adds	r4, #4
 8014a88:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8014a8c:	ed53 0a01 	vldr	s1, [r3, #-4]
 8014a90:	ed13 0a02 	vldr	s0, [r3, #-8]
 8014a94:	edd3 8a00 	vldr	s17, [r3]
 8014a98:	ed93 8a01 	vldr	s16, [r3, #4]
 8014a9c:	f006 facd 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014aa0:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8014aa4:	eeb0 0a68 	vmov.f32	s0, s17
 8014aa8:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8014aac:	eef0 0a48 	vmov.f32	s1, s16
 8014ab0:	4628      	mov	r0, r5
 8014ab2:	f006 fac2 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014ab6:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8014aba:	eef0 2a60 	vmov.f32	s5, s1
 8014abe:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8014ac2:	eeb0 2a40 	vmov.f32	s4, s0
 8014ac6:	a80d      	add	r0, sp, #52	@ 0x34
 8014ac8:	eeb0 aa40 	vmov.f32	s20, s0
 8014acc:	eef0 aa60 	vmov.f32	s21, s1
 8014ad0:	eeb0 0a49 	vmov.f32	s0, s18
 8014ad4:	eef0 0a69 	vmov.f32	s1, s19
 8014ad8:	f7ff f9a6 	bl	8013e28 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8014adc:	eef0 9a6a 	vmov.f32	s19, s21
 8014ae0:	eeb0 9a4a 	vmov.f32	s18, s20
 8014ae4:	e76c      	b.n	80149c0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014ae6:	1d26      	adds	r6, r4, #4
 8014ae8:	4628      	mov	r0, r5
 8014aea:	3406      	adds	r4, #6
 8014aec:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014af0:	ed56 0a03 	vldr	s1, [r6, #-12]
 8014af4:	ed16 0a04 	vldr	s0, [r6, #-16]
 8014af8:	edd6 8a00 	vldr	s17, [r6]
 8014afc:	ed96 8a01 	vldr	s16, [r6, #4]
 8014b00:	f006 fa9b 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014b04:	ed8d 0a07 	vstr	s0, [sp, #28]
 8014b08:	4628      	mov	r0, r5
 8014b0a:	ed16 0a02 	vldr	s0, [r6, #-8]
 8014b0e:	edcd 0a08 	vstr	s1, [sp, #32]
 8014b12:	ed56 0a01 	vldr	s1, [r6, #-4]
 8014b16:	f006 fa90 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014b1a:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8014b1e:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8014b22:	eeb0 0a68 	vmov.f32	s0, s17
 8014b26:	eef0 0a48 	vmov.f32	s1, s16
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	f006 fa85 	bl	801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014b30:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8014b34:	eeb0 3a40 	vmov.f32	s6, s0
 8014b38:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8014b3c:	eef0 3a60 	vmov.f32	s7, s1
 8014b40:	eddd 1a08 	vldr	s3, [sp, #32]
 8014b44:	eeb0 aa40 	vmov.f32	s20, s0
 8014b48:	ed9d 1a07 	vldr	s2, [sp, #28]
 8014b4c:	eef0 aa60 	vmov.f32	s21, s1
 8014b50:	a80d      	add	r0, sp, #52	@ 0x34
 8014b52:	eef0 0a69 	vmov.f32	s1, s19
 8014b56:	eeb0 0a49 	vmov.f32	s0, s18
 8014b5a:	f7ff f984 	bl	8013e66 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8014b5e:	e7bd      	b.n	8014adc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8014b60:	7f7b      	ldrb	r3, [r7, #29]
 8014b62:	a80d      	add	r0, sp, #52	@ 0x34
 8014b64:	7fb9      	ldrb	r1, [r7, #30]
 8014b66:	4359      	muls	r1, r3
 8014b68:	1c4b      	adds	r3, r1, #1
 8014b6a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8014b6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014b72:	f012 fdc1 	bl	80276f8 <_ZN8touchgfx6Canvas6renderEh>
 8014b76:	4b07      	ldr	r3, [pc, #28]	@ (8014b94 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8014b78:	4604      	mov	r4, r0
 8014b7a:	a812      	add	r0, sp, #72	@ 0x48
 8014b7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8014b7e:	f002 fa8d 	bl	801709c <_ZN8touchgfx7OutlineD1Ev>
 8014b82:	4620      	mov	r0, r4
 8014b84:	b02a      	add	sp, #168	@ 0xa8
 8014b86:	ecbd 8b06 	vpop	{d8-d10}
 8014b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b8e:	bf00      	nop
 8014b90:	00000000 	.word	0x00000000
 8014b94:	0802d5ac 	.word	0x0802d5ac

08014b98 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8014b98:	b410      	push	{r4}
 8014b9a:	7f04      	ldrb	r4, [r0, #28]
 8014b9c:	b11c      	cbz	r4, 8014ba6 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8014b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ba2:	f7ff bee3 	b.w	801496c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8014ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014baa:	f7ff bd6d 	b.w	8014688 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08014bae <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8014bae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014bb2:	4691      	mov	r9, r2
 8014bb4:	4602      	mov	r2, r0
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	4688      	mov	r8, r1
 8014bba:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8014bbe:	469a      	mov	sl, r3
 8014bc0:	ab02      	add	r3, sp, #8
 8014bc2:	af02      	add	r7, sp, #8
 8014bc4:	6851      	ldr	r1, [r2, #4]
 8014bc6:	c303      	stmia	r3!, {r0, r1}
 8014bc8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	dd2f      	ble.n	8014c30 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8014bd0:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8014bd4:	2c00      	cmp	r4, #0
 8014bd6:	dd2b      	ble.n	8014c30 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8014bd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014bdc:	441c      	add	r4, r3
 8014bde:	b2a4      	uxth	r4, r4
 8014be0:	b225      	sxth	r5, r4
 8014be2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8014be6:	42ab      	cmp	r3, r5
 8014be8:	da22      	bge.n	8014c30 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8014bea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014bec:	464a      	mov	r2, r9
 8014bee:	9701      	str	r7, [sp, #4]
 8014bf0:	4641      	mov	r1, r8
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	4653      	mov	r3, sl
 8014bf8:	f7ff ffce 	bl	8014b98 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8014bfc:	b940      	cbnz	r0, 8014c10 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8014bfe:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d004      	beq.n	8014c10 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8014c06:	3301      	adds	r3, #1
 8014c08:	105b      	asrs	r3, r3, #1
 8014c0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014c0e:	e7ec      	b.n	8014bea <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8014c10:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8014c14:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014c18:	4413      	add	r3, r2
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	441a      	add	r2, r3
 8014c1e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014c22:	b212      	sxth	r2, r2
 8014c24:	4295      	cmp	r5, r2
 8014c26:	dadc      	bge.n	8014be2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8014c28:	1ae3      	subs	r3, r4, r3
 8014c2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014c2e:	e7d8      	b.n	8014be2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8014c30:	b004      	add	sp, #16
 8014c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014c36 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8014c36:	0c0b      	lsrs	r3, r1, #16
 8014c38:	60c1      	str	r1, [r0, #12]
 8014c3a:	7481      	strb	r1, [r0, #18]
 8014c3c:	7403      	strb	r3, [r0, #16]
 8014c3e:	0a0b      	lsrs	r3, r1, #8
 8014c40:	7443      	strb	r3, [r0, #17]
 8014c42:	4770      	bx	lr

08014c44 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8014c44:	f1a0 0008 	sub.w	r0, r0, #8
 8014c48:	e7f5      	b.n	8014c36 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08014c4c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8014c4c:	b508      	push	{r3, lr}
 8014c4e:	4b05      	ldr	r3, [pc, #20]	@ (8014c64 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8014c50:	6818      	ldr	r0, [r3, #0]
 8014c52:	6803      	ldr	r3, [r0, #0]
 8014c54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014c58:	4798      	blx	r3
 8014c5a:	1e43      	subs	r3, r0, #1
 8014c5c:	4258      	negs	r0, r3
 8014c5e:	4158      	adcs	r0, r3
 8014c60:	bd08      	pop	{r3, pc}
 8014c62:	bf00      	nop
 8014c64:	240284e8 	.word	0x240284e8

08014c68 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8014c68:	4770      	bx	lr

08014c6a <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8014c6a:	3808      	subs	r0, #8
 8014c6c:	4770      	bx	lr

08014c6e <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8014c6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014c72:	b410      	push	{r4}
 8014c74:	188c      	adds	r4, r1, r2
 8014c76:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014c7a:	68c2      	ldr	r2, [r0, #12]
 8014c7c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8014c80:	4620      	mov	r0, r4
 8014c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c86:	f7ee b911 	b.w	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08014c8a <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8014c8a:	f7ee b8eb 	b.w	8002e64 <_ZN8touchgfx5paint8tearDownEv>

08014c8e <_ZN8touchgfx13PainterRGB888D0Ev>:
 8014c8e:	b510      	push	{r4, lr}
 8014c90:	4604      	mov	r4, r0
 8014c92:	2114      	movs	r1, #20
 8014c94:	f013 f91c 	bl	8027ed0 <_ZdlPvj>
 8014c98:	4620      	mov	r0, r4
 8014c9a:	bd10      	pop	{r4, pc}

08014c9c <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8014c9c:	f1a0 0008 	sub.w	r0, r0, #8
 8014ca0:	e7f5      	b.n	8014c8e <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08014ca4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8014ca4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cac:	4411      	add	r1, r2
 8014cae:	7c42      	ldrb	r2, [r0, #17]
 8014cb0:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8014cb4:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8014cb8:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8014cbc:	2a00      	cmp	r2, #0
 8014cbe:	f000 8084 	beq.w	8014dca <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8014cc2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014cc6:	ed90 7a08 	vldr	s14, [r0, #32]
 8014cca:	42a2      	cmp	r2, r4
 8014ccc:	68c3      	ldr	r3, [r0, #12]
 8014cce:	db20      	blt.n	8014d12 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8014cd0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014cd4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8014cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cdc:	bfc8      	it	gt
 8014cde:	2200      	movgt	r2, #0
 8014ce0:	589a      	ldr	r2, [r3, r2]
 8014ce2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014ce6:	7c03      	ldrb	r3, [r0, #16]
 8014ce8:	fa5f fc82 	uxtb.w	ip, r2
 8014cec:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8014cf0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8014cf4:	440e      	add	r6, r1
 8014cf6:	b36b      	cbz	r3, 8014d54 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8014cf8:	2dff      	cmp	r5, #255	@ 0xff
 8014cfa:	d12b      	bne.n	8014d54 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8014cfc:	42b1      	cmp	r1, r6
 8014cfe:	f080 8204 	bcs.w	801510a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8014d02:	f881 c000 	strb.w	ip, [r1]
 8014d06:	3103      	adds	r1, #3
 8014d08:	f801 7c02 	strb.w	r7, [r1, #-2]
 8014d0c:	f801 4c01 	strb.w	r4, [r1, #-1]
 8014d10:	e7f4      	b.n	8014cfc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8014d12:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8014d16:	42a7      	cmp	r7, r4
 8014d18:	dc08      	bgt.n	8014d2c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8014d1a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014d1e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8014d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d26:	bfd8      	it	le
 8014d28:	2200      	movle	r2, #0
 8014d2a:	e7d9      	b.n	8014ce0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8014d2c:	1aa2      	subs	r2, r4, r2
 8014d2e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014d32:	ee07 2a90 	vmov	s15, r2
 8014d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d46:	ee17 2a90 	vmov	r2, s15
 8014d4a:	bfd8      	it	le
 8014d4c:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8014d50:	0092      	lsls	r2, r2, #2
 8014d52:	e7c5      	b.n	8014ce0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8014d54:	0e12      	lsrs	r2, r2, #24
 8014d56:	4355      	muls	r5, r2
 8014d58:	1c6a      	adds	r2, r5, #1
 8014d5a:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8014d5e:	122d      	asrs	r5, r5, #8
 8014d60:	43e8      	mvns	r0, r5
 8014d62:	b2ad      	uxth	r5, r5
 8014d64:	fb1c fc05 	smulbb	ip, ip, r5
 8014d68:	b2c0      	uxtb	r0, r0
 8014d6a:	fb17 f705 	smulbb	r7, r7, r5
 8014d6e:	fb14 f505 	smulbb	r5, r4, r5
 8014d72:	fa1f fc8c 	uxth.w	ip, ip
 8014d76:	b2bf      	uxth	r7, r7
 8014d78:	b2ad      	uxth	r5, r5
 8014d7a:	428e      	cmp	r6, r1
 8014d7c:	f101 0303 	add.w	r3, r1, #3
 8014d80:	f240 81c3 	bls.w	801510a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8014d84:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8014d88:	fb02 c200 	mla	r2, r2, r0, ip
 8014d8c:	b292      	uxth	r2, r2
 8014d8e:	1c51      	adds	r1, r2, #1
 8014d90:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8014d94:	1212      	asrs	r2, r2, #8
 8014d96:	f803 2c03 	strb.w	r2, [r3, #-3]
 8014d9a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8014d9e:	fb02 7200 	mla	r2, r2, r0, r7
 8014da2:	b292      	uxth	r2, r2
 8014da4:	1c51      	adds	r1, r2, #1
 8014da6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8014daa:	1212      	asrs	r2, r2, #8
 8014dac:	f803 2c02 	strb.w	r2, [r3, #-2]
 8014db0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8014db4:	fb02 5200 	mla	r2, r2, r0, r5
 8014db8:	b292      	uxth	r2, r2
 8014dba:	1c51      	adds	r1, r2, #1
 8014dbc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8014dc0:	4619      	mov	r1, r3
 8014dc2:	1212      	asrs	r2, r2, #8
 8014dc4:	f803 2c01 	strb.w	r2, [r3, #-1]
 8014dc8:	e7d7      	b.n	8014d7a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8014dca:	7c82      	ldrb	r2, [r0, #18]
 8014dcc:	2a00      	cmp	r2, #0
 8014dce:	d047      	beq.n	8014e60 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8014dd0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014dd4:	ee07 2a10 	vmov	s14, r2
 8014dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ddc:	ee07 3a90 	vmov	s15, r3
 8014de0:	461a      	mov	r2, r3
 8014de2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014de6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dee:	f200 808e 	bhi.w	8014f0e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8014df2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014df6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8014dfa:	68c7      	ldr	r7, [r0, #12]
 8014dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014e04:	ee06 6a90 	vmov	s13, r6
 8014e08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014e0c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e14:	bf4a      	itet	mi
 8014e16:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8014e1a:	4634      	movpl	r4, r6
 8014e1c:	ee17 4a90 	vmovmi	r4, s15
 8014e20:	edd0 7a08 	vldr	s15, [r0, #32]
 8014e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e28:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8014e2c:	448e      	add	lr, r1
 8014e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e32:	bfc8      	it	gt
 8014e34:	2200      	movgt	r2, #0
 8014e36:	58bf      	ldr	r7, [r7, r2]
 8014e38:	7c02      	ldrb	r2, [r0, #16]
 8014e3a:	fa5f f987 	uxtb.w	r9, r7
 8014e3e:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8014e42:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8014e46:	b31a      	cbz	r2, 8014e90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8014e48:	2dff      	cmp	r5, #255	@ 0xff
 8014e4a:	d121      	bne.n	8014e90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8014e4c:	4571      	cmp	r1, lr
 8014e4e:	d25d      	bcs.n	8014f0c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8014e50:	f881 9000 	strb.w	r9, [r1]
 8014e54:	3103      	adds	r1, #3
 8014e56:	f801 8c02 	strb.w	r8, [r1, #-2]
 8014e5a:	f801 cc01 	strb.w	ip, [r1, #-1]
 8014e5e:	e7f5      	b.n	8014e4c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8014e60:	ee07 4a90 	vmov	s15, r4
 8014e64:	ed90 7a06 	vldr	s14, [r0, #24]
 8014e68:	edd0 6a05 	vldr	s13, [r0, #20]
 8014e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014e78:	edd0 7a08 	vldr	s15, [r0, #32]
 8014e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e84:	bf44      	itt	mi
 8014e86:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8014e8a:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8014e8e:	e7a5      	b.n	8014ddc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8014e90:	0e3f      	lsrs	r7, r7, #24
 8014e92:	436f      	muls	r7, r5
 8014e94:	1c7a      	adds	r2, r7, #1
 8014e96:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8014e9a:	1212      	asrs	r2, r2, #8
 8014e9c:	ea6f 0a02 	mvn.w	sl, r2
 8014ea0:	b292      	uxth	r2, r2
 8014ea2:	fb19 f902 	smulbb	r9, r9, r2
 8014ea6:	fa5f fa8a 	uxtb.w	sl, sl
 8014eaa:	fb18 f802 	smulbb	r8, r8, r2
 8014eae:	fb1c fc02 	smulbb	ip, ip, r2
 8014eb2:	fa1f f989 	uxth.w	r9, r9
 8014eb6:	fa1f f888 	uxth.w	r8, r8
 8014eba:	fa1f fc8c 	uxth.w	ip, ip
 8014ebe:	458e      	cmp	lr, r1
 8014ec0:	f101 0203 	add.w	r2, r1, #3
 8014ec4:	d922      	bls.n	8014f0c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8014ec6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8014eca:	fb01 910a 	mla	r1, r1, sl, r9
 8014ece:	b289      	uxth	r1, r1
 8014ed0:	1c4f      	adds	r7, r1, #1
 8014ed2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8014ed6:	1209      	asrs	r1, r1, #8
 8014ed8:	f802 1c03 	strb.w	r1, [r2, #-3]
 8014edc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8014ee0:	fb01 810a 	mla	r1, r1, sl, r8
 8014ee4:	b289      	uxth	r1, r1
 8014ee6:	1c4f      	adds	r7, r1, #1
 8014ee8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8014eec:	1209      	asrs	r1, r1, #8
 8014eee:	f802 1c02 	strb.w	r1, [r2, #-2]
 8014ef2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8014ef6:	fb01 c10a 	mla	r1, r1, sl, ip
 8014efa:	b289      	uxth	r1, r1
 8014efc:	1c4f      	adds	r7, r1, #1
 8014efe:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8014f02:	1209      	asrs	r1, r1, #8
 8014f04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014f08:	4611      	mov	r1, r2
 8014f0a:	e7d8      	b.n	8014ebe <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8014f0c:	191a      	adds	r2, r3, r4
 8014f0e:	4433      	add	r3, r6
 8014f10:	b21b      	sxth	r3, r3
 8014f12:	4293      	cmp	r3, r2
 8014f14:	f340 80f9 	ble.w	801510a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8014f18:	edd0 7a07 	vldr	s15, [r0, #28]
 8014f1c:	ee06 2a90 	vmov	s13, r2
 8014f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014f28:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f30:	f340 80b0 	ble.w	8015094 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8014f34:	ee06 3a10 	vmov	s12, r3
 8014f38:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014f3c:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8015110 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8014f40:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014f44:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014f48:	ed90 6a08 	vldr	s12, [r0, #32]
 8014f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f50:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8014f54:	bfd6      	itet	le
 8014f56:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8014f5a:	469c      	movgt	ip, r3
 8014f5c:	ee17 ca90 	vmovle	ip, s15
 8014f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f64:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8015114 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8014f68:	ebac 0202 	sub.w	r2, ip, r2
 8014f6c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8014f70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014f74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014f78:	188c      	adds	r4, r1, r2
 8014f7a:	7c02      	ldrb	r2, [r0, #16]
 8014f7c:	b1d2      	cbz	r2, 8014fb4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8014f7e:	2dff      	cmp	r5, #255	@ 0xff
 8014f80:	d118      	bne.n	8014fb4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8014f82:	42a1      	cmp	r1, r4
 8014f84:	d261      	bcs.n	801504a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8014f86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014f8a:	68c6      	ldr	r6, [r0, #12]
 8014f8c:	3103      	adds	r1, #3
 8014f8e:	ee17 7a10 	vmov	r7, s14
 8014f92:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8014f96:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8014f9a:	f801 6c03 	strb.w	r6, [r1, #-3]
 8014f9e:	7856      	ldrb	r6, [r2, #1]
 8014fa0:	f801 6c02 	strb.w	r6, [r1, #-2]
 8014fa4:	7892      	ldrb	r2, [r2, #2]
 8014fa6:	f801 2c01 	strb.w	r2, [r1, #-1]
 8014faa:	ed90 7a08 	vldr	s14, [r0, #32]
 8014fae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fb2:	e7e6      	b.n	8014f82 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8014fb4:	68c2      	ldr	r2, [r0, #12]
 8014fb6:	428c      	cmp	r4, r1
 8014fb8:	f101 0e03 	add.w	lr, r1, #3
 8014fbc:	d945      	bls.n	801504a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8014fbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014fc2:	ee17 9a10 	vmov	r9, s14
 8014fc6:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8014fca:	f898 7003 	ldrb.w	r7, [r8, #3]
 8014fce:	fb07 f605 	mul.w	r6, r7, r5
 8014fd2:	1c77      	adds	r7, r6, #1
 8014fd4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8014fd8:	123f      	asrs	r7, r7, #8
 8014fda:	b2b9      	uxth	r1, r7
 8014fdc:	43ff      	mvns	r7, r7
 8014fde:	b2fe      	uxtb	r6, r7
 8014fe0:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8014fe4:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8014fe8:	fb19 f906 	smulbb	r9, r9, r6
 8014fec:	fb07 9701 	mla	r7, r7, r1, r9
 8014ff0:	b2bf      	uxth	r7, r7
 8014ff2:	f107 0901 	add.w	r9, r7, #1
 8014ff6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8014ffa:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8014ffe:	fb19 f906 	smulbb	r9, r9, r6
 8015002:	123f      	asrs	r7, r7, #8
 8015004:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8015008:	f898 7001 	ldrb.w	r7, [r8, #1]
 801500c:	fb07 9701 	mla	r7, r7, r1, r9
 8015010:	b2bf      	uxth	r7, r7
 8015012:	f107 0901 	add.w	r9, r7, #1
 8015016:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801501a:	123f      	asrs	r7, r7, #8
 801501c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8015020:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8015024:	f898 8002 	ldrb.w	r8, [r8, #2]
 8015028:	fb17 f606 	smulbb	r6, r7, r6
 801502c:	fb08 6601 	mla	r6, r8, r1, r6
 8015030:	b2b6      	uxth	r6, r6
 8015032:	1c71      	adds	r1, r6, #1
 8015034:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8015038:	4671      	mov	r1, lr
 801503a:	1236      	asrs	r6, r6, #8
 801503c:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8015040:	ed90 7a08 	vldr	s14, [r0, #32]
 8015044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015048:	e7b5      	b.n	8014fb6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801504a:	4563      	cmp	r3, ip
 801504c:	dd5d      	ble.n	801510a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801504e:	edd0 7a08 	vldr	s15, [r0, #32]
 8015052:	eba3 030c 	sub.w	r3, r3, ip
 8015056:	68c4      	ldr	r4, [r0, #12]
 8015058:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801505c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015064:	7c00      	ldrb	r0, [r0, #16]
 8015066:	440b      	add	r3, r1
 8015068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801506c:	bfd8      	it	le
 801506e:	2200      	movle	r2, #0
 8015070:	58a2      	ldr	r2, [r4, r2]
 8015072:	b2d4      	uxtb	r4, r2
 8015074:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8015078:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801507c:	b160      	cbz	r0, 8015098 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801507e:	2dff      	cmp	r5, #255	@ 0xff
 8015080:	d10a      	bne.n	8015098 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8015082:	4299      	cmp	r1, r3
 8015084:	d241      	bcs.n	801510a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8015086:	700c      	strb	r4, [r1, #0]
 8015088:	3103      	adds	r1, #3
 801508a:	f801 cc02 	strb.w	ip, [r1, #-2]
 801508e:	f801 7c01 	strb.w	r7, [r1, #-1]
 8015092:	e7f6      	b.n	8015082 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8015094:	4694      	mov	ip, r2
 8015096:	e7da      	b.n	801504e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8015098:	0e12      	lsrs	r2, r2, #24
 801509a:	436a      	muls	r2, r5
 801509c:	1c55      	adds	r5, r2, #1
 801509e:	eb05 2522 	add.w	r5, r5, r2, asr #8
 80150a2:	122d      	asrs	r5, r5, #8
 80150a4:	43ee      	mvns	r6, r5
 80150a6:	b2ad      	uxth	r5, r5
 80150a8:	fb14 f405 	smulbb	r4, r4, r5
 80150ac:	b2f6      	uxtb	r6, r6
 80150ae:	fb1c f005 	smulbb	r0, ip, r5
 80150b2:	fb17 f505 	smulbb	r5, r7, r5
 80150b6:	b2a4      	uxth	r4, r4
 80150b8:	b280      	uxth	r0, r0
 80150ba:	b2ad      	uxth	r5, r5
 80150bc:	428b      	cmp	r3, r1
 80150be:	f101 0203 	add.w	r2, r1, #3
 80150c2:	d922      	bls.n	801510a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80150c4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80150c8:	fb01 4106 	mla	r1, r1, r6, r4
 80150cc:	b289      	uxth	r1, r1
 80150ce:	1c4f      	adds	r7, r1, #1
 80150d0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80150d4:	1209      	asrs	r1, r1, #8
 80150d6:	f802 1c03 	strb.w	r1, [r2, #-3]
 80150da:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80150de:	fb01 0106 	mla	r1, r1, r6, r0
 80150e2:	b289      	uxth	r1, r1
 80150e4:	1c4f      	adds	r7, r1, #1
 80150e6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80150ea:	1209      	asrs	r1, r1, #8
 80150ec:	f802 1c02 	strb.w	r1, [r2, #-2]
 80150f0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80150f4:	fb01 5106 	mla	r1, r1, r6, r5
 80150f8:	b289      	uxth	r1, r1
 80150fa:	1c4f      	adds	r7, r1, #1
 80150fc:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8015100:	1209      	asrs	r1, r1, #8
 8015102:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015106:	4611      	mov	r1, r2
 8015108:	e7d8      	b.n	80150bc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801510e:	bf00      	nop
 8015110:	447ffffe 	.word	0x447ffffe
 8015114:	00000000 	.word	0x00000000

08015118 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8015118:	4770      	bx	lr

0801511a <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801511a:	4770      	bx	lr

0801511c <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 801511c:	b510      	push	{r4, lr}
 801511e:	4604      	mov	r4, r0
 8015120:	2124      	movs	r1, #36	@ 0x24
 8015122:	f012 fed5 	bl	8027ed0 <_ZdlPvj>
 8015126:	4620      	mov	r0, r4
 8015128:	bd10      	pop	{r4, pc}
	...

0801512c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801512c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801512e:	6803      	ldr	r3, [r0, #0]
 8015130:	460d      	mov	r5, r1
 8015132:	4604      	mov	r4, r0
 8015134:	4601      	mov	r1, r0
 8015136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015138:	a802      	add	r0, sp, #8
 801513a:	4798      	blx	r3
 801513c:	6828      	ldr	r0, [r5, #0]
 801513e:	6869      	ldr	r1, [r5, #4]
 8015140:	466b      	mov	r3, sp
 8015142:	c303      	stmia	r3!, {r0, r1}
 8015144:	4668      	mov	r0, sp
 8015146:	4619      	mov	r1, r3
 8015148:	f7fc fe92 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801514c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801514e:	b188      	cbz	r0, 8015174 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015150:	6803      	ldr	r3, [r0, #0]
 8015152:	1d21      	adds	r1, r4, #4
 8015154:	68db      	ldr	r3, [r3, #12]
 8015156:	4798      	blx	r3
 8015158:	b160      	cbz	r0, 8015174 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801515a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	dd08      	ble.n	8015174 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8015162:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8015166:	2d00      	cmp	r5, #0
 8015168:	dd04      	ble.n	8015174 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801516a:	4a2b      	ldr	r2, [pc, #172]	@ (8015218 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801516c:	7812      	ldrb	r2, [r2, #0]
 801516e:	b11a      	cbz	r2, 8015178 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8015170:	2a01      	cmp	r2, #1
 8015172:	d029      	beq.n	80151c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8015174:	b004      	add	sp, #16
 8015176:	bd70      	pop	{r4, r5, r6, pc}
 8015178:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801517c:	441d      	add	r5, r3
 801517e:	b2ad      	uxth	r5, r5
 8015180:	b22e      	sxth	r6, r5
 8015182:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015186:	42b3      	cmp	r3, r6
 8015188:	daf4      	bge.n	8015174 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801518a:	6823      	ldr	r3, [r4, #0]
 801518c:	4669      	mov	r1, sp
 801518e:	4620      	mov	r0, r4
 8015190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015192:	4798      	blx	r3
 8015194:	b940      	cbnz	r0, 80151a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8015196:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801519a:	2b01      	cmp	r3, #1
 801519c:	d004      	beq.n	80151a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801519e:	3301      	adds	r3, #1
 80151a0:	105b      	asrs	r3, r3, #1
 80151a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80151a6:	e7f0      	b.n	801518a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80151a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80151ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80151b0:	4413      	add	r3, r2
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	441a      	add	r2, r3
 80151b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80151ba:	b212      	sxth	r2, r2
 80151bc:	4296      	cmp	r6, r2
 80151be:	dae0      	bge.n	8015182 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80151c0:	1aeb      	subs	r3, r5, r3
 80151c2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80151c6:	e7dc      	b.n	8015182 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80151c8:	f8bd 5000 	ldrh.w	r5, [sp]
 80151cc:	441d      	add	r5, r3
 80151ce:	b2ad      	uxth	r5, r5
 80151d0:	b22e      	sxth	r6, r5
 80151d2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80151d6:	42b3      	cmp	r3, r6
 80151d8:	dacc      	bge.n	8015174 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80151da:	6823      	ldr	r3, [r4, #0]
 80151dc:	4669      	mov	r1, sp
 80151de:	4620      	mov	r0, r4
 80151e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151e2:	4798      	blx	r3
 80151e4:	b940      	cbnz	r0, 80151f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80151e6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80151ea:	2b01      	cmp	r3, #1
 80151ec:	d004      	beq.n	80151f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80151ee:	3301      	adds	r3, #1
 80151f0:	105b      	asrs	r3, r3, #1
 80151f2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80151f6:	e7f0      	b.n	80151da <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80151f8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80151fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8015200:	4413      	add	r3, r2
 8015202:	b29b      	uxth	r3, r3
 8015204:	441a      	add	r2, r3
 8015206:	f8ad 3000 	strh.w	r3, [sp]
 801520a:	b212      	sxth	r2, r2
 801520c:	4296      	cmp	r6, r2
 801520e:	dae0      	bge.n	80151d2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8015210:	1aeb      	subs	r3, r5, r3
 8015212:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015216:	e7dc      	b.n	80151d2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8015218:	240284e0 	.word	0x240284e0

0801521c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801521c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801521e:	6803      	ldr	r3, [r0, #0]
 8015220:	4604      	mov	r4, r0
 8015222:	4601      	mov	r1, r0
 8015224:	4668      	mov	r0, sp
 8015226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015228:	4798      	blx	r3
 801522a:	2100      	movs	r1, #0
 801522c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015230:	4668      	mov	r0, sp
 8015232:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015236:	9102      	str	r1, [sp, #8]
 8015238:	a902      	add	r1, sp, #8
 801523a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801523e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015242:	f7fc fe15 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8015246:	6823      	ldr	r3, [r4, #0]
 8015248:	4669      	mov	r1, sp
 801524a:	4620      	mov	r0, r4
 801524c:	691b      	ldr	r3, [r3, #16]
 801524e:	4798      	blx	r3
 8015250:	b004      	add	sp, #16
 8015252:	bd10      	pop	{r4, pc}

08015254 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015254:	2101      	movs	r1, #1
 8015256:	2200      	movs	r2, #0
 8015258:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801525c:	490a      	ldr	r1, [pc, #40]	@ (8015288 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801525e:	8082      	strh	r2, [r0, #4]
 8015260:	6001      	str	r1, [r0, #0]
 8015262:	21ff      	movs	r1, #255	@ 0xff
 8015264:	80c2      	strh	r2, [r0, #6]
 8015266:	8102      	strh	r2, [r0, #8]
 8015268:	8142      	strh	r2, [r0, #10]
 801526a:	8182      	strh	r2, [r0, #12]
 801526c:	81c2      	strh	r2, [r0, #14]
 801526e:	8202      	strh	r2, [r0, #16]
 8015270:	8242      	strh	r2, [r0, #18]
 8015272:	61c2      	str	r2, [r0, #28]
 8015274:	8402      	strh	r2, [r0, #32]
 8015276:	8442      	strh	r2, [r0, #34]	@ 0x22
 8015278:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801527c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8015280:	6282      	str	r2, [r0, #40]	@ 0x28
 8015282:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015286:	4770      	bx	lr
 8015288:	0802cbc0 	.word	0x0802cbc0

0801528c <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 801528c:	6301      	str	r1, [r0, #48]	@ 0x30
 801528e:	4770      	bx	lr

08015290 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8015290:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015292:	4770      	bx	lr

08015294 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8015294:	6341      	str	r1, [r0, #52]	@ 0x34
 8015296:	4770      	bx	lr

08015298 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8015298:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801529a:	4770      	bx	lr

0801529c <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 801529c:	4770      	bx	lr

0801529e <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 801529e:	4608      	mov	r0, r1
 80152a0:	4770      	bx	lr

080152a2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80152a2:	b530      	push	{r4, r5, lr}
 80152a4:	460d      	mov	r5, r1
 80152a6:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80152a8:	8949      	ldrh	r1, [r1, #10]
 80152aa:	b085      	sub	sp, #20
 80152ac:	4604      	mov	r4, r0
 80152ae:	1ac9      	subs	r1, r1, r3
 80152b0:	6803      	ldr	r3, [r0, #0]
 80152b2:	f10d 0206 	add.w	r2, sp, #6
 80152b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80152ba:	b209      	sxth	r1, r1
 80152bc:	4798      	blx	r3
 80152be:	b1a0      	cbz	r0, 80152ea <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80152c0:	792b      	ldrb	r3, [r5, #4]
 80152c2:	b993      	cbnz	r3, 80152ea <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80152c4:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80152c8:	b178      	cbz	r0, 80152ea <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80152ca:	6803      	ldr	r3, [r0, #0]
 80152cc:	68db      	ldr	r3, [r3, #12]
 80152ce:	4798      	blx	r3
 80152d0:	b158      	cbz	r0, 80152ea <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80152d2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80152d6:	aa02      	add	r2, sp, #8
 80152d8:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80152dc:	4621      	mov	r1, r4
 80152de:	f8ad 3008 	strh.w	r3, [sp, #8]
 80152e2:	9503      	str	r5, [sp, #12]
 80152e4:	6803      	ldr	r3, [r0, #0]
 80152e6:	689b      	ldr	r3, [r3, #8]
 80152e8:	4798      	blx	r3
 80152ea:	b005      	add	sp, #20
 80152ec:	bd30      	pop	{r4, r5, pc}

080152ee <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80152ee:	428a      	cmp	r2, r1
 80152f0:	bfbc      	itt	lt
 80152f2:	460b      	movlt	r3, r1
 80152f4:	4611      	movlt	r1, r2
 80152f6:	b510      	push	{r4, lr}
 80152f8:	bfb8      	it	lt
 80152fa:	461a      	movlt	r2, r3
 80152fc:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 8015300:	4604      	mov	r4, r0
 8015302:	428b      	cmp	r3, r1
 8015304:	d103      	bne.n	801530e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8015306:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 801530a:	4293      	cmp	r3, r2
 801530c:	d011      	beq.n	8015332 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 801530e:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 8015312:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8015316:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 801531a:	f005 fad8 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 801531e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8015322:	f005 fad4 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 8015326:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 801532a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801532e:	f005 bace 	b.w	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 8015332:	bd10      	pop	{r4, pc}

08015334 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8015334:	428a      	cmp	r2, r1
 8015336:	bfbc      	itt	lt
 8015338:	460b      	movlt	r3, r1
 801533a:	4611      	movlt	r1, r2
 801533c:	b510      	push	{r4, lr}
 801533e:	bfb8      	it	lt
 8015340:	461a      	movlt	r2, r3
 8015342:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8015346:	4604      	mov	r4, r0
 8015348:	428b      	cmp	r3, r1
 801534a:	d103      	bne.n	8015354 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 801534c:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8015350:	4293      	cmp	r3, r2
 8015352:	d011      	beq.n	8015378 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8015354:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8015358:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801535c:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8015360:	f005 fab5 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 8015364:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8015368:	f005 fab1 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 801536c:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8015370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015374:	f005 baab 	b.w	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 8015378:	bd10      	pop	{r4, pc}

0801537a <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 801537a:	2300      	movs	r3, #0
 801537c:	3038      	adds	r0, #56	@ 0x38
 801537e:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 8015382:	f005 baa4 	b.w	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>

08015386 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8015386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801538a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801538e:	4605      	mov	r5, r0
 8015390:	460f      	mov	r7, r1
 8015392:	4616      	mov	r6, r2
 8015394:	2b00      	cmp	r3, #0
 8015396:	d03d      	beq.n	8015414 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8015398:	6803      	ldr	r3, [r0, #0]
 801539a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801539e:	4798      	blx	r3
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	b204      	sxth	r4, r0
 80153a4:	4628      	mov	r0, r5
 80153a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80153aa:	4798      	blx	r3
 80153ac:	b203      	sxth	r3, r0
 80153ae:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 80153b2:	429c      	cmp	r4, r3
 80153b4:	bfc4      	itt	gt
 80153b6:	4622      	movgt	r2, r4
 80153b8:	461c      	movgt	r4, r3
 80153ba:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80153be:	bfc8      	it	gt
 80153c0:	4613      	movgt	r3, r2
 80153c2:	4284      	cmp	r4, r0
 80153c4:	da26      	bge.n	8015414 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80153c6:	4298      	cmp	r0, r3
 80153c8:	bfa8      	it	ge
 80153ca:	4618      	movge	r0, r3
 80153cc:	2800      	cmp	r0, #0
 80153ce:	db21      	blt.n	8015414 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80153d0:	b9ef      	cbnz	r7, 801540e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 80153d2:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 80153d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80153da:	4619      	mov	r1, r3
 80153dc:	42a0      	cmp	r0, r4
 80153de:	dd0b      	ble.n	80153f8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 80153e0:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 80153e4:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80153e8:	3401      	adds	r4, #1
 80153ea:	4291      	cmp	r1, r2
 80153ec:	bfa8      	it	ge
 80153ee:	4611      	movge	r1, r2
 80153f0:	4293      	cmp	r3, r2
 80153f2:	bfb8      	it	lt
 80153f4:	4613      	movlt	r3, r2
 80153f6:	e7f1      	b.n	80153dc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80153f8:	1b89      	subs	r1, r1, r6
 80153fa:	18f2      	adds	r2, r6, r3
 80153fc:	4291      	cmp	r1, r2
 80153fe:	d009      	beq.n	8015414 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8015400:	682b      	ldr	r3, [r5, #0]
 8015402:	4628      	mov	r0, r5
 8015404:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8015408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801540c:	4718      	bx	r3
 801540e:	4273      	negs	r3, r6
 8015410:	4631      	mov	r1, r6
 8015412:	e7e3      	b.n	80153dc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8015414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015418 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8015418:	b530      	push	{r4, r5, lr}
 801541a:	790b      	ldrb	r3, [r1, #4]
 801541c:	b085      	sub	sp, #20
 801541e:	4604      	mov	r4, r0
 8015420:	460d      	mov	r5, r1
 8015422:	2b02      	cmp	r3, #2
 8015424:	d020      	beq.n	8015468 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015426:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8015428:	f10d 0206 	add.w	r2, sp, #6
 801542c:	88c9      	ldrh	r1, [r1, #6]
 801542e:	1ac9      	subs	r1, r1, r3
 8015430:	6803      	ldr	r3, [r0, #0]
 8015432:	b209      	sxth	r1, r1
 8015434:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8015438:	4798      	blx	r3
 801543a:	b1a8      	cbz	r0, 8015468 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801543c:	792b      	ldrb	r3, [r5, #4]
 801543e:	2b01      	cmp	r3, #1
 8015440:	d812      	bhi.n	8015468 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015442:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8015446:	b178      	cbz	r0, 8015468 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015448:	6803      	ldr	r3, [r0, #0]
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	4798      	blx	r3
 801544e:	b158      	cbz	r0, 8015468 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015450:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015454:	aa02      	add	r2, sp, #8
 8015456:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801545a:	4621      	mov	r1, r4
 801545c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015460:	9503      	str	r5, [sp, #12]
 8015462:	6803      	ldr	r3, [r0, #0]
 8015464:	689b      	ldr	r3, [r3, #8]
 8015466:	4798      	blx	r3
 8015468:	b005      	add	sp, #20
 801546a:	bd30      	pop	{r4, r5, pc}

0801546c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 801546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015470:	4604      	mov	r4, r0
 8015472:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8015476:	4690      	mov	r8, r2
 8015478:	461f      	mov	r7, r3
 801547a:	9e06      	ldr	r6, [sp, #24]
 801547c:	b928      	cbnz	r0, 801548a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 801547e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015482:	8033      	strh	r3, [r6, #0]
 8015484:	803b      	strh	r3, [r7, #0]
 8015486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801548a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 801548e:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 8015492:	1883      	adds	r3, r0, r2
 8015494:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8015498:	1ad2      	subs	r2, r2, r3
 801549a:	b212      	sxth	r2, r2
 801549c:	2a01      	cmp	r2, #1
 801549e:	dc07      	bgt.n	80154b0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 80154a0:	2300      	movs	r3, #0
 80154a2:	803b      	strh	r3, [r7, #0]
 80154a4:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 80154a8:	3b01      	subs	r3, #1
 80154aa:	8033      	strh	r3, [r6, #0]
 80154ac:	2001      	movs	r0, #1
 80154ae:	e7ea      	b.n	8015486 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80154b0:	1a08      	subs	r0, r1, r0
 80154b2:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 80154b6:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80154ba:	0140      	lsls	r0, r0, #5
 80154bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80154be:	1a5b      	subs	r3, r3, r1
 80154c0:	d459      	bmi.n	8015576 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 80154c2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80154c6:	fb93 f1f5 	sdiv	r1, r3, r5
 80154ca:	2302      	movs	r3, #2
 80154cc:	fb91 f1f3 	sdiv	r1, r1, r3
 80154d0:	3a01      	subs	r2, #1
 80154d2:	f005 ff0c 	bl	801b2ee <_ZN8touchgfx6muldivElll>
 80154d6:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80154da:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 80154de:	2900      	cmp	r1, #0
 80154e0:	db55      	blt.n	801558e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80154e2:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80154e6:	2502      	movs	r5, #2
 80154e8:	fb93 f3fc 	sdiv	r3, r3, ip
 80154ec:	fb93 f3f5 	sdiv	r3, r3, r5
 80154f0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80154f4:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 80154f8:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 80154fc:	1a52      	subs	r2, r2, r1
 80154fe:	eba8 0003 	sub.w	r0, r8, r3
 8015502:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8015506:	d44e      	bmi.n	80155a6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8015508:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 801550c:	fb92 f1fc 	sdiv	r1, r2, ip
 8015510:	2202      	movs	r2, #2
 8015512:	fb91 f1f2 	sdiv	r1, r1, r2
 8015516:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 801551a:	4413      	add	r3, r2
 801551c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8015520:	1ad2      	subs	r2, r2, r3
 8015522:	b212      	sxth	r2, r2
 8015524:	3a01      	subs	r2, #1
 8015526:	f005 fee2 	bl	801b2ee <_ZN8touchgfx6muldivElll>
 801552a:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 801552e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015530:	2b00      	cmp	r3, #0
 8015532:	db44      	blt.n	80155be <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8015534:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015538:	fb93 f3f2 	sdiv	r3, r3, r2
 801553c:	2202      	movs	r2, #2
 801553e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015542:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8015546:	2020      	movs	r0, #32
 8015548:	429d      	cmp	r5, r3
 801554a:	bfde      	ittt	le
 801554c:	461a      	movle	r2, r3
 801554e:	462b      	movle	r3, r5
 8015550:	4615      	movle	r5, r2
 8015552:	b21b      	sxth	r3, r3
 8015554:	2d00      	cmp	r5, #0
 8015556:	bfaa      	itet	ge
 8015558:	351f      	addge	r5, #31
 801555a:	fb95 f5f0 	sdivlt	r5, r5, r0
 801555e:	116d      	asrge	r5, r5, #5
 8015560:	fb93 f3f0 	sdiv	r3, r3, r0
 8015564:	b22d      	sxth	r5, r5
 8015566:	803b      	strh	r3, [r7, #0]
 8015568:	2d00      	cmp	r5, #0
 801556a:	8035      	strh	r5, [r6, #0]
 801556c:	da33      	bge.n	80155d6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 801556e:	2000      	movs	r0, #0
 8015570:	8030      	strh	r0, [r6, #0]
 8015572:	8038      	strh	r0, [r7, #0]
 8015574:	e787      	b.n	8015486 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8015576:	f06f 0101 	mvn.w	r1, #1
 801557a:	fb01 5303 	mla	r3, r1, r3, r5
 801557e:	1e59      	subs	r1, r3, #1
 8015580:	2302      	movs	r3, #2
 8015582:	fb91 f1f5 	sdiv	r1, r1, r5
 8015586:	fb91 f1f3 	sdiv	r1, r1, r3
 801558a:	4249      	negs	r1, r1
 801558c:	e7a0      	b.n	80154d0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 801558e:	f06f 0301 	mvn.w	r3, #1
 8015592:	2502      	movs	r5, #2
 8015594:	fb03 c301 	mla	r3, r3, r1, ip
 8015598:	3b01      	subs	r3, #1
 801559a:	fb93 f3fc 	sdiv	r3, r3, ip
 801559e:	fb93 f3f5 	sdiv	r3, r3, r5
 80155a2:	425b      	negs	r3, r3
 80155a4:	e7a4      	b.n	80154f0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 80155a6:	f06f 0101 	mvn.w	r1, #1
 80155aa:	fb01 c202 	mla	r2, r1, r2, ip
 80155ae:	1e51      	subs	r1, r2, #1
 80155b0:	2202      	movs	r2, #2
 80155b2:	fb91 f1fc 	sdiv	r1, r1, ip
 80155b6:	fb91 f1f2 	sdiv	r1, r1, r2
 80155ba:	4249      	negs	r1, r1
 80155bc:	e7ab      	b.n	8015516 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 80155be:	f06f 0101 	mvn.w	r1, #1
 80155c2:	fb01 2303 	mla	r3, r1, r3, r2
 80155c6:	3b01      	subs	r3, #1
 80155c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80155cc:	2202      	movs	r2, #2
 80155ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80155d2:	425b      	negs	r3, r3
 80155d4:	e7b5      	b.n	8015542 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 80155d6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80155da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80155de:	4293      	cmp	r3, r2
 80155e0:	dc05      	bgt.n	80155ee <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80155e2:	3b01      	subs	r3, #1
 80155e4:	2000      	movs	r0, #0
 80155e6:	b21b      	sxth	r3, r3
 80155e8:	8033      	strh	r3, [r6, #0]
 80155ea:	803b      	strh	r3, [r7, #0]
 80155ec:	e74b      	b.n	8015486 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80155ee:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80155f2:	803a      	strh	r2, [r7, #0]
 80155f4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80155f8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80155fc:	4293      	cmp	r3, r2
 80155fe:	bfdc      	itt	le
 8015600:	f103 33ff 	addle.w	r3, r3, #4294967295
 8015604:	b21a      	sxthle	r2, r3
 8015606:	8032      	strh	r2, [r6, #0]
 8015608:	e750      	b.n	80154ac <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

0801560c <_ZN8touchgfx9ContainerC1Ev>:
 801560c:	2101      	movs	r1, #1
 801560e:	2200      	movs	r2, #0
 8015610:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8015614:	4909      	ldr	r1, [pc, #36]	@ (801563c <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8015616:	8082      	strh	r2, [r0, #4]
 8015618:	80c2      	strh	r2, [r0, #6]
 801561a:	8102      	strh	r2, [r0, #8]
 801561c:	8142      	strh	r2, [r0, #10]
 801561e:	8182      	strh	r2, [r0, #12]
 8015620:	81c2      	strh	r2, [r0, #14]
 8015622:	8202      	strh	r2, [r0, #16]
 8015624:	8242      	strh	r2, [r0, #18]
 8015626:	61c2      	str	r2, [r0, #28]
 8015628:	8402      	strh	r2, [r0, #32]
 801562a:	8442      	strh	r2, [r0, #34]	@ 0x22
 801562c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8015630:	6001      	str	r1, [r0, #0]
 8015632:	6282      	str	r2, [r0, #40]	@ 0x28
 8015634:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015638:	4770      	bx	lr
 801563a:	bf00      	nop
 801563c:	0802c984 	.word	0x0802c984

08015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8015640:	6800      	ldr	r0, [r0, #0]
 8015642:	2800      	cmp	r0, #0
 8015644:	bfbd      	ittte	lt
 8015646:	380f      	sublt	r0, #15
 8015648:	2320      	movlt	r3, #32
 801564a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801564e:	3010      	addge	r0, #16
 8015650:	bfa8      	it	ge
 8015652:	1140      	asrge	r0, r0, #5
 8015654:	4770      	bx	lr

08015656 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8015656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565a:	4605      	mov	r5, r0
 801565c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8015660:	4688      	mov	r8, r1
 8015662:	4691      	mov	r9, r2
 8015664:	469a      	mov	sl, r3
 8015666:	b360      	cbz	r0, 80156c2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8015668:	2700      	movs	r7, #0
 801566a:	f04f 3bff 	mov.w	fp, #4294967295
 801566e:	b23e      	sxth	r6, r7
 8015670:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8015674:	42b3      	cmp	r3, r6
 8015676:	dd23      	ble.n	80156c0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8015678:	682b      	ldr	r3, [r5, #0]
 801567a:	4631      	mov	r1, r6
 801567c:	4628      	mov	r0, r5
 801567e:	3701      	adds	r7, #1
 8015680:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015684:	4798      	blx	r3
 8015686:	9001      	str	r0, [sp, #4]
 8015688:	a801      	add	r0, sp, #4
 801568a:	f7ff ffd9 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801568e:	682b      	ldr	r3, [r5, #0]
 8015690:	eba0 0008 	sub.w	r0, r0, r8
 8015694:	4631      	mov	r1, r6
 8015696:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801569a:	b204      	sxth	r4, r0
 801569c:	4628      	mov	r0, r5
 801569e:	4798      	blx	r3
 80156a0:	9001      	str	r0, [sp, #4]
 80156a2:	a801      	add	r0, sp, #4
 80156a4:	f7ff ffcc 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80156a8:	eba0 0009 	sub.w	r0, r0, r9
 80156ac:	fb10 f000 	smulbb	r0, r0, r0
 80156b0:	fb04 0404 	mla	r4, r4, r4, r0
 80156b4:	455c      	cmp	r4, fp
 80156b6:	bf3c      	itt	cc
 80156b8:	f8aa 6000 	strhcc.w	r6, [sl]
 80156bc:	46a3      	movcc	fp, r4
 80156be:	e7d6      	b.n	801566e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 80156c0:	2001      	movs	r0, #1
 80156c2:	b003      	add	sp, #12
 80156c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080156c8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 80156c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80156cc:	460e      	mov	r6, r1
 80156ce:	2100      	movs	r1, #0
 80156d0:	4605      	mov	r5, r0
 80156d2:	4617      	mov	r7, r2
 80156d4:	8011      	strh	r1, [r2, #0]
 80156d6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80156da:	b36b      	cbz	r3, 8015738 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 80156dc:	6803      	ldr	r3, [r0, #0]
 80156de:	f10d 0808 	add.w	r8, sp, #8
 80156e2:	2401      	movs	r4, #1
 80156e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80156e8:	4798      	blx	r3
 80156ea:	f848 0d04 	str.w	r0, [r8, #-4]!
 80156ee:	4640      	mov	r0, r8
 80156f0:	f7ff ffa6 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80156f4:	b200      	sxth	r0, r0
 80156f6:	1b80      	subs	r0, r0, r6
 80156f8:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 80156fc:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8015700:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8015704:	42a3      	cmp	r3, r4
 8015706:	dd1b      	ble.n	8015740 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 8015708:	682b      	ldr	r3, [r5, #0]
 801570a:	4621      	mov	r1, r4
 801570c:	4628      	mov	r0, r5
 801570e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015712:	4798      	blx	r3
 8015714:	9001      	str	r0, [sp, #4]
 8015716:	4640      	mov	r0, r8
 8015718:	f7ff ff92 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801571c:	b200      	sxth	r0, r0
 801571e:	1b80      	subs	r0, r0, r6
 8015720:	2800      	cmp	r0, #0
 8015722:	bfb8      	it	lt
 8015724:	4240      	neglt	r0, r0
 8015726:	4548      	cmp	r0, r9
 8015728:	bf38      	it	cc
 801572a:	803c      	strhcc	r4, [r7, #0]
 801572c:	f104 0401 	add.w	r4, r4, #1
 8015730:	bf38      	it	cc
 8015732:	4681      	movcc	r9, r0
 8015734:	b224      	sxth	r4, r4
 8015736:	e7e3      	b.n	8015700 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8015738:	4618      	mov	r0, r3
 801573a:	b003      	add	sp, #12
 801573c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015740:	2001      	movs	r0, #1
 8015742:	e7fa      	b.n	801573a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08015744 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8015744:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8015748:	f9bd 3000 	ldrsh.w	r3, [sp]
 801574c:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8015750:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8015754:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8015758:	4770      	bx	lr

0801575a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 801575a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801575c:	4604      	mov	r4, r0
 801575e:	3038      	adds	r0, #56	@ 0x38
 8015760:	460d      	mov	r5, r1
 8015762:	f7fc fa01 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015766:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 801576a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801576e:	4628      	mov	r0, r5
 8015770:	9200      	str	r2, [sp, #0]
 8015772:	2200      	movs	r2, #0
 8015774:	4611      	mov	r1, r2
 8015776:	f7ee fad4 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 801577a:	b003      	add	sp, #12
 801577c:	bd30      	pop	{r4, r5, pc}

0801577e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 801577e:	b538      	push	{r3, r4, r5, lr}
 8015780:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8015784:	460d      	mov	r5, r1
 8015786:	428b      	cmp	r3, r1
 8015788:	dd08      	ble.n	801579c <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801578a:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 801578c:	b134      	cbz	r4, 801579c <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801578e:	6823      	ldr	r3, [r4, #0]
 8015790:	4620      	mov	r0, r4
 8015792:	4629      	mov	r1, r5
 8015794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015796:	4798      	blx	r3
 8015798:	69a4      	ldr	r4, [r4, #24]
 801579a:	e7f7      	b.n	801578c <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 801579c:	bd38      	pop	{r3, r4, r5, pc}

0801579e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 801579e:	b570      	push	{r4, r5, r6, lr}
 80157a0:	4606      	mov	r6, r0
 80157a2:	460d      	mov	r5, r1
 80157a4:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 80157a8:	b134      	cbz	r4, 80157b8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	4620      	mov	r0, r4
 80157ae:	4629      	mov	r1, r5
 80157b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80157b2:	4798      	blx	r3
 80157b4:	69a4      	ldr	r4, [r4, #24]
 80157b6:	e7f7      	b.n	80157a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 80157b8:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 80157bc:	b134      	cbz	r4, 80157cc <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 80157be:	6823      	ldr	r3, [r4, #0]
 80157c0:	4620      	mov	r0, r4
 80157c2:	4629      	mov	r1, r5
 80157c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80157c6:	4798      	blx	r3
 80157c8:	69a4      	ldr	r4, [r4, #24]
 80157ca:	e7f7      	b.n	80157bc <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 80157cc:	bd70      	pop	{r4, r5, r6, pc}

080157ce <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 80157ce:	b538      	push	{r3, r4, r5, lr}
 80157d0:	4604      	mov	r4, r0
 80157d2:	2500      	movs	r5, #0
 80157d4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80157d8:	42ab      	cmp	r3, r5
 80157da:	db05      	blt.n	80157e8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 80157dc:	b229      	sxth	r1, r5
 80157de:	4620      	mov	r0, r4
 80157e0:	f7ff ffdd 	bl	801579e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80157e4:	3501      	adds	r5, #1
 80157e6:	e7f5      	b.n	80157d4 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 80157e8:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80157ec:	f005 f86f 	bl	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>
 80157f0:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80157f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157f8:	f005 b869 	b.w	801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>

080157fc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80157fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157fe:	4604      	mov	r4, r0
 8015800:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8015802:	b15d      	cbz	r5, 801581c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8015804:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8015808:	4628      	mov	r0, r5
 801580a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801580e:	9200      	str	r2, [sp, #0]
 8015810:	2200      	movs	r2, #0
 8015812:	4611      	mov	r1, r2
 8015814:	f7ee fa85 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015818:	69ad      	ldr	r5, [r5, #24]
 801581a:	e7f2      	b.n	8015802 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 801581c:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8015820:	b15d      	cbz	r5, 801583a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8015822:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 8015826:	4628      	mov	r0, r5
 8015828:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 801582c:	9200      	str	r2, [sp, #0]
 801582e:	2200      	movs	r2, #0
 8015830:	4611      	mov	r1, r2
 8015832:	f7ee fa76 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015836:	69ad      	ldr	r5, [r5, #24]
 8015838:	e7f2      	b.n	8015820 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 801583a:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 801583e:	b15d      	cbz	r5, 8015858 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8015840:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8015844:	4628      	mov	r0, r5
 8015846:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 801584a:	9200      	str	r2, [sp, #0]
 801584c:	2200      	movs	r2, #0
 801584e:	4611      	mov	r1, r2
 8015850:	f7ee fa67 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015854:	69ad      	ldr	r5, [r5, #24]
 8015856:	e7f2      	b.n	801583e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8015858:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 801585c:	b15d      	cbz	r5, 8015876 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 801585e:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8015862:	4628      	mov	r0, r5
 8015864:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8015868:	9200      	str	r2, [sp, #0]
 801586a:	2200      	movs	r2, #0
 801586c:	4611      	mov	r1, r2
 801586e:	f7ee fa58 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015872:	69ad      	ldr	r5, [r5, #24]
 8015874:	e7f2      	b.n	801585c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8015876:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 801587a:	b15d      	cbz	r5, 8015894 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 801587c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8015880:	4628      	mov	r0, r5
 8015882:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 8015886:	9200      	str	r2, [sp, #0]
 8015888:	2200      	movs	r2, #0
 801588a:	4611      	mov	r1, r2
 801588c:	f7ee fa49 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015890:	69ad      	ldr	r5, [r5, #24]
 8015892:	e7f2      	b.n	801587a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8015894:	6823      	ldr	r3, [r4, #0]
 8015896:	4620      	mov	r0, r4
 8015898:	695b      	ldr	r3, [r3, #20]
 801589a:	b003      	add	sp, #12
 801589c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80158a0:	4718      	bx	r3

080158a2 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 80158a2:	b430      	push	{r4, r5}
 80158a4:	b28a      	uxth	r2, r1
 80158a6:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 80158aa:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 80158ae:	1b15      	subs	r5, r2, r4
 80158b0:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 80158b4:	8101      	strh	r1, [r0, #8]
 80158b6:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 80158ba:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 80158be:	442c      	add	r4, r5
 80158c0:	1b12      	subs	r2, r2, r4
 80158c2:	bc30      	pop	{r4, r5}
 80158c4:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80158c8:	f7ff bf98 	b.w	80157fc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080158cc <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 80158cc:	b430      	push	{r4, r5}
 80158ce:	b28a      	uxth	r2, r1
 80158d0:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 80158d4:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 80158d8:	1b15      	subs	r5, r2, r4
 80158da:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 80158de:	8141      	strh	r1, [r0, #10]
 80158e0:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 80158e4:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 80158e8:	442c      	add	r4, r5
 80158ea:	1b12      	subs	r2, r2, r4
 80158ec:	bc30      	pop	{r4, r5}
 80158ee:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80158f2:	f7ff bf83 	b.w	80157fc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080158f6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 80158f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80158fa:	fa1f fa83 	uxth.w	sl, r3
 80158fe:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8015902:	4615      	mov	r5, r2
 8015904:	4699      	mov	r9, r3
 8015906:	fa1f f887 	uxth.w	r8, r7
 801590a:	8903      	ldrh	r3, [r0, #8]
 801590c:	4452      	add	r2, sl
 801590e:	4604      	mov	r4, r0
 8015910:	8940      	ldrh	r0, [r0, #10]
 8015912:	460e      	mov	r6, r1
 8015914:	1a9b      	subs	r3, r3, r2
 8015916:	eb08 0201 	add.w	r2, r8, r1
 801591a:	1a80      	subs	r0, r0, r2
 801591c:	b21b      	sxth	r3, r3
 801591e:	460a      	mov	r2, r1
 8015920:	4629      	mov	r1, r5
 8015922:	b200      	sxth	r0, r0
 8015924:	9000      	str	r0, [sp, #0]
 8015926:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801592a:	f7ee f9fa 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 801592e:	2200      	movs	r2, #0
 8015930:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015934:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8015938:	4611      	mov	r1, r2
 801593a:	9600      	str	r6, [sp, #0]
 801593c:	f7ee f9f1 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015940:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015944:	2200      	movs	r2, #0
 8015946:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801594a:	9300      	str	r3, [sp, #0]
 801594c:	462b      	mov	r3, r5
 801594e:	4611      	mov	r1, r2
 8015950:	f7ee f9e7 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015954:	8921      	ldrh	r1, [r4, #8]
 8015956:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801595a:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 801595e:	eba1 010a 	sub.w	r1, r1, sl
 8015962:	2200      	movs	r2, #0
 8015964:	9300      	str	r3, [sp, #0]
 8015966:	464b      	mov	r3, r9
 8015968:	b209      	sxth	r1, r1
 801596a:	f7ee f9da 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 801596e:	8962      	ldrh	r2, [r4, #10]
 8015970:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8015974:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015978:	eba2 0208 	sub.w	r2, r2, r8
 801597c:	9700      	str	r7, [sp, #0]
 801597e:	2100      	movs	r1, #0
 8015980:	b212      	sxth	r2, r2
 8015982:	f7ee f9ce 	bl	8003d22 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015986:	4620      	mov	r0, r4
 8015988:	b002      	add	sp, #8
 801598a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801598e:	f7ff bf35 	b.w	80157fc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08015994 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8015994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015998:	b085      	sub	sp, #20
 801599a:	4604      	mov	r4, r0
 801599c:	2601      	movs	r6, #1
 801599e:	2500      	movs	r5, #0
 80159a0:	9103      	str	r1, [sp, #12]
 80159a2:	f7ff fe33 	bl	801560c <_ZN8touchgfx9ContainerC1Ev>
 80159a6:	4b2c      	ldr	r3, [pc, #176]	@ (8015a58 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 80159a8:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 80159ac:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 80159b0:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 80159b4:	6023      	str	r3, [r4, #0]
 80159b6:	23ff      	movs	r3, #255	@ 0xff
 80159b8:	4658      	mov	r0, fp
 80159ba:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 80159be:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80159c2:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 80159c6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80159ca:	f7ff fe1f 	bl	801560c <_ZN8touchgfx9ContainerC1Ev>
 80159ce:	4648      	mov	r0, r9
 80159d0:	f7ff fe1c 	bl	801560c <_ZN8touchgfx9ContainerC1Ev>
 80159d4:	4640      	mov	r0, r8
 80159d6:	f7ff fe19 	bl	801560c <_ZN8touchgfx9ContainerC1Ev>
 80159da:	4650      	mov	r0, sl
 80159dc:	f7ff fe16 	bl	801560c <_ZN8touchgfx9ContainerC1Ev>
 80159e0:	4638      	mov	r0, r7
 80159e2:	f7ff fe13 	bl	801560c <_ZN8touchgfx9ContainerC1Ev>
 80159e6:	9903      	ldr	r1, [sp, #12]
 80159e8:	4620      	mov	r0, r4
 80159ea:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 80159ee:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 80159f2:	4659      	mov	r1, fp
 80159f4:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80159f8:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 80159fc:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8015a00:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8015a04:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8015a08:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8015a0c:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8015a10:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8015a14:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 8015a18:	f7fc f8a6 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a1c:	4651      	mov	r1, sl
 8015a1e:	4620      	mov	r0, r4
 8015a20:	f7fc f8a2 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a24:	4649      	mov	r1, r9
 8015a26:	4620      	mov	r0, r4
 8015a28:	f7fc f89e 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a2c:	4641      	mov	r1, r8
 8015a2e:	4620      	mov	r0, r4
 8015a30:	f7fc f89a 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a34:	4639      	mov	r1, r7
 8015a36:	4620      	mov	r0, r4
 8015a38:	f7fc f896 	bl	8011b68 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	9500      	str	r5, [sp, #0]
 8015a40:	462b      	mov	r3, r5
 8015a42:	462a      	mov	r2, r5
 8015a44:	4629      	mov	r1, r5
 8015a46:	f7ff ff56 	bl	80158f6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8015a50:	b005      	add	sp, #20
 8015a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a56:	bf00      	nop
 8015a58:	0802cdd0 	.word	0x0802cdd0

08015a5c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8015a5c:	4291      	cmp	r1, r2
 8015a5e:	4613      	mov	r3, r2
 8015a60:	d003      	beq.n	8015a6a <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8015a62:	460a      	mov	r2, r1
 8015a64:	4619      	mov	r1, r3
 8015a66:	f005 bc42 	b.w	801b2ee <_ZN8touchgfx6muldivElll>
 8015a6a:	4770      	bx	lr

08015a6c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8015a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a70:	6803      	ldr	r3, [r0, #0]
 8015a72:	460d      	mov	r5, r1
 8015a74:	4604      	mov	r4, r0
 8015a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015a7a:	4798      	blx	r3
 8015a7c:	42a8      	cmp	r0, r5
 8015a7e:	4606      	mov	r6, r0
 8015a80:	d024      	beq.n	8015acc <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	4601      	mov	r1, r0
 8015a86:	462a      	mov	r2, r5
 8015a88:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8015a8c:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8015a90:	f7ff ffe4 	bl	8015a5c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015a94:	4680      	mov	r8, r0
 8015a96:	462a      	mov	r2, r5
 8015a98:	4631      	mov	r1, r6
 8015a9a:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8015a9e:	f7ff ffdd 	bl	8015a5c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015aa2:	4641      	mov	r1, r8
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	47b8      	blx	r7
 8015aaa:	462a      	mov	r2, r5
 8015aac:	4631      	mov	r1, r6
 8015aae:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8015ab2:	f7ff ffd3 	bl	8015a5c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015ab6:	462a      	mov	r2, r5
 8015ab8:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8015abc:	4631      	mov	r1, r6
 8015abe:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8015ac2:	f7ff ffcb 	bl	8015a5c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015ac6:	6325      	str	r5, [r4, #48]	@ 0x30
 8015ac8:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8015acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ad0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8015ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	460f      	mov	r7, r1
 8015ad8:	b1b2      	cbz	r2, 8015b08 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8015ada:	6803      	ldr	r3, [r0, #0]
 8015adc:	2600      	movs	r6, #0
 8015ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015ae2:	4798      	blx	r3
 8015ae4:	4681      	mov	r9, r0
 8015ae6:	b235      	sxth	r5, r6
 8015ae8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015aec:	3601      	adds	r6, #1
 8015aee:	42ab      	cmp	r3, r5
 8015af0:	dd0a      	ble.n	8015b08 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8015af2:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8015af6:	463a      	mov	r2, r7
 8015af8:	4649      	mov	r1, r9
 8015afa:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8015afe:	f7ff ffad 	bl	8015a5c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8015b02:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8015b06:	e7ee      	b.n	8015ae6 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8015b08:	6367      	str	r7, [r4, #52]	@ 0x34
 8015b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015b0e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8015b0e:	b570      	push	{r4, r5, r6, lr}
 8015b10:	6803      	ldr	r3, [r0, #0]
 8015b12:	4604      	mov	r4, r0
 8015b14:	460d      	mov	r5, r1
 8015b16:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8015b1a:	4798      	blx	r3
 8015b1c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8015b20:	4629      	mov	r1, r5
 8015b22:	4620      	mov	r0, r4
 8015b24:	3301      	adds	r3, #1
 8015b26:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b30:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8015b34:	4718      	bx	r3

08015b36 <_ZN8touchgfx16GraphElementLineD1Ev>:
 8015b36:	4770      	bx	lr

08015b38 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8015b38:	b510      	push	{r4, lr}
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	2130      	movs	r1, #48	@ 0x30
 8015b3e:	f012 f9c7 	bl	8027ed0 <_ZdlPvj>
 8015b42:	4620      	mov	r0, r4
 8015b44:	bd10      	pop	{r4, pc}

08015b46 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8015b46:	6800      	ldr	r0, [r0, #0]
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	bfb9      	ittee	lt
 8015b4c:	2320      	movlt	r3, #32
 8015b4e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8015b52:	301f      	addge	r0, #31
 8015b54:	1140      	asrge	r0, r0, #5
 8015b56:	4770      	bx	lr

08015b58 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8015b58:	b510      	push	{r4, lr}
 8015b5a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8015b5e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8015b62:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8015b66:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8015b6a:	139b      	asrs	r3, r3, #14
 8015b6c:	13a4      	asrs	r4, r4, #14
 8015b6e:	429c      	cmp	r4, r3
 8015b70:	bfb8      	it	lt
 8015b72:	461c      	movlt	r4, r3
 8015b74:	2c01      	cmp	r4, #1
 8015b76:	dd07      	ble.n	8015b88 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8015b78:	fb91 f1f4 	sdiv	r1, r1, r4
 8015b7c:	fb90 f0f4 	sdiv	r0, r0, r4
 8015b80:	f7ff ffea 	bl	8015b58 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015b84:	4360      	muls	r0, r4
 8015b86:	bd10      	pop	{r4, pc}
 8015b88:	4340      	muls	r0, r0
 8015b8a:	fb01 0101 	mla	r1, r1, r1, r0
 8015b8e:	2000      	movs	r0, #0
 8015b90:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8015b94:	bfb4      	ite	lt
 8015b96:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8015b9a:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8015b9e:	18c2      	adds	r2, r0, r3
 8015ba0:	428a      	cmp	r2, r1
 8015ba2:	bf9c      	itt	ls
 8015ba4:	1898      	addls	r0, r3, r2
 8015ba6:	1a89      	subls	r1, r1, r2
 8015ba8:	089b      	lsrs	r3, r3, #2
 8015baa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8015bae:	d1f6      	bne.n	8015b9e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8015bb0:	e7e9      	b.n	8015b86 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08015bb2 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8015bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bb4:	9906      	ldr	r1, [sp, #24]
 8015bb6:	4606      	mov	r6, r0
 8015bb8:	461c      	mov	r4, r3
 8015bba:	2020      	movs	r0, #32
 8015bbc:	4291      	cmp	r1, r2
 8015bbe:	bfbc      	itt	lt
 8015bc0:	9206      	strlt	r2, [sp, #24]
 8015bc2:	460a      	movlt	r2, r1
 8015bc4:	9907      	ldr	r1, [sp, #28]
 8015bc6:	428b      	cmp	r3, r1
 8015bc8:	bfc4      	itt	gt
 8015bca:	460c      	movgt	r4, r1
 8015bcc:	9307      	strgt	r3, [sp, #28]
 8015bce:	fb92 f5f0 	sdiv	r5, r2, r0
 8015bd2:	fb94 f4f0 	sdiv	r4, r4, r0
 8015bd6:	a806      	add	r0, sp, #24
 8015bd8:	f7ff ffb5 	bl	8015b46 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8015bdc:	4607      	mov	r7, r0
 8015bde:	a807      	add	r0, sp, #28
 8015be0:	f7ff ffb1 	bl	8015b46 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8015be4:	1b7a      	subs	r2, r7, r5
 8015be6:	1b00      	subs	r0, r0, r4
 8015be8:	8035      	strh	r5, [r6, #0]
 8015bea:	8074      	strh	r4, [r6, #2]
 8015bec:	80f0      	strh	r0, [r6, #6]
 8015bee:	4630      	mov	r0, r6
 8015bf0:	80b2      	strh	r2, [r6, #4]
 8015bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015bf4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8015bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bf6:	9c08      	ldr	r4, [sp, #32]
 8015bf8:	2602      	movs	r6, #2
 8015bfa:	4605      	mov	r5, r0
 8015bfc:	3401      	adds	r4, #1
 8015bfe:	fb94 f4f6 	sdiv	r4, r4, r6
 8015c02:	18a6      	adds	r6, r4, r2
 8015c04:	191f      	adds	r7, r3, r4
 8015c06:	1b12      	subs	r2, r2, r4
 8015c08:	1b1b      	subs	r3, r3, r4
 8015c0a:	e9cd 6700 	strd	r6, r7, [sp]
 8015c0e:	f7ff ffd0 	bl	8015bb2 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8015c12:	4628      	mov	r0, r5
 8015c14:	b003      	add	sp, #12
 8015c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c18 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8015c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c1c:	6943      	ldr	r3, [r0, #20]
 8015c1e:	b087      	sub	sp, #28
 8015c20:	4606      	mov	r6, r0
 8015c22:	460d      	mov	r5, r1
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d072      	beq.n	8015d0e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8015c28:	695c      	ldr	r4, [r3, #20]
 8015c2a:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8015c2e:	6823      	ldr	r3, [r4, #0]
 8015c30:	4620      	mov	r0, r4
 8015c32:	017f      	lsls	r7, r7, #5
 8015c34:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015c38:	4798      	blx	r3
 8015c3a:	6823      	ldr	r3, [r4, #0]
 8015c3c:	4680      	mov	r8, r0
 8015c3e:	4629      	mov	r1, r5
 8015c40:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015c44:	4620      	mov	r0, r4
 8015c46:	4798      	blx	r3
 8015c48:	9700      	str	r7, [sp, #0]
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	4642      	mov	r2, r8
 8015c4e:	4631      	mov	r1, r6
 8015c50:	a802      	add	r0, sp, #8
 8015c52:	f7ff ffcf 	bl	8015bf4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8015c56:	2d00      	cmp	r5, #0
 8015c58:	dd1b      	ble.n	8015c92 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8015c5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8015c5e:	6823      	ldr	r3, [r4, #0]
 8015c60:	4620      	mov	r0, r4
 8015c62:	fa0f f888 	sxth.w	r8, r8
 8015c66:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015c6a:	4641      	mov	r1, r8
 8015c6c:	4798      	blx	r3
 8015c6e:	6823      	ldr	r3, [r4, #0]
 8015c70:	4681      	mov	r9, r0
 8015c72:	4641      	mov	r1, r8
 8015c74:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015c78:	4620      	mov	r0, r4
 8015c7a:	4798      	blx	r3
 8015c7c:	4631      	mov	r1, r6
 8015c7e:	4603      	mov	r3, r0
 8015c80:	9700      	str	r7, [sp, #0]
 8015c82:	a804      	add	r0, sp, #16
 8015c84:	464a      	mov	r2, r9
 8015c86:	f7ff ffb5 	bl	8015bf4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8015c8a:	a904      	add	r1, sp, #16
 8015c8c:	a802      	add	r0, sp, #8
 8015c8e:	f7fc fc71 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015c92:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015c96:	3b01      	subs	r3, #1
 8015c98:	429d      	cmp	r5, r3
 8015c9a:	da19      	bge.n	8015cd0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8015c9c:	3501      	adds	r5, #1
 8015c9e:	6823      	ldr	r3, [r4, #0]
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	b22d      	sxth	r5, r5
 8015ca4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015ca8:	4629      	mov	r1, r5
 8015caa:	4798      	blx	r3
 8015cac:	6823      	ldr	r3, [r4, #0]
 8015cae:	4680      	mov	r8, r0
 8015cb0:	4629      	mov	r1, r5
 8015cb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	4798      	blx	r3
 8015cba:	4631      	mov	r1, r6
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	9700      	str	r7, [sp, #0]
 8015cc0:	a804      	add	r0, sp, #16
 8015cc2:	4642      	mov	r2, r8
 8015cc4:	f7ff ff96 	bl	8015bf4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8015cc8:	a904      	add	r1, sp, #16
 8015cca:	a802      	add	r0, sp, #8
 8015ccc:	f7fc fc52 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015cd0:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8015cd4:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8015cd8:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8015cdc:	18ca      	adds	r2, r1, r3
 8015cde:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8015ce2:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015ce6:	a904      	add	r1, sp, #16
 8015ce8:	1a9b      	subs	r3, r3, r2
 8015cea:	2200      	movs	r2, #0
 8015cec:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015cf0:	a802      	add	r0, sp, #8
 8015cf2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015cf6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015cfa:	f7fc f8b9 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8015cfe:	6833      	ldr	r3, [r6, #0]
 8015d00:	a902      	add	r1, sp, #8
 8015d02:	4630      	mov	r0, r6
 8015d04:	691b      	ldr	r3, [r3, #16]
 8015d06:	4798      	blx	r3
 8015d08:	b007      	add	sp, #28
 8015d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	deff      	udf	#255	@ 0xff

08015d12 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8015d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d16:	b08b      	sub	sp, #44	@ 0x2c
 8015d18:	461e      	mov	r6, r3
 8015d1a:	460f      	mov	r7, r1
 8015d1c:	4615      	mov	r5, r2
 8015d1e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8015d22:	429e      	cmp	r6, r3
 8015d24:	9304      	str	r3, [sp, #16]
 8015d26:	d074      	beq.n	8015e12 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8015d28:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8015d2c:	4631      	mov	r1, r6
 8015d2e:	4610      	mov	r0, r2
 8015d30:	4634      	mov	r4, r6
 8015d32:	015b      	lsls	r3, r3, #5
 8015d34:	9303      	str	r3, [sp, #12]
 8015d36:	6813      	ldr	r3, [r2, #0]
 8015d38:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015d3c:	4798      	blx	r3
 8015d3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8015d40:	f843 0d10 	str.w	r0, [r3, #-16]!
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7ff fc7b 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015d4a:	682b      	ldr	r3, [r5, #0]
 8015d4c:	4631      	mov	r1, r6
 8015d4e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015d52:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015d56:	4628      	mov	r0, r5
 8015d58:	4798      	blx	r3
 8015d5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8015d5c:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7ff fc6d 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015d66:	4641      	mov	r1, r8
 8015d68:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8015d6c:	4638      	mov	r0, r7
 8015d6e:	464a      	mov	r2, r9
 8015d70:	f011 fd7a 	bl	8027868 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015d74:	2301      	movs	r3, #1
 8015d76:	9300      	str	r3, [sp, #0]
 8015d78:	4628      	mov	r0, r5
 8015d7a:	9b00      	ldr	r3, [sp, #0]
 8015d7c:	441c      	add	r4, r3
 8015d7e:	682b      	ldr	r3, [r5, #0]
 8015d80:	b224      	sxth	r4, r4
 8015d82:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8015d86:	4621      	mov	r1, r4
 8015d88:	4798      	blx	r3
 8015d8a:	9008      	str	r0, [sp, #32]
 8015d8c:	a808      	add	r0, sp, #32
 8015d8e:	f7ff fc57 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015d92:	4621      	mov	r1, r4
 8015d94:	0143      	lsls	r3, r0, #5
 8015d96:	4628      	mov	r0, r5
 8015d98:	9301      	str	r3, [sp, #4]
 8015d9a:	682b      	ldr	r3, [r5, #0]
 8015d9c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015da0:	4798      	blx	r3
 8015da2:	9009      	str	r0, [sp, #36]	@ 0x24
 8015da4:	a809      	add	r0, sp, #36	@ 0x24
 8015da6:	f7ff fc4b 	bl	8015640 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015daa:	0143      	lsls	r3, r0, #5
 8015dac:	9302      	str	r3, [sp, #8]
 8015dae:	9b01      	ldr	r3, [sp, #4]
 8015db0:	eba3 0b08 	sub.w	fp, r3, r8
 8015db4:	9b02      	ldr	r3, [sp, #8]
 8015db6:	eba3 0a09 	sub.w	sl, r3, r9
 8015dba:	4658      	mov	r0, fp
 8015dbc:	4651      	mov	r1, sl
 8015dbe:	f7ff fecb 	bl	8015b58 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015dc2:	b320      	cbz	r0, 8015e0e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	4651      	mov	r1, sl
 8015dc8:	9005      	str	r0, [sp, #20]
 8015dca:	9803      	ldr	r0, [sp, #12]
 8015dcc:	f005 fa8f 	bl	801b2ee <_ZN8touchgfx6muldivElll>
 8015dd0:	2302      	movs	r3, #2
 8015dd2:	4659      	mov	r1, fp
 8015dd4:	fb90 faf3 	sdiv	sl, r0, r3
 8015dd8:	9b05      	ldr	r3, [sp, #20]
 8015dda:	9803      	ldr	r0, [sp, #12]
 8015ddc:	461a      	mov	r2, r3
 8015dde:	f005 fa86 	bl	801b2ee <_ZN8touchgfx6muldivElll>
 8015de2:	2302      	movs	r3, #2
 8015de4:	eba8 010a 	sub.w	r1, r8, sl
 8015de8:	fb90 fbf3 	sdiv	fp, r0, r3
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	eb0b 0209 	add.w	r2, fp, r9
 8015df2:	4638      	mov	r0, r7
 8015df4:	689b      	ldr	r3, [r3, #8]
 8015df6:	4798      	blx	r3
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	9a02      	ldr	r2, [sp, #8]
 8015dfc:	4638      	mov	r0, r7
 8015dfe:	9901      	ldr	r1, [sp, #4]
 8015e00:	689b      	ldr	r3, [r3, #8]
 8015e02:	445a      	add	r2, fp
 8015e04:	eba1 010a 	sub.w	r1, r1, sl
 8015e08:	4798      	blx	r3
 8015e0a:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8015e0e:	42a6      	cmp	r6, r4
 8015e10:	db02      	blt.n	8015e18 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8015e12:	b00b      	add	sp, #44	@ 0x2c
 8015e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e18:	9b00      	ldr	r3, [sp, #0]
 8015e1a:	9a04      	ldr	r2, [sp, #16]
 8015e1c:	42a2      	cmp	r2, r4
 8015e1e:	bf08      	it	eq
 8015e20:	f04f 33ff 	moveq.w	r3, #4294967295
 8015e24:	e7a7      	b.n	8015d76 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>
	...

08015e28 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8015e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e2c:	6943      	ldr	r3, [r0, #20]
 8015e2e:	b0a4      	sub	sp, #144	@ 0x90
 8015e30:	4605      	mov	r5, r0
 8015e32:	460f      	mov	r7, r1
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d077      	beq.n	8015f28 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8015e38:	695c      	ldr	r4, [r3, #20]
 8015e3a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015e3e:	2b01      	cmp	r3, #1
 8015e40:	dc04      	bgt.n	8015e4c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8015e42:	2401      	movs	r4, #1
 8015e44:	4620      	mov	r0, r4
 8015e46:	b024      	add	sp, #144	@ 0x90
 8015e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e4c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8015e50:	ae24      	add	r6, sp, #144	@ 0x90
 8015e52:	011b      	lsls	r3, r3, #4
 8015e54:	f846 3d74 	str.w	r3, [r6, #-116]!
 8015e58:	4630      	mov	r0, r6
 8015e5a:	f7ff fe74 	bl	8015b46 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8015e5e:	8839      	ldrh	r1, [r7, #0]
 8015e60:	88ba      	ldrh	r2, [r7, #4]
 8015e62:	b280      	uxth	r0, r0
 8015e64:	6823      	ldr	r3, [r4, #0]
 8015e66:	440a      	add	r2, r1
 8015e68:	1a09      	subs	r1, r1, r0
 8015e6a:	4402      	add	r2, r0
 8015e6c:	f10d 000a 	add.w	r0, sp, #10
 8015e70:	b209      	sxth	r1, r1
 8015e72:	9000      	str	r0, [sp, #0]
 8015e74:	b212      	sxth	r2, r2
 8015e76:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	ab02      	add	r3, sp, #8
 8015e7e:	47c0      	blx	r8
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d0de      	beq.n	8015e42 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8015e84:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8015e88:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8015e8c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8015e90:	18ca      	adds	r2, r1, r3
 8015e92:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8015e96:	f8ad 100e 	strh.w	r1, [sp, #14]
 8015e9a:	4639      	mov	r1, r7
 8015e9c:	1a9b      	subs	r3, r3, r2
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015ea4:	a803      	add	r0, sp, #12
 8015ea6:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015eaa:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015eae:	f7fb ffdf 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8015eb2:	4629      	mov	r1, r5
 8015eb4:	a805      	add	r0, sp, #20
 8015eb6:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8015eb8:	f004 fda4 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015ebc:	682b      	ldr	r3, [r5, #0]
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ec2:	4798      	blx	r3
 8015ec4:	ab03      	add	r3, sp, #12
 8015ec6:	9000      	str	r0, [sp, #0]
 8015ec8:	aa05      	add	r2, sp, #20
 8015eca:	4639      	mov	r1, r7
 8015ecc:	4630      	mov	r0, r6
 8015ece:	f011 fb7f 	bl	80275d0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8015ed2:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8015ed6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8015eda:	2f00      	cmp	r7, #0
 8015edc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8015ee0:	dd03      	ble.n	8015eea <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8015ee2:	42bb      	cmp	r3, r7
 8015ee4:	da01      	bge.n	8015eea <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8015ee6:	42ba      	cmp	r2, r7
 8015ee8:	da11      	bge.n	8015f0e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8015eea:	9200      	str	r2, [sp, #0]
 8015eec:	4622      	mov	r2, r4
 8015eee:	4631      	mov	r1, r6
 8015ef0:	4628      	mov	r0, r5
 8015ef2:	f7ff ff0e 	bl	8015d12 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8015ef6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015efa:	4630      	mov	r0, r6
 8015efc:	f011 fbfc 	bl	80276f8 <_ZN8touchgfx6Canvas6renderEh>
 8015f00:	4b0b      	ldr	r3, [pc, #44]	@ (8015f30 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 8015f02:	4604      	mov	r4, r0
 8015f04:	a80c      	add	r0, sp, #48	@ 0x30
 8015f06:	9307      	str	r3, [sp, #28]
 8015f08:	f001 f8c8 	bl	801709c <_ZN8touchgfx7OutlineD1Ev>
 8015f0c:	e79a      	b.n	8015e44 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8015f0e:	1e7a      	subs	r2, r7, #1
 8015f10:	4631      	mov	r1, r6
 8015f12:	4628      	mov	r0, r5
 8015f14:	b212      	sxth	r2, r2
 8015f16:	9200      	str	r2, [sp, #0]
 8015f18:	4622      	mov	r2, r4
 8015f1a:	f7ff fefa 	bl	8015d12 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8015f1e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015f22:	9300      	str	r3, [sp, #0]
 8015f24:	463b      	mov	r3, r7
 8015f26:	e7e1      	b.n	8015eec <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015f28:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8015f2c:	deff      	udf	#255	@ 0xff
 8015f2e:	bf00      	nop
 8015f30:	0802d5ac 	.word	0x0802d5ac

08015f34 <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 8015f34:	b510      	push	{r4, lr}
 8015f36:	4604      	mov	r4, r0
 8015f38:	f7ff fc49 	bl	80157ce <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8015f3c:	4620      	mov	r0, r4
 8015f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f42:	f7ff ba1a 	b.w	801537a <_ZN8touchgfx17AbstractDataGraph5clearEv>

08015f46 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 8015f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f48:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8015f4c:	460f      	mov	r7, r1
 8015f4e:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 8015f52:	4604      	mov	r4, r0
 8015f54:	1c6b      	adds	r3, r5, #1
 8015f56:	4629      	mov	r1, r5
 8015f58:	f8a0 311e 	strh.w	r3, [r0, #286]	@ 0x11e
 8015f5c:	6803      	ldr	r3, [r0, #0]
 8015f5e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8015f62:	4798      	blx	r3
 8015f64:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8015f68:	b915      	cbnz	r5, 8015f70 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	f7ff fc2f 	bl	80157ce <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8015f70:	4620      	mov	r0, r4
 8015f72:	4629      	mov	r1, r5
 8015f74:	f7ff fc03 	bl	801577e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8015f78:	4628      	mov	r0, r5
 8015f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015f7c <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 8015f7c:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	@ 0x11e
 8015f80:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8015f84:	4291      	cmp	r1, r2
 8015f86:	db03      	blt.n	8015f90 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 8015f88:	6803      	ldr	r3, [r0, #0]
 8015f8a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8015f8e:	4718      	bx	r3
 8015f90:	4770      	bx	lr

08015f92 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8015f92:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8015f96:	4770      	bx	lr

08015f98 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8015f98:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8015f9c:	4770      	bx	lr

08015f9e <_ZN8touchgfx13ScalableImageD1Ev>:
 8015f9e:	4770      	bx	lr

08015fa0 <_ZN8touchgfx13ScalableImageD0Ev>:
 8015fa0:	b510      	push	{r4, lr}
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	212c      	movs	r1, #44	@ 0x2c
 8015fa6:	f011 ff93 	bl	8027ed0 <_ZdlPvj>
 8015faa:	4620      	mov	r0, r4
 8015fac:	bd10      	pop	{r4, pc}

08015fae <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8015fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fb0:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8015fb4:	b085      	sub	sp, #20
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	460d      	mov	r5, r1
 8015fba:	2bff      	cmp	r3, #255	@ 0xff
 8015fbc:	d128      	bne.n	8016010 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8015fbe:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 8015fc2:	4668      	mov	r0, sp
 8015fc4:	4631      	mov	r1, r6
 8015fc6:	f007 f9d1 	bl	801d36c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015fca:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8015fce:	4630      	mov	r0, r6
 8015fd0:	f007 f964 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015fd4:	4287      	cmp	r7, r0
 8015fd6:	d11b      	bne.n	8016010 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8015fd8:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8015fdc:	4630      	mov	r0, r6
 8015fde:	f007 f991 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015fe2:	4287      	cmp	r7, r0
 8015fe4:	d114      	bne.n	8016010 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8015fe6:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8015fea:	2100      	movs	r1, #0
 8015fec:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8015ff0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015ff4:	466b      	mov	r3, sp
 8015ff6:	9102      	str	r1, [sp, #8]
 8015ff8:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015ffc:	cb03      	ldmia	r3!, {r0, r1}
 8015ffe:	6020      	str	r0, [r4, #0]
 8016000:	4620      	mov	r0, r4
 8016002:	6061      	str	r1, [r4, #4]
 8016004:	4619      	mov	r1, r3
 8016006:	f7fb ff33 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801600a:	4620      	mov	r0, r4
 801600c:	b005      	add	sp, #20
 801600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016010:	2300      	movs	r3, #0
 8016012:	8023      	strh	r3, [r4, #0]
 8016014:	8063      	strh	r3, [r4, #2]
 8016016:	80a3      	strh	r3, [r4, #4]
 8016018:	80e3      	strh	r3, [r4, #6]
 801601a:	e7f6      	b.n	801600a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

0801601c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 801601c:	b538      	push	{r3, r4, r5, lr}
 801601e:	2300      	movs	r3, #0
 8016020:	2501      	movs	r5, #1
 8016022:	4604      	mov	r4, r0
 8016024:	8083      	strh	r3, [r0, #4]
 8016026:	80c3      	strh	r3, [r0, #6]
 8016028:	8103      	strh	r3, [r0, #8]
 801602a:	8143      	strh	r3, [r0, #10]
 801602c:	8183      	strh	r3, [r0, #12]
 801602e:	81c3      	strh	r3, [r0, #14]
 8016030:	8203      	strh	r3, [r0, #16]
 8016032:	8243      	strh	r3, [r0, #18]
 8016034:	61c3      	str	r3, [r0, #28]
 8016036:	8403      	strh	r3, [r0, #32]
 8016038:	8443      	strh	r3, [r0, #34]	@ 0x22
 801603a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 801603e:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 8016042:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8016046:	4b07      	ldr	r3, [pc, #28]	@ (8016064 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8016048:	6003      	str	r3, [r0, #0]
 801604a:	880b      	ldrh	r3, [r1, #0]
 801604c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801604e:	23ff      	movs	r3, #255	@ 0xff
 8016050:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8016054:	f000 febd 	bl	8016dd2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016058:	4b03      	ldr	r3, [pc, #12]	@ (8016068 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 801605a:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 801605e:	4620      	mov	r0, r4
 8016060:	6023      	str	r3, [r4, #0]
 8016062:	bd38      	pop	{r3, r4, r5, pc}
 8016064:	0802d15c 	.word	0x0802d15c
 8016068:	0802cf7c 	.word	0x0802cf7c

0801606c <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 801606c:	4603      	mov	r3, r0
 801606e:	3026      	adds	r0, #38	@ 0x26
 8016070:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8016074:	b90b      	cbnz	r3, 801607a <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8016076:	f005 b88d 	b.w	801b194 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801607a:	f005 b89b 	b.w	801b1b4 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08016080 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8016080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016084:	4604      	mov	r4, r0
 8016086:	b0b3      	sub	sp, #204	@ 0xcc
 8016088:	469b      	mov	fp, r3
 801608a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801608e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016092:	2500      	movs	r5, #0
 8016094:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8016098:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 801609c:	ab11      	add	r3, sp, #68	@ 0x44
 801609e:	9206      	str	r2, [sp, #24]
 80160a0:	4618      	mov	r0, r3
 80160a2:	9511      	str	r5, [sp, #68]	@ 0x44
 80160a4:	9307      	str	r3, [sp, #28]
 80160a6:	ad13      	add	r5, sp, #76	@ 0x4c
 80160a8:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 80160ac:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 80160b0:	f7fb fede 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 80160b4:	9b07      	ldr	r3, [sp, #28]
 80160b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80160ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80160be:	6821      	ldr	r1, [r4, #0]
 80160c0:	4620      	mov	r0, r4
 80160c2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80160c4:	4629      	mov	r1, r5
 80160c6:	47b0      	blx	r6
 80160c8:	4621      	mov	r1, r4
 80160ca:	a815      	add	r0, sp, #84	@ 0x54
 80160cc:	1d26      	adds	r6, r4, #4
 80160ce:	f004 fc99 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80160d2:	a815      	add	r0, sp, #84	@ 0x54
 80160d4:	f003 f9ca 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80160d8:	9b07      	ldr	r3, [sp, #28]
 80160da:	4631      	mov	r1, r6
 80160dc:	4618      	mov	r0, r3
 80160de:	f003 fa09 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80160e2:	4628      	mov	r0, r5
 80160e4:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 80160e8:	f003 f9c0 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80160ec:	4628      	mov	r0, r5
 80160ee:	f007 f9c7 	bl	801d480 <_ZNK8touchgfx6Bitmap7getDataEv>
 80160f2:	9007      	str	r0, [sp, #28]
 80160f4:	2800      	cmp	r0, #0
 80160f6:	f000 80ce 	beq.w	8016296 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 80160fa:	f8db 200c 	ldr.w	r2, [fp, #12]
 80160fe:	a809      	add	r0, sp, #36	@ 0x24
 8016100:	f8db 1000 	ldr.w	r1, [fp]
 8016104:	920c      	str	r2, [sp, #48]	@ 0x30
 8016106:	f8da 2000 	ldr.w	r2, [sl]
 801610a:	9109      	str	r1, [sp, #36]	@ 0x24
 801610c:	920d      	str	r2, [sp, #52]	@ 0x34
 801610e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8016112:	f8db 1004 	ldr.w	r1, [fp, #4]
 8016116:	920e      	str	r2, [sp, #56]	@ 0x38
 8016118:	f8da 2008 	ldr.w	r2, [sl, #8]
 801611c:	910a      	str	r1, [sp, #40]	@ 0x28
 801611e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016120:	f8db 1008 	ldr.w	r1, [fp, #8]
 8016124:	f8da 200c 	ldr.w	r2, [sl, #12]
 8016128:	910b      	str	r1, [sp, #44]	@ 0x2c
 801612a:	a90d      	add	r1, sp, #52	@ 0x34
 801612c:	9210      	str	r2, [sp, #64]	@ 0x40
 801612e:	4632      	mov	r2, r6
 8016130:	f003 f9c4 	bl	80194bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016134:	4632      	mov	r2, r6
 8016136:	a90e      	add	r1, sp, #56	@ 0x38
 8016138:	a80a      	add	r0, sp, #40	@ 0x28
 801613a:	f003 f9bf 	bl	80194bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801613e:	4632      	mov	r2, r6
 8016140:	a90f      	add	r1, sp, #60	@ 0x3c
 8016142:	a80b      	add	r0, sp, #44	@ 0x2c
 8016144:	f003 f9ba 	bl	80194bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016148:	4632      	mov	r2, r6
 801614a:	a910      	add	r1, sp, #64	@ 0x40
 801614c:	a80c      	add	r0, sp, #48	@ 0x30
 801614e:	f003 f9b5 	bl	80194bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8016152:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8016156:	ed97 3a00 	vldr	s6, [r7]
 801615a:	eef0 6a67 	vmov.f32	s13, s15
 801615e:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8016162:	edd7 4a01 	vldr	s9, [r7, #4]
 8016166:	eeb0 7a67 	vmov.f32	s14, s15
 801616a:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 801616e:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8016172:	ed99 2a00 	vldr	s4, [r9]
 8016176:	eeb0 6a67 	vmov.f32	s12, s15
 801617a:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 801617e:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8016182:	edd8 2a00 	vldr	s5, [r8]
 8016186:	edd9 3a01 	vldr	s7, [r9, #4]
 801618a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801618e:	ed98 4a01 	vldr	s8, [r8, #4]
 8016192:	ed99 5a02 	vldr	s10, [r9, #8]
 8016196:	edd8 5a02 	vldr	s11, [r8, #8]
 801619a:	ee16 6a10 	vmov	r6, s12
 801619e:	eeb0 6a67 	vmov.f32	s12, s15
 80161a2:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80161a6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80161aa:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80161ae:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80161b2:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 80161b6:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 80161ba:	ee16 0a10 	vmov	r0, s12
 80161be:	eeb0 6a67 	vmov.f32	s12, s15
 80161c2:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80161c6:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 80161ca:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80161ce:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 80161d2:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 80161d6:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 80161da:	ee16 1a10 	vmov	r1, s12
 80161de:	eeb0 6a67 	vmov.f32	s12, s15
 80161e2:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 80161e6:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 80161ea:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80161ee:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 80161f2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80161f6:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80161fa:	68ff      	ldr	r7, [r7, #12]
 80161fc:	ee16 2a10 	vmov	r2, s12
 8016200:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8016204:	9624      	str	r6, [sp, #144]	@ 0x90
 8016206:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801620a:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 801620e:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8016212:	4628      	mov	r0, r5
 8016214:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 8016218:	9b06      	ldr	r3, [sp, #24]
 801621a:	922d      	str	r2, [sp, #180]	@ 0xb4
 801621c:	4a1f      	ldr	r2, [pc, #124]	@ (801629c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 801621e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8016220:	8812      	ldrh	r2, [r2, #0]
 8016222:	9b07      	ldr	r3, [sp, #28]
 8016224:	9218      	str	r2, [sp, #96]	@ 0x60
 8016226:	9319      	str	r3, [sp, #100]	@ 0x64
 8016228:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 801622c:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8016230:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8016234:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8016238:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 801623c:	9731      	str	r7, [sp, #196]	@ 0xc4
 801623e:	f007 f94f 	bl	801d4e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8016242:	901a      	str	r0, [sp, #104]	@ 0x68
 8016244:	4628      	mov	r0, r5
 8016246:	f007 f829 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801624a:	901b      	str	r0, [sp, #108]	@ 0x6c
 801624c:	4628      	mov	r0, r5
 801624e:	f007 f859 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016252:	901c      	str	r0, [sp, #112]	@ 0x70
 8016254:	4628      	mov	r0, r5
 8016256:	f007 f821 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801625a:	4b11      	ldr	r3, [pc, #68]	@ (80162a0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 801625c:	901d      	str	r0, [sp, #116]	@ 0x74
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016264:	b10a      	cbz	r2, 801626a <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 8016266:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8016268:	b905      	cbnz	r5, 801626c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 801626a:	689d      	ldr	r5, [r3, #8]
 801626c:	682b      	ldr	r3, [r5, #0]
 801626e:	4620      	mov	r0, r4
 8016270:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8016272:	f7ff fefb 	bl	801606c <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8016276:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801627a:	aa1e      	add	r2, sp, #120	@ 0x78
 801627c:	a917      	add	r1, sp, #92	@ 0x5c
 801627e:	9304      	str	r3, [sp, #16]
 8016280:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8016284:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016288:	ab13      	add	r3, sp, #76	@ 0x4c
 801628a:	4628      	mov	r0, r5
 801628c:	9301      	str	r3, [sp, #4]
 801628e:	ab15      	add	r3, sp, #84	@ 0x54
 8016290:	9300      	str	r3, [sp, #0]
 8016292:	ab19      	add	r3, sp, #100	@ 0x64
 8016294:	47b0      	blx	r6
 8016296:	b033      	add	sp, #204	@ 0xcc
 8016298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629c:	240284e2 	.word	0x240284e2
 80162a0:	240284e8 	.word	0x240284e8

080162a4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 80162a4:	b570      	push	{r4, r5, r6, lr}
 80162a6:	ed2d 8b04 	vpush	{d8-d9}
 80162aa:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80162ae:	b098      	sub	sp, #96	@ 0x60
 80162b0:	4604      	mov	r4, r0
 80162b2:	460e      	mov	r6, r1
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d065      	beq.n	8016384 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 80162b8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80162bc:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80162c0:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 80163a0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 80162c4:	ee09 3a10 	vmov	s18, r3
 80162c8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80162cc:	4628      	mov	r0, r5
 80162ce:	ee08 3a90 	vmov	s17, r3
 80162d2:	4b34      	ldr	r3, [pc, #208]	@ (80163a4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 80162d4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80162d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80162da:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80162de:	930d      	str	r3, [sp, #52]	@ 0x34
 80162e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80162e2:	ee39 9a08 	vadd.f32	s18, s18, s16
 80162e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80162e8:	f006 ffd8 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80162ec:	ee07 0a90 	vmov	s15, r0
 80162f0:	4628      	mov	r0, r5
 80162f2:	ee78 8a88 	vadd.f32	s17, s17, s16
 80162f6:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80162fa:	f007 f803 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80162fe:	4b2a      	ldr	r3, [pc, #168]	@ (80163a8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8016300:	ee07 0a90 	vmov	s15, r0
 8016304:	781b      	ldrb	r3, [r3, #0]
 8016306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801630a:	eef0 7a48 	vmov.f32	s15, s16
 801630e:	2b01      	cmp	r3, #1
 8016310:	d13c      	bne.n	801638c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8016312:	eef0 6a69 	vmov.f32	s13, s19
 8016316:	ee19 3a90 	vmov	r3, s19
 801631a:	eeb0 6a47 	vmov.f32	s12, s14
 801631e:	eef0 5a47 	vmov.f32	s11, s14
 8016322:	eef0 9a48 	vmov.f32	s19, s16
 8016326:	eeb0 7a48 	vmov.f32	s14, s16
 801632a:	9314      	str	r3, [sp, #80]	@ 0x50
 801632c:	ab14      	add	r3, sp, #80	@ 0x50
 801632e:	2200      	movs	r2, #0
 8016330:	4631      	mov	r1, r6
 8016332:	9303      	str	r3, [sp, #12]
 8016334:	ab10      	add	r3, sp, #64	@ 0x40
 8016336:	4620      	mov	r0, r4
 8016338:	edcd 7a04 	vstr	s15, [sp, #16]
 801633c:	9302      	str	r3, [sp, #8]
 801633e:	ab0c      	add	r3, sp, #48	@ 0x30
 8016340:	ed8d 9a05 	vstr	s18, [sp, #20]
 8016344:	9301      	str	r3, [sp, #4]
 8016346:	ab08      	add	r3, sp, #32
 8016348:	ed8d 9a06 	vstr	s18, [sp, #24]
 801634c:	9300      	str	r3, [sp, #0]
 801634e:	ab04      	add	r3, sp, #16
 8016350:	edcd 7a07 	vstr	s15, [sp, #28]
 8016354:	edcd 7a08 	vstr	s15, [sp, #32]
 8016358:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 801635c:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 8016360:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 8016364:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8016368:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 801636c:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8016370:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8016374:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8016378:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 801637c:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 8016380:	f7ff fe7e 	bl	8016080 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8016384:	b018      	add	sp, #96	@ 0x60
 8016386:	ecbd 8b04 	vpop	{d8-d9}
 801638a:	bd70      	pop	{r4, r5, r6, pc}
 801638c:	eef0 6a47 	vmov.f32	s13, s14
 8016390:	ee18 3a10 	vmov	r3, s16
 8016394:	eef0 5a69 	vmov.f32	s11, s19
 8016398:	eeb0 6a48 	vmov.f32	s12, s16
 801639c:	e7c5      	b.n	801632a <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801639e:	bf00      	nop
 80163a0:	00000000 	.word	0x00000000
 80163a4:	42c80000 	.word	0x42c80000
 80163a8:	240284e0 	.word	0x240284e0

080163ac <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80163ac:	2000      	movs	r0, #0
 80163ae:	4770      	bx	lr

080163b0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80163b0:	4b07      	ldr	r3, [pc, #28]	@ (80163d0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80163b2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80163b4:	881b      	ldrh	r3, [r3, #0]
 80163b6:	4293      	cmp	r3, r2
 80163b8:	bf81      	itttt	hi
 80163ba:	4b06      	ldrhi	r3, [pc, #24]	@ (80163d4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80163bc:	681b      	ldrhi	r3, [r3, #0]
 80163be:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80163c2:	7858      	ldrbhi	r0, [r3, #1]
 80163c4:	bf8c      	ite	hi
 80163c6:	f000 0003 	andhi.w	r0, r0, #3
 80163ca:	2000      	movls	r0, #0
 80163cc:	4770      	bx	lr
 80163ce:	bf00      	nop
 80163d0:	24028544 	.word	0x24028544
 80163d4:	24028540 	.word	0x24028540

080163d8 <_ZN8touchgfx8TextAreaD1Ev>:
 80163d8:	4770      	bx	lr
	...

080163dc <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80163dc:	4b11      	ldr	r3, [pc, #68]	@ (8016424 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80163de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163e2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80163e4:	4604      	mov	r4, r0
 80163e6:	881b      	ldrh	r3, [r3, #0]
 80163e8:	428b      	cmp	r3, r1
 80163ea:	d918      	bls.n	801641e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80163ec:	6803      	ldr	r3, [r0, #0]
 80163ee:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 80163f0:	4b0d      	ldr	r3, [pc, #52]	@ (8016428 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80163f2:	6818      	ldr	r0, [r3, #0]
 80163f4:	f7f2 f81e 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	4606      	mov	r6, r0
 80163fc:	4620      	mov	r0, r4
 80163fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016400:	4798      	blx	r3
 8016402:	6823      	ldr	r3, [r4, #0]
 8016404:	4607      	mov	r7, r0
 8016406:	4620      	mov	r0, r4
 8016408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801640c:	4798      	blx	r3
 801640e:	463a      	mov	r2, r7
 8016410:	4603      	mov	r3, r0
 8016412:	4631      	mov	r1, r6
 8016414:	4620      	mov	r0, r4
 8016416:	46ac      	mov	ip, r5
 8016418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801641c:	4760      	bx	ip
 801641e:	2000      	movs	r0, #0
 8016420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016424:	24028544 	.word	0x24028544
 8016428:	2402854c 	.word	0x2402854c

0801642c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801642c:	4b18      	ldr	r3, [pc, #96]	@ (8016490 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801642e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016432:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8016434:	4604      	mov	r4, r0
 8016436:	881b      	ldrh	r3, [r3, #0]
 8016438:	428b      	cmp	r3, r1
 801643a:	d926      	bls.n	801648a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801643c:	4b15      	ldr	r3, [pc, #84]	@ (8016494 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016444:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016448:	4b13      	ldr	r3, [pc, #76]	@ (8016498 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801644a:	7855      	ldrb	r5, [r2, #1]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8016452:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8016456:	6833      	ldr	r3, [r6, #0]
 8016458:	69df      	ldr	r7, [r3, #28]
 801645a:	4b10      	ldr	r3, [pc, #64]	@ (801649c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801645c:	6818      	ldr	r0, [r3, #0]
 801645e:	f7f1 ffe9 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 8016462:	6823      	ldr	r3, [r4, #0]
 8016464:	4680      	mov	r8, r0
 8016466:	4620      	mov	r0, r4
 8016468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801646a:	4798      	blx	r3
 801646c:	6823      	ldr	r3, [r4, #0]
 801646e:	4681      	mov	r9, r0
 8016470:	4620      	mov	r0, r4
 8016472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016476:	4798      	blx	r3
 8016478:	464b      	mov	r3, r9
 801647a:	9000      	str	r0, [sp, #0]
 801647c:	4642      	mov	r2, r8
 801647e:	4629      	mov	r1, r5
 8016480:	4630      	mov	r0, r6
 8016482:	47b8      	blx	r7
 8016484:	b003      	add	sp, #12
 8016486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801648a:	2000      	movs	r0, #0
 801648c:	e7fa      	b.n	8016484 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801648e:	bf00      	nop
 8016490:	24028544 	.word	0x24028544
 8016494:	24028540 	.word	0x24028540
 8016498:	24028548 	.word	0x24028548
 801649c:	2402854c 	.word	0x2402854c

080164a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80164a0:	b40e      	push	{r1, r2, r3}
 80164a2:	4b30      	ldr	r3, [pc, #192]	@ (8016564 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80164a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164a8:	881a      	ldrh	r2, [r3, #0]
 80164aa:	b09d      	sub	sp, #116	@ 0x74
 80164ac:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80164ae:	4604      	mov	r4, r0
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d954      	bls.n	801655e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80164b4:	aa26      	add	r2, sp, #152	@ 0x98
 80164b6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8016568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80164ba:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 801656c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80164be:	9202      	str	r2, [sp, #8]
 80164c0:	f8d9 2000 	ldr.w	r2, [r9]
 80164c4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80164c8:	f8d8 3000 	ldr.w	r3, [r8]
 80164cc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80164d0:	682b      	ldr	r3, [r5, #0]
 80164d2:	4628      	mov	r0, r5
 80164d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164d6:	4798      	blx	r3
 80164d8:	4606      	mov	r6, r0
 80164da:	b207      	sxth	r7, r0
 80164dc:	a803      	add	r0, sp, #12
 80164de:	f005 fa82 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 80164e2:	682b      	ldr	r3, [r5, #0]
 80164e4:	4628      	mov	r0, r5
 80164e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80164e8:	4798      	blx	r3
 80164ea:	682b      	ldr	r3, [r5, #0]
 80164ec:	4682      	mov	sl, r0
 80164ee:	4628      	mov	r0, r5
 80164f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80164f2:	4798      	blx	r3
 80164f4:	4653      	mov	r3, sl
 80164f6:	9000      	str	r0, [sp, #0]
 80164f8:	a803      	add	r0, sp, #12
 80164fa:	9a02      	ldr	r2, [sp, #8]
 80164fc:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80164fe:	f005 facd 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016502:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8016504:	f8d9 3000 	ldr.w	r3, [r9]
 8016508:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 801650c:	8925      	ldrh	r5, [r4, #8]
 801650e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8016512:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016516:	eba5 050c 	sub.w	r5, r5, ip
 801651a:	784a      	ldrb	r2, [r1, #1]
 801651c:	f8d8 3000 	ldr.w	r3, [r8]
 8016520:	b22d      	sxth	r5, r5
 8016522:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8016526:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801652a:	9500      	str	r5, [sp, #0]
 801652c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016530:	a803      	add	r0, sp, #12
 8016532:	f002 fca1 	bl	8018e78 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016536:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 801653a:	b203      	sxth	r3, r0
 801653c:	18b9      	adds	r1, r7, r2
 801653e:	2900      	cmp	r1, #0
 8016540:	dd0b      	ble.n	801655a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8016542:	3b01      	subs	r3, #1
 8016544:	fb13 f302 	smulbb	r3, r3, r2
 8016548:	fb16 3300 	smlabb	r3, r6, r0, r3
 801654c:	b21f      	sxth	r7, r3
 801654e:	4638      	mov	r0, r7
 8016550:	b01d      	add	sp, #116	@ 0x74
 8016552:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016556:	b003      	add	sp, #12
 8016558:	4770      	bx	lr
 801655a:	2b00      	cmp	r3, #0
 801655c:	dcf7      	bgt.n	801654e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801655e:	2700      	movs	r7, #0
 8016560:	e7f5      	b.n	801654e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8016562:	bf00      	nop
 8016564:	24028544 	.word	0x24028544
 8016568:	24028540 	.word	0x24028540
 801656c:	24028548 	.word	0x24028548

08016570 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8016570:	4bbd      	ldr	r3, [pc, #756]	@ (8016868 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8016572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016576:	460c      	mov	r4, r1
 8016578:	881b      	ldrh	r3, [r3, #0]
 801657a:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 801657c:	b0a9      	sub	sp, #164	@ 0xa4
 801657e:	4680      	mov	r8, r0
 8016580:	428b      	cmp	r3, r1
 8016582:	d809      	bhi.n	8016598 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8016584:	2300      	movs	r3, #0
 8016586:	f04f 32ff 	mov.w	r2, #4294967295
 801658a:	6083      	str	r3, [r0, #8]
 801658c:	e9c0 3200 	strd	r3, r2, [r0]
 8016590:	4640      	mov	r0, r8
 8016592:	b029      	add	sp, #164	@ 0xa4
 8016594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016598:	4eb4      	ldr	r6, [pc, #720]	@ (801686c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801659a:	6833      	ldr	r3, [r6, #0]
 801659c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80165a0:	4bb3      	ldr	r3, [pc, #716]	@ (8016870 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80165a8:	4bb2      	ldr	r3, [pc, #712]	@ (8016874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80165aa:	6818      	ldr	r0, [r3, #0]
 80165ac:	f7f1 ff42 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 80165b0:	682b      	ldr	r3, [r5, #0]
 80165b2:	4681      	mov	r9, r0
 80165b4:	4628      	mov	r0, r5
 80165b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165b8:	4798      	blx	r3
 80165ba:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 80165bc:	b203      	sxth	r3, r0
 80165be:	4682      	mov	sl, r0
 80165c0:	4407      	add	r7, r0
 80165c2:	a80f      	add	r0, sp, #60	@ 0x3c
 80165c4:	9304      	str	r3, [sp, #16]
 80165c6:	b2bb      	uxth	r3, r7
 80165c8:	9303      	str	r3, [sp, #12]
 80165ca:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	f040 80a5 	bne.w	801671e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80165d4:	f005 fa07 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 80165d8:	682b      	ldr	r3, [r5, #0]
 80165da:	4628      	mov	r0, r5
 80165dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80165de:	4798      	blx	r3
 80165e0:	682b      	ldr	r3, [r5, #0]
 80165e2:	4606      	mov	r6, r0
 80165e4:	4628      	mov	r0, r5
 80165e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80165e8:	4798      	blx	r3
 80165ea:	6823      	ldr	r3, [r4, #0]
 80165ec:	4607      	mov	r7, r0
 80165ee:	4620      	mov	r0, r4
 80165f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80165f2:	4798      	blx	r3
 80165f4:	6823      	ldr	r3, [r4, #0]
 80165f6:	4683      	mov	fp, r0
 80165f8:	4620      	mov	r0, r4
 80165fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80165fe:	4798      	blx	r3
 8016600:	463b      	mov	r3, r7
 8016602:	4649      	mov	r1, r9
 8016604:	4632      	mov	r2, r6
 8016606:	2600      	movs	r6, #0
 8016608:	e9cd b000 	strd	fp, r0, [sp]
 801660c:	a80f      	add	r0, sp, #60	@ 0x3c
 801660e:	4637      	mov	r7, r6
 8016610:	f005 fa59 	bl	801bac6 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8016614:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016618:	f8df b250 	ldr.w	fp, [pc, #592]	@ 801686c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801661c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016620:	bf0c      	ite	eq
 8016622:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8016626:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801662a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801662c:	4629      	mov	r1, r5
 801662e:	f8db 3000 	ldr.w	r3, [fp]
 8016632:	a80f      	add	r0, sp, #60	@ 0x3c
 8016634:	3701      	adds	r7, #1
 8016636:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801663a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801663e:	b2bf      	uxth	r7, r7
 8016640:	785b      	ldrb	r3, [r3, #1]
 8016642:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016646:	f002 f91e 	bl	8018886 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801664a:	9b03      	ldr	r3, [sp, #12]
 801664c:	4286      	cmp	r6, r0
 801664e:	eba9 0903 	sub.w	r9, r9, r3
 8016652:	bfb8      	it	lt
 8016654:	4606      	movlt	r6, r0
 8016656:	a80f      	add	r0, sp, #60	@ 0x3c
 8016658:	fa0f f989 	sxth.w	r9, r9
 801665c:	b236      	sxth	r6, r6
 801665e:	f005 f9e9 	bl	801ba34 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8016662:	b918      	cbnz	r0, 801666c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016664:	7a2b      	ldrb	r3, [r5, #8]
 8016666:	444b      	add	r3, r9
 8016668:	2b00      	cmp	r3, #0
 801666a:	dcde      	bgt.n	801662a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 801666c:	9b03      	ldr	r3, [sp, #12]
 801666e:	4620      	mov	r0, r4
 8016670:	9a04      	ldr	r2, [sp, #16]
 8016672:	fb13 f707 	smulbb	r7, r3, r7
 8016676:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016678:	f895 9009 	ldrb.w	r9, [r5, #9]
 801667c:	1aff      	subs	r7, r7, r3
 801667e:	b2bf      	uxth	r7, r7
 8016680:	b23b      	sxth	r3, r7
 8016682:	429a      	cmp	r2, r3
 8016684:	bfa8      	it	ge
 8016686:	4657      	movge	r7, sl
 8016688:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801668c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016690:	6823      	ldr	r3, [r4, #0]
 8016692:	444f      	add	r7, r9
 8016694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016696:	bf08      	it	eq
 8016698:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801669c:	fa1f f987 	uxth.w	r9, r7
 80166a0:	bf18      	it	ne
 80166a2:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 80166a6:	4798      	blx	r3
 80166a8:	2801      	cmp	r0, #1
 80166aa:	fa0f f789 	sxth.w	r7, r9
 80166ae:	b2b3      	uxth	r3, r6
 80166b0:	f000 80e2 	beq.w	8016878 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80166b4:	2802      	cmp	r0, #2
 80166b6:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 80166ba:	f000 80e3 	beq.w	8016884 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80166be:	7aea      	ldrb	r2, [r5, #11]
 80166c0:	b236      	sxth	r6, r6
 80166c2:	7b2d      	ldrb	r5, [r5, #12]
 80166c4:	1ab6      	subs	r6, r6, r2
 80166c6:	442a      	add	r2, r5
 80166c8:	fa1f fa86 	uxth.w	sl, r6
 80166cc:	4413      	add	r3, r2
 80166ce:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80166d2:	fa0f fb8a 	sxth.w	fp, sl
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	2a02      	cmp	r2, #2
 80166da:	b21e      	sxth	r6, r3
 80166dc:	f000 80d6 	beq.w	801688c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80166e0:	2a03      	cmp	r2, #3
 80166e2:	f000 80de 	beq.w	80168a2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80166e6:	2a01      	cmp	r2, #1
 80166e8:	f040 80e6 	bne.w	80168b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80166ec:	8925      	ldrh	r5, [r4, #8]
 80166ee:	4633      	mov	r3, r6
 80166f0:	463e      	mov	r6, r7
 80166f2:	eba5 0909 	sub.w	r9, r5, r9
 80166f6:	461f      	mov	r7, r3
 80166f8:	465d      	mov	r5, fp
 80166fa:	fa0f fb89 	sxth.w	fp, r9
 80166fe:	4b5d      	ldr	r3, [pc, #372]	@ (8016874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8016700:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016702:	6818      	ldr	r0, [r3, #0]
 8016704:	f7f1 fe96 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 8016708:	f8a8 b000 	strh.w	fp, [r8]
 801670c:	f8a8 5002 	strh.w	r5, [r8, #2]
 8016710:	f8a8 6004 	strh.w	r6, [r8, #4]
 8016714:	f8a8 7006 	strh.w	r7, [r8, #6]
 8016718:	f8c8 0008 	str.w	r0, [r8, #8]
 801671c:	e738      	b.n	8016590 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801671e:	f005 f962 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 8016722:	682b      	ldr	r3, [r5, #0]
 8016724:	4628      	mov	r0, r5
 8016726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016728:	4798      	blx	r3
 801672a:	682b      	ldr	r3, [r5, #0]
 801672c:	4607      	mov	r7, r0
 801672e:	4628      	mov	r0, r5
 8016730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016732:	4798      	blx	r3
 8016734:	6823      	ldr	r3, [r4, #0]
 8016736:	4683      	mov	fp, r0
 8016738:	4620      	mov	r0, r4
 801673a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801673c:	4798      	blx	r3
 801673e:	6822      	ldr	r2, [r4, #0]
 8016740:	9005      	str	r0, [sp, #20]
 8016742:	4620      	mov	r0, r4
 8016744:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8016748:	4790      	blx	r2
 801674a:	9b05      	ldr	r3, [sp, #20]
 801674c:	463a      	mov	r2, r7
 801674e:	4649      	mov	r1, r9
 8016750:	9001      	str	r0, [sp, #4]
 8016752:	a80f      	add	r0, sp, #60	@ 0x3c
 8016754:	9300      	str	r3, [sp, #0]
 8016756:	465b      	mov	r3, fp
 8016758:	f005 f9b5 	bl	801bac6 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801675c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016760:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8016764:	af0f      	add	r7, sp, #60	@ 0x3c
 8016766:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801676a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801676e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016770:	bf0a      	itet	eq
 8016772:	464a      	moveq	r2, r9
 8016774:	461a      	movne	r2, r3
 8016776:	4699      	moveq	r9, r3
 8016778:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 801677c:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8016780:	1ad2      	subs	r2, r2, r3
 8016782:	6833      	ldr	r3, [r6, #0]
 8016784:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8016788:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801678c:	7859      	ldrb	r1, [r3, #1]
 801678e:	2300      	movs	r3, #0
 8016790:	9707      	str	r7, [sp, #28]
 8016792:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8016796:	f8ad 3018 	strh.w	r3, [sp, #24]
 801679a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801679e:	f88d 1020 	strb.w	r1, [sp, #32]
 80167a2:	9509      	str	r5, [sp, #36]	@ 0x24
 80167a4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80167a8:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 80167ac:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 80167b0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80167b4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80167b8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80167bc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80167c0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80167c4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80167c8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80167cc:	b350      	cbz	r0, 8016824 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80167ce:	682b      	ldr	r3, [r5, #0]
 80167d0:	4628      	mov	r0, r5
 80167d2:	695b      	ldr	r3, [r3, #20]
 80167d4:	4798      	blx	r3
 80167d6:	4607      	mov	r7, r0
 80167d8:	b320      	cbz	r0, 8016824 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80167da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80167dc:	4639      	mov	r1, r7
 80167de:	6803      	ldr	r3, [r0, #0]
 80167e0:	68db      	ldr	r3, [r3, #12]
 80167e2:	4798      	blx	r3
 80167e4:	4606      	mov	r6, r0
 80167e6:	b1e8      	cbz	r0, 8016824 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80167e8:	7b43      	ldrb	r3, [r0, #13]
 80167ea:	7a82      	ldrb	r2, [r0, #10]
 80167ec:	005b      	lsls	r3, r3, #1
 80167ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80167f2:	4313      	orrs	r3, r2
 80167f4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80167f8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80167fc:	2b06      	cmp	r3, #6
 80167fe:	d111      	bne.n	8016824 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8016800:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016802:	4632      	mov	r2, r6
 8016804:	4639      	mov	r1, r7
 8016806:	6803      	ldr	r3, [r0, #0]
 8016808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801680a:	4798      	blx	r3
 801680c:	7b73      	ldrb	r3, [r6, #13]
 801680e:	005b      	lsls	r3, r3, #1
 8016810:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016814:	7ab3      	ldrb	r3, [r6, #10]
 8016816:	4313      	orrs	r3, r2
 8016818:	4418      	add	r0, r3
 801681a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801681e:	4418      	add	r0, r3
 8016820:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8016824:	2600      	movs	r6, #0
 8016826:	4637      	mov	r7, r6
 8016828:	a806      	add	r0, sp, #24
 801682a:	3701      	adds	r7, #1
 801682c:	f002 fa21 	bl	8018c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016830:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8016834:	9b03      	ldr	r3, [sp, #12]
 8016836:	b2bf      	uxth	r7, r7
 8016838:	4286      	cmp	r6, r0
 801683a:	eba9 0903 	sub.w	r9, r9, r3
 801683e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016842:	bfb8      	it	lt
 8016844:	4606      	movlt	r6, r0
 8016846:	fa0f f989 	sxth.w	r9, r9
 801684a:	b236      	sxth	r6, r6
 801684c:	2b00      	cmp	r3, #0
 801684e:	f43f af0d 	beq.w	801666c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016852:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8016856:	2b00      	cmp	r3, #0
 8016858:	f47f af08 	bne.w	801666c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801685c:	7a2b      	ldrb	r3, [r5, #8]
 801685e:	444b      	add	r3, r9
 8016860:	2b00      	cmp	r3, #0
 8016862:	dce1      	bgt.n	8016828 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8016864:	e702      	b.n	801666c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016866:	bf00      	nop
 8016868:	24028544 	.word	0x24028544
 801686c:	24028540 	.word	0x24028540
 8016870:	24028548 	.word	0x24028548
 8016874:	2402854c 	.word	0x2402854c
 8016878:	ebaa 0606 	sub.w	r6, sl, r6
 801687c:	2002      	movs	r0, #2
 801687e:	fb96 f6f0 	sdiv	r6, r6, r0
 8016882:	e71c      	b.n	80166be <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8016884:	441e      	add	r6, r3
 8016886:	ebaa 0606 	sub.w	r6, sl, r6
 801688a:	e718      	b.n	80166be <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801688c:	8925      	ldrh	r5, [r4, #8]
 801688e:	1aed      	subs	r5, r5, r3
 8016890:	eba5 050a 	sub.w	r5, r5, sl
 8016894:	fa0f fb85 	sxth.w	fp, r5
 8016898:	8965      	ldrh	r5, [r4, #10]
 801689a:	eba5 0509 	sub.w	r5, r5, r9
 801689e:	b22d      	sxth	r5, r5
 80168a0:	e72d      	b.n	80166fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80168a2:	8965      	ldrh	r5, [r4, #10]
 80168a4:	f04f 0b00 	mov.w	fp, #0
 80168a8:	1aed      	subs	r5, r5, r3
 80168aa:	4633      	mov	r3, r6
 80168ac:	463e      	mov	r6, r7
 80168ae:	eba5 050a 	sub.w	r5, r5, sl
 80168b2:	461f      	mov	r7, r3
 80168b4:	b22d      	sxth	r5, r5
 80168b6:	e722      	b.n	80166fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80168b8:	2500      	movs	r5, #0
 80168ba:	e720      	b.n	80166fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

080168bc <_ZN8touchgfx8TextAreaD0Ev>:
 80168bc:	b510      	push	{r4, lr}
 80168be:	4604      	mov	r4, r0
 80168c0:	2148      	movs	r1, #72	@ 0x48
 80168c2:	f011 fb05 	bl	8027ed0 <_ZdlPvj>
 80168c6:	4620      	mov	r0, r4
 80168c8:	bd10      	pop	{r4, pc}
	...

080168cc <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80168cc:	b513      	push	{r0, r1, r4, lr}
 80168ce:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80168d2:	4604      	mov	r4, r0
 80168d4:	b1fb      	cbz	r3, 8016916 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80168d6:	4b16      	ldr	r3, [pc, #88]	@ (8016930 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80168d8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80168da:	881b      	ldrh	r3, [r3, #0]
 80168dc:	428b      	cmp	r3, r1
 80168de:	d91a      	bls.n	8016916 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80168e0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	dd16      	ble.n	8016916 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80168e8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	dd12      	ble.n	8016916 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80168f0:	4b10      	ldr	r3, [pc, #64]	@ (8016934 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80168f2:	6818      	ldr	r0, [r3, #0]
 80168f4:	f7f1 fd9e 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 80168f8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80168fc:	6822      	ldr	r2, [r4, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	db06      	blt.n	8016910 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8016902:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016906:	2b00      	cmp	r3, #0
 8016908:	db02      	blt.n	8016910 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801690a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801690c:	4298      	cmp	r0, r3
 801690e:	d004      	beq.n	801691a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8016910:	6953      	ldr	r3, [r2, #20]
 8016912:	4620      	mov	r0, r4
 8016914:	4798      	blx	r3
 8016916:	b002      	add	sp, #8
 8016918:	bd10      	pop	{r4, pc}
 801691a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 801691e:	466b      	mov	r3, sp
 8016920:	6912      	ldr	r2, [r2, #16]
 8016922:	c903      	ldmia	r1, {r0, r1}
 8016924:	e883 0003 	stmia.w	r3, {r0, r1}
 8016928:	4619      	mov	r1, r3
 801692a:	4620      	mov	r0, r4
 801692c:	4790      	blx	r2
 801692e:	e7f2      	b.n	8016916 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016930:	24028544 	.word	0x24028544
 8016934:	2402854c 	.word	0x2402854c

08016938 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016938:	4b45      	ldr	r3, [pc, #276]	@ (8016a50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801693a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801693e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016940:	b08e      	sub	sp, #56	@ 0x38
 8016942:	881b      	ldrh	r3, [r3, #0]
 8016944:	4604      	mov	r4, r0
 8016946:	4293      	cmp	r3, r2
 8016948:	d97e      	bls.n	8016a48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801694a:	6808      	ldr	r0, [r1, #0]
 801694c:	ab05      	add	r3, sp, #20
 801694e:	6849      	ldr	r1, [r1, #4]
 8016950:	4d40      	ldr	r5, [pc, #256]	@ (8016a54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8016952:	c303      	stmia	r3!, {r0, r1}
 8016954:	4611      	mov	r1, r2
 8016956:	6828      	ldr	r0, [r5, #0]
 8016958:	f7f1 fd6c 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 801695c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8016960:	2b00      	cmp	r3, #0
 8016962:	db11      	blt.n	8016988 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016964:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016968:	2b00      	cmp	r3, #0
 801696a:	db0d      	blt.n	8016988 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801696c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801696e:	4298      	cmp	r0, r3
 8016970:	d10a      	bne.n	8016988 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016972:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8016976:	ab09      	add	r3, sp, #36	@ 0x24
 8016978:	e892 0003 	ldmia.w	r2, {r0, r1}
 801697c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016980:	4619      	mov	r1, r3
 8016982:	a805      	add	r0, sp, #20
 8016984:	f7fb fa74 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8016988:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801698c:	2b00      	cmp	r3, #0
 801698e:	dd5b      	ble.n	8016a48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016990:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8016994:	2b00      	cmp	r3, #0
 8016996:	dd57      	ble.n	8016a48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016998:	4f2f      	ldr	r7, [pc, #188]	@ (8016a58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801699a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801699c:	683b      	ldr	r3, [r7, #0]
 801699e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80169a2:	4b2e      	ldr	r3, [pc, #184]	@ (8016a5c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80169aa:	2e00      	cmp	r6, #0
 80169ac:	d04c      	beq.n	8016a48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80169ae:	6823      	ldr	r3, [r4, #0]
 80169b0:	4620      	mov	r0, r4
 80169b2:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 80169b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80169b8:	4798      	blx	r3
 80169ba:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 80169c2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80169c6:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 80169ca:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80169ce:	785b      	ldrb	r3, [r3, #1]
 80169d0:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80169d4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80169d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80169da:	9609      	str	r6, [sp, #36]	@ 0x24
 80169dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80169e0:	4b1f      	ldr	r3, [pc, #124]	@ (8016a60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80169e2:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80169ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80169ee:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80169f2:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80169f6:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80169fa:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80169fe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016a02:	b10a      	cbz	r2, 8016a08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8016a04:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8016a06:	b906      	cbnz	r6, 8016a0a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8016a08:	689e      	ldr	r6, [r3, #8]
 8016a0a:	af07      	add	r7, sp, #28
 8016a0c:	4621      	mov	r1, r4
 8016a0e:	4638      	mov	r0, r7
 8016a10:	f003 fff8 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016a14:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016a16:	6828      	ldr	r0, [r5, #0]
 8016a18:	f7f1 fd0c 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 8016a1c:	6823      	ldr	r3, [r4, #0]
 8016a1e:	4605      	mov	r5, r0
 8016a20:	4620      	mov	r0, r4
 8016a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016a24:	4798      	blx	r3
 8016a26:	6823      	ldr	r3, [r4, #0]
 8016a28:	4680      	mov	r8, r0
 8016a2a:	4620      	mov	r0, r4
 8016a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016a30:	4798      	blx	r3
 8016a32:	ab09      	add	r3, sp, #36	@ 0x24
 8016a34:	9501      	str	r5, [sp, #4]
 8016a36:	9300      	str	r3, [sp, #0]
 8016a38:	ab05      	add	r3, sp, #20
 8016a3a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8016a3e:	4630      	mov	r0, r6
 8016a40:	e897 0006 	ldmia.w	r7, {r1, r2}
 8016a44:	f7f1 fca8 	bl	8008398 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016a48:	b00e      	add	sp, #56	@ 0x38
 8016a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a4e:	bf00      	nop
 8016a50:	24028544 	.word	0x24028544
 8016a54:	2402854c 	.word	0x2402854c
 8016a58:	24028540 	.word	0x24028540
 8016a5c:	24028548 	.word	0x24028548
 8016a60:	240284e8 	.word	0x240284e8

08016a64 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016a64:	b538      	push	{r3, r4, r5, lr}
 8016a66:	4b0e      	ldr	r3, [pc, #56]	@ (8016aa0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8016a68:	4604      	mov	r4, r0
 8016a6a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016a6c:	881b      	ldrh	r3, [r3, #0]
 8016a6e:	429a      	cmp	r2, r3
 8016a70:	d214      	bcs.n	8016a9c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8016a72:	6803      	ldr	r3, [r0, #0]
 8016a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a76:	4798      	blx	r3
 8016a78:	6823      	ldr	r3, [r4, #0]
 8016a7a:	4605      	mov	r5, r0
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a80:	4798      	blx	r3
 8016a82:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016a86:	b22d      	sxth	r5, r5
 8016a88:	4601      	mov	r1, r0
 8016a8a:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016a8e:	bf06      	itte	eq
 8016a90:	4602      	moveq	r2, r0
 8016a92:	4629      	moveq	r1, r5
 8016a94:	462a      	movne	r2, r5
 8016a96:	4620      	mov	r0, r4
 8016a98:	f7fb fde4 	bl	8012664 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016a9c:	bd38      	pop	{r3, r4, r5, pc}
 8016a9e:	bf00      	nop
 8016aa0:	24028544 	.word	0x24028544

08016aa4 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8016aa4:	b530      	push	{r4, r5, lr}
 8016aa6:	888b      	ldrh	r3, [r1, #4]
 8016aa8:	b085      	sub	sp, #20
 8016aaa:	4604      	mov	r4, r0
 8016aac:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016aae:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8016ab2:	b923      	cbnz	r3, 8016abe <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8016ab4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016ab8:	b90b      	cbnz	r3, 8016abe <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8016aba:	f7ff ffd3 	bl	8016a64 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016abe:	6823      	ldr	r3, [r4, #0]
 8016ac0:	466d      	mov	r5, sp
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	343c      	adds	r4, #60	@ 0x3c
 8016ac6:	4628      	mov	r0, r5
 8016ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016acc:	4798      	blx	r3
 8016ace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016ad6:	b005      	add	sp, #20
 8016ad8:	bd30      	pop	{r4, r5, pc}

08016ada <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016ada:	2300      	movs	r3, #0
 8016adc:	8083      	strh	r3, [r0, #4]
 8016ade:	80c3      	strh	r3, [r0, #6]
 8016ae0:	8003      	strh	r3, [r0, #0]
 8016ae2:	8043      	strh	r3, [r0, #2]
 8016ae4:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8016ae8:	2bff      	cmp	r3, #255	@ 0xff
 8016aea:	bf01      	itttt	eq
 8016aec:	890b      	ldrheq	r3, [r1, #8]
 8016aee:	8083      	strheq	r3, [r0, #4]
 8016af0:	894b      	ldrheq	r3, [r1, #10]
 8016af2:	80c3      	strheq	r3, [r0, #6]
 8016af4:	4770      	bx	lr
	...

08016af8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016afa:	4604      	mov	r4, r0
 8016afc:	466b      	mov	r3, sp
 8016afe:	6808      	ldr	r0, [r1, #0]
 8016b00:	6849      	ldr	r1, [r1, #4]
 8016b02:	c303      	stmia	r3!, {r0, r1}
 8016b04:	6823      	ldr	r3, [r4, #0]
 8016b06:	4669      	mov	r1, sp
 8016b08:	4620      	mov	r0, r4
 8016b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b0c:	4798      	blx	r3
 8016b0e:	4b08      	ldr	r3, [pc, #32]	@ (8016b30 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016b16:	b10a      	cbz	r2, 8016b1c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016b18:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016b1a:	b900      	cbnz	r0, 8016b1e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016b1c:	6898      	ldr	r0, [r3, #8]
 8016b1e:	6803      	ldr	r3, [r0, #0]
 8016b20:	4669      	mov	r1, sp
 8016b22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8016b24:	6a1d      	ldr	r5, [r3, #32]
 8016b26:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8016b2a:	47a8      	blx	r5
 8016b2c:	b003      	add	sp, #12
 8016b2e:	bd30      	pop	{r4, r5, pc}
 8016b30:	240284e8 	.word	0x240284e8

08016b34 <_ZN8touchgfx3BoxD1Ev>:
 8016b34:	4770      	bx	lr

08016b36 <_ZN8touchgfx3BoxD0Ev>:
 8016b36:	b510      	push	{r4, lr}
 8016b38:	4604      	mov	r4, r0
 8016b3a:	212c      	movs	r1, #44	@ 0x2c
 8016b3c:	f011 f9c8 	bl	8027ed0 <_ZdlPvj>
 8016b40:	4620      	mov	r0, r4
 8016b42:	bd10      	pop	{r4, pc}

08016b44 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8016b44:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8016b48:	b12a      	cbz	r2, 8016b56 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016b4a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8016b4e:	b112      	cbz	r2, 8016b56 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016b50:	6803      	ldr	r3, [r0, #0]
 8016b52:	695b      	ldr	r3, [r3, #20]
 8016b54:	4718      	bx	r3
 8016b56:	4770      	bx	lr

08016b58 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8016b58:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8016b5c:	4770      	bx	lr

08016b5e <_ZN8touchgfx6ButtonD1Ev>:
 8016b5e:	4770      	bx	lr

08016b60 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8016b60:	b570      	push	{r4, r5, r6, lr}
 8016b62:	880b      	ldrh	r3, [r1, #0]
 8016b64:	4605      	mov	r5, r0
 8016b66:	4604      	mov	r4, r0
 8016b68:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8016b6a:	8813      	ldrh	r3, [r2, #0]
 8016b6c:	f825 3f30 	strh.w	r3, [r5, #48]!
 8016b70:	4628      	mov	r0, r5
 8016b72:	f006 fb93 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016b76:	4606      	mov	r6, r0
 8016b78:	4628      	mov	r0, r5
 8016b7a:	f006 fbc3 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016b7e:	6823      	ldr	r3, [r4, #0]
 8016b80:	4605      	mov	r5, r0
 8016b82:	4631      	mov	r1, r6
 8016b84:	4620      	mov	r0, r4
 8016b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016b88:	4798      	blx	r3
 8016b8a:	6823      	ldr	r3, [r4, #0]
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	4620      	mov	r0, r4
 8016b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b96:	4718      	bx	r3

08016b98 <_ZN8touchgfx6ButtonD0Ev>:
 8016b98:	b510      	push	{r4, lr}
 8016b9a:	4604      	mov	r4, r0
 8016b9c:	2134      	movs	r1, #52	@ 0x34
 8016b9e:	f011 f997 	bl	8027ed0 <_ZdlPvj>
 8016ba2:	4620      	mov	r0, r4
 8016ba4:	bd10      	pop	{r4, pc}

08016ba6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8016ba6:	b510      	push	{r4, lr}
 8016ba8:	4604      	mov	r4, r0
 8016baa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8016bac:	b150      	cbz	r0, 8016bc4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8016bae:	6803      	ldr	r3, [r0, #0]
 8016bb0:	68db      	ldr	r3, [r3, #12]
 8016bb2:	4798      	blx	r3
 8016bb4:	b130      	cbz	r0, 8016bc4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8016bb6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016bb8:	4621      	mov	r1, r4
 8016bba:	6803      	ldr	r3, [r0, #0]
 8016bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bc0:	689b      	ldr	r3, [r3, #8]
 8016bc2:	4718      	bx	r3
 8016bc4:	bd10      	pop	{r4, pc}

08016bc6 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8016bc6:	b510      	push	{r4, lr}
 8016bc8:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8016bcc:	4604      	mov	r4, r0
 8016bce:	2bff      	cmp	r3, #255	@ 0xff
 8016bd0:	d006      	beq.n	8016be0 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	8003      	strh	r3, [r0, #0]
 8016bd6:	8043      	strh	r3, [r0, #2]
 8016bd8:	8083      	strh	r3, [r0, #4]
 8016bda:	80c3      	strh	r3, [r0, #6]
 8016bdc:	4620      	mov	r0, r4
 8016bde:	bd10      	pop	{r4, pc}
 8016be0:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8016be4:	b11b      	cbz	r3, 8016bee <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8016be6:	3130      	adds	r1, #48	@ 0x30
 8016be8:	f006 fbc0 	bl	801d36c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016bec:	e7f6      	b.n	8016bdc <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8016bee:	312e      	adds	r1, #46	@ 0x2e
 8016bf0:	e7fa      	b.n	8016be8 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08016bf4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8016bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8016bfc:	b08a      	sub	sp, #40	@ 0x28
 8016bfe:	4604      	mov	r4, r0
 8016c00:	4688      	mov	r8, r1
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d066      	beq.n	8016cd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8016c06:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8016c08:	a805      	add	r0, sp, #20
 8016c0a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c0e:	f006 fb45 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016c12:	4607      	mov	r7, r0
 8016c14:	a805      	add	r0, sp, #20
 8016c16:	f006 fb75 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016c1a:	f9b8 6000 	ldrsh.w	r6, [r8]
 8016c1e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8016c22:	2300      	movs	r3, #0
 8016c24:	4432      	add	r2, r6
 8016c26:	9306      	str	r3, [sp, #24]
 8016c28:	b292      	uxth	r2, r2
 8016c2a:	fa0f fc82 	sxth.w	ip, r2
 8016c2e:	459c      	cmp	ip, r3
 8016c30:	dd52      	ble.n	8016cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016c32:	42b7      	cmp	r7, r6
 8016c34:	dd50      	ble.n	8016cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016c36:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8016c3a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8016c3e:	442b      	add	r3, r5
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	b219      	sxth	r1, r3
 8016c44:	2900      	cmp	r1, #0
 8016c46:	dd47      	ble.n	8016cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016c48:	42a8      	cmp	r0, r5
 8016c4a:	dd45      	ble.n	8016cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016c4c:	4567      	cmp	r7, ip
 8016c4e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8016c52:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8016c56:	bfb8      	it	lt
 8016c58:	b2ba      	uxthlt	r2, r7
 8016c5a:	4288      	cmp	r0, r1
 8016c5c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016c60:	bfb8      	it	lt
 8016c62:	b283      	uxthlt	r3, r0
 8016c64:	1b92      	subs	r2, r2, r6
 8016c66:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016c6a:	1b5b      	subs	r3, r3, r5
 8016c6c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016c70:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016c74:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d026      	beq.n	8016cce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8016c80:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	dd22      	ble.n	8016cce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8016c88:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	dd1e      	ble.n	8016cce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8016c90:	2300      	movs	r3, #0
 8016c92:	a908      	add	r1, sp, #32
 8016c94:	4620      	mov	r0, r4
 8016c96:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016c9a:	6823      	ldr	r3, [r4, #0]
 8016c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c9e:	4798      	blx	r3
 8016ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8016ce0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016ca8:	b10a      	cbz	r2, 8016cae <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8016caa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016cac:	b900      	cbnz	r0, 8016cb0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8016cae:	6898      	ldr	r0, [r3, #8]
 8016cb0:	2501      	movs	r5, #1
 8016cb2:	6801      	ldr	r1, [r0, #0]
 8016cb4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8016cb8:	9502      	str	r5, [sp, #8]
 8016cba:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8016cbe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016cc2:	9401      	str	r4, [sp, #4]
 8016cc4:	ac06      	add	r4, sp, #24
 8016cc6:	9400      	str	r4, [sp, #0]
 8016cc8:	688c      	ldr	r4, [r1, #8]
 8016cca:	a905      	add	r1, sp, #20
 8016ccc:	47a0      	blx	r4
 8016cce:	b00a      	add	sp, #40	@ 0x28
 8016cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd4:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8016cd6:	e797      	b.n	8016c08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8016cd8:	2300      	movs	r3, #0
 8016cda:	9307      	str	r3, [sp, #28]
 8016cdc:	e7ca      	b.n	8016c74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8016cde:	bf00      	nop
 8016ce0:	240284e8 	.word	0x240284e8

08016ce4 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8016ce4:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8016ce8:	b12a      	cbz	r2, 8016cf6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8016cea:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8016cee:	b112      	cbz	r2, 8016cf6 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8016cf0:	6803      	ldr	r3, [r0, #0]
 8016cf2:	695b      	ldr	r3, [r3, #20]
 8016cf4:	4718      	bx	r3
 8016cf6:	4770      	bx	lr

08016cf8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8016cf8:	4b30      	ldr	r3, [pc, #192]	@ (8016dbc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8016cfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016cfe:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016d00:	b08d      	sub	sp, #52	@ 0x34
 8016d02:	881b      	ldrh	r3, [r3, #0]
 8016d04:	4604      	mov	r4, r0
 8016d06:	460f      	mov	r7, r1
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	d954      	bls.n	8016db6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8016dc0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8016d0e:	6819      	ldr	r1, [r3, #0]
 8016d10:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8016d14:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8016d18:	4a2a      	ldr	r2, [pc, #168]	@ (8016dc4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8016d1a:	6812      	ldr	r2, [r2, #0]
 8016d1c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8016d20:	2900      	cmp	r1, #0
 8016d22:	d048      	beq.n	8016db6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016d24:	785a      	ldrb	r2, [r3, #1]
 8016d26:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8016d2a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8016d2e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016d32:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8016d36:	4b24      	ldr	r3, [pc, #144]	@ (8016dc8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8016d38:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8016d3c:	681a      	ldr	r2, [r3, #0]
 8016d3e:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8016d42:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8016d46:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8016d4a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8016d4c:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8016d50:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8016d54:	9107      	str	r1, [sp, #28]
 8016d56:	f88d 8020 	strb.w	r8, [sp, #32]
 8016d5a:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8016d5e:	9609      	str	r6, [sp, #36]	@ 0x24
 8016d60:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8016d64:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8016d68:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8016d6c:	b10b      	cbz	r3, 8016d72 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8016d6e:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8016d70:	b905      	cbnz	r5, 8016d74 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8016d72:	6895      	ldr	r5, [r2, #8]
 8016d74:	ae05      	add	r6, sp, #20
 8016d76:	4621      	mov	r1, r4
 8016d78:	4630      	mov	r0, r6
 8016d7a:	f003 fe43 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016d7e:	4b13      	ldr	r3, [pc, #76]	@ (8016dcc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8016d80:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016d82:	6818      	ldr	r0, [r3, #0]
 8016d84:	f7f1 fb56 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 8016d88:	6823      	ldr	r3, [r4, #0]
 8016d8a:	4680      	mov	r8, r0
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016d90:	4798      	blx	r3
 8016d92:	6823      	ldr	r3, [r4, #0]
 8016d94:	4681      	mov	r9, r0
 8016d96:	4620      	mov	r0, r4
 8016d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016d9c:	4798      	blx	r3
 8016d9e:	ab07      	add	r3, sp, #28
 8016da0:	f8cd 8004 	str.w	r8, [sp, #4]
 8016da4:	9300      	str	r3, [sp, #0]
 8016da6:	463b      	mov	r3, r7
 8016da8:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8016dac:	4628      	mov	r0, r5
 8016dae:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016db2:	f7f1 faf1 	bl	8008398 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016db6:	b00d      	add	sp, #52	@ 0x34
 8016db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dbc:	24028544 	.word	0x24028544
 8016dc0:	24028540 	.word	0x24028540
 8016dc4:	24028548 	.word	0x24028548
 8016dc8:	240284e8 	.word	0x240284e8
 8016dcc:	2402854c 	.word	0x2402854c

08016dd0 <_ZN8touchgfx5ImageD1Ev>:
 8016dd0:	4770      	bx	lr

08016dd2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016dd2:	b570      	push	{r4, r5, r6, lr}
 8016dd4:	880b      	ldrh	r3, [r1, #0]
 8016dd6:	460d      	mov	r5, r1
 8016dd8:	4604      	mov	r4, r0
 8016dda:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8016ddc:	4608      	mov	r0, r1
 8016dde:	f006 fa5d 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016de2:	4606      	mov	r6, r0
 8016de4:	4628      	mov	r0, r5
 8016de6:	f006 fa8d 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016dea:	6823      	ldr	r3, [r4, #0]
 8016dec:	4605      	mov	r5, r0
 8016dee:	4631      	mov	r1, r6
 8016df0:	4620      	mov	r0, r4
 8016df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016df4:	4798      	blx	r3
 8016df6:	6823      	ldr	r3, [r4, #0]
 8016df8:	4629      	mov	r1, r5
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e02:	4718      	bx	r3

08016e04 <_ZN8touchgfx5ImageD0Ev>:
 8016e04:	b510      	push	{r4, lr}
 8016e06:	4604      	mov	r4, r0
 8016e08:	212c      	movs	r1, #44	@ 0x2c
 8016e0a:	f011 f861 	bl	8027ed0 <_ZdlPvj>
 8016e0e:	4620      	mov	r0, r4
 8016e10:	bd10      	pop	{r4, pc}

08016e12 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016e12:	b510      	push	{r4, lr}
 8016e14:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8016e18:	4604      	mov	r4, r0
 8016e1a:	2bff      	cmp	r3, #255	@ 0xff
 8016e1c:	d006      	beq.n	8016e2c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	8003      	strh	r3, [r0, #0]
 8016e22:	8043      	strh	r3, [r0, #2]
 8016e24:	8083      	strh	r3, [r0, #4]
 8016e26:	80c3      	strh	r3, [r0, #6]
 8016e28:	4620      	mov	r0, r4
 8016e2a:	bd10      	pop	{r4, pc}
 8016e2c:	3126      	adds	r1, #38	@ 0x26
 8016e2e:	f006 fa9d 	bl	801d36c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016e32:	e7f9      	b.n	8016e28 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08016e34 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e38:	4604      	mov	r4, r0
 8016e3a:	b088      	sub	sp, #32
 8016e3c:	2500      	movs	r5, #0
 8016e3e:	460f      	mov	r7, r1
 8016e40:	f854 3b26 	ldr.w	r3, [r4], #38
 8016e44:	a904      	add	r1, sp, #16
 8016e46:	4606      	mov	r6, r0
 8016e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016e4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016e4e:	4798      	blx	r3
 8016e50:	4620      	mov	r0, r4
 8016e52:	f006 fa23 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016e56:	4680      	mov	r8, r0
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f006 fa53 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016e5e:	9506      	str	r5, [sp, #24]
 8016e60:	ad06      	add	r5, sp, #24
 8016e62:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016e66:	4639      	mov	r1, r7
 8016e68:	f8ad 801c 	strh.w	r8, [sp, #28]
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	f7fa ffff 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8016e72:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	dd19      	ble.n	8016eae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016e7a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	dd15      	ble.n	8016eae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016e82:	4b0c      	ldr	r3, [pc, #48]	@ (8016eb4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016e8a:	b10a      	cbz	r2, 8016e90 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8016e8c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016e8e:	b900      	cbnz	r0, 8016e92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8016e90:	6898      	ldr	r0, [r3, #8]
 8016e92:	2701      	movs	r7, #1
 8016e94:	6801      	ldr	r1, [r0, #0]
 8016e96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016e9a:	9702      	str	r7, [sp, #8]
 8016e9c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8016ea0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016ea4:	e9cd 5600 	strd	r5, r6, [sp]
 8016ea8:	688d      	ldr	r5, [r1, #8]
 8016eaa:	4621      	mov	r1, r4
 8016eac:	47a8      	blx	r5
 8016eae:	b008      	add	sp, #32
 8016eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb4:	240284e8 	.word	0x240284e8

08016eb8 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8016eb8:	4770      	bx	lr

08016eba <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8016eba:	b510      	push	{r4, lr}
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	2148      	movs	r1, #72	@ 0x48
 8016ec0:	f011 f806 	bl	8027ed0 <_ZdlPvj>
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	bd10      	pop	{r4, pc}

08016ec8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8016ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ecc:	b08d      	sub	sp, #52	@ 0x34
 8016ece:	4604      	mov	r4, r0
 8016ed0:	460f      	mov	r7, r1
 8016ed2:	f7ff fe8f 	bl	8016bf4 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8016ed6:	4a55      	ldr	r2, [pc, #340]	@ (801702c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8016ed8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016eda:	8812      	ldrh	r2, [r2, #0]
 8016edc:	429a      	cmp	r2, r3
 8016ede:	f240 8082 	bls.w	8016fe6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8016ee2:	4d53      	ldr	r5, [pc, #332]	@ (8017030 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8016ee4:	682a      	ldr	r2, [r5, #0]
 8016ee6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016eea:	4b52      	ldr	r3, [pc, #328]	@ (8017034 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8016ef8:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016efc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8016f00:	2a03      	cmp	r2, #3
 8016f02:	d811      	bhi.n	8016f28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8016f04:	e8df f002 	tbb	[pc, r2]
 8016f08:	89727902 	.word	0x89727902
 8016f0c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016f10:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8016f14:	1ad2      	subs	r2, r2, r3
 8016f16:	2002      	movs	r0, #2
 8016f18:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016f1c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016f20:	fb92 f2f0 	sdiv	r2, r2, r0
 8016f24:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016f28:	f10d 080c 	add.w	r8, sp, #12
 8016f2c:	f10d 0914 	add.w	r9, sp, #20
 8016f30:	e898 0003 	ldmia.w	r8, {r0, r1}
 8016f34:	e889 0003 	stmia.w	r9, {r0, r1}
 8016f38:	4639      	mov	r1, r7
 8016f3a:	4648      	mov	r0, r9
 8016f3c:	f7fa ff98 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8016f40:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	dd4e      	ble.n	8016fe6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8016f48:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	dd4a      	ble.n	8016fe6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8016f50:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016f54:	4641      	mov	r1, r8
 8016f56:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	1a9b      	subs	r3, r3, r2
 8016f5e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8016f62:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016f66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016f6a:	1a9b      	subs	r3, r3, r2
 8016f6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f70:	6823      	ldr	r3, [r4, #0]
 8016f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016f74:	4798      	blx	r3
 8016f76:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d053      	beq.n	8017026 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8016f7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8016f80:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8016f82:	682b      	ldr	r3, [r5, #0]
 8016f84:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8016f88:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8016f8c:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8016f90:	785b      	ldrb	r3, [r3, #1]
 8016f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f94:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8016f98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016f9c:	9607      	str	r6, [sp, #28]
 8016f9e:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	f88d 5020 	strb.w	r5, [sp, #32]
 8016fa8:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8016fac:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8016fb0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8016fb4:	4b20      	ldr	r3, [pc, #128]	@ (8017038 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8016fb6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8016fc0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016fc4:	b10a      	cbz	r2, 8016fca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8016fc6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016fc8:	b904      	cbnz	r4, 8016fcc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8016fca:	689c      	ldr	r4, [r3, #8]
 8016fcc:	4b1b      	ldr	r3, [pc, #108]	@ (801703c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8016fce:	6818      	ldr	r0, [r3, #0]
 8016fd0:	f7f1 fa30 	bl	8008434 <_ZNK8touchgfx5Texts7getTextEt>
 8016fd4:	ab07      	add	r3, sp, #28
 8016fd6:	9001      	str	r0, [sp, #4]
 8016fd8:	4620      	mov	r0, r4
 8016fda:	9300      	str	r3, [sp, #0]
 8016fdc:	464b      	mov	r3, r9
 8016fde:	e898 0006 	ldmia.w	r8, {r1, r2}
 8016fe2:	f7f1 f9d9 	bl	8008398 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016fe6:	b00d      	add	sp, #52	@ 0x34
 8016fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fec:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016ff0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8016ff4:	1ad2      	subs	r2, r2, r3
 8016ff6:	3201      	adds	r2, #1
 8016ff8:	e78d      	b.n	8016f16 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8016ffa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016ffe:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8017002:	1ad2      	subs	r2, r2, r3
 8017004:	3201      	adds	r2, #1
 8017006:	2002      	movs	r0, #2
 8017008:	f8ad 3010 	strh.w	r3, [sp, #16]
 801700c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017010:	fb92 f2f0 	sdiv	r2, r2, r0
 8017014:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017018:	e786      	b.n	8016f28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801701a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801701e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8017022:	1ad2      	subs	r2, r2, r3
 8017024:	e7ef      	b.n	8017006 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8017026:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8017028:	e7aa      	b.n	8016f80 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 801702a:	bf00      	nop
 801702c:	24028544 	.word	0x24028544
 8017030:	24028540 	.word	0x24028540
 8017034:	24028548 	.word	0x24028548
 8017038:	240284e8 	.word	0x240284e8
 801703c:	2402854c 	.word	0x2402854c

08017040 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8017040:	2101      	movs	r1, #1
 8017042:	2200      	movs	r2, #0
 8017044:	b510      	push	{r4, lr}
 8017046:	4c13      	ldr	r4, [pc, #76]	@ (8017094 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8017048:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801704c:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8017050:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017054:	6004      	str	r4, [r0, #0]
 8017056:	4c10      	ldr	r4, [pc, #64]	@ (8017098 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8017058:	8082      	strh	r2, [r0, #4]
 801705a:	80c2      	strh	r2, [r0, #6]
 801705c:	8102      	strh	r2, [r0, #8]
 801705e:	8142      	strh	r2, [r0, #10]
 8017060:	8182      	strh	r2, [r0, #12]
 8017062:	81c2      	strh	r2, [r0, #14]
 8017064:	8202      	strh	r2, [r0, #16]
 8017066:	8242      	strh	r2, [r0, #18]
 8017068:	61c2      	str	r2, [r0, #28]
 801706a:	8402      	strh	r2, [r0, #32]
 801706c:	8442      	strh	r2, [r0, #34]	@ 0x22
 801706e:	6282      	str	r2, [r0, #40]	@ 0x28
 8017070:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8017074:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8017076:	8601      	strh	r1, [r0, #48]	@ 0x30
 8017078:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 801707c:	6344      	str	r4, [r0, #52]	@ 0x34
 801707e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8017080:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8017084:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8017088:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801708c:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8017090:	bd10      	pop	{r4, pc}
 8017092:	bf00      	nop
 8017094:	0802d1c8 	.word	0x0802d1c8
 8017098:	0802b578 	.word	0x0802b578

0801709c <_ZN8touchgfx7OutlineD1Ev>:
 801709c:	4770      	bx	lr

0801709e <_ZN8touchgfx7OutlineD0Ev>:
 801709e:	b510      	push	{r4, lr}
 80170a0:	4604      	mov	r4, r0
 80170a2:	2130      	movs	r1, #48	@ 0x30
 80170a4:	f010 ff14 	bl	8027ed0 <_ZdlPvj>
 80170a8:	4620      	mov	r0, r4
 80170aa:	bd10      	pop	{r4, pc}

080170ac <_ZN8touchgfx7Outline5resetEv>:
 80170ac:	b510      	push	{r4, lr}
 80170ae:	4604      	mov	r4, r0
 80170b0:	f000 fe86 	bl	8017dc0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80170b4:	60e0      	str	r0, [r4, #12]
 80170b6:	f000 fe89 	bl	8017dcc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80170ba:	68e3      	ldr	r3, [r4, #12]
 80170bc:	08c0      	lsrs	r0, r0, #3
 80170be:	2200      	movs	r2, #0
 80170c0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80170c4:	6123      	str	r3, [r4, #16]
 80170c6:	3801      	subs	r0, #1
 80170c8:	60a2      	str	r2, [r4, #8]
 80170ca:	6060      	str	r0, [r4, #4]
 80170cc:	8019      	strh	r1, [r3, #0]
 80170ce:	8059      	strh	r1, [r3, #2]
 80170d0:	809a      	strh	r2, [r3, #4]
 80170d2:	80da      	strh	r2, [r3, #6]
 80170d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80170d6:	f023 0301 	bic.w	r3, r3, #1
 80170da:	f043 0302 	orr.w	r3, r3, #2
 80170de:	6263      	str	r3, [r4, #36]	@ 0x24
 80170e0:	bd10      	pop	{r4, pc}
	...

080170e4 <_ZN8touchgfx7OutlineC1Ev>:
 80170e4:	4b0a      	ldr	r3, [pc, #40]	@ (8017110 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80170e6:	b510      	push	{r4, lr}
 80170e8:	6003      	str	r3, [r0, #0]
 80170ea:	2300      	movs	r3, #0
 80170ec:	4604      	mov	r4, r0
 80170ee:	6243      	str	r3, [r0, #36]	@ 0x24
 80170f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80170f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80170f8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80170fc:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8017100:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017104:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8017108:	f7ff ffd0 	bl	80170ac <_ZN8touchgfx7Outline5resetEv>
 801710c:	4620      	mov	r0, r4
 801710e:	bd10      	pop	{r4, pc}
 8017110:	0802d23c 	.word	0x0802d23c

08017114 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8017114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017118:	b093      	sub	sp, #76	@ 0x4c
 801711a:	1156      	asrs	r6, r2, #5
 801711c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801711e:	9305      	str	r3, [sp, #20]
 8017120:	1153      	asrs	r3, r2, #5
 8017122:	f004 051f 	and.w	r5, r4, #31
 8017126:	9303      	str	r3, [sp, #12]
 8017128:	1163      	asrs	r3, r4, #5
 801712a:	9504      	str	r5, [sp, #16]
 801712c:	1165      	asrs	r5, r4, #5
 801712e:	9306      	str	r3, [sp, #24]
 8017130:	f002 031f 	and.w	r3, r2, #31
 8017134:	42ae      	cmp	r6, r5
 8017136:	f040 80f4 	bne.w	8017322 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801713a:	9c04      	ldr	r4, [sp, #16]
 801713c:	9a05      	ldr	r2, [sp, #20]
 801713e:	42a3      	cmp	r3, r4
 8017140:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8017144:	6902      	ldr	r2, [r0, #16]
 8017146:	d125      	bne.n	8017194 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8017148:	f9b2 3000 	ldrsh.w	r3, [r2]
 801714c:	459e      	cmp	lr, r3
 801714e:	d103      	bne.n	8017158 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8017150:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017154:	429e      	cmp	r6, r3
 8017156:	d035      	beq.n	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017158:	88d1      	ldrh	r1, [r2, #6]
 801715a:	8893      	ldrh	r3, [r2, #4]
 801715c:	430b      	orrs	r3, r1
 801715e:	d010      	beq.n	8017182 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017160:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017164:	2b00      	cmp	r3, #0
 8017166:	db0c      	blt.n	8017182 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017168:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801716a:	428b      	cmp	r3, r1
 801716c:	da09      	bge.n	8017182 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801716e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017172:	428b      	cmp	r3, r1
 8017174:	f103 0301 	add.w	r3, r3, #1
 8017178:	bf38      	it	cc
 801717a:	3208      	addcc	r2, #8
 801717c:	6083      	str	r3, [r0, #8]
 801717e:	bf38      	it	cc
 8017180:	6102      	strcc	r2, [r0, #16]
 8017182:	6903      	ldr	r3, [r0, #16]
 8017184:	9a03      	ldr	r2, [sp, #12]
 8017186:	f8a3 e000 	strh.w	lr, [r3]
 801718a:	805a      	strh	r2, [r3, #2]
 801718c:	2200      	movs	r2, #0
 801718e:	809a      	strh	r2, [r3, #4]
 8017190:	80da      	strh	r2, [r3, #6]
 8017192:	e017      	b.n	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017194:	9c05      	ldr	r4, [sp, #20]
 8017196:	114e      	asrs	r6, r1, #5
 8017198:	f001 0c1f 	and.w	ip, r1, #31
 801719c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80171a0:	f004 041f 	and.w	r4, r4, #31
 80171a4:	4576      	cmp	r6, lr
 80171a6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80171aa:	9402      	str	r4, [sp, #8]
 80171ac:	9c04      	ldr	r4, [sp, #16]
 80171ae:	eba4 0403 	sub.w	r4, r4, r3
 80171b2:	d10a      	bne.n	80171ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80171b4:	9b02      	ldr	r3, [sp, #8]
 80171b6:	44a0      	add	r8, r4
 80171b8:	449c      	add	ip, r3
 80171ba:	f8a2 8004 	strh.w	r8, [r2, #4]
 80171be:	fb04 a40c 	mla	r4, r4, ip, sl
 80171c2:	80d4      	strh	r4, [r2, #6]
 80171c4:	b013      	add	sp, #76	@ 0x4c
 80171c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ca:	9d05      	ldr	r5, [sp, #20]
 80171cc:	1a69      	subs	r1, r5, r1
 80171ce:	bf51      	iteee	pl
 80171d0:	f1cc 0520 	rsbpl	r5, ip, #32
 80171d4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80171d8:	4249      	negmi	r1, r1
 80171da:	2500      	movmi	r5, #0
 80171dc:	bf5d      	ittte	pl
 80171de:	436c      	mulpl	r4, r5
 80171e0:	2520      	movpl	r5, #32
 80171e2:	f04f 0901 	movpl.w	r9, #1
 80171e6:	f04f 39ff 	movmi.w	r9, #4294967295
 80171ea:	9501      	str	r5, [sp, #4]
 80171ec:	9f01      	ldr	r7, [sp, #4]
 80171ee:	444e      	add	r6, r9
 80171f0:	fb94 f5f1 	sdiv	r5, r4, r1
 80171f4:	fb01 4415 	mls	r4, r1, r5, r4
 80171f8:	44bc      	add	ip, r7
 80171fa:	2c00      	cmp	r4, #0
 80171fc:	bfbc      	itt	lt
 80171fe:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017202:	1864      	addlt	r4, r4, r1
 8017204:	44a8      	add	r8, r5
 8017206:	fb05 ac0c 	mla	ip, r5, ip, sl
 801720a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801720e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017212:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017216:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801721a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801721e:	ea58 0202 	orrs.w	r2, r8, r2
 8017222:	d011      	beq.n	8017248 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017224:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017228:	f1b8 0f00 	cmp.w	r8, #0
 801722c:	db0c      	blt.n	8017248 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801722e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017230:	4590      	cmp	r8, r2
 8017232:	da09      	bge.n	8017248 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017234:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017238:	4590      	cmp	r8, r2
 801723a:	bf3c      	itt	cc
 801723c:	f10c 0208 	addcc.w	r2, ip, #8
 8017240:	6102      	strcc	r2, [r0, #16]
 8017242:	f108 0201 	add.w	r2, r8, #1
 8017246:	6082      	str	r2, [r0, #8]
 8017248:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801724c:	2700      	movs	r7, #0
 801724e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017252:	45b6      	cmp	lr, r6
 8017254:	f8ac 6000 	strh.w	r6, [ip]
 8017258:	442b      	add	r3, r5
 801725a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801725e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017262:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017266:	d04b      	beq.n	8017300 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8017268:	9f04      	ldr	r7, [sp, #16]
 801726a:	1a64      	subs	r4, r4, r1
 801726c:	f04f 0a00 	mov.w	sl, #0
 8017270:	1aff      	subs	r7, r7, r3
 8017272:	443d      	add	r5, r7
 8017274:	016d      	lsls	r5, r5, #5
 8017276:	fb95 f8f1 	sdiv	r8, r5, r1
 801727a:	fb01 5518 	mls	r5, r1, r8, r5
 801727e:	2d00      	cmp	r5, #0
 8017280:	bfbc      	itt	lt
 8017282:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017286:	186d      	addlt	r5, r5, r1
 8017288:	f108 0701 	add.w	r7, r8, #1
 801728c:	9703      	str	r7, [sp, #12]
 801728e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017292:	1964      	adds	r4, r4, r5
 8017294:	444e      	add	r6, r9
 8017296:	bf54      	ite	pl
 8017298:	9f03      	ldrpl	r7, [sp, #12]
 801729a:	4647      	movmi	r7, r8
 801729c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80172a0:	bf58      	it	pl
 80172a2:	1a64      	subpl	r4, r4, r1
 80172a4:	443b      	add	r3, r7
 80172a6:	44bb      	add	fp, r7
 80172a8:	f8ac b004 	strh.w	fp, [ip, #4]
 80172ac:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80172b0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80172b4:	f8ac b006 	strh.w	fp, [ip, #6]
 80172b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80172bc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80172c0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80172c4:	ea5b 0707 	orrs.w	r7, fp, r7
 80172c8:	d011      	beq.n	80172ee <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80172ca:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80172ce:	f1bb 0f00 	cmp.w	fp, #0
 80172d2:	db0c      	blt.n	80172ee <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80172d4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80172d6:	45bb      	cmp	fp, r7
 80172d8:	da09      	bge.n	80172ee <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80172da:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80172de:	45bb      	cmp	fp, r7
 80172e0:	bf3c      	itt	cc
 80172e2:	f10c 0708 	addcc.w	r7, ip, #8
 80172e6:	6107      	strcc	r7, [r0, #16]
 80172e8:	f10b 0701 	add.w	r7, fp, #1
 80172ec:	6087      	str	r7, [r0, #8]
 80172ee:	6907      	ldr	r7, [r0, #16]
 80172f0:	45b6      	cmp	lr, r6
 80172f2:	803e      	strh	r6, [r7, #0]
 80172f4:	807a      	strh	r2, [r7, #2]
 80172f6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80172fa:	f8a7 a006 	strh.w	sl, [r7, #6]
 80172fe:	d1c6      	bne.n	801728e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8017300:	9a04      	ldr	r2, [sp, #16]
 8017302:	1ad3      	subs	r3, r2, r3
 8017304:	6902      	ldr	r2, [r0, #16]
 8017306:	8891      	ldrh	r1, [r2, #4]
 8017308:	88d6      	ldrh	r6, [r2, #6]
 801730a:	4419      	add	r1, r3
 801730c:	8091      	strh	r1, [r2, #4]
 801730e:	9902      	ldr	r1, [sp, #8]
 8017310:	f101 0c20 	add.w	ip, r1, #32
 8017314:	9901      	ldr	r1, [sp, #4]
 8017316:	ebac 0c01 	sub.w	ip, ip, r1
 801731a:	fb03 630c 	mla	r3, r3, ip, r6
 801731e:	80d3      	strh	r3, [r2, #6]
 8017320:	e750      	b.n	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017322:	9d05      	ldr	r5, [sp, #20]
 8017324:	1aa2      	subs	r2, r4, r2
 8017326:	eba5 0501 	sub.w	r5, r5, r1
 801732a:	9202      	str	r2, [sp, #8]
 801732c:	9508      	str	r5, [sp, #32]
 801732e:	f140 8128 	bpl.w	8017582 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8017332:	9a03      	ldr	r2, [sp, #12]
 8017334:	2a00      	cmp	r2, #0
 8017336:	f6ff af45 	blt.w	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801733a:	9a02      	ldr	r2, [sp, #8]
 801733c:	f04f 34ff 	mov.w	r4, #4294967295
 8017340:	4252      	negs	r2, r2
 8017342:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017344:	2400      	movs	r4, #0
 8017346:	9202      	str	r2, [sp, #8]
 8017348:	9a06      	ldr	r2, [sp, #24]
 801734a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801734e:	9206      	str	r2, [sp, #24]
 8017350:	462a      	mov	r2, r5
 8017352:	435a      	muls	r2, r3
 8017354:	9401      	str	r4, [sp, #4]
 8017356:	9c02      	ldr	r4, [sp, #8]
 8017358:	9d02      	ldr	r5, [sp, #8]
 801735a:	fb92 f4f4 	sdiv	r4, r2, r4
 801735e:	fb05 2214 	mls	r2, r5, r4, r2
 8017362:	2a00      	cmp	r2, #0
 8017364:	9207      	str	r2, [sp, #28]
 8017366:	bfbc      	itt	lt
 8017368:	1952      	addlt	r2, r2, r5
 801736a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801736e:	6905      	ldr	r5, [r0, #16]
 8017370:	bfb8      	it	lt
 8017372:	9207      	strlt	r2, [sp, #28]
 8017374:	eb04 0901 	add.w	r9, r4, r1
 8017378:	9a01      	ldr	r2, [sp, #4]
 801737a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801737e:	429a      	cmp	r2, r3
 8017380:	f040 8111 	bne.w	80175a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8017384:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017388:	429e      	cmp	r6, r3
 801738a:	d104      	bne.n	8017396 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801738c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017390:	9a03      	ldr	r2, [sp, #12]
 8017392:	429a      	cmp	r2, r3
 8017394:	d01b      	beq.n	80173ce <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8017396:	88ea      	ldrh	r2, [r5, #6]
 8017398:	88ab      	ldrh	r3, [r5, #4]
 801739a:	4313      	orrs	r3, r2
 801739c:	d010      	beq.n	80173c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801739e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80173a2:	2a00      	cmp	r2, #0
 80173a4:	db0c      	blt.n	80173c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80173a6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80173a8:	429a      	cmp	r2, r3
 80173aa:	da09      	bge.n	80173c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80173ac:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80173b0:	429a      	cmp	r2, r3
 80173b2:	f102 0201 	add.w	r2, r2, #1
 80173b6:	bf38      	it	cc
 80173b8:	3508      	addcc	r5, #8
 80173ba:	6082      	str	r2, [r0, #8]
 80173bc:	bf38      	it	cc
 80173be:	6105      	strcc	r5, [r0, #16]
 80173c0:	6903      	ldr	r3, [r0, #16]
 80173c2:	9a03      	ldr	r2, [sp, #12]
 80173c4:	801e      	strh	r6, [r3, #0]
 80173c6:	805a      	strh	r2, [r3, #2]
 80173c8:	2200      	movs	r2, #0
 80173ca:	809a      	strh	r2, [r3, #4]
 80173cc:	80da      	strh	r2, [r3, #6]
 80173ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173d0:	9a03      	ldr	r2, [sp, #12]
 80173d2:	6901      	ldr	r1, [r0, #16]
 80173d4:	441a      	add	r2, r3
 80173d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80173da:	42b3      	cmp	r3, r6
 80173dc:	d103      	bne.n	80173e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80173de:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d01a      	beq.n	801741c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80173e6:	88cc      	ldrh	r4, [r1, #6]
 80173e8:	888b      	ldrh	r3, [r1, #4]
 80173ea:	4323      	orrs	r3, r4
 80173ec:	d010      	beq.n	8017410 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80173ee:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80173f2:	2c00      	cmp	r4, #0
 80173f4:	db0c      	blt.n	8017410 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80173f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80173f8:	429c      	cmp	r4, r3
 80173fa:	da09      	bge.n	8017410 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80173fc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017400:	429c      	cmp	r4, r3
 8017402:	f104 0401 	add.w	r4, r4, #1
 8017406:	bf38      	it	cc
 8017408:	3108      	addcc	r1, #8
 801740a:	6084      	str	r4, [r0, #8]
 801740c:	bf38      	it	cc
 801740e:	6101      	strcc	r1, [r0, #16]
 8017410:	6903      	ldr	r3, [r0, #16]
 8017412:	2100      	movs	r1, #0
 8017414:	801e      	strh	r6, [r3, #0]
 8017416:	805a      	strh	r2, [r3, #2]
 8017418:	8099      	strh	r1, [r3, #4]
 801741a:	80d9      	strh	r1, [r3, #6]
 801741c:	9b06      	ldr	r3, [sp, #24]
 801741e:	4293      	cmp	r3, r2
 8017420:	f000 8082 	beq.w	8017528 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8017424:	9b08      	ldr	r3, [sp, #32]
 8017426:	9902      	ldr	r1, [sp, #8]
 8017428:	015b      	lsls	r3, r3, #5
 801742a:	9c02      	ldr	r4, [sp, #8]
 801742c:	fb93 f1f1 	sdiv	r1, r3, r1
 8017430:	fb04 3311 	mls	r3, r4, r1, r3
 8017434:	9103      	str	r1, [sp, #12]
 8017436:	2b00      	cmp	r3, #0
 8017438:	9308      	str	r3, [sp, #32]
 801743a:	da04      	bge.n	8017446 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801743c:	1e4b      	subs	r3, r1, #1
 801743e:	9303      	str	r3, [sp, #12]
 8017440:	9b08      	ldr	r3, [sp, #32]
 8017442:	4423      	add	r3, r4
 8017444:	9308      	str	r3, [sp, #32]
 8017446:	9b07      	ldr	r3, [sp, #28]
 8017448:	464f      	mov	r7, r9
 801744a:	9902      	ldr	r1, [sp, #8]
 801744c:	2600      	movs	r6, #0
 801744e:	1a5b      	subs	r3, r3, r1
 8017450:	9307      	str	r3, [sp, #28]
 8017452:	9b01      	ldr	r3, [sp, #4]
 8017454:	f1c3 0320 	rsb	r3, r3, #32
 8017458:	930e      	str	r3, [sp, #56]	@ 0x38
 801745a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801745c:	9b01      	ldr	r3, [sp, #4]
 801745e:	1a5b      	subs	r3, r3, r1
 8017460:	930a      	str	r3, [sp, #40]	@ 0x28
 8017462:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8017466:	185b      	adds	r3, r3, r1
 8017468:	bf58      	it	pl
 801746a:	9902      	ldrpl	r1, [sp, #8]
 801746c:	9307      	str	r3, [sp, #28]
 801746e:	bf57      	itett	pl
 8017470:	1a5b      	subpl	r3, r3, r1
 8017472:	9903      	ldrmi	r1, [sp, #12]
 8017474:	9307      	strpl	r3, [sp, #28]
 8017476:	9b03      	ldrpl	r3, [sp, #12]
 8017478:	bf58      	it	pl
 801747a:	1c59      	addpl	r1, r3, #1
 801747c:	2a00      	cmp	r2, #0
 801747e:	4489      	add	r9, r1
 8017480:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8017484:	db2e      	blt.n	80174e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017486:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8017488:	4293      	cmp	r3, r2
 801748a:	dd2b      	ble.n	80174e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801748c:	9c01      	ldr	r4, [sp, #4]
 801748e:	6905      	ldr	r5, [r0, #16]
 8017490:	46a0      	mov	r8, r4
 8017492:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8017494:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8017498:	45a0      	cmp	r8, r4
 801749a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801749e:	f040 814c 	bne.w	801773a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80174a2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80174a6:	4551      	cmp	r1, sl
 80174a8:	d103      	bne.n	80174b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80174aa:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80174ae:	4291      	cmp	r1, r2
 80174b0:	d018      	beq.n	80174e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80174b2:	ea5c 010e 	orrs.w	r1, ip, lr
 80174b6:	d00f      	beq.n	80174d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80174b8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80174bc:	2900      	cmp	r1, #0
 80174be:	db0b      	blt.n	80174d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80174c0:	428b      	cmp	r3, r1
 80174c2:	dd09      	ble.n	80174d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80174c4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80174c8:	4299      	cmp	r1, r3
 80174ca:	f101 0101 	add.w	r1, r1, #1
 80174ce:	bf38      	it	cc
 80174d0:	3508      	addcc	r5, #8
 80174d2:	6081      	str	r1, [r0, #8]
 80174d4:	bf38      	it	cc
 80174d6:	6105      	strcc	r5, [r0, #16]
 80174d8:	6903      	ldr	r3, [r0, #16]
 80174da:	f8a3 a000 	strh.w	sl, [r3]
 80174de:	805a      	strh	r2, [r3, #2]
 80174e0:	809e      	strh	r6, [r3, #4]
 80174e2:	80de      	strh	r6, [r3, #6]
 80174e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80174e6:	6901      	ldr	r1, [r0, #16]
 80174e8:	441a      	add	r2, r3
 80174ea:	88cc      	ldrh	r4, [r1, #6]
 80174ec:	888b      	ldrh	r3, [r1, #4]
 80174ee:	4323      	orrs	r3, r4
 80174f0:	d010      	beq.n	8017514 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80174f2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80174f6:	2c00      	cmp	r4, #0
 80174f8:	db0c      	blt.n	8017514 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80174fa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80174fc:	429c      	cmp	r4, r3
 80174fe:	da09      	bge.n	8017514 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017500:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017504:	429c      	cmp	r4, r3
 8017506:	f104 0401 	add.w	r4, r4, #1
 801750a:	bf38      	it	cc
 801750c:	3108      	addcc	r1, #8
 801750e:	6084      	str	r4, [r0, #8]
 8017510:	bf38      	it	cc
 8017512:	6101      	strcc	r1, [r0, #16]
 8017514:	6903      	ldr	r3, [r0, #16]
 8017516:	464f      	mov	r7, r9
 8017518:	f8a3 a000 	strh.w	sl, [r3]
 801751c:	805a      	strh	r2, [r3, #2]
 801751e:	809e      	strh	r6, [r3, #4]
 8017520:	80de      	strh	r6, [r3, #6]
 8017522:	9b06      	ldr	r3, [sp, #24]
 8017524:	4293      	cmp	r3, r2
 8017526:	d19c      	bne.n	8017462 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8017528:	9b01      	ldr	r3, [sp, #4]
 801752a:	6907      	ldr	r7, [r0, #16]
 801752c:	f1c3 0620 	rsb	r6, r3, #32
 8017530:	9b05      	ldr	r3, [sp, #20]
 8017532:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017536:	9b04      	ldr	r3, [sp, #16]
 8017538:	429e      	cmp	r6, r3
 801753a:	f040 81c7 	bne.w	80178cc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801753e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017542:	459e      	cmp	lr, r3
 8017544:	d104      	bne.n	8017550 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8017546:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801754a:	429a      	cmp	r2, r3
 801754c:	f43f ae3a 	beq.w	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017550:	88f9      	ldrh	r1, [r7, #6]
 8017552:	88bb      	ldrh	r3, [r7, #4]
 8017554:	430b      	orrs	r3, r1
 8017556:	d010      	beq.n	801757a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801755c:	2b00      	cmp	r3, #0
 801755e:	db0c      	blt.n	801757a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017560:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8017562:	428b      	cmp	r3, r1
 8017564:	da09      	bge.n	801757a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017566:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801756a:	428b      	cmp	r3, r1
 801756c:	f103 0301 	add.w	r3, r3, #1
 8017570:	bf38      	it	cc
 8017572:	3708      	addcc	r7, #8
 8017574:	6083      	str	r3, [r0, #8]
 8017576:	bf38      	it	cc
 8017578:	6107      	strcc	r7, [r0, #16]
 801757a:	6903      	ldr	r3, [r0, #16]
 801757c:	f8a3 e000 	strh.w	lr, [r3]
 8017580:	e603      	b.n	801718a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8017582:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8017584:	9c03      	ldr	r4, [sp, #12]
 8017586:	42a2      	cmp	r2, r4
 8017588:	f6ff ae1c 	blt.w	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801758c:	9c06      	ldr	r4, [sp, #24]
 801758e:	42a2      	cmp	r2, r4
 8017590:	9c08      	ldr	r4, [sp, #32]
 8017592:	bfbc      	itt	lt
 8017594:	3201      	addlt	r2, #1
 8017596:	9206      	strlt	r2, [sp, #24]
 8017598:	f1c3 0220 	rsb	r2, r3, #32
 801759c:	4362      	muls	r2, r4
 801759e:	2401      	movs	r4, #1
 80175a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80175a2:	2420      	movs	r4, #32
 80175a4:	e6d6      	b.n	8017354 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80175a6:	ea4f 1861 	mov.w	r8, r1, asr #5
 80175aa:	f009 021f 	and.w	r2, r9, #31
 80175ae:	f001 011f 	and.w	r1, r1, #31
 80175b2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80175b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80175b8:	45b0      	cmp	r8, r6
 80175ba:	9a01      	ldr	r2, [sp, #4]
 80175bc:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80175c0:	eba2 0203 	sub.w	r2, r2, r3
 80175c4:	d108      	bne.n	80175d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80175c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175c8:	4496      	add	lr, r2
 80175ca:	4419      	add	r1, r3
 80175cc:	f8a5 e004 	strh.w	lr, [r5, #4]
 80175d0:	fb02 a101 	mla	r1, r2, r1, sl
 80175d4:	80e9      	strh	r1, [r5, #6]
 80175d6:	e6fa      	b.n	80173ce <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80175d8:	2c00      	cmp	r4, #0
 80175da:	f2c0 80a7 	blt.w	801772c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80175de:	2701      	movs	r7, #1
 80175e0:	f1c1 0c20 	rsb	ip, r1, #32
 80175e4:	970a      	str	r7, [sp, #40]	@ 0x28
 80175e6:	2720      	movs	r7, #32
 80175e8:	fb02 f20c 	mul.w	r2, r2, ip
 80175ec:	9709      	str	r7, [sp, #36]	@ 0x24
 80175ee:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80175f0:	fb92 fcf4 	sdiv	ip, r2, r4
 80175f4:	fb04 221c 	mls	r2, r4, ip, r2
 80175f8:	4439      	add	r1, r7
 80175fa:	2a00      	cmp	r2, #0
 80175fc:	bfbc      	itt	lt
 80175fe:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017602:	1912      	addlt	r2, r2, r4
 8017604:	fb0c a101 	mla	r1, ip, r1, sl
 8017608:	44e6      	add	lr, ip
 801760a:	80e9      	strh	r1, [r5, #6]
 801760c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801760e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017612:	eb08 0501 	add.w	r5, r8, r1
 8017616:	6901      	ldr	r1, [r0, #16]
 8017618:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801761c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017620:	ea58 070e 	orrs.w	r7, r8, lr
 8017624:	d010      	beq.n	8017648 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017626:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801762a:	f1be 0f00 	cmp.w	lr, #0
 801762e:	db0b      	blt.n	8017648 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017630:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017632:	45be      	cmp	lr, r7
 8017634:	da08      	bge.n	8017648 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017636:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801763a:	45be      	cmp	lr, r7
 801763c:	bf3c      	itt	cc
 801763e:	3108      	addcc	r1, #8
 8017640:	6101      	strcc	r1, [r0, #16]
 8017642:	f10e 0101 	add.w	r1, lr, #1
 8017646:	6081      	str	r1, [r0, #8]
 8017648:	6901      	ldr	r1, [r0, #16]
 801764a:	f04f 0e00 	mov.w	lr, #0
 801764e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017652:	42ae      	cmp	r6, r5
 8017654:	800d      	strh	r5, [r1, #0]
 8017656:	4463      	add	r3, ip
 8017658:	f8a1 8002 	strh.w	r8, [r1, #2]
 801765c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017660:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017664:	d053      	beq.n	801770e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8017666:	9901      	ldr	r1, [sp, #4]
 8017668:	1b12      	subs	r2, r2, r4
 801766a:	1ac9      	subs	r1, r1, r3
 801766c:	4461      	add	r1, ip
 801766e:	0149      	lsls	r1, r1, #5
 8017670:	fb91 fef4 	sdiv	lr, r1, r4
 8017674:	fb04 111e 	mls	r1, r4, lr, r1
 8017678:	2900      	cmp	r1, #0
 801767a:	bfbc      	itt	lt
 801767c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017680:	1909      	addlt	r1, r1, r4
 8017682:	f10e 0701 	add.w	r7, lr, #1
 8017686:	970d      	str	r7, [sp, #52]	@ 0x34
 8017688:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801768c:	1852      	adds	r2, r2, r1
 801768e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8017690:	bf54      	ite	pl
 8017692:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8017696:	46f4      	movmi	ip, lr
 8017698:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801769c:	bf58      	it	pl
 801769e:	1b12      	subpl	r2, r2, r4
 80176a0:	4463      	add	r3, ip
 80176a2:	443d      	add	r5, r7
 80176a4:	44e3      	add	fp, ip
 80176a6:	f8aa b004 	strh.w	fp, [sl, #4]
 80176aa:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80176ae:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80176b2:	f8aa b006 	strh.w	fp, [sl, #6]
 80176b6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80176ba:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80176be:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80176c2:	ea5b 070a 	orrs.w	r7, fp, sl
 80176c6:	d014      	beq.n	80176f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80176c8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80176cc:	f1ba 0f00 	cmp.w	sl, #0
 80176d0:	db0f      	blt.n	80176f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80176d2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80176d4:	45ba      	cmp	sl, r7
 80176d6:	da0c      	bge.n	80176f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80176d8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80176dc:	45ba      	cmp	sl, r7
 80176de:	f10a 0a01 	add.w	sl, sl, #1
 80176e2:	bf38      	it	cc
 80176e4:	f10c 0c08 	addcc.w	ip, ip, #8
 80176e8:	f8c0 a008 	str.w	sl, [r0, #8]
 80176ec:	bf38      	it	cc
 80176ee:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80176f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80176f6:	f04f 0700 	mov.w	r7, #0
 80176fa:	42ae      	cmp	r6, r5
 80176fc:	f8ac 5000 	strh.w	r5, [ip]
 8017700:	f8ac 8002 	strh.w	r8, [ip, #2]
 8017704:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017708:	f8ac 7006 	strh.w	r7, [ip, #6]
 801770c:	d1bc      	bne.n	8017688 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801770e:	6904      	ldr	r4, [r0, #16]
 8017710:	9a01      	ldr	r2, [sp, #4]
 8017712:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017714:	1ad3      	subs	r3, r2, r3
 8017716:	88a2      	ldrh	r2, [r4, #4]
 8017718:	3120      	adds	r1, #32
 801771a:	441a      	add	r2, r3
 801771c:	80a2      	strh	r2, [r4, #4]
 801771e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017720:	1a89      	subs	r1, r1, r2
 8017722:	88e2      	ldrh	r2, [r4, #6]
 8017724:	fb03 2301 	mla	r3, r3, r1, r2
 8017728:	80e3      	strh	r3, [r4, #6]
 801772a:	e650      	b.n	80173ce <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801772c:	f04f 37ff 	mov.w	r7, #4294967295
 8017730:	434a      	muls	r2, r1
 8017732:	4264      	negs	r4, r4
 8017734:	970a      	str	r7, [sp, #40]	@ 0x28
 8017736:	2700      	movs	r7, #0
 8017738:	e758      	b.n	80175ec <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801773a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801773e:	f009 031f 	and.w	r3, r9, #31
 8017742:	f007 071f 	and.w	r7, r7, #31
 8017746:	fa1f fc8c 	uxth.w	ip, ip
 801774a:	45d0      	cmp	r8, sl
 801774c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801774e:	fa1f fe8e 	uxth.w	lr, lr
 8017752:	d10a      	bne.n	801776a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8017754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017756:	449c      	add	ip, r3
 8017758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801775a:	441f      	add	r7, r3
 801775c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801775e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8017762:	fb03 e707 	mla	r7, r3, r7, lr
 8017766:	80ef      	strh	r7, [r5, #6]
 8017768:	e6bc      	b.n	80174e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801776a:	2900      	cmp	r1, #0
 801776c:	f2c0 80a6 	blt.w	80178bc <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8017770:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017772:	f1c7 0320 	rsb	r3, r7, #32
 8017776:	4363      	muls	r3, r4
 8017778:	2401      	movs	r4, #1
 801777a:	940d      	str	r4, [sp, #52]	@ 0x34
 801777c:	2420      	movs	r4, #32
 801777e:	940c      	str	r4, [sp, #48]	@ 0x30
 8017780:	fb93 f4f1 	sdiv	r4, r3, r1
 8017784:	fb01 3b14 	mls	fp, r1, r4, r3
 8017788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801778a:	f1bb 0f00 	cmp.w	fp, #0
 801778e:	441f      	add	r7, r3
 8017790:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017792:	bfbc      	itt	lt
 8017794:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017798:	448b      	addlt	fp, r1
 801779a:	fb04 e707 	mla	r7, r4, r7, lr
 801779e:	44a4      	add	ip, r4
 80177a0:	80ef      	strh	r7, [r5, #6]
 80177a2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80177a6:	eb08 0503 	add.w	r5, r8, r3
 80177aa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80177ae:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80177b2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80177b6:	ea5e 0307 	orrs.w	r3, lr, r7
 80177ba:	d011      	beq.n	80177e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80177bc:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80177c0:	f1be 0f00 	cmp.w	lr, #0
 80177c4:	db0c      	blt.n	80177e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80177c6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80177c8:	45be      	cmp	lr, r7
 80177ca:	da09      	bge.n	80177e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80177cc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80177d0:	45be      	cmp	lr, r7
 80177d2:	bf3c      	itt	cc
 80177d4:	f10c 0708 	addcc.w	r7, ip, #8
 80177d8:	6107      	strcc	r7, [r0, #16]
 80177da:	f10e 0701 	add.w	r7, lr, #1
 80177de:	6087      	str	r7, [r0, #8]
 80177e0:	6907      	ldr	r7, [r0, #16]
 80177e2:	b213      	sxth	r3, r2
 80177e4:	4555      	cmp	r5, sl
 80177e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80177e8:	807b      	strh	r3, [r7, #2]
 80177ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177ec:	803d      	strh	r5, [r7, #0]
 80177ee:	80be      	strh	r6, [r7, #4]
 80177f0:	eb04 0c03 	add.w	ip, r4, r3
 80177f4:	80fe      	strh	r6, [r7, #6]
 80177f6:	d050      	beq.n	801789a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80177f8:	9b01      	ldr	r3, [sp, #4]
 80177fa:	eba3 070c 	sub.w	r7, r3, ip
 80177fe:	ebab 0301 	sub.w	r3, fp, r1
 8017802:	443c      	add	r4, r7
 8017804:	9309      	str	r3, [sp, #36]	@ 0x24
 8017806:	0164      	lsls	r4, r4, #5
 8017808:	fb94 f8f1 	sdiv	r8, r4, r1
 801780c:	fb01 4418 	mls	r4, r1, r8, r4
 8017810:	2c00      	cmp	r4, #0
 8017812:	bfbc      	itt	lt
 8017814:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017818:	1864      	addlt	r4, r4, r1
 801781a:	f108 0701 	add.w	r7, r8, #1
 801781e:	9711      	str	r7, [sp, #68]	@ 0x44
 8017820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017822:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017826:	191b      	adds	r3, r3, r4
 8017828:	f8be b004 	ldrh.w	fp, [lr, #4]
 801782c:	bf54      	ite	pl
 801782e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8017830:	4647      	movmi	r7, r8
 8017832:	9309      	str	r3, [sp, #36]	@ 0x24
 8017834:	bf58      	it	pl
 8017836:	1a5b      	subpl	r3, r3, r1
 8017838:	44bb      	add	fp, r7
 801783a:	44bc      	add	ip, r7
 801783c:	bf58      	it	pl
 801783e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8017840:	f8ae b004 	strh.w	fp, [lr, #4]
 8017844:	f8be b006 	ldrh.w	fp, [lr, #6]
 8017848:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801784c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801784e:	f8ae b006 	strh.w	fp, [lr, #6]
 8017852:	443d      	add	r5, r7
 8017854:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8017858:	f8be b006 	ldrh.w	fp, [lr, #6]
 801785c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8017860:	ea5b 0307 	orrs.w	r3, fp, r7
 8017864:	d011      	beq.n	801788a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017866:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801786a:	f1bb 0f00 	cmp.w	fp, #0
 801786e:	db0c      	blt.n	801788a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017870:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017872:	45bb      	cmp	fp, r7
 8017874:	da09      	bge.n	801788a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8017876:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801787a:	45bb      	cmp	fp, r7
 801787c:	bf3c      	itt	cc
 801787e:	f10e 0708 	addcc.w	r7, lr, #8
 8017882:	6107      	strcc	r7, [r0, #16]
 8017884:	f10b 0701 	add.w	r7, fp, #1
 8017888:	6087      	str	r7, [r0, #8]
 801788a:	6907      	ldr	r7, [r0, #16]
 801788c:	4555      	cmp	r5, sl
 801788e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017890:	803d      	strh	r5, [r7, #0]
 8017892:	807b      	strh	r3, [r7, #2]
 8017894:	80be      	strh	r6, [r7, #4]
 8017896:	80fe      	strh	r6, [r7, #6]
 8017898:	d1c2      	bne.n	8017820 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801789a:	9b01      	ldr	r3, [sp, #4]
 801789c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801789e:	eba3 0c0c 	sub.w	ip, r3, ip
 80178a2:	6903      	ldr	r3, [r0, #16]
 80178a4:	3720      	adds	r7, #32
 80178a6:	8899      	ldrh	r1, [r3, #4]
 80178a8:	4461      	add	r1, ip
 80178aa:	8099      	strh	r1, [r3, #4]
 80178ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80178ae:	1a7f      	subs	r7, r7, r1
 80178b0:	88d9      	ldrh	r1, [r3, #6]
 80178b2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80178b6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80178ba:	e613      	b.n	80174e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80178bc:	f04f 34ff 	mov.w	r4, #4294967295
 80178c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80178c2:	4249      	negs	r1, r1
 80178c4:	940d      	str	r4, [sp, #52]	@ 0x34
 80178c6:	2400      	movs	r4, #0
 80178c8:	437b      	muls	r3, r7
 80178ca:	e758      	b.n	801777e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80178cc:	9905      	ldr	r1, [sp, #20]
 80178ce:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80178d2:	f009 0c1f 	and.w	ip, r9, #31
 80178d6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80178da:	f001 011f 	and.w	r1, r1, #31
 80178de:	45f3      	cmp	fp, lr
 80178e0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80178e4:	9102      	str	r1, [sp, #8]
 80178e6:	9904      	ldr	r1, [sp, #16]
 80178e8:	eba1 0406 	sub.w	r4, r1, r6
 80178ec:	d108      	bne.n	8017900 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80178ee:	9b02      	ldr	r3, [sp, #8]
 80178f0:	44a0      	add	r8, r4
 80178f2:	449c      	add	ip, r3
 80178f4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80178f8:	fb04 a40c 	mla	r4, r4, ip, sl
 80178fc:	80fc      	strh	r4, [r7, #6]
 80178fe:	e461      	b.n	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017900:	9905      	ldr	r1, [sp, #20]
 8017902:	ebb1 0109 	subs.w	r1, r1, r9
 8017906:	bf51      	iteee	pl
 8017908:	f1cc 0520 	rsbpl	r5, ip, #32
 801790c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017910:	4249      	negmi	r1, r1
 8017912:	2500      	movmi	r5, #0
 8017914:	bf5d      	ittte	pl
 8017916:	436c      	mulpl	r4, r5
 8017918:	2520      	movpl	r5, #32
 801791a:	f04f 0901 	movpl.w	r9, #1
 801791e:	f04f 39ff 	movmi.w	r9, #4294967295
 8017922:	9501      	str	r5, [sp, #4]
 8017924:	9b01      	ldr	r3, [sp, #4]
 8017926:	fb94 f5f1 	sdiv	r5, r4, r1
 801792a:	fb01 4415 	mls	r4, r1, r5, r4
 801792e:	449c      	add	ip, r3
 8017930:	eb0b 0309 	add.w	r3, fp, r9
 8017934:	2c00      	cmp	r4, #0
 8017936:	bfbc      	itt	lt
 8017938:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801793c:	1864      	addlt	r4, r4, r1
 801793e:	44a8      	add	r8, r5
 8017940:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017944:	f8a7 8004 	strh.w	r8, [r7, #4]
 8017948:	f8a7 c006 	strh.w	ip, [r7, #6]
 801794c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017950:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017954:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017958:	ea58 0707 	orrs.w	r7, r8, r7
 801795c:	d011      	beq.n	8017982 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801795e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017962:	f1b8 0f00 	cmp.w	r8, #0
 8017966:	db0c      	blt.n	8017982 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8017968:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801796a:	45b8      	cmp	r8, r7
 801796c:	da09      	bge.n	8017982 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801796e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8017972:	45b8      	cmp	r8, r7
 8017974:	bf3c      	itt	cc
 8017976:	f10c 0708 	addcc.w	r7, ip, #8
 801797a:	6107      	strcc	r7, [r0, #16]
 801797c:	f108 0701 	add.w	r7, r8, #1
 8017980:	6087      	str	r7, [r0, #8]
 8017982:	6907      	ldr	r7, [r0, #16]
 8017984:	f04f 0c00 	mov.w	ip, #0
 8017988:	b212      	sxth	r2, r2
 801798a:	459e      	cmp	lr, r3
 801798c:	803b      	strh	r3, [r7, #0]
 801798e:	442e      	add	r6, r5
 8017990:	807a      	strh	r2, [r7, #2]
 8017992:	f8a7 c004 	strh.w	ip, [r7, #4]
 8017996:	f8a7 c006 	strh.w	ip, [r7, #6]
 801799a:	d04b      	beq.n	8017a34 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801799c:	9f04      	ldr	r7, [sp, #16]
 801799e:	1a64      	subs	r4, r4, r1
 80179a0:	f04f 0a00 	mov.w	sl, #0
 80179a4:	1bbf      	subs	r7, r7, r6
 80179a6:	443d      	add	r5, r7
 80179a8:	016d      	lsls	r5, r5, #5
 80179aa:	fb95 f8f1 	sdiv	r8, r5, r1
 80179ae:	fb01 5518 	mls	r5, r1, r8, r5
 80179b2:	4565      	cmp	r5, ip
 80179b4:	bfbc      	itt	lt
 80179b6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80179ba:	186d      	addlt	r5, r5, r1
 80179bc:	f108 0701 	add.w	r7, r8, #1
 80179c0:	9703      	str	r7, [sp, #12]
 80179c2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80179c6:	1964      	adds	r4, r4, r5
 80179c8:	444b      	add	r3, r9
 80179ca:	bf54      	ite	pl
 80179cc:	9f03      	ldrpl	r7, [sp, #12]
 80179ce:	4647      	movmi	r7, r8
 80179d0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80179d4:	bf58      	it	pl
 80179d6:	1a64      	subpl	r4, r4, r1
 80179d8:	443e      	add	r6, r7
 80179da:	44bb      	add	fp, r7
 80179dc:	f8ac b004 	strh.w	fp, [ip, #4]
 80179e0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80179e4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80179e8:	f8ac b006 	strh.w	fp, [ip, #6]
 80179ec:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80179f0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80179f4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80179f8:	ea5b 0707 	orrs.w	r7, fp, r7
 80179fc:	d011      	beq.n	8017a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80179fe:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017a02:	f1bb 0f00 	cmp.w	fp, #0
 8017a06:	db0c      	blt.n	8017a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017a08:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8017a0a:	45bb      	cmp	fp, r7
 8017a0c:	da09      	bge.n	8017a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8017a0e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017a12:	45bb      	cmp	fp, r7
 8017a14:	bf3c      	itt	cc
 8017a16:	f10c 0708 	addcc.w	r7, ip, #8
 8017a1a:	6107      	strcc	r7, [r0, #16]
 8017a1c:	f10b 0701 	add.w	r7, fp, #1
 8017a20:	6087      	str	r7, [r0, #8]
 8017a22:	6907      	ldr	r7, [r0, #16]
 8017a24:	459e      	cmp	lr, r3
 8017a26:	803b      	strh	r3, [r7, #0]
 8017a28:	807a      	strh	r2, [r7, #2]
 8017a2a:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017a2e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017a32:	d1c6      	bne.n	80179c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8017a34:	9b04      	ldr	r3, [sp, #16]
 8017a36:	1b9e      	subs	r6, r3, r6
 8017a38:	6903      	ldr	r3, [r0, #16]
 8017a3a:	889a      	ldrh	r2, [r3, #4]
 8017a3c:	4432      	add	r2, r6
 8017a3e:	809a      	strh	r2, [r3, #4]
 8017a40:	9a02      	ldr	r2, [sp, #8]
 8017a42:	f102 0c20 	add.w	ip, r2, #32
 8017a46:	9a01      	ldr	r2, [sp, #4]
 8017a48:	ebac 0c02 	sub.w	ip, ip, r2
 8017a4c:	88da      	ldrh	r2, [r3, #6]
 8017a4e:	fb06 260c 	mla	r6, r6, ip, r2
 8017a52:	80de      	strh	r6, [r3, #6]
 8017a54:	f7ff bbb6 	b.w	80171c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08017a58 <_ZN8touchgfx7Outline6lineToEii>:
 8017a58:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017a5a:	079b      	lsls	r3, r3, #30
 8017a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a5e:	460e      	mov	r6, r1
 8017a60:	4615      	mov	r5, r2
 8017a62:	d511      	bpl.n	8017a88 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017a64:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8017a68:	ea86 0701 	eor.w	r7, r6, r1
 8017a6c:	ea85 0302 	eor.w	r3, r5, r2
 8017a70:	433b      	orrs	r3, r7
 8017a72:	d009      	beq.n	8017a88 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8017a74:	4633      	mov	r3, r6
 8017a76:	9500      	str	r5, [sp, #0]
 8017a78:	f7ff fb4c 	bl	8017114 <_ZN8touchgfx7Outline10renderLineEiiii>
 8017a7c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017a7e:	f043 0301 	orr.w	r3, r3, #1
 8017a82:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8017a86:	6243      	str	r3, [r0, #36]	@ 0x24
 8017a88:	b003      	add	sp, #12
 8017a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017a8c <_ZN8touchgfx7Outline6moveToEii>:
 8017a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a8e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017a90:	4615      	mov	r5, r2
 8017a92:	4604      	mov	r4, r0
 8017a94:	460e      	mov	r6, r1
 8017a96:	079a      	lsls	r2, r3, #30
 8017a98:	d401      	bmi.n	8017a9e <_ZN8touchgfx7Outline6moveToEii+0x12>
 8017a9a:	f7ff fb07 	bl	80170ac <_ZN8touchgfx7Outline5resetEv>
 8017a9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017aa0:	07db      	lsls	r3, r3, #31
 8017aa2:	d504      	bpl.n	8017aae <_ZN8touchgfx7Outline6moveToEii+0x22>
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8017aaa:	f7ff ffd5 	bl	8017a58 <_ZN8touchgfx7Outline6lineToEii>
 8017aae:	6923      	ldr	r3, [r4, #16]
 8017ab0:	1170      	asrs	r0, r6, #5
 8017ab2:	1169      	asrs	r1, r5, #5
 8017ab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ab8:	4290      	cmp	r0, r2
 8017aba:	d103      	bne.n	8017ac4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8017abc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017ac0:	4291      	cmp	r1, r2
 8017ac2:	d01a      	beq.n	8017afa <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8017ac4:	88df      	ldrh	r7, [r3, #6]
 8017ac6:	889a      	ldrh	r2, [r3, #4]
 8017ac8:	433a      	orrs	r2, r7
 8017aca:	d010      	beq.n	8017aee <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017acc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017ad0:	2a00      	cmp	r2, #0
 8017ad2:	db0c      	blt.n	8017aee <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017ad4:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8017ad6:	42ba      	cmp	r2, r7
 8017ad8:	da09      	bge.n	8017aee <_ZN8touchgfx7Outline6moveToEii+0x62>
 8017ada:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8017ade:	42ba      	cmp	r2, r7
 8017ae0:	f102 0201 	add.w	r2, r2, #1
 8017ae4:	bf38      	it	cc
 8017ae6:	3308      	addcc	r3, #8
 8017ae8:	60a2      	str	r2, [r4, #8]
 8017aea:	bf38      	it	cc
 8017aec:	6123      	strcc	r3, [r4, #16]
 8017aee:	6923      	ldr	r3, [r4, #16]
 8017af0:	2200      	movs	r2, #0
 8017af2:	8018      	strh	r0, [r3, #0]
 8017af4:	8059      	strh	r1, [r3, #2]
 8017af6:	809a      	strh	r2, [r3, #4]
 8017af8:	80da      	strh	r2, [r3, #6]
 8017afa:	6166      	str	r6, [r4, #20]
 8017afc:	6225      	str	r5, [r4, #32]
 8017afe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017b04 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8017b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b08:	b0d0      	sub	sp, #320	@ 0x140
 8017b0a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8017b0e:	466c      	mov	r4, sp
 8017b10:	4627      	mov	r7, r4
 8017b12:	1a0d      	subs	r5, r1, r0
 8017b14:	f100 0308 	add.w	r3, r0, #8
 8017b18:	2d48      	cmp	r5, #72	@ 0x48
 8017b1a:	f340 80d5 	ble.w	8017cc8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017b1e:	112d      	asrs	r5, r5, #4
 8017b20:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017b24:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017b28:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8017b2c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8017b30:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8017b34:	6816      	ldr	r6, [r2, #0]
 8017b36:	6006      	str	r6, [r0, #0]
 8017b38:	6856      	ldr	r6, [r2, #4]
 8017b3a:	6046      	str	r6, [r0, #4]
 8017b3c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017b40:	f8a2 8002 	strh.w	r8, [r2, #2]
 8017b44:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017b48:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017b4c:	f1a1 0208 	sub.w	r2, r1, #8
 8017b50:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8017b54:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8017b58:	4565      	cmp	r5, ip
 8017b5a:	db06      	blt.n	8017b6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8017b5c:	d119      	bne.n	8017b92 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8017b5e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8017b62:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8017b66:	42ae      	cmp	r6, r5
 8017b68:	dd13      	ble.n	8017b92 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8017b6a:	460e      	mov	r6, r1
 8017b6c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8017b70:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8017b74:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8017b78:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8017b7c:	601d      	str	r5, [r3, #0]
 8017b7e:	6875      	ldr	r5, [r6, #4]
 8017b80:	605d      	str	r5, [r3, #4]
 8017b82:	f821 9c08 	strh.w	r9, [r1, #-8]
 8017b86:	f821 cc06 	strh.w	ip, [r1, #-6]
 8017b8a:	f821 8c04 	strh.w	r8, [r1, #-4]
 8017b8e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8017b92:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017b96:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8017b9a:	42ae      	cmp	r6, r5
 8017b9c:	db06      	blt.n	8017bac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8017b9e:	d116      	bne.n	8017bce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017ba0:	f9b0 c000 	ldrsh.w	ip, [r0]
 8017ba4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8017ba8:	45ac      	cmp	ip, r5
 8017baa:	da10      	bge.n	8017bce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017bac:	681d      	ldr	r5, [r3, #0]
 8017bae:	f9b0 8000 	ldrsh.w	r8, [r0]
 8017bb2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8017bb6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017bba:	6005      	str	r5, [r0, #0]
 8017bbc:	685d      	ldr	r5, [r3, #4]
 8017bbe:	f8a0 8008 	strh.w	r8, [r0, #8]
 8017bc2:	6045      	str	r5, [r0, #4]
 8017bc4:	8146      	strh	r6, [r0, #10]
 8017bc6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8017bca:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017bce:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8017bd2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8017bd6:	4565      	cmp	r5, ip
 8017bd8:	db06      	blt.n	8017be8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8017bda:	d119      	bne.n	8017c10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017bdc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8017be0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017be4:	42ae      	cmp	r6, r5
 8017be6:	da13      	bge.n	8017c10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017be8:	460e      	mov	r6, r1
 8017bea:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017bee:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8017bf2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8017bf6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8017bfa:	6005      	str	r5, [r0, #0]
 8017bfc:	6875      	ldr	r5, [r6, #4]
 8017bfe:	6045      	str	r5, [r0, #4]
 8017c00:	f821 9c08 	strh.w	r9, [r1, #-8]
 8017c04:	f821 cc06 	strh.w	ip, [r1, #-6]
 8017c08:	f821 8c04 	strh.w	r8, [r1, #-4]
 8017c0c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8017c10:	3308      	adds	r3, #8
 8017c12:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8017c16:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8017c1a:	45e6      	cmp	lr, ip
 8017c1c:	dbf8      	blt.n	8017c10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017c1e:	d105      	bne.n	8017c2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017c20:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017c24:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017c28:	42ae      	cmp	r6, r5
 8017c2a:	dbf1      	blt.n	8017c10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017c2c:	4615      	mov	r5, r2
 8017c2e:	3a08      	subs	r2, #8
 8017c30:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8017c34:	45b4      	cmp	ip, r6
 8017c36:	dbf9      	blt.n	8017c2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017c38:	d105      	bne.n	8017c46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8017c3a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8017c3e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8017c42:	45b0      	cmp	r8, r6
 8017c44:	dbf2      	blt.n	8017c2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017c46:	4293      	cmp	r3, r2
 8017c48:	f1a5 0608 	sub.w	r6, r5, #8
 8017c4c:	d816      	bhi.n	8017c7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8017c4e:	f8d6 c000 	ldr.w	ip, [r6]
 8017c52:	f9b3 a000 	ldrsh.w	sl, [r3]
 8017c56:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8017c5a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8017c5e:	f8c3 c000 	str.w	ip, [r3]
 8017c62:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8017c66:	f8c3 c004 	str.w	ip, [r3, #4]
 8017c6a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8017c6e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8017c72:	f825 9c04 	strh.w	r9, [r5, #-4]
 8017c76:	f825 8c02 	strh.w	r8, [r5, #-2]
 8017c7a:	e7c9      	b.n	8017c10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017c7c:	f8d6 e000 	ldr.w	lr, [r6]
 8017c80:	f9b0 a000 	ldrsh.w	sl, [r0]
 8017c84:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8017c88:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8017c8c:	f8c0 e000 	str.w	lr, [r0]
 8017c90:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017c94:	1a16      	subs	r6, r2, r0
 8017c96:	f8c0 e004 	str.w	lr, [r0, #4]
 8017c9a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8017c9e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8017ca2:	f825 9c04 	strh.w	r9, [r5, #-4]
 8017ca6:	f825 8c02 	strh.w	r8, [r5, #-2]
 8017caa:	1acd      	subs	r5, r1, r3
 8017cac:	10ed      	asrs	r5, r5, #3
 8017cae:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8017cb2:	bfb5      	itete	lt
 8017cb4:	e9c4 0200 	strdlt	r0, r2, [r4]
 8017cb8:	e9c4 3100 	strdge	r3, r1, [r4]
 8017cbc:	460a      	movlt	r2, r1
 8017cbe:	4603      	movge	r3, r0
 8017cc0:	3408      	adds	r4, #8
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	4611      	mov	r1, r2
 8017cc6:	e724      	b.n	8017b12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8017cc8:	4299      	cmp	r1, r3
 8017cca:	d927      	bls.n	8017d1c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8017ccc:	f1a3 0210 	sub.w	r2, r3, #16
 8017cd0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8017cd4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8017cd8:	45ac      	cmp	ip, r5
 8017cda:	db06      	blt.n	8017cea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8017cdc:	d11c      	bne.n	8017d18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8017cde:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8017ce2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8017ce6:	42ae      	cmp	r6, r5
 8017ce8:	da16      	bge.n	8017d18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8017cea:	4615      	mov	r5, r2
 8017cec:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8017cf0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8017cf4:	3a08      	subs	r2, #8
 8017cf6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8017cfa:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8017cfe:	6196      	str	r6, [r2, #24]
 8017d00:	42a8      	cmp	r0, r5
 8017d02:	686e      	ldr	r6, [r5, #4]
 8017d04:	f8a2 9010 	strh.w	r9, [r2, #16]
 8017d08:	61d6      	str	r6, [r2, #28]
 8017d0a:	f8a2 c012 	strh.w	ip, [r2, #18]
 8017d0e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8017d12:	f8a2 e016 	strh.w	lr, [r2, #22]
 8017d16:	d1db      	bne.n	8017cd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8017d18:	3308      	adds	r3, #8
 8017d1a:	e7d5      	b.n	8017cc8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017d1c:	42bc      	cmp	r4, r7
 8017d1e:	d903      	bls.n	8017d28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8017d20:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8017d24:	3c08      	subs	r4, #8
 8017d26:	e6f4      	b.n	8017b12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8017d28:	b050      	add	sp, #320	@ 0x140
 8017d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017d2e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8017d2e:	b510      	push	{r4, lr}
 8017d30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017d32:	4604      	mov	r4, r0
 8017d34:	07da      	lsls	r2, r3, #31
 8017d36:	d507      	bpl.n	8017d48 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8017d38:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8017d3c:	f7ff fe8c 	bl	8017a58 <_ZN8touchgfx7Outline6lineToEii>
 8017d40:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017d42:	f023 0301 	bic.w	r3, r3, #1
 8017d46:	6243      	str	r3, [r0, #36]	@ 0x24
 8017d48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017d4a:	079b      	lsls	r3, r3, #30
 8017d4c:	d521      	bpl.n	8017d92 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8017d4e:	6923      	ldr	r3, [r4, #16]
 8017d50:	88d9      	ldrh	r1, [r3, #6]
 8017d52:	889a      	ldrh	r2, [r3, #4]
 8017d54:	430a      	orrs	r2, r1
 8017d56:	d010      	beq.n	8017d7a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017d58:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017d5c:	2a00      	cmp	r2, #0
 8017d5e:	db0c      	blt.n	8017d7a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017d60:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017d62:	428a      	cmp	r2, r1
 8017d64:	da09      	bge.n	8017d7a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8017d66:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8017d6a:	4291      	cmp	r1, r2
 8017d6c:	f102 0201 	add.w	r2, r2, #1
 8017d70:	bf88      	it	hi
 8017d72:	3308      	addhi	r3, #8
 8017d74:	60a2      	str	r2, [r4, #8]
 8017d76:	bf88      	it	hi
 8017d78:	6123      	strhi	r3, [r4, #16]
 8017d7a:	68a1      	ldr	r1, [r4, #8]
 8017d7c:	b129      	cbz	r1, 8017d8a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8017d7e:	6863      	ldr	r3, [r4, #4]
 8017d80:	4299      	cmp	r1, r3
 8017d82:	d802      	bhi.n	8017d8a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8017d84:	68e0      	ldr	r0, [r4, #12]
 8017d86:	f7ff febd 	bl	8017b04 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8017d8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8017d8c:	f023 0302 	bic.w	r3, r3, #2
 8017d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8017d92:	68e0      	ldr	r0, [r4, #12]
 8017d94:	bd10      	pop	{r4, pc}
	...

08017d98 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017d98:	4b02      	ldr	r3, [pc, #8]	@ (8017da4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017d9a:	6018      	str	r0, [r3, #0]
 8017d9c:	4b02      	ldr	r3, [pc, #8]	@ (8017da8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017d9e:	6019      	str	r1, [r3, #0]
 8017da0:	4770      	bx	lr
 8017da2:	bf00      	nop
 8017da4:	240284f0 	.word	0x240284f0
 8017da8:	240284f4 	.word	0x240284f4

08017dac <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8017dac:	2300      	movs	r3, #0
 8017dae:	4a02      	ldr	r2, [pc, #8]	@ (8017db8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8017db0:	6013      	str	r3, [r2, #0]
 8017db2:	4a02      	ldr	r2, [pc, #8]	@ (8017dbc <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8017db4:	6013      	str	r3, [r2, #0]
 8017db6:	4770      	bx	lr
 8017db8:	240284f0 	.word	0x240284f0
 8017dbc:	240284f4 	.word	0x240284f4

08017dc0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017dc0:	4b01      	ldr	r3, [pc, #4]	@ (8017dc8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017dc2:	6818      	ldr	r0, [r3, #0]
 8017dc4:	4770      	bx	lr
 8017dc6:	bf00      	nop
 8017dc8:	240284f0 	.word	0x240284f0

08017dcc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017dcc:	4b01      	ldr	r3, [pc, #4]	@ (8017dd4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017dce:	6818      	ldr	r0, [r3, #0]
 8017dd0:	4770      	bx	lr
 8017dd2:	bf00      	nop
 8017dd4:	240284f4 	.word	0x240284f4

08017dd8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8017dd8:	b510      	push	{r4, lr}
 8017dda:	6803      	ldr	r3, [r0, #0]
 8017ddc:	460c      	mov	r4, r1
 8017dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017de0:	4798      	blx	r3
 8017de2:	1b03      	subs	r3, r0, r4
 8017de4:	4258      	negs	r0, r3
 8017de6:	4158      	adcs	r0, r3
 8017de8:	bd10      	pop	{r4, pc}
	...

08017dec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017dec:	4b01      	ldr	r3, [pc, #4]	@ (8017df4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017dee:	6019      	str	r1, [r3, #0]
 8017df0:	4770      	bx	lr
 8017df2:	bf00      	nop
 8017df4:	240284f8 	.word	0x240284f8

08017df8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dfc:	4696      	mov	lr, r2
 8017dfe:	b097      	sub	sp, #92	@ 0x5c
 8017e00:	4605      	mov	r5, r0
 8017e02:	4614      	mov	r4, r2
 8017e04:	460e      	mov	r6, r1
 8017e06:	461f      	mov	r7, r3
 8017e08:	f10d 0c1c 	add.w	ip, sp, #28
 8017e0c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8017e10:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8017e14:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8017e18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e20:	f8de 3000 	ldr.w	r3, [lr]
 8017e24:	f104 0e14 	add.w	lr, r4, #20
 8017e28:	f8cc 3000 	str.w	r3, [ip]
 8017e2c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017e30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e38:	f8de 3000 	ldr.w	r3, [lr]
 8017e3c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8017e40:	f8cc 3000 	str.w	r3, [ip]
 8017e44:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8017e48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e50:	f8de 3000 	ldr.w	r3, [lr]
 8017e54:	4631      	mov	r1, r6
 8017e56:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8017e58:	4628      	mov	r0, r5
 8017e5a:	f8cc 3000 	str.w	r3, [ip]
 8017e5e:	682b      	ldr	r3, [r5, #0]
 8017e60:	9201      	str	r2, [sp, #4]
 8017e62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017e64:	f8cd 8008 	str.w	r8, [sp, #8]
 8017e68:	9200      	str	r2, [sp, #0]
 8017e6a:	aa07      	add	r2, sp, #28
 8017e6c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017e70:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8017e74:	463b      	mov	r3, r7
 8017e76:	47d8      	blx	fp
 8017e78:	46a6      	mov	lr, r4
 8017e7a:	f10d 0c1c 	add.w	ip, sp, #28
 8017e7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e86:	f8de 3000 	ldr.w	r3, [lr]
 8017e8a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8017e8e:	343c      	adds	r4, #60	@ 0x3c
 8017e90:	f8cc 3000 	str.w	r3, [ip]
 8017e94:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017e98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ea0:	f8de 3000 	ldr.w	r3, [lr]
 8017ea4:	f8cc 3000 	str.w	r3, [ip]
 8017ea8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8017eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017eae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	4631      	mov	r1, r6
 8017eb6:	4628      	mov	r0, r5
 8017eb8:	f8cc 3000 	str.w	r3, [ip]
 8017ebc:	682b      	ldr	r3, [r5, #0]
 8017ebe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017ec2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8017ec4:	f8cd 8008 	str.w	r8, [sp, #8]
 8017ec8:	9201      	str	r2, [sp, #4]
 8017eca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017ecc:	9200      	str	r2, [sp, #0]
 8017ece:	aa07      	add	r2, sp, #28
 8017ed0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8017ed2:	463b      	mov	r3, r7
 8017ed4:	47a0      	blx	r4
 8017ed6:	b017      	add	sp, #92	@ 0x5c
 8017ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017edc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ee0:	b08d      	sub	sp, #52	@ 0x34
 8017ee2:	4688      	mov	r8, r1
 8017ee4:	f8d3 c000 	ldr.w	ip, [r3]
 8017ee8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017eea:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8017eee:	680f      	ldr	r7, [r1, #0]
 8017ef0:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8017ef4:	eba7 070c 	sub.w	r7, r7, ip
 8017ef8:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8017efc:	edd3 6a07 	vldr	s13, [r3, #28]
 8017f00:	42bc      	cmp	r4, r7
 8017f02:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017f04:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8017f08:	bfa8      	it	ge
 8017f0a:	463c      	movge	r4, r7
 8017f0c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017f10:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017f14:	ee07 4a90 	vmov	s15, r4
 8017f18:	eb09 0e0c 	add.w	lr, r9, ip
 8017f1c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8017f20:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017f24:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8017f28:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8017f2c:	4571      	cmp	r1, lr
 8017f2e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017f32:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017f36:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017f3a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017f3e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017f42:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017f46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017f4a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017f4e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017f52:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017f56:	f340 808c 	ble.w	8018072 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8017f5a:	eba1 060e 	sub.w	r6, r1, lr
 8017f5e:	fb96 f5f4 	sdiv	r5, r6, r4
 8017f62:	ee07 5a10 	vmov	s14, r5
 8017f66:	2d00      	cmp	r5, #0
 8017f68:	fb04 6615 	mls	r6, r4, r5, r6
 8017f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f70:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017f74:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017f78:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017f7c:	dd12      	ble.n	8017fa4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017f7e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017f82:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017f86:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017f8a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f92:	bf14      	ite	ne
 8017f94:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017f98:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017f9c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017fa0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017fa4:	fb05 f204 	mul.w	r2, r5, r4
 8017fa8:	1abf      	subs	r7, r7, r2
 8017faa:	4494      	add	ip, r2
 8017fac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017fb0:	4411      	add	r1, r2
 8017fb2:	eb09 020c 	add.w	r2, r9, ip
 8017fb6:	b209      	sxth	r1, r1
 8017fb8:	443a      	add	r2, r7
 8017fba:	428a      	cmp	r2, r1
 8017fbc:	bfc4      	itt	gt
 8017fbe:	eba1 0209 	subgt.w	r2, r1, r9
 8017fc2:	eba2 070c 	subgt.w	r7, r2, ip
 8017fc6:	2f00      	cmp	r7, #0
 8017fc8:	dd50      	ble.n	801806c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017fca:	fb97 f1f4 	sdiv	r1, r7, r4
 8017fce:	fb04 7211 	mls	r2, r4, r1, r7
 8017fd2:	b90a      	cbnz	r2, 8017fd8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017fd4:	3901      	subs	r1, #1
 8017fd6:	4622      	mov	r2, r4
 8017fd8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017fdc:	6840      	ldr	r0, [r0, #4]
 8017fde:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8017fe2:	44b6      	add	lr, r6
 8017fe4:	f8d0 a000 	ldr.w	sl, [r0]
 8017fe8:	2900      	cmp	r1, #0
 8017fea:	bfcc      	ite	gt
 8017fec:	46a1      	movgt	r9, r4
 8017fee:	4691      	movle	r9, r2
 8017ff0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8017ff2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8017ff4:	fb04 e505 	mla	r5, r4, r5, lr
 8017ff8:	eef0 6a42 	vmov.f32	s13, s4
 8017ffc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8018000:	9008      	str	r0, [sp, #32]
 8018002:	eeb0 7a61 	vmov.f32	s14, s3
 8018006:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8018008:	695b      	ldr	r3, [r3, #20]
 801800a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801800e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018012:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018016:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8018018:	445b      	add	r3, fp
 801801a:	9307      	str	r3, [sp, #28]
 801801c:	ee16 3a90 	vmov	r3, s13
 8018020:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018024:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018028:	ee21 3a23 	vmul.f32	s6, s2, s7
 801802c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018030:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018034:	ee17 7a90 	vmov	r7, s15
 8018038:	ee73 7a42 	vsub.f32	s15, s6, s4
 801803c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018040:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018044:	ee17 ca90 	vmov	ip, s15
 8018048:	fb9c fcf4 	sdiv	ip, ip, r4
 801804c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018050:	9302      	str	r3, [sp, #8]
 8018052:	ee17 3a10 	vmov	r3, s14
 8018056:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801805a:	fb07 3706 	mla	r7, r7, r6, r3
 801805e:	eba9 0306 	sub.w	r3, r9, r6
 8018062:	e9cd 4700 	strd	r4, r7, [sp]
 8018066:	f8da 4008 	ldr.w	r4, [sl, #8]
 801806a:	47a0      	blx	r4
 801806c:	b00d      	add	sp, #52	@ 0x34
 801806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018072:	2500      	movs	r5, #0
 8018074:	462e      	mov	r6, r5
 8018076:	e799      	b.n	8017fac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	b0db      	sub	sp, #364	@ 0x16c
 801807e:	461d      	mov	r5, r3
 8018080:	4614      	mov	r4, r2
 8018082:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8018086:	910f      	str	r1, [sp, #60]	@ 0x3c
 8018088:	4629      	mov	r1, r5
 801808a:	930a      	str	r3, [sp, #40]	@ 0x28
 801808c:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8018090:	9009      	str	r0, [sp, #36]	@ 0x24
 8018092:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018094:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8018098:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801809c:	9310      	str	r3, [sp, #64]	@ 0x40
 801809e:	6803      	ldr	r3, [r0, #0]
 80180a0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80180a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80180a6:	47b8      	blx	r7
 80180a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180aa:	6058      	str	r0, [r3, #4]
 80180ac:	2800      	cmp	r0, #0
 80180ae:	f000 83a1 	beq.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80180b2:	682b      	ldr	r3, [r5, #0]
 80180b4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80180b8:	ed94 7a02 	vldr	s14, [r4, #8]
 80180bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80180be:	686b      	ldr	r3, [r5, #4]
 80180c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80180c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80180c6:	4bc1      	ldr	r3, [pc, #772]	@ (80183cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80180c8:	7819      	ldrb	r1, [r3, #0]
 80180ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80180ce:	2900      	cmp	r1, #0
 80180d0:	bf16      	itet	ne
 80180d2:	4619      	movne	r1, r3
 80180d4:	4611      	moveq	r1, r2
 80180d6:	4613      	movne	r3, r2
 80180d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180dc:	9116      	str	r1, [sp, #88]	@ 0x58
 80180de:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80180e2:	f240 8387 	bls.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80180e6:	ed94 7a07 	vldr	s14, [r4, #28]
 80180ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80180ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f2:	f240 837f 	bls.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80180f6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80180fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80180fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018102:	f240 8377 	bls.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018106:	6822      	ldr	r2, [r4, #0]
 8018108:	4bb1      	ldr	r3, [pc, #708]	@ (80183d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801810a:	429a      	cmp	r2, r3
 801810c:	f2c0 8372 	blt.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018110:	49b0      	ldr	r1, [pc, #704]	@ (80183d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018112:	6963      	ldr	r3, [r4, #20]
 8018114:	428a      	cmp	r2, r1
 8018116:	f300 836d 	bgt.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801811a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801811e:	48ae      	ldr	r0, [pc, #696]	@ (80183d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018120:	33ff      	adds	r3, #255	@ 0xff
 8018122:	4283      	cmp	r3, r0
 8018124:	f200 8366 	bhi.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018128:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801812a:	4dac      	ldr	r5, [pc, #688]	@ (80183dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801812c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8018130:	33ff      	adds	r3, #255	@ 0xff
 8018132:	42ab      	cmp	r3, r5
 8018134:	f200 835e 	bhi.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018138:	6862      	ldr	r2, [r4, #4]
 801813a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801813e:	33ff      	adds	r3, #255	@ 0xff
 8018140:	4283      	cmp	r3, r0
 8018142:	f200 8357 	bhi.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018146:	69a1      	ldr	r1, [r4, #24]
 8018148:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801814c:	33ff      	adds	r3, #255	@ 0xff
 801814e:	4283      	cmp	r3, r0
 8018150:	f200 8350 	bhi.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018154:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8018156:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801815a:	30ff      	adds	r0, #255	@ 0xff
 801815c:	42a8      	cmp	r0, r5
 801815e:	f200 8349 	bhi.w	80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018162:	428a      	cmp	r2, r1
 8018164:	f280 8110 	bge.w	8018388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018168:	429a      	cmp	r2, r3
 801816a:	f300 8119 	bgt.w	80183a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801816e:	4299      	cmp	r1, r3
 8018170:	f280 811d 	bge.w	80183ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018174:	2502      	movs	r5, #2
 8018176:	2701      	movs	r7, #1
 8018178:	46a9      	mov	r9, r5
 801817a:	46b8      	mov	r8, r7
 801817c:	f04f 0a00 	mov.w	sl, #0
 8018180:	4621      	mov	r1, r4
 8018182:	a849      	add	r0, sp, #292	@ 0x124
 8018184:	f004 f97a 	bl	801c47c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018188:	4622      	mov	r2, r4
 801818a:	4653      	mov	r3, sl
 801818c:	a949      	add	r1, sp, #292	@ 0x124
 801818e:	f8cd 9000 	str.w	r9, [sp]
 8018192:	a819      	add	r0, sp, #100	@ 0x64
 8018194:	f004 faa2 	bl	801c6dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018198:	4622      	mov	r2, r4
 801819a:	4653      	mov	r3, sl
 801819c:	a949      	add	r1, sp, #292	@ 0x124
 801819e:	f8cd 8000 	str.w	r8, [sp]
 80181a2:	a829      	add	r0, sp, #164	@ 0xa4
 80181a4:	f004 fa9a 	bl	801c6dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80181a8:	4643      	mov	r3, r8
 80181aa:	4622      	mov	r2, r4
 80181ac:	a949      	add	r1, sp, #292	@ 0x124
 80181ae:	f8cd 9000 	str.w	r9, [sp]
 80181b2:	a839      	add	r0, sp, #228	@ 0xe4
 80181b4:	f004 fa92 	bl	801c6dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80181b8:	42af      	cmp	r7, r5
 80181ba:	af12      	add	r7, sp, #72	@ 0x48
 80181bc:	bfb7      	itett	lt
 80181be:	2300      	movlt	r3, #0
 80181c0:	2301      	movge	r3, #1
 80181c2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80181c4:	ac19      	addlt	r4, sp, #100	@ 0x64
 80181c6:	bfb1      	iteee	lt
 80181c8:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80181ca:	ad19      	addge	r5, sp, #100	@ 0x64
 80181cc:	930e      	strge	r3, [sp, #56]	@ 0x38
 80181ce:	ac29      	addge	r4, sp, #164	@ 0xa4
 80181d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181d6:	e887 0003 	stmia.w	r7, {r0, r1}
 80181da:	b928      	cbnz	r0, 80181e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80181dc:	4b80      	ldr	r3, [pc, #512]	@ (80183e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80181de:	6818      	ldr	r0, [r3, #0]
 80181e0:	6803      	ldr	r3, [r0, #0]
 80181e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181e4:	4798      	blx	r3
 80181e6:	6038      	str	r0, [r7, #0]
 80181e8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80181ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80181ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80181f2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80181f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80181f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80181f8:	6963      	ldr	r3, [r4, #20]
 80181fa:	440b      	add	r3, r1
 80181fc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018200:	4408      	add	r0, r1
 8018202:	b200      	sxth	r0, r0
 8018204:	4283      	cmp	r3, r0
 8018206:	900d      	str	r0, [sp, #52]	@ 0x34
 8018208:	f280 80dd 	bge.w	80183c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801820c:	428b      	cmp	r3, r1
 801820e:	da08      	bge.n	8018222 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018210:	2a00      	cmp	r2, #0
 8018212:	dd06      	ble.n	8018222 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018214:	1acb      	subs	r3, r1, r3
 8018216:	429a      	cmp	r2, r3
 8018218:	f2c0 80e4 	blt.w	80183e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801821c:	2b00      	cmp	r3, #0
 801821e:	f300 80e2 	bgt.w	80183e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018222:	6967      	ldr	r7, [r4, #20]
 8018224:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801822a:	443b      	add	r3, r7
 801822c:	461f      	mov	r7, r3
 801822e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018230:	1bdf      	subs	r7, r3, r7
 8018232:	4297      	cmp	r7, r2
 8018234:	bfa8      	it	ge
 8018236:	4617      	movge	r7, r2
 8018238:	2f00      	cmp	r7, #0
 801823a:	f340 8166 	ble.w	801850a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801823e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8018240:	6829      	ldr	r1, [r5, #0]
 8018242:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018246:	f9bb 3000 	ldrsh.w	r3, [fp]
 801824a:	4411      	add	r1, r2
 801824c:	6820      	ldr	r0, [r4, #0]
 801824e:	4299      	cmp	r1, r3
 8018250:	dd1a      	ble.n	8018288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018252:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018256:	4402      	add	r2, r0
 8018258:	440b      	add	r3, r1
 801825a:	b21b      	sxth	r3, r3
 801825c:	429a      	cmp	r2, r3
 801825e:	dc13      	bgt.n	8018288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018260:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018262:	a912      	add	r1, sp, #72	@ 0x48
 8018264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	9206      	str	r2, [sp, #24]
 801826c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801826e:	9500      	str	r5, [sp, #0]
 8018270:	9205      	str	r2, [sp, #20]
 8018272:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018274:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018278:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801827a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801827e:	aa49      	add	r2, sp, #292	@ 0x124
 8018280:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8018284:	4623      	mov	r3, r4
 8018286:	47c8      	blx	r9
 8018288:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801828c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018290:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8018294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018298:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801829c:	68a1      	ldr	r1, [r4, #8]
 801829e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80182a2:	ed94 6a08 	vldr	s12, [r4, #32]
 80182a6:	edd4 6a07 	vldr	s13, [r4, #28]
 80182aa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80182ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80182b2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80182b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80182ba:	edc4 6a07 	vstr	s13, [r4, #28]
 80182be:	441a      	add	r2, r3
 80182c0:	6963      	ldr	r3, [r4, #20]
 80182c2:	3301      	adds	r3, #1
 80182c4:	6022      	str	r2, [r4, #0]
 80182c6:	6163      	str	r3, [r4, #20]
 80182c8:	69a3      	ldr	r3, [r4, #24]
 80182ca:	3b01      	subs	r3, #1
 80182cc:	61a3      	str	r3, [r4, #24]
 80182ce:	6923      	ldr	r3, [r4, #16]
 80182d0:	440b      	add	r3, r1
 80182d2:	68e1      	ldr	r1, [r4, #12]
 80182d4:	428b      	cmp	r3, r1
 80182d6:	6123      	str	r3, [r4, #16]
 80182d8:	db15      	blt.n	8018306 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80182da:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80182de:	3201      	adds	r2, #1
 80182e0:	1a5b      	subs	r3, r3, r1
 80182e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80182e6:	6022      	str	r2, [r4, #0]
 80182e8:	6123      	str	r3, [r4, #16]
 80182ea:	edc4 6a07 	vstr	s13, [r4, #28]
 80182ee:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80182f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80182f6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80182fa:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80182fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018302:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018306:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801830a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801830e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018316:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801831a:	68a9      	ldr	r1, [r5, #8]
 801831c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018320:	ed95 6a08 	vldr	s12, [r5, #32]
 8018324:	edd5 6a07 	vldr	s13, [r5, #28]
 8018328:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801832c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018330:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018334:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018338:	edc5 6a07 	vstr	s13, [r5, #28]
 801833c:	441a      	add	r2, r3
 801833e:	696b      	ldr	r3, [r5, #20]
 8018340:	3301      	adds	r3, #1
 8018342:	602a      	str	r2, [r5, #0]
 8018344:	616b      	str	r3, [r5, #20]
 8018346:	69ab      	ldr	r3, [r5, #24]
 8018348:	3b01      	subs	r3, #1
 801834a:	61ab      	str	r3, [r5, #24]
 801834c:	692b      	ldr	r3, [r5, #16]
 801834e:	440b      	add	r3, r1
 8018350:	68e9      	ldr	r1, [r5, #12]
 8018352:	428b      	cmp	r3, r1
 8018354:	612b      	str	r3, [r5, #16]
 8018356:	db15      	blt.n	8018384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018358:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801835c:	3201      	adds	r2, #1
 801835e:	1a5b      	subs	r3, r3, r1
 8018360:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018364:	602a      	str	r2, [r5, #0]
 8018366:	612b      	str	r3, [r5, #16]
 8018368:	edc5 6a07 	vstr	s13, [r5, #28]
 801836c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8018370:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018374:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8018378:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801837c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018380:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018384:	3f01      	subs	r7, #1
 8018386:	e757      	b.n	8018238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018388:	4299      	cmp	r1, r3
 801838a:	dc13      	bgt.n	80183b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801838c:	429a      	cmp	r2, r3
 801838e:	da14      	bge.n	80183ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018390:	2502      	movs	r5, #2
 8018392:	2703      	movs	r7, #3
 8018394:	f04f 0800 	mov.w	r8, #0
 8018398:	46a9      	mov	r9, r5
 801839a:	f04f 0a01 	mov.w	sl, #1
 801839e:	e6ef      	b.n	8018180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80183a0:	2501      	movs	r5, #1
 80183a2:	2700      	movs	r7, #0
 80183a4:	46a9      	mov	r9, r5
 80183a6:	46b8      	mov	r8, r7
 80183a8:	f04f 0a02 	mov.w	sl, #2
 80183ac:	e6e8      	b.n	8018180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80183ae:	2501      	movs	r5, #1
 80183b0:	2702      	movs	r7, #2
 80183b2:	e6e1      	b.n	8018178 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80183b4:	2500      	movs	r5, #0
 80183b6:	2701      	movs	r7, #1
 80183b8:	e7f4      	b.n	80183a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80183ba:	2702      	movs	r7, #2
 80183bc:	2503      	movs	r5, #3
 80183be:	f04f 0900 	mov.w	r9, #0
 80183c2:	46b8      	mov	r8, r7
 80183c4:	e7e9      	b.n	801839a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80183c6:	4613      	mov	r3, r2
 80183c8:	e728      	b.n	801821c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80183ca:	bf00      	nop
 80183cc:	240284e0 	.word	0x240284e0
 80183d0:	fffd8f01 	.word	0xfffd8f01
 80183d4:	00027100 	.word	0x00027100
 80183d8:	0004e1ff 	.word	0x0004e1ff
 80183dc:	0004e1fe 	.word	0x0004e1fe
 80183e0:	240284e8 	.word	0x240284e8
 80183e4:	4613      	mov	r3, r2
 80183e6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80183e8:	469e      	mov	lr, r3
 80183ea:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80183ec:	469c      	mov	ip, r3
 80183ee:	9111      	str	r1, [sp, #68]	@ 0x44
 80183f0:	f04f 0900 	mov.w	r9, #0
 80183f4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80183f8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80183fc:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8018400:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8018404:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8018408:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801840c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8018410:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8018414:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8018418:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801841c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8018420:	f1bc 0f00 	cmp.w	ip, #0
 8018424:	d147      	bne.n	80184b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018426:	eb03 0c07 	add.w	ip, r3, r7
 801842a:	1ad7      	subs	r7, r2, r3
 801842c:	f1b9 0f00 	cmp.w	r9, #0
 8018430:	d009      	beq.n	8018446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018432:	9029      	str	r0, [sp, #164]	@ 0xa4
 8018434:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8018438:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801843c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8018440:	912d      	str	r1, [sp, #180]	@ 0xb4
 8018442:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8018446:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018448:	f04f 0800 	mov.w	r8, #0
 801844c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8018450:	9111      	str	r1, [sp, #68]	@ 0x44
 8018452:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018456:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801845a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801845e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8018462:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018466:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801846a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801846e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8018472:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018476:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801847a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801847e:	f1be 0f00 	cmp.w	lr, #0
 8018482:	d031      	beq.n	80184e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018484:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018486:	4450      	add	r0, sl
 8018488:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801848c:	4431      	add	r1, r6
 801848e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018492:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018496:	4549      	cmp	r1, r9
 8018498:	db08      	blt.n	80184ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801849a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801849e:	3001      	adds	r0, #1
 80184a0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80184a4:	eba1 0109 	sub.w	r1, r1, r9
 80184a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80184ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80184b0:	f04f 0801 	mov.w	r8, #1
 80184b4:	e7e3      	b.n	801847e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80184b6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80184b8:	4450      	add	r0, sl
 80184ba:	ee37 7a24 	vadd.f32	s14, s14, s9
 80184be:	4431      	add	r1, r6
 80184c0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80184c4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80184c8:	4541      	cmp	r1, r8
 80184ca:	db08      	blt.n	80184de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80184cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80184d0:	3001      	adds	r0, #1
 80184d2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80184d6:	eba1 0108 	sub.w	r1, r1, r8
 80184da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80184de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80184e2:	f04f 0901 	mov.w	r9, #1
 80184e6:	e79b      	b.n	8018420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80184e8:	449c      	add	ip, r3
 80184ea:	1aff      	subs	r7, r7, r3
 80184ec:	f1b8 0f00 	cmp.w	r8, #0
 80184f0:	d009      	beq.n	8018506 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80184f2:	9019      	str	r0, [sp, #100]	@ 0x64
 80184f4:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80184f8:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80184fc:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8018500:	911d      	str	r1, [sp, #116]	@ 0x74
 8018502:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8018506:	1ad2      	subs	r2, r2, r3
 8018508:	e68b      	b.n	8018222 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801850a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801850c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801850e:	2b00      	cmp	r3, #0
 8018510:	f000 80d1 	beq.w	80186b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018514:	ad19      	add	r5, sp, #100	@ 0x64
 8018516:	ac39      	add	r4, sp, #228	@ 0xe4
 8018518:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801851a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801851e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018522:	930c      	str	r3, [sp, #48]	@ 0x30
 8018524:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018526:	6963      	ldr	r3, [r4, #20]
 8018528:	440b      	add	r3, r1
 801852a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801852e:	4408      	add	r0, r1
 8018530:	b200      	sxth	r0, r0
 8018532:	4283      	cmp	r3, r0
 8018534:	900d      	str	r0, [sp, #52]	@ 0x34
 8018536:	f280 80c1 	bge.w	80186bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801853a:	428b      	cmp	r3, r1
 801853c:	da08      	bge.n	8018550 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801853e:	2a00      	cmp	r2, #0
 8018540:	dd06      	ble.n	8018550 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018542:	1acb      	subs	r3, r1, r3
 8018544:	429a      	cmp	r2, r3
 8018546:	f2c0 80bb 	blt.w	80186c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801854a:	2b00      	cmp	r3, #0
 801854c:	f300 80b9 	bgt.w	80186c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018550:	6967      	ldr	r7, [r4, #20]
 8018552:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8018556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018558:	443b      	add	r3, r7
 801855a:	461f      	mov	r7, r3
 801855c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801855e:	1bdf      	subs	r7, r3, r7
 8018560:	4297      	cmp	r7, r2
 8018562:	bfa8      	it	ge
 8018564:	4617      	movge	r7, r2
 8018566:	2f00      	cmp	r7, #0
 8018568:	f340 813c 	ble.w	80187e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801856c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801856e:	6829      	ldr	r1, [r5, #0]
 8018570:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018574:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018578:	4411      	add	r1, r2
 801857a:	6820      	ldr	r0, [r4, #0]
 801857c:	4299      	cmp	r1, r3
 801857e:	dd1a      	ble.n	80185b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018580:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018584:	4402      	add	r2, r0
 8018586:	440b      	add	r3, r1
 8018588:	b21b      	sxth	r3, r3
 801858a:	429a      	cmp	r2, r3
 801858c:	dc13      	bgt.n	80185b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801858e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018590:	a912      	add	r1, sp, #72	@ 0x48
 8018592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018594:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	9206      	str	r2, [sp, #24]
 801859a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801859c:	9500      	str	r5, [sp, #0]
 801859e:	9205      	str	r2, [sp, #20]
 80185a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185a2:	e9cd b203 	strd	fp, r2, [sp, #12]
 80185a6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80185a8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80185ac:	aa49      	add	r2, sp, #292	@ 0x124
 80185ae:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80185b2:	4623      	mov	r3, r4
 80185b4:	47c8      	blx	r9
 80185b6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80185ba:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80185be:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80185c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80185c6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80185ca:	68a1      	ldr	r1, [r4, #8]
 80185cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80185d0:	ed94 6a08 	vldr	s12, [r4, #32]
 80185d4:	edd4 6a07 	vldr	s13, [r4, #28]
 80185d8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80185dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80185e0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80185e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80185e8:	edc4 6a07 	vstr	s13, [r4, #28]
 80185ec:	441a      	add	r2, r3
 80185ee:	6963      	ldr	r3, [r4, #20]
 80185f0:	3301      	adds	r3, #1
 80185f2:	6022      	str	r2, [r4, #0]
 80185f4:	6163      	str	r3, [r4, #20]
 80185f6:	69a3      	ldr	r3, [r4, #24]
 80185f8:	3b01      	subs	r3, #1
 80185fa:	61a3      	str	r3, [r4, #24]
 80185fc:	6923      	ldr	r3, [r4, #16]
 80185fe:	440b      	add	r3, r1
 8018600:	68e1      	ldr	r1, [r4, #12]
 8018602:	428b      	cmp	r3, r1
 8018604:	6123      	str	r3, [r4, #16]
 8018606:	db15      	blt.n	8018634 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018608:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801860c:	3201      	adds	r2, #1
 801860e:	1a5b      	subs	r3, r3, r1
 8018610:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018614:	6022      	str	r2, [r4, #0]
 8018616:	6123      	str	r3, [r4, #16]
 8018618:	edc4 6a07 	vstr	s13, [r4, #28]
 801861c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8018620:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018624:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8018628:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801862c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018630:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8018634:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8018638:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801863c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8018640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018644:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8018648:	68a9      	ldr	r1, [r5, #8]
 801864a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801864e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018652:	edd5 6a07 	vldr	s13, [r5, #28]
 8018656:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801865a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801865e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8018662:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018666:	edc5 6a07 	vstr	s13, [r5, #28]
 801866a:	441a      	add	r2, r3
 801866c:	696b      	ldr	r3, [r5, #20]
 801866e:	3301      	adds	r3, #1
 8018670:	602a      	str	r2, [r5, #0]
 8018672:	616b      	str	r3, [r5, #20]
 8018674:	69ab      	ldr	r3, [r5, #24]
 8018676:	3b01      	subs	r3, #1
 8018678:	61ab      	str	r3, [r5, #24]
 801867a:	692b      	ldr	r3, [r5, #16]
 801867c:	440b      	add	r3, r1
 801867e:	68e9      	ldr	r1, [r5, #12]
 8018680:	428b      	cmp	r3, r1
 8018682:	612b      	str	r3, [r5, #16]
 8018684:	db15      	blt.n	80186b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018686:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801868a:	3201      	adds	r2, #1
 801868c:	1a5b      	subs	r3, r3, r1
 801868e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018692:	602a      	str	r2, [r5, #0]
 8018694:	612b      	str	r3, [r5, #16]
 8018696:	edc5 6a07 	vstr	s13, [r5, #28]
 801869a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801869e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80186a2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80186a6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80186aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186ae:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80186b2:	3f01      	subs	r7, #1
 80186b4:	e757      	b.n	8018566 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80186b6:	ad39      	add	r5, sp, #228	@ 0xe4
 80186b8:	ac19      	add	r4, sp, #100	@ 0x64
 80186ba:	e72d      	b.n	8018518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80186bc:	4613      	mov	r3, r2
 80186be:	e744      	b.n	801854a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80186c0:	4613      	mov	r3, r2
 80186c2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80186c4:	469e      	mov	lr, r3
 80186c6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80186ca:	461f      	mov	r7, r3
 80186cc:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80186d0:	f04f 0900 	mov.w	r9, #0
 80186d4:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80186d8:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80186dc:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80186e0:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80186e4:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80186e8:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80186ea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80186ee:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80186f2:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80186f6:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80186fa:	960e      	str	r6, [sp, #56]	@ 0x38
 80186fc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8018700:	2f00      	cmp	r7, #0
 8018702:	d146      	bne.n	8018792 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018704:	449c      	add	ip, r3
 8018706:	1ad7      	subs	r7, r2, r3
 8018708:	f1b9 0f00 	cmp.w	r9, #0
 801870c:	d009      	beq.n	8018722 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801870e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8018710:	913d      	str	r1, [sp, #244]	@ 0xf4
 8018712:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8018716:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801871a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801871e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8018722:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018724:	f04f 0800 	mov.w	r8, #0
 8018728:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801872c:	910e      	str	r1, [sp, #56]	@ 0x38
 801872e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8018732:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8018736:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801873a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801873e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8018742:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8018746:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801874a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801874e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8018752:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8018756:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801875a:	f1be 0f00 	cmp.w	lr, #0
 801875e:	d030      	beq.n	80187c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018760:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018762:	4450      	add	r0, sl
 8018764:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018768:	4431      	add	r1, r6
 801876a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801876e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018772:	4549      	cmp	r1, r9
 8018774:	db08      	blt.n	8018788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018776:	ee77 7a85 	vadd.f32	s15, s15, s10
 801877a:	3001      	adds	r0, #1
 801877c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018780:	eba1 0109 	sub.w	r1, r1, r9
 8018784:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018788:	f10e 3eff 	add.w	lr, lr, #4294967295
 801878c:	f04f 0801 	mov.w	r8, #1
 8018790:	e7e3      	b.n	801875a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018792:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8018794:	4450      	add	r0, sl
 8018796:	ee37 7a24 	vadd.f32	s14, s14, s9
 801879a:	4431      	add	r1, r6
 801879c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80187a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80187a4:	4541      	cmp	r1, r8
 80187a6:	db08      	blt.n	80187ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80187a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80187ac:	3001      	adds	r0, #1
 80187ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80187b2:	eba1 0108 	sub.w	r1, r1, r8
 80187b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80187ba:	3f01      	subs	r7, #1
 80187bc:	f04f 0901 	mov.w	r9, #1
 80187c0:	e79e      	b.n	8018700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80187c2:	449c      	add	ip, r3
 80187c4:	1aff      	subs	r7, r7, r3
 80187c6:	f1b8 0f00 	cmp.w	r8, #0
 80187ca:	d009      	beq.n	80187e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80187cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80187ce:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80187d2:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80187d6:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80187da:	911d      	str	r1, [sp, #116]	@ 0x74
 80187dc:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80187e0:	1ad2      	subs	r2, r2, r3
 80187e2:	e6b5      	b.n	8018550 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80187e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	b923      	cbnz	r3, 80187f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80187ea:	4b04      	ldr	r3, [pc, #16]	@ (80187fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80187ec:	6818      	ldr	r0, [r3, #0]
 80187ee:	6803      	ldr	r3, [r0, #0]
 80187f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187f2:	4798      	blx	r3
 80187f4:	b05b      	add	sp, #364	@ 0x16c
 80187f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187fa:	bf00      	nop
 80187fc:	240284e8 	.word	0x240284e8

08018800 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8018800:	b570      	push	{r4, r5, r6, lr}
 8018802:	4604      	mov	r4, r0
 8018804:	2500      	movs	r5, #0
 8018806:	9805      	ldr	r0, [sp, #20]
 8018808:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801880c:	6061      	str	r1, [r4, #4]
 801880e:	8263      	strh	r3, [r4, #18]
 8018810:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8018814:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018818:	8025      	strh	r5, [r4, #0]
 801881a:	7221      	strb	r1, [r4, #8]
 801881c:	7266      	strb	r6, [r4, #9]
 801881e:	60e0      	str	r0, [r4, #12]
 8018820:	8222      	strh	r2, [r4, #16]
 8018822:	82a3      	strh	r3, [r4, #20]
 8018824:	82e5      	strh	r5, [r4, #22]
 8018826:	8325      	strh	r5, [r4, #24]
 8018828:	8365      	strh	r5, [r4, #26]
 801882a:	83a5      	strh	r5, [r4, #28]
 801882c:	83e5      	strh	r5, [r4, #30]
 801882e:	8425      	strh	r5, [r4, #32]
 8018830:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8018834:	b32e      	cbz	r6, 8018882 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018836:	6803      	ldr	r3, [r0, #0]
 8018838:	695b      	ldr	r3, [r3, #20]
 801883a:	4798      	blx	r3
 801883c:	4606      	mov	r6, r0
 801883e:	b300      	cbz	r0, 8018882 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018840:	68e0      	ldr	r0, [r4, #12]
 8018842:	4631      	mov	r1, r6
 8018844:	6803      	ldr	r3, [r0, #0]
 8018846:	68db      	ldr	r3, [r3, #12]
 8018848:	4798      	blx	r3
 801884a:	4605      	mov	r5, r0
 801884c:	b1c8      	cbz	r0, 8018882 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801884e:	7b43      	ldrb	r3, [r0, #13]
 8018850:	7a82      	ldrb	r2, [r0, #10]
 8018852:	005b      	lsls	r3, r3, #1
 8018854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018858:	4313      	orrs	r3, r2
 801885a:	8423      	strh	r3, [r4, #32]
 801885c:	7a63      	ldrb	r3, [r4, #9]
 801885e:	2b06      	cmp	r3, #6
 8018860:	d10f      	bne.n	8018882 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8018862:	68e0      	ldr	r0, [r4, #12]
 8018864:	462a      	mov	r2, r5
 8018866:	4631      	mov	r1, r6
 8018868:	6803      	ldr	r3, [r0, #0]
 801886a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801886c:	4798      	blx	r3
 801886e:	7b6b      	ldrb	r3, [r5, #13]
 8018870:	005b      	lsls	r3, r3, #1
 8018872:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018876:	7aab      	ldrb	r3, [r5, #10]
 8018878:	4313      	orrs	r3, r2
 801887a:	4418      	add	r0, r3
 801887c:	8c23      	ldrh	r3, [r4, #32]
 801887e:	4418      	add	r0, r3
 8018880:	8420      	strh	r0, [r4, #32]
 8018882:	4620      	mov	r0, r4
 8018884:	bd70      	pop	{r4, r5, r6, pc}

08018886 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8018886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888a:	2400      	movs	r4, #0
 801888c:	b085      	sub	sp, #20
 801888e:	4681      	mov	r9, r0
 8018890:	4688      	mov	r8, r1
 8018892:	4692      	mov	sl, r2
 8018894:	469b      	mov	fp, r3
 8018896:	4627      	mov	r7, r4
 8018898:	4625      	mov	r5, r4
 801889a:	4626      	mov	r6, r4
 801889c:	4554      	cmp	r4, sl
 801889e:	da2a      	bge.n	80188f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80188a0:	2300      	movs	r3, #0
 80188a2:	9303      	str	r3, [sp, #12]
 80188a4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80188a8:	429d      	cmp	r5, r3
 80188aa:	d004      	beq.n	80188b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80188ac:	f242 030b 	movw	r3, #8203	@ 0x200b
 80188b0:	429d      	cmp	r5, r3
 80188b2:	bf18      	it	ne
 80188b4:	462f      	movne	r7, r5
 80188b6:	ab03      	add	r3, sp, #12
 80188b8:	4642      	mov	r2, r8
 80188ba:	4659      	mov	r1, fp
 80188bc:	4648      	mov	r0, r9
 80188be:	f003 fbf3 	bl	801c0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80188c2:	4605      	mov	r5, r0
 80188c4:	b1b8      	cbz	r0, 80188f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80188c6:	280a      	cmp	r0, #10
 80188c8:	d015      	beq.n	80188f6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80188ca:	9a03      	ldr	r2, [sp, #12]
 80188cc:	b18a      	cbz	r2, 80188f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80188ce:	7b50      	ldrb	r0, [r2, #13]
 80188d0:	4639      	mov	r1, r7
 80188d2:	7a93      	ldrb	r3, [r2, #10]
 80188d4:	0040      	lsls	r0, r0, #1
 80188d6:	8895      	ldrh	r5, [r2, #4]
 80188d8:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80188dc:	4303      	orrs	r3, r0
 80188de:	4640      	mov	r0, r8
 80188e0:	9301      	str	r3, [sp, #4]
 80188e2:	f8d8 3000 	ldr.w	r3, [r8]
 80188e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188e8:	4798      	blx	r3
 80188ea:	9b01      	ldr	r3, [sp, #4]
 80188ec:	4418      	add	r0, r3
 80188ee:	4406      	add	r6, r0
 80188f0:	b2b6      	uxth	r6, r6
 80188f2:	3401      	adds	r4, #1
 80188f4:	e7d2      	b.n	801889c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80188f6:	4630      	mov	r0, r6
 80188f8:	b005      	add	sp, #20
 80188fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080188fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80188fe:	2a02      	cmp	r2, #2
 8018900:	b530      	push	{r4, r5, lr}
 8018902:	d011      	beq.n	8018928 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018904:	2a03      	cmp	r2, #3
 8018906:	d01c      	beq.n	8018942 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018908:	2a01      	cmp	r2, #1
 801890a:	d10c      	bne.n	8018926 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801890c:	888b      	ldrh	r3, [r1, #4]
 801890e:	8801      	ldrh	r1, [r0, #0]
 8018910:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018914:	1a5b      	subs	r3, r3, r1
 8018916:	8844      	ldrh	r4, [r0, #2]
 8018918:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801891c:	1a9b      	subs	r3, r3, r2
 801891e:	8004      	strh	r4, [r0, #0]
 8018920:	8081      	strh	r1, [r0, #4]
 8018922:	8043      	strh	r3, [r0, #2]
 8018924:	80c2      	strh	r2, [r0, #6]
 8018926:	bd30      	pop	{r4, r5, pc}
 8018928:	88cb      	ldrh	r3, [r1, #6]
 801892a:	8842      	ldrh	r2, [r0, #2]
 801892c:	1a9b      	subs	r3, r3, r2
 801892e:	88c2      	ldrh	r2, [r0, #6]
 8018930:	1a9b      	subs	r3, r3, r2
 8018932:	888a      	ldrh	r2, [r1, #4]
 8018934:	8801      	ldrh	r1, [r0, #0]
 8018936:	8043      	strh	r3, [r0, #2]
 8018938:	1a52      	subs	r2, r2, r1
 801893a:	8881      	ldrh	r1, [r0, #4]
 801893c:	1a52      	subs	r2, r2, r1
 801893e:	8002      	strh	r2, [r0, #0]
 8018940:	e7f1      	b.n	8018926 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018942:	88cb      	ldrh	r3, [r1, #6]
 8018944:	8841      	ldrh	r1, [r0, #2]
 8018946:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801894a:	1a5b      	subs	r3, r3, r1
 801894c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018950:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018954:	1a9b      	subs	r3, r3, r2
 8018956:	8045      	strh	r5, [r0, #2]
 8018958:	8082      	strh	r2, [r0, #4]
 801895a:	8003      	strh	r3, [r0, #0]
 801895c:	80c4      	strh	r4, [r0, #6]
 801895e:	e7e2      	b.n	8018926 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08018960 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8018960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018964:	b09f      	sub	sp, #124	@ 0x7c
 8018966:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018968:	9312      	str	r3, [sp, #72]	@ 0x48
 801896a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801896c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801896e:	8812      	ldrh	r2, [r2, #0]
 8018970:	889b      	ldrh	r3, [r3, #4]
 8018972:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8018974:	4413      	add	r3, r2
 8018976:	900e      	str	r0, [sp, #56]	@ 0x38
 8018978:	6828      	ldr	r0, [r5, #0]
 801897a:	b21b      	sxth	r3, r3
 801897c:	9117      	str	r1, [sp, #92]	@ 0x5c
 801897e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8018982:	9311      	str	r3, [sp, #68]	@ 0x44
 8018984:	6803      	ldr	r3, [r0, #0]
 8018986:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 801898a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801898c:	4798      	blx	r3
 801898e:	682b      	ldr	r3, [r5, #0]
 8018990:	9013      	str	r0, [sp, #76]	@ 0x4c
 8018992:	7b1a      	ldrb	r2, [r3, #12]
 8018994:	7adb      	ldrb	r3, [r3, #11]
 8018996:	9215      	str	r2, [sp, #84]	@ 0x54
 8018998:	9316      	str	r3, [sp, #88]	@ 0x58
 801899a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 801899e:	2c00      	cmp	r4, #0
 80189a0:	d067      	beq.n	8018a72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80189a2:	7c2b      	ldrb	r3, [r5, #16]
 80189a4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80189a6:	2b06      	cmp	r3, #6
 80189a8:	bf14      	ite	ne
 80189aa:	2301      	movne	r3, #1
 80189ac:	2302      	moveq	r3, #2
 80189ae:	4413      	add	r3, r2
 80189b0:	f04f 0900 	mov.w	r9, #0
 80189b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80189b6:	464c      	mov	r4, r9
 80189b8:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80189bc:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80189c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80189c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80189c4:	4293      	cmp	r3, r2
 80189c6:	f280 808b 	bge.w	8018ae0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80189ca:	2300      	movs	r3, #0
 80189cc:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80189d0:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80189d4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80189d8:	429c      	cmp	r4, r3
 80189da:	d006      	beq.n	80189ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80189dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189de:	f242 020b 	movw	r2, #8203	@ 0x200b
 80189e2:	4294      	cmp	r4, r2
 80189e4:	bf18      	it	ne
 80189e6:	4623      	movne	r3, r4
 80189e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80189ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80189ec:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80189ee:	682a      	ldr	r2, [r5, #0]
 80189f0:	428b      	cmp	r3, r1
 80189f2:	db40      	blt.n	8018a76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80189f4:	6813      	ldr	r3, [r2, #0]
 80189f6:	4610      	mov	r0, r2
 80189f8:	695b      	ldr	r3, [r3, #20]
 80189fa:	4798      	blx	r3
 80189fc:	4604      	mov	r4, r0
 80189fe:	6828      	ldr	r0, [r5, #0]
 8018a00:	aa1d      	add	r2, sp, #116	@ 0x74
 8018a02:	4621      	mov	r1, r4
 8018a04:	6803      	ldr	r3, [r0, #0]
 8018a06:	689f      	ldr	r7, [r3, #8]
 8018a08:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8018a0c:	47b8      	blx	r7
 8018a0e:	901c      	str	r0, [sp, #112]	@ 0x70
 8018a10:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018a14:	429c      	cmp	r4, r3
 8018a16:	f000 80eb 	beq.w	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018a1a:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018a1e:	429c      	cmp	r4, r3
 8018a20:	f000 80e6 	beq.w	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018a24:	2c00      	cmp	r4, #0
 8018a26:	f000 810d 	beq.w	8018c44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8018a2a:	2c0a      	cmp	r4, #10
 8018a2c:	d05e      	beq.n	8018aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018a2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018a30:	b36a      	cbz	r2, 8018a8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8018a32:	8894      	ldrh	r4, [r2, #4]
 8018a34:	f1bb 0f00 	cmp.w	fp, #0
 8018a38:	d03a      	beq.n	8018ab0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8018a3a:	f892 900d 	ldrb.w	r9, [r2, #13]
 8018a3e:	f1bb 0f01 	cmp.w	fp, #1
 8018a42:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018a46:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8018a4a:	f892 900a 	ldrb.w	r9, [r2, #10]
 8018a4e:	ea49 0903 	orr.w	r9, r9, r3
 8018a52:	d133      	bne.n	8018abc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8018a54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a56:	eba6 0609 	sub.w	r6, r6, r9
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d14d      	bne.n	8018afa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018a5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018a60:	eb09 0306 	add.w	r3, r9, r6
 8018a64:	4413      	add	r3, r2
 8018a66:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018a68:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018a6c:	4293      	cmp	r3, r2
 8018a6e:	da4e      	bge.n	8018b0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8018a70:	e036      	b.n	8018ae0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018a72:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8018a74:	e79c      	b.n	80189b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8018a76:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8018a7a:	4659      	mov	r1, fp
 8018a7c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8018a7e:	9301      	str	r3, [sp, #4]
 8018a80:	ab1d      	add	r3, sp, #116	@ 0x74
 8018a82:	9300      	str	r3, [sp, #0]
 8018a84:	ab1c      	add	r3, sp, #112	@ 0x70
 8018a86:	f003 fb58 	bl	801c13a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	e7c0      	b.n	8018a10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8018a8e:	6828      	ldr	r0, [r5, #0]
 8018a90:	6803      	ldr	r3, [r0, #0]
 8018a92:	691b      	ldr	r3, [r3, #16]
 8018a94:	4798      	blx	r3
 8018a96:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018a9a:	4298      	cmp	r0, r3
 8018a9c:	f000 80a8 	beq.w	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018aa0:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018aa4:	4298      	cmp	r0, r3
 8018aa6:	f000 80a3 	beq.w	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018aaa:	f1bb 0f00 	cmp.w	fp, #0
 8018aae:	d100      	bne.n	8018ab2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8018ab0:	444e      	add	r6, r9
 8018ab2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018ab4:	2a00      	cmp	r2, #0
 8018ab6:	d1c0      	bne.n	8018a3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018ab8:	4691      	mov	r9, r2
 8018aba:	e099      	b.n	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018abc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	f000 80c2 	beq.w	8018c48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8018ac4:	f1bb 0f00 	cmp.w	fp, #0
 8018ac8:	d117      	bne.n	8018afa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8018aca:	6828      	ldr	r0, [r5, #0]
 8018acc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018ace:	6803      	ldr	r3, [r0, #0]
 8018ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018ad2:	4798      	blx	r3
 8018ad4:	4406      	add	r6, r0
 8018ad6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018ad8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018ada:	1af3      	subs	r3, r6, r3
 8018adc:	4293      	cmp	r3, r2
 8018ade:	dd16      	ble.n	8018b0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8018ae0:	2c00      	cmp	r4, #0
 8018ae2:	f000 80af 	beq.w	8018c44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8018ae6:	2c0a      	cmp	r4, #10
 8018ae8:	f040 809d 	bne.w	8018c26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8018aec:	240a      	movs	r4, #10
 8018aee:	fab4 f084 	clz	r0, r4
 8018af2:	0940      	lsrs	r0, r0, #5
 8018af4:	b01f      	add	sp, #124	@ 0x7c
 8018af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018afa:	6828      	ldr	r0, [r5, #0]
 8018afc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018afe:	6803      	ldr	r3, [r0, #0]
 8018b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b02:	4798      	blx	r3
 8018b04:	f1bb 0f01 	cmp.w	fp, #1
 8018b08:	eba6 0600 	sub.w	r6, r6, r0
 8018b0c:	d0a7      	beq.n	8018a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8018b0e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8018b10:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8018b12:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8018b16:	f9b3 8000 	ldrsh.w	r8, [r3]
 8018b1a:	7b43      	ldrb	r3, [r0, #13]
 8018b1c:	4431      	add	r1, r6
 8018b1e:	015b      	lsls	r3, r3, #5
 8018b20:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018b24:	7983      	ldrb	r3, [r0, #6]
 8018b26:	4313      	orrs	r3, r2
 8018b28:	440b      	add	r3, r1
 8018b2a:	4543      	cmp	r3, r8
 8018b2c:	db60      	blt.n	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018b2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b30:	4299      	cmp	r1, r3
 8018b32:	da5d      	bge.n	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018b34:	6828      	ldr	r0, [r5, #0]
 8018b36:	45b0      	cmp	r8, r6
 8018b38:	6803      	ldr	r3, [r0, #0]
 8018b3a:	bfcc      	ite	gt
 8018b3c:	eba8 0806 	subgt.w	r8, r8, r6
 8018b40:	f04f 0800 	movle.w	r8, #0
 8018b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b46:	bfc8      	it	gt
 8018b48:	fa1f f888 	uxthgt.w	r8, r8
 8018b4c:	4798      	blx	r3
 8018b4e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018b50:	7b53      	ldrb	r3, [r2, #13]
 8018b52:	00d9      	lsls	r1, r3, #3
 8018b54:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8018b58:	7a11      	ldrb	r1, [r2, #8]
 8018b5a:	4339      	orrs	r1, r7
 8018b5c:	065f      	lsls	r7, r3, #25
 8018b5e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018b60:	bf48      	it	mi
 8018b62:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8018b66:	4407      	add	r7, r0
 8018b68:	bf48      	it	mi
 8018b6a:	b209      	sxthmi	r1, r1
 8018b6c:	1a7f      	subs	r7, r7, r1
 8018b6e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8018b70:	b2bf      	uxth	r7, r7
 8018b72:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018b76:	fa0f fa87 	sxth.w	sl, r7
 8018b7a:	4551      	cmp	r1, sl
 8018b7c:	dd3c      	ble.n	8018bf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018b7e:	011b      	lsls	r3, r3, #4
 8018b80:	79d0      	ldrb	r0, [r2, #7]
 8018b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018b86:	4303      	orrs	r3, r0
 8018b88:	449a      	add	sl, r3
 8018b8a:	4551      	cmp	r1, sl
 8018b8c:	dc30      	bgt.n	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018b8e:	1bcf      	subs	r7, r1, r7
 8018b90:	468a      	mov	sl, r1
 8018b92:	b23f      	sxth	r7, r7
 8018b94:	9219      	str	r2, [sp, #100]	@ 0x64
 8018b96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018b98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018b9a:	6828      	ldr	r0, [r5, #0]
 8018b9c:	2a00      	cmp	r2, #0
 8018b9e:	d12d      	bne.n	8018bfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8018ba0:	9318      	str	r3, [sp, #96]	@ 0x60
 8018ba2:	b2bf      	uxth	r7, r7
 8018ba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ba6:	6819      	ldr	r1, [r3, #0]
 8018ba8:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8018baa:	6801      	ldr	r1, [r0, #0]
 8018bac:	9314      	str	r3, [sp, #80]	@ 0x50
 8018bae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8018bb0:	4788      	blx	r1
 8018bb2:	79a9      	ldrb	r1, [r5, #6]
 8018bb4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018bb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018bb8:	7ba9      	ldrb	r1, [r5, #14]
 8018bba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018bbc:	910a      	str	r1, [sp, #40]	@ 0x28
 8018bbe:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8018bc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8018bc4:	68a9      	ldr	r1, [r5, #8]
 8018bc6:	9306      	str	r3, [sp, #24]
 8018bc8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8018bca:	9205      	str	r2, [sp, #20]
 8018bcc:	9304      	str	r3, [sp, #16]
 8018bce:	f8cd a004 	str.w	sl, [sp, #4]
 8018bd2:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8018bd6:	44b0      	add	r8, r6
 8018bd8:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018bda:	fa0f f388 	sxth.w	r3, r8
 8018bde:	9300      	str	r3, [sp, #0]
 8018be0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018be2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018be6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8018bec:	685b      	ldr	r3, [r3, #4]
 8018bee:	47b8      	blx	r7
 8018bf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	930d      	str	r3, [sp, #52]	@ 0x34
 8018bf6:	e6e3      	b.n	80189c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8018bf8:	2700      	movs	r7, #0
 8018bfa:	e7cb      	b.n	8018b94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8018bfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018bfe:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8018c02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018c04:	f8dc 1000 	ldr.w	r1, [ip]
 8018c08:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8018c0c:	79aa      	ldrb	r2, [r5, #6]
 8018c0e:	9203      	str	r2, [sp, #12]
 8018c10:	7baa      	ldrb	r2, [r5, #14]
 8018c12:	9202      	str	r2, [sp, #8]
 8018c14:	68aa      	ldr	r2, [r5, #8]
 8018c16:	e9cd 0200 	strd	r0, r2, [sp]
 8018c1a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8018c1c:	4660      	mov	r0, ip
 8018c1e:	688f      	ldr	r7, [r1, #8]
 8018c20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018c22:	47b8      	blx	r7
 8018c24:	e7e4      	b.n	8018bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8018c26:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018c28:	3501      	adds	r5, #1
 8018c2a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8018c2c:	429d      	cmp	r5, r3
 8018c2e:	f6bf af5e 	bge.w	8018aee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018c32:	4659      	mov	r1, fp
 8018c34:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8018c36:	f7ef fb6b 	bl	8008310 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	b110      	cbz	r0, 8018c44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8018c3e:	280a      	cmp	r0, #10
 8018c40:	d1f2      	bne.n	8018c28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8018c42:	e753      	b.n	8018aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018c44:	2400      	movs	r4, #0
 8018c46:	e752      	b.n	8018aee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018c48:	f1bb 0f00 	cmp.w	fp, #0
 8018c4c:	f43f af43 	beq.w	8018ad6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018c50:	e75d      	b.n	8018b0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08018c52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018c52:	b530      	push	{r4, r5, lr}
 8018c54:	8ac4      	ldrh	r4, [r0, #22]
 8018c56:	8b45      	ldrh	r5, [r0, #26]
 8018c58:	8343      	strh	r3, [r0, #26]
 8018c5a:	442c      	add	r4, r5
 8018c5c:	1ae4      	subs	r4, r4, r3
 8018c5e:	8b83      	ldrh	r3, [r0, #28]
 8018c60:	82c4      	strh	r4, [r0, #22]
 8018c62:	8b04      	ldrh	r4, [r0, #24]
 8018c64:	4422      	add	r2, r4
 8018c66:	440c      	add	r4, r1
 8018c68:	1a59      	subs	r1, r3, r1
 8018c6a:	83c2      	strh	r2, [r0, #30]
 8018c6c:	8304      	strh	r4, [r0, #24]
 8018c6e:	8381      	strh	r1, [r0, #28]
 8018c70:	bd30      	pop	{r4, r5, pc}

08018c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8018c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c76:	4604      	mov	r4, r0
 8018c78:	8a47      	ldrh	r7, [r0, #18]
 8018c7a:	68c0      	ldr	r0, [r0, #12]
 8018c7c:	b085      	sub	sp, #20
 8018c7e:	6803      	ldr	r3, [r0, #0]
 8018c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018c82:	4798      	blx	r3
 8018c84:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8018c88:	7a63      	ldrb	r3, [r4, #9]
 8018c8a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8018c8e:	3b01      	subs	r3, #1
 8018c90:	42b7      	cmp	r7, r6
 8018c92:	bfac      	ite	ge
 8018c94:	f04f 0900 	movge.w	r9, #0
 8018c98:	f04f 0901 	movlt.w	r9, #1
 8018c9c:	2b05      	cmp	r3, #5
 8018c9e:	d804      	bhi.n	8018caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8018ca0:	e8df f003 	tbb	[pc, r3]
 8018ca4:	470f0854 	.word	0x470f0854
 8018ca8:	4c4c      	.short	0x4c4c
 8018caa:	2500      	movs	r5, #0
 8018cac:	46a9      	mov	r9, r5
 8018cae:	462e      	mov	r6, r5
 8018cb0:	462f      	mov	r7, r5
 8018cb2:	e00e      	b.n	8018cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018cb4:	42b7      	cmp	r7, r6
 8018cb6:	f04f 0500 	mov.w	r5, #0
 8018cba:	bfb4      	ite	lt
 8018cbc:	2600      	movlt	r6, #0
 8018cbe:	2601      	movge	r6, #1
 8018cc0:	e7f6      	b.n	8018cb0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018cc2:	42b7      	cmp	r7, r6
 8018cc4:	464d      	mov	r5, r9
 8018cc6:	f04f 0900 	mov.w	r9, #0
 8018cca:	bfb4      	ite	lt
 8018ccc:	2600      	movlt	r6, #0
 8018cce:	2601      	movge	r6, #1
 8018cd0:	464f      	mov	r7, r9
 8018cd2:	f04f 0800 	mov.w	r8, #0
 8018cd6:	f8a4 8016 	strh.w	r8, [r4, #22]
 8018cda:	f8a4 8018 	strh.w	r8, [r4, #24]
 8018cde:	f8cd 8004 	str.w	r8, [sp, #4]
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	9303      	str	r3, [sp, #12]
 8018ce6:	8823      	ldrh	r3, [r4, #0]
 8018ce8:	2b20      	cmp	r3, #32
 8018cea:	d033      	beq.n	8018d54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8018cec:	f242 010b 	movw	r1, #8203	@ 0x200b
 8018cf0:	1a5a      	subs	r2, r3, r1
 8018cf2:	f1d2 0a00 	rsbs	sl, r2, #0
 8018cf6:	eb4a 0a02 	adc.w	sl, sl, r2
 8018cfa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8018cfe:	4293      	cmp	r3, r2
 8018d00:	d008      	beq.n	8018d14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8018d02:	428b      	cmp	r3, r1
 8018d04:	9a01      	ldr	r2, [sp, #4]
 8018d06:	bf0e      	itee	eq
 8018d08:	f04f 0a01 	moveq.w	sl, #1
 8018d0c:	461a      	movne	r2, r3
 8018d0e:	f04f 0a00 	movne.w	sl, #0
 8018d12:	9201      	str	r2, [sp, #4]
 8018d14:	ab03      	add	r3, sp, #12
 8018d16:	68e2      	ldr	r2, [r4, #12]
 8018d18:	7a21      	ldrb	r1, [r4, #8]
 8018d1a:	6860      	ldr	r0, [r4, #4]
 8018d1c:	f003 f9c4 	bl	801c0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d20:	8020      	strh	r0, [r4, #0]
 8018d22:	b9d8      	cbnz	r0, 8018d5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8018d24:	8ba2      	ldrh	r2, [r4, #28]
 8018d26:	2300      	movs	r3, #0
 8018d28:	4611      	mov	r1, r2
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f7ff ff91 	bl	8018c52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018d30:	e06e      	b.n	8018e10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8018d32:	2500      	movs	r5, #0
 8018d34:	2701      	movs	r7, #1
 8018d36:	46a9      	mov	r9, r5
 8018d38:	462e      	mov	r6, r5
 8018d3a:	e7ca      	b.n	8018cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018d3c:	42b7      	cmp	r7, r6
 8018d3e:	f04f 0500 	mov.w	r5, #0
 8018d42:	bfb4      	ite	lt
 8018d44:	2700      	movlt	r7, #0
 8018d46:	2701      	movge	r7, #1
 8018d48:	462e      	mov	r6, r5
 8018d4a:	e7c2      	b.n	8018cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8018d4c:	2500      	movs	r5, #0
 8018d4e:	2601      	movs	r6, #1
 8018d50:	46a9      	mov	r9, r5
 8018d52:	e7ad      	b.n	8018cb0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018d54:	9301      	str	r3, [sp, #4]
 8018d56:	f04f 0a01 	mov.w	sl, #1
 8018d5a:	e7db      	b.n	8018d14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8018d5c:	8b63      	ldrh	r3, [r4, #26]
 8018d5e:	280a      	cmp	r0, #10
 8018d60:	f103 0301 	add.w	r3, r3, #1
 8018d64:	8363      	strh	r3, [r4, #26]
 8018d66:	d0dd      	beq.n	8018d24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8018d68:	9a03      	ldr	r2, [sp, #12]
 8018d6a:	bb62      	cbnz	r2, 8018dc6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8018d6c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8018d70:	4298      	cmp	r0, r3
 8018d72:	d003      	beq.n	8018d7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8018d74:	f242 030b 	movw	r3, #8203	@ 0x200b
 8018d78:	4298      	cmp	r0, r3
 8018d7a:	d1b2      	bne.n	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018d7c:	8823      	ldrh	r3, [r4, #0]
 8018d7e:	8ba1      	ldrh	r1, [r4, #28]
 8018d80:	2b20      	cmp	r3, #32
 8018d82:	d003      	beq.n	8018d8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8018d84:	f242 000b 	movw	r0, #8203	@ 0x200b
 8018d88:	4283      	cmp	r3, r0
 8018d8a:	d131      	bne.n	8018df0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8018d8c:	f1ba 0f00 	cmp.w	sl, #0
 8018d90:	bf0a      	itet	eq
 8018d92:	4688      	moveq	r8, r1
 8018d94:	4650      	movne	r0, sl
 8018d96:	2001      	moveq	r0, #1
 8018d98:	440a      	add	r2, r1
 8018d9a:	8b23      	ldrh	r3, [r4, #24]
 8018d9c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018da0:	b292      	uxth	r2, r2
 8018da2:	83a2      	strh	r2, [r4, #28]
 8018da4:	4413      	add	r3, r2
 8018da6:	f1b9 0f00 	cmp.w	r9, #0
 8018daa:	d102      	bne.n	8018db2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8018dac:	2d00      	cmp	r5, #0
 8018dae:	d042      	beq.n	8018e36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8018db0:	b300      	cbz	r0, 8018df4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8018db2:	8c21      	ldrh	r1, [r4, #32]
 8018db4:	4419      	add	r1, r3
 8018db6:	458c      	cmp	ip, r1
 8018db8:	da37      	bge.n	8018e2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8018dba:	8ae1      	ldrh	r1, [r4, #22]
 8018dbc:	2900      	cmp	r1, #0
 8018dbe:	d034      	beq.n	8018e2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8018dc0:	4563      	cmp	r3, ip
 8018dc2:	dd8e      	ble.n	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018dc4:	e01d      	b.n	8018e02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8018dc6:	8893      	ldrh	r3, [r2, #4]
 8018dc8:	9901      	ldr	r1, [sp, #4]
 8018dca:	8023      	strh	r3, [r4, #0]
 8018dcc:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8018dd0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8018dd4:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8018dd8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8018ddc:	ea4b 0b00 	orr.w	fp, fp, r0
 8018de0:	68e0      	ldr	r0, [r4, #12]
 8018de2:	6803      	ldr	r3, [r0, #0]
 8018de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018de6:	4798      	blx	r3
 8018de8:	eb0b 0200 	add.w	r2, fp, r0
 8018dec:	b292      	uxth	r2, r2
 8018dee:	e7c5      	b.n	8018d7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8018df0:	2000      	movs	r0, #0
 8018df2:	e7d1      	b.n	8018d98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8018df4:	4563      	cmp	r3, ip
 8018df6:	f77f af74 	ble.w	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018dfa:	8ae3      	ldrh	r3, [r4, #22]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	f43f af70 	beq.w	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018e02:	2301      	movs	r3, #1
 8018e04:	8c22      	ldrh	r2, [r4, #32]
 8018e06:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8018e0a:	8be3      	ldrh	r3, [r4, #30]
 8018e0c:	4413      	add	r3, r2
 8018e0e:	83e3      	strh	r3, [r4, #30]
 8018e10:	68e0      	ldr	r0, [r4, #12]
 8018e12:	6803      	ldr	r3, [r0, #0]
 8018e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e16:	4798      	blx	r3
 8018e18:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8018e1c:	4418      	add	r0, r3
 8018e1e:	8a63      	ldrh	r3, [r4, #18]
 8018e20:	1a18      	subs	r0, r3, r0
 8018e22:	8260      	strh	r0, [r4, #18]
 8018e24:	b005      	add	sp, #20
 8018e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	4611      	mov	r1, r2
 8018e2e:	4620      	mov	r0, r4
 8018e30:	f7ff ff0f 	bl	8018c52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018e34:	e755      	b.n	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018e36:	4563      	cmp	r3, ip
 8018e38:	dd14      	ble.n	8018e64 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8018e3a:	b117      	cbz	r7, 8018e42 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	460a      	mov	r2, r1
 8018e40:	e772      	b.n	8018d28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8018e42:	2e00      	cmp	r6, #0
 8018e44:	f43f af4d 	beq.w	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018e48:	2800      	cmp	r0, #0
 8018e4a:	f47f af4a 	bne.w	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018e4e:	f1ba 0f00 	cmp.w	sl, #0
 8018e52:	d002      	beq.n	8018e5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8018e54:	2301      	movs	r3, #1
 8018e56:	4642      	mov	r2, r8
 8018e58:	e767      	b.n	8018d2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8018e5a:	8ae3      	ldrh	r3, [r4, #22]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	f43f af40 	beq.w	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018e62:	e7d5      	b.n	8018e10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8018e64:	2800      	cmp	r0, #0
 8018e66:	f47f af3c 	bne.w	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018e6a:	f1ba 0f00 	cmp.w	sl, #0
 8018e6e:	f43f af38 	beq.w	8018ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018e72:	2301      	movs	r3, #1
 8018e74:	4642      	mov	r2, r8
 8018e76:	e7da      	b.n	8018e2e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08018e78 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8018e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e7a:	4605      	mov	r5, r0
 8018e7c:	b08f      	sub	sp, #60	@ 0x3c
 8018e7e:	4617      	mov	r7, r2
 8018e80:	461c      	mov	r4, r3
 8018e82:	460e      	mov	r6, r1
 8018e84:	b1d1      	cbz	r1, 8018ebc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	4620      	mov	r0, r4
 8018e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e8c:	4798      	blx	r3
 8018e8e:	4240      	negs	r0, r0
 8018e90:	9603      	str	r6, [sp, #12]
 8018e92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018e96:	b200      	sxth	r0, r0
 8018e98:	9700      	str	r7, [sp, #0]
 8018e9a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8018e9e:	4629      	mov	r1, r5
 8018ea0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8018ea4:	2401      	movs	r4, #1
 8018ea6:	a805      	add	r0, sp, #20
 8018ea8:	f7ff fcaa 	bl	8018800 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8018eac:	a805      	add	r0, sp, #20
 8018eae:	f7ff fee0 	bl	8018c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018eb2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8018eb6:	b163      	cbz	r3, 8018ed2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8018eb8:	3401      	adds	r4, #1
 8018eba:	e7f7      	b.n	8018eac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018ebc:	2401      	movs	r4, #1
 8018ebe:	f003 f9bf 	bl	801c240 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018ec2:	280a      	cmp	r0, #10
 8018ec4:	4628      	mov	r0, r5
 8018ec6:	bf08      	it	eq
 8018ec8:	3401      	addeq	r4, #1
 8018eca:	f003 f9b9 	bl	801c240 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018ece:	2800      	cmp	r0, #0
 8018ed0:	d1f7      	bne.n	8018ec2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8018ed2:	b2a0      	uxth	r0, r4
 8018ed4:	b00f      	add	sp, #60	@ 0x3c
 8018ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018edc:	b0e3      	sub	sp, #396	@ 0x18c
 8018ede:	461c      	mov	r4, r3
 8018ee0:	4683      	mov	fp, r0
 8018ee2:	4688      	mov	r8, r1
 8018ee4:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	f000 8112 	beq.w	8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018eec:	6823      	ldr	r3, [r4, #0]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	f000 810e 	beq.w	8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018ef4:	7ba3      	ldrb	r3, [r4, #14]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	f000 810a 	beq.w	8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018efc:	ad0a      	add	r5, sp, #40	@ 0x28
 8018efe:	6810      	ldr	r0, [r2, #0]
 8018f00:	6851      	ldr	r1, [r2, #4]
 8018f02:	462b      	mov	r3, r5
 8018f04:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8018f08:	c303      	stmia	r3!, {r0, r1}
 8018f0a:	2100      	movs	r1, #0
 8018f0c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018f10:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8018f14:	4628      	mov	r0, r5
 8018f16:	910c      	str	r1, [sp, #48]	@ 0x30
 8018f18:	a90c      	add	r1, sp, #48	@ 0x30
 8018f1a:	79a2      	ldrb	r2, [r4, #6]
 8018f1c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018f20:	f7ff fced 	bl	80188fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018f24:	a90c      	add	r1, sp, #48	@ 0x30
 8018f26:	79a2      	ldrb	r2, [r4, #6]
 8018f28:	4608      	mov	r0, r1
 8018f2a:	f7ff fce8 	bl	80188fe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018f2e:	a817      	add	r0, sp, #92	@ 0x5c
 8018f30:	f002 fd59 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 8018f34:	6820      	ldr	r0, [r4, #0]
 8018f36:	6803      	ldr	r3, [r0, #0]
 8018f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f3a:	4798      	blx	r3
 8018f3c:	4606      	mov	r6, r0
 8018f3e:	6820      	ldr	r0, [r4, #0]
 8018f40:	6803      	ldr	r3, [r0, #0]
 8018f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018f44:	4798      	blx	r3
 8018f46:	4633      	mov	r3, r6
 8018f48:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8018f4a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8018f4c:	9000      	str	r0, [sp, #0]
 8018f4e:	a817      	add	r0, sp, #92	@ 0x5c
 8018f50:	f002 fda4 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f54:	6820      	ldr	r0, [r4, #0]
 8018f56:	f894 a004 	ldrb.w	sl, [r4, #4]
 8018f5a:	6803      	ldr	r3, [r0, #0]
 8018f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f5e:	4798      	blx	r3
 8018f60:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8018f64:	6823      	ldr	r3, [r4, #0]
 8018f66:	4607      	mov	r7, r0
 8018f68:	4406      	add	r6, r0
 8018f6a:	a830      	add	r0, sp, #192	@ 0xc0
 8018f6c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8018f70:	f002 fd39 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 8018f74:	7c23      	ldrb	r3, [r4, #16]
 8018f76:	b17b      	cbz	r3, 8018f98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8018f78:	6820      	ldr	r0, [r4, #0]
 8018f7a:	6803      	ldr	r3, [r0, #0]
 8018f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018f7e:	4798      	blx	r3
 8018f80:	9009      	str	r0, [sp, #36]	@ 0x24
 8018f82:	6820      	ldr	r0, [r4, #0]
 8018f84:	6802      	ldr	r2, [r0, #0]
 8018f86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8018f88:	4790      	blx	r2
 8018f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f8c:	9000      	str	r0, [sp, #0]
 8018f8e:	a830      	add	r0, sp, #192	@ 0xc0
 8018f90:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8018f92:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8018f94:	f002 fd82 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f98:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018f9c:	a80e      	add	r0, sp, #56	@ 0x38
 8018f9e:	7be2      	ldrb	r2, [r4, #15]
 8018fa0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8018fa4:	1a8a      	subs	r2, r1, r2
 8018fa6:	7c21      	ldrb	r1, [r4, #16]
 8018fa8:	9103      	str	r1, [sp, #12]
 8018faa:	b292      	uxth	r2, r2
 8018fac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8018fb0:	9102      	str	r1, [sp, #8]
 8018fb2:	6821      	ldr	r1, [r4, #0]
 8018fb4:	9101      	str	r1, [sp, #4]
 8018fb6:	7961      	ldrb	r1, [r4, #5]
 8018fb8:	9100      	str	r1, [sp, #0]
 8018fba:	a930      	add	r1, sp, #192	@ 0xc0
 8018fbc:	f7ff fc20 	bl	8018800 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8018fc0:	2e00      	cmp	r6, #0
 8018fc2:	dc5b      	bgt.n	801907c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8018fc4:	af17      	add	r7, sp, #92	@ 0x5c
 8018fc6:	f04f 0900 	mov.w	r9, #0
 8018fca:	7c23      	ldrb	r3, [r4, #16]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	f000 80b1 	beq.w	8019134 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8018fd2:	a80e      	add	r0, sp, #56	@ 0x38
 8018fd4:	f7ff fe4d 	bl	8018c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018fd8:	f1ba 0f00 	cmp.w	sl, #0
 8018fdc:	f000 80a5 	beq.w	801912a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8018fe0:	7c23      	ldrb	r3, [r4, #16]
 8018fe2:	2264      	movs	r2, #100	@ 0x64
 8018fe4:	4639      	mov	r1, r7
 8018fe6:	a849      	add	r0, sp, #292	@ 0x124
 8018fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8018fea:	f00f fe66 	bl	8028cba <memcpy>
 8018fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f000 80a7 	beq.w	8019144 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018ff6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8018ffa:	7922      	ldrb	r2, [r4, #4]
 8018ffc:	2a01      	cmp	r2, #1
 8018ffe:	f040 808a 	bne.w	8019116 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019002:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8019006:	1ac0      	subs	r0, r0, r3
 8019008:	2302      	movs	r3, #2
 801900a:	fb90 f0f3 	sdiv	r0, r0, r3
 801900e:	b200      	sxth	r0, r0
 8019010:	7c23      	ldrb	r3, [r4, #16]
 8019012:	2b00      	cmp	r3, #0
 8019014:	f000 808b 	beq.w	801912e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8019018:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801901c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8019020:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019024:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8019028:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801902c:	2100      	movs	r1, #0
 801902e:	4410      	add	r0, r2
 8019030:	4642      	mov	r2, r8
 8019032:	b200      	sxth	r0, r0
 8019034:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8019038:	9000      	str	r0, [sp, #0]
 801903a:	4658      	mov	r0, fp
 801903c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8019040:	f7ff fc8e 	bl	8018960 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8019044:	2800      	cmp	r0, #0
 8019046:	d163      	bne.n	8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019048:	b2b2      	uxth	r2, r6
 801904a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801904e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8019052:	4413      	add	r3, r2
 8019054:	1a8a      	subs	r2, r1, r2
 8019056:	b21b      	sxth	r3, r3
 8019058:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801905c:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8019060:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019064:	2a00      	cmp	r2, #0
 8019066:	d153      	bne.n	8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019068:	6822      	ldr	r2, [r4, #0]
 801906a:	8869      	ldrh	r1, [r5, #2]
 801906c:	7a12      	ldrb	r2, [r2, #8]
 801906e:	1a9b      	subs	r3, r3, r2
 8019070:	88ea      	ldrh	r2, [r5, #6]
 8019072:	440a      	add	r2, r1
 8019074:	b212      	sxth	r2, r2
 8019076:	4293      	cmp	r3, r2
 8019078:	dda7      	ble.n	8018fca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801907a:	e049      	b.n	8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801907c:	7c23      	ldrb	r3, [r4, #16]
 801907e:	444f      	add	r7, r9
 8019080:	b1c3      	cbz	r3, 80190b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8019082:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8019086:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801908a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801908e:	443b      	add	r3, r7
 8019090:	4293      	cmp	r3, r2
 8019092:	da97      	bge.n	8018fc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8019094:	a80e      	add	r0, sp, #56	@ 0x38
 8019096:	f7ff fdec 	bl	8018c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801909a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801909e:	3b01      	subs	r3, #1
 80190a0:	b29b      	uxth	r3, r3
 80190a2:	454b      	cmp	r3, r9
 80190a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80190a6:	d021      	beq.n	80190ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80190a8:	7961      	ldrb	r1, [r4, #5]
 80190aa:	a817      	add	r0, sp, #92	@ 0x5c
 80190ac:	f7ef f930 	bl	8008310 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80190b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190b2:	e7f4      	b.n	801909e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80190b4:	fa1f f986 	uxth.w	r9, r6
 80190b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80190bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80190c0:	443b      	add	r3, r7
 80190c2:	4293      	cmp	r3, r2
 80190c4:	f6bf af7e 	bge.w	8018fc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80190c8:	a817      	add	r0, sp, #92	@ 0x5c
 80190ca:	f003 f8b9 	bl	801c240 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80190ce:	b1f8      	cbz	r0, 8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80190d0:	280a      	cmp	r0, #10
 80190d2:	d1f1      	bne.n	80190b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80190d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80190d8:	444b      	add	r3, r9
 80190da:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80190de:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80190e2:	eba3 0309 	sub.w	r3, r3, r9
 80190e6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80190ea:	e7e5      	b.n	80190b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80190ec:	b2b3      	uxth	r3, r6
 80190ee:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80190f2:	441a      	add	r2, r3
 80190f4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80190f8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80190fc:	1ad3      	subs	r3, r2, r3
 80190fe:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019102:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019106:	b11b      	cbz	r3, 8019110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019108:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801910c:	2b00      	cmp	r3, #0
 801910e:	d0ba      	beq.n	8019086 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8019110:	b063      	add	sp, #396	@ 0x18c
 8019112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019116:	2a02      	cmp	r2, #2
 8019118:	d105      	bne.n	8019126 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801911a:	7be2      	ldrb	r2, [r4, #15]
 801911c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8019120:	1a80      	subs	r0, r0, r2
 8019122:	1ac0      	subs	r0, r0, r3
 8019124:	e773      	b.n	801900e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8019126:	2000      	movs	r0, #0
 8019128:	e772      	b.n	8019010 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801912a:	7be0      	ldrb	r0, [r4, #15]
 801912c:	e770      	b.n	8019010 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801912e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8019132:	e773      	b.n	801901c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8019134:	f1ba 0f00 	cmp.w	sl, #0
 8019138:	d0f7      	beq.n	801912a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801913a:	2264      	movs	r2, #100	@ 0x64
 801913c:	4639      	mov	r1, r7
 801913e:	a849      	add	r0, sp, #292	@ 0x124
 8019140:	f00f fdbb 	bl	8028cba <memcpy>
 8019144:	2300      	movs	r3, #0
 8019146:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801914a:	6821      	ldr	r1, [r4, #0]
 801914c:	a849      	add	r0, sp, #292	@ 0x124
 801914e:	f7ff fb9a 	bl	8018886 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8019152:	b203      	sxth	r3, r0
 8019154:	e751      	b.n	8018ffa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08019156 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019156:	2b03      	cmp	r3, #3
 8019158:	d818      	bhi.n	801918c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801915a:	e8df f003 	tbb	[pc, r3]
 801915e:	0602      	.short	0x0602
 8019160:	130d      	.short	0x130d
 8019162:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019166:	1850      	adds	r0, r2, r1
 8019168:	4770      	bx	lr
 801916a:	8803      	ldrh	r3, [r0, #0]
 801916c:	8880      	ldrh	r0, [r0, #4]
 801916e:	4418      	add	r0, r3
 8019170:	b200      	sxth	r0, r0
 8019172:	1a80      	subs	r0, r0, r2
 8019174:	3801      	subs	r0, #1
 8019176:	4770      	bx	lr
 8019178:	8803      	ldrh	r3, [r0, #0]
 801917a:	8880      	ldrh	r0, [r0, #4]
 801917c:	4418      	add	r0, r3
 801917e:	b200      	sxth	r0, r0
 8019180:	1a40      	subs	r0, r0, r1
 8019182:	e7f7      	b.n	8019174 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019184:	f9b0 0000 	ldrsh.w	r0, [r0]
 8019188:	4410      	add	r0, r2
 801918a:	4770      	bx	lr
 801918c:	2000      	movs	r0, #0
 801918e:	4770      	bx	lr

08019190 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019190:	2b03      	cmp	r3, #3
 8019192:	d817      	bhi.n	80191c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8019194:	e8df f003 	tbb	[pc, r3]
 8019198:	10090602 	.word	0x10090602
 801919c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80191a0:	1850      	adds	r0, r2, r1
 80191a2:	4770      	bx	lr
 80191a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80191a8:	e7fa      	b.n	80191a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80191aa:	8843      	ldrh	r3, [r0, #2]
 80191ac:	88c0      	ldrh	r0, [r0, #6]
 80191ae:	4418      	add	r0, r3
 80191b0:	b200      	sxth	r0, r0
 80191b2:	1a80      	subs	r0, r0, r2
 80191b4:	3801      	subs	r0, #1
 80191b6:	4770      	bx	lr
 80191b8:	8843      	ldrh	r3, [r0, #2]
 80191ba:	88c0      	ldrh	r0, [r0, #6]
 80191bc:	4418      	add	r0, r3
 80191be:	b200      	sxth	r0, r0
 80191c0:	1a40      	subs	r0, r0, r1
 80191c2:	e7f7      	b.n	80191b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80191c4:	2000      	movs	r0, #0
 80191c6:	4770      	bx	lr

080191c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80191c8:	4b01      	ldr	r3, [pc, #4]	@ (80191d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80191ca:	2200      	movs	r2, #0
 80191cc:	601a      	str	r2, [r3, #0]
 80191ce:	4770      	bx	lr
 80191d0:	240284f8 	.word	0x240284f8

080191d4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80191d4:	4603      	mov	r3, r0
 80191d6:	b1c8      	cbz	r0, 801920c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80191d8:	0c02      	lsrs	r2, r0, #16
 80191da:	0412      	lsls	r2, r2, #16
 80191dc:	b9a2      	cbnz	r2, 8019208 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80191de:	0403      	lsls	r3, r0, #16
 80191e0:	2010      	movs	r0, #16
 80191e2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80191e6:	bf04      	itt	eq
 80191e8:	021b      	lsleq	r3, r3, #8
 80191ea:	3008      	addeq	r0, #8
 80191ec:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80191f0:	bf04      	itt	eq
 80191f2:	011b      	lsleq	r3, r3, #4
 80191f4:	3004      	addeq	r0, #4
 80191f6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80191fa:	bf04      	itt	eq
 80191fc:	009b      	lsleq	r3, r3, #2
 80191fe:	3002      	addeq	r0, #2
 8019200:	2b00      	cmp	r3, #0
 8019202:	db04      	blt.n	801920e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019204:	3001      	adds	r0, #1
 8019206:	4770      	bx	lr
 8019208:	2000      	movs	r0, #0
 801920a:	e7ea      	b.n	80191e2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801920c:	2020      	movs	r0, #32
 801920e:	4770      	bx	lr

08019210 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019214:	b087      	sub	sp, #28
 8019216:	460d      	mov	r5, r1
 8019218:	4616      	mov	r6, r2
 801921a:	4698      	mov	r8, r3
 801921c:	4601      	mov	r1, r0
 801921e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8019222:	b120      	cbz	r0, 801922e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019224:	b11a      	cbz	r2, 801922e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8019226:	2d1f      	cmp	r5, #31
 8019228:	d801      	bhi.n	801922e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801922a:	2b1f      	cmp	r3, #31
 801922c:	d904      	bls.n	8019238 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801922e:	2000      	movs	r0, #0
 8019230:	6038      	str	r0, [r7, #0]
 8019232:	b007      	add	sp, #28
 8019234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019238:	b97d      	cbnz	r5, 801925a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801923a:	b143      	cbz	r3, 801924e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801923c:	4602      	mov	r2, r0
 801923e:	462b      	mov	r3, r5
 8019240:	4641      	mov	r1, r8
 8019242:	4630      	mov	r0, r6
 8019244:	e9cd 4700 	strd	r4, r7, [sp]
 8019248:	f7ff ffe2 	bl	8019210 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801924c:	e7f1      	b.n	8019232 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801924e:	f04f 33ff 	mov.w	r3, #4294967295
 8019252:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019256:	603b      	str	r3, [r7, #0]
 8019258:	e7eb      	b.n	8019232 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801925a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801925e:	d106      	bne.n	801926e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8019260:	4346      	muls	r6, r0
 8019262:	fbb6 f0f4 	udiv	r0, r6, r4
 8019266:	fb04 6610 	mls	r6, r4, r0, r6
 801926a:	603e      	str	r6, [r7, #0]
 801926c:	e7e1      	b.n	8019232 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801926e:	2201      	movs	r2, #1
 8019270:	fa00 fb05 	lsl.w	fp, r0, r5
 8019274:	40aa      	lsls	r2, r5
 8019276:	fbbb f9f4 	udiv	r9, fp, r4
 801927a:	3a01      	subs	r2, #1
 801927c:	fb0a f309 	mul.w	r3, sl, r9
 8019280:	fb04 b919 	mls	r9, r4, r9, fp
 8019284:	4016      	ands	r6, r2
 8019286:	9303      	str	r3, [sp, #12]
 8019288:	4630      	mov	r0, r6
 801928a:	f7ff ffa3 	bl	80191d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801928e:	462b      	mov	r3, r5
 8019290:	460a      	mov	r2, r1
 8019292:	4601      	mov	r1, r0
 8019294:	4630      	mov	r0, r6
 8019296:	e9cd 4700 	strd	r4, r7, [sp]
 801929a:	f7ff ffb9 	bl	8019210 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801929e:	4606      	mov	r6, r0
 80192a0:	4648      	mov	r0, r9
 80192a2:	eb05 0108 	add.w	r1, r5, r8
 80192a6:	f7ff ff95 	bl	80191d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80192aa:	ab05      	add	r3, sp, #20
 80192ac:	464a      	mov	r2, r9
 80192ae:	e9cd 4300 	strd	r4, r3, [sp]
 80192b2:	4603      	mov	r3, r0
 80192b4:	4650      	mov	r0, sl
 80192b6:	f7ff ffab 	bl	8019210 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80192ba:	6839      	ldr	r1, [r7, #0]
 80192bc:	9a05      	ldr	r2, [sp, #20]
 80192be:	9b03      	ldr	r3, [sp, #12]
 80192c0:	4411      	add	r1, r2
 80192c2:	fbb1 f2f4 	udiv	r2, r1, r4
 80192c6:	18d3      	adds	r3, r2, r3
 80192c8:	fb04 1412 	mls	r4, r4, r2, r1
 80192cc:	441e      	add	r6, r3
 80192ce:	603c      	str	r4, [r7, #0]
 80192d0:	4430      	add	r0, r6
 80192d2:	e7ae      	b.n	8019232 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080192d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80192d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192d8:	b085      	sub	sp, #20
 80192da:	f1b0 0900 	subs.w	r9, r0, #0
 80192de:	461d      	mov	r5, r3
 80192e0:	4617      	mov	r7, r2
 80192e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80192e4:	bfbb      	ittet	lt
 80192e6:	f1c9 0900 	rsblt	r9, r9, #0
 80192ea:	f04f 36ff 	movlt.w	r6, #4294967295
 80192ee:	2601      	movge	r6, #1
 80192f0:	6823      	ldrlt	r3, [r4, #0]
 80192f2:	bfbc      	itt	lt
 80192f4:	425b      	neglt	r3, r3
 80192f6:	6023      	strlt	r3, [r4, #0]
 80192f8:	2a00      	cmp	r2, #0
 80192fa:	da04      	bge.n	8019306 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80192fc:	6823      	ldr	r3, [r4, #0]
 80192fe:	4257      	negs	r7, r2
 8019300:	4276      	negs	r6, r6
 8019302:	425b      	negs	r3, r3
 8019304:	6023      	str	r3, [r4, #0]
 8019306:	2d00      	cmp	r5, #0
 8019308:	4638      	mov	r0, r7
 801930a:	bfba      	itte	lt
 801930c:	426d      	neglt	r5, r5
 801930e:	f04f 38ff 	movlt.w	r8, #4294967295
 8019312:	f04f 0801 	movge.w	r8, #1
 8019316:	f7ff ff5d 	bl	80191d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801931a:	ab03      	add	r3, sp, #12
 801931c:	463a      	mov	r2, r7
 801931e:	e9cd 5300 	strd	r5, r3, [sp]
 8019322:	4603      	mov	r3, r0
 8019324:	4648      	mov	r0, r9
 8019326:	f7ff ff73 	bl	8019210 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801932a:	6823      	ldr	r3, [r4, #0]
 801932c:	9a03      	ldr	r2, [sp, #12]
 801932e:	4546      	cmp	r6, r8
 8019330:	441a      	add	r2, r3
 8019332:	fb92 f3f5 	sdiv	r3, r2, r5
 8019336:	4418      	add	r0, r3
 8019338:	fb05 2313 	mls	r3, r5, r3, r2
 801933c:	bf18      	it	ne
 801933e:	4240      	negne	r0, r0
 8019340:	1c72      	adds	r2, r6, #1
 8019342:	6023      	str	r3, [r4, #0]
 8019344:	d105      	bne.n	8019352 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019346:	2b00      	cmp	r3, #0
 8019348:	f1c3 0200 	rsb	r2, r3, #0
 801934c:	db0b      	blt.n	8019366 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801934e:	6022      	str	r2, [r4, #0]
 8019350:	e006      	b.n	8019360 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019352:	2e01      	cmp	r6, #1
 8019354:	d104      	bne.n	8019360 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019356:	2b00      	cmp	r3, #0
 8019358:	da02      	bge.n	8019360 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801935a:	442b      	add	r3, r5
 801935c:	3801      	subs	r0, #1
 801935e:	6023      	str	r3, [r4, #0]
 8019360:	b005      	add	sp, #20
 8019362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019366:	3801      	subs	r0, #1
 8019368:	1b52      	subs	r2, r2, r5
 801936a:	e7f0      	b.n	801934e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801936c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801936c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019370:	4c1c      	ldr	r4, [pc, #112]	@ (80193e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019372:	4605      	mov	r5, r0
 8019374:	6807      	ldr	r7, [r0, #0]
 8019376:	69a3      	ldr	r3, [r4, #24]
 8019378:	b92b      	cbnz	r3, 8019386 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801937a:	6840      	ldr	r0, [r0, #4]
 801937c:	e9c5 7000 	strd	r7, r0, [r5]
 8019380:	b004      	add	sp, #16
 8019382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019386:	f04f 0802 	mov.w	r8, #2
 801938a:	68a2      	ldr	r2, [r4, #8]
 801938c:	ae04      	add	r6, sp, #16
 801938e:	6820      	ldr	r0, [r4, #0]
 8019390:	fb93 f1f8 	sdiv	r1, r3, r8
 8019394:	440a      	add	r2, r1
 8019396:	69e1      	ldr	r1, [r4, #28]
 8019398:	f846 2d04 	str.w	r2, [r6, #-4]!
 801939c:	463a      	mov	r2, r7
 801939e:	9600      	str	r6, [sp, #0]
 80193a0:	f7ff ff98 	bl	80192d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193a4:	69a3      	ldr	r3, [r4, #24]
 80193a6:	4607      	mov	r7, r0
 80193a8:	686a      	ldr	r2, [r5, #4]
 80193aa:	6a21      	ldr	r1, [r4, #32]
 80193ac:	9600      	str	r6, [sp, #0]
 80193ae:	6860      	ldr	r0, [r4, #4]
 80193b0:	f7ff ff90 	bl	80192d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193b4:	69a3      	ldr	r3, [r4, #24]
 80193b6:	6962      	ldr	r2, [r4, #20]
 80193b8:	4407      	add	r7, r0
 80193ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80193bc:	9600      	str	r6, [sp, #0]
 80193be:	68e0      	ldr	r0, [r4, #12]
 80193c0:	fb93 f8f8 	sdiv	r8, r3, r8
 80193c4:	4442      	add	r2, r8
 80193c6:	9203      	str	r2, [sp, #12]
 80193c8:	682a      	ldr	r2, [r5, #0]
 80193ca:	f7ff ff83 	bl	80192d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193ce:	4680      	mov	r8, r0
 80193d0:	9600      	str	r6, [sp, #0]
 80193d2:	69a3      	ldr	r3, [r4, #24]
 80193d4:	686a      	ldr	r2, [r5, #4]
 80193d6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80193d8:	6920      	ldr	r0, [r4, #16]
 80193da:	f7ff ff7b 	bl	80192d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80193de:	4440      	add	r0, r8
 80193e0:	e7cc      	b.n	801937c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80193e2:	bf00      	nop
 80193e4:	240284fc 	.word	0x240284fc

080193e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80193e8:	4b07      	ldr	r3, [pc, #28]	@ (8019408 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80193ea:	781b      	ldrb	r3, [r3, #0]
 80193ec:	2b01      	cmp	r3, #1
 80193ee:	d109      	bne.n	8019404 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80193f0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80193f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80193f8:	8003      	strh	r3, [r0, #0]
 80193fa:	4b04      	ldr	r3, [pc, #16]	@ (801940c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80193fc:	881b      	ldrh	r3, [r3, #0]
 80193fe:	3b01      	subs	r3, #1
 8019400:	1a9b      	subs	r3, r3, r2
 8019402:	800b      	strh	r3, [r1, #0]
 8019404:	4770      	bx	lr
 8019406:	bf00      	nop
 8019408:	240284e0 	.word	0x240284e0
 801940c:	240284dc 	.word	0x240284dc

08019410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019410:	4b07      	ldr	r3, [pc, #28]	@ (8019430 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019412:	b510      	push	{r4, lr}
 8019414:	781b      	ldrb	r3, [r3, #0]
 8019416:	2b01      	cmp	r3, #1
 8019418:	d108      	bne.n	801942c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801941a:	4b06      	ldr	r3, [pc, #24]	@ (8019434 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801941c:	880c      	ldrh	r4, [r1, #0]
 801941e:	881b      	ldrh	r3, [r3, #0]
 8019420:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019424:	3b01      	subs	r3, #1
 8019426:	1b1b      	subs	r3, r3, r4
 8019428:	8003      	strh	r3, [r0, #0]
 801942a:	800a      	strh	r2, [r1, #0]
 801942c:	bd10      	pop	{r4, pc}
 801942e:	bf00      	nop
 8019430:	240284e0 	.word	0x240284e0
 8019434:	240284dc 	.word	0x240284dc

08019438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019438:	4b0a      	ldr	r3, [pc, #40]	@ (8019464 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801943a:	b510      	push	{r4, lr}
 801943c:	781b      	ldrb	r3, [r3, #0]
 801943e:	2b01      	cmp	r3, #1
 8019440:	d10e      	bne.n	8019460 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019442:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019446:	8843      	ldrh	r3, [r0, #2]
 8019448:	f9b0 4000 	ldrsh.w	r4, [r0]
 801944c:	18ca      	adds	r2, r1, r3
 801944e:	4b06      	ldr	r3, [pc, #24]	@ (8019468 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019450:	8044      	strh	r4, [r0, #2]
 8019452:	881b      	ldrh	r3, [r3, #0]
 8019454:	1a9b      	subs	r3, r3, r2
 8019456:	8003      	strh	r3, [r0, #0]
 8019458:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801945c:	8081      	strh	r1, [r0, #4]
 801945e:	80c3      	strh	r3, [r0, #6]
 8019460:	bd10      	pop	{r4, pc}
 8019462:	bf00      	nop
 8019464:	240284e0 	.word	0x240284e0
 8019468:	240284dc 	.word	0x240284dc

0801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801946c:	4b08      	ldr	r3, [pc, #32]	@ (8019490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801946e:	781b      	ldrb	r3, [r3, #0]
 8019470:	2b01      	cmp	r3, #1
 8019472:	d10c      	bne.n	801948e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8019474:	8803      	ldrh	r3, [r0, #0]
 8019476:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801947a:	8842      	ldrh	r2, [r0, #2]
 801947c:	8002      	strh	r2, [r0, #0]
 801947e:	185a      	adds	r2, r3, r1
 8019480:	4b04      	ldr	r3, [pc, #16]	@ (8019494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019482:	881b      	ldrh	r3, [r3, #0]
 8019484:	1a9b      	subs	r3, r3, r2
 8019486:	8043      	strh	r3, [r0, #2]
 8019488:	88c3      	ldrh	r3, [r0, #6]
 801948a:	80c1      	strh	r1, [r0, #6]
 801948c:	8083      	strh	r3, [r0, #4]
 801948e:	4770      	bx	lr
 8019490:	240284e0 	.word	0x240284e0
 8019494:	240284dc 	.word	0x240284dc

08019498 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019498:	4b07      	ldr	r3, [pc, #28]	@ (80194b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801949a:	b510      	push	{r4, lr}
 801949c:	781b      	ldrb	r3, [r3, #0]
 801949e:	2b01      	cmp	r3, #1
 80194a0:	d108      	bne.n	80194b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80194a2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80194a6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80194aa:	8003      	strh	r3, [r0, #0]
 80194ac:	8893      	ldrh	r3, [r2, #4]
 80194ae:	3b01      	subs	r3, #1
 80194b0:	1b1b      	subs	r3, r3, r4
 80194b2:	800b      	strh	r3, [r1, #0]
 80194b4:	bd10      	pop	{r4, pc}
 80194b6:	bf00      	nop
 80194b8:	240284e0 	.word	0x240284e0

080194bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 80194bc:	4b0b      	ldr	r3, [pc, #44]	@ (80194ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 80194be:	781b      	ldrb	r3, [r3, #0]
 80194c0:	2b01      	cmp	r3, #1
 80194c2:	d111      	bne.n	80194e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 80194c4:	680b      	ldr	r3, [r1, #0]
 80194c6:	ed90 7a00 	vldr	s14, [r0]
 80194ca:	6003      	str	r3, [r0, #0]
 80194cc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80194d0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80194f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 80194d4:	ee07 3a90 	vmov	s15, r3
 80194d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80194dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80194e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194e4:	edc1 7a00 	vstr	s15, [r1]
 80194e8:	4770      	bx	lr
 80194ea:	bf00      	nop
 80194ec:	240284e0 	.word	0x240284e0
 80194f0:	38d1b717 	.word	0x38d1b717

080194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80194f4:	4b0a      	ldr	r3, [pc, #40]	@ (8019520 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80194f6:	460a      	mov	r2, r1
 80194f8:	b510      	push	{r4, lr}
 80194fa:	781b      	ldrb	r3, [r3, #0]
 80194fc:	2b01      	cmp	r3, #1
 80194fe:	d10d      	bne.n	801951c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019500:	8881      	ldrh	r1, [r0, #4]
 8019502:	8803      	ldrh	r3, [r0, #0]
 8019504:	440b      	add	r3, r1
 8019506:	4601      	mov	r1, r0
 8019508:	3b01      	subs	r3, #1
 801950a:	f821 3b02 	strh.w	r3, [r1], #2
 801950e:	f7ff ffc3 	bl	8019498 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019512:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019516:	88c2      	ldrh	r2, [r0, #6]
 8019518:	80c3      	strh	r3, [r0, #6]
 801951a:	8082      	strh	r2, [r0, #4]
 801951c:	bd10      	pop	{r4, pc}
 801951e:	bf00      	nop
 8019520:	240284e0 	.word	0x240284e0

08019524 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019524:	4b06      	ldr	r3, [pc, #24]	@ (8019540 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019526:	2100      	movs	r1, #0
 8019528:	f9b3 2000 	ldrsh.w	r2, [r3]
 801952c:	4b05      	ldr	r3, [pc, #20]	@ (8019544 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801952e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8019532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019536:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801953a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801953e:	4770      	bx	lr
 8019540:	240284dc 	.word	0x240284dc
 8019544:	240284de 	.word	0x240284de

08019548 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019548:	4b03      	ldr	r3, [pc, #12]	@ (8019558 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801954a:	6818      	ldr	r0, [r3, #0]
 801954c:	b110      	cbz	r0, 8019554 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801954e:	6803      	ldr	r3, [r0, #0]
 8019550:	699b      	ldr	r3, [r3, #24]
 8019552:	4718      	bx	r3
 8019554:	4770      	bx	lr
 8019556:	bf00      	nop
 8019558:	2402852c 	.word	0x2402852c

0801955c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801955c:	4770      	bx	lr
	...

08019560 <_ZN8touchgfx11Application4drawEv>:
 8019560:	4b09      	ldr	r3, [pc, #36]	@ (8019588 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019562:	b507      	push	{r0, r1, r2, lr}
 8019564:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019568:	2100      	movs	r1, #0
 801956a:	4b08      	ldr	r3, [pc, #32]	@ (801958c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801956c:	9100      	str	r1, [sp, #0]
 801956e:	4669      	mov	r1, sp
 8019570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019574:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019578:	f8ad 3006 	strh.w	r3, [sp, #6]
 801957c:	6803      	ldr	r3, [r0, #0]
 801957e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019580:	4798      	blx	r3
 8019582:	b003      	add	sp, #12
 8019584:	f85d fb04 	ldr.w	pc, [sp], #4
 8019588:	240284dc 	.word	0x240284dc
 801958c:	240284de 	.word	0x240284de

08019590 <_ZN8touchgfx11Application10invalidateEv>:
 8019590:	4b09      	ldr	r3, [pc, #36]	@ (80195b8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019592:	b082      	sub	sp, #8
 8019594:	2100      	movs	r1, #0
 8019596:	f9b3 2000 	ldrsh.w	r2, [r3]
 801959a:	4b08      	ldr	r3, [pc, #32]	@ (80195bc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801959c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80195a0:	aa02      	add	r2, sp, #8
 80195a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80195a6:	9100      	str	r1, [sp, #0]
 80195a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80195ac:	6803      	ldr	r3, [r0, #0]
 80195ae:	e912 0006 	ldmdb	r2, {r1, r2}
 80195b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80195b4:	b002      	add	sp, #8
 80195b6:	4718      	bx	r3
 80195b8:	240284dc 	.word	0x240284dc
 80195bc:	240284de 	.word	0x240284de

080195c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80195c0:	4b03      	ldr	r3, [pc, #12]	@ (80195d0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80195c2:	6818      	ldr	r0, [r3, #0]
 80195c4:	b110      	cbz	r0, 80195cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80195c6:	6803      	ldr	r3, [r0, #0]
 80195c8:	69db      	ldr	r3, [r3, #28]
 80195ca:	4718      	bx	r3
 80195cc:	4770      	bx	lr
 80195ce:	bf00      	nop
 80195d0:	2402852c 	.word	0x2402852c

080195d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80195d4:	4b03      	ldr	r3, [pc, #12]	@ (80195e4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80195d6:	6818      	ldr	r0, [r3, #0]
 80195d8:	b110      	cbz	r0, 80195e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80195da:	6803      	ldr	r3, [r0, #0]
 80195dc:	6a1b      	ldr	r3, [r3, #32]
 80195de:	4718      	bx	r3
 80195e0:	4770      	bx	lr
 80195e2:	bf00      	nop
 80195e4:	2402852c 	.word	0x2402852c

080195e8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80195e8:	2300      	movs	r3, #0
 80195ea:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80195ee:	4770      	bx	lr

080195f0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80195f0:	4b03      	ldr	r3, [pc, #12]	@ (8019600 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80195f2:	6818      	ldr	r0, [r3, #0]
 80195f4:	b110      	cbz	r0, 80195fc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80195f6:	6803      	ldr	r3, [r0, #0]
 80195f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195fa:	4718      	bx	r3
 80195fc:	4770      	bx	lr
 80195fe:	bf00      	nop
 8019600:	2402852c 	.word	0x2402852c

08019604 <_ZN8touchgfx11ApplicationD1Ev>:
 8019604:	4770      	bx	lr

08019606 <_ZN8touchgfx11ApplicationD0Ev>:
 8019606:	b510      	push	{r4, lr}
 8019608:	4604      	mov	r4, r0
 801960a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801960e:	f00e fc5f 	bl	8027ed0 <_ZdlPvj>
 8019612:	4620      	mov	r0, r4
 8019614:	bd10      	pop	{r4, pc}

08019616 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019616:	b510      	push	{r4, lr}
 8019618:	f9b1 4000 	ldrsh.w	r4, [r1]
 801961c:	888a      	ldrh	r2, [r1, #4]
 801961e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019622:	4422      	add	r2, r4
 8019624:	b212      	sxth	r2, r2
 8019626:	4293      	cmp	r3, r2
 8019628:	da15      	bge.n	8019656 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801962a:	8882      	ldrh	r2, [r0, #4]
 801962c:	4413      	add	r3, r2
 801962e:	b21b      	sxth	r3, r3
 8019630:	429c      	cmp	r4, r3
 8019632:	da10      	bge.n	8019656 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019634:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019638:	88c9      	ldrh	r1, [r1, #6]
 801963a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801963e:	4419      	add	r1, r3
 8019640:	b209      	sxth	r1, r1
 8019642:	428a      	cmp	r2, r1
 8019644:	da07      	bge.n	8019656 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019646:	88c0      	ldrh	r0, [r0, #6]
 8019648:	4410      	add	r0, r2
 801964a:	b200      	sxth	r0, r0
 801964c:	4283      	cmp	r3, r0
 801964e:	bfac      	ite	ge
 8019650:	2000      	movge	r0, #0
 8019652:	2001      	movlt	r0, #1
 8019654:	bd10      	pop	{r4, pc}
 8019656:	2000      	movs	r0, #0
 8019658:	e7fc      	b.n	8019654 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801965a <_ZN8touchgfx4Rect10restrictToEss>:
 801965a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801965e:	2b00      	cmp	r3, #0
 8019660:	b510      	push	{r4, lr}
 8019662:	da04      	bge.n	801966e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019664:	8884      	ldrh	r4, [r0, #4]
 8019666:	4423      	add	r3, r4
 8019668:	8083      	strh	r3, [r0, #4]
 801966a:	2300      	movs	r3, #0
 801966c:	8003      	strh	r3, [r0, #0]
 801966e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019672:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019676:	1b09      	subs	r1, r1, r4
 8019678:	428b      	cmp	r3, r1
 801967a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801967e:	bfc8      	it	gt
 8019680:	8081      	strhgt	r1, [r0, #4]
 8019682:	2b00      	cmp	r3, #0
 8019684:	da04      	bge.n	8019690 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019686:	88c1      	ldrh	r1, [r0, #6]
 8019688:	440b      	add	r3, r1
 801968a:	80c3      	strh	r3, [r0, #6]
 801968c:	2300      	movs	r3, #0
 801968e:	8043      	strh	r3, [r0, #2]
 8019690:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019694:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019698:	1a52      	subs	r2, r2, r1
 801969a:	4293      	cmp	r3, r2
 801969c:	bfc8      	it	gt
 801969e:	80c2      	strhgt	r2, [r0, #6]
 80196a0:	bd10      	pop	{r4, pc}
	...

080196a4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80196a4:	4b10      	ldr	r3, [pc, #64]	@ (80196e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80196a6:	b510      	push	{r4, lr}
 80196a8:	460c      	mov	r4, r1
 80196aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80196ae:	4b0f      	ldr	r3, [pc, #60]	@ (80196ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80196b0:	4620      	mov	r0, r4
 80196b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80196b6:	f7ff ffd0 	bl	801965a <_ZN8touchgfx4Rect10restrictToEss>
 80196ba:	4b0d      	ldr	r3, [pc, #52]	@ (80196f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80196bc:	6818      	ldr	r0, [r3, #0]
 80196be:	b190      	cbz	r0, 80196e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80196c0:	6803      	ldr	r3, [r0, #0]
 80196c2:	4621      	mov	r1, r4
 80196c4:	689b      	ldr	r3, [r3, #8]
 80196c6:	4798      	blx	r3
 80196c8:	4b0a      	ldr	r3, [pc, #40]	@ (80196f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80196ca:	6818      	ldr	r0, [r3, #0]
 80196cc:	b118      	cbz	r0, 80196d6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80196ce:	6803      	ldr	r3, [r0, #0]
 80196d0:	4621      	mov	r1, r4
 80196d2:	689b      	ldr	r3, [r3, #8]
 80196d4:	4798      	blx	r3
 80196d6:	4b08      	ldr	r3, [pc, #32]	@ (80196f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80196d8:	4621      	mov	r1, r4
 80196da:	6818      	ldr	r0, [r3, #0]
 80196dc:	6803      	ldr	r3, [r0, #0]
 80196de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196e2:	69db      	ldr	r3, [r3, #28]
 80196e4:	4718      	bx	r3
 80196e6:	bd10      	pop	{r4, pc}
 80196e8:	240284de 	.word	0x240284de
 80196ec:	240284dc 	.word	0x240284dc
 80196f0:	2402852c 	.word	0x2402852c
 80196f4:	24028528 	.word	0x24028528
 80196f8:	240284e8 	.word	0x240284e8

080196fc <_ZNK8touchgfx4Rect8includesERKS0_>:
 80196fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196fe:	4606      	mov	r6, r0
 8019700:	4608      	mov	r0, r1
 8019702:	460f      	mov	r7, r1
 8019704:	f7f8 fbf7 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019708:	b9e8      	cbnz	r0, 8019746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801970a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801970e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019712:	42a5      	cmp	r5, r4
 8019714:	db17      	blt.n	8019746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019716:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801971a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801971e:	429a      	cmp	r2, r3
 8019720:	db11      	blt.n	8019746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019722:	88b9      	ldrh	r1, [r7, #4]
 8019724:	440d      	add	r5, r1
 8019726:	88b1      	ldrh	r1, [r6, #4]
 8019728:	440c      	add	r4, r1
 801972a:	b22d      	sxth	r5, r5
 801972c:	b224      	sxth	r4, r4
 801972e:	42a5      	cmp	r5, r4
 8019730:	dc09      	bgt.n	8019746 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019732:	88f8      	ldrh	r0, [r7, #6]
 8019734:	4410      	add	r0, r2
 8019736:	88f2      	ldrh	r2, [r6, #6]
 8019738:	4413      	add	r3, r2
 801973a:	b200      	sxth	r0, r0
 801973c:	b21b      	sxth	r3, r3
 801973e:	4298      	cmp	r0, r3
 8019740:	bfcc      	ite	gt
 8019742:	2000      	movgt	r0, #0
 8019744:	2001      	movle	r0, #1
 8019746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019748 <_ZN8touchgfx11Application11getInstanceEv>:
 8019748:	4b01      	ldr	r3, [pc, #4]	@ (8019750 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801974a:	6818      	ldr	r0, [r3, #0]
 801974c:	4770      	bx	lr
 801974e:	bf00      	nop
 8019750:	2402853c 	.word	0x2402853c

08019754 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8019754:	2300      	movs	r3, #0
 8019756:	b510      	push	{r4, lr}
 8019758:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801975c:	4604      	mov	r4, r0
 801975e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8019762:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8019766:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801976a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801976e:	429a      	cmp	r2, r3
 8019770:	d90e      	bls.n	8019790 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8019772:	18e2      	adds	r2, r4, r3
 8019774:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8019778:	b122      	cbz	r2, 8019784 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801977a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801977e:	6803      	ldr	r3, [r0, #0]
 8019780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019782:	4798      	blx	r3
 8019784:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8019788:	3301      	adds	r3, #1
 801978a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801978e:	e7ea      	b.n	8019766 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8019790:	bd10      	pop	{r4, pc}

08019792 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8019792:	b530      	push	{r4, r5, lr}
 8019794:	2200      	movs	r2, #0
 8019796:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801979a:	b293      	uxth	r3, r2
 801979c:	429d      	cmp	r5, r3
 801979e:	d90e      	bls.n	80197be <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80197a0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80197a4:	428b      	cmp	r3, r1
 80197a6:	d10b      	bne.n	80197c0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80197a8:	1884      	adds	r4, r0, r2
 80197aa:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 80197ae:	b13b      	cbz	r3, 80197c0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80197b0:	3b01      	subs	r3, #1
 80197b2:	b2db      	uxtb	r3, r3
 80197b4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 80197b8:	b90b      	cbnz	r3, 80197be <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80197ba:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80197be:	bd30      	pop	{r4, r5, pc}
 80197c0:	3201      	adds	r2, #1
 80197c2:	e7ea      	b.n	801979a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080197c4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80197c4:	2300      	movs	r3, #0
 80197c6:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80197ca:	30a4      	adds	r0, #164	@ 0xa4
 80197cc:	f820 3c24 	strh.w	r3, [r0, #-36]
 80197d0:	f802 3b01 	strb.w	r3, [r2], #1
 80197d4:	4282      	cmp	r2, r0
 80197d6:	d1fb      	bne.n	80197d0 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80197d8:	4770      	bx	lr
	...

080197dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80197dc:	b570      	push	{r4, r5, r6, lr}
 80197de:	4c0b      	ldr	r4, [pc, #44]	@ (801980c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80197e0:	4605      	mov	r5, r0
 80197e2:	460e      	mov	r6, r1
 80197e4:	6820      	ldr	r0, [r4, #0]
 80197e6:	b110      	cbz	r0, 80197ee <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80197e8:	6803      	ldr	r3, [r0, #0]
 80197ea:	695b      	ldr	r3, [r3, #20]
 80197ec:	4798      	blx	r3
 80197ee:	1d28      	adds	r0, r5, #4
 80197f0:	f7ff ffe8 	bl	80197c4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80197f4:	6026      	str	r6, [r4, #0]
 80197f6:	6833      	ldr	r3, [r6, #0]
 80197f8:	4630      	mov	r0, r6
 80197fa:	68db      	ldr	r3, [r3, #12]
 80197fc:	4798      	blx	r3
 80197fe:	682b      	ldr	r3, [r5, #0]
 8019800:	4628      	mov	r0, r5
 8019802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019808:	4718      	bx	r3
 801980a:	bf00      	nop
 801980c:	2402852c 	.word	0x2402852c

08019810 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019810:	2300      	movs	r3, #0
 8019812:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8019816:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801981a:	461a      	mov	r2, r3
 801981c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801981e:	461c      	mov	r4, r3
 8019820:	461d      	mov	r5, r3
 8019822:	459c      	cmp	ip, r3
 8019824:	dd1a      	ble.n	801985c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8019826:	18c6      	adds	r6, r0, r3
 8019828:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801982c:	b16e      	cbz	r6, 801984a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801982e:	429a      	cmp	r2, r3
 8019830:	d008      	beq.n	8019844 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8019832:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8019836:	fa1f fe82 	uxth.w	lr, r2
 801983a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801983e:	1887      	adds	r7, r0, r2
 8019840:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8019844:	3201      	adds	r2, #1
 8019846:	3301      	adds	r3, #1
 8019848:	e7eb      	b.n	8019822 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801984a:	4299      	cmp	r1, r3
 801984c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8019850:	bfa8      	it	ge
 8019852:	3501      	addge	r5, #1
 8019854:	429e      	cmp	r6, r3
 8019856:	bfc8      	it	gt
 8019858:	3401      	addgt	r4, #1
 801985a:	e7f4      	b.n	8019846 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801985c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8019860:	1b49      	subs	r1, r1, r5
 8019862:	1b1b      	subs	r3, r3, r4
 8019864:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8019868:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801986c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8019870:	4293      	cmp	r3, r2
 8019872:	dd03      	ble.n	801987c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8019874:	3b01      	subs	r3, #1
 8019876:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801987a:	e7f7      	b.n	801986c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801987c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019880 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019880:	b570      	push	{r4, r5, r6, lr}
 8019882:	4d16      	ldr	r5, [pc, #88]	@ (80198dc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8019884:	4604      	mov	r4, r0
 8019886:	6828      	ldr	r0, [r5, #0]
 8019888:	b140      	cbz	r0, 801989c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801988a:	7a03      	ldrb	r3, [r0, #8]
 801988c:	b933      	cbnz	r3, 801989c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801988e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8019892:	6803      	ldr	r3, [r0, #0]
 8019894:	689b      	ldr	r3, [r3, #8]
 8019896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801989a:	4718      	bx	r3
 801989c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80198a0:	4e0f      	ldr	r6, [pc, #60]	@ (80198e0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80198a2:	b973      	cbnz	r3, 80198c2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80198a4:	b168      	cbz	r0, 80198c2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80198a6:	7a03      	ldrb	r3, [r0, #8]
 80198a8:	b15b      	cbz	r3, 80198c2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80198aa:	6830      	ldr	r0, [r6, #0]
 80198ac:	b110      	cbz	r0, 80198b4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80198ae:	6803      	ldr	r3, [r0, #0]
 80198b0:	691b      	ldr	r3, [r3, #16]
 80198b2:	4798      	blx	r3
 80198b4:	6828      	ldr	r0, [r5, #0]
 80198b6:	6803      	ldr	r3, [r0, #0]
 80198b8:	68db      	ldr	r3, [r3, #12]
 80198ba:	4798      	blx	r3
 80198bc:	2301      	movs	r3, #1
 80198be:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80198c2:	3404      	adds	r4, #4
 80198c4:	4620      	mov	r0, r4
 80198c6:	f7ff ff45 	bl	8019754 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80198ca:	4620      	mov	r0, r4
 80198cc:	f7ff ffa0 	bl	8019810 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80198d0:	6830      	ldr	r0, [r6, #0]
 80198d2:	b110      	cbz	r0, 80198da <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80198d4:	6803      	ldr	r3, [r0, #0]
 80198d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80198d8:	e7dd      	b.n	8019896 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80198da:	bd70      	pop	{r4, r5, r6, pc}
 80198dc:	24028530 	.word	0x24028530
 80198e0:	2402852c 	.word	0x2402852c

080198e4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80198e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198e6:	2300      	movs	r3, #0
 80198e8:	4604      	mov	r4, r0
 80198ea:	460d      	mov	r5, r1
 80198ec:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80198f0:	4618      	mov	r0, r3
 80198f2:	b29a      	uxth	r2, r3
 80198f4:	4291      	cmp	r1, r2
 80198f6:	d912      	bls.n	801991e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80198f8:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80198fc:	18e6      	adds	r6, r4, r3
 80198fe:	42af      	cmp	r7, r5
 8019900:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8019904:	d105      	bne.n	8019912 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8019906:	2aff      	cmp	r2, #255	@ 0xff
 8019908:	d002      	beq.n	8019910 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801990a:	3201      	adds	r2, #1
 801990c:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8019910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019912:	2a00      	cmp	r2, #0
 8019914:	f103 0301 	add.w	r3, r3, #1
 8019918:	bf08      	it	eq
 801991a:	2001      	moveq	r0, #1
 801991c:	e7e9      	b.n	80198f2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801991e:	b120      	cbz	r0, 801992a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8019920:	2920      	cmp	r1, #32
 8019922:	d102      	bne.n	801992a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8019924:	4620      	mov	r0, r4
 8019926:	f7ff ff73 	bl	8019810 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801992a:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801992e:	2b1f      	cmp	r3, #31
 8019930:	d8ee      	bhi.n	8019910 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8019932:	18e2      	adds	r2, r4, r3
 8019934:	2101      	movs	r1, #1
 8019936:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801993a:	185a      	adds	r2, r3, r1
 801993c:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8019940:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8019944:	e7e4      	b.n	8019910 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08019946 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019946:	4603      	mov	r3, r0
 8019948:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801994c:	2200      	movs	r2, #0
 801994e:	801a      	strh	r2, [r3, #0]
 8019950:	3308      	adds	r3, #8
 8019952:	f823 2c06 	strh.w	r2, [r3, #-6]
 8019956:	f823 2c04 	strh.w	r2, [r3, #-4]
 801995a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801995e:	428b      	cmp	r3, r1
 8019960:	d1f5      	bne.n	801994e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019962:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8019966:	4770      	bx	lr

08019968 <_ZN8touchgfx11ApplicationC1Ev>:
 8019968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801996a:	4b1d      	ldr	r3, [pc, #116]	@ (80199e0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801996c:	4606      	mov	r6, r0
 801996e:	4604      	mov	r4, r0
 8019970:	2500      	movs	r5, #0
 8019972:	f846 3b04 	str.w	r3, [r6], #4
 8019976:	22a8      	movs	r2, #168	@ 0xa8
 8019978:	2100      	movs	r1, #0
 801997a:	4630      	mov	r0, r6
 801997c:	f00f f8bc 	bl	8028af8 <memset>
 8019980:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8019984:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8019988:	4f16      	ldr	r7, [pc, #88]	@ (80199e4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801998a:	f7ff ffdc 	bl	8019946 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801998e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8019992:	f7ff ffd8 	bl	8019946 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019996:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801999a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801999e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80199a2:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80199a6:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80199aa:	490f      	ldr	r1, [pc, #60]	@ (80199e8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80199ac:	480f      	ldr	r0, [pc, #60]	@ (80199ec <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80199ae:	f00d fbff 	bl	80271b0 <CRC_Lock>
 80199b2:	4b0f      	ldr	r3, [pc, #60]	@ (80199f0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80199b4:	b158      	cbz	r0, 80199ce <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80199b6:	801d      	strh	r5, [r3, #0]
 80199b8:	2300      	movs	r3, #0
 80199ba:	4a0e      	ldr	r2, [pc, #56]	@ (80199f4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80199bc:	4630      	mov	r0, r6
 80199be:	6013      	str	r3, [r2, #0]
 80199c0:	4a0d      	ldr	r2, [pc, #52]	@ (80199f8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80199c2:	603b      	str	r3, [r7, #0]
 80199c4:	6013      	str	r3, [r2, #0]
 80199c6:	f7ff fefd 	bl	80197c4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80199ca:	4620      	mov	r0, r4
 80199cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80199d2:	2002      	movs	r0, #2
 80199d4:	801a      	strh	r2, [r3, #0]
 80199d6:	6038      	str	r0, [r7, #0]
 80199d8:	f001 fe58 	bl	801b68c <_ZN8touchgfx6Screen4drawEv>
 80199dc:	e7ec      	b.n	80199b8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80199de:	bf00      	nop
 80199e0:	0802d24c 	.word	0x0802d24c
 80199e4:	2402852c 	.word	0x2402852c
 80199e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80199ec:	f407a5c2 	.word	0xf407a5c2
 80199f0:	2400007c 	.word	0x2400007c
 80199f4:	2402853c 	.word	0x2402853c
 80199f8:	24028530 	.word	0x24028530

080199fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80199fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8019a00:	3b01      	subs	r3, #1
 8019a02:	b29b      	uxth	r3, r3
 8019a04:	428b      	cmp	r3, r1
 8019a06:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8019a0a:	b510      	push	{r4, lr}
 8019a0c:	d908      	bls.n	8019a20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8019a0e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8019a12:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8019a16:	681a      	ldr	r2, [r3, #0]
 8019a18:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8019a1c:	685a      	ldr	r2, [r3, #4]
 8019a1e:	6062      	str	r2, [r4, #4]
 8019a20:	bd10      	pop	{r4, pc}
	...

08019a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8019a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a28:	b08f      	sub	sp, #60	@ 0x3c
 8019a2a:	4b8f      	ldr	r3, [pc, #572]	@ (8019c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8019a2c:	4683      	mov	fp, r0
 8019a2e:	ac0a      	add	r4, sp, #40	@ 0x28
 8019a30:	e884 0006 	stmia.w	r4, {r1, r2}
 8019a34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a38:	4620      	mov	r0, r4
 8019a3a:	4b8c      	ldr	r3, [pc, #560]	@ (8019c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8019a3c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019a40:	f7ff fe0b 	bl	801965a <_ZN8touchgfx4Rect10restrictToEss>
 8019a44:	4620      	mov	r0, r4
 8019a46:	f7f8 fa56 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a4a:	2800      	cmp	r0, #0
 8019a4c:	d16a      	bne.n	8019b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019a4e:	9403      	str	r4, [sp, #12]
 8019a50:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019a54:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8019a58:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8019a5c:	9301      	str	r3, [sp, #4]
 8019a5e:	35a4      	adds	r5, #164	@ 0xa4
 8019a60:	b15c      	cbz	r4, 8019a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8019a62:	4629      	mov	r1, r5
 8019a64:	9803      	ldr	r0, [sp, #12]
 8019a66:	f7ff fe49 	bl	80196fc <_ZNK8touchgfx4Rect8includesERKS0_>
 8019a6a:	3c01      	subs	r4, #1
 8019a6c:	b118      	cbz	r0, 8019a76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8019a6e:	b2a1      	uxth	r1, r4
 8019a70:	9801      	ldr	r0, [sp, #4]
 8019a72:	f7ff ffc3 	bl	80199fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019a76:	3d08      	subs	r5, #8
 8019a78:	e7f2      	b.n	8019a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8019a7a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8019a7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019a82:	f8cd a010 	str.w	sl, [sp, #16]
 8019a86:	9302      	str	r3, [sp, #8]
 8019a88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019a8c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8019a90:	9306      	str	r3, [sp, #24]
 8019a92:	445c      	add	r4, fp
 8019a94:	2500      	movs	r5, #0
 8019a96:	4626      	mov	r6, r4
 8019a98:	f8cd a014 	str.w	sl, [sp, #20]
 8019a9c:	462f      	mov	r7, r5
 8019a9e:	9b05      	ldr	r3, [sp, #20]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d073      	beq.n	8019b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8019aa4:	9903      	ldr	r1, [sp, #12]
 8019aa6:	4630      	mov	r0, r6
 8019aa8:	f7ff fdb5 	bl	8019616 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019aac:	b350      	cbz	r0, 8019b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019aae:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8019ab2:	f9b6 c000 	ldrsh.w	ip, [r6]
 8019ab6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8019aba:	45e6      	cmp	lr, ip
 8019abc:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019ac0:	db33      	blt.n	8019b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019ac2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019ac6:	88b3      	ldrh	r3, [r6, #4]
 8019ac8:	4472      	add	r2, lr
 8019aca:	4463      	add	r3, ip
 8019acc:	b212      	sxth	r2, r2
 8019ace:	b21b      	sxth	r3, r3
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	dc2a      	bgt.n	8019b2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8019ad4:	fa1f f289 	uxth.w	r2, r9
 8019ad8:	88f3      	ldrh	r3, [r6, #6]
 8019ada:	45c8      	cmp	r8, r9
 8019adc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019ae0:	4413      	add	r3, r2
 8019ae2:	fa1f fc88 	uxth.w	ip, r8
 8019ae6:	b29b      	uxth	r3, r3
 8019ae8:	fa0f fe83 	sxth.w	lr, r3
 8019aec:	db0f      	blt.n	8019b0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019aee:	eba3 030c 	sub.w	r3, r3, ip
 8019af2:	1ac9      	subs	r1, r1, r3
 8019af4:	b209      	sxth	r1, r1
 8019af6:	2900      	cmp	r1, #0
 8019af8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019afc:	dd12      	ble.n	8019b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019afe:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8019b02:	4605      	mov	r5, r0
 8019b04:	9b05      	ldr	r3, [sp, #20]
 8019b06:	3e08      	subs	r6, #8
 8019b08:	3b01      	subs	r3, #1
 8019b0a:	9305      	str	r3, [sp, #20]
 8019b0c:	e7c7      	b.n	8019a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019b0e:	4461      	add	r1, ip
 8019b10:	b209      	sxth	r1, r1
 8019b12:	4571      	cmp	r1, lr
 8019b14:	dc38      	bgt.n	8019b88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019b16:	eba2 020c 	sub.w	r2, r2, ip
 8019b1a:	b212      	sxth	r2, r2
 8019b1c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8019b20:	2a00      	cmp	r2, #0
 8019b22:	dcee      	bgt.n	8019b02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8019b24:	b00f      	add	sp, #60	@ 0x3c
 8019b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b2a:	45c8      	cmp	r8, r9
 8019b2c:	db2c      	blt.n	8019b88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019b2e:	88f3      	ldrh	r3, [r6, #6]
 8019b30:	4499      	add	r9, r3
 8019b32:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8019b36:	4498      	add	r8, r3
 8019b38:	fa0f f989 	sxth.w	r9, r9
 8019b3c:	fa0f f888 	sxth.w	r8, r8
 8019b40:	45c1      	cmp	r9, r8
 8019b42:	db21      	blt.n	8019b88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019b44:	fa1f f28c 	uxth.w	r2, ip
 8019b48:	88b3      	ldrh	r3, [r6, #4]
 8019b4a:	45e6      	cmp	lr, ip
 8019b4c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019b50:	4413      	add	r3, r2
 8019b52:	fa1f f88e 	uxth.w	r8, lr
 8019b56:	b29b      	uxth	r3, r3
 8019b58:	fa0f f983 	sxth.w	r9, r3
 8019b5c:	db0a      	blt.n	8019b74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8019b5e:	eba3 0308 	sub.w	r3, r3, r8
 8019b62:	1ac9      	subs	r1, r1, r3
 8019b64:	b209      	sxth	r1, r1
 8019b66:	2900      	cmp	r1, #0
 8019b68:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8019b6c:	ddda      	ble.n	8019b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019b6e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019b72:	e7c6      	b.n	8019b02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8019b74:	4441      	add	r1, r8
 8019b76:	b209      	sxth	r1, r1
 8019b78:	4549      	cmp	r1, r9
 8019b7a:	dc05      	bgt.n	8019b88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019b7c:	eba2 0208 	sub.w	r2, r2, r8
 8019b80:	b212      	sxth	r2, r2
 8019b82:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8019b86:	e7cb      	b.n	8019b20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8019b88:	4607      	mov	r7, r0
 8019b8a:	e7bb      	b.n	8019b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019b8c:	2d00      	cmp	r5, #0
 8019b8e:	d181      	bne.n	8019a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8019b90:	2f00      	cmp	r7, #0
 8019b92:	f000 81dd 	beq.w	8019f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8019b96:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8019b9a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8019b9e:	b2b3      	uxth	r3, r6
 8019ba0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8019ba4:	9305      	str	r3, [sp, #20]
 8019ba6:	9a05      	ldr	r2, [sp, #20]
 8019ba8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019bac:	4413      	add	r3, r2
 8019bae:	b2ba      	uxth	r2, r7
 8019bb0:	4492      	add	sl, r2
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	fa1f fa8a 	uxth.w	sl, sl
 8019bb8:	fa0f f883 	sxth.w	r8, r3
 8019bbc:	fa0f f98a 	sxth.w	r9, sl
 8019bc0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8019bc4:	9b04      	ldr	r3, [sp, #16]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d052      	beq.n	8019c70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019bca:	9903      	ldr	r1, [sp, #12]
 8019bcc:	4620      	mov	r0, r4
 8019bce:	f7ff fd22 	bl	8019616 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019bd2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019bd6:	b1c0      	cbz	r0, 8019c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019bd8:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019bdc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019be0:	4576      	cmp	r6, lr
 8019be2:	dc22      	bgt.n	8019c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019be4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019be8:	44f4      	add	ip, lr
 8019bea:	fa0f fc8c 	sxth.w	ip, ip
 8019bee:	45e0      	cmp	r8, ip
 8019bf0:	db1b      	blt.n	8019c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019bf2:	428f      	cmp	r7, r1
 8019bf4:	fa1f fc81 	uxth.w	ip, r1
 8019bf8:	88e1      	ldrh	r1, [r4, #6]
 8019bfa:	dc0d      	bgt.n	8019c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8019bfc:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019c00:	f8a4 9002 	strh.w	r9, [r4, #2]
 8019c04:	eba1 010c 	sub.w	r1, r1, ip
 8019c08:	80e1      	strh	r1, [r4, #6]
 8019c0a:	4628      	mov	r0, r5
 8019c0c:	9904      	ldr	r1, [sp, #16]
 8019c0e:	3c08      	subs	r4, #8
 8019c10:	4605      	mov	r5, r0
 8019c12:	3901      	subs	r1, #1
 8019c14:	9104      	str	r1, [sp, #16]
 8019c16:	e7d3      	b.n	8019bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8019c18:	4461      	add	r1, ip
 8019c1a:	b209      	sxth	r1, r1
 8019c1c:	4549      	cmp	r1, r9
 8019c1e:	dcf5      	bgt.n	8019c0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019c20:	eba2 0c0c 	sub.w	ip, r2, ip
 8019c24:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019c28:	e7ef      	b.n	8019c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019c2a:	428f      	cmp	r7, r1
 8019c2c:	dcee      	bgt.n	8019c0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019c2e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8019c32:	4461      	add	r1, ip
 8019c34:	b209      	sxth	r1, r1
 8019c36:	4589      	cmp	r9, r1
 8019c38:	dbe8      	blt.n	8019c0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019c3a:	4576      	cmp	r6, lr
 8019c3c:	fa1f fc8e 	uxth.w	ip, lr
 8019c40:	88a1      	ldrh	r1, [r4, #4]
 8019c42:	dc07      	bgt.n	8019c54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8019c44:	eba3 0c0c 	sub.w	ip, r3, ip
 8019c48:	f8a4 8000 	strh.w	r8, [r4]
 8019c4c:	eba1 010c 	sub.w	r1, r1, ip
 8019c50:	80a1      	strh	r1, [r4, #4]
 8019c52:	e7da      	b.n	8019c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019c54:	4461      	add	r1, ip
 8019c56:	b209      	sxth	r1, r1
 8019c58:	4588      	cmp	r8, r1
 8019c5a:	dbd7      	blt.n	8019c0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8019c5c:	9905      	ldr	r1, [sp, #20]
 8019c5e:	eba1 0c0c 	sub.w	ip, r1, ip
 8019c62:	f8a4 c004 	strh.w	ip, [r4, #4]
 8019c66:	e7d0      	b.n	8019c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8019c68:	240284de 	.word	0x240284de
 8019c6c:	240284dc 	.word	0x240284dc
 8019c70:	2d00      	cmp	r5, #0
 8019c72:	f000 816d 	beq.w	8019f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8019c76:	9b06      	ldr	r3, [sp, #24]
 8019c78:	445b      	add	r3, fp
 8019c7a:	461c      	mov	r4, r3
 8019c7c:	9b02      	ldr	r3, [sp, #8]
 8019c7e:	3301      	adds	r3, #1
 8019c80:	f000 8166 	beq.w	8019f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8019c84:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8019c88:	9803      	ldr	r0, [sp, #12]
 8019c8a:	4629      	mov	r1, r5
 8019c8c:	f7ff fd36 	bl	80196fc <_ZNK8touchgfx4Rect8includesERKS0_>
 8019c90:	b120      	cbz	r0, 8019c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8019c92:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019c96:	9801      	ldr	r0, [sp, #4]
 8019c98:	f7ff feb0 	bl	80199fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019c9c:	9903      	ldr	r1, [sp, #12]
 8019c9e:	4628      	mov	r0, r5
 8019ca0:	f7ff fcb9 	bl	8019616 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019ca4:	2800      	cmp	r0, #0
 8019ca6:	f000 809c 	beq.w	8019de2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019caa:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8019cae:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019cb2:	fa1f f189 	uxth.w	r1, r9
 8019cb6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8019cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8019cbc:	eb01 0c03 	add.w	ip, r1, r3
 8019cc0:	b283      	uxth	r3, r0
 8019cc2:	4548      	cmp	r0, r9
 8019cc4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8019cc8:	fa1f fa8c 	uxth.w	sl, ip
 8019ccc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8019cd0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8019cd4:	eb03 050c 	add.w	r5, r3, ip
 8019cd8:	b2ad      	uxth	r5, r5
 8019cda:	9505      	str	r5, [sp, #20]
 8019cdc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019ce0:	9504      	str	r5, [sp, #16]
 8019ce2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8019ce6:	f340 8099 	ble.w	8019e1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8019cea:	1a5b      	subs	r3, r3, r1
 8019cec:	4596      	cmp	lr, r2
 8019cee:	fa0f f08a 	sxth.w	r0, sl
 8019cf2:	b29b      	uxth	r3, r3
 8019cf4:	b21e      	sxth	r6, r3
 8019cf6:	dd2e      	ble.n	8019d56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8019cf8:	9f02      	ldr	r7, [sp, #8]
 8019cfa:	fa1f fe8e 	uxth.w	lr, lr
 8019cfe:	b292      	uxth	r2, r2
 8019d00:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8019d04:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8019d08:	9f04      	ldr	r7, [sp, #16]
 8019d0a:	ebae 0102 	sub.w	r1, lr, r2
 8019d0e:	44a6      	add	lr, r4
 8019d10:	1a3f      	subs	r7, r7, r0
 8019d12:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8019d16:	b289      	uxth	r1, r1
 8019d18:	4402      	add	r2, r0
 8019d1a:	fa0f fe8e 	sxth.w	lr, lr
 8019d1e:	b20d      	sxth	r5, r1
 8019d20:	b212      	sxth	r2, r2
 8019d22:	436f      	muls	r7, r5
 8019d24:	ebae 0202 	sub.w	r2, lr, r2
 8019d28:	4372      	muls	r2, r6
 8019d2a:	4297      	cmp	r7, r2
 8019d2c:	db09      	blt.n	8019d42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8019d2e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8019d32:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8019d36:	449c      	add	ip, r3
 8019d38:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8019d3c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019d40:	e686      	b.n	8019a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019d42:	4421      	add	r1, r4
 8019d44:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8019d48:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8019d4c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019d50:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019d54:	e67c      	b.n	8019a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019d56:	9f04      	ldr	r7, [sp, #16]
 8019d58:	42b8      	cmp	r0, r7
 8019d5a:	da27      	bge.n	8019dac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8019d5c:	9902      	ldr	r1, [sp, #8]
 8019d5e:	1a3f      	subs	r7, r7, r0
 8019d60:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8019d64:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019d68:	eb05 010e 	add.w	r1, r5, lr
 8019d6c:	fa1f f881 	uxth.w	r8, r1
 8019d70:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8019d74:	4411      	add	r1, r2
 8019d76:	fa0f f988 	sxth.w	r9, r8
 8019d7a:	eba2 020e 	sub.w	r2, r2, lr
 8019d7e:	eba1 0108 	sub.w	r1, r1, r8
 8019d82:	4372      	muls	r2, r6
 8019d84:	b289      	uxth	r1, r1
 8019d86:	fa0f f881 	sxth.w	r8, r1
 8019d8a:	fb08 f707 	mul.w	r7, r8, r7
 8019d8e:	42ba      	cmp	r2, r7
 8019d90:	dc06      	bgt.n	8019da0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8019d92:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8019d96:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8019d9a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8019d9e:	e7ca      	b.n	8019d36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019da0:	4429      	add	r1, r5
 8019da2:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8019da6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019daa:	e651      	b.n	8019a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019dac:	9805      	ldr	r0, [sp, #20]
 8019dae:	2d06      	cmp	r5, #6
 8019db0:	ebaa 0000 	sub.w	r0, sl, r0
 8019db4:	b280      	uxth	r0, r0
 8019db6:	fa0f fe80 	sxth.w	lr, r0
 8019dba:	d817      	bhi.n	8019dec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8019dbc:	9b04      	ldr	r3, [sp, #16]
 8019dbe:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8019dc2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8019dc6:	1c6b      	adds	r3, r5, #1
 8019dc8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8019dcc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019dd0:	9b01      	ldr	r3, [sp, #4]
 8019dd2:	9801      	ldr	r0, [sp, #4]
 8019dd4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019dd8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019ddc:	805a      	strh	r2, [r3, #2]
 8019dde:	809e      	strh	r6, [r3, #4]
 8019de0:	80d9      	strh	r1, [r3, #6]
 8019de2:	9b02      	ldr	r3, [sp, #8]
 8019de4:	3c08      	subs	r4, #8
 8019de6:	3b01      	subs	r3, #1
 8019de8:	9302      	str	r3, [sp, #8]
 8019dea:	e747      	b.n	8019c7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8019dec:	9a02      	ldr	r2, [sp, #8]
 8019dee:	45b6      	cmp	lr, r6
 8019df0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019df4:	db0d      	blt.n	8019e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8019df6:	449c      	add	ip, r3
 8019df8:	445a      	add	r2, fp
 8019dfa:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8019dfe:	fa1f fc8c 	uxth.w	ip, ip
 8019e02:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8019e06:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8019e0a:	448c      	add	ip, r1
 8019e0c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8019e10:	e61e      	b.n	8019a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019e12:	445a      	add	r2, fp
 8019e14:	4484      	add	ip, r0
 8019e16:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8019e1a:	e78f      	b.n	8019d3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019e1c:	fa1f f18e 	uxth.w	r1, lr
 8019e20:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8019e24:	b293      	uxth	r3, r2
 8019e26:	4596      	cmp	lr, r2
 8019e28:	eb01 0806 	add.w	r8, r1, r6
 8019e2c:	9306      	str	r3, [sp, #24]
 8019e2e:	fa1f f888 	uxth.w	r8, r8
 8019e32:	9f06      	ldr	r7, [sp, #24]
 8019e34:	fa0f f388 	sxth.w	r3, r8
 8019e38:	9307      	str	r3, [sp, #28]
 8019e3a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019e3e:	443b      	add	r3, r7
 8019e40:	b29b      	uxth	r3, r3
 8019e42:	9308      	str	r3, [sp, #32]
 8019e44:	da24      	bge.n	8019e90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8019e46:	9905      	ldr	r1, [sp, #20]
 8019e48:	eba3 0308 	sub.w	r3, r3, r8
 8019e4c:	eba2 020e 	sub.w	r2, r2, lr
 8019e50:	eba9 0000 	sub.w	r0, r9, r0
 8019e54:	ebaa 0401 	sub.w	r4, sl, r1
 8019e58:	b29b      	uxth	r3, r3
 8019e5a:	b2a4      	uxth	r4, r4
 8019e5c:	b219      	sxth	r1, r3
 8019e5e:	b225      	sxth	r5, r4
 8019e60:	4348      	muls	r0, r1
 8019e62:	436a      	muls	r2, r5
 8019e64:	4282      	cmp	r2, r0
 8019e66:	9a02      	ldr	r2, [sp, #8]
 8019e68:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019e6c:	445a      	add	r2, fp
 8019e6e:	dc06      	bgt.n	8019e7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8019e70:	9b07      	ldr	r3, [sp, #28]
 8019e72:	44a4      	add	ip, r4
 8019e74:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8019e78:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8019e7c:	e75e      	b.n	8019d3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019e7e:	9904      	ldr	r1, [sp, #16]
 8019e80:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8019e84:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8019e88:	4433      	add	r3, r6
 8019e8a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019e8e:	e5df      	b.n	8019a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019e90:	9f06      	ldr	r7, [sp, #24]
 8019e92:	9b04      	ldr	r3, [sp, #16]
 8019e94:	1bc9      	subs	r1, r1, r7
 8019e96:	fa0f f78a 	sxth.w	r7, sl
 8019e9a:	b289      	uxth	r1, r1
 8019e9c:	429f      	cmp	r7, r3
 8019e9e:	fa0f fe81 	sxth.w	lr, r1
 8019ea2:	dd23      	ble.n	8019eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8019ea4:	9a05      	ldr	r2, [sp, #20]
 8019ea6:	eba9 0000 	sub.w	r0, r9, r0
 8019eaa:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019eae:	ebaa 0202 	sub.w	r2, sl, r2
 8019eb2:	9d07      	ldr	r5, [sp, #28]
 8019eb4:	fb0e f000 	mul.w	r0, lr, r0
 8019eb8:	b292      	uxth	r2, r2
 8019eba:	eba5 0a03 	sub.w	sl, r5, r3
 8019ebe:	9b02      	ldr	r3, [sp, #8]
 8019ec0:	b214      	sxth	r4, r2
 8019ec2:	00db      	lsls	r3, r3, #3
 8019ec4:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ec8:	445b      	add	r3, fp
 8019eca:	4550      	cmp	r0, sl
 8019ecc:	db03      	blt.n	8019ed6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8019ece:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8019ed2:	4494      	add	ip, r2
 8019ed4:	e732      	b.n	8019d3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019ed6:	9a04      	ldr	r2, [sp, #16]
 8019ed8:	4431      	add	r1, r6
 8019eda:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8019ede:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8019ee2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8019ee6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019eea:	e75c      	b.n	8019da6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8019eec:	9b08      	ldr	r3, [sp, #32]
 8019eee:	2d06      	cmp	r5, #6
 8019ef0:	eba3 0308 	sub.w	r3, r3, r8
 8019ef4:	b29b      	uxth	r3, r3
 8019ef6:	b218      	sxth	r0, r3
 8019ef8:	d813      	bhi.n	8019f22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8019efa:	9b07      	ldr	r3, [sp, #28]
 8019efc:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8019f00:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8019f04:	1c6b      	adds	r3, r5, #1
 8019f06:	9901      	ldr	r1, [sp, #4]
 8019f08:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8019f0c:	9b01      	ldr	r3, [sp, #4]
 8019f0e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8019f12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019f16:	805a      	strh	r2, [r3, #2]
 8019f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f1a:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019f1e:	809a      	strh	r2, [r3, #4]
 8019f20:	e75f      	b.n	8019de2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019f22:	9c02      	ldr	r4, [sp, #8]
 8019f24:	4570      	cmp	r0, lr
 8019f26:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8019f2a:	db0d      	blt.n	8019f48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8019f2c:	4431      	add	r1, r6
 8019f2e:	9b06      	ldr	r3, [sp, #24]
 8019f30:	445c      	add	r4, fp
 8019f32:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8019f36:	b289      	uxth	r1, r1
 8019f38:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8019f3c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8019f40:	4419      	add	r1, r3
 8019f42:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8019f46:	e583      	b.n	8019a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019f48:	445c      	add	r4, fp
 8019f4a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8019f4e:	e79b      	b.n	8019e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8019f50:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8019f54:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8019f58:	1e65      	subs	r5, r4, #1
 8019f5a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8019f5e:	b2ad      	uxth	r5, r5
 8019f60:	42b5      	cmp	r5, r6
 8019f62:	d044      	beq.n	8019fee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8019f64:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8019f68:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8019f6c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8019f70:	4282      	cmp	r2, r0
 8019f72:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8019f76:	d11f      	bne.n	8019fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019f78:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8019f7c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8019f80:	459c      	cmp	ip, r3
 8019f82:	d119      	bne.n	8019fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8019f84:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8019f88:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8019f8c:	19d8      	adds	r0, r3, r7
 8019f8e:	b200      	sxth	r0, r0
 8019f90:	4288      	cmp	r0, r1
 8019f92:	d109      	bne.n	8019fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8019f94:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8019f98:	4413      	add	r3, r2
 8019f9a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8019f9e:	4629      	mov	r1, r5
 8019fa0:	9801      	ldr	r0, [sp, #4]
 8019fa2:	f7ff fd2b 	bl	80199fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019fa6:	e003      	b.n	8019fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019fa8:	4411      	add	r1, r2
 8019faa:	b209      	sxth	r1, r1
 8019fac:	42b9      	cmp	r1, r7
 8019fae:	d0f3      	beq.n	8019f98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8019fb0:	3d01      	subs	r5, #1
 8019fb2:	3c08      	subs	r4, #8
 8019fb4:	b2ad      	uxth	r5, r5
 8019fb6:	e7d3      	b.n	8019f60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8019fb8:	42b9      	cmp	r1, r7
 8019fba:	d1f9      	bne.n	8019fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019fbc:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8019fc0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8019fc4:	4299      	cmp	r1, r3
 8019fc6:	d1f3      	bne.n	8019fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019fc8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8019fcc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8019fd0:	181f      	adds	r7, r3, r0
 8019fd2:	b23f      	sxth	r7, r7
 8019fd4:	42ba      	cmp	r2, r7
 8019fd6:	d105      	bne.n	8019fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8019fd8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8019fdc:	440b      	add	r3, r1
 8019fde:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8019fe2:	e7dc      	b.n	8019f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8019fe4:	440a      	add	r2, r1
 8019fe6:	b212      	sxth	r2, r2
 8019fe8:	4290      	cmp	r0, r2
 8019fea:	d1e1      	bne.n	8019fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8019fec:	e7f6      	b.n	8019fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8019fee:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8019ff2:	2e07      	cmp	r6, #7
 8019ff4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8019ff8:	d812      	bhi.n	801a020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8019ffa:	1c75      	adds	r5, r6, #1
 8019ffc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801a000:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801a004:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801a008:	9d01      	ldr	r5, [sp, #4]
 801a00a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801a00e:	442c      	add	r4, r5
 801a010:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801a014:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a018:	8061      	strh	r1, [r4, #2]
 801a01a:	80a2      	strh	r2, [r4, #4]
 801a01c:	80e3      	strh	r3, [r4, #6]
 801a01e:	e581      	b.n	8019b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a020:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801a024:	3e01      	subs	r6, #1
 801a026:	445c      	add	r4, fp
 801a028:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801a02c:	f04f 37ff 	mov.w	r7, #4294967295
 801a030:	2500      	movs	r5, #0
 801a032:	9305      	str	r3, [sp, #20]
 801a034:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801a038:	1e72      	subs	r2, r6, #1
 801a03a:	9302      	str	r3, [sp, #8]
 801a03c:	4691      	mov	r9, r2
 801a03e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801a042:	9304      	str	r3, [sp, #16]
 801a044:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801a048:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a04c:	6818      	ldr	r0, [r3, #0]
 801a04e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a052:	9207      	str	r2, [sp, #28]
 801a054:	bf16      	itet	ne
 801a056:	9905      	ldrne	r1, [sp, #20]
 801a058:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a05c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a060:	9306      	str	r3, [sp, #24]
 801a062:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a066:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a06a:	fb18 f801 	smulbb	r8, r8, r1
 801a06e:	6859      	ldr	r1, [r3, #4]
 801a070:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a074:	4671      	mov	r1, lr
 801a076:	a80c      	add	r0, sp, #48	@ 0x30
 801a078:	f7f8 fa7c 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a07c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a080:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a084:	f04f 0c08 	mov.w	ip, #8
 801a088:	9b04      	ldr	r3, [sp, #16]
 801a08a:	9a02      	ldr	r2, [sp, #8]
 801a08c:	fb10 f001 	smulbb	r0, r0, r1
 801a090:	fb02 8803 	mla	r8, r2, r3, r8
 801a094:	eba0 0108 	sub.w	r1, r0, r8
 801a098:	fb90 f0fc 	sdiv	r0, r0, ip
 801a09c:	4288      	cmp	r0, r1
 801a09e:	dc20      	bgt.n	801a0e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801a0a0:	4551      	cmp	r1, sl
 801a0a2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a0a6:	da03      	bge.n	801a0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801a0a8:	b1d9      	cbz	r1, 801a0e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801a0aa:	468a      	mov	sl, r1
 801a0ac:	464f      	mov	r7, r9
 801a0ae:	4635      	mov	r5, r6
 801a0b0:	f109 39ff 	add.w	r9, r9, #4294967295
 801a0b4:	f119 0f02 	cmn.w	r9, #2
 801a0b8:	d1c6      	bne.n	801a048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801a0ba:	4616      	mov	r6, r2
 801a0bc:	3201      	adds	r2, #1
 801a0be:	f1a4 0408 	sub.w	r4, r4, #8
 801a0c2:	d1b7      	bne.n	801a034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801a0c4:	9b01      	ldr	r3, [sp, #4]
 801a0c6:	b2ac      	uxth	r4, r5
 801a0c8:	00ed      	lsls	r5, r5, #3
 801a0ca:	1958      	adds	r0, r3, r5
 801a0cc:	1c7b      	adds	r3, r7, #1
 801a0ce:	d10b      	bne.n	801a0e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801a0d0:	4601      	mov	r1, r0
 801a0d2:	9803      	ldr	r0, [sp, #12]
 801a0d4:	f7f8 fa4e 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a0d8:	4621      	mov	r1, r4
 801a0da:	9801      	ldr	r0, [sp, #4]
 801a0dc:	f7ff fc8e 	bl	80199fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a0e0:	e4b6      	b.n	8019a50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a0e2:	464f      	mov	r7, r9
 801a0e4:	4635      	mov	r5, r6
 801a0e6:	e7ed      	b.n	801a0c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801a0e8:	9b01      	ldr	r3, [sp, #4]
 801a0ea:	00ff      	lsls	r7, r7, #3
 801a0ec:	445d      	add	r5, fp
 801a0ee:	19d9      	adds	r1, r3, r7
 801a0f0:	445f      	add	r7, fp
 801a0f2:	f7f8 fa3f 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a0f6:	9b03      	ldr	r3, [sp, #12]
 801a0f8:	cb03      	ldmia	r3!, {r0, r1}
 801a0fa:	9b03      	ldr	r3, [sp, #12]
 801a0fc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801a100:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801a104:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801a108:	6869      	ldr	r1, [r5, #4]
 801a10a:	c303      	stmia	r3!, {r0, r1}
 801a10c:	e7e4      	b.n	801a0d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801a10e:	bf00      	nop

0801a110 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a114:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801a118:	b09b      	sub	sp, #108	@ 0x6c
 801a11a:	4604      	mov	r4, r0
 801a11c:	4630      	mov	r0, r6
 801a11e:	f7f7 feea 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a122:	4605      	mov	r5, r0
 801a124:	b948      	cbnz	r0, 801a13a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801a126:	6823      	ldr	r3, [r4, #0]
 801a128:	4620      	mov	r0, r4
 801a12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a12c:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a130:	4798      	blx	r3
 801a132:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801a136:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801a13a:	4bc5      	ldr	r3, [pc, #788]	@ (801a450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d03f      	beq.n	801a1c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a142:	4dc4      	ldr	r5, [pc, #784]	@ (801a454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801a144:	4628      	mov	r0, r5
 801a146:	f7f7 fed6 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a14a:	4606      	mov	r6, r0
 801a14c:	2800      	cmp	r0, #0
 801a14e:	d138      	bne.n	801a1c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801a150:	4628      	mov	r0, r5
 801a152:	f7ff f971 	bl	8019438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a156:	6823      	ldr	r3, [r4, #0]
 801a158:	6829      	ldr	r1, [r5, #0]
 801a15a:	4620      	mov	r0, r4
 801a15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a15e:	686a      	ldr	r2, [r5, #4]
 801a160:	4798      	blx	r3
 801a162:	802e      	strh	r6, [r5, #0]
 801a164:	806e      	strh	r6, [r5, #2]
 801a166:	80ae      	strh	r6, [r5, #4]
 801a168:	80ee      	strh	r6, [r5, #6]
 801a16a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801a16e:	4dba      	ldr	r5, [pc, #744]	@ (801a458 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801a170:	4640      	mov	r0, r8
 801a172:	f7ff fbe8 	bl	8019946 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a176:	882e      	ldrh	r6, [r5, #0]
 801a178:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801a17c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801a180:	4633      	mov	r3, r6
 801a182:	42bb      	cmp	r3, r7
 801a184:	d224      	bcs.n	801a1d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a186:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801a18a:	2907      	cmp	r1, #7
 801a18c:	d816      	bhi.n	801a1bc <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801a18e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a192:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801a196:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801a19a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801a19e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801a1a2:	1c4a      	adds	r2, r1, #1
 801a1a4:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801a1a8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801a1ac:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801a1b0:	f8a2 a002 	strh.w	sl, [r2, #2]
 801a1b4:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a1b8:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a1bc:	3301      	adds	r3, #1
 801a1be:	b29b      	uxth	r3, r3
 801a1c0:	e7df      	b.n	801a182 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801a1c2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d1cf      	bne.n	801a16a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801a1ca:	b01b      	add	sp, #108	@ 0x6c
 801a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1d0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801a1d4:	42b3      	cmp	r3, r6
 801a1d6:	d90c      	bls.n	801a1f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801a1d8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a1dc:	6822      	ldr	r2, [r4, #0]
 801a1de:	3601      	adds	r6, #1
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801a1e4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801a1e8:	b2b6      	uxth	r6, r6
 801a1ea:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801a1ee:	47b8      	blx	r7
 801a1f0:	e7ee      	b.n	801a1d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801a1f2:	4a9a      	ldr	r2, [pc, #616]	@ (801a45c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a1f4:	6813      	ldr	r3, [r2, #0]
 801a1f6:	4691      	mov	r9, r2
 801a1f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801a1fc:	2b01      	cmp	r3, #1
 801a1fe:	f040 80e0 	bne.w	801a3c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801a202:	8829      	ldrh	r1, [r5, #0]
 801a204:	2600      	movs	r6, #0
 801a206:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801a20a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801a20e:	33ae      	adds	r3, #174	@ 0xae
 801a210:	428f      	cmp	r7, r1
 801a212:	f103 0308 	add.w	r3, r3, #8
 801a216:	dd0a      	ble.n	801a22e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801a218:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801a21c:	3101      	adds	r1, #1
 801a21e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801a222:	4402      	add	r2, r0
 801a224:	b212      	sxth	r2, r2
 801a226:	4296      	cmp	r6, r2
 801a228:	bfb8      	it	lt
 801a22a:	4616      	movlt	r6, r2
 801a22c:	e7f0      	b.n	801a210 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801a22e:	4b8c      	ldr	r3, [pc, #560]	@ (801a460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a230:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801a45c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801a234:	881b      	ldrh	r3, [r3, #0]
 801a236:	2b0f      	cmp	r3, #15
 801a238:	bf8c      	ite	hi
 801a23a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801a23e:	f04f 0b01 	movls.w	fp, #1
 801a242:	2300      	movs	r3, #0
 801a244:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a248:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801a24c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801a250:	4b82      	ldr	r3, [pc, #520]	@ (801a45c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a252:	4438      	add	r0, r7
 801a254:	b207      	sxth	r7, r0
 801a256:	6818      	ldr	r0, [r3, #0]
 801a258:	42b7      	cmp	r7, r6
 801a25a:	6803      	ldr	r3, [r0, #0]
 801a25c:	f280 8083 	bge.w	801a366 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801a260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801a264:	4798      	blx	r3
 801a266:	eb07 030b 	add.w	r3, r7, fp
 801a26a:	4298      	cmp	r0, r3
 801a26c:	da07      	bge.n	801a27e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801a26e:	42b0      	cmp	r0, r6
 801a270:	da05      	bge.n	801a27e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801a272:	4287      	cmp	r7, r0
 801a274:	dd6c      	ble.n	801a350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a276:	2f00      	cmp	r7, #0
 801a278:	dd6a      	ble.n	801a350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a27a:	4630      	mov	r0, r6
 801a27c:	e004      	b.n	801a288 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801a27e:	4287      	cmp	r7, r0
 801a280:	dcfb      	bgt.n	801a27a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801a282:	42b0      	cmp	r0, r6
 801a284:	bfa8      	it	ge
 801a286:	4630      	movge	r0, r6
 801a288:	4b76      	ldr	r3, [pc, #472]	@ (801a464 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801a28a:	1bc0      	subs	r0, r0, r7
 801a28c:	2200      	movs	r2, #0
 801a28e:	f8ad 7016 	strh.w	r7, [sp, #22]
 801a292:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a296:	882f      	ldrh	r7, [r5, #0]
 801a298:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a29c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a2a0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a2a4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a2a8:	42bb      	cmp	r3, r7
 801a2aa:	d9cd      	bls.n	801a248 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801a2ac:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801a2b0:	ab07      	add	r3, sp, #28
 801a2b2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a2b6:	6851      	ldr	r1, [r2, #4]
 801a2b8:	c303      	stmia	r3!, {r0, r1}
 801a2ba:	a905      	add	r1, sp, #20
 801a2bc:	a807      	add	r0, sp, #28
 801a2be:	f7ff f9aa 	bl	8019616 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a2c2:	2800      	cmp	r0, #0
 801a2c4:	d04c      	beq.n	801a360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801a2c6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a2ca:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801a2ce:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801a2d2:	4686      	mov	lr, r0
 801a2d4:	4290      	cmp	r0, r2
 801a2d6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a2da:	4450      	add	r0, sl
 801a2dc:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801a2e0:	bfb8      	it	lt
 801a2e2:	4696      	movlt	lr, r2
 801a2e4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a2e8:	4452      	add	r2, sl
 801a2ea:	b280      	uxth	r0, r0
 801a2ec:	4299      	cmp	r1, r3
 801a2ee:	468c      	mov	ip, r1
 801a2f0:	b292      	uxth	r2, r2
 801a2f2:	9302      	str	r3, [sp, #8]
 801a2f4:	bfb8      	it	lt
 801a2f6:	469c      	movlt	ip, r3
 801a2f8:	b203      	sxth	r3, r0
 801a2fa:	fa0f fa82 	sxth.w	sl, r2
 801a2fe:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a302:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a306:	4553      	cmp	r3, sl
 801a308:	bfb8      	it	lt
 801a30a:	4602      	movlt	r2, r0
 801a30c:	9b02      	ldr	r3, [sp, #8]
 801a30e:	eba2 020e 	sub.w	r2, r2, lr
 801a312:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a316:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801a31a:	4411      	add	r1, r2
 801a31c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a320:	4413      	add	r3, r2
 801a322:	b289      	uxth	r1, r1
 801a324:	b29b      	uxth	r3, r3
 801a326:	b208      	sxth	r0, r1
 801a328:	b21a      	sxth	r2, r3
 801a32a:	4290      	cmp	r0, r2
 801a32c:	bfb8      	it	lt
 801a32e:	460b      	movlt	r3, r1
 801a330:	eba3 030c 	sub.w	r3, r3, ip
 801a334:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a338:	a807      	add	r0, sp, #28
 801a33a:	f7f7 fddc 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a33e:	b920      	cbnz	r0, 801a34a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801a340:	6823      	ldr	r3, [r4, #0]
 801a342:	a907      	add	r1, sp, #28
 801a344:	4620      	mov	r0, r4
 801a346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a348:	4798      	blx	r3
 801a34a:	3701      	adds	r7, #1
 801a34c:	b2bf      	uxth	r7, r7
 801a34e:	e7a9      	b.n	801a2a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801a350:	f8d9 0000 	ldr.w	r0, [r9]
 801a354:	2101      	movs	r1, #1
 801a356:	6803      	ldr	r3, [r0, #0]
 801a358:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801a35c:	4798      	blx	r3
 801a35e:	e773      	b.n	801a248 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801a360:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801a364:	e7e8      	b.n	801a338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801a366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a368:	4798      	blx	r3
 801a36a:	4b3f      	ldr	r3, [pc, #252]	@ (801a468 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	f43f af2b 	beq.w	801a1ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801a374:	2300      	movs	r3, #0
 801a376:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801a37a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801a37e:	882b      	ldrh	r3, [r5, #0]
 801a380:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801a384:	42ab      	cmp	r3, r5
 801a386:	f4bf af20 	bcs.w	801a1ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801a38a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801a38e:	2907      	cmp	r1, #7
 801a390:	d814      	bhi.n	801a3bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801a392:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801a396:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801a39a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801a39e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801a3a2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801a3a6:	1c4a      	adds	r2, r1, #1
 801a3a8:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801a3ac:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801a3b0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801a3b4:	f8a2 c002 	strh.w	ip, [r2, #2]
 801a3b8:	8097      	strh	r7, [r2, #4]
 801a3ba:	80d6      	strh	r6, [r2, #6]
 801a3bc:	3301      	adds	r3, #1
 801a3be:	b29b      	uxth	r3, r3
 801a3c0:	e7e0      	b.n	801a384 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801a3c2:	2b02      	cmp	r3, #2
 801a3c4:	f040 8133 	bne.w	801a62e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801a3c8:	4b28      	ldr	r3, [pc, #160]	@ (801a46c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801a3ca:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801a3ce:	781b      	ldrb	r3, [r3, #0]
 801a3d0:	2b01      	cmp	r3, #1
 801a3d2:	f000 8098 	beq.w	801a506 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a3d6:	882a      	ldrh	r2, [r5, #0]
 801a3d8:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801a3dc:	3201      	adds	r2, #1
 801a3de:	b292      	uxth	r2, r2
 801a3e0:	2900      	cmp	r1, #0
 801a3e2:	d0c2      	beq.n	801a36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a3e4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801a3e8:	4694      	mov	ip, r2
 801a3ea:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801a3ee:	f04f 0900 	mov.w	r9, #0
 801a3f2:	441e      	add	r6, r3
 801a3f4:	b236      	sxth	r6, r6
 801a3f6:	fa1f f38c 	uxth.w	r3, ip
 801a3fa:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801a3fe:	4299      	cmp	r1, r3
 801a400:	f240 80be 	bls.w	801a580 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801a404:	4427      	add	r7, r4
 801a406:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801a40a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801a40e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801a412:	4283      	cmp	r3, r0
 801a414:	f340 80a0 	ble.w	801a558 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801a418:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801a41c:	46e1      	mov	r9, ip
 801a41e:	4406      	add	r6, r0
 801a420:	b236      	sxth	r6, r6
 801a422:	429e      	cmp	r6, r3
 801a424:	bfa8      	it	ge
 801a426:	461e      	movge	r6, r3
 801a428:	f10c 0c01 	add.w	ip, ip, #1
 801a42c:	e7e3      	b.n	801a3f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801a42e:	d10a      	bne.n	801a446 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801a430:	4562      	cmp	r2, ip
 801a432:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801a436:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801a43a:	bfb8      	it	lt
 801a43c:	4662      	movlt	r2, ip
 801a43e:	4288      	cmp	r0, r1
 801a440:	bfb8      	it	lt
 801a442:	461f      	movlt	r7, r3
 801a444:	e086      	b.n	801a554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801a446:	428a      	cmp	r2, r1
 801a448:	bfb8      	it	lt
 801a44a:	460a      	movlt	r2, r1
 801a44c:	e082      	b.n	801a554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801a44e:	bf00      	nop
 801a450:	24028528 	.word	0x24028528
 801a454:	24028534 	.word	0x24028534
 801a458:	2400007c 	.word	0x2400007c
 801a45c:	240284e8 	.word	0x240284e8
 801a460:	240284de 	.word	0x240284de
 801a464:	240284dc 	.word	0x240284dc
 801a468:	240284e6 	.word	0x240284e6
 801a46c:	240284e0 	.word	0x240284e0
 801a470:	19a1      	adds	r1, r4, r6
 801a472:	ab07      	add	r3, sp, #28
 801a474:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801a478:	6849      	ldr	r1, [r1, #4]
 801a47a:	c303      	stmia	r3!, {r0, r1}
 801a47c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a480:	a807      	add	r0, sp, #28
 801a482:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a486:	2b13      	cmp	r3, #19
 801a488:	440b      	add	r3, r1
 801a48a:	bfd8      	it	le
 801a48c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801a490:	1a9b      	subs	r3, r3, r2
 801a492:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a496:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a49a:	f7fe ffe7 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a49e:	a807      	add	r0, sp, #28
 801a4a0:	f7f7 fd29 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a4a4:	bb78      	cbnz	r0, 801a506 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a4a6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801a4aa:	4426      	add	r6, r4
 801a4ac:	f8d9 0000 	ldr.w	r0, [r9]
 801a4b0:	f1bc 0f14 	cmp.w	ip, #20
 801a4b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a4b8:	f8d0 e000 	ldr.w	lr, [r0]
 801a4bc:	bfa8      	it	ge
 801a4be:	f04f 0c14 	movge.w	ip, #20
 801a4c2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801a4c6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a4ca:	fa1f fc8c 	uxth.w	ip, ip
 801a4ce:	f8cd c000 	str.w	ip, [sp]
 801a4d2:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801a4d6:	47d8      	blx	fp
 801a4d8:	4683      	mov	fp, r0
 801a4da:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801a4de:	a807      	add	r0, sp, #28
 801a4e0:	f7fe ffaa 	bl	8019438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a4e4:	6823      	ldr	r3, [r4, #0]
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	a907      	add	r1, sp, #28
 801a4ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a4ec:	4798      	blx	r3
 801a4ee:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801a4f2:	eba0 000b 	sub.w	r0, r0, fp
 801a4f6:	b200      	sxth	r0, r0
 801a4f8:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801a4fc:	b918      	cbnz	r0, 801a506 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801a4fe:	b2b9      	uxth	r1, r7
 801a500:	4650      	mov	r0, sl
 801a502:	f7ff fa7b 	bl	80199fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a506:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801a50a:	f1bb 0f00 	cmp.w	fp, #0
 801a50e:	f43f af2c 	beq.w	801a36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a512:	882b      	ldrh	r3, [r5, #0]
 801a514:	2700      	movs	r7, #0
 801a516:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801a51a:	3301      	adds	r3, #1
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	b299      	uxth	r1, r3
 801a520:	00fe      	lsls	r6, r7, #3
 801a522:	458b      	cmp	fp, r1
 801a524:	d9a4      	bls.n	801a470 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801a526:	4426      	add	r6, r4
 801a528:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801a52c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801a530:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801a534:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801a538:	4408      	add	r0, r1
 801a53a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801a53e:	4461      	add	r1, ip
 801a540:	b200      	sxth	r0, r0
 801a542:	b209      	sxth	r1, r1
 801a544:	4288      	cmp	r0, r1
 801a546:	f6bf af72 	bge.w	801a42e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801a54a:	4584      	cmp	ip, r0
 801a54c:	4662      	mov	r2, ip
 801a54e:	461f      	mov	r7, r3
 801a550:	bfb8      	it	lt
 801a552:	4602      	movlt	r2, r0
 801a554:	3301      	adds	r3, #1
 801a556:	e7e2      	b.n	801a51e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801a558:	d10e      	bne.n	801a578 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801a55a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801a55e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801a562:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801a566:	4473      	add	r3, lr
 801a568:	b21b      	sxth	r3, r3
 801a56a:	429e      	cmp	r6, r3
 801a56c:	bfa8      	it	ge
 801a56e:	461e      	movge	r6, r3
 801a570:	4287      	cmp	r7, r0
 801a572:	bfb8      	it	lt
 801a574:	46e1      	movlt	r9, ip
 801a576:	e757      	b.n	801a428 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a578:	4286      	cmp	r6, r0
 801a57a:	bfa8      	it	ge
 801a57c:	4606      	movge	r6, r0
 801a57e:	e753      	b.n	801a428 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801a580:	eb0a 0007 	add.w	r0, sl, r7
 801a584:	4427      	add	r7, r4
 801a586:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801a58a:	f1bb 0f13 	cmp.w	fp, #19
 801a58e:	bfdc      	itt	le
 801a590:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801a594:	445e      	addle	r6, fp
 801a596:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a59a:	bfd8      	it	le
 801a59c:	b236      	sxthle	r6, r6
 801a59e:	f7f7 fcaa 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a5a2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a5a6:	2800      	cmp	r0, #0
 801a5a8:	f47f af1a 	bne.w	801a3e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801a5ac:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801a5b0:	fa1f fb8b 	uxth.w	fp, fp
 801a5b4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801a5b8:	1ab6      	subs	r6, r6, r2
 801a5ba:	4829      	ldr	r0, [pc, #164]	@ (801a660 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801a5bc:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801a5c0:	2e14      	cmp	r6, #20
 801a5c2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801a5c6:	6800      	ldr	r0, [r0, #0]
 801a5c8:	bfa8      	it	ge
 801a5ca:	2614      	movge	r6, #20
 801a5cc:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a5d0:	f8ad 201e 	strh.w	r2, [sp, #30]
 801a5d4:	b289      	uxth	r1, r1
 801a5d6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a5da:	b2b6      	uxth	r6, r6
 801a5dc:	f8d0 c000 	ldr.w	ip, [r0]
 801a5e0:	b292      	uxth	r2, r2
 801a5e2:	455e      	cmp	r6, fp
 801a5e4:	bf94      	ite	ls
 801a5e6:	9600      	strls	r6, [sp, #0]
 801a5e8:	f8cd b000 	strhi.w	fp, [sp]
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801a5f2:	47b0      	blx	r6
 801a5f4:	6823      	ldr	r3, [r4, #0]
 801a5f6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801a5fa:	a907      	add	r1, sp, #28
 801a5fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a5fe:	4620      	mov	r0, r4
 801a600:	4798      	blx	r3
 801a602:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801a606:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a60a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801a60e:	1a5b      	subs	r3, r3, r1
 801a610:	440a      	add	r2, r1
 801a612:	b21b      	sxth	r3, r3
 801a614:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801a618:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	f47f aeda 	bne.w	801a3d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a622:	fa1f f189 	uxth.w	r1, r9
 801a626:	4650      	mov	r0, sl
 801a628:	f7ff f9e8 	bl	80199fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a62c:	e6d3      	b.n	801a3d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801a62e:	882e      	ldrh	r6, [r5, #0]
 801a630:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801a634:	42b3      	cmp	r3, r6
 801a636:	f67f ae98 	bls.w	801a36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801a63a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801a63e:	ab07      	add	r3, sp, #28
 801a640:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801a644:	6851      	ldr	r1, [r2, #4]
 801a646:	c303      	stmia	r3!, {r0, r1}
 801a648:	a807      	add	r0, sp, #28
 801a64a:	f7f7 fc54 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a64e:	b920      	cbnz	r0, 801a65a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801a650:	6823      	ldr	r3, [r4, #0]
 801a652:	a907      	add	r1, sp, #28
 801a654:	4620      	mov	r0, r4
 801a656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a658:	4798      	blx	r3
 801a65a:	3601      	adds	r6, #1
 801a65c:	b2b6      	uxth	r6, r6
 801a65e:	e7e7      	b.n	801a630 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801a660:	240284e8 	.word	0x240284e8

0801a664 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801a664:	4b03      	ldr	r3, [pc, #12]	@ (801a674 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801a666:	2200      	movs	r2, #0
 801a668:	801a      	strh	r2, [r3, #0]
 801a66a:	805a      	strh	r2, [r3, #2]
 801a66c:	809a      	strh	r2, [r3, #4]
 801a66e:	80da      	strh	r2, [r3, #6]
 801a670:	4770      	bx	lr
 801a672:	bf00      	nop
 801a674:	24028534 	.word	0x24028534

0801a678 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a67c:	b09d      	sub	sp, #116	@ 0x74
 801a67e:	4606      	mov	r6, r0
 801a680:	4614      	mov	r4, r2
 801a682:	468a      	mov	sl, r1
 801a684:	a803      	add	r0, sp, #12
 801a686:	461d      	mov	r5, r3
 801a688:	f001 f9ad 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 801a68c:	6833      	ldr	r3, [r6, #0]
 801a68e:	4630      	mov	r0, r6
 801a690:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801a694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a696:	4798      	blx	r3
 801a698:	6833      	ldr	r3, [r6, #0]
 801a69a:	4607      	mov	r7, r0
 801a69c:	4630      	mov	r0, r6
 801a69e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a6a0:	4798      	blx	r3
 801a6a2:	462a      	mov	r2, r5
 801a6a4:	2500      	movs	r5, #0
 801a6a6:	4621      	mov	r1, r4
 801a6a8:	9000      	str	r0, [sp, #0]
 801a6aa:	463b      	mov	r3, r7
 801a6ac:	462c      	mov	r4, r5
 801a6ae:	46a9      	mov	r9, r5
 801a6b0:	46a8      	mov	r8, r5
 801a6b2:	a803      	add	r0, sp, #12
 801a6b4:	f001 f9f2 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	9302      	str	r3, [sp, #8]
 801a6bc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801a6c0:	429c      	cmp	r4, r3
 801a6c2:	d002      	beq.n	801a6ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801a6c4:	455c      	cmp	r4, fp
 801a6c6:	bf18      	it	ne
 801a6c8:	4625      	movne	r5, r4
 801a6ca:	ab02      	add	r3, sp, #8
 801a6cc:	4632      	mov	r2, r6
 801a6ce:	4651      	mov	r1, sl
 801a6d0:	a803      	add	r0, sp, #12
 801a6d2:	f001 fce9 	bl	801c0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	b108      	cbz	r0, 801a6de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801a6da:	280a      	cmp	r0, #10
 801a6dc:	d10a      	bne.n	801a6f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801a6de:	45c1      	cmp	r9, r8
 801a6e0:	bf38      	it	cc
 801a6e2:	46c1      	movcc	r9, r8
 801a6e4:	f04f 0800 	mov.w	r8, #0
 801a6e8:	2c00      	cmp	r4, #0
 801a6ea:	d1e5      	bne.n	801a6b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a6ec:	4648      	mov	r0, r9
 801a6ee:	b01d      	add	sp, #116	@ 0x74
 801a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6f4:	9a02      	ldr	r2, [sp, #8]
 801a6f6:	2a00      	cmp	r2, #0
 801a6f8:	d0de      	beq.n	801a6b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801a6fa:	7b57      	ldrb	r7, [r2, #13]
 801a6fc:	4629      	mov	r1, r5
 801a6fe:	6833      	ldr	r3, [r6, #0]
 801a700:	007f      	lsls	r7, r7, #1
 801a702:	8894      	ldrh	r4, [r2, #4]
 801a704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a706:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801a70a:	7a97      	ldrb	r7, [r2, #10]
 801a70c:	4307      	orrs	r7, r0
 801a70e:	4630      	mov	r0, r6
 801a710:	4798      	blx	r3
 801a712:	4438      	add	r0, r7
 801a714:	4480      	add	r8, r0
 801a716:	fa1f f888 	uxth.w	r8, r8
 801a71a:	e7e5      	b.n	801a6e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801a71c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801a71c:	b508      	push	{r3, lr}
 801a71e:	6803      	ldr	r3, [r0, #0]
 801a720:	68db      	ldr	r3, [r3, #12]
 801a722:	4798      	blx	r3
 801a724:	b128      	cbz	r0, 801a732 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801a726:	7b43      	ldrb	r3, [r0, #13]
 801a728:	7a80      	ldrb	r0, [r0, #10]
 801a72a:	005b      	lsls	r3, r3, #1
 801a72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a730:	4318      	orrs	r0, r3
 801a732:	bd08      	pop	{r3, pc}

0801a734 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801a734:	b40e      	push	{r1, r2, r3}
 801a736:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a738:	b09e      	sub	sp, #120	@ 0x78
 801a73a:	4605      	mov	r5, r0
 801a73c:	ab23      	add	r3, sp, #140	@ 0x8c
 801a73e:	a805      	add	r0, sp, #20
 801a740:	f853 4b04 	ldr.w	r4, [r3], #4
 801a744:	9303      	str	r3, [sp, #12]
 801a746:	f001 f94e 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 801a74a:	682b      	ldr	r3, [r5, #0]
 801a74c:	4628      	mov	r0, r5
 801a74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a750:	4798      	blx	r3
 801a752:	682b      	ldr	r3, [r5, #0]
 801a754:	4606      	mov	r6, r0
 801a756:	4628      	mov	r0, r5
 801a758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a75a:	4798      	blx	r3
 801a75c:	4633      	mov	r3, r6
 801a75e:	4621      	mov	r1, r4
 801a760:	ae1e      	add	r6, sp, #120	@ 0x78
 801a762:	2400      	movs	r4, #0
 801a764:	9000      	str	r0, [sp, #0]
 801a766:	9a03      	ldr	r2, [sp, #12]
 801a768:	a805      	add	r0, sp, #20
 801a76a:	f001 f997 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a76e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801a772:	462a      	mov	r2, r5
 801a774:	4633      	mov	r3, r6
 801a776:	4621      	mov	r1, r4
 801a778:	a805      	add	r0, sp, #20
 801a77a:	f001 fc95 	bl	801c0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a77e:	b300      	cbz	r0, 801a7c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801a780:	280a      	cmp	r0, #10
 801a782:	d01a      	beq.n	801a7ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a784:	9f04      	ldr	r7, [sp, #16]
 801a786:	b1c7      	cbz	r7, 801a7ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801a788:	7b78      	ldrb	r0, [r7, #13]
 801a78a:	7a3b      	ldrb	r3, [r7, #8]
 801a78c:	00c1      	lsls	r1, r0, #3
 801a78e:	88ea      	ldrh	r2, [r5, #6]
 801a790:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a794:	4319      	orrs	r1, r3
 801a796:	0643      	lsls	r3, r0, #25
 801a798:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801a79c:	bf48      	it	mi
 801a79e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801a7a2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801a7a6:	bf48      	it	mi
 801a7a8:	b219      	sxthmi	r1, r3
 801a7aa:	79fb      	ldrb	r3, [r7, #7]
 801a7ac:	4303      	orrs	r3, r0
 801a7ae:	4413      	add	r3, r2
 801a7b0:	1a5b      	subs	r3, r3, r1
 801a7b2:	b21b      	sxth	r3, r3
 801a7b4:	429c      	cmp	r4, r3
 801a7b6:	bfb8      	it	lt
 801a7b8:	461c      	movlt	r4, r3
 801a7ba:	4633      	mov	r3, r6
 801a7bc:	462a      	mov	r2, r5
 801a7be:	2100      	movs	r1, #0
 801a7c0:	e7da      	b.n	801a778 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801a7c2:	b2a0      	uxth	r0, r4
 801a7c4:	b01e      	add	sp, #120	@ 0x78
 801a7c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a7ca:	b003      	add	sp, #12
 801a7cc:	4770      	bx	lr

0801a7ce <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801a7ce:	7a43      	ldrb	r3, [r0, #9]
 801a7d0:	8880      	ldrh	r0, [r0, #4]
 801a7d2:	4418      	add	r0, r3
 801a7d4:	b280      	uxth	r0, r0
 801a7d6:	4770      	bx	lr

0801a7d8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801a7d8:	6803      	ldr	r3, [r0, #0]
 801a7da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a7dc:	4718      	bx	r3

0801a7de <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801a7de:	b40e      	push	{r1, r2, r3}
 801a7e0:	b570      	push	{r4, r5, r6, lr}
 801a7e2:	b09d      	sub	sp, #116	@ 0x74
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	ab21      	add	r3, sp, #132	@ 0x84
 801a7e8:	a803      	add	r0, sp, #12
 801a7ea:	f853 5b04 	ldr.w	r5, [r3], #4
 801a7ee:	9302      	str	r3, [sp, #8]
 801a7f0:	f001 f8f9 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 801a7f4:	6823      	ldr	r3, [r4, #0]
 801a7f6:	4620      	mov	r0, r4
 801a7f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a7fa:	4798      	blx	r3
 801a7fc:	6823      	ldr	r3, [r4, #0]
 801a7fe:	4606      	mov	r6, r0
 801a800:	4620      	mov	r0, r4
 801a802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a804:	2401      	movs	r4, #1
 801a806:	4798      	blx	r3
 801a808:	4633      	mov	r3, r6
 801a80a:	9000      	str	r0, [sp, #0]
 801a80c:	4629      	mov	r1, r5
 801a80e:	9a02      	ldr	r2, [sp, #8]
 801a810:	a803      	add	r0, sp, #12
 801a812:	f001 f943 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a816:	a803      	add	r0, sp, #12
 801a818:	f001 fd12 	bl	801c240 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a81c:	b2a3      	uxth	r3, r4
 801a81e:	b138      	cbz	r0, 801a830 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801a820:	280a      	cmp	r0, #10
 801a822:	a803      	add	r0, sp, #12
 801a824:	bf04      	itt	eq
 801a826:	3301      	addeq	r3, #1
 801a828:	b21c      	sxtheq	r4, r3
 801a82a:	f001 fd09 	bl	801c240 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a82e:	e7f5      	b.n	801a81c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801a830:	4618      	mov	r0, r3
 801a832:	b01d      	add	sp, #116	@ 0x74
 801a834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a838:	b003      	add	sp, #12
 801a83a:	4770      	bx	lr

0801a83c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801a83c:	b40e      	push	{r1, r2, r3}
 801a83e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a840:	b09e      	sub	sp, #120	@ 0x78
 801a842:	4604      	mov	r4, r0
 801a844:	ab23      	add	r3, sp, #140	@ 0x8c
 801a846:	a805      	add	r0, sp, #20
 801a848:	f853 5b04 	ldr.w	r5, [r3], #4
 801a84c:	9303      	str	r3, [sp, #12]
 801a84e:	f001 f8ca 	bl	801b9e6 <_ZN8touchgfx12TextProviderC1Ev>
 801a852:	6823      	ldr	r3, [r4, #0]
 801a854:	4620      	mov	r0, r4
 801a856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a858:	4798      	blx	r3
 801a85a:	6823      	ldr	r3, [r4, #0]
 801a85c:	4606      	mov	r6, r0
 801a85e:	4620      	mov	r0, r4
 801a860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a862:	4798      	blx	r3
 801a864:	4633      	mov	r3, r6
 801a866:	4629      	mov	r1, r5
 801a868:	9000      	str	r0, [sp, #0]
 801a86a:	9a03      	ldr	r2, [sp, #12]
 801a86c:	a805      	add	r0, sp, #20
 801a86e:	f001 f915 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a872:	ad1e      	add	r5, sp, #120	@ 0x78
 801a874:	2100      	movs	r1, #0
 801a876:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801a87a:	4622      	mov	r2, r4
 801a87c:	a805      	add	r0, sp, #20
 801a87e:	f845 1d68 	str.w	r1, [r5, #-104]!
 801a882:	462b      	mov	r3, r5
 801a884:	f001 fc10 	bl	801c0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a888:	b1d8      	cbz	r0, 801a8c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801a88a:	280a      	cmp	r0, #10
 801a88c:	d012      	beq.n	801a8b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801a88e:	9804      	ldr	r0, [sp, #16]
 801a890:	b180      	cbz	r0, 801a8b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801a892:	7b47      	ldrb	r7, [r0, #13]
 801a894:	88e2      	ldrh	r2, [r4, #6]
 801a896:	00fb      	lsls	r3, r7, #3
 801a898:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801a89c:	7a03      	ldrb	r3, [r0, #8]
 801a89e:	430b      	orrs	r3, r1
 801a8a0:	0679      	lsls	r1, r7, #25
 801a8a2:	bf44      	itt	mi
 801a8a4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a8a8:	b21b      	sxthmi	r3, r3
 801a8aa:	1ad3      	subs	r3, r2, r3
 801a8ac:	b21b      	sxth	r3, r3
 801a8ae:	429e      	cmp	r6, r3
 801a8b0:	bfa8      	it	ge
 801a8b2:	461e      	movge	r6, r3
 801a8b4:	462b      	mov	r3, r5
 801a8b6:	4622      	mov	r2, r4
 801a8b8:	2100      	movs	r1, #0
 801a8ba:	a805      	add	r0, sp, #20
 801a8bc:	f001 fbf4 	bl	801c0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a8c0:	e7e2      	b.n	801a888 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801a8c2:	4630      	mov	r0, r6
 801a8c4:	b01e      	add	sp, #120	@ 0x78
 801a8c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a8ca:	b003      	add	sp, #12
 801a8cc:	4770      	bx	lr

0801a8ce <_ZNK8touchgfx8Drawable10invalidateEv>:
 801a8ce:	b513      	push	{r0, r1, r4, lr}
 801a8d0:	6803      	ldr	r3, [r0, #0]
 801a8d2:	2400      	movs	r4, #0
 801a8d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a8d8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a8dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a8e0:	4669      	mov	r1, sp
 801a8e2:	691b      	ldr	r3, [r3, #16]
 801a8e4:	9400      	str	r4, [sp, #0]
 801a8e6:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a8ea:	4798      	blx	r3
 801a8ec:	b002      	add	sp, #8
 801a8ee:	bd10      	pop	{r4, pc}

0801a8f0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a8f0:	b538      	push	{r3, r4, r5, lr}
 801a8f2:	680b      	ldr	r3, [r1, #0]
 801a8f4:	460c      	mov	r4, r1
 801a8f6:	4605      	mov	r5, r0
 801a8f8:	68db      	ldr	r3, [r3, #12]
 801a8fa:	4798      	blx	r3
 801a8fc:	6823      	ldr	r3, [r4, #0]
 801a8fe:	4620      	mov	r0, r4
 801a900:	4629      	mov	r1, r5
 801a902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a904:	4798      	blx	r3
 801a906:	4628      	mov	r0, r5
 801a908:	bd38      	pop	{r3, r4, r5, pc}

0801a90a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a90a:	b410      	push	{r4}
 801a90c:	880a      	ldrh	r2, [r1, #0]
 801a90e:	8884      	ldrh	r4, [r0, #4]
 801a910:	4422      	add	r2, r4
 801a912:	800a      	strh	r2, [r1, #0]
 801a914:	884a      	ldrh	r2, [r1, #2]
 801a916:	88c4      	ldrh	r4, [r0, #6]
 801a918:	4422      	add	r2, r4
 801a91a:	804a      	strh	r2, [r1, #2]
 801a91c:	6940      	ldr	r0, [r0, #20]
 801a91e:	b120      	cbz	r0, 801a92a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a920:	6803      	ldr	r3, [r0, #0]
 801a922:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a928:	4718      	bx	r3
 801a92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a92e:	4770      	bx	lr

0801a930 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a930:	b570      	push	{r4, r5, r6, lr}
 801a932:	8882      	ldrh	r2, [r0, #4]
 801a934:	460c      	mov	r4, r1
 801a936:	880b      	ldrh	r3, [r1, #0]
 801a938:	4605      	mov	r5, r0
 801a93a:	4413      	add	r3, r2
 801a93c:	800b      	strh	r3, [r1, #0]
 801a93e:	884b      	ldrh	r3, [r1, #2]
 801a940:	88c2      	ldrh	r2, [r0, #6]
 801a942:	4413      	add	r3, r2
 801a944:	804b      	strh	r3, [r1, #2]
 801a946:	1d01      	adds	r1, r0, #4
 801a948:	4620      	mov	r0, r4
 801a94a:	f7f7 fa91 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801a94e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a952:	2b00      	cmp	r3, #0
 801a954:	dd0b      	ble.n	801a96e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a956:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	dd07      	ble.n	801a96e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a95e:	6968      	ldr	r0, [r5, #20]
 801a960:	b128      	cbz	r0, 801a96e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a962:	6803      	ldr	r3, [r0, #0]
 801a964:	4621      	mov	r1, r4
 801a966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a96c:	4718      	bx	r3
 801a96e:	bd70      	pop	{r4, r5, r6, pc}

0801a970 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a970:	b570      	push	{r4, r5, r6, lr}
 801a972:	8882      	ldrh	r2, [r0, #4]
 801a974:	460c      	mov	r4, r1
 801a976:	880b      	ldrh	r3, [r1, #0]
 801a978:	4605      	mov	r5, r0
 801a97a:	4413      	add	r3, r2
 801a97c:	800b      	strh	r3, [r1, #0]
 801a97e:	884b      	ldrh	r3, [r1, #2]
 801a980:	88c2      	ldrh	r2, [r0, #6]
 801a982:	4413      	add	r3, r2
 801a984:	804b      	strh	r3, [r1, #2]
 801a986:	1d01      	adds	r1, r0, #4
 801a988:	4620      	mov	r0, r4
 801a98a:	f7f7 fa71 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801a98e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a992:	2b00      	cmp	r3, #0
 801a994:	dd19      	ble.n	801a9ca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a996:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	dd15      	ble.n	801a9ca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a99e:	6968      	ldr	r0, [r5, #20]
 801a9a0:	b128      	cbz	r0, 801a9ae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801a9a2:	6803      	ldr	r3, [r0, #0]
 801a9a4:	4621      	mov	r1, r4
 801a9a6:	691b      	ldr	r3, [r3, #16]
 801a9a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9ac:	4718      	bx	r3
 801a9ae:	4b07      	ldr	r3, [pc, #28]	@ (801a9cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	3304      	adds	r3, #4
 801a9b4:	429d      	cmp	r5, r3
 801a9b6:	d108      	bne.n	801a9ca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801a9b8:	f7fe fec6 	bl	8019748 <_ZN8touchgfx11Application11getInstanceEv>
 801a9bc:	6803      	ldr	r3, [r0, #0]
 801a9be:	6821      	ldr	r1, [r4, #0]
 801a9c0:	6862      	ldr	r2, [r4, #4]
 801a9c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a9c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9c8:	4718      	bx	r3
 801a9ca:	bd70      	pop	{r4, r5, r6, pc}
 801a9cc:	2402852c 	.word	0x2402852c

0801a9d0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a9d0:	b570      	push	{r4, r5, r6, lr}
 801a9d2:	4604      	mov	r4, r0
 801a9d4:	4616      	mov	r6, r2
 801a9d6:	460d      	mov	r5, r1
 801a9d8:	b901      	cbnz	r1, 801a9dc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a9da:	b192      	cbz	r2, 801aa02 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801a9dc:	6823      	ldr	r3, [r4, #0]
 801a9de:	4620      	mov	r0, r4
 801a9e0:	699b      	ldr	r3, [r3, #24]
 801a9e2:	4798      	blx	r3
 801a9e4:	88e2      	ldrh	r2, [r4, #6]
 801a9e6:	88a1      	ldrh	r1, [r4, #4]
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	4432      	add	r2, r6
 801a9ec:	4429      	add	r1, r5
 801a9ee:	b212      	sxth	r2, r2
 801a9f0:	b209      	sxth	r1, r1
 801a9f2:	f7e9 f989 	bl	8003d08 <_ZN8touchgfx8Drawable5setXYEss>
 801a9f6:	6823      	ldr	r3, [r4, #0]
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	699b      	ldr	r3, [r3, #24]
 801a9fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa00:	4718      	bx	r3
 801aa02:	bd70      	pop	{r4, r5, r6, pc}

0801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801aa04:	b510      	push	{r4, lr}
 801aa06:	2300      	movs	r3, #0
 801aa08:	4604      	mov	r4, r0
 801aa0a:	4608      	mov	r0, r1
 801aa0c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801aa10:	8023      	strh	r3, [r4, #0]
 801aa12:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801aa16:	8063      	strh	r3, [r4, #2]
 801aa18:	6803      	ldr	r3, [r0, #0]
 801aa1a:	80a1      	strh	r1, [r4, #4]
 801aa1c:	4621      	mov	r1, r4
 801aa1e:	80e2      	strh	r2, [r4, #6]
 801aa20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aa22:	4798      	blx	r3
 801aa24:	4620      	mov	r0, r4
 801aa26:	bd10      	pop	{r4, pc}

0801aa28 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801aa28:	4770      	bx	lr

0801aa2a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801aa2a:	b510      	push	{r4, lr}
 801aa2c:	4604      	mov	r4, r0
 801aa2e:	211c      	movs	r1, #28
 801aa30:	f00d fa4e 	bl	8027ed0 <_ZdlPvj>
 801aa34:	4620      	mov	r0, r4
 801aa36:	bd10      	pop	{r4, pc}

0801aa38 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801aa38:	4a04      	ldr	r2, [pc, #16]	@ (801aa4c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801aa3a:	6002      	str	r2, [r0, #0]
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801aa42:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801aa46:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801aa4a:	4770      	bx	lr
 801aa4c:	0802d2a0 	.word	0x0802d2a0

0801aa50 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa54:	4604      	mov	r4, r0
 801aa56:	b087      	sub	sp, #28
 801aa58:	4696      	mov	lr, r2
 801aa5a:	6880      	ldr	r0, [r0, #8]
 801aa5c:	8b22      	ldrh	r2, [r4, #24]
 801aa5e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801aa62:	9105      	str	r1, [sp, #20]
 801aa64:	1c51      	adds	r1, r2, #1
 801aa66:	8321      	strh	r1, [r4, #24]
 801aa68:	2101      	movs	r1, #1
 801aa6a:	5481      	strb	r1, [r0, r2]
 801aa6c:	4689      	mov	r9, r1
 801aa6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa72:	8b60      	ldrh	r0, [r4, #26]
 801aa74:	ee06 2a90 	vmov	s13, r2
 801aa78:	68e2      	ldr	r2, [r4, #12]
 801aa7a:	1845      	adds	r5, r0, r1
 801aa7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801aa80:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801aa84:	8365      	strh	r5, [r4, #26]
 801aa86:	edc2 6a00 	vstr	s13, [r2]
 801aa8a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aa8e:	8b60      	ldrh	r0, [r4, #26]
 801aa90:	ee07 2a10 	vmov	s14, r2
 801aa94:	68e2      	ldr	r2, [r4, #12]
 801aa96:	1845      	adds	r5, r0, r1
 801aa98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aa9c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801aaa0:	8365      	strh	r5, [r4, #26]
 801aaa2:	1d18      	adds	r0, r3, #4
 801aaa4:	460d      	mov	r5, r1
 801aaa6:	ed82 7a00 	vstr	s14, [r2]
 801aaaa:	f8be 2000 	ldrh.w	r2, [lr]
 801aaae:	9203      	str	r2, [sp, #12]
 801aab0:	2200      	movs	r2, #0
 801aab2:	4613      	mov	r3, r2
 801aab4:	4694      	mov	ip, r2
 801aab6:	9201      	str	r2, [sp, #4]
 801aab8:	9202      	str	r2, [sp, #8]
 801aaba:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801aabe:	9e05      	ldr	r6, [sp, #20]
 801aac0:	f108 0701 	add.w	r7, r8, #1
 801aac4:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801aac8:	428e      	cmp	r6, r1
 801aaca:	b2bf      	uxth	r7, r7
 801aacc:	eb0a 0b08 	add.w	fp, sl, r8
 801aad0:	f340 80b6 	ble.w	801ac40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801aad4:	9b03      	ldr	r3, [sp, #12]
 801aad6:	f9b0 c000 	ldrsh.w	ip, [r0]
 801aada:	fa43 fb05 	asr.w	fp, r3, r5
 801aade:	f00b 0b01 	and.w	fp, fp, #1
 801aae2:	fa5f f38b 	uxtb.w	r3, fp
 801aae6:	9304      	str	r3, [sp, #16]
 801aae8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801aaec:	f1bb 0f00 	cmp.w	fp, #0
 801aaf0:	d057      	beq.n	801aba2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801aaf2:	ee07 ca90 	vmov	s15, ip
 801aaf6:	8327      	strh	r7, [r4, #24]
 801aaf8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801aafc:	ee07 3a90 	vmov	s15, r3
 801ab00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab04:	f1b9 0f00 	cmp.w	r9, #0
 801ab08:	d028      	beq.n	801ab5c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801ab0a:	f04f 0602 	mov.w	r6, #2
 801ab0e:	f80a 6008 	strb.w	r6, [sl, r8]
 801ab12:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ab16:	68e7      	ldr	r7, [r4, #12]
 801ab18:	f108 0901 	add.w	r9, r8, #1
 801ab1c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ab20:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ab24:	edc7 5a00 	vstr	s11, [r7]
 801ab28:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ab2c:	68e7      	ldr	r7, [r4, #12]
 801ab2e:	f108 0901 	add.w	r9, r8, #1
 801ab32:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ab36:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ab3a:	edc7 7a00 	vstr	s15, [r7]
 801ab3e:	3501      	adds	r5, #1
 801ab40:	2d10      	cmp	r5, #16
 801ab42:	d106      	bne.n	801ab52 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801ab44:	9d02      	ldr	r5, [sp, #8]
 801ab46:	3501      	adds	r5, #1
 801ab48:	9502      	str	r5, [sp, #8]
 801ab4a:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801ab4e:	9503      	str	r5, [sp, #12]
 801ab50:	2500      	movs	r5, #0
 801ab52:	3101      	adds	r1, #1
 801ab54:	3004      	adds	r0, #4
 801ab56:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801ab5a:	e7ae      	b.n	801aaba <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801ab5c:	f04f 0605 	mov.w	r6, #5
 801ab60:	ed9d 5a01 	vldr	s10, [sp, #4]
 801ab64:	f80a 6008 	strb.w	r6, [sl, r8]
 801ab68:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801ab6c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ab70:	68e7      	ldr	r7, [r4, #12]
 801ab72:	f108 0901 	add.w	r9, r8, #1
 801ab76:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ab7a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ab7e:	ed87 5a00 	vstr	s10, [r7]
 801ab82:	ee05 2a10 	vmov	s10, r2
 801ab86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ab8a:	68e7      	ldr	r7, [r4, #12]
 801ab8c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801ab90:	f108 0901 	add.w	r9, r8, #1
 801ab94:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ab98:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ab9c:	ed87 5a00 	vstr	s10, [r7]
 801aba0:	e7b7      	b.n	801ab12 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801aba2:	f1b9 0f00 	cmp.w	r9, #0
 801aba6:	d147      	bne.n	801ac38 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801aba8:	f04f 0605 	mov.w	r6, #5
 801abac:	eddd 7a01 	vldr	s15, [sp, #4]
 801abb0:	8327      	strh	r7, [r4, #24]
 801abb2:	f80a 6008 	strb.w	r6, [sl, r8]
 801abb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801abba:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801abbe:	68e7      	ldr	r7, [r4, #12]
 801abc0:	f108 0901 	add.w	r9, r8, #1
 801abc4:	9e01      	ldr	r6, [sp, #4]
 801abc6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801abca:	f8a4 901a 	strh.w	r9, [r4, #26]
 801abce:	4466      	add	r6, ip
 801abd0:	edc7 7a00 	vstr	s15, [r7]
 801abd4:	ee07 2a90 	vmov	s15, r2
 801abd8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801abdc:	441a      	add	r2, r3
 801abde:	68e7      	ldr	r7, [r4, #12]
 801abe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801abe4:	f108 0901 	add.w	r9, r8, #1
 801abe8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801abec:	f8a4 901a 	strh.w	r9, [r4, #26]
 801abf0:	edc7 7a00 	vstr	s15, [r7]
 801abf4:	ee07 6a90 	vmov	s15, r6
 801abf8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801abfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac00:	68e7      	ldr	r7, [r4, #12]
 801ac02:	f108 0901 	add.w	r9, r8, #1
 801ac06:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ac0a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ac0e:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ac12:	edc7 7a00 	vstr	s15, [r7]
 801ac16:	ee07 2a90 	vmov	s15, r2
 801ac1a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801ac1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac22:	68e7      	ldr	r7, [r4, #12]
 801ac24:	f108 0901 	add.w	r9, r8, #1
 801ac28:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801ac2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ac30:	f8a4 901a 	strh.w	r9, [r4, #26]
 801ac34:	edc7 7a00 	vstr	s15, [r7]
 801ac38:	461a      	mov	r2, r3
 801ac3a:	f8cd c004 	str.w	ip, [sp, #4]
 801ac3e:	e77e      	b.n	801ab3e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801ac40:	f1b9 0f00 	cmp.w	r9, #0
 801ac44:	d028      	beq.n	801ac98 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801ac46:	ee07 ca90 	vmov	s15, ip
 801ac4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac4e:	eef4 6a67 	vcmp.f32	s13, s15
 801ac52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac56:	d108      	bne.n	801ac6a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801ac58:	ee07 3a90 	vmov	s15, r3
 801ac5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac60:	eeb4 7a67 	vcmp.f32	s14, s15
 801ac64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac68:	d016      	beq.n	801ac98 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801ac6a:	2302      	movs	r3, #2
 801ac6c:	8327      	strh	r7, [r4, #24]
 801ac6e:	f88b 3000 	strb.w	r3, [fp]
 801ac72:	8b62      	ldrh	r2, [r4, #26]
 801ac74:	68e3      	ldr	r3, [r4, #12]
 801ac76:	1c51      	adds	r1, r2, #1
 801ac78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ac7c:	8361      	strh	r1, [r4, #26]
 801ac7e:	edc3 6a00 	vstr	s13, [r3]
 801ac82:	8b62      	ldrh	r2, [r4, #26]
 801ac84:	68e3      	ldr	r3, [r4, #12]
 801ac86:	1c51      	adds	r1, r2, #1
 801ac88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801ac8c:	8361      	strh	r1, [r4, #26]
 801ac8e:	ed83 7a00 	vstr	s14, [r3]
 801ac92:	b007      	add	sp, #28
 801ac94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac98:	2305      	movs	r3, #5
 801ac9a:	eddd 7a01 	vldr	s15, [sp, #4]
 801ac9e:	8327      	strh	r7, [r4, #24]
 801aca0:	f88b 3000 	strb.w	r3, [fp]
 801aca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aca8:	8b61      	ldrh	r1, [r4, #26]
 801acaa:	68e3      	ldr	r3, [r4, #12]
 801acac:	1c4d      	adds	r5, r1, #1
 801acae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801acb2:	8365      	strh	r5, [r4, #26]
 801acb4:	edc3 7a00 	vstr	s15, [r3]
 801acb8:	ee07 2a90 	vmov	s15, r2
 801acbc:	8b61      	ldrh	r1, [r4, #26]
 801acbe:	68e3      	ldr	r3, [r4, #12]
 801acc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801acc4:	1c4d      	adds	r5, r1, #1
 801acc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801acca:	8365      	strh	r5, [r4, #26]
 801accc:	edc3 7a00 	vstr	s15, [r3]
 801acd0:	e7cf      	b.n	801ac72 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801acd4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acd8:	4604      	mov	r4, r0
 801acda:	b08e      	sub	sp, #56	@ 0x38
 801acdc:	4699      	mov	r9, r3
 801acde:	4688      	mov	r8, r1
 801ace0:	4615      	mov	r5, r2
 801ace2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801ace4:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801ace8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801acea:	f7e8 fd35 	bl	8003758 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801acee:	6060      	str	r0, [r4, #4]
 801acf0:	f1b9 0f00 	cmp.w	r9, #0
 801acf4:	f000 80e8 	beq.w	801aec8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801acf8:	2800      	cmp	r0, #0
 801acfa:	f000 80e5 	beq.w	801aec8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801acfe:	a805      	add	r0, sp, #20
 801ad00:	f000 f8f9 	bl	801aef6 <_ZN8touchgfx9Matrix3x3C1Ev>
 801ad04:	6833      	ldr	r3, [r6, #0]
 801ad06:	4630      	mov	r0, r6
 801ad08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ad0a:	4798      	blx	r3
 801ad0c:	a805      	add	r0, sp, #20
 801ad0e:	eef0 0a40 	vmov.f32	s1, s0
 801ad12:	f000 f8f4 	bl	801aefe <_ZN8touchgfx9Matrix3x35scaleEff>
 801ad16:	6860      	ldr	r0, [r4, #4]
 801ad18:	f1ba 0f03 	cmp.w	sl, #3
 801ad1c:	d83b      	bhi.n	801ad96 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801ad1e:	e8df f00a 	tbb	[pc, sl]
 801ad22:	1002      	.short	0x1002
 801ad24:	9f71      	.short	0x9f71
 801ad26:	6803      	ldr	r3, [r0, #0]
 801ad28:	462a      	mov	r2, r5
 801ad2a:	4641      	mov	r1, r8
 801ad2c:	689b      	ldr	r3, [r3, #8]
 801ad2e:	4798      	blx	r3
 801ad30:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801ad34:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801ad38:	ee07 7a90 	vmov	s15, r7
 801ad3c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ad40:	e026      	b.n	801ad90 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801ad42:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801ad46:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801ad4a:	8869      	ldrh	r1, [r5, #2]
 801ad4c:	1a9b      	subs	r3, r3, r2
 801ad4e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ad52:	aa03      	add	r2, sp, #12
 801ad54:	1a5b      	subs	r3, r3, r1
 801ad56:	4641      	mov	r1, r8
 801ad58:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ad5c:	882b      	ldrh	r3, [r5, #0]
 801ad5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ad62:	88ab      	ldrh	r3, [r5, #4]
 801ad64:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ad68:	6803      	ldr	r3, [r0, #0]
 801ad6a:	689b      	ldr	r3, [r3, #8]
 801ad6c:	4798      	blx	r3
 801ad6e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801aed0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801ad72:	a805      	add	r0, sp, #20
 801ad74:	f000 f8e8 	bl	801af48 <_ZN8touchgfx9Matrix3x36rotateEf>
 801ad78:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801ad7c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ad7e:	ee07 7a90 	vmov	s15, r7
 801ad82:	1a9b      	subs	r3, r3, r2
 801ad84:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801ad88:	ee00 3a10 	vmov	s0, r3
 801ad8c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ad90:	a805      	add	r0, sp, #20
 801ad92:	f000 f927 	bl	801afe4 <_ZN8touchgfx9Matrix3x39translateEff>
 801ad96:	6860      	ldr	r0, [r4, #4]
 801ad98:	a905      	add	r1, sp, #20
 801ad9a:	2500      	movs	r5, #0
 801ad9c:	f109 0602 	add.w	r6, r9, #2
 801ada0:	6803      	ldr	r3, [r0, #0]
 801ada2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ada4:	4798      	blx	r3
 801ada6:	6860      	ldr	r0, [r4, #4]
 801ada8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801adaa:	6803      	ldr	r3, [r0, #0]
 801adac:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801adb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801adb2:	4798      	blx	r3
 801adb4:	6860      	ldr	r0, [r4, #4]
 801adb6:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801adba:	6803      	ldr	r3, [r0, #0]
 801adbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801adbe:	4798      	blx	r3
 801adc0:	6860      	ldr	r0, [r4, #4]
 801adc2:	2101      	movs	r1, #1
 801adc4:	6803      	ldr	r3, [r0, #0]
 801adc6:	68db      	ldr	r3, [r3, #12]
 801adc8:	4798      	blx	r3
 801adca:	f8b9 7000 	ldrh.w	r7, [r9]
 801adce:	f104 0310 	add.w	r3, r4, #16
 801add2:	61a5      	str	r5, [r4, #24]
 801add4:	f104 0208 	add.w	r2, r4, #8
 801add8:	f104 0114 	add.w	r1, r4, #20
 801addc:	f104 000c 	add.w	r0, r4, #12
 801ade0:	f7ed fb4e 	bl	8008480 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801ade4:	42af      	cmp	r7, r5
 801ade6:	dd60      	ble.n	801aeaa <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801ade8:	8831      	ldrh	r1, [r6, #0]
 801adea:	1cb2      	adds	r2, r6, #2
 801adec:	4620      	mov	r0, r4
 801adee:	3501      	adds	r5, #1
 801adf0:	f101 030f 	add.w	r3, r1, #15
 801adf4:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801adf8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801adfc:	f7ff fe28 	bl	801aa50 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801ae00:	4606      	mov	r6, r0
 801ae02:	e7ef      	b.n	801ade4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801ae04:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801ae08:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801ae0c:	8829      	ldrh	r1, [r5, #0]
 801ae0e:	1a9b      	subs	r3, r3, r2
 801ae10:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ae14:	aa03      	add	r2, sp, #12
 801ae16:	1a5b      	subs	r3, r3, r1
 801ae18:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ae1c:	886d      	ldrh	r5, [r5, #2]
 801ae1e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ae22:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801ae26:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ae2a:	1a5b      	subs	r3, r3, r1
 801ae2c:	4641      	mov	r1, r8
 801ae2e:	1b5b      	subs	r3, r3, r5
 801ae30:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ae34:	6803      	ldr	r3, [r0, #0]
 801ae36:	689b      	ldr	r3, [r3, #8]
 801ae38:	4798      	blx	r3
 801ae3a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801aed4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801ae3e:	a805      	add	r0, sp, #20
 801ae40:	f000 f882 	bl	801af48 <_ZN8touchgfx9Matrix3x36rotateEf>
 801ae44:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801ae48:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ae4a:	1a9b      	subs	r3, r3, r2
 801ae4c:	ee00 3a90 	vmov	s1, r3
 801ae50:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801ae54:	1bdb      	subs	r3, r3, r7
 801ae56:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ae5a:	ee00 3a10 	vmov	s0, r3
 801ae5e:	e795      	b.n	801ad8c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801ae60:	886b      	ldrh	r3, [r5, #2]
 801ae62:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801ae66:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ae6a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801ae6e:	8829      	ldrh	r1, [r5, #0]
 801ae70:	1a9b      	subs	r3, r3, r2
 801ae72:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ae76:	aa03      	add	r2, sp, #12
 801ae78:	1a5b      	subs	r3, r3, r1
 801ae7a:	4641      	mov	r1, r8
 801ae7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ae80:	88eb      	ldrh	r3, [r5, #6]
 801ae82:	f8ad 3010 	strh.w	r3, [sp, #16]
 801ae86:	6803      	ldr	r3, [r0, #0]
 801ae88:	689b      	ldr	r3, [r3, #8]
 801ae8a:	4798      	blx	r3
 801ae8c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801aed8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801ae90:	a805      	add	r0, sp, #20
 801ae92:	f000 f859 	bl	801af48 <_ZN8touchgfx9Matrix3x36rotateEf>
 801ae96:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801ae9a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801ae9e:	1bdb      	subs	r3, r3, r7
 801aea0:	ee00 3a90 	vmov	s1, r3
 801aea4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801aea8:	e748      	b.n	801ad3c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801aeaa:	6860      	ldr	r0, [r4, #4]
 801aeac:	2100      	movs	r1, #0
 801aeae:	8b22      	ldrh	r2, [r4, #24]
 801aeb0:	6803      	ldr	r3, [r0, #0]
 801aeb2:	9101      	str	r1, [sp, #4]
 801aeb4:	8b61      	ldrh	r1, [r4, #26]
 801aeb6:	9100      	str	r1, [sp, #0]
 801aeb8:	6a1d      	ldr	r5, [r3, #32]
 801aeba:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801aebe:	47a8      	blx	r5
 801aec0:	6860      	ldr	r0, [r4, #4]
 801aec2:	6803      	ldr	r3, [r0, #0]
 801aec4:	69db      	ldr	r3, [r3, #28]
 801aec6:	4798      	blx	r3
 801aec8:	b00e      	add	sp, #56	@ 0x38
 801aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aece:	bf00      	nop
 801aed0:	42b40000 	.word	0x42b40000
 801aed4:	43340000 	.word	0x43340000
 801aed8:	43870000 	.word	0x43870000

0801aedc <_ZN8touchgfx9Matrix3x35resetEv>:
 801aedc:	2300      	movs	r3, #0
 801aede:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801aee2:	6043      	str	r3, [r0, #4]
 801aee4:	6002      	str	r2, [r0, #0]
 801aee6:	6083      	str	r3, [r0, #8]
 801aee8:	60c3      	str	r3, [r0, #12]
 801aeea:	6102      	str	r2, [r0, #16]
 801aeec:	6143      	str	r3, [r0, #20]
 801aeee:	6183      	str	r3, [r0, #24]
 801aef0:	61c3      	str	r3, [r0, #28]
 801aef2:	6202      	str	r2, [r0, #32]
 801aef4:	4770      	bx	lr

0801aef6 <_ZN8touchgfx9Matrix3x3C1Ev>:
 801aef6:	b508      	push	{r3, lr}
 801aef8:	f7ff fff0 	bl	801aedc <_ZN8touchgfx9Matrix3x35resetEv>
 801aefc:	bd08      	pop	{r3, pc}

0801aefe <_ZN8touchgfx9Matrix3x35scaleEff>:
 801aefe:	edd0 7a00 	vldr	s15, [r0]
 801af02:	ee67 7a80 	vmul.f32	s15, s15, s0
 801af06:	edc0 7a00 	vstr	s15, [r0]
 801af0a:	edd0 7a01 	vldr	s15, [r0, #4]
 801af0e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801af12:	edc0 7a01 	vstr	s15, [r0, #4]
 801af16:	edd0 7a02 	vldr	s15, [r0, #8]
 801af1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801af1e:	edd0 7a03 	vldr	s15, [r0, #12]
 801af22:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801af26:	ed80 0a02 	vstr	s0, [r0, #8]
 801af2a:	edc0 7a03 	vstr	s15, [r0, #12]
 801af2e:	edd0 7a04 	vldr	s15, [r0, #16]
 801af32:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801af36:	edc0 7a04 	vstr	s15, [r0, #16]
 801af3a:	edd0 7a05 	vldr	s15, [r0, #20]
 801af3e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801af42:	edc0 0a05 	vstr	s1, [r0, #20]
 801af46:	4770      	bx	lr

0801af48 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801af48:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801afdc <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801af4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801af50:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801afe0 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801af54:	b510      	push	{r4, lr}
 801af56:	ed2d 8b02 	vpush	{d8}
 801af5a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801af5e:	4604      	mov	r4, r0
 801af60:	eeb0 0a68 	vmov.f32	s0, s17
 801af64:	f00d f8ec 	bl	8028140 <cosf>
 801af68:	eeb0 8a40 	vmov.f32	s16, s0
 801af6c:	eeb0 0a68 	vmov.f32	s0, s17
 801af70:	f00d f822 	bl	8027fb8 <sinf>
 801af74:	edd4 6a03 	vldr	s13, [r4, #12]
 801af78:	edd4 4a00 	vldr	s9, [r4]
 801af7c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801af80:	ed94 7a04 	vldr	s14, [r4, #16]
 801af84:	ed94 5a01 	vldr	s10, [r4, #4]
 801af88:	ee66 6a88 	vmul.f32	s13, s13, s16
 801af8c:	edd4 5a02 	vldr	s11, [r4, #8]
 801af90:	eee8 7a24 	vfma.f32	s15, s16, s9
 801af94:	eee0 6a24 	vfma.f32	s13, s0, s9
 801af98:	edc4 7a00 	vstr	s15, [r4]
 801af9c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801afa0:	ee27 7a08 	vmul.f32	s14, s14, s16
 801afa4:	edc4 6a03 	vstr	s13, [r4, #12]
 801afa8:	eee8 7a05 	vfma.f32	s15, s16, s10
 801afac:	eea0 7a05 	vfma.f32	s14, s0, s10
 801afb0:	edc4 7a01 	vstr	s15, [r4, #4]
 801afb4:	edd4 7a05 	vldr	s15, [r4, #20]
 801afb8:	ed84 7a04 	vstr	s14, [r4, #16]
 801afbc:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801afc0:	ee67 7a88 	vmul.f32	s15, s15, s16
 801afc4:	eea8 6a25 	vfma.f32	s12, s16, s11
 801afc8:	eee0 7a25 	vfma.f32	s15, s0, s11
 801afcc:	ecbd 8b02 	vpop	{d8}
 801afd0:	ed84 6a02 	vstr	s12, [r4, #8]
 801afd4:	edc4 7a05 	vstr	s15, [r4, #20]
 801afd8:	bd10      	pop	{r4, pc}
 801afda:	bf00      	nop
 801afdc:	40490fdb 	.word	0x40490fdb
 801afe0:	43340000 	.word	0x43340000

0801afe4 <_ZN8touchgfx9Matrix3x39translateEff>:
 801afe4:	ed90 6a06 	vldr	s12, [r0, #24]
 801afe8:	edd0 7a00 	vldr	s15, [r0]
 801afec:	edd0 6a07 	vldr	s13, [r0, #28]
 801aff0:	eee6 7a00 	vfma.f32	s15, s12, s0
 801aff4:	ed90 7a08 	vldr	s14, [r0, #32]
 801aff8:	edc0 7a00 	vstr	s15, [r0]
 801affc:	edd0 7a01 	vldr	s15, [r0, #4]
 801b000:	eee6 7a80 	vfma.f32	s15, s13, s0
 801b004:	edc0 7a01 	vstr	s15, [r0, #4]
 801b008:	edd0 7a02 	vldr	s15, [r0, #8]
 801b00c:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b010:	edc0 7a02 	vstr	s15, [r0, #8]
 801b014:	edd0 7a03 	vldr	s15, [r0, #12]
 801b018:	eee6 7a20 	vfma.f32	s15, s12, s1
 801b01c:	edc0 7a03 	vstr	s15, [r0, #12]
 801b020:	edd0 7a04 	vldr	s15, [r0, #16]
 801b024:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801b028:	edc0 7a04 	vstr	s15, [r0, #16]
 801b02c:	edd0 7a05 	vldr	s15, [r0, #20]
 801b030:	eee7 7a20 	vfma.f32	s15, s14, s1
 801b034:	edc0 7a05 	vstr	s15, [r0, #20]
 801b038:	4770      	bx	lr

0801b03a <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801b03a:	edd0 6a01 	vldr	s13, [r0, #4]
 801b03e:	b084      	sub	sp, #16
 801b040:	edd0 7a04 	vldr	s15, [r0, #16]
 801b044:	ed90 7a03 	vldr	s14, [r0, #12]
 801b048:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801b04c:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801b050:	edd0 6a00 	vldr	s13, [r0]
 801b054:	eee7 7a00 	vfma.f32	s15, s14, s0
 801b058:	ed90 7a05 	vldr	s14, [r0, #20]
 801b05c:	eee6 0a80 	vfma.f32	s1, s13, s0
 801b060:	ed90 0a02 	vldr	s0, [r0, #8]
 801b064:	ee30 0a80 	vadd.f32	s0, s1, s0
 801b068:	ee77 0a87 	vadd.f32	s1, s15, s14
 801b06c:	b004      	add	sp, #16
 801b06e:	4770      	bx	lr

0801b070 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801b070:	b530      	push	{r4, r5, lr}
 801b072:	8083      	strh	r3, [r0, #4]
 801b074:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b078:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801b07c:	80c3      	strh	r3, [r0, #6]
 801b07e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801b082:	6141      	str	r1, [r0, #20]
 801b084:	7203      	strb	r3, [r0, #8]
 801b086:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b08a:	8302      	strh	r2, [r0, #24]
 801b08c:	7243      	strb	r3, [r0, #9]
 801b08e:	7a83      	ldrb	r3, [r0, #10]
 801b090:	f365 0306 	bfi	r3, r5, #0, #7
 801b094:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801b098:	f365 13c7 	bfi	r3, r5, #7, #1
 801b09c:	7283      	strb	r3, [r0, #10]
 801b09e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801b0a2:	72c3      	strb	r3, [r0, #11]
 801b0a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801b0a8:	7303      	strb	r3, [r0, #12]
 801b0aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b0ae:	81c3      	strh	r3, [r0, #14]
 801b0b0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b0b4:	8203      	strh	r3, [r0, #16]
 801b0b6:	4b01      	ldr	r3, [pc, #4]	@ (801b0bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801b0b8:	6003      	str	r3, [r0, #0]
 801b0ba:	bd30      	pop	{r4, r5, pc}
 801b0bc:	0802d2b4 	.word	0x0802d2b4

0801b0c0 <_ZNK8touchgfx9ConstFont4findEt>:
 801b0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0c2:	6944      	ldr	r4, [r0, #20]
 801b0c4:	b3bc      	cbz	r4, 801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b0c6:	88a3      	ldrh	r3, [r4, #4]
 801b0c8:	8b02      	ldrh	r2, [r0, #24]
 801b0ca:	1acb      	subs	r3, r1, r3
 801b0cc:	f102 32ff 	add.w	r2, r2, #4294967295
 801b0d0:	d431      	bmi.n	801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b0d2:	4293      	cmp	r3, r2
 801b0d4:	dd0c      	ble.n	801b0f0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b0d6:	230e      	movs	r3, #14
 801b0d8:	fb03 4302 	mla	r3, r3, r2, r4
 801b0dc:	889b      	ldrh	r3, [r3, #4]
 801b0de:	1a5b      	subs	r3, r3, r1
 801b0e0:	1ad3      	subs	r3, r2, r3
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	db27      	blt.n	801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	bfbc      	itt	lt
 801b0ea:	2302      	movlt	r3, #2
 801b0ec:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b0f0:	2500      	movs	r5, #0
 801b0f2:	260e      	movs	r6, #14
 801b0f4:	4295      	cmp	r5, r2
 801b0f6:	dc1e      	bgt.n	801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b0f8:	fb06 4003 	mla	r0, r6, r3, r4
 801b0fc:	8887      	ldrh	r7, [r0, #4]
 801b0fe:	42b9      	cmp	r1, r7
 801b100:	d01a      	beq.n	801b138 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b102:	d20d      	bcs.n	801b120 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b104:	1e5a      	subs	r2, r3, #1
 801b106:	4295      	cmp	r5, r2
 801b108:	dc15      	bgt.n	801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b10a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b10e:	1a5b      	subs	r3, r3, r1
 801b110:	1ad3      	subs	r3, r2, r3
 801b112:	429a      	cmp	r2, r3
 801b114:	db0f      	blt.n	801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b116:	429d      	cmp	r5, r3
 801b118:	ddec      	ble.n	801b0f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b11a:	1953      	adds	r3, r2, r5
 801b11c:	105b      	asrs	r3, r3, #1
 801b11e:	e7e9      	b.n	801b0f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b120:	1c5d      	adds	r5, r3, #1
 801b122:	42aa      	cmp	r2, r5
 801b124:	db07      	blt.n	801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b126:	8a43      	ldrh	r3, [r0, #18]
 801b128:	1acb      	subs	r3, r1, r3
 801b12a:	442b      	add	r3, r5
 801b12c:	429d      	cmp	r5, r3
 801b12e:	dc02      	bgt.n	801b136 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b130:	429a      	cmp	r2, r3
 801b132:	dadf      	bge.n	801b0f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b134:	e7f1      	b.n	801b11a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b136:	2000      	movs	r0, #0
 801b138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b13a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b13c:	4604      	mov	r4, r0
 801b13e:	4617      	mov	r7, r2
 801b140:	461e      	mov	r6, r3
 801b142:	b911      	cbnz	r1, 801b14a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b144:	2500      	movs	r5, #0
 801b146:	4628      	mov	r0, r5
 801b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b14a:	290a      	cmp	r1, #10
 801b14c:	d0fa      	beq.n	801b144 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b14e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801b152:	4291      	cmp	r1, r2
 801b154:	d0f6      	beq.n	801b144 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b156:	f242 020b 	movw	r2, #8203	@ 0x200b
 801b15a:	4291      	cmp	r1, r2
 801b15c:	d0f2      	beq.n	801b144 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b15e:	f7ff ffaf 	bl	801b0c0 <_ZNK8touchgfx9ConstFont4findEt>
 801b162:	4605      	mov	r5, r0
 801b164:	b950      	cbnz	r0, 801b17c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b166:	6823      	ldr	r3, [r4, #0]
 801b168:	4620      	mov	r0, r4
 801b16a:	691b      	ldr	r3, [r3, #16]
 801b16c:	4798      	blx	r3
 801b16e:	4601      	mov	r1, r0
 801b170:	4620      	mov	r0, r4
 801b172:	f7ff ffa5 	bl	801b0c0 <_ZNK8touchgfx9ConstFont4findEt>
 801b176:	4605      	mov	r5, r0
 801b178:	2800      	cmp	r0, #0
 801b17a:	d0e3      	beq.n	801b144 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b17c:	6823      	ldr	r3, [r4, #0]
 801b17e:	4629      	mov	r1, r5
 801b180:	4620      	mov	r0, r4
 801b182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b184:	4798      	blx	r3
 801b186:	6038      	str	r0, [r7, #0]
 801b188:	6823      	ldr	r3, [r4, #0]
 801b18a:	4620      	mov	r0, r4
 801b18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b18e:	4798      	blx	r3
 801b190:	7030      	strb	r0, [r6, #0]
 801b192:	e7d8      	b.n	801b146 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b194 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801b194:	b538      	push	{r3, r4, r5, lr}
 801b196:	4605      	mov	r5, r0
 801b198:	f002 f9f6 	bl	801d588 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b19c:	4604      	mov	r4, r0
 801b19e:	4628      	mov	r0, r5
 801b1a0:	f002 f936 	bl	801d410 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	bf14      	ite	ne
 801b1a8:	2002      	movne	r0, #2
 801b1aa:	2000      	moveq	r0, #0
 801b1ac:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b1b0:	b280      	uxth	r0, r0
 801b1b2:	bd38      	pop	{r3, r4, r5, pc}

0801b1b4 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801b1b4:	b538      	push	{r3, r4, r5, lr}
 801b1b6:	4605      	mov	r5, r0
 801b1b8:	f002 f9e6 	bl	801d588 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b1bc:	4604      	mov	r4, r0
 801b1be:	4628      	mov	r0, r5
 801b1c0:	f002 f926 	bl	801d410 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	bf14      	ite	ne
 801b1c8:	2002      	movne	r0, #2
 801b1ca:	2000      	moveq	r0, #0
 801b1cc:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b1d0:	f040 0001 	orr.w	r0, r0, #1
 801b1d4:	b280      	uxth	r0, r0
 801b1d6:	bd38      	pop	{r3, r4, r5, pc}

0801b1d8 <_ZN8touchgfx4clzuEm>:
 801b1d8:	4603      	mov	r3, r0
 801b1da:	b1c8      	cbz	r0, 801b210 <_ZN8touchgfx4clzuEm+0x38>
 801b1dc:	0c02      	lsrs	r2, r0, #16
 801b1de:	0412      	lsls	r2, r2, #16
 801b1e0:	b9a2      	cbnz	r2, 801b20c <_ZN8touchgfx4clzuEm+0x34>
 801b1e2:	0403      	lsls	r3, r0, #16
 801b1e4:	2010      	movs	r0, #16
 801b1e6:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801b1ea:	bf04      	itt	eq
 801b1ec:	021b      	lsleq	r3, r3, #8
 801b1ee:	3008      	addeq	r0, #8
 801b1f0:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801b1f4:	bf04      	itt	eq
 801b1f6:	011b      	lsleq	r3, r3, #4
 801b1f8:	3004      	addeq	r0, #4
 801b1fa:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801b1fe:	bf04      	itt	eq
 801b200:	009b      	lsleq	r3, r3, #2
 801b202:	3002      	addeq	r0, #2
 801b204:	2b00      	cmp	r3, #0
 801b206:	db04      	blt.n	801b212 <_ZN8touchgfx4clzuEm+0x3a>
 801b208:	3001      	adds	r0, #1
 801b20a:	4770      	bx	lr
 801b20c:	2000      	movs	r0, #0
 801b20e:	e7ea      	b.n	801b1e6 <_ZN8touchgfx4clzuEm+0xe>
 801b210:	2020      	movs	r0, #32
 801b212:	4770      	bx	lr

0801b214 <_ZN8touchgfx7muldivuEmmmRm>:
 801b214:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b218:	460f      	mov	r7, r1
 801b21a:	4615      	mov	r5, r2
 801b21c:	461e      	mov	r6, r3
 801b21e:	4601      	mov	r1, r0
 801b220:	b100      	cbz	r0, 801b224 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801b222:	b927      	cbnz	r7, 801b22e <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801b224:	2000      	movs	r0, #0
 801b226:	6030      	str	r0, [r6, #0]
 801b228:	b002      	add	sp, #8
 801b22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b22e:	f7ff ffd3 	bl	801b1d8 <_ZN8touchgfx4clzuEm>
 801b232:	b980      	cbnz	r0, 801b256 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801b234:	4638      	mov	r0, r7
 801b236:	f7ff ffcf 	bl	801b1d8 <_ZN8touchgfx4clzuEm>
 801b23a:	2800      	cmp	r0, #0
 801b23c:	dd05      	ble.n	801b24a <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801b23e:	4633      	mov	r3, r6
 801b240:	462a      	mov	r2, r5
 801b242:	4638      	mov	r0, r7
 801b244:	f7ff ffe6 	bl	801b214 <_ZN8touchgfx7muldivuEmmmRm>
 801b248:	e7ee      	b.n	801b228 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b24a:	f04f 33ff 	mov.w	r3, #4294967295
 801b24e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b252:	6033      	str	r3, [r6, #0]
 801b254:	e7e8      	b.n	801b228 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b256:	fa37 f800 	lsrs.w	r8, r7, r0
 801b25a:	fb07 f301 	mul.w	r3, r7, r1
 801b25e:	d105      	bne.n	801b26c <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801b260:	fbb3 f0f5 	udiv	r0, r3, r5
 801b264:	fb05 3510 	mls	r5, r5, r0, r3
 801b268:	6035      	str	r5, [r6, #0]
 801b26a:	e7dd      	b.n	801b228 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801b26c:	2301      	movs	r3, #1
 801b26e:	fa01 fa00 	lsl.w	sl, r1, r0
 801b272:	462a      	mov	r2, r5
 801b274:	fa03 f000 	lsl.w	r0, r3, r0
 801b278:	4633      	mov	r3, r6
 801b27a:	fbba f9f5 	udiv	r9, sl, r5
 801b27e:	3801      	subs	r0, #1
 801b280:	fb08 f409 	mul.w	r4, r8, r9
 801b284:	4038      	ands	r0, r7
 801b286:	f7ff ffc5 	bl	801b214 <_ZN8touchgfx7muldivuEmmmRm>
 801b28a:	462a      	mov	r2, r5
 801b28c:	4607      	mov	r7, r0
 801b28e:	ab01      	add	r3, sp, #4
 801b290:	fb05 a119 	mls	r1, r5, r9, sl
 801b294:	4640      	mov	r0, r8
 801b296:	f7ff ffbd 	bl	801b214 <_ZN8touchgfx7muldivuEmmmRm>
 801b29a:	9b01      	ldr	r3, [sp, #4]
 801b29c:	6832      	ldr	r2, [r6, #0]
 801b29e:	441a      	add	r2, r3
 801b2a0:	fbb2 f3f5 	udiv	r3, r2, r5
 801b2a4:	441c      	add	r4, r3
 801b2a6:	fb05 2513 	mls	r5, r5, r3, r2
 801b2aa:	443c      	add	r4, r7
 801b2ac:	4420      	add	r0, r4
 801b2ae:	e7db      	b.n	801b268 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801b2b0 <_ZN8touchgfx6muldivElllRl>:
 801b2b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	461e      	mov	r6, r3
 801b2b6:	bfba      	itte	lt
 801b2b8:	4240      	neglt	r0, r0
 801b2ba:	f04f 34ff 	movlt.w	r4, #4294967295
 801b2be:	2401      	movge	r4, #1
 801b2c0:	2900      	cmp	r1, #0
 801b2c2:	bfbc      	itt	lt
 801b2c4:	4249      	neglt	r1, r1
 801b2c6:	4264      	neglt	r4, r4
 801b2c8:	2a00      	cmp	r2, #0
 801b2ca:	bfb6      	itet	lt
 801b2cc:	4265      	neglt	r5, r4
 801b2ce:	4625      	movge	r5, r4
 801b2d0:	4252      	neglt	r2, r2
 801b2d2:	4288      	cmp	r0, r1
 801b2d4:	bfc2      	ittt	gt
 801b2d6:	4603      	movgt	r3, r0
 801b2d8:	4608      	movgt	r0, r1
 801b2da:	4619      	movgt	r1, r3
 801b2dc:	ab01      	add	r3, sp, #4
 801b2de:	f7ff ff99 	bl	801b214 <_ZN8touchgfx7muldivuEmmmRm>
 801b2e2:	9b01      	ldr	r3, [sp, #4]
 801b2e4:	4368      	muls	r0, r5
 801b2e6:	435c      	muls	r4, r3
 801b2e8:	6034      	str	r4, [r6, #0]
 801b2ea:	b002      	add	sp, #8
 801b2ec:	bd70      	pop	{r4, r5, r6, pc}

0801b2ee <_ZN8touchgfx6muldivElll>:
 801b2ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2f0:	4606      	mov	r6, r0
 801b2f2:	ab01      	add	r3, sp, #4
 801b2f4:	460d      	mov	r5, r1
 801b2f6:	4614      	mov	r4, r2
 801b2f8:	f7ff ffda 	bl	801b2b0 <_ZN8touchgfx6muldivElllRl>
 801b2fc:	2e00      	cmp	r6, #0
 801b2fe:	db20      	blt.n	801b342 <_ZN8touchgfx6muldivElll+0x54>
 801b300:	bf14      	ite	ne
 801b302:	2301      	movne	r3, #1
 801b304:	2300      	moveq	r3, #0
 801b306:	2d00      	cmp	r5, #0
 801b308:	db1e      	blt.n	801b348 <_ZN8touchgfx6muldivElll+0x5a>
 801b30a:	bf14      	ite	ne
 801b30c:	2201      	movne	r2, #1
 801b30e:	2200      	moveq	r2, #0
 801b310:	2c00      	cmp	r4, #0
 801b312:	fb03 f202 	mul.w	r2, r3, r2
 801b316:	db1a      	blt.n	801b34e <_ZN8touchgfx6muldivElll+0x60>
 801b318:	bf14      	ite	ne
 801b31a:	2301      	movne	r3, #1
 801b31c:	2300      	moveq	r3, #0
 801b31e:	4353      	muls	r3, r2
 801b320:	2b01      	cmp	r3, #1
 801b322:	d117      	bne.n	801b354 <_ZN8touchgfx6muldivElll+0x66>
 801b324:	2c00      	cmp	r4, #0
 801b326:	9b01      	ldr	r3, [sp, #4]
 801b328:	bfb8      	it	lt
 801b32a:	4264      	neglt	r4, r4
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	f104 0401 	add.w	r4, r4, #1
 801b332:	bfb8      	it	lt
 801b334:	425b      	neglt	r3, r3
 801b336:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b33a:	db00      	blt.n	801b33e <_ZN8touchgfx6muldivElll+0x50>
 801b33c:	3001      	adds	r0, #1
 801b33e:	b002      	add	sp, #8
 801b340:	bd70      	pop	{r4, r5, r6, pc}
 801b342:	f04f 33ff 	mov.w	r3, #4294967295
 801b346:	e7de      	b.n	801b306 <_ZN8touchgfx6muldivElll+0x18>
 801b348:	f04f 32ff 	mov.w	r2, #4294967295
 801b34c:	e7e0      	b.n	801b310 <_ZN8touchgfx6muldivElll+0x22>
 801b34e:	f04f 33ff 	mov.w	r3, #4294967295
 801b352:	e7e4      	b.n	801b31e <_ZN8touchgfx6muldivElll+0x30>
 801b354:	3301      	adds	r3, #1
 801b356:	d1f2      	bne.n	801b33e <_ZN8touchgfx6muldivElll+0x50>
 801b358:	9b01      	ldr	r3, [sp, #4]
 801b35a:	2c00      	cmp	r4, #0
 801b35c:	bfb8      	it	lt
 801b35e:	4264      	neglt	r4, r4
 801b360:	2b00      	cmp	r3, #0
 801b362:	bfb8      	it	lt
 801b364:	425b      	neglt	r3, r3
 801b366:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b36a:	bfc8      	it	gt
 801b36c:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801b370:	e7e5      	b.n	801b33e <_ZN8touchgfx6muldivElll+0x50>

0801b372 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b372:	2002      	movs	r0, #2
 801b374:	4770      	bx	lr

0801b376 <_ZN8touchgfx6ScreenD1Ev>:
 801b376:	4770      	bx	lr

0801b378 <_ZN8touchgfx12GestureEventD1Ev>:
 801b378:	4770      	bx	lr

0801b37a <_ZN8touchgfx12GestureEventD0Ev>:
 801b37a:	b510      	push	{r4, lr}
 801b37c:	4604      	mov	r4, r0
 801b37e:	210c      	movs	r1, #12
 801b380:	f00c fda6 	bl	8027ed0 <_ZdlPvj>
 801b384:	4620      	mov	r0, r4
 801b386:	bd10      	pop	{r4, pc}

0801b388 <_ZN8touchgfx6ScreenD0Ev>:
 801b388:	b510      	push	{r4, lr}
 801b38a:	4604      	mov	r4, r0
 801b38c:	213c      	movs	r1, #60	@ 0x3c
 801b38e:	f00c fd9f 	bl	8027ed0 <_ZdlPvj>
 801b392:	4620      	mov	r0, r4
 801b394:	bd10      	pop	{r4, pc}
	...

0801b398 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b398:	b530      	push	{r4, r5, lr}
 801b39a:	460d      	mov	r5, r1
 801b39c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b39e:	b087      	sub	sp, #28
 801b3a0:	4604      	mov	r4, r0
 801b3a2:	b301      	cbz	r1, 801b3e6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b3a4:	a801      	add	r0, sp, #4
 801b3a6:	f7ff fb2d 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b3aa:	892a      	ldrh	r2, [r5, #8]
 801b3ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b3b0:	7928      	ldrb	r0, [r5, #4]
 801b3b2:	1ad2      	subs	r2, r2, r3
 801b3b4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801b3b6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b3ba:	441a      	add	r2, r3
 801b3bc:	896b      	ldrh	r3, [r5, #10]
 801b3be:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b3c2:	f88d 0010 	strb.w	r0, [sp, #16]
 801b3c6:	1b5b      	subs	r3, r3, r5
 801b3c8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801b3ca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b3cc:	442b      	add	r3, r5
 801b3ce:	4d07      	ldr	r5, [pc, #28]	@ (801b3ec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b3d0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b3d4:	a903      	add	r1, sp, #12
 801b3d6:	9503      	str	r5, [sp, #12]
 801b3d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b3dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b3e0:	6803      	ldr	r3, [r0, #0]
 801b3e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b3e4:	4798      	blx	r3
 801b3e6:	b007      	add	sp, #28
 801b3e8:	bd30      	pop	{r4, r5, pc}
 801b3ea:	bf00      	nop
 801b3ec:	0802d31c 	.word	0x0802d31c

0801b3f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b3f6:	b08a      	sub	sp, #40	@ 0x28
 801b3f8:	4604      	mov	r4, r0
 801b3fa:	460d      	mov	r5, r1
 801b3fc:	b113      	cbz	r3, 801b404 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b3fe:	790b      	ldrb	r3, [r1, #4]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d044      	beq.n	801b48e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b404:	f104 0804 	add.w	r8, r4, #4
 801b408:	a803      	add	r0, sp, #12
 801b40a:	4641      	mov	r1, r8
 801b40c:	f7ff fafa 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b410:	792b      	ldrb	r3, [r5, #4]
 801b412:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b416:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b41a:	b983      	cbnz	r3, 801b43e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b41c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801b420:	892a      	ldrh	r2, [r5, #8]
 801b422:	88e9      	ldrh	r1, [r5, #6]
 801b424:	4640      	mov	r0, r8
 801b426:	1b92      	subs	r2, r2, r6
 801b428:	9301      	str	r3, [sp, #4]
 801b42a:	1bc9      	subs	r1, r1, r7
 801b42c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801b430:	b212      	sxth	r2, r2
 801b432:	9300      	str	r3, [sp, #0]
 801b434:	b209      	sxth	r1, r1
 801b436:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801b43a:	f7f6 fc37 	bl	8011cac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b43e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b440:	b329      	cbz	r1, 801b48e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b442:	a805      	add	r0, sp, #20
 801b444:	f7ff fade 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b448:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b44c:	792b      	ldrb	r3, [r5, #4]
 801b44e:	a907      	add	r1, sp, #28
 801b450:	1abf      	subs	r7, r7, r2
 801b452:	88ea      	ldrh	r2, [r5, #6]
 801b454:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b456:	4417      	add	r7, r2
 801b458:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801b45a:	f88d 3020 	strb.w	r3, [sp, #32]
 801b45e:	4417      	add	r7, r2
 801b460:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b464:	1ab6      	subs	r6, r6, r2
 801b466:	892a      	ldrh	r2, [r5, #8]
 801b468:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801b46c:	4416      	add	r6, r2
 801b46e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801b470:	4416      	add	r6, r2
 801b472:	4a08      	ldr	r2, [pc, #32]	@ (801b494 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b474:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801b478:	2600      	movs	r6, #0
 801b47a:	9207      	str	r2, [sp, #28]
 801b47c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801b480:	6803      	ldr	r3, [r0, #0]
 801b482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b484:	4798      	blx	r3
 801b486:	792b      	ldrb	r3, [r5, #4]
 801b488:	b10b      	cbz	r3, 801b48e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b48a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801b48e:	b00a      	add	sp, #40	@ 0x28
 801b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b494:	0802ca14 	.word	0x0802ca14

0801b498 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b49c:	460c      	mov	r4, r1
 801b49e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801b4a0:	b088      	sub	sp, #32
 801b4a2:	4605      	mov	r5, r0
 801b4a4:	2900      	cmp	r1, #0
 801b4a6:	d06d      	beq.n	801b584 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b4a8:	4668      	mov	r0, sp
 801b4aa:	f7ff faab 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4ae:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801b4b0:	88e3      	ldrh	r3, [r4, #6]
 801b4b2:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b4b6:	440b      	add	r3, r1
 801b4b8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b4bc:	b21b      	sxth	r3, r3
 801b4be:	4543      	cmp	r3, r8
 801b4c0:	db31      	blt.n	801b526 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b4c2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b4c6:	44c4      	add	ip, r8
 801b4c8:	fa0f fc8c 	sxth.w	ip, ip
 801b4cc:	4563      	cmp	r3, ip
 801b4ce:	da2a      	bge.n	801b526 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b4d0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801b4d2:	8926      	ldrh	r6, [r4, #8]
 801b4d4:	4416      	add	r6, r2
 801b4d6:	b236      	sxth	r6, r6
 801b4d8:	42be      	cmp	r6, r7
 801b4da:	db24      	blt.n	801b526 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b4dc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b4e0:	4438      	add	r0, r7
 801b4e2:	b200      	sxth	r0, r0
 801b4e4:	4286      	cmp	r6, r0
 801b4e6:	da1e      	bge.n	801b526 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b4e8:	8963      	ldrh	r3, [r4, #10]
 801b4ea:	4419      	add	r1, r3
 801b4ec:	b209      	sxth	r1, r1
 801b4ee:	4541      	cmp	r1, r8
 801b4f0:	db08      	blt.n	801b504 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b4f2:	4561      	cmp	r1, ip
 801b4f4:	da06      	bge.n	801b504 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b4f6:	89a3      	ldrh	r3, [r4, #12]
 801b4f8:	441a      	add	r2, r3
 801b4fa:	b212      	sxth	r2, r2
 801b4fc:	42ba      	cmp	r2, r7
 801b4fe:	db01      	blt.n	801b504 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b500:	4282      	cmp	r2, r0
 801b502:	db10      	blt.n	801b526 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b504:	4b21      	ldr	r3, [pc, #132]	@ (801b58c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b506:	a904      	add	r1, sp, #16
 801b508:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b50a:	9304      	str	r3, [sp, #16]
 801b50c:	2302      	movs	r3, #2
 801b50e:	f88d 3014 	strb.w	r3, [sp, #20]
 801b512:	2300      	movs	r3, #0
 801b514:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b518:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b51c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b520:	6803      	ldr	r3, [r0, #0]
 801b522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b524:	4798      	blx	r3
 801b526:	1d29      	adds	r1, r5, #4
 801b528:	a802      	add	r0, sp, #8
 801b52a:	f7ff fa6b 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b52e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b532:	88e0      	ldrh	r0, [r4, #6]
 801b534:	eba3 0808 	sub.w	r8, r3, r8
 801b538:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b53c:	7921      	ldrb	r1, [r4, #4]
 801b53e:	fa1f f888 	uxth.w	r8, r8
 801b542:	1bdf      	subs	r7, r3, r7
 801b544:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801b548:	b2bb      	uxth	r3, r7
 801b54a:	4440      	add	r0, r8
 801b54c:	8922      	ldrh	r2, [r4, #8]
 801b54e:	8967      	ldrh	r7, [r4, #10]
 801b550:	4460      	add	r0, ip
 801b552:	89a4      	ldrh	r4, [r4, #12]
 801b554:	441a      	add	r2, r3
 801b556:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801b558:	44b8      	add	r8, r7
 801b55a:	4423      	add	r3, r4
 801b55c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b560:	4432      	add	r2, r6
 801b562:	44e0      	add	r8, ip
 801b564:	4433      	add	r3, r6
 801b566:	4c0a      	ldr	r4, [pc, #40]	@ (801b590 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b568:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801b56a:	f88d 1014 	strb.w	r1, [sp, #20]
 801b56e:	a904      	add	r1, sp, #16
 801b570:	9404      	str	r4, [sp, #16]
 801b572:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b576:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b57a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b57e:	6803      	ldr	r3, [r0, #0]
 801b580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b582:	4798      	blx	r3
 801b584:	b008      	add	sp, #32
 801b586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b58a:	bf00      	nop
 801b58c:	0802ca14 	.word	0x0802ca14
 801b590:	0802ca28 	.word	0x0802ca28

0801b594 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b596:	4604      	mov	r4, r0
 801b598:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b59c:	3201      	adds	r2, #1
 801b59e:	d112      	bne.n	801b5c6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b5a0:	2500      	movs	r5, #0
 801b5a2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b5a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b5aa:	6803      	ldr	r3, [r0, #0]
 801b5ac:	9500      	str	r5, [sp, #0]
 801b5ae:	466d      	mov	r5, sp
 801b5b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b5b4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b5b8:	4629      	mov	r1, r5
 801b5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b5bc:	4798      	blx	r3
 801b5be:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b5c2:	e884 0003 	stmia.w	r4, {r0, r1}
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	b003      	add	sp, #12
 801b5ca:	bd30      	pop	{r4, r5, pc}

0801b5cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b5cc:	b513      	push	{r0, r1, r4, lr}
 801b5ce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b5d2:	4604      	mov	r4, r0
 801b5d4:	3301      	adds	r3, #1
 801b5d6:	d109      	bne.n	801b5ec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b5d8:	4601      	mov	r1, r0
 801b5da:	4668      	mov	r0, sp
 801b5dc:	f7ff fa12 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b5e0:	f8bd 3000 	ldrh.w	r3, [sp]
 801b5e4:	8423      	strh	r3, [r4, #32]
 801b5e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b5ea:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b5ec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b5f0:	b002      	add	sp, #8
 801b5f2:	bd10      	pop	{r4, pc}

0801b5f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b5f4:	b513      	push	{r0, r1, r4, lr}
 801b5f6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801b5fa:	4604      	mov	r4, r0
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	d109      	bne.n	801b614 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b600:	4601      	mov	r1, r0
 801b602:	4668      	mov	r0, sp
 801b604:	f7ff f9fe 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b608:	f8bd 3000 	ldrh.w	r3, [sp]
 801b60c:	8423      	strh	r3, [r4, #32]
 801b60e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b612:	8463      	strh	r3, [r4, #34]	@ 0x22
 801b614:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801b618:	b002      	add	sp, #8
 801b61a:	bd10      	pop	{r4, pc}

0801b61c <_ZN8touchgfx6ScreenC1Ev>:
 801b61c:	b570      	push	{r4, r5, r6, lr}
 801b61e:	4b17      	ldr	r3, [pc, #92]	@ (801b67c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b620:	4605      	mov	r5, r0
 801b622:	4a17      	ldr	r2, [pc, #92]	@ (801b680 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b624:	2101      	movs	r1, #1
 801b626:	f845 3b04 	str.w	r3, [r5], #4
 801b62a:	2300      	movs	r3, #0
 801b62c:	6042      	str	r2, [r0, #4]
 801b62e:	4604      	mov	r4, r0
 801b630:	8103      	strh	r3, [r0, #8]
 801b632:	8143      	strh	r3, [r0, #10]
 801b634:	8183      	strh	r3, [r0, #12]
 801b636:	81c3      	strh	r3, [r0, #14]
 801b638:	8203      	strh	r3, [r0, #16]
 801b63a:	8243      	strh	r3, [r0, #18]
 801b63c:	8283      	strh	r3, [r0, #20]
 801b63e:	82c3      	strh	r3, [r0, #22]
 801b640:	6203      	str	r3, [r0, #32]
 801b642:	8483      	strh	r3, [r0, #36]	@ 0x24
 801b644:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801b646:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801b64a:	6343      	str	r3, [r0, #52]	@ 0x34
 801b64c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801b650:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801b654:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b658:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801b65c:	4b09      	ldr	r3, [pc, #36]	@ (801b684 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b65e:	4628      	mov	r0, r5
 801b660:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b664:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801b666:	4a08      	ldr	r2, [pc, #32]	@ (801b688 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b668:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b66c:	4798      	blx	r3
 801b66e:	6863      	ldr	r3, [r4, #4]
 801b670:	4628      	mov	r0, r5
 801b672:	4631      	mov	r1, r6
 801b674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b676:	4798      	blx	r3
 801b678:	4620      	mov	r0, r4
 801b67a:	bd70      	pop	{r4, r5, r6, pc}
 801b67c:	0802d330 	.word	0x0802d330
 801b680:	0802c984 	.word	0x0802c984
 801b684:	240284de 	.word	0x240284de
 801b688:	240284dc 	.word	0x240284dc

0801b68c <_ZN8touchgfx6Screen4drawEv>:
 801b68c:	4b09      	ldr	r3, [pc, #36]	@ (801b6b4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b68e:	b507      	push	{r0, r1, r2, lr}
 801b690:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b694:	2100      	movs	r1, #0
 801b696:	4b08      	ldr	r3, [pc, #32]	@ (801b6b8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b698:	9100      	str	r1, [sp, #0]
 801b69a:	4669      	mov	r1, sp
 801b69c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b6a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b6a8:	6803      	ldr	r3, [r0, #0]
 801b6aa:	689b      	ldr	r3, [r3, #8]
 801b6ac:	4798      	blx	r3
 801b6ae:	b003      	add	sp, #12
 801b6b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6b4:	240284dc 	.word	0x240284dc
 801b6b8:	240284de 	.word	0x240284de

0801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b6c4:	b089      	sub	sp, #36	@ 0x24
 801b6c6:	4680      	mov	r8, r0
 801b6c8:	460c      	mov	r4, r1
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	4615      	mov	r5, r2
 801b6ce:	dd0e      	ble.n	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b6d0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	dd0a      	ble.n	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b6d8:	4628      	mov	r0, r5
 801b6da:	f7ff ff5b 	bl	801b594 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b6de:	4621      	mov	r1, r4
 801b6e0:	f7fd ff99 	bl	8019616 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b6e4:	69eb      	ldr	r3, [r5, #28]
 801b6e6:	b928      	cbnz	r0, 801b6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b6e8:	461d      	mov	r5, r3
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d1f4      	bne.n	801b6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b6ee:	b009      	add	sp, #36	@ 0x24
 801b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6f4:	ae04      	add	r6, sp, #16
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	f000 80b5 	beq.w	801b866 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b6fc:	682b      	ldr	r3, [r5, #0]
 801b6fe:	4629      	mov	r1, r5
 801b700:	a802      	add	r0, sp, #8
 801b702:	68db      	ldr	r3, [r3, #12]
 801b704:	4798      	blx	r3
 801b706:	4628      	mov	r0, r5
 801b708:	f7ff ff60 	bl	801b5cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b70c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b710:	4407      	add	r7, r0
 801b712:	4628      	mov	r0, r5
 801b714:	f7ff ff6e 	bl	801b5f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b718:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b71c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b720:	b23f      	sxth	r7, r7
 801b722:	4418      	add	r0, r3
 801b724:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b728:	4621      	mov	r1, r4
 801b72a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b72e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b732:	4630      	mov	r0, r6
 801b734:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b738:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b73c:	f7f6 fb98 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801b740:	4628      	mov	r0, r5
 801b742:	f7ff ff27 	bl	801b594 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b746:	ab06      	add	r3, sp, #24
 801b748:	4602      	mov	r2, r0
 801b74a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b74e:	e883 0003 	stmia.w	r3, {r0, r1}
 801b752:	4611      	mov	r1, r2
 801b754:	4618      	mov	r0, r3
 801b756:	f7f6 fb8b 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801b75a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b75e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b762:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b766:	4299      	cmp	r1, r3
 801b768:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b76c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b770:	d10b      	bne.n	801b78a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b772:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b776:	4552      	cmp	r2, sl
 801b778:	d107      	bne.n	801b78a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b77a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b77e:	455a      	cmp	r2, fp
 801b780:	d103      	bne.n	801b78a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b782:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b786:	454a      	cmp	r2, r9
 801b788:	d06d      	beq.n	801b866 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b78a:	f1bb 0f00 	cmp.w	fp, #0
 801b78e:	dd65      	ble.n	801b85c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b790:	f1b9 0f00 	cmp.w	r9, #0
 801b794:	dd62      	ble.n	801b85c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b796:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b79a:	fa1f f08a 	uxth.w	r0, sl
 801b79e:	4552      	cmp	r2, sl
 801b7a0:	9000      	str	r0, [sp, #0]
 801b7a2:	da12      	bge.n	801b7ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b7a4:	9301      	str	r3, [sp, #4]
 801b7a6:	9b00      	ldr	r3, [sp, #0]
 801b7a8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b7ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b7b0:	1a9a      	subs	r2, r3, r2
 801b7b2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b7b6:	4631      	mov	r1, r6
 801b7b8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b7bc:	4640      	mov	r0, r8
 801b7be:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b7c2:	69ea      	ldr	r2, [r5, #28]
 801b7c4:	f7ff ff7a 	bl	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b7c8:	9b01      	ldr	r3, [sp, #4]
 801b7ca:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b7ce:	b29f      	uxth	r7, r3
 801b7d0:	429a      	cmp	r2, r3
 801b7d2:	da0d      	bge.n	801b7f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b7d4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b7d8:	1aba      	subs	r2, r7, r2
 801b7da:	f8ad a012 	strh.w	sl, [sp, #18]
 801b7de:	4631      	mov	r1, r6
 801b7e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b7e4:	4640      	mov	r0, r8
 801b7e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b7ea:	69ea      	ldr	r2, [r5, #28]
 801b7ec:	f7ff ff66 	bl	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b7f0:	8822      	ldrh	r2, [r4, #0]
 801b7f2:	445f      	add	r7, fp
 801b7f4:	88a3      	ldrh	r3, [r4, #4]
 801b7f6:	b2bf      	uxth	r7, r7
 801b7f8:	4413      	add	r3, r2
 801b7fa:	b23a      	sxth	r2, r7
 801b7fc:	b29b      	uxth	r3, r3
 801b7fe:	b219      	sxth	r1, r3
 801b800:	4291      	cmp	r1, r2
 801b802:	dd0d      	ble.n	801b820 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b804:	1bdb      	subs	r3, r3, r7
 801b806:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b80a:	f8ad a012 	strh.w	sl, [sp, #18]
 801b80e:	4631      	mov	r1, r6
 801b810:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b814:	4640      	mov	r0, r8
 801b816:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b81a:	69ea      	ldr	r2, [r5, #28]
 801b81c:	f7ff ff4e 	bl	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b820:	88e2      	ldrh	r2, [r4, #6]
 801b822:	8863      	ldrh	r3, [r4, #2]
 801b824:	4413      	add	r3, r2
 801b826:	9a00      	ldr	r2, [sp, #0]
 801b828:	444a      	add	r2, r9
 801b82a:	b29b      	uxth	r3, r3
 801b82c:	fa1f f982 	uxth.w	r9, r2
 801b830:	b219      	sxth	r1, r3
 801b832:	fa0f f289 	sxth.w	r2, r9
 801b836:	428a      	cmp	r2, r1
 801b838:	da15      	bge.n	801b866 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b83a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b83e:	eba3 0309 	sub.w	r3, r3, r9
 801b842:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b846:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b84a:	4631      	mov	r1, r6
 801b84c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b850:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b854:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b858:	69ea      	ldr	r2, [r5, #28]
 801b85a:	e001      	b.n	801b860 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b85c:	69ea      	ldr	r2, [r5, #28]
 801b85e:	4621      	mov	r1, r4
 801b860:	4640      	mov	r0, r8
 801b862:	f7ff ff2b 	bl	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b866:	4628      	mov	r0, r5
 801b868:	f7ff fe94 	bl	801b594 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b86c:	6861      	ldr	r1, [r4, #4]
 801b86e:	4602      	mov	r2, r0
 801b870:	4633      	mov	r3, r6
 801b872:	6820      	ldr	r0, [r4, #0]
 801b874:	c303      	stmia	r3!, {r0, r1}
 801b876:	4611      	mov	r1, r2
 801b878:	4630      	mov	r0, r6
 801b87a:	f7f6 faf9 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801b87e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b882:	2b00      	cmp	r3, #0
 801b884:	f77f af33 	ble.w	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b888:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	f77f af2e 	ble.w	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b892:	4628      	mov	r0, r5
 801b894:	f7ff fe9a 	bl	801b5cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b898:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b89c:	1a18      	subs	r0, r3, r0
 801b89e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b8a2:	4628      	mov	r0, r5
 801b8a4:	f7ff fea6 	bl	801b5f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b8a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b8ac:	4631      	mov	r1, r6
 801b8ae:	1a18      	subs	r0, r3, r0
 801b8b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b8b4:	4628      	mov	r0, r5
 801b8b6:	682b      	ldr	r3, [r5, #0]
 801b8b8:	689b      	ldr	r3, [r3, #8]
 801b8ba:	4798      	blx	r3
 801b8bc:	e717      	b.n	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b8be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b8be:	b570      	push	{r4, r5, r6, lr}
 801b8c0:	1d06      	adds	r6, r0, #4
 801b8c2:	b086      	sub	sp, #24
 801b8c4:	460c      	mov	r4, r1
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	4631      	mov	r1, r6
 801b8ca:	4605      	mov	r5, r0
 801b8cc:	a802      	add	r0, sp, #8
 801b8ce:	9301      	str	r3, [sp, #4]
 801b8d0:	f7ff f898 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b8d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b8d8:	8822      	ldrh	r2, [r4, #0]
 801b8da:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b8de:	1ad2      	subs	r2, r2, r3
 801b8e0:	8863      	ldrh	r3, [r4, #2]
 801b8e2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b8e6:	1a5b      	subs	r3, r3, r1
 801b8e8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b8ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b8f0:	aa01      	add	r2, sp, #4
 801b8f2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b8f6:	4630      	mov	r0, r6
 801b8f8:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b8fc:	a904      	add	r1, sp, #16
 801b8fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b902:	f7f6 fb8d 	bl	8012020 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b906:	9a01      	ldr	r2, [sp, #4]
 801b908:	b11a      	cbz	r2, 801b912 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801b90a:	4621      	mov	r1, r4
 801b90c:	4628      	mov	r0, r5
 801b90e:	f7ff fed5 	bl	801b6bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b912:	b006      	add	sp, #24
 801b914:	bd70      	pop	{r4, r5, r6, pc}

0801b916 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b916:	4602      	mov	r2, r0
 801b918:	b530      	push	{r4, r5, lr}
 801b91a:	4604      	mov	r4, r0
 801b91c:	b085      	sub	sp, #20
 801b91e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b922:	460d      	mov	r5, r1
 801b924:	466b      	mov	r3, sp
 801b926:	6851      	ldr	r1, [r2, #4]
 801b928:	c303      	stmia	r3!, {r0, r1}
 801b92a:	4629      	mov	r1, r5
 801b92c:	4668      	mov	r0, sp
 801b92e:	f7f6 fa9f 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 801b932:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801b936:	b12b      	cbz	r3, 801b944 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801b938:	4669      	mov	r1, sp
 801b93a:	4620      	mov	r0, r4
 801b93c:	f7ff ffbf 	bl	801b8be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b940:	b005      	add	sp, #20
 801b942:	bd30      	pop	{r4, r5, pc}
 801b944:	3404      	adds	r4, #4
 801b946:	a802      	add	r0, sp, #8
 801b948:	4621      	mov	r1, r4
 801b94a:	f7ff f85b 	bl	801aa04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b94e:	f8bd 3000 	ldrh.w	r3, [sp]
 801b952:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b956:	4669      	mov	r1, sp
 801b958:	4620      	mov	r0, r4
 801b95a:	1a9b      	subs	r3, r3, r2
 801b95c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b960:	f8ad 3000 	strh.w	r3, [sp]
 801b964:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b968:	1a9b      	subs	r3, r3, r2
 801b96a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b96e:	f7f6 fb1e 	bl	8011fae <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b972:	e7e5      	b.n	801b940 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801b974 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b974:	460b      	mov	r3, r1
 801b976:	680a      	ldr	r2, [r1, #0]
 801b978:	1d01      	adds	r1, r0, #4
 801b97a:	6992      	ldr	r2, [r2, #24]
 801b97c:	4618      	mov	r0, r3
 801b97e:	4710      	bx	r2

0801b980 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801b980:	4298      	cmp	r0, r3
 801b982:	d200      	bcs.n	801b986 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801b984:	b913      	cbnz	r3, 801b98c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801b986:	440a      	add	r2, r1
 801b988:	b210      	sxth	r0, r2
 801b98a:	4770      	bx	lr
 801b98c:	ee07 0a90 	vmov	s15, r0
 801b990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b994:	ee07 3a90 	vmov	s15, r3
 801b998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b99c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b9a0:	ee07 2a90 	vmov	s15, r2
 801b9a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b9a8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801b9ac:	ee07 1a90 	vmov	s15, r1
 801b9b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b9b4:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b9b8:	ee67 5a07 	vmul.f32	s11, s14, s14
 801b9bc:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b9c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801b9c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801b9c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9d0:	bfcc      	ite	gt
 801b9d2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801b9d6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801b9da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b9de:	ee17 3a90 	vmov	r3, s15
 801b9e2:	b218      	sxth	r0, r3
 801b9e4:	4770      	bx	lr

0801b9e6 <_ZN8touchgfx12TextProviderC1Ev>:
 801b9e6:	b538      	push	{r3, r4, r5, lr}
 801b9e8:	2500      	movs	r5, #0
 801b9ea:	2302      	movs	r3, #2
 801b9ec:	4604      	mov	r4, r0
 801b9ee:	220e      	movs	r2, #14
 801b9f0:	7403      	strb	r3, [r0, #16]
 801b9f2:	4629      	mov	r1, r5
 801b9f4:	6145      	str	r5, [r0, #20]
 801b9f6:	7605      	strb	r5, [r0, #24]
 801b9f8:	83c5      	strh	r5, [r0, #30]
 801b9fa:	8405      	strh	r5, [r0, #32]
 801b9fc:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801b9fe:	8705      	strh	r5, [r0, #56]	@ 0x38
 801ba00:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801ba02:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801ba06:	e9c0 5500 	strd	r5, r5, [r0]
 801ba0a:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801ba0e:	304c      	adds	r0, #76	@ 0x4c
 801ba10:	f00d f872 	bl	8028af8 <memset>
 801ba14:	2301      	movs	r3, #1
 801ba16:	4620      	mov	r0, r4
 801ba18:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801ba1c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801ba20:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801ba24:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801ba28:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801ba2c:	f7ec fcb2 	bl	8008394 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ba30:	4620      	mov	r0, r4
 801ba32:	bd38      	pop	{r3, r4, r5, pc}

0801ba34 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801ba34:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801ba36:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ba3a:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801ba3c:	fab0 f080 	clz	r0, r0
 801ba40:	0940      	lsrs	r0, r0, #5
 801ba42:	4770      	bx	lr

0801ba44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ba44:	b530      	push	{r4, r5, lr}
 801ba46:	2500      	movs	r5, #0
 801ba48:	2401      	movs	r4, #1
 801ba4a:	6843      	ldr	r3, [r0, #4]
 801ba4c:	b913      	cbnz	r3, 801ba54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ba4e:	6803      	ldr	r3, [r0, #0]
 801ba50:	b313      	cbz	r3, 801ba98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ba52:	6043      	str	r3, [r0, #4]
 801ba54:	7e03      	ldrb	r3, [r0, #24]
 801ba56:	b143      	cbz	r3, 801ba6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ba58:	6943      	ldr	r3, [r0, #20]
 801ba5a:	b12b      	cbz	r3, 801ba68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ba5c:	881a      	ldrh	r2, [r3, #0]
 801ba5e:	b11a      	cbz	r2, 801ba68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ba60:	1c9a      	adds	r2, r3, #2
 801ba62:	6142      	str	r2, [r0, #20]
 801ba64:	8818      	ldrh	r0, [r3, #0]
 801ba66:	bd30      	pop	{r4, r5, pc}
 801ba68:	7605      	strb	r5, [r0, #24]
 801ba6a:	6843      	ldr	r3, [r0, #4]
 801ba6c:	8819      	ldrh	r1, [r3, #0]
 801ba6e:	b199      	cbz	r1, 801ba98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ba70:	1c9a      	adds	r2, r3, #2
 801ba72:	2902      	cmp	r1, #2
 801ba74:	6042      	str	r2, [r0, #4]
 801ba76:	d1f5      	bne.n	801ba64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ba78:	7c03      	ldrb	r3, [r0, #16]
 801ba7a:	2b01      	cmp	r3, #1
 801ba7c:	d8e5      	bhi.n	801ba4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba7e:	1c5a      	adds	r2, r3, #1
 801ba80:	3302      	adds	r3, #2
 801ba82:	7402      	strb	r2, [r0, #16]
 801ba84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ba88:	6143      	str	r3, [r0, #20]
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	d0dd      	beq.n	801ba4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba8e:	881b      	ldrh	r3, [r3, #0]
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d0da      	beq.n	801ba4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba94:	7604      	strb	r4, [r0, #24]
 801ba96:	e7d8      	b.n	801ba4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba98:	2000      	movs	r0, #0
 801ba9a:	e7e4      	b.n	801ba66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ba9c:	6001      	str	r1, [r0, #0]
 801ba9e:	2100      	movs	r1, #0
 801baa0:	b430      	push	{r4, r5}
 801baa2:	6041      	str	r1, [r0, #4]
 801baa4:	6815      	ldr	r5, [r2, #0]
 801baa6:	6085      	str	r5, [r0, #8]
 801baa8:	6852      	ldr	r2, [r2, #4]
 801baaa:	6443      	str	r3, [r0, #68]	@ 0x44
 801baac:	9b02      	ldr	r3, [sp, #8]
 801baae:	60c2      	str	r2, [r0, #12]
 801bab0:	7401      	strb	r1, [r0, #16]
 801bab2:	6141      	str	r1, [r0, #20]
 801bab4:	7601      	strb	r1, [r0, #24]
 801bab6:	8701      	strh	r1, [r0, #56]	@ 0x38
 801bab8:	8401      	strh	r1, [r0, #32]
 801baba:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801babe:	6483      	str	r3, [r0, #72]	@ 0x48
 801bac0:	bc30      	pop	{r4, r5}
 801bac2:	f7ec bc67 	b.w	8008394 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bac6 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801bac6:	b408      	push	{r3}
 801bac8:	b510      	push	{r4, lr}
 801baca:	b085      	sub	sp, #20
 801bacc:	ac07      	add	r4, sp, #28
 801bace:	f854 3b04 	ldr.w	r3, [r4], #4
 801bad2:	9300      	str	r3, [sp, #0]
 801bad4:	4613      	mov	r3, r2
 801bad6:	4622      	mov	r2, r4
 801bad8:	9403      	str	r4, [sp, #12]
 801bada:	f7ff ffdf 	bl	801ba9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bade:	b005      	add	sp, #20
 801bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bae4:	b001      	add	sp, #4
 801bae6:	4770      	bx	lr

0801bae8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baea:	4605      	mov	r5, r0
 801baec:	4608      	mov	r0, r1
 801baee:	b1f1      	cbz	r1, 801bb2e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801baf0:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801baf4:	460b      	mov	r3, r1
 801baf6:	f101 0708 	add.w	r7, r1, #8
 801bafa:	4622      	mov	r2, r4
 801bafc:	6818      	ldr	r0, [r3, #0]
 801bafe:	3308      	adds	r3, #8
 801bb00:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bb04:	4626      	mov	r6, r4
 801bb06:	42bb      	cmp	r3, r7
 801bb08:	c603      	stmia	r6!, {r0, r1}
 801bb0a:	4634      	mov	r4, r6
 801bb0c:	d1f6      	bne.n	801bafc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bb0e:	6818      	ldr	r0, [r3, #0]
 801bb10:	6030      	str	r0, [r6, #0]
 801bb12:	4610      	mov	r0, r2
 801bb14:	889b      	ldrh	r3, [r3, #4]
 801bb16:	80b3      	strh	r3, [r6, #4]
 801bb18:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801bb1c:	015b      	lsls	r3, r3, #5
 801bb1e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801bb22:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801bb26:	430b      	orrs	r3, r1
 801bb28:	425b      	negs	r3, r3
 801bb2a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801bb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bb30 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bb30:	b538      	push	{r3, r4, r5, lr}
 801bb32:	460c      	mov	r4, r1
 801bb34:	6811      	ldr	r1, [r2, #0]
 801bb36:	4610      	mov	r0, r2
 801bb38:	68cd      	ldr	r5, [r1, #12]
 801bb3a:	4619      	mov	r1, r3
 801bb3c:	47a8      	blx	r5
 801bb3e:	2800      	cmp	r0, #0
 801bb40:	bf08      	it	eq
 801bb42:	4620      	moveq	r0, r4
 801bb44:	bd38      	pop	{r3, r4, r5, pc}
	...

0801bb48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb4c:	468c      	mov	ip, r1
 801bb4e:	4604      	mov	r4, r0
 801bb50:	4615      	mov	r5, r2
 801bb52:	b942      	cbnz	r2, 801bb66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801bb54:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801bb58:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801bb5c:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801bb60:	4628      	mov	r0, r5
 801bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb66:	7b50      	ldrb	r0, [r2, #13]
 801bb68:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801bb6c:	8893      	ldrh	r3, [r2, #4]
 801bb6e:	0106      	lsls	r6, r0, #4
 801bb70:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bb74:	79ee      	ldrb	r6, [r5, #7]
 801bb76:	4316      	orrs	r6, r2
 801bb78:	185a      	adds	r2, r3, r1
 801bb7a:	b291      	uxth	r1, r2
 801bb7c:	b2b7      	uxth	r7, r6
 801bb7e:	291d      	cmp	r1, #29
 801bb80:	d87f      	bhi.n	801bc82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801bb82:	2201      	movs	r2, #1
 801bb84:	10f6      	asrs	r6, r6, #3
 801bb86:	408a      	lsls	r2, r1
 801bb88:	4974      	ldr	r1, [pc, #464]	@ (801bd5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801bb8a:	420a      	tst	r2, r1
 801bb8c:	d12e      	bne.n	801bbec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801bb8e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801bb92:	d076      	beq.n	801bc82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801bb94:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801bb98:	462b      	mov	r3, r5
 801bb9a:	f105 0e08 	add.w	lr, r5, #8
 801bb9e:	4615      	mov	r5, r2
 801bba0:	6818      	ldr	r0, [r3, #0]
 801bba2:	3308      	adds	r3, #8
 801bba4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bba8:	4694      	mov	ip, r2
 801bbaa:	4573      	cmp	r3, lr
 801bbac:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bbb0:	4662      	mov	r2, ip
 801bbb2:	d1f5      	bne.n	801bba0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801bbb4:	6818      	ldr	r0, [r3, #0]
 801bbb6:	f8cc 0000 	str.w	r0, [ip]
 801bbba:	889b      	ldrh	r3, [r3, #4]
 801bbbc:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bbc0:	b2b3      	uxth	r3, r6
 801bbc2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801bbc6:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801bbca:	1aca      	subs	r2, r1, r3
 801bbcc:	1bcf      	subs	r7, r1, r7
 801bbce:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801bbd2:	b292      	uxth	r2, r2
 801bbd4:	1afb      	subs	r3, r7, r3
 801bbd6:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801bbda:	10d2      	asrs	r2, r2, #3
 801bbdc:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801bbe0:	4302      	orrs	r2, r0
 801bbe2:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801bbe6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801bbea:	e7b9      	b.n	801bb60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801bbec:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801bbf0:	462b      	mov	r3, r5
 801bbf2:	f105 0808 	add.w	r8, r5, #8
 801bbf6:	4615      	mov	r5, r2
 801bbf8:	6818      	ldr	r0, [r3, #0]
 801bbfa:	3308      	adds	r3, #8
 801bbfc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bc00:	4696      	mov	lr, r2
 801bc02:	4543      	cmp	r3, r8
 801bc04:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bc08:	4672      	mov	r2, lr
 801bc0a:	d1f5      	bne.n	801bbf8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801bc0c:	6818      	ldr	r0, [r3, #0]
 801bc0e:	f8ce 0000 	str.w	r0, [lr]
 801bc12:	889b      	ldrh	r3, [r3, #4]
 801bc14:	f8ae 3004 	strh.w	r3, [lr, #4]
 801bc18:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801bc1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bc1e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801bc20:	f640 6333 	movw	r3, #3635	@ 0xe33
 801bc24:	4299      	cmp	r1, r3
 801bc26:	d111      	bne.n	801bc4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801bc28:	f8dc 3000 	ldr.w	r3, [ip]
 801bc2c:	4660      	mov	r0, ip
 801bc2e:	68db      	ldr	r3, [r3, #12]
 801bc30:	4798      	blx	r3
 801bc32:	7b41      	ldrb	r1, [r0, #13]
 801bc34:	00cb      	lsls	r3, r1, #3
 801bc36:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bc3a:	7a03      	ldrb	r3, [r0, #8]
 801bc3c:	4313      	orrs	r3, r2
 801bc3e:	064a      	lsls	r2, r1, #25
 801bc40:	bf44      	itt	mi
 801bc42:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bc46:	b21b      	sxthmi	r3, r3
 801bc48:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bc4c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801bc50:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801bc54:	443b      	add	r3, r7
 801bc56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801bc5a:	4433      	add	r3, r6
 801bc5c:	b29b      	uxth	r3, r3
 801bc5e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bc62:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801bc66:	10db      	asrs	r3, r3, #3
 801bc68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801bc6c:	4313      	orrs	r3, r2
 801bc6e:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801bc72:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801bc76:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801bc7a:	1a9b      	subs	r3, r3, r2
 801bc7c:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801bc80:	e76e      	b.n	801bb60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801bc82:	f023 0204 	bic.w	r2, r3, #4
 801bc86:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801bc8a:	428a      	cmp	r2, r1
 801bc8c:	d003      	beq.n	801bc96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801bc8e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801bc92:	4293      	cmp	r3, r2
 801bc94:	d120      	bne.n	801bcd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801bc96:	3b01      	subs	r3, #1
 801bc98:	4662      	mov	r2, ip
 801bc9a:	4629      	mov	r1, r5
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	b29b      	uxth	r3, r3
 801bca0:	f7ff ff46 	bl	801bb30 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bca4:	7b41      	ldrb	r1, [r0, #13]
 801bca6:	00cb      	lsls	r3, r1, #3
 801bca8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bcac:	7a03      	ldrb	r3, [r0, #8]
 801bcae:	0648      	lsls	r0, r1, #25
 801bcb0:	ea43 0302 	orr.w	r3, r3, r2
 801bcb4:	bf44      	itt	mi
 801bcb6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bcba:	b21b      	sxthmi	r3, r3
 801bcbc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bcc0:	7b6b      	ldrb	r3, [r5, #13]
 801bcc2:	7aaa      	ldrb	r2, [r5, #10]
 801bcc4:	005b      	lsls	r3, r3, #1
 801bcc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bcca:	4313      	orrs	r3, r2
 801bccc:	115a      	asrs	r2, r3, #5
 801bcce:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bcd2:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801bcd6:	e032      	b.n	801bd3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801bcd8:	00c2      	lsls	r2, r0, #3
 801bcda:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801bcde:	7a2a      	ldrb	r2, [r5, #8]
 801bce0:	430a      	orrs	r2, r1
 801bce2:	0641      	lsls	r1, r0, #25
 801bce4:	f640 6109 	movw	r1, #3593	@ 0xe09
 801bce8:	bf44      	itt	mi
 801bcea:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801bcee:	b212      	sxthmi	r2, r2
 801bcf0:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801bcf4:	f023 0210 	bic.w	r2, r3, #16
 801bcf8:	428a      	cmp	r2, r1
 801bcfa:	d003      	beq.n	801bd04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801bcfc:	f640 6213 	movw	r2, #3603	@ 0xe13
 801bd00:	4293      	cmp	r3, r2
 801bd02:	d129      	bne.n	801bd58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801bd04:	7b6e      	ldrb	r6, [r5, #13]
 801bd06:	4629      	mov	r1, r5
 801bd08:	4620      	mov	r0, r4
 801bd0a:	0076      	lsls	r6, r6, #1
 801bd0c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801bd10:	7aae      	ldrb	r6, [r5, #10]
 801bd12:	4316      	orrs	r6, r2
 801bd14:	f640 6213 	movw	r2, #3603	@ 0xe13
 801bd18:	4293      	cmp	r3, r2
 801bd1a:	4662      	mov	r2, ip
 801bd1c:	bf16      	itet	ne
 801bd1e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bd22:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801bd26:	b29b      	uxthne	r3, r3
 801bd28:	f7ff ff02 	bl	801bb30 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bd2c:	7b43      	ldrb	r3, [r0, #13]
 801bd2e:	7a82      	ldrb	r2, [r0, #10]
 801bd30:	005b      	lsls	r3, r3, #1
 801bd32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bd36:	4313      	orrs	r3, r2
 801bd38:	1af6      	subs	r6, r6, r3
 801bd3a:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801bd3e:	7b69      	ldrb	r1, [r5, #13]
 801bd40:	00cb      	lsls	r3, r1, #3
 801bd42:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bd46:	7a2b      	ldrb	r3, [r5, #8]
 801bd48:	4313      	orrs	r3, r2
 801bd4a:	064a      	lsls	r2, r1, #25
 801bd4c:	bf44      	itt	mi
 801bd4e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bd52:	b21b      	sxthmi	r3, r3
 801bd54:	1bdb      	subs	r3, r3, r7
 801bd56:	e746      	b.n	801bbe6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801bd58:	2300      	movs	r3, #0
 801bd5a:	e7ba      	b.n	801bcd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801bd5c:	3fc00079 	.word	0x3fc00079

0801bd60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bd60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd64:	4604      	mov	r4, r0
 801bd66:	b942      	cbnz	r2, 801bd7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bd68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801bd6c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801bd70:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801bd74:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801bd78:	e047      	b.n	801be0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bd7a:	7b51      	ldrb	r1, [r2, #13]
 801bd7c:	8893      	ldrh	r3, [r2, #4]
 801bd7e:	010d      	lsls	r5, r1, #4
 801bd80:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801bd84:	79d5      	ldrb	r5, [r2, #7]
 801bd86:	4305      	orrs	r5, r0
 801bd88:	2d04      	cmp	r5, #4
 801bd8a:	bfcc      	ite	gt
 801bd8c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bd90:	f04f 0e01 	movle.w	lr, #1
 801bd94:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801bd98:	f200 80ab 	bhi.w	801bef2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bd9c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801bda0:	4283      	cmp	r3, r0
 801bda2:	d216      	bcs.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bda4:	f240 605b 	movw	r0, #1627	@ 0x65b
 801bda8:	4283      	cmp	r3, r0
 801bdaa:	d859      	bhi.n	801be60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bdac:	f240 6057 	movw	r0, #1623	@ 0x657
 801bdb0:	4283      	cmp	r3, r0
 801bdb2:	d20e      	bcs.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bdb4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801bdb8:	d24a      	bcs.n	801be50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bdba:	f240 604e 	movw	r0, #1614	@ 0x64e
 801bdbe:	4283      	cmp	r3, r0
 801bdc0:	d207      	bcs.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bdc2:	f240 601a 	movw	r0, #1562	@ 0x61a
 801bdc6:	4283      	cmp	r3, r0
 801bdc8:	d02a      	beq.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdca:	d821      	bhi.n	801be10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bdcc:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801bdd0:	d35b      	bcc.n	801be8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bdd2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801bdd6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bdda:	f040 80d0 	bne.w	801bf7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bdde:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801bde2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bde6:	f040 80ca 	bne.w	801bf7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bdea:	00cb      	lsls	r3, r1, #3
 801bdec:	0649      	lsls	r1, r1, #25
 801bdee:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801bdf2:	7a13      	ldrb	r3, [r2, #8]
 801bdf4:	ea43 0300 	orr.w	r3, r3, r0
 801bdf8:	bf44      	itt	mi
 801bdfa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801bdfe:	b21b      	sxthmi	r3, r3
 801be00:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801be04:	1b5d      	subs	r5, r3, r5
 801be06:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801be0a:	4610      	mov	r0, r2
 801be0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be10:	f240 604b 	movw	r0, #1611	@ 0x64b
 801be14:	4283      	cmp	r3, r0
 801be16:	d338      	bcc.n	801be8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801be18:	f240 604c 	movw	r0, #1612	@ 0x64c
 801be1c:	4283      	cmp	r3, r0
 801be1e:	d9d8      	bls.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be20:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801be24:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801be28:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801be2c:	f040 80f3 	bne.w	801c016 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801be30:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801be34:	f040 80ef 	bne.w	801c016 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801be38:	00cb      	lsls	r3, r1, #3
 801be3a:	064e      	lsls	r6, r1, #25
 801be3c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801be40:	7a13      	ldrb	r3, [r2, #8]
 801be42:	ea43 0300 	orr.w	r3, r3, r0
 801be46:	bf44      	itt	mi
 801be48:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801be4c:	b21b      	sxthmi	r3, r3
 801be4e:	e7d9      	b.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801be50:	f240 6054 	movw	r0, #1620	@ 0x654
 801be54:	4283      	cmp	r3, r0
 801be56:	d8e3      	bhi.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be58:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801be5c:	d9e0      	bls.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be5e:	e7b8      	b.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be60:	f240 6074 	movw	r0, #1652	@ 0x674
 801be64:	4283      	cmp	r3, r0
 801be66:	d0b4      	beq.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be68:	d82d      	bhi.n	801bec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801be6a:	f240 605e 	movw	r0, #1630	@ 0x65e
 801be6e:	4283      	cmp	r3, r0
 801be70:	d804      	bhi.n	801be7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801be72:	f240 605d 	movw	r0, #1629	@ 0x65d
 801be76:	4283      	cmp	r3, r0
 801be78:	d3d2      	bcc.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be7a:	e7aa      	b.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be7c:	f240 605f 	movw	r0, #1631	@ 0x65f
 801be80:	4283      	cmp	r3, r0
 801be82:	d0cd      	beq.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be84:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801be88:	d0a3      	beq.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be8a:	00cb      	lsls	r3, r1, #3
 801be8c:	0649      	lsls	r1, r1, #25
 801be8e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801be92:	7a13      	ldrb	r3, [r2, #8]
 801be94:	ea43 0300 	orr.w	r3, r3, r0
 801be98:	bf44      	itt	mi
 801be9a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801be9e:	b21b      	sxthmi	r3, r3
 801bea0:	1b5d      	subs	r5, r3, r5
 801bea2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801bea6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801beaa:	7b53      	ldrb	r3, [r2, #13]
 801beac:	015b      	lsls	r3, r3, #5
 801beae:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801beb2:	7993      	ldrb	r3, [r2, #6]
 801beb4:	430b      	orrs	r3, r1
 801beb6:	2105      	movs	r1, #5
 801beb8:	005b      	lsls	r3, r3, #1
 801beba:	fb93 f3f1 	sdiv	r3, r3, r1
 801bebe:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801bec2:	440b      	add	r3, r1
 801bec4:	e756      	b.n	801bd74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801bec6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801beca:	4283      	cmp	r3, r0
 801becc:	d809      	bhi.n	801bee2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801bece:	f240 60df 	movw	r0, #1759	@ 0x6df
 801bed2:	4283      	cmp	r3, r0
 801bed4:	f4bf af7d 	bcs.w	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bed8:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801bedc:	2b05      	cmp	r3, #5
 801bede:	d8d4      	bhi.n	801be8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bee0:	e777      	b.n	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bee2:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801bee6:	4283      	cmp	r3, r0
 801bee8:	d09a      	beq.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801beea:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801beee:	4283      	cmp	r3, r0
 801bef0:	e7ca      	b.n	801be88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bef2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801bef6:	d22b      	bcs.n	801bf50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801bef8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801befc:	4283      	cmp	r3, r0
 801befe:	d28f      	bcs.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf00:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801bf04:	4283      	cmp	r3, r0
 801bf06:	d816      	bhi.n	801bf36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801bf08:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801bf0c:	4283      	cmp	r3, r0
 801bf0e:	f4bf af60 	bcs.w	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf12:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801bf16:	4283      	cmp	r3, r0
 801bf18:	d80a      	bhi.n	801bf30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801bf1a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801bf1e:	4283      	cmp	r3, r0
 801bf20:	f4bf af57 	bcs.w	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf24:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801bf28:	4283      	cmp	r3, r0
 801bf2a:	f43f af79 	beq.w	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf2e:	e7ac      	b.n	801be8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bf30:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801bf34:	e7f8      	b.n	801bf28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801bf36:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801bf3a:	4283      	cmp	r3, r0
 801bf3c:	d802      	bhi.n	801bf44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801bf3e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801bf42:	e798      	b.n	801be76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801bf44:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801bf48:	4283      	cmp	r3, r0
 801bf4a:	f47f af42 	bne.w	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf4e:	e767      	b.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf50:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801bf54:	4283      	cmp	r3, r0
 801bf56:	f43f af63 	beq.w	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf5a:	d802      	bhi.n	801bf62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801bf5c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801bf60:	e7f2      	b.n	801bf48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801bf62:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801bf66:	4283      	cmp	r3, r0
 801bf68:	d805      	bhi.n	801bf76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801bf6a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801bf6e:	4283      	cmp	r3, r0
 801bf70:	f4ff af2f 	bcc.w	801bdd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf74:	e754      	b.n	801be20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf76:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801bf7a:	4283      	cmp	r3, r0
 801bf7c:	e7af      	b.n	801bede <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801bf7e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801bf82:	4617      	mov	r7, r2
 801bf84:	f102 0808 	add.w	r8, r2, #8
 801bf88:	4666      	mov	r6, ip
 801bf8a:	6838      	ldr	r0, [r7, #0]
 801bf8c:	3708      	adds	r7, #8
 801bf8e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801bf92:	46e6      	mov	lr, ip
 801bf94:	4547      	cmp	r7, r8
 801bf96:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bf9a:	46f4      	mov	ip, lr
 801bf9c:	d1f5      	bne.n	801bf8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801bf9e:	6838      	ldr	r0, [r7, #0]
 801bfa0:	f8ce 0000 	str.w	r0, [lr]
 801bfa4:	88b9      	ldrh	r1, [r7, #4]
 801bfa6:	f8ae 1004 	strh.w	r1, [lr, #4]
 801bfaa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801bfae:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801bfb2:	d009      	beq.n	801bfc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801bfb4:	7b51      	ldrb	r1, [r2, #13]
 801bfb6:	7992      	ldrb	r2, [r2, #6]
 801bfb8:	0149      	lsls	r1, r1, #5
 801bfba:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801bfbe:	4311      	orrs	r1, r2
 801bfc0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bfc4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801bfc8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801bfcc:	b2ad      	uxth	r5, r5
 801bfce:	d00d      	beq.n	801bfec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801bfd0:	442b      	add	r3, r5
 801bfd2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801bfd6:	b29b      	uxth	r3, r3
 801bfd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801bfdc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801bfe0:	10db      	asrs	r3, r3, #3
 801bfe2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801bfe6:	4313      	orrs	r3, r2
 801bfe8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801bfec:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801bff0:	00cb      	lsls	r3, r1, #3
 801bff2:	064f      	lsls	r7, r1, #25
 801bff4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801bff8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801bffc:	ea43 0302 	orr.w	r3, r3, r2
 801c000:	bf44      	itt	mi
 801c002:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c006:	b21b      	sxthmi	r3, r3
 801c008:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c00c:	1b5b      	subs	r3, r3, r5
 801c00e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801c012:	4632      	mov	r2, r6
 801c014:	e6f9      	b.n	801be0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c016:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c01a:	4617      	mov	r7, r2
 801c01c:	f102 0908 	add.w	r9, r2, #8
 801c020:	4666      	mov	r6, ip
 801c022:	6838      	ldr	r0, [r7, #0]
 801c024:	3708      	adds	r7, #8
 801c026:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c02a:	46e0      	mov	r8, ip
 801c02c:	454f      	cmp	r7, r9
 801c02e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c032:	46c4      	mov	ip, r8
 801c034:	d1f5      	bne.n	801c022 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801c036:	6838      	ldr	r0, [r7, #0]
 801c038:	f8c8 0000 	str.w	r0, [r8]
 801c03c:	88b9      	ldrh	r1, [r7, #4]
 801c03e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c042:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c046:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c04a:	d009      	beq.n	801c060 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801c04c:	7b51      	ldrb	r1, [r2, #13]
 801c04e:	7992      	ldrb	r2, [r2, #6]
 801c050:	0149      	lsls	r1, r1, #5
 801c052:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c056:	4311      	orrs	r1, r2
 801c058:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c05c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c060:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c064:	d00e      	beq.n	801c084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801c066:	eba3 030e 	sub.w	r3, r3, lr
 801c06a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801c06e:	b29b      	uxth	r3, r3
 801c070:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c074:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801c078:	10db      	asrs	r3, r3, #3
 801c07a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c07e:	4313      	orrs	r3, r2
 801c080:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801c084:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801c088:	00cb      	lsls	r3, r1, #3
 801c08a:	0648      	lsls	r0, r1, #25
 801c08c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c090:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801c094:	ea43 0302 	orr.w	r3, r3, r2
 801c098:	bf44      	itt	mi
 801c09a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c09e:	b21b      	sxthmi	r3, r3
 801c0a0:	1b5d      	subs	r5, r3, r5
 801c0a2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c0a6:	e7b4      	b.n	801c012 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801c0a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0ac:	461e      	mov	r6, r3
 801c0ae:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c0b0:	4604      	mov	r4, r0
 801c0b2:	4617      	mov	r7, r2
 801c0b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c0b8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c0bc:	f7ec f928 	bl	8008310 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c0c0:	4605      	mov	r5, r0
 801c0c2:	b918      	cbnz	r0, 801c0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801c0c4:	6030      	str	r0, [r6, #0]
 801c0c6:	4628      	mov	r0, r5
 801c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0cc:	683b      	ldr	r3, [r7, #0]
 801c0ce:	4601      	mov	r1, r0
 801c0d0:	4638      	mov	r0, r7
 801c0d2:	68db      	ldr	r3, [r3, #12]
 801c0d4:	4798      	blx	r3
 801c0d6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801c0da:	4602      	mov	r2, r0
 801c0dc:	6030      	str	r0, [r6, #0]
 801c0de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c0e2:	d213      	bcs.n	801c10c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c0e4:	4643      	mov	r3, r8
 801c0e6:	4639      	mov	r1, r7
 801c0e8:	4620      	mov	r0, r4
 801c0ea:	f7ff fe39 	bl	801bd60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c0ee:	6030      	str	r0, [r6, #0]
 801c0f0:	6833      	ldr	r3, [r6, #0]
 801c0f2:	b143      	cbz	r3, 801c106 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801c0f4:	7b5a      	ldrb	r2, [r3, #13]
 801c0f6:	7a9b      	ldrb	r3, [r3, #10]
 801c0f8:	0052      	lsls	r2, r2, #1
 801c0fa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801c0fe:	4313      	orrs	r3, r2
 801c100:	bf0c      	ite	eq
 801c102:	2301      	moveq	r3, #1
 801c104:	2300      	movne	r3, #0
 801c106:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801c10a:	e7dc      	b.n	801c0c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801c10c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801c110:	b29b      	uxth	r3, r3
 801c112:	2b7f      	cmp	r3, #127	@ 0x7f
 801c114:	d804      	bhi.n	801c120 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801c116:	4639      	mov	r1, r7
 801c118:	4620      	mov	r0, r4
 801c11a:	f7ff fd15 	bl	801bb48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c11e:	e7e6      	b.n	801c0ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c120:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801c124:	2b00      	cmp	r3, #0
 801c126:	d0e3      	beq.n	801c0f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c128:	f640 1302 	movw	r3, #2306	@ 0x902
 801c12c:	429d      	cmp	r5, r3
 801c12e:	d1df      	bne.n	801c0f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c130:	4601      	mov	r1, r0
 801c132:	4620      	mov	r0, r4
 801c134:	f7ff fcd8 	bl	801bae8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c138:	e7d9      	b.n	801c0ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801c13a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c13a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c13e:	461e      	mov	r6, r3
 801c140:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c142:	4604      	mov	r4, r0
 801c144:	4617      	mov	r7, r2
 801c146:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c14a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c14e:	f7ec f8df 	bl	8008310 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c152:	4605      	mov	r5, r0
 801c154:	b918      	cbnz	r0, 801c15e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801c156:	6030      	str	r0, [r6, #0]
 801c158:	4628      	mov	r0, r5
 801c15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c15e:	683b      	ldr	r3, [r7, #0]
 801c160:	4601      	mov	r1, r0
 801c162:	4638      	mov	r0, r7
 801c164:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c168:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c16c:	47c8      	blx	r9
 801c16e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801c172:	4602      	mov	r2, r0
 801c174:	6030      	str	r0, [r6, #0]
 801c176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c17a:	d213      	bcs.n	801c1a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801c17c:	4643      	mov	r3, r8
 801c17e:	4639      	mov	r1, r7
 801c180:	4620      	mov	r0, r4
 801c182:	f7ff fded 	bl	801bd60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c186:	6030      	str	r0, [r6, #0]
 801c188:	6833      	ldr	r3, [r6, #0]
 801c18a:	b143      	cbz	r3, 801c19e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801c18c:	7b5a      	ldrb	r2, [r3, #13]
 801c18e:	7a9b      	ldrb	r3, [r3, #10]
 801c190:	0052      	lsls	r2, r2, #1
 801c192:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801c196:	4313      	orrs	r3, r2
 801c198:	bf0c      	ite	eq
 801c19a:	2301      	moveq	r3, #1
 801c19c:	2300      	movne	r3, #0
 801c19e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801c1a2:	e7d9      	b.n	801c158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801c1a4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801c1a8:	b29b      	uxth	r3, r3
 801c1aa:	2b7f      	cmp	r3, #127	@ 0x7f
 801c1ac:	d804      	bhi.n	801c1b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801c1ae:	4639      	mov	r1, r7
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f7ff fcc9 	bl	801bb48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c1b6:	e7e6      	b.n	801c186 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801c1b8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d0e3      	beq.n	801c188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c1c0:	f640 1302 	movw	r3, #2306	@ 0x902
 801c1c4:	429d      	cmp	r5, r3
 801c1c6:	d1df      	bne.n	801c188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c1c8:	4601      	mov	r1, r0
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	f7ff fc8c 	bl	801bae8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c1d0:	e7d9      	b.n	801c186 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801c1d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c1d2:	b510      	push	{r4, lr}
 801c1d4:	4604      	mov	r4, r0
 801c1d6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801c1da:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c1dc:	b1e1      	cbz	r1, 801c218 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c1de:	2b0a      	cmp	r3, #10
 801c1e0:	d02d      	beq.n	801c23e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c1e2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801c1e4:	3901      	subs	r1, #1
 801c1e6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c1ea:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801c1ec:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801c1f0:	1c51      	adds	r1, r2, #1
 801c1f2:	b289      	uxth	r1, r1
 801c1f4:	2901      	cmp	r1, #1
 801c1f6:	bf8a      	itet	hi
 801c1f8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c1fc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801c1fe:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801c200:	1c5a      	adds	r2, r3, #1
 801c202:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c204:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c206:	4413      	add	r3, r2
 801c208:	b29b      	uxth	r3, r3
 801c20a:	2b09      	cmp	r3, #9
 801c20c:	bf88      	it	hi
 801c20e:	3b0a      	subhi	r3, #10
 801c210:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c214:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c216:	e7de      	b.n	801c1d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c218:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c21a:	2b0a      	cmp	r3, #10
 801c21c:	d00f      	beq.n	801c23e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c21e:	4620      	mov	r0, r4
 801c220:	f7ff fc10 	bl	801ba44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c224:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801c226:	1c5a      	adds	r2, r3, #1
 801c228:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c22a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c22c:	4413      	add	r3, r2
 801c22e:	b29b      	uxth	r3, r3
 801c230:	2b09      	cmp	r3, #9
 801c232:	bf88      	it	hi
 801c234:	3b0a      	subhi	r3, #10
 801c236:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c23a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801c23c:	e7ec      	b.n	801c218 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c23e:	bd10      	pop	{r4, pc}

0801c240 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c240:	b538      	push	{r3, r4, r5, lr}
 801c242:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c244:	4604      	mov	r4, r0
 801c246:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c24a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801c24c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801c24e:	3a01      	subs	r2, #1
 801c250:	8702      	strh	r2, [r0, #56]	@ 0x38
 801c252:	1c5a      	adds	r2, r3, #1
 801c254:	b292      	uxth	r2, r2
 801c256:	2a09      	cmp	r2, #9
 801c258:	bf8a      	itet	hi
 801c25a:	3b09      	subhi	r3, #9
 801c25c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801c25e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801c260:	f7ff ffb7 	bl	801c1d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c264:	8c23      	ldrh	r3, [r4, #32]
 801c266:	2b01      	cmp	r3, #1
 801c268:	bf9c      	itt	ls
 801c26a:	3301      	addls	r3, #1
 801c26c:	8423      	strhls	r3, [r4, #32]
 801c26e:	8be3      	ldrh	r3, [r4, #30]
 801c270:	b90b      	cbnz	r3, 801c276 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c272:	2302      	movs	r3, #2
 801c274:	83e3      	strh	r3, [r4, #30]
 801c276:	8be3      	ldrh	r3, [r4, #30]
 801c278:	4628      	mov	r0, r5
 801c27a:	3b01      	subs	r3, #1
 801c27c:	b29b      	uxth	r3, r3
 801c27e:	83e3      	strh	r3, [r4, #30]
 801c280:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c284:	8365      	strh	r5, [r4, #26]
 801c286:	bd38      	pop	{r3, r4, r5, pc}

0801c288 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c288:	428a      	cmp	r2, r1
 801c28a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c28e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801c290:	d932      	bls.n	801c2f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801c292:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801c294:	1a54      	subs	r4, r2, r1
 801c296:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801c29a:	19ee      	adds	r6, r5, r7
 801c29c:	fa1f fe84 	uxth.w	lr, r4
 801c2a0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801c2a4:	3e01      	subs	r6, #1
 801c2a6:	b2b4      	uxth	r4, r6
 801c2a8:	eba4 090e 	sub.w	r9, r4, lr
 801c2ac:	fa1f f989 	uxth.w	r9, r9
 801c2b0:	2c09      	cmp	r4, #9
 801c2b2:	4626      	mov	r6, r4
 801c2b4:	bf88      	it	hi
 801c2b6:	f1a4 060a 	subhi.w	r6, r4, #10
 801c2ba:	f1bc 0f00 	cmp.w	ip, #0
 801c2be:	f104 34ff 	add.w	r4, r4, #4294967295
 801c2c2:	bf08      	it	eq
 801c2c4:	f04f 0c02 	moveq.w	ip, #2
 801c2c8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c2cc:	b2a4      	uxth	r4, r4
 801c2ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c2d2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801c2d6:	454c      	cmp	r4, r9
 801c2d8:	fa1f fc8c 	uxth.w	ip, ip
 801c2dc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c2e0:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801c2e4:	d1e4      	bne.n	801c2b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c2e6:	eba5 050e 	sub.w	r5, r5, lr
 801c2ea:	eb0e 0408 	add.w	r4, lr, r8
 801c2ee:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801c2f2:	8705      	strh	r5, [r0, #56]	@ 0x38
 801c2f4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801c2f8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801c2fa:	250a      	movs	r5, #10
 801c2fc:	1a64      	subs	r4, r4, r1
 801c2fe:	4439      	add	r1, r7
 801c300:	b289      	uxth	r1, r1
 801c302:	8704      	strh	r4, [r0, #56]	@ 0x38
 801c304:	2909      	cmp	r1, #9
 801c306:	bf88      	it	hi
 801c308:	390a      	subhi	r1, #10
 801c30a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c30c:	b18a      	cbz	r2, 801c332 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c30e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801c310:	3a01      	subs	r2, #1
 801c312:	3101      	adds	r1, #1
 801c314:	b292      	uxth	r2, r2
 801c316:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c31a:	8701      	strh	r1, [r0, #56]	@ 0x38
 801c31c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c31e:	b901      	cbnz	r1, 801c322 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801c320:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801c322:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801c324:	3901      	subs	r1, #1
 801c326:	b289      	uxth	r1, r1
 801c328:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801c32a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c32e:	844c      	strh	r4, [r1, #34]	@ 0x22
 801c330:	e7ec      	b.n	801c30c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801c332:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c336:	f7ff bf4c 	b.w	801c1d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c33a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c33a:	b570      	push	{r4, r5, r6, lr}
 801c33c:	2500      	movs	r5, #0
 801c33e:	4295      	cmp	r5, r2
 801c340:	d011      	beq.n	801c366 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c342:	8bc4      	ldrh	r4, [r0, #30]
 801c344:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c348:	4414      	add	r4, r2
 801c34a:	3c01      	subs	r4, #1
 801c34c:	1b64      	subs	r4, r4, r5
 801c34e:	b2a4      	uxth	r4, r4
 801c350:	2c01      	cmp	r4, #1
 801c352:	bf88      	it	hi
 801c354:	3c02      	subhi	r4, #2
 801c356:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c35a:	8b64      	ldrh	r4, [r4, #26]
 801c35c:	42b4      	cmp	r4, r6
 801c35e:	d117      	bne.n	801c390 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c360:	3501      	adds	r5, #1
 801c362:	b2ad      	uxth	r5, r5
 801c364:	e7eb      	b.n	801c33e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c366:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c36a:	2400      	movs	r4, #0
 801c36c:	4413      	add	r3, r2
 801c36e:	b2a2      	uxth	r2, r4
 801c370:	429a      	cmp	r2, r3
 801c372:	da0f      	bge.n	801c394 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c374:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801c376:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c37a:	3401      	adds	r4, #1
 801c37c:	4432      	add	r2, r6
 801c37e:	b292      	uxth	r2, r2
 801c380:	2a09      	cmp	r2, #9
 801c382:	bf88      	it	hi
 801c384:	3a0a      	subhi	r2, #10
 801c386:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c38a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801c38c:	42aa      	cmp	r2, r5
 801c38e:	d0ee      	beq.n	801c36e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c390:	2000      	movs	r0, #0
 801c392:	bd70      	pop	{r4, r5, r6, pc}
 801c394:	2001      	movs	r0, #1
 801c396:	e7fc      	b.n	801c392 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c398 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39c:	4605      	mov	r5, r0
 801c39e:	4616      	mov	r6, r2
 801c3a0:	1c8c      	adds	r4, r1, #2
 801c3a2:	8809      	ldrh	r1, [r1, #0]
 801c3a4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c3a8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c3ac:	42b3      	cmp	r3, r6
 801c3ae:	d124      	bne.n	801c3fa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c3b0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c3b4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c3b8:	f001 070f 	and.w	r7, r1, #15
 801c3bc:	4652      	mov	r2, sl
 801c3be:	f8cd 8000 	str.w	r8, [sp]
 801c3c2:	464b      	mov	r3, r9
 801c3c4:	4621      	mov	r1, r4
 801c3c6:	4628      	mov	r0, r5
 801c3c8:	f7ff ffb7 	bl	801c33a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c3cc:	4683      	mov	fp, r0
 801c3ce:	b168      	cbz	r0, 801c3ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c3d0:	eb0a 0109 	add.w	r1, sl, r9
 801c3d4:	463a      	mov	r2, r7
 801c3d6:	4628      	mov	r0, r5
 801c3d8:	4441      	add	r1, r8
 801c3da:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c3de:	4649      	mov	r1, r9
 801c3e0:	f7ff ff52 	bl	801c288 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c3e4:	4658      	mov	r0, fp
 801c3e6:	b003      	add	sp, #12
 801c3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ec:	eb07 010a 	add.w	r1, r7, sl
 801c3f0:	4449      	add	r1, r9
 801c3f2:	4441      	add	r1, r8
 801c3f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c3f8:	e7d2      	b.n	801c3a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c3fa:	f04f 0b00 	mov.w	fp, #0
 801c3fe:	e7f1      	b.n	801c3e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c400 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c400:	b570      	push	{r4, r5, r6, lr}
 801c402:	8810      	ldrh	r0, [r2, #0]
 801c404:	4298      	cmp	r0, r3
 801c406:	d817      	bhi.n	801c438 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c408:	1e48      	subs	r0, r1, #1
 801c40a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c40e:	4298      	cmp	r0, r3
 801c410:	d312      	bcc.n	801c438 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c412:	2400      	movs	r4, #0
 801c414:	428c      	cmp	r4, r1
 801c416:	d20f      	bcs.n	801c438 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c418:	1860      	adds	r0, r4, r1
 801c41a:	1040      	asrs	r0, r0, #1
 801c41c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c420:	0085      	lsls	r5, r0, #2
 801c422:	42b3      	cmp	r3, r6
 801c424:	d902      	bls.n	801c42c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c426:	3001      	adds	r0, #1
 801c428:	b284      	uxth	r4, r0
 801c42a:	e7f3      	b.n	801c414 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c42c:	d201      	bcs.n	801c432 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c42e:	b281      	uxth	r1, r0
 801c430:	e7f0      	b.n	801c414 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c432:	442a      	add	r2, r5
 801c434:	8850      	ldrh	r0, [r2, #2]
 801c436:	bd70      	pop	{r4, r5, r6, pc}
 801c438:	2000      	movs	r0, #0
 801c43a:	e7fc      	b.n	801c436 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c43c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c440:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801c442:	4604      	mov	r4, r0
 801c444:	260b      	movs	r6, #11
 801c446:	886f      	ldrh	r7, [r5, #2]
 801c448:	087f      	lsrs	r7, r7, #1
 801c44a:	3e01      	subs	r6, #1
 801c44c:	d013      	beq.n	801c476 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c44e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801c450:	462a      	mov	r2, r5
 801c452:	4639      	mov	r1, r7
 801c454:	4620      	mov	r0, r4
 801c456:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c45a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801c45e:	4643      	mov	r3, r8
 801c460:	f7ff ffce 	bl	801c400 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c464:	b138      	cbz	r0, 801c476 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c466:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c46a:	4642      	mov	r2, r8
 801c46c:	4620      	mov	r0, r4
 801c46e:	f7ff ff93 	bl	801c398 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c472:	2800      	cmp	r0, #0
 801c474:	d1e9      	bne.n	801c44a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c47c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c47c:	b570      	push	{r4, r5, r6, lr}
 801c47e:	694a      	ldr	r2, [r1, #20]
 801c480:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801c482:	684b      	ldr	r3, [r1, #4]
 801c484:	1b54      	subs	r4, r2, r5
 801c486:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801c488:	f000 8106 	beq.w	801c698 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c48c:	1b9b      	subs	r3, r3, r6
 801c48e:	d003      	beq.n	801c498 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c490:	4363      	muls	r3, r4
 801c492:	2210      	movs	r2, #16
 801c494:	fb93 f3f2 	sdiv	r3, r3, r2
 801c498:	680c      	ldr	r4, [r1, #0]
 801c49a:	698a      	ldr	r2, [r1, #24]
 801c49c:	1b65      	subs	r5, r4, r5
 801c49e:	f000 80fd 	beq.w	801c69c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c4a2:	1b92      	subs	r2, r2, r6
 801c4a4:	d003      	beq.n	801c4ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c4a6:	436a      	muls	r2, r5
 801c4a8:	2410      	movs	r4, #16
 801c4aa:	fb92 f2f4 	sdiv	r2, r2, r4
 801c4ae:	1a9b      	subs	r3, r3, r2
 801c4b0:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801c6d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c4b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c4b8:	460a      	mov	r2, r1
 801c4ba:	ee07 3a90 	vmov	s15, r3
 801c4be:	f100 040c 	add.w	r4, r0, #12
 801c4c2:	4603      	mov	r3, r0
 801c4c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4c8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c4cc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c4d0:	eeb1 6a43 	vneg.f32	s12, s6
 801c4d4:	edd2 7a02 	vldr	s15, [r2, #8]
 801c4d8:	3214      	adds	r2, #20
 801c4da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c4de:	ece3 6a01 	vstmia	r3!, {s13}
 801c4e2:	429c      	cmp	r4, r3
 801c4e4:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c4e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c4ec:	edc3 7a02 	vstr	s15, [r3, #8]
 801c4f0:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c4f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c4f8:	edc3 7a05 	vstr	s15, [r3, #20]
 801c4fc:	d1ea      	bne.n	801c4d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c4fe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c500:	698b      	ldr	r3, [r1, #24]
 801c502:	edd0 4a02 	vldr	s9, [r0, #8]
 801c506:	1a9b      	subs	r3, r3, r2
 801c508:	edd0 3a00 	vldr	s7, [r0]
 801c50c:	edd0 6a01 	vldr	s13, [r0, #4]
 801c510:	ee07 3a90 	vmov	s15, r3
 801c514:	684b      	ldr	r3, [r1, #4]
 801c516:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c51a:	ed90 5a05 	vldr	s10, [r0, #20]
 801c51e:	1a9b      	subs	r3, r3, r2
 801c520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c524:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c528:	ed90 2a03 	vldr	s4, [r0, #12]
 801c52c:	ee07 3a10 	vmov	s14, r3
 801c530:	edd0 5a04 	vldr	s11, [r0, #16]
 801c534:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c538:	ed90 1a07 	vldr	s2, [r0, #28]
 801c53c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c540:	edd0 2a06 	vldr	s5, [r0, #24]
 801c544:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c548:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c54c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c550:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c554:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c558:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c55c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801c560:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c562:	694a      	ldr	r2, [r1, #20]
 801c564:	1b13      	subs	r3, r2, r4
 801c566:	ee07 3a10 	vmov	s14, r3
 801c56a:	680b      	ldr	r3, [r1, #0]
 801c56c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c570:	1b1b      	subs	r3, r3, r4
 801c572:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c576:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c57a:	ee07 3a10 	vmov	s14, r3
 801c57e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c582:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c586:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c58a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c58e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801c592:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c594:	698b      	ldr	r3, [r1, #24]
 801c596:	1a9b      	subs	r3, r3, r2
 801c598:	ee06 3a90 	vmov	s13, r3
 801c59c:	684b      	ldr	r3, [r1, #4]
 801c59e:	1a9b      	subs	r3, r3, r2
 801c5a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c5a4:	ee07 3a10 	vmov	s14, r3
 801c5a8:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c5ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5b0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c5b4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5b8:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c5bc:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c5c0:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801c5c4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c5c6:	694a      	ldr	r2, [r1, #20]
 801c5c8:	1b13      	subs	r3, r2, r4
 801c5ca:	ee07 3a10 	vmov	s14, r3
 801c5ce:	680b      	ldr	r3, [r1, #0]
 801c5d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5d4:	1b1b      	subs	r3, r3, r4
 801c5d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5da:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c5de:	ee07 3a10 	vmov	s14, r3
 801c5e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5ea:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c5ee:	edd0 5a08 	vldr	s11, [r0, #32]
 801c5f2:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c5f6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c5fa:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c5fe:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801c602:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c604:	698b      	ldr	r3, [r1, #24]
 801c606:	1a9b      	subs	r3, r3, r2
 801c608:	ee07 3a10 	vmov	s14, r3
 801c60c:	684b      	ldr	r3, [r1, #4]
 801c60e:	1a9b      	subs	r3, r3, r2
 801c610:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c614:	ee01 3a90 	vmov	s3, r3
 801c618:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c61c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c620:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c624:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c628:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c62c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c630:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c634:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801c636:	694a      	ldr	r2, [r1, #20]
 801c638:	1b13      	subs	r3, r2, r4
 801c63a:	ee03 3a10 	vmov	s6, r3
 801c63e:	680b      	ldr	r3, [r1, #0]
 801c640:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c644:	1b1b      	subs	r3, r3, r4
 801c646:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c64a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c64e:	ee03 3a10 	vmov	s6, r3
 801c652:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c656:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c65a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c65e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c662:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c666:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801c66a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c66e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c676:	dd13      	ble.n	801c6a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c67c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c680:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c682:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c68e:	dd15      	ble.n	801c6bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c690:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c694:	6403      	str	r3, [r0, #64]	@ 0x40
 801c696:	bd70      	pop	{r4, r5, r6, pc}
 801c698:	4623      	mov	r3, r4
 801c69a:	e6fd      	b.n	801c498 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c69c:	462a      	mov	r2, r5
 801c69e:	e706      	b.n	801c4ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c6a0:	d502      	bpl.n	801c6a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c6a2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c6a6:	e7e9      	b.n	801c67c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c6a8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c6ac:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c6b0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6b8:	dade      	bge.n	801c678 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c6ba:	e7f2      	b.n	801c6a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c6bc:	d502      	bpl.n	801c6c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c6be:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c6c2:	e7e7      	b.n	801c694 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c6c4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c6c8:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c6cc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6d4:	dadc      	bge.n	801c690 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c6d6:	e7f2      	b.n	801c6be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c6d8:	3d800000 	.word	0x3d800000

0801c6dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6e0:	2714      	movs	r7, #20
 801c6e2:	435f      	muls	r7, r3
 801c6e4:	eb02 0c07 	add.w	ip, r2, r7
 801c6e8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c6ec:	f115 0e0f 	adds.w	lr, r5, #15
 801c6f0:	f100 80a2 	bmi.w	801c838 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c6f4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c6f8:	9c08      	ldr	r4, [sp, #32]
 801c6fa:	2614      	movs	r6, #20
 801c6fc:	f8c0 e014 	str.w	lr, [r0, #20]
 801c700:	4366      	muls	r6, r4
 801c702:	eb02 0806 	add.w	r8, r2, r6
 801c706:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c70a:	f115 040f 	adds.w	r4, r5, #15
 801c70e:	f100 809f 	bmi.w	801c850 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c712:	1124      	asrs	r4, r4, #4
 801c714:	eba4 040e 	sub.w	r4, r4, lr
 801c718:	6184      	str	r4, [r0, #24]
 801c71a:	2c00      	cmp	r4, #0
 801c71c:	f000 808a 	beq.w	801c834 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c720:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c724:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c728:	5995      	ldr	r5, [r2, r6]
 801c72a:	eba4 0809 	sub.w	r8, r4, r9
 801c72e:	59d4      	ldr	r4, [r2, r7]
 801c730:	eba5 0a04 	sub.w	sl, r5, r4
 801c734:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c738:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c73c:	fb0e fe05 	mul.w	lr, lr, r5
 801c740:	fb0a ee19 	mls	lr, sl, r9, lr
 801c744:	fb08 e404 	mla	r4, r8, r4, lr
 801c748:	3c01      	subs	r4, #1
 801c74a:	19a4      	adds	r4, r4, r6
 801c74c:	f100 808c 	bmi.w	801c868 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c750:	fb94 fef6 	sdiv	lr, r4, r6
 801c754:	fb06 441e 	mls	r4, r6, lr, r4
 801c758:	f8c0 e000 	str.w	lr, [r0]
 801c75c:	6104      	str	r4, [r0, #16]
 801c75e:	2d00      	cmp	r5, #0
 801c760:	f2c0 8095 	blt.w	801c88e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c764:	fb95 f4f6 	sdiv	r4, r5, r6
 801c768:	fb06 5514 	mls	r5, r6, r4, r5
 801c76c:	6044      	str	r4, [r0, #4]
 801c76e:	6085      	str	r5, [r0, #8]
 801c770:	60c6      	str	r6, [r0, #12]
 801c772:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c776:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c77a:	6945      	ldr	r5, [r0, #20]
 801c77c:	59d2      	ldr	r2, [r2, r7]
 801c77e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c782:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801c8b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c786:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c78a:	ee07 4a10 	vmov	s14, r4
 801c78e:	6804      	ldr	r4, [r0, #0]
 801c790:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c798:	ee07 2a90 	vmov	s15, r2
 801c79c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c7a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c7a8:	edd3 6a00 	vldr	s13, [r3]
 801c7ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c7b0:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801c7b4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c7b8:	edc0 6a07 	vstr	s13, [r0, #28]
 801c7bc:	edd0 6a01 	vldr	s13, [r0, #4]
 801c7c0:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801c7c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c7c8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801c7cc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c7d0:	ed80 6a08 	vstr	s12, [r0, #32]
 801c7d4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801c7d6:	6242      	str	r2, [r0, #36]	@ 0x24
 801c7d8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801c7dc:	ed93 6a03 	vldr	s12, [r3, #12]
 801c7e0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c7e4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c7e8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c7ec:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801c7f0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801c7f4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801c7f8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c7fc:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801c800:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801c802:	6302      	str	r2, [r0, #48]	@ 0x30
 801c804:	ed93 6a06 	vldr	s12, [r3, #24]
 801c808:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801c80c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c810:	eeb0 7a46 	vmov.f32	s14, s12
 801c814:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801c818:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c81c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801c820:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801c824:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801c828:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c82c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801c830:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c832:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801c834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c838:	2410      	movs	r4, #16
 801c83a:	f1c5 0501 	rsb	r5, r5, #1
 801c83e:	fb9e fef4 	sdiv	lr, lr, r4
 801c842:	f015 050f 	ands.w	r5, r5, #15
 801c846:	bf18      	it	ne
 801c848:	2501      	movne	r5, #1
 801c84a:	ebae 0e05 	sub.w	lr, lr, r5
 801c84e:	e753      	b.n	801c6f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c850:	f04f 0910 	mov.w	r9, #16
 801c854:	f1c5 0501 	rsb	r5, r5, #1
 801c858:	fb94 f4f9 	sdiv	r4, r4, r9
 801c85c:	f015 050f 	ands.w	r5, r5, #15
 801c860:	bf18      	it	ne
 801c862:	2501      	movne	r5, #1
 801c864:	1b64      	subs	r4, r4, r5
 801c866:	e755      	b.n	801c714 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c868:	4264      	negs	r4, r4
 801c86a:	fb94 fef6 	sdiv	lr, r4, r6
 801c86e:	f1ce 0800 	rsb	r8, lr, #0
 801c872:	fb06 441e 	mls	r4, r6, lr, r4
 801c876:	f8c0 8000 	str.w	r8, [r0]
 801c87a:	6104      	str	r4, [r0, #16]
 801c87c:	2c00      	cmp	r4, #0
 801c87e:	f43f af6e 	beq.w	801c75e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c882:	ea6f 0e0e 	mvn.w	lr, lr
 801c886:	1b34      	subs	r4, r6, r4
 801c888:	f8c0 e000 	str.w	lr, [r0]
 801c88c:	e766      	b.n	801c75c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c88e:	426d      	negs	r5, r5
 801c890:	fb95 f4f6 	sdiv	r4, r5, r6
 801c894:	f1c4 0e00 	rsb	lr, r4, #0
 801c898:	fb06 5514 	mls	r5, r6, r4, r5
 801c89c:	f8c0 e004 	str.w	lr, [r0, #4]
 801c8a0:	6085      	str	r5, [r0, #8]
 801c8a2:	2d00      	cmp	r5, #0
 801c8a4:	f43f af64 	beq.w	801c770 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c8a8:	43e4      	mvns	r4, r4
 801c8aa:	1b75      	subs	r5, r6, r5
 801c8ac:	6044      	str	r4, [r0, #4]
 801c8ae:	e75e      	b.n	801c76e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c8b0:	3d800000 	.word	0x3d800000

0801c8b4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c8b4:	4602      	mov	r2, r0
 801c8b6:	b148      	cbz	r0, 801c8cc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	b298      	uxth	r0, r3
 801c8bc:	3301      	adds	r3, #1
 801c8be:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c8c2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c8c6:	2900      	cmp	r1, #0
 801c8c8:	d1f7      	bne.n	801c8ba <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c8ca:	4770      	bx	lr
 801c8cc:	4770      	bx	lr

0801c8ce <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 801c8ce:	b530      	push	{r4, r5, lr}
 801c8d0:	4604      	mov	r4, r0
 801c8d2:	b161      	cbz	r1, 801c8ee <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 801c8d4:	b150      	cbz	r0, 801c8ec <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	b298      	uxth	r0, r3
 801c8da:	4290      	cmp	r0, r2
 801c8dc:	d206      	bcs.n	801c8ec <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801c8de:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801c8e2:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c8e6:	3301      	adds	r3, #1
 801c8e8:	2d00      	cmp	r5, #0
 801c8ea:	d1f5      	bne.n	801c8d8 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 801c8ec:	bd30      	pop	{r4, r5, pc}
 801c8ee:	4608      	mov	r0, r1
 801c8f0:	e7fc      	b.n	801c8ec <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

0801c8f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c8f2:	b530      	push	{r4, r5, lr}
 801c8f4:	4604      	mov	r4, r0
 801c8f6:	b159      	cbz	r1, 801c910 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c8f8:	b148      	cbz	r0, 801c90e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c8fa:	2300      	movs	r3, #0
 801c8fc:	b298      	uxth	r0, r3
 801c8fe:	4282      	cmp	r2, r0
 801c900:	d905      	bls.n	801c90e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c902:	5ccd      	ldrb	r5, [r1, r3]
 801c904:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c908:	3301      	adds	r3, #1
 801c90a:	2d00      	cmp	r5, #0
 801c90c:	d1f6      	bne.n	801c8fc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c90e:	bd30      	pop	{r4, r5, pc}
 801c910:	4608      	mov	r0, r1
 801c912:	e7fc      	b.n	801c90e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c914 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801c914:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c916:	b08b      	sub	sp, #44	@ 0x2c
 801c918:	468c      	mov	ip, r1
 801c91a:	4604      	mov	r4, r0
 801c91c:	2100      	movs	r1, #0
 801c91e:	261f      	movs	r6, #31
 801c920:	af01      	add	r7, sp, #4
 801c922:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c926:	1e71      	subs	r1, r6, #1
 801c928:	fb94 fef3 	sdiv	lr, r4, r3
 801c92c:	fb03 441e 	mls	r4, r3, lr, r4
 801c930:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c934:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c938:	b2ec      	uxtb	r4, r5
 801c93a:	2d09      	cmp	r5, #9
 801c93c:	bfd4      	ite	le
 801c93e:	3430      	addle	r4, #48	@ 0x30
 801c940:	3457      	addgt	r4, #87	@ 0x57
 801c942:	b2e4      	uxtb	r4, r4
 801c944:	55bc      	strb	r4, [r7, r6]
 801c946:	4674      	mov	r4, lr
 801c948:	b974      	cbnz	r4, 801c968 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801c94a:	2800      	cmp	r0, #0
 801c94c:	da05      	bge.n	801c95a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801c94e:	ab0a      	add	r3, sp, #40	@ 0x28
 801c950:	4419      	add	r1, r3
 801c952:	232d      	movs	r3, #45	@ 0x2d
 801c954:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c958:	1eb1      	subs	r1, r6, #2
 801c95a:	3101      	adds	r1, #1
 801c95c:	4660      	mov	r0, ip
 801c95e:	4439      	add	r1, r7
 801c960:	f7ff ffc7 	bl	801c8f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c964:	b00b      	add	sp, #44	@ 0x2c
 801c966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c968:	460e      	mov	r6, r1
 801c96a:	e7dc      	b.n	801c926 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801c96c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c96e:	468c      	mov	ip, r1
 801c970:	b08b      	sub	sp, #44	@ 0x2c
 801c972:	2100      	movs	r1, #0
 801c974:	ae01      	add	r6, sp, #4
 801c976:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801c97a:	211f      	movs	r1, #31
 801c97c:	fbb0 f7f3 	udiv	r7, r0, r3
 801c980:	fb03 0517 	mls	r5, r3, r7, r0
 801c984:	4638      	mov	r0, r7
 801c986:	b2ec      	uxtb	r4, r5
 801c988:	2d09      	cmp	r5, #9
 801c98a:	bfd4      	ite	le
 801c98c:	3430      	addle	r4, #48	@ 0x30
 801c98e:	3457      	addgt	r4, #87	@ 0x57
 801c990:	b2e4      	uxtb	r4, r4
 801c992:	558c      	strb	r4, [r1, r6]
 801c994:	1e4c      	subs	r4, r1, #1
 801c996:	b92f      	cbnz	r7, 801c9a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801c998:	4431      	add	r1, r6
 801c99a:	4660      	mov	r0, ip
 801c99c:	f7ff ffa9 	bl	801c8f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c9a0:	b00b      	add	sp, #44	@ 0x2c
 801c9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9a4:	4621      	mov	r1, r4
 801c9a6:	e7e9      	b.n	801c97c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801c9a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9ac:	b085      	sub	sp, #20
 801c9ae:	4691      	mov	r9, r2
 801c9b0:	6802      	ldr	r2, [r0, #0]
 801c9b2:	4688      	mov	r8, r1
 801c9b4:	461c      	mov	r4, r3
 801c9b6:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801c9ba:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801c9be:	4683      	mov	fp, r0
 801c9c0:	4610      	mov	r0, r2
 801c9c2:	9103      	str	r1, [sp, #12]
 801c9c4:	9302      	str	r3, [sp, #8]
 801c9c6:	9201      	str	r2, [sp, #4]
 801c9c8:	f7ff ff74 	bl	801c8b4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801c9cc:	f1b8 0f00 	cmp.w	r8, #0
 801c9d0:	bf0c      	ite	eq
 801c9d2:	4684      	moveq	ip, r0
 801c9d4:	f100 0c01 	addne.w	ip, r0, #1
 801c9d8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801c9dc:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801c9e0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c9e2:	fa1f fc8c 	uxth.w	ip, ip
 801c9e6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c9e8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801c9ec:	9903      	ldr	r1, [sp, #12]
 801c9ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c9f2:	d041      	beq.n	801ca78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c9f4:	d834      	bhi.n	801ca60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801c9f6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801c9fa:	d059      	beq.n	801cab0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801c9fc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801ca00:	d03a      	beq.n	801ca78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ca02:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801ca06:	d034      	beq.n	801ca72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ca08:	2400      	movs	r4, #0
 801ca0a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801ca0e:	3a01      	subs	r2, #1
 801ca10:	b169      	cbz	r1, 801ca2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ca12:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ca14:	458c      	cmp	ip, r1
 801ca16:	da09      	bge.n	801ca2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ca18:	eba1 010c 	sub.w	r1, r1, ip
 801ca1c:	b289      	uxth	r1, r1
 801ca1e:	b933      	cbnz	r3, 801ca2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ca20:	2e00      	cmp	r6, #0
 801ca22:	d051      	beq.n	801cac8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ca24:	2800      	cmp	r0, #0
 801ca26:	d04f      	beq.n	801cac8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ca28:	440c      	add	r4, r1
 801ca2a:	b2a4      	uxth	r4, r4
 801ca2c:	2100      	movs	r1, #0
 801ca2e:	682b      	ldr	r3, [r5, #0]
 801ca30:	4293      	cmp	r3, r2
 801ca32:	da07      	bge.n	801ca44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ca34:	f1b8 0f00 	cmp.w	r8, #0
 801ca38:	d004      	beq.n	801ca44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ca3a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ca3e:	682b      	ldr	r3, [r5, #0]
 801ca40:	3301      	adds	r3, #1
 801ca42:	602b      	str	r3, [r5, #0]
 801ca44:	2730      	movs	r7, #48	@ 0x30
 801ca46:	2c00      	cmp	r4, #0
 801ca48:	d04e      	beq.n	801cae8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ca4a:	682e      	ldr	r6, [r5, #0]
 801ca4c:	3c01      	subs	r4, #1
 801ca4e:	42b2      	cmp	r2, r6
 801ca50:	b2a4      	uxth	r4, r4
 801ca52:	dd49      	ble.n	801cae8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ca54:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ca58:	682b      	ldr	r3, [r5, #0]
 801ca5a:	3301      	adds	r3, #1
 801ca5c:	602b      	str	r3, [r5, #0]
 801ca5e:	e7f2      	b.n	801ca46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ca60:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801ca64:	d01d      	beq.n	801caa2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ca66:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801ca6a:	d002      	beq.n	801ca72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ca6c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801ca70:	e7c9      	b.n	801ca06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801ca72:	4684      	mov	ip, r0
 801ca74:	f04f 0800 	mov.w	r8, #0
 801ca78:	2c00      	cmp	r4, #0
 801ca7a:	d0c6      	beq.n	801ca0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ca7c:	b947      	cbnz	r7, 801ca90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ca7e:	2801      	cmp	r0, #1
 801ca80:	d106      	bne.n	801ca90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ca82:	8814      	ldrh	r4, [r2, #0]
 801ca84:	2c30      	cmp	r4, #48	@ 0x30
 801ca86:	bf02      	ittt	eq
 801ca88:	3202      	addeq	r2, #2
 801ca8a:	4638      	moveq	r0, r7
 801ca8c:	f8cb 2000 	streq.w	r2, [fp]
 801ca90:	45bc      	cmp	ip, r7
 801ca92:	da14      	bge.n	801cabe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ca94:	b2bf      	uxth	r7, r7
 801ca96:	eba7 040c 	sub.w	r4, r7, ip
 801ca9a:	46bc      	mov	ip, r7
 801ca9c:	b2a4      	uxth	r4, r4
 801ca9e:	2600      	movs	r6, #0
 801caa0:	e7b3      	b.n	801ca0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801caa2:	4684      	mov	ip, r0
 801caa4:	b16c      	cbz	r4, 801cac2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801caa6:	42b8      	cmp	r0, r7
 801caa8:	dd00      	ble.n	801caac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801caaa:	b2b8      	uxth	r0, r7
 801caac:	2400      	movs	r4, #0
 801caae:	e003      	b.n	801cab8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801cab0:	f04f 0c01 	mov.w	ip, #1
 801cab4:	2400      	movs	r4, #0
 801cab6:	4660      	mov	r0, ip
 801cab8:	4626      	mov	r6, r4
 801caba:	46a0      	mov	r8, r4
 801cabc:	e7a5      	b.n	801ca0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cabe:	2400      	movs	r4, #0
 801cac0:	e7ed      	b.n	801ca9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801cac2:	4626      	mov	r6, r4
 801cac4:	46a0      	mov	r8, r4
 801cac6:	e7a0      	b.n	801ca0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801cac8:	2900      	cmp	r1, #0
 801caca:	d0b0      	beq.n	801ca2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cacc:	2720      	movs	r7, #32
 801cace:	682e      	ldr	r6, [r5, #0]
 801cad0:	2900      	cmp	r1, #0
 801cad2:	d0ac      	beq.n	801ca2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801cad4:	3901      	subs	r1, #1
 801cad6:	4296      	cmp	r6, r2
 801cad8:	b289      	uxth	r1, r1
 801cada:	daa7      	bge.n	801ca2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801cadc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801cae0:	682b      	ldr	r3, [r5, #0]
 801cae2:	3301      	adds	r3, #1
 801cae4:	602b      	str	r3, [r5, #0]
 801cae6:	e7f2      	b.n	801cace <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801cae8:	b188      	cbz	r0, 801cb0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801caea:	682b      	ldr	r3, [r5, #0]
 801caec:	3801      	subs	r0, #1
 801caee:	429a      	cmp	r2, r3
 801caf0:	b280      	uxth	r0, r0
 801caf2:	dd0c      	ble.n	801cb0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801caf4:	f8db 3000 	ldr.w	r3, [fp]
 801caf8:	1c9c      	adds	r4, r3, #2
 801cafa:	f8cb 4000 	str.w	r4, [fp]
 801cafe:	881c      	ldrh	r4, [r3, #0]
 801cb00:	682b      	ldr	r3, [r5, #0]
 801cb02:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801cb06:	682b      	ldr	r3, [r5, #0]
 801cb08:	3301      	adds	r3, #1
 801cb0a:	602b      	str	r3, [r5, #0]
 801cb0c:	e7ec      	b.n	801cae8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cb0e:	2620      	movs	r6, #32
 801cb10:	b151      	cbz	r1, 801cb28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cb12:	6828      	ldr	r0, [r5, #0]
 801cb14:	3901      	subs	r1, #1
 801cb16:	4282      	cmp	r2, r0
 801cb18:	b289      	uxth	r1, r1
 801cb1a:	dd05      	ble.n	801cb28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cb1c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801cb20:	682b      	ldr	r3, [r5, #0]
 801cb22:	3301      	adds	r3, #1
 801cb24:	602b      	str	r3, [r5, #0]
 801cb26:	e7f3      	b.n	801cb10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801cb28:	b005      	add	sp, #20
 801cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801cb2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb32:	2400      	movs	r4, #0
 801cb34:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801cb38:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801cb3c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801cb40:	8014      	strh	r4, [r2, #0]
 801cb42:	701c      	strb	r4, [r3, #0]
 801cb44:	f888 4000 	strb.w	r4, [r8]
 801cb48:	f88c 4000 	strb.w	r4, [ip]
 801cb4c:	f88e 4000 	strb.w	r4, [lr]
 801cb50:	703c      	strb	r4, [r7, #0]
 801cb52:	6804      	ldr	r4, [r0, #0]
 801cb54:	b1a4      	cbz	r4, 801cb80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801cb56:	8824      	ldrh	r4, [r4, #0]
 801cb58:	f04f 0901 	mov.w	r9, #1
 801cb5c:	b314      	cbz	r4, 801cba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cb5e:	2c2b      	cmp	r4, #43	@ 0x2b
 801cb60:	d001      	beq.n	801cb66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801cb62:	2c20      	cmp	r4, #32
 801cb64:	d110      	bne.n	801cb88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801cb66:	8014      	strh	r4, [r2, #0]
 801cb68:	6804      	ldr	r4, [r0, #0]
 801cb6a:	b10c      	cbz	r4, 801cb70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801cb6c:	3402      	adds	r4, #2
 801cb6e:	6004      	str	r4, [r0, #0]
 801cb70:	680c      	ldr	r4, [r1, #0]
 801cb72:	b10c      	cbz	r4, 801cb78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801cb74:	3401      	adds	r4, #1
 801cb76:	600c      	str	r4, [r1, #0]
 801cb78:	6804      	ldr	r4, [r0, #0]
 801cb7a:	b17c      	cbz	r4, 801cb9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801cb7c:	8824      	ldrh	r4, [r4, #0]
 801cb7e:	e7ed      	b.n	801cb5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cb80:	680c      	ldr	r4, [r1, #0]
 801cb82:	b17c      	cbz	r4, 801cba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cb84:	7824      	ldrb	r4, [r4, #0]
 801cb86:	e7e7      	b.n	801cb58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801cb88:	2c2d      	cmp	r4, #45	@ 0x2d
 801cb8a:	d102      	bne.n	801cb92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801cb8c:	f883 9000 	strb.w	r9, [r3]
 801cb90:	e7ea      	b.n	801cb68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cb92:	2c23      	cmp	r4, #35	@ 0x23
 801cb94:	d107      	bne.n	801cba6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801cb96:	f888 9000 	strb.w	r9, [r8]
 801cb9a:	e7e5      	b.n	801cb68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cb9c:	680c      	ldr	r4, [r1, #0]
 801cb9e:	b10c      	cbz	r4, 801cba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cba0:	7824      	ldrb	r4, [r4, #0]
 801cba2:	e7db      	b.n	801cb5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cba4:	2400      	movs	r4, #0
 801cba6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801cbaa:	2b09      	cmp	r3, #9
 801cbac:	d901      	bls.n	801cbb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801cbae:	2c2a      	cmp	r4, #42	@ 0x2a
 801cbb0:	d122      	bne.n	801cbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cbb2:	2301      	movs	r3, #1
 801cbb4:	2c30      	cmp	r4, #48	@ 0x30
 801cbb6:	f88e 3000 	strb.w	r3, [lr]
 801cbba:	d10d      	bne.n	801cbd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cbbc:	f88c 3000 	strb.w	r3, [ip]
 801cbc0:	6803      	ldr	r3, [r0, #0]
 801cbc2:	b10b      	cbz	r3, 801cbc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801cbc4:	3302      	adds	r3, #2
 801cbc6:	6003      	str	r3, [r0, #0]
 801cbc8:	680b      	ldr	r3, [r1, #0]
 801cbca:	b10b      	cbz	r3, 801cbd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801cbcc:	3301      	adds	r3, #1
 801cbce:	600b      	str	r3, [r1, #0]
 801cbd0:	6803      	ldr	r3, [r0, #0]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d02f      	beq.n	801cc36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801cbd6:	881c      	ldrh	r4, [r3, #0]
 801cbd8:	2c2a      	cmp	r4, #42	@ 0x2a
 801cbda:	d135      	bne.n	801cc48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801cbdc:	f04f 33ff 	mov.w	r3, #4294967295
 801cbe0:	6033      	str	r3, [r6, #0]
 801cbe2:	6803      	ldr	r3, [r0, #0]
 801cbe4:	b10b      	cbz	r3, 801cbea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801cbe6:	3302      	adds	r3, #2
 801cbe8:	6003      	str	r3, [r0, #0]
 801cbea:	680b      	ldr	r3, [r1, #0]
 801cbec:	b10b      	cbz	r3, 801cbf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801cbee:	3301      	adds	r3, #1
 801cbf0:	600b      	str	r3, [r1, #0]
 801cbf2:	6803      	ldr	r3, [r0, #0]
 801cbf4:	b31b      	cbz	r3, 801cc3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801cbf6:	881c      	ldrh	r4, [r3, #0]
 801cbf8:	2c2e      	cmp	r4, #46	@ 0x2e
 801cbfa:	d11a      	bne.n	801cc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cbfc:	2301      	movs	r3, #1
 801cbfe:	703b      	strb	r3, [r7, #0]
 801cc00:	6803      	ldr	r3, [r0, #0]
 801cc02:	b10b      	cbz	r3, 801cc08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801cc04:	3302      	adds	r3, #2
 801cc06:	6003      	str	r3, [r0, #0]
 801cc08:	680b      	ldr	r3, [r1, #0]
 801cc0a:	b10b      	cbz	r3, 801cc10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801cc0c:	3301      	adds	r3, #1
 801cc0e:	600b      	str	r3, [r1, #0]
 801cc10:	6803      	ldr	r3, [r0, #0]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d036      	beq.n	801cc84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801cc16:	881b      	ldrh	r3, [r3, #0]
 801cc18:	2b2a      	cmp	r3, #42	@ 0x2a
 801cc1a:	d137      	bne.n	801cc8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801cc1c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc20:	602b      	str	r3, [r5, #0]
 801cc22:	6803      	ldr	r3, [r0, #0]
 801cc24:	b10b      	cbz	r3, 801cc2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801cc26:	3302      	adds	r3, #2
 801cc28:	6003      	str	r3, [r0, #0]
 801cc2a:	680b      	ldr	r3, [r1, #0]
 801cc2c:	b10b      	cbz	r3, 801cc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cc2e:	3301      	adds	r3, #1
 801cc30:	600b      	str	r3, [r1, #0]
 801cc32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc36:	680c      	ldr	r4, [r1, #0]
 801cc38:	b134      	cbz	r4, 801cc48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801cc3a:	7824      	ldrb	r4, [r4, #0]
 801cc3c:	e7cc      	b.n	801cbd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cc3e:	680b      	ldr	r3, [r1, #0]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d0f6      	beq.n	801cc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cc44:	781c      	ldrb	r4, [r3, #0]
 801cc46:	e7d7      	b.n	801cbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cc48:	2300      	movs	r3, #0
 801cc4a:	220a      	movs	r2, #10
 801cc4c:	6033      	str	r3, [r6, #0]
 801cc4e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801cc52:	fa1f f38c 	uxth.w	r3, ip
 801cc56:	2b09      	cmp	r3, #9
 801cc58:	d8ce      	bhi.n	801cbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cc5a:	6833      	ldr	r3, [r6, #0]
 801cc5c:	fb02 c303 	mla	r3, r2, r3, ip
 801cc60:	6033      	str	r3, [r6, #0]
 801cc62:	6803      	ldr	r3, [r0, #0]
 801cc64:	b10b      	cbz	r3, 801cc6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801cc66:	3302      	adds	r3, #2
 801cc68:	6003      	str	r3, [r0, #0]
 801cc6a:	680b      	ldr	r3, [r1, #0]
 801cc6c:	b10b      	cbz	r3, 801cc72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801cc6e:	3301      	adds	r3, #1
 801cc70:	600b      	str	r3, [r1, #0]
 801cc72:	6803      	ldr	r3, [r0, #0]
 801cc74:	b10b      	cbz	r3, 801cc7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801cc76:	881c      	ldrh	r4, [r3, #0]
 801cc78:	e7e9      	b.n	801cc4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cc7a:	680c      	ldr	r4, [r1, #0]
 801cc7c:	2c00      	cmp	r4, #0
 801cc7e:	d0e6      	beq.n	801cc4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cc80:	7824      	ldrb	r4, [r4, #0]
 801cc82:	e7e4      	b.n	801cc4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cc84:	680b      	ldr	r3, [r1, #0]
 801cc86:	b10b      	cbz	r3, 801cc8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801cc88:	781b      	ldrb	r3, [r3, #0]
 801cc8a:	e7c5      	b.n	801cc18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	240a      	movs	r4, #10
 801cc90:	602a      	str	r2, [r5, #0]
 801cc92:	3b30      	subs	r3, #48	@ 0x30
 801cc94:	682a      	ldr	r2, [r5, #0]
 801cc96:	b29e      	uxth	r6, r3
 801cc98:	2e09      	cmp	r6, #9
 801cc9a:	d813      	bhi.n	801ccc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801cc9c:	fb04 3302 	mla	r3, r4, r2, r3
 801cca0:	602b      	str	r3, [r5, #0]
 801cca2:	6803      	ldr	r3, [r0, #0]
 801cca4:	b10b      	cbz	r3, 801ccaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801cca6:	3302      	adds	r3, #2
 801cca8:	6003      	str	r3, [r0, #0]
 801ccaa:	680b      	ldr	r3, [r1, #0]
 801ccac:	b10b      	cbz	r3, 801ccb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ccae:	3301      	adds	r3, #1
 801ccb0:	600b      	str	r3, [r1, #0]
 801ccb2:	6803      	ldr	r3, [r0, #0]
 801ccb4:	b10b      	cbz	r3, 801ccba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801ccb6:	881b      	ldrh	r3, [r3, #0]
 801ccb8:	e7eb      	b.n	801cc92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ccba:	680b      	ldr	r3, [r1, #0]
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d0e8      	beq.n	801cc92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ccc0:	781b      	ldrb	r3, [r3, #0]
 801ccc2:	e7e6      	b.n	801cc92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ccc4:	2a06      	cmp	r2, #6
 801ccc6:	bfa8      	it	ge
 801ccc8:	2206      	movge	r2, #6
 801ccca:	602a      	str	r2, [r5, #0]
 801cccc:	e7b1      	b.n	801cc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801ccce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccd2:	b0a3      	sub	sp, #140	@ 0x8c
 801ccd4:	2600      	movs	r6, #0
 801ccd6:	4607      	mov	r7, r0
 801ccd8:	4688      	mov	r8, r1
 801ccda:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801ccde:	4631      	mov	r1, r6
 801cce0:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801cce2:	4648      	mov	r0, r9
 801cce4:	960d      	str	r6, [sp, #52]	@ 0x34
 801cce6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ccea:	2242      	movs	r2, #66	@ 0x42
 801ccec:	f00b ff04 	bl	8028af8 <memset>
 801ccf0:	b15f      	cbz	r7, 801cd0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ccf2:	f108 3aff 	add.w	sl, r8, #4294967295
 801ccf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ccf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ccfa:	b152      	cbz	r2, 801cd12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ccfc:	8812      	ldrh	r2, [r2, #0]
 801ccfe:	b10a      	cbz	r2, 801cd04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cd00:	459a      	cmp	sl, r3
 801cd02:	dc2e      	bgt.n	801cd62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801cd04:	2200      	movs	r2, #0
 801cd06:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cd0a:	4638      	mov	r0, r7
 801cd0c:	b023      	add	sp, #140	@ 0x8c
 801cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd12:	9a08      	ldr	r2, [sp, #32]
 801cd14:	2a00      	cmp	r2, #0
 801cd16:	d0f5      	beq.n	801cd04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cd18:	7812      	ldrb	r2, [r2, #0]
 801cd1a:	e7f0      	b.n	801ccfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801cd1c:	2d00      	cmp	r5, #0
 801cd1e:	d0ea      	beq.n	801ccf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cd20:	782a      	ldrb	r2, [r5, #0]
 801cd22:	b142      	cbz	r2, 801cd36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801cd24:	2a25      	cmp	r2, #37	@ 0x25
 801cd26:	d001      	beq.n	801cd2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801cd28:	459a      	cmp	sl, r3
 801cd2a:	dc08      	bgt.n	801cd3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801cd2c:	f1bb 0f00 	cmp.w	fp, #0
 801cd30:	d121      	bne.n	801cd76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801cd32:	2d00      	cmp	r5, #0
 801cd34:	d0df      	beq.n	801ccf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cd36:	782a      	ldrb	r2, [r5, #0]
 801cd38:	f04f 0b00 	mov.w	fp, #0
 801cd3c:	e01d      	b.n	801cd7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801cd3e:	f1bb 0f00 	cmp.w	fp, #0
 801cd42:	d077      	beq.n	801ce34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801cd44:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd48:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cd4c:	f1bb 0f00 	cmp.w	fp, #0
 801cd50:	d002      	beq.n	801cd58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801cd52:	f10b 0202 	add.w	r2, fp, #2
 801cd56:	9209      	str	r2, [sp, #36]	@ 0x24
 801cd58:	b10d      	cbz	r5, 801cd5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801cd5a:	3501      	adds	r5, #1
 801cd5c:	9508      	str	r5, [sp, #32]
 801cd5e:	3301      	adds	r3, #1
 801cd60:	930d      	str	r3, [sp, #52]	@ 0x34
 801cd62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cd64:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801cd68:	f1bb 0f00 	cmp.w	fp, #0
 801cd6c:	d0d6      	beq.n	801cd1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801cd6e:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd72:	2a00      	cmp	r2, #0
 801cd74:	d1d6      	bne.n	801cd24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801cd76:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd7a:	2a00      	cmp	r2, #0
 801cd7c:	d0bb      	beq.n	801ccf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cd7e:	459a      	cmp	sl, r3
 801cd80:	ddb9      	ble.n	801ccf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cd82:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801cd86:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801cd8a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801cd8e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801cd92:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801cd96:	960e      	str	r6, [sp, #56]	@ 0x38
 801cd98:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801cd9c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801cd9e:	f1bb 0f00 	cmp.w	fp, #0
 801cda2:	d002      	beq.n	801cdaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801cda4:	f10b 0302 	add.w	r3, fp, #2
 801cda8:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdaa:	b10d      	cbz	r5, 801cdb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801cdac:	1c6b      	adds	r3, r5, #1
 801cdae:	9308      	str	r3, [sp, #32]
 801cdb0:	ab0f      	add	r3, sp, #60	@ 0x3c
 801cdb2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801cdb6:	a908      	add	r1, sp, #32
 801cdb8:	a809      	add	r0, sp, #36	@ 0x24
 801cdba:	9305      	str	r3, [sp, #20]
 801cdbc:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801cdc0:	9304      	str	r3, [sp, #16]
 801cdc2:	ab0e      	add	r3, sp, #56	@ 0x38
 801cdc4:	9303      	str	r3, [sp, #12]
 801cdc6:	ab0c      	add	r3, sp, #48	@ 0x30
 801cdc8:	9302      	str	r3, [sp, #8]
 801cdca:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801cdce:	9301      	str	r3, [sp, #4]
 801cdd0:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801cdd4:	9300      	str	r3, [sp, #0]
 801cdd6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801cdda:	f7ff fea8 	bl	801cb2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801cdde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	bfbf      	itttt	lt
 801cde4:	6823      	ldrlt	r3, [r4, #0]
 801cde6:	3404      	addlt	r4, #4
 801cde8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cdec:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801cdee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	bfbe      	ittt	lt
 801cdf4:	6823      	ldrlt	r3, [r4, #0]
 801cdf6:	3404      	addlt	r4, #4
 801cdf8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cdfc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ce00:	bfb8      	it	lt
 801ce02:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801ce04:	b1d9      	cbz	r1, 801ce3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801ce06:	880b      	ldrh	r3, [r1, #0]
 801ce08:	2b69      	cmp	r3, #105	@ 0x69
 801ce0a:	d01f      	beq.n	801ce4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce0c:	d82f      	bhi.n	801ce6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801ce0e:	2b58      	cmp	r3, #88	@ 0x58
 801ce10:	d01c      	beq.n	801ce4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce12:	d818      	bhi.n	801ce46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801ce14:	2b25      	cmp	r3, #37	@ 0x25
 801ce16:	d034      	beq.n	801ce82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801ce18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce1a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801ce1e:	f1bb 0f00 	cmp.w	fp, #0
 801ce22:	f000 80b7 	beq.w	801cf94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801ce26:	f8bb 5000 	ldrh.w	r5, [fp]
 801ce2a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801ce2e:	3301      	adds	r3, #1
 801ce30:	930d      	str	r3, [sp, #52]	@ 0x34
 801ce32:	e029      	b.n	801ce88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ce34:	b10d      	cbz	r5, 801ce3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ce36:	782a      	ldrb	r2, [r5, #0]
 801ce38:	e786      	b.n	801cd48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ce3a:	462a      	mov	r2, r5
 801ce3c:	e784      	b.n	801cd48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ce3e:	2a00      	cmp	r2, #0
 801ce40:	d0ea      	beq.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ce42:	7813      	ldrb	r3, [r2, #0]
 801ce44:	e7e0      	b.n	801ce08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801ce46:	3b63      	subs	r3, #99	@ 0x63
 801ce48:	2b01      	cmp	r3, #1
 801ce4a:	d8e5      	bhi.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ce4c:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801ce50:	b329      	cbz	r1, 801ce9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801ce52:	880b      	ldrh	r3, [r1, #0]
 801ce54:	2b69      	cmp	r3, #105	@ 0x69
 801ce56:	d063      	beq.n	801cf20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ce58:	d825      	bhi.n	801cea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801ce5a:	2b63      	cmp	r3, #99	@ 0x63
 801ce5c:	d038      	beq.n	801ced0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801ce5e:	2b64      	cmp	r3, #100	@ 0x64
 801ce60:	d05e      	beq.n	801cf20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ce62:	2b58      	cmp	r3, #88	@ 0x58
 801ce64:	d07a      	beq.n	801cf5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801ce66:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801ce6a:	4625      	mov	r5, r4
 801ce6c:	e036      	b.n	801cedc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ce6e:	2b73      	cmp	r3, #115	@ 0x73
 801ce70:	d0ec      	beq.n	801ce4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce72:	d802      	bhi.n	801ce7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ce74:	2b6f      	cmp	r3, #111	@ 0x6f
 801ce76:	d1cf      	bne.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ce78:	e7e8      	b.n	801ce4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce7a:	2b75      	cmp	r3, #117	@ 0x75
 801ce7c:	d0e6      	beq.n	801ce4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce7e:	2b78      	cmp	r3, #120	@ 0x78
 801ce80:	e7f9      	b.n	801ce76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ce82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ce84:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ce88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce8a:	b10b      	cbz	r3, 801ce90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801ce8c:	3302      	adds	r3, #2
 801ce8e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce90:	9b08      	ldr	r3, [sp, #32]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	f43f af2f 	beq.w	801ccf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ce98:	3301      	adds	r3, #1
 801ce9a:	9308      	str	r3, [sp, #32]
 801ce9c:	e72b      	b.n	801ccf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ce9e:	2a00      	cmp	r2, #0
 801cea0:	d0e1      	beq.n	801ce66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801cea2:	7813      	ldrb	r3, [r2, #0]
 801cea4:	e7d6      	b.n	801ce54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801cea6:	2b73      	cmp	r3, #115	@ 0x73
 801cea8:	d036      	beq.n	801cf18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ceaa:	d807      	bhi.n	801cebc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ceac:	2b6f      	cmp	r3, #111	@ 0x6f
 801ceae:	d1da      	bne.n	801ce66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ceb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ceb2:	1d25      	adds	r5, r4, #4
 801ceb4:	2308      	movs	r3, #8
 801ceb6:	eba8 0202 	sub.w	r2, r8, r2
 801ceba:	e049      	b.n	801cf50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801cebc:	2b75      	cmp	r3, #117	@ 0x75
 801cebe:	d042      	beq.n	801cf46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801cec0:	2b78      	cmp	r3, #120	@ 0x78
 801cec2:	d1d0      	bne.n	801ce66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801cec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cec6:	1d25      	adds	r5, r4, #4
 801cec8:	2310      	movs	r3, #16
 801ceca:	eba8 0202 	sub.w	r2, r8, r2
 801cece:	e03f      	b.n	801cf50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ced0:	6823      	ldr	r3, [r4, #0]
 801ced2:	1d25      	adds	r5, r4, #4
 801ced4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801ced8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801cedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cede:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d051      	beq.n	801cf8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801cee6:	881a      	ldrh	r2, [r3, #0]
 801cee8:	a80d      	add	r0, sp, #52	@ 0x34
 801ceea:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801ceee:	462c      	mov	r4, r5
 801cef0:	9005      	str	r0, [sp, #20]
 801cef2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801cef6:	9004      	str	r0, [sp, #16]
 801cef8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801cefa:	9003      	str	r0, [sp, #12]
 801cefc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801cf00:	9002      	str	r0, [sp, #8]
 801cf02:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cf04:	9001      	str	r0, [sp, #4]
 801cf06:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801cf0a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801cf0e:	9000      	str	r0, [sp, #0]
 801cf10:	a810      	add	r0, sp, #64	@ 0x40
 801cf12:	f7ff fd49 	bl	801c9a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801cf16:	e7b7      	b.n	801ce88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801cf18:	1d25      	adds	r5, r4, #4
 801cf1a:	6823      	ldr	r3, [r4, #0]
 801cf1c:	9310      	str	r3, [sp, #64]	@ 0x40
 801cf1e:	e7dd      	b.n	801cedc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801cf20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cf22:	230a      	movs	r3, #10
 801cf24:	4649      	mov	r1, r9
 801cf26:	6820      	ldr	r0, [r4, #0]
 801cf28:	eba8 0202 	sub.w	r2, r8, r2
 801cf2c:	1d25      	adds	r5, r4, #4
 801cf2e:	b292      	uxth	r2, r2
 801cf30:	f7ff fcf0 	bl	801c914 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801cf34:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801cf38:	2b2d      	cmp	r3, #45	@ 0x2d
 801cf3a:	d1cf      	bne.n	801cedc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801cf3c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801cf40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf42:	3302      	adds	r3, #2
 801cf44:	e7ea      	b.n	801cf1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801cf46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cf48:	1d25      	adds	r5, r4, #4
 801cf4a:	230a      	movs	r3, #10
 801cf4c:	eba8 0202 	sub.w	r2, r8, r2
 801cf50:	b292      	uxth	r2, r2
 801cf52:	4649      	mov	r1, r9
 801cf54:	6820      	ldr	r0, [r4, #0]
 801cf56:	f7ff fd09 	bl	801c96c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801cf5a:	e7bf      	b.n	801cedc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801cf5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cf5e:	2310      	movs	r3, #16
 801cf60:	4649      	mov	r1, r9
 801cf62:	6820      	ldr	r0, [r4, #0]
 801cf64:	eba8 0202 	sub.w	r2, r8, r2
 801cf68:	1d25      	adds	r5, r4, #4
 801cf6a:	b292      	uxth	r2, r2
 801cf6c:	f7ff fcfe 	bl	801c96c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801cf70:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801cf74:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d0af      	beq.n	801cedc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801cf7c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801cf80:	2919      	cmp	r1, #25
 801cf82:	d8f7      	bhi.n	801cf74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801cf84:	3b20      	subs	r3, #32
 801cf86:	8013      	strh	r3, [r2, #0]
 801cf88:	e7f4      	b.n	801cf74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801cf8a:	9a08      	ldr	r2, [sp, #32]
 801cf8c:	2a00      	cmp	r2, #0
 801cf8e:	d0ab      	beq.n	801cee8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801cf90:	7812      	ldrb	r2, [r2, #0]
 801cf92:	e7a9      	b.n	801cee8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801cf94:	2d00      	cmp	r5, #0
 801cf96:	f43f af48 	beq.w	801ce2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801cf9a:	782d      	ldrb	r5, [r5, #0]
 801cf9c:	e745      	b.n	801ce2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801cf9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801cf9e:	b507      	push	{r0, r1, r2, lr}
 801cfa0:	9300      	str	r3, [sp, #0]
 801cfa2:	4613      	mov	r3, r2
 801cfa4:	2200      	movs	r2, #0
 801cfa6:	f7ff fe92 	bl	801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801cfaa:	b003      	add	sp, #12
 801cfac:	f85d fb04 	ldr.w	pc, [sp], #4

0801cfb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801cfb0:	b40c      	push	{r2, r3}
 801cfb2:	b507      	push	{r0, r1, r2, lr}
 801cfb4:	ab04      	add	r3, sp, #16
 801cfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfba:	9301      	str	r3, [sp, #4]
 801cfbc:	f7ff ffef 	bl	801cf9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801cfc0:	b003      	add	sp, #12
 801cfc2:	f85d eb04 	ldr.w	lr, [sp], #4
 801cfc6:	b002      	add	sp, #8
 801cfc8:	4770      	bx	lr
	...

0801cfcc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cfcc:	4b01      	ldr	r3, [pc, #4]	@ (801cfd4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cfce:	6018      	str	r0, [r3, #0]
 801cfd0:	4770      	bx	lr
 801cfd2:	bf00      	nop
 801cfd4:	24028550 	.word	0x24028550

0801cfd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801cfd8:	4b06      	ldr	r3, [pc, #24]	@ (801cff4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801cfda:	881a      	ldrh	r2, [r3, #0]
 801cfdc:	4282      	cmp	r2, r0
 801cfde:	d807      	bhi.n	801cff0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801cfe0:	4b05      	ldr	r3, [pc, #20]	@ (801cff8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801cfe2:	881b      	ldrh	r3, [r3, #0]
 801cfe4:	4413      	add	r3, r2
 801cfe6:	4298      	cmp	r0, r3
 801cfe8:	bfac      	ite	ge
 801cfea:	2000      	movge	r0, #0
 801cfec:	2001      	movlt	r0, #1
 801cfee:	4770      	bx	lr
 801cff0:	2000      	movs	r0, #0
 801cff2:	4770      	bx	lr
 801cff4:	24028570 	.word	0x24028570
 801cff8:	24028574 	.word	0x24028574

0801cffc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cffc:	b508      	push	{r3, lr}
 801cffe:	4601      	mov	r1, r0
 801d000:	f7ff ffea 	bl	801cfd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d004:	b118      	cbz	r0, 801d00e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801d006:	4b02      	ldr	r3, [pc, #8]	@ (801d010 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d00e:	bd08      	pop	{r3, pc}
 801d010:	24028554 	.word	0x24028554

0801d014 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801d014:	b538      	push	{r3, r4, r5, lr}
 801d016:	4604      	mov	r4, r0
 801d018:	f7ff ffde 	bl	801cfd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d01c:	b1d8      	cbz	r0, 801d056 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801d01e:	4b0f      	ldr	r3, [pc, #60]	@ (801d05c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801d020:	881b      	ldrh	r3, [r3, #0]
 801d022:	1ae4      	subs	r4, r4, r3
 801d024:	230e      	movs	r3, #14
 801d026:	4363      	muls	r3, r4
 801d028:	4c0d      	ldr	r4, [pc, #52]	@ (801d060 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801d02a:	6825      	ldr	r5, [r4, #0]
 801d02c:	18ea      	adds	r2, r5, r3
 801d02e:	7b12      	ldrb	r2, [r2, #12]
 801d030:	f012 0220 	ands.w	r2, r2, #32
 801d034:	d010      	beq.n	801d058 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801d036:	f9b1 2000 	ldrsh.w	r2, [r1]
 801d03a:	52ea      	strh	r2, [r5, r3]
 801d03c:	6822      	ldr	r2, [r4, #0]
 801d03e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801d042:	441a      	add	r2, r3
 801d044:	8055      	strh	r5, [r2, #2]
 801d046:	6822      	ldr	r2, [r4, #0]
 801d048:	4413      	add	r3, r2
 801d04a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801d04e:	809a      	strh	r2, [r3, #4]
 801d050:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801d054:	80da      	strh	r2, [r3, #6]
 801d056:	bd38      	pop	{r3, r4, r5, pc}
 801d058:	4610      	mov	r0, r2
 801d05a:	e7fc      	b.n	801d056 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801d05c:	24028570 	.word	0x24028570
 801d060:	24028558 	.word	0x24028558

0801d064 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801d064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d068:	4606      	mov	r6, r0
 801d06a:	460c      	mov	r4, r1
 801d06c:	f7ff ffb4 	bl	801cfd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d070:	b918      	cbnz	r0, 801d07a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801d072:	2000      	movs	r0, #0
 801d074:	b002      	add	sp, #8
 801d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d07a:	4608      	mov	r0, r1
 801d07c:	f7f4 ff3b 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d080:	2800      	cmp	r0, #0
 801d082:	d1f6      	bne.n	801d072 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d084:	4b3f      	ldr	r3, [pc, #252]	@ (801d184 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801d086:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801d188 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801d08a:	881d      	ldrh	r5, [r3, #0]
 801d08c:	f8d9 a000 	ldr.w	sl, [r9]
 801d090:	46c8      	mov	r8, r9
 801d092:	1b73      	subs	r3, r6, r5
 801d094:	250e      	movs	r5, #14
 801d096:	435d      	muls	r5, r3
 801d098:	eb0a 0705 	add.w	r7, sl, r5
 801d09c:	7b3b      	ldrb	r3, [r7, #12]
 801d09e:	f013 0f20 	tst.w	r3, #32
 801d0a2:	d0e6      	beq.n	801d072 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d0a4:	4621      	mov	r1, r4
 801d0a6:	4638      	mov	r0, r7
 801d0a8:	f7fc fb28 	bl	80196fc <_ZNK8touchgfx4Rect8includesERKS0_>
 801d0ac:	2800      	cmp	r0, #0
 801d0ae:	d1e1      	bne.n	801d074 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d0b0:	4639      	mov	r1, r7
 801d0b2:	4620      	mov	r0, r4
 801d0b4:	f7fc fb22 	bl	80196fc <_ZNK8touchgfx4Rect8includesERKS0_>
 801d0b8:	b108      	cbz	r0, 801d0be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801d0ba:	4621      	mov	r1, r4
 801d0bc:	e020      	b.n	801d100 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801d0be:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d0c2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801d0c6:	429a      	cmp	r2, r3
 801d0c8:	d11e      	bne.n	801d108 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d0ca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d0ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d0d2:	429a      	cmp	r2, r3
 801d0d4:	d118      	bne.n	801d108 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d0d6:	6820      	ldr	r0, [r4, #0]
 801d0d8:	466b      	mov	r3, sp
 801d0da:	6861      	ldr	r1, [r4, #4]
 801d0dc:	c303      	stmia	r3!, {r0, r1}
 801d0de:	4639      	mov	r1, r7
 801d0e0:	4668      	mov	r0, sp
 801d0e2:	f7f5 fa47 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d0e6:	f8d9 3000 	ldr.w	r3, [r9]
 801d0ea:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d0ee:	442b      	add	r3, r5
 801d0f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d0f4:	4413      	add	r3, r2
 801d0f6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801d0fa:	4293      	cmp	r3, r2
 801d0fc:	dc04      	bgt.n	801d108 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d0fe:	4669      	mov	r1, sp
 801d100:	4630      	mov	r0, r6
 801d102:	f7ff ff87 	bl	801d014 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801d106:	e7b5      	b.n	801d074 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d108:	f8d8 3000 	ldr.w	r3, [r8]
 801d10c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d110:	442b      	add	r3, r5
 801d112:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d116:	4291      	cmp	r1, r2
 801d118:	d119      	bne.n	801d14e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d11a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d11e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d122:	4291      	cmp	r1, r2
 801d124:	d113      	bne.n	801d14e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d126:	6820      	ldr	r0, [r4, #0]
 801d128:	466a      	mov	r2, sp
 801d12a:	6861      	ldr	r1, [r4, #4]
 801d12c:	c203      	stmia	r2!, {r0, r1}
 801d12e:	4619      	mov	r1, r3
 801d130:	4668      	mov	r0, sp
 801d132:	f7f5 fa1f 	bl	8012574 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d136:	f8d8 3000 	ldr.w	r3, [r8]
 801d13a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d13e:	442b      	add	r3, r5
 801d140:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d144:	4413      	add	r3, r2
 801d146:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d14a:	4293      	cmp	r3, r2
 801d14c:	ddd7      	ble.n	801d0fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801d14e:	4620      	mov	r0, r4
 801d150:	f7f4 fed1 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d154:	b990      	cbnz	r0, 801d17c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801d156:	88a7      	ldrh	r7, [r4, #4]
 801d158:	88e3      	ldrh	r3, [r4, #6]
 801d15a:	fb17 f703 	smulbb	r7, r7, r3
 801d15e:	f8d8 3000 	ldr.w	r3, [r8]
 801d162:	441d      	add	r5, r3
 801d164:	4628      	mov	r0, r5
 801d166:	f7f4 fec6 	bl	8011ef6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d16a:	b948      	cbnz	r0, 801d180 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801d16c:	88ab      	ldrh	r3, [r5, #4]
 801d16e:	88ea      	ldrh	r2, [r5, #6]
 801d170:	fb13 f302 	smulbb	r3, r3, r2
 801d174:	42bb      	cmp	r3, r7
 801d176:	f6bf af7c 	bge.w	801d072 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d17a:	e79e      	b.n	801d0ba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801d17c:	2700      	movs	r7, #0
 801d17e:	e7ee      	b.n	801d15e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801d180:	2300      	movs	r3, #0
 801d182:	e7f7      	b.n	801d174 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801d184:	24028570 	.word	0x24028570
 801d188:	24028558 	.word	0x24028558

0801d18c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d18e:	4c24      	ldr	r4, [pc, #144]	@ (801d220 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801d190:	6823      	ldr	r3, [r4, #0]
 801d192:	2b00      	cmp	r3, #0
 801d194:	d042      	beq.n	801d21c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d196:	4a23      	ldr	r2, [pc, #140]	@ (801d224 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801d198:	4d23      	ldr	r5, [pc, #140]	@ (801d228 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801d19a:	8811      	ldrh	r1, [r2, #0]
 801d19c:	f8b5 c000 	ldrh.w	ip, [r5]
 801d1a0:	4822      	ldr	r0, [pc, #136]	@ (801d22c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801d1a2:	4461      	add	r1, ip
 801d1a4:	1c4a      	adds	r2, r1, #1
 801d1a6:	008f      	lsls	r7, r1, #2
 801d1a8:	f022 0201 	bic.w	r2, r2, #1
 801d1ac:	19de      	adds	r6, r3, r7
 801d1ae:	0412      	lsls	r2, r2, #16
 801d1b0:	6006      	str	r6, [r0, #0]
 801d1b2:	4e1f      	ldr	r6, [pc, #124]	@ (801d230 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801d1b4:	0c12      	lsrs	r2, r2, #16
 801d1b6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801d1ba:	19da      	adds	r2, r3, r7
 801d1bc:	6032      	str	r2, [r6, #0]
 801d1be:	220e      	movs	r2, #14
 801d1c0:	fb02 f20c 	mul.w	r2, r2, ip
 801d1c4:	3203      	adds	r2, #3
 801d1c6:	f022 0203 	bic.w	r2, r2, #3
 801d1ca:	443a      	add	r2, r7
 801d1cc:	4f19      	ldr	r7, [pc, #100]	@ (801d234 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d1ce:	4413      	add	r3, r2
 801d1d0:	603b      	str	r3, [r7, #0]
 801d1d2:	2300      	movs	r3, #0
 801d1d4:	4f18      	ldr	r7, [pc, #96]	@ (801d238 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d1d6:	469c      	mov	ip, r3
 801d1d8:	803b      	strh	r3, [r7, #0]
 801d1da:	4f18      	ldr	r7, [pc, #96]	@ (801d23c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d1dc:	683f      	ldr	r7, [r7, #0]
 801d1de:	1aba      	subs	r2, r7, r2
 801d1e0:	4f17      	ldr	r7, [pc, #92]	@ (801d240 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d1e2:	603a      	str	r2, [r7, #0]
 801d1e4:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801d1e8:	4a16      	ldr	r2, [pc, #88]	@ (801d244 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d1ea:	8013      	strh	r3, [r2, #0]
 801d1ec:	428b      	cmp	r3, r1
 801d1ee:	d10d      	bne.n	801d20c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801d1f0:	882d      	ldrh	r5, [r5, #0]
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	6830      	ldr	r0, [r6, #0]
 801d1f6:	240e      	movs	r4, #14
 801d1f8:	429d      	cmp	r5, r3
 801d1fa:	d90f      	bls.n	801d21c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d1fc:	fb04 0203 	mla	r2, r4, r3, r0
 801d200:	3301      	adds	r3, #1
 801d202:	7b11      	ldrb	r1, [r2, #12]
 801d204:	f36f 1145 	bfc	r1, #5, #1
 801d208:	7311      	strb	r1, [r2, #12]
 801d20a:	e7f5      	b.n	801d1f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801d20c:	6822      	ldr	r2, [r4, #0]
 801d20e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d212:	6802      	ldr	r2, [r0, #0]
 801d214:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801d218:	3301      	adds	r3, #1
 801d21a:	e7e7      	b.n	801d1ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801d21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d21e:	bf00      	nop
 801d220:	24028554 	.word	0x24028554
 801d224:	24028570 	.word	0x24028570
 801d228:	24028574 	.word	0x24028574
 801d22c:	24028568 	.word	0x24028568
 801d230:	24028558 	.word	0x24028558
 801d234:	24028560 	.word	0x24028560
 801d238:	24028572 	.word	0x24028572
 801d23c:	2402855c 	.word	0x2402855c
 801d240:	2402856c 	.word	0x2402856c
 801d244:	24028564 	.word	0x24028564

0801d248 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d248:	4b06      	ldr	r3, [pc, #24]	@ (801d264 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	b943      	cbnz	r3, 801d260 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d24e:	b139      	cbz	r1, 801d260 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d250:	4b05      	ldr	r3, [pc, #20]	@ (801d268 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801d252:	801a      	strh	r2, [r3, #0]
 801d254:	4b05      	ldr	r3, [pc, #20]	@ (801d26c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801d256:	6019      	str	r1, [r3, #0]
 801d258:	4b05      	ldr	r3, [pc, #20]	@ (801d270 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801d25a:	6018      	str	r0, [r3, #0]
 801d25c:	f7ff bf96 	b.w	801d18c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d260:	4770      	bx	lr
 801d262:	bf00      	nop
 801d264:	24028560 	.word	0x24028560
 801d268:	24028574 	.word	0x24028574
 801d26c:	2402855c 	.word	0x2402855c
 801d270:	24028554 	.word	0x24028554

0801d274 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d274:	b470      	push	{r4, r5, r6}
 801d276:	4c07      	ldr	r4, [pc, #28]	@ (801d294 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d278:	4605      	mov	r5, r0
 801d27a:	4610      	mov	r0, r2
 801d27c:	9a03      	ldr	r2, [sp, #12]
 801d27e:	6826      	ldr	r6, [r4, #0]
 801d280:	b936      	cbnz	r6, 801d290 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d282:	6025      	str	r5, [r4, #0]
 801d284:	4c04      	ldr	r4, [pc, #16]	@ (801d298 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d286:	8021      	strh	r1, [r4, #0]
 801d288:	4619      	mov	r1, r3
 801d28a:	bc70      	pop	{r4, r5, r6}
 801d28c:	f7ff bfdc 	b.w	801d248 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d290:	bc70      	pop	{r4, r5, r6}
 801d292:	4770      	bx	lr
 801d294:	24028578 	.word	0x24028578
 801d298:	24028570 	.word	0x24028570

0801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d29c:	4a12      	ldr	r2, [pc, #72]	@ (801d2e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801d29e:	8803      	ldrh	r3, [r0, #0]
 801d2a0:	8812      	ldrh	r2, [r2, #0]
 801d2a2:	4293      	cmp	r3, r2
 801d2a4:	d207      	bcs.n	801d2b6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801d2a6:	4a11      	ldr	r2, [pc, #68]	@ (801d2ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801d2a8:	2114      	movs	r1, #20
 801d2aa:	6812      	ldr	r2, [r2, #0]
 801d2ac:	fb01 2303 	mla	r3, r1, r3, r2
 801d2b0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801d2b4:	4770      	bx	lr
 801d2b6:	490e      	ldr	r1, [pc, #56]	@ (801d2f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d2b8:	8809      	ldrh	r1, [r1, #0]
 801d2ba:	4411      	add	r1, r2
 801d2bc:	428b      	cmp	r3, r1
 801d2be:	da04      	bge.n	801d2ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801d2c0:	1a9b      	subs	r3, r3, r2
 801d2c2:	4a0c      	ldr	r2, [pc, #48]	@ (801d2f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d2c4:	210e      	movs	r1, #14
 801d2c6:	6812      	ldr	r2, [r2, #0]
 801d2c8:	e7f0      	b.n	801d2ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801d2ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d2ce:	4293      	cmp	r3, r2
 801d2d0:	d108      	bne.n	801d2e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801d2d2:	4b09      	ldr	r3, [pc, #36]	@ (801d2f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d2d4:	781b      	ldrb	r3, [r3, #0]
 801d2d6:	b91b      	cbnz	r3, 801d2e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801d2d8:	4b08      	ldr	r3, [pc, #32]	@ (801d2fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d2da:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d2de:	4770      	bx	lr
 801d2e0:	4b07      	ldr	r3, [pc, #28]	@ (801d300 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d2e2:	e7fa      	b.n	801d2da <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801d2e4:	2000      	movs	r0, #0
 801d2e6:	4770      	bx	lr
 801d2e8:	24028570 	.word	0x24028570
 801d2ec:	24028578 	.word	0x24028578
 801d2f0:	24028574 	.word	0x24028574
 801d2f4:	24028558 	.word	0x24028558
 801d2f8:	240284e0 	.word	0x240284e0
 801d2fc:	240284e2 	.word	0x240284e2
 801d300:	240284e4 	.word	0x240284e4

0801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d304:	4a12      	ldr	r2, [pc, #72]	@ (801d350 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801d306:	8803      	ldrh	r3, [r0, #0]
 801d308:	8812      	ldrh	r2, [r2, #0]
 801d30a:	4293      	cmp	r3, r2
 801d30c:	d207      	bcs.n	801d31e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801d30e:	4a11      	ldr	r2, [pc, #68]	@ (801d354 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801d310:	2114      	movs	r1, #20
 801d312:	6812      	ldr	r2, [r2, #0]
 801d314:	fb01 2303 	mla	r3, r1, r3, r2
 801d318:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801d31c:	4770      	bx	lr
 801d31e:	490e      	ldr	r1, [pc, #56]	@ (801d358 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d320:	8809      	ldrh	r1, [r1, #0]
 801d322:	4411      	add	r1, r2
 801d324:	428b      	cmp	r3, r1
 801d326:	da04      	bge.n	801d332 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801d328:	1a9b      	subs	r3, r3, r2
 801d32a:	4a0c      	ldr	r2, [pc, #48]	@ (801d35c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d32c:	210e      	movs	r1, #14
 801d32e:	6812      	ldr	r2, [r2, #0]
 801d330:	e7f0      	b.n	801d314 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801d332:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d336:	4293      	cmp	r3, r2
 801d338:	d108      	bne.n	801d34c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801d33a:	4b09      	ldr	r3, [pc, #36]	@ (801d360 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d33c:	781b      	ldrb	r3, [r3, #0]
 801d33e:	b91b      	cbnz	r3, 801d348 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801d340:	4b08      	ldr	r3, [pc, #32]	@ (801d364 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d342:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d346:	4770      	bx	lr
 801d348:	4b07      	ldr	r3, [pc, #28]	@ (801d368 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d34a:	e7fa      	b.n	801d342 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801d34c:	2000      	movs	r0, #0
 801d34e:	4770      	bx	lr
 801d350:	24028570 	.word	0x24028570
 801d354:	24028578 	.word	0x24028578
 801d358:	24028574 	.word	0x24028574
 801d35c:	24028558 	.word	0x24028558
 801d360:	240284e0 	.word	0x240284e0
 801d364:	240284e4 	.word	0x240284e4
 801d368:	240284e2 	.word	0x240284e2

0801d36c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d36c:	4a22      	ldr	r2, [pc, #136]	@ (801d3f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801d36e:	b530      	push	{r4, r5, lr}
 801d370:	880b      	ldrh	r3, [r1, #0]
 801d372:	8812      	ldrh	r2, [r2, #0]
 801d374:	4293      	cmp	r3, r2
 801d376:	d213      	bcs.n	801d3a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801d378:	4a20      	ldr	r2, [pc, #128]	@ (801d3fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d37a:	2114      	movs	r1, #20
 801d37c:	6812      	ldr	r2, [r2, #0]
 801d37e:	fb01 2303 	mla	r3, r1, r3, r2
 801d382:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d386:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d38a:	8a1a      	ldrh	r2, [r3, #16]
 801d38c:	8a5b      	ldrh	r3, [r3, #18]
 801d38e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d392:	8004      	strh	r4, [r0, #0]
 801d394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d398:	8041      	strh	r1, [r0, #2]
 801d39a:	8082      	strh	r2, [r0, #4]
 801d39c:	80c3      	strh	r3, [r0, #6]
 801d39e:	e024      	b.n	801d3ea <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801d3a0:	4917      	ldr	r1, [pc, #92]	@ (801d400 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d3a2:	8809      	ldrh	r1, [r1, #0]
 801d3a4:	4411      	add	r1, r2
 801d3a6:	428b      	cmp	r3, r1
 801d3a8:	da10      	bge.n	801d3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801d3aa:	1a9b      	subs	r3, r3, r2
 801d3ac:	220e      	movs	r2, #14
 801d3ae:	4353      	muls	r3, r2
 801d3b0:	4a14      	ldr	r2, [pc, #80]	@ (801d404 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d3b2:	6811      	ldr	r1, [r2, #0]
 801d3b4:	18ca      	adds	r2, r1, r3
 801d3b6:	5ecd      	ldrsh	r5, [r1, r3]
 801d3b8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801d3bc:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801d3c0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801d3c4:	8005      	strh	r5, [r0, #0]
 801d3c6:	8044      	strh	r4, [r0, #2]
 801d3c8:	8081      	strh	r1, [r0, #4]
 801d3ca:	e7e7      	b.n	801d39c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801d3cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d3d0:	4293      	cmp	r3, r2
 801d3d2:	d10b      	bne.n	801d3ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801d3d4:	4b0c      	ldr	r3, [pc, #48]	@ (801d408 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d3d6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d3da:	4b0c      	ldr	r3, [pc, #48]	@ (801d40c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d3dc:	8081      	strh	r1, [r0, #4]
 801d3de:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	80c2      	strh	r2, [r0, #6]
 801d3e6:	8003      	strh	r3, [r0, #0]
 801d3e8:	8043      	strh	r3, [r0, #2]
 801d3ea:	bd30      	pop	{r4, r5, pc}
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	8003      	strh	r3, [r0, #0]
 801d3f0:	8043      	strh	r3, [r0, #2]
 801d3f2:	8083      	strh	r3, [r0, #4]
 801d3f4:	e7d2      	b.n	801d39c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801d3f6:	bf00      	nop
 801d3f8:	24028570 	.word	0x24028570
 801d3fc:	24028578 	.word	0x24028578
 801d400:	24028574 	.word	0x24028574
 801d404:	24028558 	.word	0x24028558
 801d408:	240284dc 	.word	0x240284dc
 801d40c:	240284de 	.word	0x240284de

0801d410 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d410:	4a17      	ldr	r2, [pc, #92]	@ (801d470 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801d412:	8803      	ldrh	r3, [r0, #0]
 801d414:	8812      	ldrh	r2, [r2, #0]
 801d416:	4293      	cmp	r3, r2
 801d418:	d213      	bcs.n	801d442 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801d41a:	4a16      	ldr	r2, [pc, #88]	@ (801d474 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d41c:	2114      	movs	r1, #20
 801d41e:	6812      	ldr	r2, [r2, #0]
 801d420:	fb01 2303 	mla	r3, r1, r3, r2
 801d424:	8a1a      	ldrh	r2, [r3, #16]
 801d426:	8919      	ldrh	r1, [r3, #8]
 801d428:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d42c:	428a      	cmp	r2, r1
 801d42e:	db1d      	blt.n	801d46c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d430:	8a58      	ldrh	r0, [r3, #18]
 801d432:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d436:	895b      	ldrh	r3, [r3, #10]
 801d438:	4298      	cmp	r0, r3
 801d43a:	bfac      	ite	ge
 801d43c:	2000      	movge	r0, #0
 801d43e:	2001      	movlt	r0, #1
 801d440:	4770      	bx	lr
 801d442:	490d      	ldr	r1, [pc, #52]	@ (801d478 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d444:	8809      	ldrh	r1, [r1, #0]
 801d446:	4411      	add	r1, r2
 801d448:	428b      	cmp	r3, r1
 801d44a:	da0d      	bge.n	801d468 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801d44c:	1a9b      	subs	r3, r3, r2
 801d44e:	4a0b      	ldr	r2, [pc, #44]	@ (801d47c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d450:	210e      	movs	r1, #14
 801d452:	6812      	ldr	r2, [r2, #0]
 801d454:	fb01 2303 	mla	r3, r1, r3, r2
 801d458:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d45c:	891a      	ldrh	r2, [r3, #8]
 801d45e:	4291      	cmp	r1, r2
 801d460:	db04      	blt.n	801d46c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d462:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d466:	e7e6      	b.n	801d436 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801d468:	2000      	movs	r0, #0
 801d46a:	4770      	bx	lr
 801d46c:	2001      	movs	r0, #1
 801d46e:	4770      	bx	lr
 801d470:	24028570 	.word	0x24028570
 801d474:	24028578 	.word	0x24028578
 801d478:	24028574 	.word	0x24028574
 801d47c:	24028558 	.word	0x24028558

0801d480 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d480:	4a12      	ldr	r2, [pc, #72]	@ (801d4cc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d482:	8803      	ldrh	r3, [r0, #0]
 801d484:	8811      	ldrh	r1, [r2, #0]
 801d486:	428b      	cmp	r3, r1
 801d488:	d20b      	bcs.n	801d4a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801d48a:	4a11      	ldr	r2, [pc, #68]	@ (801d4d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d48c:	6812      	ldr	r2, [r2, #0]
 801d48e:	b112      	cbz	r2, 801d496 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d490:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d494:	b9c0      	cbnz	r0, 801d4c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801d496:	4a0f      	ldr	r2, [pc, #60]	@ (801d4d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d498:	6811      	ldr	r1, [r2, #0]
 801d49a:	2214      	movs	r2, #20
 801d49c:	4353      	muls	r3, r2
 801d49e:	58c8      	ldr	r0, [r1, r3]
 801d4a0:	4770      	bx	lr
 801d4a2:	4a0d      	ldr	r2, [pc, #52]	@ (801d4d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d4a4:	8812      	ldrh	r2, [r2, #0]
 801d4a6:	440a      	add	r2, r1
 801d4a8:	4293      	cmp	r3, r2
 801d4aa:	da04      	bge.n	801d4b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801d4ac:	4a08      	ldr	r2, [pc, #32]	@ (801d4d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d4ae:	6812      	ldr	r2, [r2, #0]
 801d4b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d4b4:	4770      	bx	lr
 801d4b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801d4ba:	4293      	cmp	r3, r2
 801d4bc:	d103      	bne.n	801d4c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d4be:	4b07      	ldr	r3, [pc, #28]	@ (801d4dc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801d4c4:	4770      	bx	lr
 801d4c6:	2000      	movs	r0, #0
 801d4c8:	4770      	bx	lr
 801d4ca:	bf00      	nop
 801d4cc:	24028570 	.word	0x24028570
 801d4d0:	24028554 	.word	0x24028554
 801d4d4:	24028578 	.word	0x24028578
 801d4d8:	24028574 	.word	0x24028574
 801d4dc:	240284e8 	.word	0x240284e8

0801d4e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d4e0:	4b24      	ldr	r3, [pc, #144]	@ (801d574 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d4e2:	8802      	ldrh	r2, [r0, #0]
 801d4e4:	8818      	ldrh	r0, [r3, #0]
 801d4e6:	4282      	cmp	r2, r0
 801d4e8:	d221      	bcs.n	801d52e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801d4ea:	4b23      	ldr	r3, [pc, #140]	@ (801d578 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d4ec:	6819      	ldr	r1, [r3, #0]
 801d4ee:	2314      	movs	r3, #20
 801d4f0:	fb03 1302 	mla	r3, r3, r2, r1
 801d4f4:	6858      	ldr	r0, [r3, #4]
 801d4f6:	2800      	cmp	r0, #0
 801d4f8:	d03a      	beq.n	801d570 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d4fa:	4920      	ldr	r1, [pc, #128]	@ (801d57c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d4fc:	6809      	ldr	r1, [r1, #0]
 801d4fe:	2900      	cmp	r1, #0
 801d500:	d036      	beq.n	801d570 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d502:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d506:	2900      	cmp	r1, #0
 801d508:	d032      	beq.n	801d570 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d50a:	891a      	ldrh	r2, [r3, #8]
 801d50c:	8958      	ldrh	r0, [r3, #10]
 801d50e:	4350      	muls	r0, r2
 801d510:	7c5a      	ldrb	r2, [r3, #17]
 801d512:	7cdb      	ldrb	r3, [r3, #19]
 801d514:	0952      	lsrs	r2, r2, #5
 801d516:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d51a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d51e:	2b0b      	cmp	r3, #11
 801d520:	bf18      	it	ne
 801d522:	0040      	lslne	r0, r0, #1
 801d524:	3003      	adds	r0, #3
 801d526:	f020 0003 	bic.w	r0, r0, #3
 801d52a:	4408      	add	r0, r1
 801d52c:	4770      	bx	lr
 801d52e:	4b14      	ldr	r3, [pc, #80]	@ (801d580 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d530:	881b      	ldrh	r3, [r3, #0]
 801d532:	4403      	add	r3, r0
 801d534:	429a      	cmp	r2, r3
 801d536:	da1a      	bge.n	801d56e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d538:	4b12      	ldr	r3, [pc, #72]	@ (801d584 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d53a:	1a10      	subs	r0, r2, r0
 801d53c:	210e      	movs	r1, #14
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	fb01 3000 	mla	r0, r1, r0, r3
 801d544:	7b03      	ldrb	r3, [r0, #12]
 801d546:	f003 031f 	and.w	r3, r3, #31
 801d54a:	2b0b      	cmp	r3, #11
 801d54c:	d10b      	bne.n	801d566 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801d54e:	8903      	ldrh	r3, [r0, #8]
 801d550:	8940      	ldrh	r0, [r0, #10]
 801d552:	4358      	muls	r0, r3
 801d554:	4b09      	ldr	r3, [pc, #36]	@ (801d57c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d556:	3003      	adds	r0, #3
 801d558:	6819      	ldr	r1, [r3, #0]
 801d55a:	f020 0303 	bic.w	r3, r0, #3
 801d55e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d562:	4418      	add	r0, r3
 801d564:	4770      	bx	lr
 801d566:	2b0d      	cmp	r3, #13
 801d568:	d101      	bne.n	801d56e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d56a:	300d      	adds	r0, #13
 801d56c:	4770      	bx	lr
 801d56e:	2000      	movs	r0, #0
 801d570:	4770      	bx	lr
 801d572:	bf00      	nop
 801d574:	24028570 	.word	0x24028570
 801d578:	24028578 	.word	0x24028578
 801d57c:	24028554 	.word	0x24028554
 801d580:	24028574 	.word	0x24028574
 801d584:	24028558 	.word	0x24028558

0801d588 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d588:	4b1f      	ldr	r3, [pc, #124]	@ (801d608 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801d58a:	b510      	push	{r4, lr}
 801d58c:	8802      	ldrh	r2, [r0, #0]
 801d58e:	881b      	ldrh	r3, [r3, #0]
 801d590:	429a      	cmp	r2, r3
 801d592:	d21a      	bcs.n	801d5ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801d594:	4b1d      	ldr	r3, [pc, #116]	@ (801d60c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801d596:	2114      	movs	r1, #20
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	fb01 3102 	mla	r1, r1, r2, r3
 801d59e:	7c4b      	ldrb	r3, [r1, #17]
 801d5a0:	0958      	lsrs	r0, r3, #5
 801d5a2:	7ccb      	ldrb	r3, [r1, #19]
 801d5a4:	491a      	ldr	r1, [pc, #104]	@ (801d610 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801d5a6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d5aa:	6809      	ldr	r1, [r1, #0]
 801d5ac:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801d5b0:	b2d8      	uxtb	r0, r3
 801d5b2:	b149      	cbz	r1, 801d5c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d5b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d5b8:	b132      	cbz	r2, 801d5c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d5ba:	2b0e      	cmp	r3, #14
 801d5bc:	d021      	beq.n	801d602 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801d5be:	280f      	cmp	r0, #15
 801d5c0:	d01d      	beq.n	801d5fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801d5c2:	2810      	cmp	r0, #16
 801d5c4:	bf08      	it	eq
 801d5c6:	2002      	moveq	r0, #2
 801d5c8:	bd10      	pop	{r4, pc}
 801d5ca:	4912      	ldr	r1, [pc, #72]	@ (801d614 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801d5cc:	8809      	ldrh	r1, [r1, #0]
 801d5ce:	4419      	add	r1, r3
 801d5d0:	428a      	cmp	r2, r1
 801d5d2:	da09      	bge.n	801d5e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801d5d4:	1ad3      	subs	r3, r2, r3
 801d5d6:	4a10      	ldr	r2, [pc, #64]	@ (801d618 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801d5d8:	210e      	movs	r1, #14
 801d5da:	6812      	ldr	r2, [r2, #0]
 801d5dc:	fb01 2303 	mla	r3, r1, r3, r2
 801d5e0:	7b18      	ldrb	r0, [r3, #12]
 801d5e2:	f000 001f 	and.w	r0, r0, #31
 801d5e6:	e7ef      	b.n	801d5c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d5e8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801d5ec:	429a      	cmp	r2, r3
 801d5ee:	d108      	bne.n	801d602 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801d5f0:	f7ea f8ca 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 801d5f4:	6803      	ldr	r3, [r0, #0]
 801d5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5fc:	4718      	bx	r3
 801d5fe:	2001      	movs	r0, #1
 801d600:	e7e2      	b.n	801d5c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d602:	2000      	movs	r0, #0
 801d604:	e7e0      	b.n	801d5c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801d606:	bf00      	nop
 801d608:	24028570 	.word	0x24028570
 801d60c:	24028578 	.word	0x24028578
 801d610:	24028554 	.word	0x24028554
 801d614:	24028574 	.word	0x24028574
 801d618:	24028558 	.word	0x24028558

0801d61c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801d61c:	2018      	movs	r0, #24
 801d61e:	4770      	bx	lr

0801d620 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801d620:	2001      	movs	r0, #1
 801d622:	4770      	bx	lr

0801d624 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801d624:	4b02      	ldr	r3, [pc, #8]	@ (801d630 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801d626:	8818      	ldrh	r0, [r3, #0]
 801d628:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d62c:	b280      	uxth	r0, r0
 801d62e:	4770      	bx	lr
 801d630:	240284e2 	.word	0x240284e2

0801d634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d634:	2bff      	cmp	r3, #255	@ 0xff
 801d636:	d04c      	beq.n	801d6d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d638:	2a2c      	cmp	r2, #44	@ 0x2c
 801d63a:	d030      	beq.n	801d69e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801d63c:	d80f      	bhi.n	801d65e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801d63e:	2a08      	cmp	r2, #8
 801d640:	d043      	beq.n	801d6ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d642:	d805      	bhi.n	801d650 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801d644:	2a04      	cmp	r2, #4
 801d646:	d03e      	beq.n	801d6c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d648:	2a05      	cmp	r2, #5
 801d64a:	d03a      	beq.n	801d6c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801d64c:	2300      	movs	r3, #0
 801d64e:	e024      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d650:	2a0a      	cmp	r2, #10
 801d652:	d03a      	beq.n	801d6ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d654:	d301      	bcc.n	801d65a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801d656:	2a0b      	cmp	r2, #11
 801d658:	d1f8      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d65a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d65c:	e01d      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d65e:	2a30      	cmp	r2, #48	@ 0x30
 801d660:	d035      	beq.n	801d6ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d662:	d80a      	bhi.n	801d67a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801d664:	2a2e      	cmp	r2, #46	@ 0x2e
 801d666:	684b      	ldr	r3, [r1, #4]
 801d668:	d023      	beq.n	801d6b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801d66a:	d90d      	bls.n	801d688 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801d66c:	781a      	ldrb	r2, [r3, #0]
 801d66e:	785b      	ldrb	r3, [r3, #1]
 801d670:	2b00      	cmp	r3, #0
 801d672:	d1eb      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d674:	b98a      	cbnz	r2, 801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d676:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801d678:	e00f      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d67a:	2a32      	cmp	r2, #50	@ 0x32
 801d67c:	d027      	beq.n	801d6ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d67e:	d301      	bcc.n	801d684 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801d680:	2a33      	cmp	r2, #51	@ 0x33
 801d682:	d1e3      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d684:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d686:	e008      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d688:	781a      	ldrb	r2, [r3, #0]
 801d68a:	785b      	ldrb	r3, [r3, #1]
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d1dd      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d690:	2a00      	cmp	r2, #0
 801d692:	d0f0      	beq.n	801d676 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801d694:	2a01      	cmp	r2, #1
 801d696:	d1d9      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d698:	6943      	ldr	r3, [r0, #20]
 801d69a:	4618      	mov	r0, r3
 801d69c:	4770      	bx	lr
 801d69e:	684b      	ldr	r3, [r1, #4]
 801d6a0:	781a      	ldrb	r2, [r3, #0]
 801d6a2:	785b      	ldrb	r3, [r3, #1]
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d1d1      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d6a8:	b14a      	cbz	r2, 801d6be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801d6aa:	2a01      	cmp	r2, #1
 801d6ac:	bf08      	it	eq
 801d6ae:	68c3      	ldreq	r3, [r0, #12]
 801d6b0:	e7f3      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6b2:	781a      	ldrb	r2, [r3, #0]
 801d6b4:	785b      	ldrb	r3, [r3, #1]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d1c8      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d6ba:	2a00      	cmp	r2, #0
 801d6bc:	d1ed      	bne.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6be:	69c3      	ldr	r3, [r0, #28]
 801d6c0:	e7eb      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6c2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801d6c4:	e7e9      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6c6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801d6c8:	e7e7      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801d6cc:	e7e5      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6ce:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801d6d0:	e7e3      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6d2:	2a2c      	cmp	r2, #44	@ 0x2c
 801d6d4:	d030      	beq.n	801d738 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801d6d6:	d80f      	bhi.n	801d6f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801d6d8:	2a08      	cmp	r2, #8
 801d6da:	d042      	beq.n	801d762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801d6dc:	d805      	bhi.n	801d6ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801d6de:	2a04      	cmp	r2, #4
 801d6e0:	d03d      	beq.n	801d75e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801d6e2:	2a05      	cmp	r2, #5
 801d6e4:	d1b2      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d6e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801d6e8:	e7d7      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6ea:	2a0a      	cmp	r2, #10
 801d6ec:	d039      	beq.n	801d762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801d6ee:	d301      	bcc.n	801d6f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801d6f0:	2a0b      	cmp	r2, #11
 801d6f2:	d1ab      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d6f4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801d6f6:	e7d0      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d6f8:	2a30      	cmp	r2, #48	@ 0x30
 801d6fa:	d034      	beq.n	801d766 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d6fc:	d80b      	bhi.n	801d716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801d6fe:	2a2e      	cmp	r2, #46	@ 0x2e
 801d700:	684b      	ldr	r3, [r1, #4]
 801d702:	d023      	beq.n	801d74c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801d704:	d90e      	bls.n	801d724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801d706:	781a      	ldrb	r2, [r3, #0]
 801d708:	785b      	ldrb	r3, [r3, #1]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d19e      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d70e:	2a00      	cmp	r2, #0
 801d710:	d1c3      	bne.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d712:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801d714:	e7c1      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d716:	2a32      	cmp	r2, #50	@ 0x32
 801d718:	d025      	beq.n	801d766 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801d71a:	d301      	bcc.n	801d720 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801d71c:	2a33      	cmp	r2, #51	@ 0x33
 801d71e:	d195      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d720:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801d722:	e7ba      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d724:	781a      	ldrb	r2, [r3, #0]
 801d726:	785b      	ldrb	r3, [r3, #1]
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d18f      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d72c:	2a00      	cmp	r2, #0
 801d72e:	d0f0      	beq.n	801d712 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801d730:	2a01      	cmp	r2, #1
 801d732:	d18b      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d734:	6983      	ldr	r3, [r0, #24]
 801d736:	e7b0      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d738:	684b      	ldr	r3, [r1, #4]
 801d73a:	781a      	ldrb	r2, [r3, #0]
 801d73c:	785b      	ldrb	r3, [r3, #1]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d184      	bne.n	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d742:	b152      	cbz	r2, 801d75a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801d744:	2a01      	cmp	r2, #1
 801d746:	bf08      	it	eq
 801d748:	6903      	ldreq	r3, [r0, #16]
 801d74a:	e7a6      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d74c:	781a      	ldrb	r2, [r3, #0]
 801d74e:	785b      	ldrb	r3, [r3, #1]
 801d750:	2b00      	cmp	r3, #0
 801d752:	f47f af7b 	bne.w	801d64c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801d756:	2a00      	cmp	r2, #0
 801d758:	d19f      	bne.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d75a:	6a03      	ldr	r3, [r0, #32]
 801d75c:	e79d      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d75e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d760:	e79b      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d762:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801d764:	e799      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d766:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801d768:	e797      	b.n	801d69a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801d76a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d76a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d76e:	b085      	sub	sp, #20
 801d770:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d772:	9203      	str	r2, [sp, #12]
 801d774:	6870      	ldr	r0, [r6, #4]
 801d776:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801d77a:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801d77e:	9101      	str	r1, [sp, #4]
 801d780:	fa1f f885 	uxth.w	r8, r5
 801d784:	43ed      	mvns	r5, r5
 801d786:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d78a:	b2ed      	uxtb	r5, r5
 801d78c:	fb00 2404 	mla	r4, r0, r4, r2
 801d790:	6832      	ldr	r2, [r6, #0]
 801d792:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d796:	4414      	add	r4, r2
 801d798:	f8dc 2000 	ldr.w	r2, [ip]
 801d79c:	9202      	str	r2, [sp, #8]
 801d79e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d7a2:	f102 0e04 	add.w	lr, r2, #4
 801d7a6:	9a01      	ldr	r2, [sp, #4]
 801d7a8:	2a00      	cmp	r2, #0
 801d7aa:	dc03      	bgt.n	801d7b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d7ac:	9a03      	ldr	r2, [sp, #12]
 801d7ae:	2a00      	cmp	r2, #0
 801d7b0:	f340 8116 	ble.w	801d9e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d7b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d7b6:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801d7ba:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d7be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d7c0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801d7c4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	dd0e      	ble.n	801d7ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d7cc:	1406      	asrs	r6, r0, #16
 801d7ce:	d405      	bmi.n	801d7dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d7d0:	4556      	cmp	r6, sl
 801d7d2:	da03      	bge.n	801d7dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d7d4:	1416      	asrs	r6, r2, #16
 801d7d6:	d401      	bmi.n	801d7dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d7d8:	454e      	cmp	r6, r9
 801d7da:	db07      	blt.n	801d7ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801d7dc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d7de:	3b01      	subs	r3, #1
 801d7e0:	3403      	adds	r4, #3
 801d7e2:	4430      	add	r0, r6
 801d7e4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801d7e6:	4432      	add	r2, r6
 801d7e8:	e7ee      	b.n	801d7c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d7ea:	d063      	beq.n	801d8b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d7ec:	1e5e      	subs	r6, r3, #1
 801d7ee:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801d7f0:	fb07 0706 	mla	r7, r7, r6, r0
 801d7f4:	143f      	asrs	r7, r7, #16
 801d7f6:	d454      	bmi.n	801d8a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d7f8:	4557      	cmp	r7, sl
 801d7fa:	da52      	bge.n	801d8a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d7fc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801d7fe:	fb07 2606 	mla	r6, r7, r6, r2
 801d802:	1436      	asrs	r6, r6, #16
 801d804:	d44d      	bmi.n	801d8a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d806:	454e      	cmp	r6, r9
 801d808:	da4b      	bge.n	801d8a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d80a:	1ce6      	adds	r6, r4, #3
 801d80c:	4699      	mov	r9, r3
 801d80e:	f1b9 0f00 	cmp.w	r9, #0
 801d812:	f106 0603 	add.w	r6, r6, #3
 801d816:	dd48      	ble.n	801d8aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801d818:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801d81c:	1417      	asrs	r7, r2, #16
 801d81e:	9902      	ldr	r1, [sp, #8]
 801d820:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d824:	f109 39ff 	add.w	r9, r9, #4294967295
 801d828:	fb0b 1707 	mla	r7, fp, r7, r1
 801d82c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d830:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d832:	f817 700a 	ldrb.w	r7, [r7, sl]
 801d836:	fb1b fb05 	smulbb	fp, fp, r5
 801d83a:	4408      	add	r0, r1
 801d83c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d83e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d842:	440a      	add	r2, r1
 801d844:	eb0e 0a07 	add.w	sl, lr, r7
 801d848:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801d84c:	fb07 b708 	mla	r7, r7, r8, fp
 801d850:	b2bf      	uxth	r7, r7
 801d852:	f107 0b01 	add.w	fp, r7, #1
 801d856:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d85a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d85e:	fb1b fb05 	smulbb	fp, fp, r5
 801d862:	123f      	asrs	r7, r7, #8
 801d864:	f806 7c06 	strb.w	r7, [r6, #-6]
 801d868:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801d86c:	fb07 b708 	mla	r7, r7, r8, fp
 801d870:	b2bf      	uxth	r7, r7
 801d872:	f107 0b01 	add.w	fp, r7, #1
 801d876:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d87a:	123f      	asrs	r7, r7, #8
 801d87c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801d880:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801d884:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d888:	fb1a fa05 	smulbb	sl, sl, r5
 801d88c:	fb07 a708 	mla	r7, r7, r8, sl
 801d890:	b2bf      	uxth	r7, r7
 801d892:	f107 0a01 	add.w	sl, r7, #1
 801d896:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d89a:	123f      	asrs	r7, r7, #8
 801d89c:	f806 7c04 	strb.w	r7, [r6, #-4]
 801d8a0:	e7b5      	b.n	801d80e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801d8a2:	2700      	movs	r7, #0
 801d8a4:	1bde      	subs	r6, r3, r7
 801d8a6:	2e00      	cmp	r6, #0
 801d8a8:	dc42      	bgt.n	801d930 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801d8aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8b2:	441c      	add	r4, r3
 801d8b4:	9b01      	ldr	r3, [sp, #4]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	f340 8092 	ble.w	801d9e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d8bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d8c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d8c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8ca:	eef0 6a62 	vmov.f32	s13, s5
 801d8ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d8d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8da:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801d8de:	eef0 6a43 	vmov.f32	s13, s6
 801d8e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8e6:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801d8ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d8f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d8fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d902:	ee12 2a90 	vmov	r2, s5
 801d906:	eef0 2a47 	vmov.f32	s5, s14
 801d90a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d90e:	ee13 2a10 	vmov	r2, s6
 801d912:	9311      	str	r3, [sp, #68]	@ 0x44
 801d914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d916:	eeb0 3a67 	vmov.f32	s6, s15
 801d91a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d91e:	9312      	str	r3, [sp, #72]	@ 0x48
 801d920:	9b01      	ldr	r3, [sp, #4]
 801d922:	9a03      	ldr	r2, [sp, #12]
 801d924:	3b01      	subs	r3, #1
 801d926:	9301      	str	r3, [sp, #4]
 801d928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d92a:	bf08      	it	eq
 801d92c:	4613      	moveq	r3, r2
 801d92e:	e73a      	b.n	801d7a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d930:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d934:	d44e      	bmi.n	801d9d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d936:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d93a:	4556      	cmp	r6, sl
 801d93c:	dd4a      	ble.n	801d9d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d93e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d942:	d447      	bmi.n	801d9d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d944:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801d948:	4559      	cmp	r1, fp
 801d94a:	dd43      	ble.n	801d9d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d94c:	fa0f f986 	sxth.w	r9, r6
 801d950:	9902      	ldr	r1, [sp, #8]
 801d952:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d956:	fb0b 1909 	mla	r9, fp, r9, r1
 801d95a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801d95e:	f819 900a 	ldrb.w	r9, [r9, sl]
 801d962:	fb1b fb05 	smulbb	fp, fp, r5
 801d966:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d96a:	eb0e 0a09 	add.w	sl, lr, r9
 801d96e:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801d972:	fb09 b908 	mla	r9, r9, r8, fp
 801d976:	fa1f f989 	uxth.w	r9, r9
 801d97a:	f109 0b01 	add.w	fp, r9, #1
 801d97e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d982:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d986:	f804 9006 	strb.w	r9, [r4, r6]
 801d98a:	4426      	add	r6, r4
 801d98c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d990:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d994:	fb1b fb05 	smulbb	fp, fp, r5
 801d998:	fb09 b908 	mla	r9, r9, r8, fp
 801d99c:	fa1f f989 	uxth.w	r9, r9
 801d9a0:	f109 0b01 	add.w	fp, r9, #1
 801d9a4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d9a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9ac:	f886 9001 	strb.w	r9, [r6, #1]
 801d9b0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d9b4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d9b8:	fb1a fa05 	smulbb	sl, sl, r5
 801d9bc:	fb09 a908 	mla	r9, r9, r8, sl
 801d9c0:	fa1f f989 	uxth.w	r9, r9
 801d9c4:	f109 0a01 	add.w	sl, r9, #1
 801d9c8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801d9cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9d0:	f886 9002 	strb.w	r9, [r6, #2]
 801d9d4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d9d6:	3701      	adds	r7, #1
 801d9d8:	4408      	add	r0, r1
 801d9da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d9dc:	440a      	add	r2, r1
 801d9de:	e761      	b.n	801d8a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d9e0:	b005      	add	sp, #20
 801d9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d9e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9ea:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d9ec:	4693      	mov	fp, r2
 801d9ee:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d9f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d9f4:	6868      	ldr	r0, [r5, #4]
 801d9f6:	6877      	ldr	r7, [r6, #4]
 801d9f8:	9100      	str	r1, [sp, #0]
 801d9fa:	3704      	adds	r7, #4
 801d9fc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801da00:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801da04:	fb00 2404 	mla	r4, r0, r4, r2
 801da08:	682a      	ldr	r2, [r5, #0]
 801da0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801da0e:	4414      	add	r4, r2
 801da10:	6832      	ldr	r2, [r6, #0]
 801da12:	9201      	str	r2, [sp, #4]
 801da14:	9a00      	ldr	r2, [sp, #0]
 801da16:	2a00      	cmp	r2, #0
 801da18:	dc03      	bgt.n	801da22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801da1a:	f1bb 0f00 	cmp.w	fp, #0
 801da1e:	f340 80bc 	ble.w	801db9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801da22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801da24:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801da28:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801da2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801da2e:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801da32:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801da36:	2b00      	cmp	r3, #0
 801da38:	dd0c      	ble.n	801da54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801da3a:	1405      	asrs	r5, r0, #16
 801da3c:	d405      	bmi.n	801da4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801da3e:	4555      	cmp	r5, sl
 801da40:	da03      	bge.n	801da4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801da42:	1415      	asrs	r5, r2, #16
 801da44:	d401      	bmi.n	801da4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801da46:	454d      	cmp	r5, r9
 801da48:	db05      	blt.n	801da56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801da4a:	4440      	add	r0, r8
 801da4c:	4472      	add	r2, lr
 801da4e:	3b01      	subs	r3, #1
 801da50:	3403      	adds	r4, #3
 801da52:	e7f0      	b.n	801da36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801da54:	d03f      	beq.n	801dad6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801da56:	1e5d      	subs	r5, r3, #1
 801da58:	fb08 0c05 	mla	ip, r8, r5, r0
 801da5c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801da60:	d42e      	bmi.n	801dac0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801da62:	45d4      	cmp	ip, sl
 801da64:	da2c      	bge.n	801dac0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801da66:	fb0e 2505 	mla	r5, lr, r5, r2
 801da6a:	142d      	asrs	r5, r5, #16
 801da6c:	d428      	bmi.n	801dac0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801da6e:	454d      	cmp	r5, r9
 801da70:	da26      	bge.n	801dac0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801da72:	1ce5      	adds	r5, r4, #3
 801da74:	469c      	mov	ip, r3
 801da76:	f1bc 0f00 	cmp.w	ip, #0
 801da7a:	f105 0503 	add.w	r5, r5, #3
 801da7e:	dd25      	ble.n	801dacc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801da80:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801da84:	ea4f 4922 	mov.w	r9, r2, asr #16
 801da88:	f10c 3cff 	add.w	ip, ip, #4294967295
 801da8c:	4472      	add	r2, lr
 801da8e:	468a      	mov	sl, r1
 801da90:	9901      	ldr	r1, [sp, #4]
 801da92:	fb0a 1909 	mla	r9, sl, r9, r1
 801da96:	1401      	asrs	r1, r0, #16
 801da98:	4440      	add	r0, r8
 801da9a:	f819 9001 	ldrb.w	r9, [r9, r1]
 801da9e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801daa2:	eb07 0a09 	add.w	sl, r7, r9
 801daa6:	f817 9009 	ldrb.w	r9, [r7, r9]
 801daaa:	f805 9c06 	strb.w	r9, [r5, #-6]
 801daae:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801dab2:	f805 9c05 	strb.w	r9, [r5, #-5]
 801dab6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801daba:	f805 9c04 	strb.w	r9, [r5, #-4]
 801dabe:	e7da      	b.n	801da76 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801dac0:	2500      	movs	r5, #0
 801dac2:	eba3 0c05 	sub.w	ip, r3, r5
 801dac6:	f1bc 0f00 	cmp.w	ip, #0
 801daca:	dc3b      	bgt.n	801db44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801dacc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dad0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dad4:	441c      	add	r4, r3
 801dad6:	9b00      	ldr	r3, [sp, #0]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	dd5e      	ble.n	801db9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dadc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dae2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dae6:	eeb0 6a62 	vmov.f32	s12, s5
 801daea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801daee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801daf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801daf6:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801dafa:	eeb0 6a43 	vmov.f32	s12, s6
 801dafe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db02:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801db06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db1e:	ee12 2a90 	vmov	r2, s5
 801db22:	eef0 2a47 	vmov.f32	s5, s14
 801db26:	fb92 f8f3 	sdiv	r8, r2, r3
 801db2a:	ee13 2a10 	vmov	r2, s6
 801db2e:	eeb0 3a67 	vmov.f32	s6, s15
 801db32:	fb92 fef3 	sdiv	lr, r2, r3
 801db36:	9b00      	ldr	r3, [sp, #0]
 801db38:	3b01      	subs	r3, #1
 801db3a:	9300      	str	r3, [sp, #0]
 801db3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db3e:	bf08      	it	eq
 801db40:	465b      	moveq	r3, fp
 801db42:	e767      	b.n	801da14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801db44:	ea5f 4920 	movs.w	r9, r0, asr #16
 801db48:	d423      	bmi.n	801db92 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db4a:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801db4e:	45cc      	cmp	ip, r9
 801db50:	dd1f      	ble.n	801db92 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db52:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801db56:	d41c      	bmi.n	801db92 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db58:	68f1      	ldr	r1, [r6, #12]
 801db5a:	4551      	cmp	r1, sl
 801db5c:	dd19      	ble.n	801db92 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801db5e:	fa0f fc8c 	sxth.w	ip, ip
 801db62:	9901      	ldr	r1, [sp, #4]
 801db64:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801db68:	f81c c009 	ldrb.w	ip, [ip, r9]
 801db6c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801db70:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801db74:	eb07 090c 	add.w	r9, r7, ip
 801db78:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801db7c:	f804 a00c 	strb.w	sl, [r4, ip]
 801db80:	44a4      	add	ip, r4
 801db82:	f899 a001 	ldrb.w	sl, [r9, #1]
 801db86:	f88c a001 	strb.w	sl, [ip, #1]
 801db8a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801db8e:	f88c 9002 	strb.w	r9, [ip, #2]
 801db92:	4440      	add	r0, r8
 801db94:	4472      	add	r2, lr
 801db96:	3501      	adds	r5, #1
 801db98:	e793      	b.n	801dac2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801db9a:	b003      	add	sp, #12
 801db9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dba0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dba4:	b085      	sub	sp, #20
 801dba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dbaa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dbac:	9202      	str	r2, [sp, #8]
 801dbae:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801dbb2:	6860      	ldr	r0, [r4, #4]
 801dbb4:	9203      	str	r2, [sp, #12]
 801dbb6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801dbba:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801dbbe:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801dbc2:	fb00 2505 	mla	r5, r0, r5, r2
 801dbc6:	6822      	ldr	r2, [r4, #0]
 801dbc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dbcc:	4415      	add	r5, r2
 801dbce:	f8dc 2000 	ldr.w	r2, [ip]
 801dbd2:	9200      	str	r2, [sp, #0]
 801dbd4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801dbd8:	3204      	adds	r2, #4
 801dbda:	9201      	str	r2, [sp, #4]
 801dbdc:	2900      	cmp	r1, #0
 801dbde:	dc03      	bgt.n	801dbe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dbe0:	9a02      	ldr	r2, [sp, #8]
 801dbe2:	2a00      	cmp	r2, #0
 801dbe4:	f340 8127 	ble.w	801de36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801dbe8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dbea:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801dbee:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801dbf2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dbf4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801dbf8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	dd0d      	ble.n	801dc1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc00:	1422      	asrs	r2, r4, #16
 801dc02:	d405      	bmi.n	801dc10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dc04:	4542      	cmp	r2, r8
 801dc06:	da03      	bge.n	801dc10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dc08:	1402      	asrs	r2, r0, #16
 801dc0a:	d401      	bmi.n	801dc10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801dc0c:	42ba      	cmp	r2, r7
 801dc0e:	db06      	blt.n	801dc1e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dc10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dc12:	4474      	add	r4, lr
 801dc14:	3b01      	subs	r3, #1
 801dc16:	3503      	adds	r5, #3
 801dc18:	4410      	add	r0, r2
 801dc1a:	e7ef      	b.n	801dbfc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dc1c:	d075      	beq.n	801dd0a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801dc1e:	1e5a      	subs	r2, r3, #1
 801dc20:	fb0e 4602 	mla	r6, lr, r2, r4
 801dc24:	1436      	asrs	r6, r6, #16
 801dc26:	d465      	bmi.n	801dcf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801dc28:	4546      	cmp	r6, r8
 801dc2a:	da63      	bge.n	801dcf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801dc2c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801dc2e:	fb06 0202 	mla	r2, r6, r2, r0
 801dc32:	1412      	asrs	r2, r2, #16
 801dc34:	d45e      	bmi.n	801dcf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801dc36:	42ba      	cmp	r2, r7
 801dc38:	da5c      	bge.n	801dcf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801dc3a:	1cef      	adds	r7, r5, #3
 801dc3c:	4699      	mov	r9, r3
 801dc3e:	f1b9 0f00 	cmp.w	r9, #0
 801dc42:	dd5d      	ble.n	801dd00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801dc44:	1402      	asrs	r2, r0, #16
 801dc46:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801dc4a:	1426      	asrs	r6, r4, #16
 801dc4c:	4692      	mov	sl, r2
 801dc4e:	9a00      	ldr	r2, [sp, #0]
 801dc50:	fb08 220a 	mla	r2, r8, sl, r2
 801dc54:	5d92      	ldrb	r2, [r2, r6]
 801dc56:	9e01      	ldr	r6, [sp, #4]
 801dc58:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801dc5c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801dc60:	d041      	beq.n	801dce6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801dc62:	9a03      	ldr	r2, [sp, #12]
 801dc64:	fa5f fb86 	uxtb.w	fp, r6
 801dc68:	fb02 f808 	mul.w	r8, r2, r8
 801dc6c:	f108 0201 	add.w	r2, r8, #1
 801dc70:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801dc74:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801dc78:	1212      	asrs	r2, r2, #8
 801dc7a:	fa1f fa82 	uxth.w	sl, r2
 801dc7e:	43d2      	mvns	r2, r2
 801dc80:	fb1b fb0a 	smulbb	fp, fp, sl
 801dc84:	b2d2      	uxtb	r2, r2
 801dc86:	fb08 b802 	mla	r8, r8, r2, fp
 801dc8a:	fa1f f888 	uxth.w	r8, r8
 801dc8e:	f108 0b01 	add.w	fp, r8, #1
 801dc92:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dc96:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801dc9a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801dc9e:	fb1b fb0a 	smulbb	fp, fp, sl
 801dca2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dca6:	fb16 fa0a 	smulbb	sl, r6, sl
 801dcaa:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801dcae:	f807 8c03 	strb.w	r8, [r7, #-3]
 801dcb2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801dcb6:	fb06 aa02 	mla	sl, r6, r2, sl
 801dcba:	fb08 b802 	mla	r8, r8, r2, fp
 801dcbe:	fa1f fa8a 	uxth.w	sl, sl
 801dcc2:	fa1f f888 	uxth.w	r8, r8
 801dcc6:	f10a 0601 	add.w	r6, sl, #1
 801dcca:	f108 0b01 	add.w	fp, r8, #1
 801dcce:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801dcd2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dcd6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dcda:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dcde:	f807 ac01 	strb.w	sl, [r7, #-1]
 801dce2:	f807 8c02 	strb.w	r8, [r7, #-2]
 801dce6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dce8:	4474      	add	r4, lr
 801dcea:	3703      	adds	r7, #3
 801dcec:	f109 39ff 	add.w	r9, r9, #4294967295
 801dcf0:	4410      	add	r0, r2
 801dcf2:	e7a4      	b.n	801dc3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801dcf4:	f04f 0800 	mov.w	r8, #0
 801dcf8:	eba3 0208 	sub.w	r2, r3, r8
 801dcfc:	2a00      	cmp	r2, #0
 801dcfe:	dc3b      	bgt.n	801dd78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801dd00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd08:	441d      	add	r5, r3
 801dd0a:	2900      	cmp	r1, #0
 801dd0c:	f340 8093 	ble.w	801de36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801dd10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd1a:	3901      	subs	r1, #1
 801dd1c:	eeb0 6a62 	vmov.f32	s12, s5
 801dd20:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd24:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd2c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801dd30:	eeb0 6a43 	vmov.f32	s12, s6
 801dd34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd38:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dd3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd40:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd44:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd54:	ee12 2a90 	vmov	r2, s5
 801dd58:	eef0 2a47 	vmov.f32	s5, s14
 801dd5c:	fb92 fef3 	sdiv	lr, r2, r3
 801dd60:	ee13 2a10 	vmov	r2, s6
 801dd64:	eeb0 3a67 	vmov.f32	s6, s15
 801dd68:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd6c:	9a02      	ldr	r2, [sp, #8]
 801dd6e:	9312      	str	r3, [sp, #72]	@ 0x48
 801dd70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd72:	bf08      	it	eq
 801dd74:	4613      	moveq	r3, r2
 801dd76:	e731      	b.n	801dbdc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dd78:	1427      	asrs	r7, r4, #16
 801dd7a:	d456      	bmi.n	801de2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dd7c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801dd80:	42be      	cmp	r6, r7
 801dd82:	dd52      	ble.n	801de2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dd84:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dd88:	d44f      	bmi.n	801de2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dd8a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801dd8e:	454a      	cmp	r2, r9
 801dd90:	dd4b      	ble.n	801de2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dd92:	9a00      	ldr	r2, [sp, #0]
 801dd94:	b236      	sxth	r6, r6
 801dd96:	fb09 2606 	mla	r6, r9, r6, r2
 801dd9a:	5df2      	ldrb	r2, [r6, r7]
 801dd9c:	9e01      	ldr	r6, [sp, #4]
 801dd9e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801dda2:	0e3a      	lsrs	r2, r7, #24
 801dda4:	d041      	beq.n	801de2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dda6:	9e03      	ldr	r6, [sp, #12]
 801dda8:	fa5f fb87 	uxtb.w	fp, r7
 801ddac:	4372      	muls	r2, r6
 801ddae:	1c56      	adds	r6, r2, #1
 801ddb0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ddb4:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801ddb8:	1212      	asrs	r2, r2, #8
 801ddba:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ddbe:	fa1f fa82 	uxth.w	sl, r2
 801ddc2:	43d2      	mvns	r2, r2
 801ddc4:	fb1b fb0a 	smulbb	fp, fp, sl
 801ddc8:	b2d2      	uxtb	r2, r2
 801ddca:	fb09 b902 	mla	r9, r9, r2, fp
 801ddce:	fa1f f989 	uxth.w	r9, r9
 801ddd2:	f109 0b01 	add.w	fp, r9, #1
 801ddd6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ddda:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ddde:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801dde2:	fb1b fb0a 	smulbb	fp, fp, sl
 801dde6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ddea:	fb17 fa0a 	smulbb	sl, r7, sl
 801ddee:	f805 9006 	strb.w	r9, [r5, r6]
 801ddf2:	442e      	add	r6, r5
 801ddf4:	78b7      	ldrb	r7, [r6, #2]
 801ddf6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ddfa:	fb07 aa02 	mla	sl, r7, r2, sl
 801ddfe:	fb09 b902 	mla	r9, r9, r2, fp
 801de02:	fa1f fa8a 	uxth.w	sl, sl
 801de06:	fa1f f989 	uxth.w	r9, r9
 801de0a:	f10a 0701 	add.w	r7, sl, #1
 801de0e:	f109 0b01 	add.w	fp, r9, #1
 801de12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801de16:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801de1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801de1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801de22:	f886 a002 	strb.w	sl, [r6, #2]
 801de26:	f886 9001 	strb.w	r9, [r6, #1]
 801de2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801de2c:	4474      	add	r4, lr
 801de2e:	f108 0801 	add.w	r8, r8, #1
 801de32:	4410      	add	r0, r2
 801de34:	e760      	b.n	801dcf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801de36:	b005      	add	sp, #20
 801de38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de40:	b085      	sub	sp, #20
 801de42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de46:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801de48:	9203      	str	r2, [sp, #12]
 801de4a:	6868      	ldr	r0, [r5, #4]
 801de4c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801de50:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801de54:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801de58:	fb00 2404 	mla	r4, r0, r4, r2
 801de5c:	682a      	ldr	r2, [r5, #0]
 801de5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801de62:	4414      	add	r4, r2
 801de64:	f8dc 2000 	ldr.w	r2, [ip]
 801de68:	9201      	str	r2, [sp, #4]
 801de6a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801de6e:	3204      	adds	r2, #4
 801de70:	9202      	str	r2, [sp, #8]
 801de72:	2900      	cmp	r1, #0
 801de74:	dc03      	bgt.n	801de7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801de76:	9a03      	ldr	r2, [sp, #12]
 801de78:	2a00      	cmp	r2, #0
 801de7a:	f340 8137 	ble.w	801e0ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801de7e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801de80:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801de84:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801de88:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801de8a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801de8e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801de92:	2b00      	cmp	r3, #0
 801de94:	dd0d      	ble.n	801deb2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801de96:	1405      	asrs	r5, r0, #16
 801de98:	d405      	bmi.n	801dea6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801de9a:	4545      	cmp	r5, r8
 801de9c:	da03      	bge.n	801dea6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801de9e:	1415      	asrs	r5, r2, #16
 801dea0:	d401      	bmi.n	801dea6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dea2:	42bd      	cmp	r5, r7
 801dea4:	db06      	blt.n	801deb4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dea6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801dea8:	4470      	add	r0, lr
 801deaa:	3b01      	subs	r3, #1
 801deac:	3403      	adds	r4, #3
 801deae:	442a      	add	r2, r5
 801deb0:	e7ef      	b.n	801de92 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801deb2:	d070      	beq.n	801df96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801deb4:	1e5d      	subs	r5, r3, #1
 801deb6:	fb0e 0605 	mla	r6, lr, r5, r0
 801deba:	1436      	asrs	r6, r6, #16
 801debc:	d462      	bmi.n	801df84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801debe:	4546      	cmp	r6, r8
 801dec0:	da60      	bge.n	801df84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801dec2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801dec4:	fb06 2505 	mla	r5, r6, r5, r2
 801dec8:	142d      	asrs	r5, r5, #16
 801deca:	d45b      	bmi.n	801df84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801decc:	42bd      	cmp	r5, r7
 801dece:	da59      	bge.n	801df84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ded0:	1ce5      	adds	r5, r4, #3
 801ded2:	469a      	mov	sl, r3
 801ded4:	f1ba 0f00 	cmp.w	sl, #0
 801ded8:	dd58      	ble.n	801df8c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801deda:	1416      	asrs	r6, r2, #16
 801dedc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801dee0:	1407      	asrs	r7, r0, #16
 801dee2:	46b1      	mov	r9, r6
 801dee4:	9e01      	ldr	r6, [sp, #4]
 801dee6:	fb08 6609 	mla	r6, r8, r9, r6
 801deea:	5df6      	ldrb	r6, [r6, r7]
 801deec:	9f02      	ldr	r7, [sp, #8]
 801deee:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801def2:	0e37      	lsrs	r7, r6, #24
 801def4:	2fff      	cmp	r7, #255	@ 0xff
 801def6:	f000 80f0 	beq.w	801e0da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801defa:	fa5f f887 	uxtb.w	r8, r7
 801defe:	b3d7      	cbz	r7, 801df76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801df00:	fa1f f788 	uxth.w	r7, r8
 801df04:	ea6f 0808 	mvn.w	r8, r8
 801df08:	fa5f fb86 	uxtb.w	fp, r6
 801df0c:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801df10:	fa5f f888 	uxtb.w	r8, r8
 801df14:	fb1b fb07 	smulbb	fp, fp, r7
 801df18:	fb09 b908 	mla	r9, r9, r8, fp
 801df1c:	fa1f f989 	uxth.w	r9, r9
 801df20:	f109 0b01 	add.w	fp, r9, #1
 801df24:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801df28:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801df2c:	fb1b fb08 	smulbb	fp, fp, r8
 801df30:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df34:	f805 9c03 	strb.w	r9, [r5, #-3]
 801df38:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801df3c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801df40:	fb09 b907 	mla	r9, r9, r7, fp
 801df44:	fa1f f989 	uxth.w	r9, r9
 801df48:	f109 0b01 	add.w	fp, r9, #1
 801df4c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801df50:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df54:	f805 9c02 	strb.w	r9, [r5, #-2]
 801df58:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801df5c:	fb19 f808 	smulbb	r8, r9, r8
 801df60:	fb06 8607 	mla	r6, r6, r7, r8
 801df64:	b2b6      	uxth	r6, r6
 801df66:	f106 0801 	add.w	r8, r6, #1
 801df6a:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801df6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801df72:	f805 8c01 	strb.w	r8, [r5, #-1]
 801df76:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801df78:	4470      	add	r0, lr
 801df7a:	3503      	adds	r5, #3
 801df7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df80:	4432      	add	r2, r6
 801df82:	e7a7      	b.n	801ded4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801df84:	2600      	movs	r6, #0
 801df86:	1b9d      	subs	r5, r3, r6
 801df88:	2d00      	cmp	r5, #0
 801df8a:	dc3b      	bgt.n	801e004 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801df8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df94:	441c      	add	r4, r3
 801df96:	2900      	cmp	r1, #0
 801df98:	f340 80a8 	ble.w	801e0ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801df9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dfa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfa6:	3901      	subs	r1, #1
 801dfa8:	eeb0 6a62 	vmov.f32	s12, s5
 801dfac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dfb0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfb8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801dfbc:	eeb0 6a43 	vmov.f32	s12, s6
 801dfc0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dfc4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801dfc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dfcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dfd0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dfd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dfd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dfdc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dfe0:	ee12 2a90 	vmov	r2, s5
 801dfe4:	eef0 2a47 	vmov.f32	s5, s14
 801dfe8:	fb92 fef3 	sdiv	lr, r2, r3
 801dfec:	ee13 2a10 	vmov	r2, s6
 801dff0:	eeb0 3a67 	vmov.f32	s6, s15
 801dff4:	fb92 f3f3 	sdiv	r3, r2, r3
 801dff8:	9a03      	ldr	r2, [sp, #12]
 801dffa:	9312      	str	r3, [sp, #72]	@ 0x48
 801dffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dffe:	bf08      	it	eq
 801e000:	4613      	moveq	r3, r2
 801e002:	e736      	b.n	801de72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e004:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e008:	d457      	bmi.n	801e0ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e00a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801e00e:	4547      	cmp	r7, r8
 801e010:	dd53      	ble.n	801e0ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e012:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e016:	d450      	bmi.n	801e0ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e018:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801e01c:	454d      	cmp	r5, r9
 801e01e:	dd4c      	ble.n	801e0ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e020:	9d01      	ldr	r5, [sp, #4]
 801e022:	b23f      	sxth	r7, r7
 801e024:	fb09 5707 	mla	r7, r9, r7, r5
 801e028:	f817 5008 	ldrb.w	r5, [r7, r8]
 801e02c:	9f02      	ldr	r7, [sp, #8]
 801e02e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801e032:	0e2f      	lsrs	r7, r5, #24
 801e034:	2fff      	cmp	r7, #255	@ 0xff
 801e036:	d045      	beq.n	801e0c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e038:	fa5f f987 	uxtb.w	r9, r7
 801e03c:	b3ef      	cbz	r7, 801e0ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e03e:	fa1f f889 	uxth.w	r8, r9
 801e042:	ea6f 0909 	mvn.w	r9, r9
 801e046:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e04a:	fa5f fb85 	uxtb.w	fp, r5
 801e04e:	f814 a007 	ldrb.w	sl, [r4, r7]
 801e052:	fa5f f989 	uxtb.w	r9, r9
 801e056:	fb1b fb08 	smulbb	fp, fp, r8
 801e05a:	fb0a ba09 	mla	sl, sl, r9, fp
 801e05e:	fa1f fa8a 	uxth.w	sl, sl
 801e062:	f10a 0b01 	add.w	fp, sl, #1
 801e066:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e06a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e06e:	f804 a007 	strb.w	sl, [r4, r7]
 801e072:	4427      	add	r7, r4
 801e074:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e078:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801e07c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e080:	fb1b fb09 	smulbb	fp, fp, r9
 801e084:	fb0a ba08 	mla	sl, sl, r8, fp
 801e088:	fa1f fa8a 	uxth.w	sl, sl
 801e08c:	f10a 0b01 	add.w	fp, sl, #1
 801e090:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801e094:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e098:	f887 a001 	strb.w	sl, [r7, #1]
 801e09c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801e0a0:	fb1a f909 	smulbb	r9, sl, r9
 801e0a4:	fb05 9508 	mla	r5, r5, r8, r9
 801e0a8:	b2ad      	uxth	r5, r5
 801e0aa:	f105 0901 	add.w	r9, r5, #1
 801e0ae:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801e0b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e0b6:	f887 9002 	strb.w	r9, [r7, #2]
 801e0ba:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801e0bc:	4470      	add	r0, lr
 801e0be:	3601      	adds	r6, #1
 801e0c0:	442a      	add	r2, r5
 801e0c2:	e760      	b.n	801df86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e0c4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e0c8:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801e0cc:	55e5      	strb	r5, [r4, r7]
 801e0ce:	4427      	add	r7, r4
 801e0d0:	0c2d      	lsrs	r5, r5, #16
 801e0d2:	f887 8001 	strb.w	r8, [r7, #1]
 801e0d6:	70bd      	strb	r5, [r7, #2]
 801e0d8:	e7ef      	b.n	801e0ba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801e0da:	0a37      	lsrs	r7, r6, #8
 801e0dc:	f805 6c03 	strb.w	r6, [r5, #-3]
 801e0e0:	0c36      	lsrs	r6, r6, #16
 801e0e2:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e0e6:	f805 6c01 	strb.w	r6, [r5, #-1]
 801e0ea:	e744      	b.n	801df76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e0ec:	b005      	add	sp, #20
 801e0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e0f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e0f8:	9201      	str	r2, [sp, #4]
 801e0fa:	6870      	ldr	r0, [r6, #4]
 801e0fc:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801e100:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801e104:	fa1f fe85 	uxth.w	lr, r5
 801e108:	43ed      	mvns	r5, r5
 801e10a:	f8dc 8000 	ldr.w	r8, [ip]
 801e10e:	b2ed      	uxtb	r5, r5
 801e110:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801e114:	fb00 2404 	mla	r4, r0, r4, r2
 801e118:	6832      	ldr	r2, [r6, #0]
 801e11a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e11e:	4414      	add	r4, r2
 801e120:	2900      	cmp	r1, #0
 801e122:	dc03      	bgt.n	801e12c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e124:	9a01      	ldr	r2, [sp, #4]
 801e126:	2a00      	cmp	r2, #0
 801e128:	f340 810d 	ble.w	801e346 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e12c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e12e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e132:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e136:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e138:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e13c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e140:	2b00      	cmp	r3, #0
 801e142:	dd0e      	ble.n	801e162 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e144:	1406      	asrs	r6, r0, #16
 801e146:	d405      	bmi.n	801e154 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e148:	4556      	cmp	r6, sl
 801e14a:	da03      	bge.n	801e154 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e14c:	1416      	asrs	r6, r2, #16
 801e14e:	d401      	bmi.n	801e154 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e150:	454e      	cmp	r6, r9
 801e152:	db07      	blt.n	801e164 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e154:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801e156:	3b01      	subs	r3, #1
 801e158:	3403      	adds	r4, #3
 801e15a:	4430      	add	r0, r6
 801e15c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801e15e:	4432      	add	r2, r6
 801e160:	e7ee      	b.n	801e140 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e162:	d060      	beq.n	801e226 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801e164:	1e5e      	subs	r6, r3, #1
 801e166:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e168:	fb07 0706 	mla	r7, r7, r6, r0
 801e16c:	143f      	asrs	r7, r7, #16
 801e16e:	d451      	bmi.n	801e214 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e170:	4557      	cmp	r7, sl
 801e172:	da4f      	bge.n	801e214 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e174:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e176:	fb07 2606 	mla	r6, r7, r6, r2
 801e17a:	1436      	asrs	r6, r6, #16
 801e17c:	d44a      	bmi.n	801e214 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e17e:	454e      	cmp	r6, r9
 801e180:	da48      	bge.n	801e214 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e182:	1ce6      	adds	r6, r4, #3
 801e184:	4699      	mov	r9, r3
 801e186:	f1b9 0f00 	cmp.w	r9, #0
 801e18a:	f106 0603 	add.w	r6, r6, #3
 801e18e:	dd45      	ble.n	801e21c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801e190:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e194:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e198:	1417      	asrs	r7, r2, #16
 801e19a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e19e:	fb0b a707 	mla	r7, fp, r7, sl
 801e1a2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e1a6:	fb1b fb05 	smulbb	fp, fp, r5
 801e1aa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e1ae:	eb08 0a07 	add.w	sl, r8, r7
 801e1b2:	f818 7007 	ldrb.w	r7, [r8, r7]
 801e1b6:	fb07 b70e 	mla	r7, r7, lr, fp
 801e1ba:	b2bf      	uxth	r7, r7
 801e1bc:	f107 0b01 	add.w	fp, r7, #1
 801e1c0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e1c4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e1c8:	fb1b fb05 	smulbb	fp, fp, r5
 801e1cc:	123f      	asrs	r7, r7, #8
 801e1ce:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e1d2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e1d6:	fb07 b70e 	mla	r7, r7, lr, fp
 801e1da:	b2bf      	uxth	r7, r7
 801e1dc:	f107 0b01 	add.w	fp, r7, #1
 801e1e0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e1e4:	123f      	asrs	r7, r7, #8
 801e1e6:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e1ea:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e1ee:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e1f2:	fb1a fa05 	smulbb	sl, sl, r5
 801e1f6:	fb07 a70e 	mla	r7, r7, lr, sl
 801e1fa:	b2bf      	uxth	r7, r7
 801e1fc:	f107 0a01 	add.w	sl, r7, #1
 801e200:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e204:	123f      	asrs	r7, r7, #8
 801e206:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e20a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e20c:	4438      	add	r0, r7
 801e20e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e210:	443a      	add	r2, r7
 801e212:	e7b8      	b.n	801e186 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e214:	2700      	movs	r7, #0
 801e216:	1bde      	subs	r6, r3, r7
 801e218:	2e00      	cmp	r6, #0
 801e21a:	dc3f      	bgt.n	801e29c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801e21c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e224:	441c      	add	r4, r3
 801e226:	2900      	cmp	r1, #0
 801e228:	f340 808d 	ble.w	801e346 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e22c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e232:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e236:	3901      	subs	r1, #1
 801e238:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e23c:	eef0 6a62 	vmov.f32	s13, s5
 801e240:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e244:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e248:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e24c:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801e250:	eef0 6a43 	vmov.f32	s13, s6
 801e254:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e258:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801e25c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e260:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e264:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e268:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e26c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e270:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e274:	ee12 2a90 	vmov	r2, s5
 801e278:	eef0 2a47 	vmov.f32	s5, s14
 801e27c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e280:	ee13 2a10 	vmov	r2, s6
 801e284:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e288:	eeb0 3a67 	vmov.f32	s6, s15
 801e28c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e290:	9a01      	ldr	r2, [sp, #4]
 801e292:	9310      	str	r3, [sp, #64]	@ 0x40
 801e294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e296:	bf08      	it	eq
 801e298:	4613      	moveq	r3, r2
 801e29a:	e741      	b.n	801e120 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e29c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e2a0:	d44b      	bmi.n	801e33a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e2a2:	f8dc b008 	ldr.w	fp, [ip, #8]
 801e2a6:	45cb      	cmp	fp, r9
 801e2a8:	dd47      	ble.n	801e33a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e2aa:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e2ae:	d444      	bmi.n	801e33a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e2b0:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801e2b4:	4556      	cmp	r6, sl
 801e2b6:	dd40      	ble.n	801e33a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801e2b8:	fa0f f68b 	sxth.w	r6, fp
 801e2bc:	fb0a 9906 	mla	r9, sl, r6, r9
 801e2c0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e2c4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e2c8:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e2cc:	fb1b fb05 	smulbb	fp, fp, r5
 801e2d0:	eb08 0a09 	add.w	sl, r8, r9
 801e2d4:	f818 9009 	ldrb.w	r9, [r8, r9]
 801e2d8:	fb09 b90e 	mla	r9, r9, lr, fp
 801e2dc:	fa1f f989 	uxth.w	r9, r9
 801e2e0:	f109 0b01 	add.w	fp, r9, #1
 801e2e4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e2e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e2ec:	f804 9006 	strb.w	r9, [r4, r6]
 801e2f0:	4426      	add	r6, r4
 801e2f2:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e2f6:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e2fa:	fb1b fb05 	smulbb	fp, fp, r5
 801e2fe:	fb09 b90e 	mla	r9, r9, lr, fp
 801e302:	fa1f f989 	uxth.w	r9, r9
 801e306:	f109 0b01 	add.w	fp, r9, #1
 801e30a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e30e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e312:	f886 9001 	strb.w	r9, [r6, #1]
 801e316:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e31a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e31e:	fb1a fa05 	smulbb	sl, sl, r5
 801e322:	fb09 a90e 	mla	r9, r9, lr, sl
 801e326:	fa1f f989 	uxth.w	r9, r9
 801e32a:	f109 0a01 	add.w	sl, r9, #1
 801e32e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e332:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e336:	f886 9002 	strb.w	r9, [r6, #2]
 801e33a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801e33c:	3701      	adds	r7, #1
 801e33e:	4430      	add	r0, r6
 801e340:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801e342:	4432      	add	r2, r6
 801e344:	e767      	b.n	801e216 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e346:	b003      	add	sp, #12
 801e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e34c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e350:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e356:	9201      	str	r2, [sp, #4]
 801e358:	6868      	ldr	r0, [r5, #4]
 801e35a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801e35c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801e360:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801e364:	fb00 2404 	mla	r4, r0, r4, r2
 801e368:	682a      	ldr	r2, [r5, #0]
 801e36a:	f8d7 8000 	ldr.w	r8, [r7]
 801e36e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e372:	4414      	add	r4, r2
 801e374:	2900      	cmp	r1, #0
 801e376:	dc03      	bgt.n	801e380 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e378:	9a01      	ldr	r2, [sp, #4]
 801e37a:	2a00      	cmp	r2, #0
 801e37c:	f340 80af 	ble.w	801e4de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e382:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801e386:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e38a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e38c:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801e390:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e394:	2b00      	cmp	r3, #0
 801e396:	dd0c      	ble.n	801e3b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e398:	1405      	asrs	r5, r0, #16
 801e39a:	d405      	bmi.n	801e3a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e39c:	4555      	cmp	r5, sl
 801e39e:	da03      	bge.n	801e3a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e3a0:	1415      	asrs	r5, r2, #16
 801e3a2:	d401      	bmi.n	801e3a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e3a4:	454d      	cmp	r5, r9
 801e3a6:	db05      	blt.n	801e3b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e3a8:	4470      	add	r0, lr
 801e3aa:	4462      	add	r2, ip
 801e3ac:	3b01      	subs	r3, #1
 801e3ae:	3403      	adds	r4, #3
 801e3b0:	e7f0      	b.n	801e394 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e3b2:	d038      	beq.n	801e426 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e3b4:	1e5d      	subs	r5, r3, #1
 801e3b6:	fb0e 0605 	mla	r6, lr, r5, r0
 801e3ba:	1436      	asrs	r6, r6, #16
 801e3bc:	d42a      	bmi.n	801e414 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e3be:	4556      	cmp	r6, sl
 801e3c0:	da28      	bge.n	801e414 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e3c2:	fb0c 2505 	mla	r5, ip, r5, r2
 801e3c6:	142d      	asrs	r5, r5, #16
 801e3c8:	d424      	bmi.n	801e414 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e3ca:	454d      	cmp	r5, r9
 801e3cc:	da22      	bge.n	801e414 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801e3ce:	1ce6      	adds	r6, r4, #3
 801e3d0:	4699      	mov	r9, r3
 801e3d2:	f1b9 0f00 	cmp.w	r9, #0
 801e3d6:	f106 0603 	add.w	r6, r6, #3
 801e3da:	dd1f      	ble.n	801e41c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801e3dc:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801e3e0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e3e4:	1415      	asrs	r5, r2, #16
 801e3e6:	4470      	add	r0, lr
 801e3e8:	4462      	add	r2, ip
 801e3ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801e3ee:	fb0b a505 	mla	r5, fp, r5, sl
 801e3f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3f6:	eb08 0a05 	add.w	sl, r8, r5
 801e3fa:	f818 5005 	ldrb.w	r5, [r8, r5]
 801e3fe:	f806 5c06 	strb.w	r5, [r6, #-6]
 801e402:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801e406:	f806 5c05 	strb.w	r5, [r6, #-5]
 801e40a:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801e40e:	f806 5c04 	strb.w	r5, [r6, #-4]
 801e412:	e7de      	b.n	801e3d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e414:	2600      	movs	r6, #0
 801e416:	1b9d      	subs	r5, r3, r6
 801e418:	2d00      	cmp	r5, #0
 801e41a:	dc38      	bgt.n	801e48e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e41c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e420:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e424:	441c      	add	r4, r3
 801e426:	2900      	cmp	r1, #0
 801e428:	dd59      	ble.n	801e4de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e42a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e42e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e430:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e434:	3901      	subs	r1, #1
 801e436:	eeb0 6a62 	vmov.f32	s12, s5
 801e43a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e43e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e442:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e446:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801e44a:	eeb0 6a43 	vmov.f32	s12, s6
 801e44e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e452:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801e456:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e45a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e45e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e462:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e466:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e46a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e46e:	ee12 2a90 	vmov	r2, s5
 801e472:	eef0 2a47 	vmov.f32	s5, s14
 801e476:	fb92 fef3 	sdiv	lr, r2, r3
 801e47a:	ee13 2a10 	vmov	r2, s6
 801e47e:	eeb0 3a67 	vmov.f32	s6, s15
 801e482:	fb92 fcf3 	sdiv	ip, r2, r3
 801e486:	9a01      	ldr	r2, [sp, #4]
 801e488:	bf08      	it	eq
 801e48a:	4613      	moveq	r3, r2
 801e48c:	e772      	b.n	801e374 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801e48e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e492:	d420      	bmi.n	801e4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e494:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801e498:	45cb      	cmp	fp, r9
 801e49a:	dd1c      	ble.n	801e4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e49c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e4a0:	d419      	bmi.n	801e4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e4a2:	68fd      	ldr	r5, [r7, #12]
 801e4a4:	4555      	cmp	r5, sl
 801e4a6:	dd16      	ble.n	801e4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e4a8:	fa0f f58b 	sxth.w	r5, fp
 801e4ac:	fb0a 9505 	mla	r5, sl, r5, r9
 801e4b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e4b4:	f818 9005 	ldrb.w	r9, [r8, r5]
 801e4b8:	eb08 0b05 	add.w	fp, r8, r5
 801e4bc:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801e4c0:	f804 9005 	strb.w	r9, [r4, r5]
 801e4c4:	4425      	add	r5, r4
 801e4c6:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801e4ca:	f885 9001 	strb.w	r9, [r5, #1]
 801e4ce:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e4d2:	f885 9002 	strb.w	r9, [r5, #2]
 801e4d6:	4470      	add	r0, lr
 801e4d8:	4462      	add	r2, ip
 801e4da:	3601      	adds	r6, #1
 801e4dc:	e79b      	b.n	801e416 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801e4de:	b003      	add	sp, #12
 801e4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e4e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4e8:	b085      	sub	sp, #20
 801e4ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e4ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e4f0:	9202      	str	r2, [sp, #8]
 801e4f2:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801e4f6:	6860      	ldr	r0, [r4, #4]
 801e4f8:	9203      	str	r2, [sp, #12]
 801e4fa:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801e4fe:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801e502:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801e506:	fb00 2505 	mla	r5, r0, r5, r2
 801e50a:	6822      	ldr	r2, [r4, #0]
 801e50c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e510:	4415      	add	r5, r2
 801e512:	f8dc 2000 	ldr.w	r2, [ip]
 801e516:	9201      	str	r2, [sp, #4]
 801e518:	2900      	cmp	r1, #0
 801e51a:	dc03      	bgt.n	801e524 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e51c:	9a02      	ldr	r2, [sp, #8]
 801e51e:	2a00      	cmp	r2, #0
 801e520:	f340 8122 	ble.w	801e768 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e524:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e526:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e52a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801e52e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e530:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e534:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e538:	2b00      	cmp	r3, #0
 801e53a:	dd0d      	ble.n	801e558 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e53c:	1422      	asrs	r2, r4, #16
 801e53e:	d405      	bmi.n	801e54c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e540:	4542      	cmp	r2, r8
 801e542:	da03      	bge.n	801e54c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e544:	1402      	asrs	r2, r0, #16
 801e546:	d401      	bmi.n	801e54c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e548:	42ba      	cmp	r2, r7
 801e54a:	db06      	blt.n	801e55a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e54c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e54e:	4474      	add	r4, lr
 801e550:	3b01      	subs	r3, #1
 801e552:	3503      	adds	r5, #3
 801e554:	4410      	add	r0, r2
 801e556:	e7ef      	b.n	801e538 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e558:	d072      	beq.n	801e640 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e55a:	1e5a      	subs	r2, r3, #1
 801e55c:	fb0e 4602 	mla	r6, lr, r2, r4
 801e560:	1436      	asrs	r6, r6, #16
 801e562:	d462      	bmi.n	801e62a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e564:	4546      	cmp	r6, r8
 801e566:	da60      	bge.n	801e62a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e568:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e56a:	fb06 0202 	mla	r2, r6, r2, r0
 801e56e:	1412      	asrs	r2, r2, #16
 801e570:	d45b      	bmi.n	801e62a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e572:	42ba      	cmp	r2, r7
 801e574:	da59      	bge.n	801e62a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e576:	1cef      	adds	r7, r5, #3
 801e578:	4699      	mov	r9, r3
 801e57a:	f1b9 0f00 	cmp.w	r9, #0
 801e57e:	dd5a      	ble.n	801e636 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e580:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e584:	1426      	asrs	r6, r4, #16
 801e586:	1402      	asrs	r2, r0, #16
 801e588:	fb08 6202 	mla	r2, r8, r2, r6
 801e58c:	9e01      	ldr	r6, [sp, #4]
 801e58e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801e592:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801e596:	d041      	beq.n	801e61c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e598:	9a03      	ldr	r2, [sp, #12]
 801e59a:	fa5f fb86 	uxtb.w	fp, r6
 801e59e:	fb02 f808 	mul.w	r8, r2, r8
 801e5a2:	f108 0201 	add.w	r2, r8, #1
 801e5a6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801e5aa:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801e5ae:	1212      	asrs	r2, r2, #8
 801e5b0:	fa1f fa82 	uxth.w	sl, r2
 801e5b4:	43d2      	mvns	r2, r2
 801e5b6:	fb1b fb0a 	smulbb	fp, fp, sl
 801e5ba:	b2d2      	uxtb	r2, r2
 801e5bc:	fb08 b802 	mla	r8, r8, r2, fp
 801e5c0:	fa1f f888 	uxth.w	r8, r8
 801e5c4:	f108 0b01 	add.w	fp, r8, #1
 801e5c8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e5cc:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e5d0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e5d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801e5d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e5dc:	fb16 fa0a 	smulbb	sl, r6, sl
 801e5e0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e5e4:	f807 8c03 	strb.w	r8, [r7, #-3]
 801e5e8:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801e5ec:	fb06 aa02 	mla	sl, r6, r2, sl
 801e5f0:	fb08 b802 	mla	r8, r8, r2, fp
 801e5f4:	fa1f fa8a 	uxth.w	sl, sl
 801e5f8:	fa1f f888 	uxth.w	r8, r8
 801e5fc:	f10a 0601 	add.w	r6, sl, #1
 801e600:	f108 0b01 	add.w	fp, r8, #1
 801e604:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e608:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e60c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e610:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e614:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e618:	f807 8c02 	strb.w	r8, [r7, #-2]
 801e61c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e61e:	4474      	add	r4, lr
 801e620:	3703      	adds	r7, #3
 801e622:	f109 39ff 	add.w	r9, r9, #4294967295
 801e626:	4410      	add	r0, r2
 801e628:	e7a7      	b.n	801e57a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e62a:	f04f 0800 	mov.w	r8, #0
 801e62e:	eba3 0208 	sub.w	r2, r3, r8
 801e632:	2a00      	cmp	r2, #0
 801e634:	dc3b      	bgt.n	801e6ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801e636:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e63a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e63e:	441d      	add	r5, r3
 801e640:	2900      	cmp	r1, #0
 801e642:	f340 8091 	ble.w	801e768 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e646:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e64a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e64c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e650:	3901      	subs	r1, #1
 801e652:	eeb0 6a62 	vmov.f32	s12, s5
 801e656:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e65a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e65e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e662:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e666:	eeb0 6a43 	vmov.f32	s12, s6
 801e66a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e66e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e672:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e676:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e67a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e67e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e682:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e686:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e68a:	ee12 2a90 	vmov	r2, s5
 801e68e:	eef0 2a47 	vmov.f32	s5, s14
 801e692:	fb92 fef3 	sdiv	lr, r2, r3
 801e696:	ee13 2a10 	vmov	r2, s6
 801e69a:	eeb0 3a67 	vmov.f32	s6, s15
 801e69e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6a2:	9a02      	ldr	r2, [sp, #8]
 801e6a4:	9312      	str	r3, [sp, #72]	@ 0x48
 801e6a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6a8:	bf08      	it	eq
 801e6aa:	4613      	moveq	r3, r2
 801e6ac:	e734      	b.n	801e518 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e6ae:	1427      	asrs	r7, r4, #16
 801e6b0:	d454      	bmi.n	801e75c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e6b2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e6b6:	42be      	cmp	r6, r7
 801e6b8:	dd50      	ble.n	801e75c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e6ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e6be:	d44d      	bmi.n	801e75c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e6c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e6c4:	454a      	cmp	r2, r9
 801e6c6:	dd49      	ble.n	801e75c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e6c8:	b236      	sxth	r6, r6
 801e6ca:	9a01      	ldr	r2, [sp, #4]
 801e6cc:	fb09 7606 	mla	r6, r9, r6, r7
 801e6d0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801e6d4:	0e3a      	lsrs	r2, r7, #24
 801e6d6:	d041      	beq.n	801e75c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801e6d8:	9e03      	ldr	r6, [sp, #12]
 801e6da:	fa5f fb87 	uxtb.w	fp, r7
 801e6de:	4372      	muls	r2, r6
 801e6e0:	1c56      	adds	r6, r2, #1
 801e6e2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e6e6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801e6ea:	1212      	asrs	r2, r2, #8
 801e6ec:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e6f0:	fa1f fa82 	uxth.w	sl, r2
 801e6f4:	43d2      	mvns	r2, r2
 801e6f6:	fb1b fb0a 	smulbb	fp, fp, sl
 801e6fa:	b2d2      	uxtb	r2, r2
 801e6fc:	fb09 b902 	mla	r9, r9, r2, fp
 801e700:	fa1f f989 	uxth.w	r9, r9
 801e704:	f109 0b01 	add.w	fp, r9, #1
 801e708:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e70c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e710:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e714:	fb1b fb0a 	smulbb	fp, fp, sl
 801e718:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e71c:	fb17 fa0a 	smulbb	sl, r7, sl
 801e720:	f805 9006 	strb.w	r9, [r5, r6]
 801e724:	442e      	add	r6, r5
 801e726:	78b7      	ldrb	r7, [r6, #2]
 801e728:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e72c:	fb07 aa02 	mla	sl, r7, r2, sl
 801e730:	fb09 b902 	mla	r9, r9, r2, fp
 801e734:	fa1f fa8a 	uxth.w	sl, sl
 801e738:	fa1f f989 	uxth.w	r9, r9
 801e73c:	f10a 0701 	add.w	r7, sl, #1
 801e740:	f109 0b01 	add.w	fp, r9, #1
 801e744:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e748:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e74c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e750:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e754:	f886 a002 	strb.w	sl, [r6, #2]
 801e758:	f886 9001 	strb.w	r9, [r6, #1]
 801e75c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e75e:	4474      	add	r4, lr
 801e760:	f108 0801 	add.w	r8, r8, #1
 801e764:	4410      	add	r0, r2
 801e766:	e762      	b.n	801e62e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e768:	b005      	add	sp, #20
 801e76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e76e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e76e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e772:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e778:	9201      	str	r2, [sp, #4]
 801e77a:	6860      	ldr	r0, [r4, #4]
 801e77c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801e780:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801e784:	fb00 2505 	mla	r5, r0, r5, r2
 801e788:	6822      	ldr	r2, [r4, #0]
 801e78a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e78e:	4415      	add	r5, r2
 801e790:	f8dc 2000 	ldr.w	r2, [ip]
 801e794:	9200      	str	r2, [sp, #0]
 801e796:	2900      	cmp	r1, #0
 801e798:	dc03      	bgt.n	801e7a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e79a:	9a01      	ldr	r2, [sp, #4]
 801e79c:	2a00      	cmp	r2, #0
 801e79e:	f340 812b 	ble.w	801e9f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e7a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e7a4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e7a8:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801e7ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e7ae:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e7b2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	dd0e      	ble.n	801e7d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e7ba:	1422      	asrs	r2, r4, #16
 801e7bc:	d405      	bmi.n	801e7ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e7be:	4572      	cmp	r2, lr
 801e7c0:	da03      	bge.n	801e7ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e7c2:	1402      	asrs	r2, r0, #16
 801e7c4:	d401      	bmi.n	801e7ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e7c6:	42ba      	cmp	r2, r7
 801e7c8:	db07      	blt.n	801e7da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e7ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e7cc:	3b01      	subs	r3, #1
 801e7ce:	3503      	adds	r5, #3
 801e7d0:	4414      	add	r4, r2
 801e7d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e7d4:	4410      	add	r0, r2
 801e7d6:	e7ee      	b.n	801e7b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e7d8:	d06f      	beq.n	801e8ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e7da:	1e5a      	subs	r2, r3, #1
 801e7dc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801e7de:	fb06 4602 	mla	r6, r6, r2, r4
 801e7e2:	1436      	asrs	r6, r6, #16
 801e7e4:	d45e      	bmi.n	801e8a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e7e6:	4576      	cmp	r6, lr
 801e7e8:	da5c      	bge.n	801e8a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e7ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801e7ec:	fb06 0202 	mla	r2, r6, r2, r0
 801e7f0:	1412      	asrs	r2, r2, #16
 801e7f2:	d457      	bmi.n	801e8a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e7f4:	42ba      	cmp	r2, r7
 801e7f6:	da55      	bge.n	801e8a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e7f8:	1cee      	adds	r6, r5, #3
 801e7fa:	469a      	mov	sl, r3
 801e7fc:	f1ba 0f00 	cmp.w	sl, #0
 801e800:	dd56      	ble.n	801e8b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e802:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e806:	1427      	asrs	r7, r4, #16
 801e808:	1402      	asrs	r2, r0, #16
 801e80a:	fb0e 7202 	mla	r2, lr, r2, r7
 801e80e:	9f00      	ldr	r7, [sp, #0]
 801e810:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801e814:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801e818:	d03c      	beq.n	801e894 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e81a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e81e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e822:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e826:	fa5f f28e 	uxtb.w	r2, lr
 801e82a:	b2ff      	uxtb	r7, r7
 801e82c:	f000 80dd 	beq.w	801e9ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e830:	fa1f f882 	uxth.w	r8, r2
 801e834:	43d2      	mvns	r2, r2
 801e836:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801e83a:	fb17 f708 	smulbb	r7, r7, r8
 801e83e:	b2d2      	uxtb	r2, r2
 801e840:	fb19 f908 	smulbb	r9, r9, r8
 801e844:	fb0e 7702 	mla	r7, lr, r2, r7
 801e848:	fb1b f808 	smulbb	r8, fp, r8
 801e84c:	b2bf      	uxth	r7, r7
 801e84e:	f107 0e01 	add.w	lr, r7, #1
 801e852:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e856:	123f      	asrs	r7, r7, #8
 801e858:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e85c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801e860:	fb07 9902 	mla	r9, r7, r2, r9
 801e864:	fa1f f989 	uxth.w	r9, r9
 801e868:	f109 0701 	add.w	r7, r9, #1
 801e86c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e870:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e874:	fb07 8802 	mla	r8, r7, r2, r8
 801e878:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e87c:	fa1f f888 	uxth.w	r8, r8
 801e880:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e884:	f108 0201 	add.w	r2, r8, #1
 801e888:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e88c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e890:	f806 8c01 	strb.w	r8, [r6, #-1]
 801e894:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e896:	3603      	adds	r6, #3
 801e898:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e89c:	4414      	add	r4, r2
 801e89e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e8a0:	4410      	add	r0, r2
 801e8a2:	e7ab      	b.n	801e7fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e8a4:	f04f 0e00 	mov.w	lr, #0
 801e8a8:	eba3 020e 	sub.w	r2, r3, lr
 801e8ac:	2a00      	cmp	r2, #0
 801e8ae:	dc3d      	bgt.n	801e92c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e8b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8b8:	441d      	add	r5, r3
 801e8ba:	2900      	cmp	r1, #0
 801e8bc:	f340 809c 	ble.w	801e9f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e8c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e8c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8ca:	3901      	subs	r1, #1
 801e8cc:	eeb0 6a62 	vmov.f32	s12, s5
 801e8d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8dc:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801e8e0:	eeb0 6a43 	vmov.f32	s12, s6
 801e8e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8e8:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801e8ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e900:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e904:	ee12 2a90 	vmov	r2, s5
 801e908:	eef0 2a47 	vmov.f32	s5, s14
 801e90c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e910:	ee13 2a10 	vmov	r2, s6
 801e914:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e916:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e918:	eeb0 3a67 	vmov.f32	s6, s15
 801e91c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e920:	9a01      	ldr	r2, [sp, #4]
 801e922:	9310      	str	r3, [sp, #64]	@ 0x40
 801e924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e926:	bf08      	it	eq
 801e928:	4613      	moveq	r3, r2
 801e92a:	e734      	b.n	801e796 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801e92c:	1427      	asrs	r7, r4, #16
 801e92e:	d44d      	bmi.n	801e9cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e930:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e934:	42be      	cmp	r6, r7
 801e936:	dd49      	ble.n	801e9cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e938:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e93c:	d446      	bmi.n	801e9cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e93e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e942:	4542      	cmp	r2, r8
 801e944:	dd42      	ble.n	801e9cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e946:	b236      	sxth	r6, r6
 801e948:	9a00      	ldr	r2, [sp, #0]
 801e94a:	fb08 7606 	mla	r6, r8, r6, r7
 801e94e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801e952:	0e3a      	lsrs	r2, r7, #24
 801e954:	d03a      	beq.n	801e9cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e956:	2aff      	cmp	r2, #255	@ 0xff
 801e958:	b2d6      	uxtb	r6, r2
 801e95a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e95e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e962:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801e966:	b2ff      	uxtb	r7, r7
 801e968:	d037      	beq.n	801e9da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801e96a:	fa1f f986 	uxth.w	r9, r6
 801e96e:	4472      	add	r2, lr
 801e970:	43f6      	mvns	r6, r6
 801e972:	f815 8002 	ldrb.w	r8, [r5, r2]
 801e976:	fb17 f709 	smulbb	r7, r7, r9
 801e97a:	fb1a fa09 	smulbb	sl, sl, r9
 801e97e:	b2f6      	uxtb	r6, r6
 801e980:	fb1b f909 	smulbb	r9, fp, r9
 801e984:	fb08 7706 	mla	r7, r8, r6, r7
 801e988:	b2bf      	uxth	r7, r7
 801e98a:	f107 0801 	add.w	r8, r7, #1
 801e98e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801e992:	123f      	asrs	r7, r7, #8
 801e994:	54af      	strb	r7, [r5, r2]
 801e996:	442a      	add	r2, r5
 801e998:	7857      	ldrb	r7, [r2, #1]
 801e99a:	fb07 aa06 	mla	sl, r7, r6, sl
 801e99e:	fa1f fa8a 	uxth.w	sl, sl
 801e9a2:	f10a 0701 	add.w	r7, sl, #1
 801e9a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9aa:	7897      	ldrb	r7, [r2, #2]
 801e9ac:	fb07 9906 	mla	r9, r7, r6, r9
 801e9b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e9b4:	fa1f f989 	uxth.w	r9, r9
 801e9b8:	f882 a001 	strb.w	sl, [r2, #1]
 801e9bc:	f109 0601 	add.w	r6, r9, #1
 801e9c0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e9c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9c8:	f882 9002 	strb.w	r9, [r2, #2]
 801e9cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e9ce:	f10e 0e01 	add.w	lr, lr, #1
 801e9d2:	4414      	add	r4, r2
 801e9d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e9d6:	4410      	add	r0, r2
 801e9d8:	e766      	b.n	801e8a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e9da:	4472      	add	r2, lr
 801e9dc:	54af      	strb	r7, [r5, r2]
 801e9de:	442a      	add	r2, r5
 801e9e0:	f882 a001 	strb.w	sl, [r2, #1]
 801e9e4:	f882 b002 	strb.w	fp, [r2, #2]
 801e9e8:	e7f0      	b.n	801e9cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e9ea:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e9ee:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e9f2:	f806 bc01 	strb.w	fp, [r6, #-1]
 801e9f6:	e74d      	b.n	801e894 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e9f8:	b003      	add	sp, #12
 801e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ea00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea04:	b087      	sub	sp, #28
 801ea06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea0a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea0c:	9204      	str	r2, [sp, #16]
 801ea0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ea12:	6860      	ldr	r0, [r4, #4]
 801ea14:	9205      	str	r2, [sp, #20]
 801ea16:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801ea1a:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801ea1e:	9101      	str	r1, [sp, #4]
 801ea20:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801ea24:	fb00 2505 	mla	r5, r0, r5, r2
 801ea28:	6822      	ldr	r2, [r4, #0]
 801ea2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ea2e:	4415      	add	r5, r2
 801ea30:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ea34:	3201      	adds	r2, #1
 801ea36:	f022 0201 	bic.w	r2, r2, #1
 801ea3a:	9202      	str	r2, [sp, #8]
 801ea3c:	f8dc 2000 	ldr.w	r2, [ip]
 801ea40:	9203      	str	r2, [sp, #12]
 801ea42:	9a01      	ldr	r2, [sp, #4]
 801ea44:	2a00      	cmp	r2, #0
 801ea46:	dc03      	bgt.n	801ea50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ea48:	9a04      	ldr	r2, [sp, #16]
 801ea4a:	2a00      	cmp	r2, #0
 801ea4c:	f340 8135 	ble.w	801ecba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ea50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ea52:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ea56:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ea5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ea5c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ea60:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	dd0d      	ble.n	801ea84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ea68:	1422      	asrs	r2, r4, #16
 801ea6a:	d405      	bmi.n	801ea78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea6c:	4542      	cmp	r2, r8
 801ea6e:	da03      	bge.n	801ea78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea70:	1402      	asrs	r2, r0, #16
 801ea72:	d401      	bmi.n	801ea78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea74:	42ba      	cmp	r2, r7
 801ea76:	db06      	blt.n	801ea86 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ea78:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ea7a:	4474      	add	r4, lr
 801ea7c:	3b01      	subs	r3, #1
 801ea7e:	3503      	adds	r5, #3
 801ea80:	4410      	add	r0, r2
 801ea82:	e7ef      	b.n	801ea64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ea84:	d077      	beq.n	801eb76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801ea86:	1e5a      	subs	r2, r3, #1
 801ea88:	fb0e 4602 	mla	r6, lr, r2, r4
 801ea8c:	1436      	asrs	r6, r6, #16
 801ea8e:	d469      	bmi.n	801eb64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ea90:	4546      	cmp	r6, r8
 801ea92:	da67      	bge.n	801eb64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ea94:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ea96:	fb06 0202 	mla	r2, r6, r2, r0
 801ea9a:	1412      	asrs	r2, r2, #16
 801ea9c:	d462      	bmi.n	801eb64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ea9e:	42ba      	cmp	r2, r7
 801eaa0:	da60      	bge.n	801eb64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801eaa2:	1cee      	adds	r6, r5, #3
 801eaa4:	4699      	mov	r9, r3
 801eaa6:	f1b9 0f00 	cmp.w	r9, #0
 801eaaa:	dd5f      	ble.n	801eb6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801eaac:	1422      	asrs	r2, r4, #16
 801eaae:	9902      	ldr	r1, [sp, #8]
 801eab0:	1407      	asrs	r7, r0, #16
 801eab2:	fb01 2707 	mla	r7, r1, r7, r2
 801eab6:	9903      	ldr	r1, [sp, #12]
 801eab8:	087a      	lsrs	r2, r7, #1
 801eaba:	5c8a      	ldrb	r2, [r1, r2]
 801eabc:	07f9      	lsls	r1, r7, #31
 801eabe:	bf54      	ite	pl
 801eac0:	f002 020f 	andpl.w	r2, r2, #15
 801eac4:	1112      	asrmi	r2, r2, #4
 801eac6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801eaca:	b2d2      	uxtb	r2, r2
 801eacc:	2a00      	cmp	r2, #0
 801eace:	d042      	beq.n	801eb56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ead0:	497b      	ldr	r1, [pc, #492]	@ (801ecc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ead2:	680f      	ldr	r7, [r1, #0]
 801ead4:	9905      	ldr	r1, [sp, #20]
 801ead6:	fa5f fb87 	uxtb.w	fp, r7
 801eada:	434a      	muls	r2, r1
 801eadc:	f102 0801 	add.w	r8, r2, #1
 801eae0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801eae4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801eae8:	1212      	asrs	r2, r2, #8
 801eaea:	fa1f fa82 	uxth.w	sl, r2
 801eaee:	43d2      	mvns	r2, r2
 801eaf0:	fb1b fb0a 	smulbb	fp, fp, sl
 801eaf4:	b2d2      	uxtb	r2, r2
 801eaf6:	fb08 b802 	mla	r8, r8, r2, fp
 801eafa:	fa1f f888 	uxth.w	r8, r8
 801eafe:	f108 0b01 	add.w	fp, r8, #1
 801eb02:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801eb06:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801eb0a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801eb0e:	fb1b fb0a 	smulbb	fp, fp, sl
 801eb12:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eb16:	fb17 fa0a 	smulbb	sl, r7, sl
 801eb1a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801eb1e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801eb22:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801eb26:	fb07 aa02 	mla	sl, r7, r2, sl
 801eb2a:	fb08 b802 	mla	r8, r8, r2, fp
 801eb2e:	fa1f fa8a 	uxth.w	sl, sl
 801eb32:	fa1f f888 	uxth.w	r8, r8
 801eb36:	f10a 0701 	add.w	r7, sl, #1
 801eb3a:	f108 0b01 	add.w	fp, r8, #1
 801eb3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eb42:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801eb46:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eb4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eb4e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801eb52:	f806 8c02 	strb.w	r8, [r6, #-2]
 801eb56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eb58:	4474      	add	r4, lr
 801eb5a:	3603      	adds	r6, #3
 801eb5c:	f109 39ff 	add.w	r9, r9, #4294967295
 801eb60:	4410      	add	r0, r2
 801eb62:	e7a0      	b.n	801eaa6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801eb64:	2700      	movs	r7, #0
 801eb66:	1bda      	subs	r2, r3, r7
 801eb68:	2a00      	cmp	r2, #0
 801eb6a:	dc3e      	bgt.n	801ebea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eb6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb74:	441d      	add	r5, r3
 801eb76:	9b01      	ldr	r3, [sp, #4]
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	f340 809e 	ble.w	801ecba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801eb7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eb84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb88:	eeb0 6a62 	vmov.f32	s12, s5
 801eb8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb98:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801eb9c:	eeb0 6a43 	vmov.f32	s12, s6
 801eba0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eba4:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801eba8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebc0:	ee12 2a90 	vmov	r2, s5
 801ebc4:	eef0 2a47 	vmov.f32	s5, s14
 801ebc8:	fb92 fef3 	sdiv	lr, r2, r3
 801ebcc:	ee13 2a10 	vmov	r2, s6
 801ebd0:	eeb0 3a67 	vmov.f32	s6, s15
 801ebd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebd8:	9314      	str	r3, [sp, #80]	@ 0x50
 801ebda:	9b01      	ldr	r3, [sp, #4]
 801ebdc:	9a04      	ldr	r2, [sp, #16]
 801ebde:	3b01      	subs	r3, #1
 801ebe0:	9301      	str	r3, [sp, #4]
 801ebe2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ebe4:	bf08      	it	eq
 801ebe6:	4613      	moveq	r3, r2
 801ebe8:	e72b      	b.n	801ea42 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ebea:	1426      	asrs	r6, r4, #16
 801ebec:	d460      	bmi.n	801ecb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ebee:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ebf2:	42b2      	cmp	r2, r6
 801ebf4:	dd5c      	ble.n	801ecb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ebf6:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ebfa:	d459      	bmi.n	801ecb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ebfc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ec00:	4542      	cmp	r2, r8
 801ec02:	dd55      	ble.n	801ecb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ec04:	9a02      	ldr	r2, [sp, #8]
 801ec06:	9903      	ldr	r1, [sp, #12]
 801ec08:	fb08 6602 	mla	r6, r8, r2, r6
 801ec0c:	0872      	lsrs	r2, r6, #1
 801ec0e:	07f6      	lsls	r6, r6, #31
 801ec10:	5c8a      	ldrb	r2, [r1, r2]
 801ec12:	bf54      	ite	pl
 801ec14:	f002 020f 	andpl.w	r2, r2, #15
 801ec18:	1112      	asrmi	r2, r2, #4
 801ec1a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ec1e:	b2d2      	uxtb	r2, r2
 801ec20:	2a00      	cmp	r2, #0
 801ec22:	d045      	beq.n	801ecb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ec24:	4926      	ldr	r1, [pc, #152]	@ (801ecc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ec26:	f8d1 8000 	ldr.w	r8, [r1]
 801ec2a:	9905      	ldr	r1, [sp, #20]
 801ec2c:	fa5f fb88 	uxtb.w	fp, r8
 801ec30:	434a      	muls	r2, r1
 801ec32:	1c56      	adds	r6, r2, #1
 801ec34:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ec38:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801ec3c:	1212      	asrs	r2, r2, #8
 801ec3e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ec42:	fa1f fa82 	uxth.w	sl, r2
 801ec46:	43d2      	mvns	r2, r2
 801ec48:	fb1b fb0a 	smulbb	fp, fp, sl
 801ec4c:	b2d2      	uxtb	r2, r2
 801ec4e:	fb09 b902 	mla	r9, r9, r2, fp
 801ec52:	fa1f f989 	uxth.w	r9, r9
 801ec56:	f109 0b01 	add.w	fp, r9, #1
 801ec5a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ec5e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801ec62:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801ec66:	fb1b fb0a 	smulbb	fp, fp, sl
 801ec6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec6e:	fb18 fa0a 	smulbb	sl, r8, sl
 801ec72:	f805 9006 	strb.w	r9, [r5, r6]
 801ec76:	442e      	add	r6, r5
 801ec78:	f896 8002 	ldrb.w	r8, [r6, #2]
 801ec7c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ec80:	fb08 aa02 	mla	sl, r8, r2, sl
 801ec84:	fb09 b902 	mla	r9, r9, r2, fp
 801ec88:	fa1f fa8a 	uxth.w	sl, sl
 801ec8c:	fa1f f989 	uxth.w	r9, r9
 801ec90:	f10a 0801 	add.w	r8, sl, #1
 801ec94:	f109 0b01 	add.w	fp, r9, #1
 801ec98:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801ec9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eca0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eca4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eca8:	f886 a002 	strb.w	sl, [r6, #2]
 801ecac:	f886 9001 	strb.w	r9, [r6, #1]
 801ecb0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ecb2:	4474      	add	r4, lr
 801ecb4:	3701      	adds	r7, #1
 801ecb6:	4410      	add	r0, r2
 801ecb8:	e755      	b.n	801eb66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ecba:	b007      	add	sp, #28
 801ecbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecc0:	240284f8 	.word	0x240284f8

0801ecc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc8:	b085      	sub	sp, #20
 801ecca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ecce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ecd0:	9203      	str	r2, [sp, #12]
 801ecd2:	6860      	ldr	r0, [r4, #4]
 801ecd4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ecd8:	9100      	str	r1, [sp, #0]
 801ecda:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801ecde:	fb00 2606 	mla	r6, r0, r6, r2
 801ece2:	6822      	ldr	r2, [r4, #0]
 801ece4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ece8:	4416      	add	r6, r2
 801ecea:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ecee:	3201      	adds	r2, #1
 801ecf0:	f022 0201 	bic.w	r2, r2, #1
 801ecf4:	9201      	str	r2, [sp, #4]
 801ecf6:	f8dc 2000 	ldr.w	r2, [ip]
 801ecfa:	9202      	str	r2, [sp, #8]
 801ecfc:	9a00      	ldr	r2, [sp, #0]
 801ecfe:	2a00      	cmp	r2, #0
 801ed00:	dc03      	bgt.n	801ed0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ed02:	9a03      	ldr	r2, [sp, #12]
 801ed04:	2a00      	cmp	r2, #0
 801ed06:	f340 8140 	ble.w	801ef8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ed0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ed0c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ed10:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801ed14:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ed16:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ed1a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	dd0e      	ble.n	801ed40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ed22:	142a      	asrs	r2, r5, #16
 801ed24:	d405      	bmi.n	801ed32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ed26:	4572      	cmp	r2, lr
 801ed28:	da03      	bge.n	801ed32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ed2a:	1422      	asrs	r2, r4, #16
 801ed2c:	d401      	bmi.n	801ed32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ed2e:	42ba      	cmp	r2, r7
 801ed30:	db07      	blt.n	801ed42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ed32:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ed34:	3b01      	subs	r3, #1
 801ed36:	3603      	adds	r6, #3
 801ed38:	4415      	add	r5, r2
 801ed3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ed3c:	4414      	add	r4, r2
 801ed3e:	e7ee      	b.n	801ed1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed40:	d072      	beq.n	801ee28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed42:	1e5a      	subs	r2, r3, #1
 801ed44:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ed46:	fb00 5002 	mla	r0, r0, r2, r5
 801ed4a:	1400      	asrs	r0, r0, #16
 801ed4c:	d463      	bmi.n	801ee16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ed4e:	4570      	cmp	r0, lr
 801ed50:	da61      	bge.n	801ee16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ed52:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ed54:	fb00 4202 	mla	r2, r0, r2, r4
 801ed58:	1412      	asrs	r2, r2, #16
 801ed5a:	d45c      	bmi.n	801ee16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ed5c:	42ba      	cmp	r2, r7
 801ed5e:	da5a      	bge.n	801ee16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ed60:	1cf0      	adds	r0, r6, #3
 801ed62:	469a      	mov	sl, r3
 801ed64:	f1ba 0f00 	cmp.w	sl, #0
 801ed68:	dd59      	ble.n	801ee1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ed6a:	142a      	asrs	r2, r5, #16
 801ed6c:	9901      	ldr	r1, [sp, #4]
 801ed6e:	1427      	asrs	r7, r4, #16
 801ed70:	fb01 2707 	mla	r7, r1, r7, r2
 801ed74:	9902      	ldr	r1, [sp, #8]
 801ed76:	087a      	lsrs	r2, r7, #1
 801ed78:	5c8a      	ldrb	r2, [r1, r2]
 801ed7a:	07f9      	lsls	r1, r7, #31
 801ed7c:	bf54      	ite	pl
 801ed7e:	f002 020f 	andpl.w	r2, r2, #15
 801ed82:	1112      	asrmi	r2, r2, #4
 801ed84:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ed88:	b2d2      	uxtb	r2, r2
 801ed8a:	2a00      	cmp	r2, #0
 801ed8c:	d03b      	beq.n	801ee06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ed8e:	4980      	ldr	r1, [pc, #512]	@ (801ef90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801ed90:	2aff      	cmp	r2, #255	@ 0xff
 801ed92:	680f      	ldr	r7, [r1, #0]
 801ed94:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ed98:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ed9c:	b2ff      	uxtb	r7, r7
 801ed9e:	f000 80ed 	beq.w	801ef7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801eda2:	fa1f f882 	uxth.w	r8, r2
 801eda6:	43d2      	mvns	r2, r2
 801eda8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801edac:	fb17 f708 	smulbb	r7, r7, r8
 801edb0:	b2d2      	uxtb	r2, r2
 801edb2:	fb19 f908 	smulbb	r9, r9, r8
 801edb6:	fb0e 7702 	mla	r7, lr, r2, r7
 801edba:	fb1b f808 	smulbb	r8, fp, r8
 801edbe:	b2bf      	uxth	r7, r7
 801edc0:	f107 0e01 	add.w	lr, r7, #1
 801edc4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801edc8:	123f      	asrs	r7, r7, #8
 801edca:	f800 7c03 	strb.w	r7, [r0, #-3]
 801edce:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801edd2:	fb07 9902 	mla	r9, r7, r2, r9
 801edd6:	fa1f f989 	uxth.w	r9, r9
 801edda:	f109 0701 	add.w	r7, r9, #1
 801edde:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ede2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801ede6:	fb07 8802 	mla	r8, r7, r2, r8
 801edea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801edee:	fa1f f888 	uxth.w	r8, r8
 801edf2:	f800 9c02 	strb.w	r9, [r0, #-2]
 801edf6:	f108 0201 	add.w	r2, r8, #1
 801edfa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801edfe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ee02:	f800 8c01 	strb.w	r8, [r0, #-1]
 801ee06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ee08:	3003      	adds	r0, #3
 801ee0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ee0e:	4415      	add	r5, r2
 801ee10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ee12:	4414      	add	r4, r2
 801ee14:	e7a6      	b.n	801ed64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ee16:	2700      	movs	r7, #0
 801ee18:	1bda      	subs	r2, r3, r7
 801ee1a:	2a00      	cmp	r2, #0
 801ee1c:	dc40      	bgt.n	801eea0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801ee1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee26:	441e      	add	r6, r3
 801ee28:	9b00      	ldr	r3, [sp, #0]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	f340 80ad 	ble.w	801ef8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ee30:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee3a:	eeb0 6a62 	vmov.f32	s12, s5
 801ee3e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee42:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee4a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ee4e:	eeb0 6a43 	vmov.f32	s12, s6
 801ee52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee56:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ee5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee62:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee72:	ee12 2a90 	vmov	r2, s5
 801ee76:	eef0 2a47 	vmov.f32	s5, s14
 801ee7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee7e:	ee13 2a10 	vmov	r2, s6
 801ee82:	9311      	str	r3, [sp, #68]	@ 0x44
 801ee84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee86:	eeb0 3a67 	vmov.f32	s6, s15
 801ee8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee8e:	9312      	str	r3, [sp, #72]	@ 0x48
 801ee90:	9b00      	ldr	r3, [sp, #0]
 801ee92:	9a03      	ldr	r2, [sp, #12]
 801ee94:	3b01      	subs	r3, #1
 801ee96:	9300      	str	r3, [sp, #0]
 801ee98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee9a:	bf08      	it	eq
 801ee9c:	4613      	moveq	r3, r2
 801ee9e:	e72d      	b.n	801ecfc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eea0:	1428      	asrs	r0, r5, #16
 801eea2:	d45c      	bmi.n	801ef5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801eea4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801eea8:	4282      	cmp	r2, r0
 801eeaa:	dd58      	ble.n	801ef5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801eeac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801eeb0:	d455      	bmi.n	801ef5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801eeb2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801eeb6:	4572      	cmp	r2, lr
 801eeb8:	dd51      	ble.n	801ef5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801eeba:	9a01      	ldr	r2, [sp, #4]
 801eebc:	9902      	ldr	r1, [sp, #8]
 801eebe:	fb0e 0002 	mla	r0, lr, r2, r0
 801eec2:	0842      	lsrs	r2, r0, #1
 801eec4:	07c0      	lsls	r0, r0, #31
 801eec6:	5c8a      	ldrb	r2, [r1, r2]
 801eec8:	bf54      	ite	pl
 801eeca:	f002 020f 	andpl.w	r2, r2, #15
 801eece:	1112      	asrmi	r2, r2, #4
 801eed0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801eed4:	b2d2      	uxtb	r2, r2
 801eed6:	2a00      	cmp	r2, #0
 801eed8:	d041      	beq.n	801ef5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801eeda:	492d      	ldr	r1, [pc, #180]	@ (801ef90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801eedc:	2aff      	cmp	r2, #255	@ 0xff
 801eede:	6808      	ldr	r0, [r1, #0]
 801eee0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801eee4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801eee8:	fa5f fe80 	uxtb.w	lr, r0
 801eeec:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801eef0:	d03b      	beq.n	801ef6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801eef2:	fa1f f982 	uxth.w	r9, r2
 801eef6:	4438      	add	r0, r7
 801eef8:	43d2      	mvns	r2, r2
 801eefa:	f816 8000 	ldrb.w	r8, [r6, r0]
 801eefe:	fb1e fe09 	smulbb	lr, lr, r9
 801ef02:	fb1a fa09 	smulbb	sl, sl, r9
 801ef06:	b2d2      	uxtb	r2, r2
 801ef08:	fb1b f909 	smulbb	r9, fp, r9
 801ef0c:	fb08 ee02 	mla	lr, r8, r2, lr
 801ef10:	fa1f fe8e 	uxth.w	lr, lr
 801ef14:	f10e 0801 	add.w	r8, lr, #1
 801ef18:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801ef1c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ef20:	f806 e000 	strb.w	lr, [r6, r0]
 801ef24:	4430      	add	r0, r6
 801ef26:	f890 e001 	ldrb.w	lr, [r0, #1]
 801ef2a:	fb0e aa02 	mla	sl, lr, r2, sl
 801ef2e:	fa1f fa8a 	uxth.w	sl, sl
 801ef32:	f10a 0e01 	add.w	lr, sl, #1
 801ef36:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801ef3a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801ef3e:	fb0e 9902 	mla	r9, lr, r2, r9
 801ef42:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ef46:	fa1f f989 	uxth.w	r9, r9
 801ef4a:	f880 a001 	strb.w	sl, [r0, #1]
 801ef4e:	f109 0201 	add.w	r2, r9, #1
 801ef52:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ef56:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef5a:	f880 9002 	strb.w	r9, [r0, #2]
 801ef5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ef60:	3701      	adds	r7, #1
 801ef62:	4415      	add	r5, r2
 801ef64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ef66:	4414      	add	r4, r2
 801ef68:	e756      	b.n	801ee18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ef6a:	4438      	add	r0, r7
 801ef6c:	f806 e000 	strb.w	lr, [r6, r0]
 801ef70:	4430      	add	r0, r6
 801ef72:	f880 a001 	strb.w	sl, [r0, #1]
 801ef76:	f880 b002 	strb.w	fp, [r0, #2]
 801ef7a:	e7f0      	b.n	801ef5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ef7c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ef80:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ef84:	f800 bc01 	strb.w	fp, [r0, #-1]
 801ef88:	e73d      	b.n	801ee06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ef8a:	b005      	add	sp, #20
 801ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef90:	240284f8 	.word	0x240284f8

0801ef94 <_ZN8touchgfx8LCD24bppD1Ev>:
 801ef94:	4770      	bx	lr

0801ef96 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801ef96:	4770      	bx	lr

0801ef98 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801ef98:	4770      	bx	lr

0801ef9a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801ef9a:	4770      	bx	lr

0801ef9c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801ef9c:	4770      	bx	lr

0801ef9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ef9e:	4770      	bx	lr

0801efa0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801efa0:	4770      	bx	lr

0801efa2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801efa2:	4770      	bx	lr

0801efa4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801efa4:	4770      	bx	lr

0801efa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801efa6:	4770      	bx	lr

0801efa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801efa8:	4770      	bx	lr

0801efaa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801efaa:	4770      	bx	lr

0801efac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801efac:	4770      	bx	lr

0801efae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801efae:	4770      	bx	lr

0801efb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801efb0:	4770      	bx	lr

0801efb2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801efb2:	4770      	bx	lr

0801efb4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801efb4:	4770      	bx	lr

0801efb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801efb6:	4770      	bx	lr

0801efb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801efb8:	4770      	bx	lr

0801efba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801efba:	4770      	bx	lr

0801efbc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801efbc:	4770      	bx	lr

0801efbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801efbe:	4770      	bx	lr

0801efc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801efc0:	4770      	bx	lr

0801efc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801efc2:	4770      	bx	lr

0801efc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801efc4:	4770      	bx	lr
	...

0801efc8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801efc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efca:	4606      	mov	r6, r0
 801efcc:	b087      	sub	sp, #28
 801efce:	4615      	mov	r5, r2
 801efd0:	461f      	mov	r7, r3
 801efd2:	b353      	cbz	r3, 801f02a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801efd4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801efd8:	2b00      	cmp	r3, #0
 801efda:	dd26      	ble.n	801f02a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801efdc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	dd22      	ble.n	801f02a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801efe4:	6808      	ldr	r0, [r1, #0]
 801efe6:	aa04      	add	r2, sp, #16
 801efe8:	6849      	ldr	r1, [r1, #4]
 801efea:	4c1b      	ldr	r4, [pc, #108]	@ (801f058 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801efec:	c203      	stmia	r2!, {r0, r1}
 801efee:	a804      	add	r0, sp, #16
 801eff0:	f7fa fa3c 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eff4:	6820      	ldr	r0, [r4, #0]
 801eff6:	6803      	ldr	r3, [r0, #0]
 801eff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801effa:	4798      	blx	r3
 801effc:	2fff      	cmp	r7, #255	@ 0xff
 801effe:	d016      	beq.n	801f02e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f000:	f010 0f08 	tst.w	r0, #8
 801f004:	6820      	ldr	r0, [r4, #0]
 801f006:	d015      	beq.n	801f034 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801f008:	2400      	movs	r4, #0
 801f00a:	6801      	ldr	r1, [r0, #0]
 801f00c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f010:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f014:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801f018:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f01c:	9401      	str	r4, [sp, #4]
 801f01e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f022:	9400      	str	r4, [sp, #0]
 801f024:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801f026:	4629      	mov	r1, r5
 801f028:	47a0      	blx	r4
 801f02a:	b007      	add	sp, #28
 801f02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f02e:	f010 0f02 	tst.w	r0, #2
 801f032:	e7e7      	b.n	801f004 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801f034:	6803      	ldr	r3, [r0, #0]
 801f036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f038:	4798      	blx	r3
 801f03a:	4b08      	ldr	r3, [pc, #32]	@ (801f05c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801f03c:	4601      	mov	r1, r0
 801f03e:	4630      	mov	r0, r6
 801f040:	881a      	ldrh	r2, [r3, #0]
 801f042:	6833      	ldr	r3, [r6, #0]
 801f044:	e9cd 5700 	strd	r5, r7, [sp]
 801f048:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801f04a:	ab04      	add	r3, sp, #16
 801f04c:	47a8      	blx	r5
 801f04e:	6820      	ldr	r0, [r4, #0]
 801f050:	6803      	ldr	r3, [r0, #0]
 801f052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f054:	4798      	blx	r3
 801f056:	e7e8      	b.n	801f02a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f058:	240284e8 	.word	0x240284e8
 801f05c:	240284e2 	.word	0x240284e2

0801f060 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f064:	b08b      	sub	sp, #44	@ 0x2c
 801f066:	460d      	mov	r5, r1
 801f068:	4616      	mov	r6, r2
 801f06a:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801f06e:	f1b8 0f00 	cmp.w	r8, #0
 801f072:	d047      	beq.n	801f104 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801f074:	6810      	ldr	r0, [r2, #0]
 801f076:	ac06      	add	r4, sp, #24
 801f078:	6851      	ldr	r1, [r2, #4]
 801f07a:	4f51      	ldr	r7, [pc, #324]	@ (801f1c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801f07c:	c403      	stmia	r4!, {r0, r1}
 801f07e:	6818      	ldr	r0, [r3, #0]
 801f080:	ac08      	add	r4, sp, #32
 801f082:	6859      	ldr	r1, [r3, #4]
 801f084:	c403      	stmia	r4!, {r0, r1}
 801f086:	a806      	add	r0, sp, #24
 801f088:	f7fa f9f0 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f08c:	4631      	mov	r1, r6
 801f08e:	a808      	add	r0, sp, #32
 801f090:	f7fa fa30 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f094:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f098:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f09c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f0a0:	6838      	ldr	r0, [r7, #0]
 801f0a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f0a6:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801f0aa:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801f0ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f0b2:	440d      	add	r5, r1
 801f0b4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f0b8:	440a      	add	r2, r1
 801f0ba:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f0be:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f0c2:	4413      	add	r3, r2
 801f0c4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801f0c8:	6803      	ldr	r3, [r0, #0]
 801f0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f0cc:	4798      	blx	r3
 801f0ce:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f0d2:	d01a      	beq.n	801f10a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801f0d4:	f010 0f04 	tst.w	r0, #4
 801f0d8:	6838      	ldr	r0, [r7, #0]
 801f0da:	d019      	beq.n	801f110 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801f0dc:	2100      	movs	r1, #0
 801f0de:	6807      	ldr	r7, [r0, #0]
 801f0e0:	b2a4      	uxth	r4, r4
 801f0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801f0e6:	b2b6      	uxth	r6, r6
 801f0e8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801f0ec:	9401      	str	r4, [sp, #4]
 801f0ee:	9600      	str	r6, [sp, #0]
 801f0f0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f0f4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801f0f8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f0fc:	9102      	str	r1, [sp, #8]
 801f0fe:	4629      	mov	r1, r5
 801f100:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801f102:	47a0      	blx	r4
 801f104:	b00b      	add	sp, #44	@ 0x2c
 801f106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f10a:	f010 0f01 	tst.w	r0, #1
 801f10e:	e7e3      	b.n	801f0d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801f110:	6803      	ldr	r3, [r0, #0]
 801f112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f114:	4798      	blx	r3
 801f116:	4a2b      	ldr	r2, [pc, #172]	@ (801f1c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801f118:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801f11c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801f120:	8813      	ldrh	r3, [r2, #0]
 801f122:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801f126:	fb03 f404 	mul.w	r4, r3, r4
 801f12a:	fb03 c101 	mla	r1, r3, r1, ip
 801f12e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f132:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f136:	4408      	add	r0, r1
 801f138:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801f13c:	4404      	add	r4, r0
 801f13e:	d02e      	beq.n	801f19e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801f140:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f144:	1b9b      	subs	r3, r3, r6
 801f146:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801f14a:	1b96      	subs	r6, r2, r6
 801f14c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f150:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f154:	42a0      	cmp	r0, r4
 801f156:	d22d      	bcs.n	801f1b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801f158:	eb00 0e01 	add.w	lr, r0, r1
 801f15c:	4570      	cmp	r0, lr
 801f15e:	d210      	bcs.n	801f182 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801f160:	f890 9000 	ldrb.w	r9, [r0]
 801f164:	f815 2b01 	ldrb.w	r2, [r5], #1
 801f168:	fb19 f90c 	smulbb	r9, r9, ip
 801f16c:	fb02 9208 	mla	r2, r2, r8, r9
 801f170:	b292      	uxth	r2, r2
 801f172:	f102 0901 	add.w	r9, r2, #1
 801f176:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801f17a:	1212      	asrs	r2, r2, #8
 801f17c:	f800 2b01 	strb.w	r2, [r0], #1
 801f180:	e7ec      	b.n	801f15c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801f182:	4418      	add	r0, r3
 801f184:	4435      	add	r5, r6
 801f186:	e7e5      	b.n	801f154 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801f188:	8813      	ldrh	r3, [r2, #0]
 801f18a:	1b9b      	subs	r3, r3, r6
 801f18c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f190:	4418      	add	r0, r3
 801f192:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f196:	1b9b      	subs	r3, r3, r6
 801f198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f19c:	441d      	add	r5, r3
 801f19e:	42a0      	cmp	r0, r4
 801f1a0:	d208      	bcs.n	801f1b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801f1a2:	eb00 0c01 	add.w	ip, r0, r1
 801f1a6:	4560      	cmp	r0, ip
 801f1a8:	d2ee      	bcs.n	801f188 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801f1aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f1ae:	f800 3b01 	strb.w	r3, [r0], #1
 801f1b2:	e7f8      	b.n	801f1a6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801f1b4:	6838      	ldr	r0, [r7, #0]
 801f1b6:	6803      	ldr	r3, [r0, #0]
 801f1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1ba:	4798      	blx	r3
 801f1bc:	e7a2      	b.n	801f104 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801f1be:	bf00      	nop
 801f1c0:	240284e8 	.word	0x240284e8
 801f1c4:	240284e2 	.word	0x240284e2

0801f1c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1ca:	2300      	movs	r3, #0
 801f1cc:	b085      	sub	sp, #20
 801f1ce:	9300      	str	r3, [sp, #0]
 801f1d0:	4b41      	ldr	r3, [pc, #260]	@ (801f2d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801f1d2:	781b      	ldrb	r3, [r3, #0]
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d136      	bne.n	801f246 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801f1d8:	4a40      	ldr	r2, [pc, #256]	@ (801f2dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f1da:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f1de:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d131      	bne.n	801f24a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801f1e6:	4b3e      	ldr	r3, [pc, #248]	@ (801f2e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801f1e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f1ec:	ac02      	add	r4, sp, #8
 801f1ee:	6808      	ldr	r0, [r1, #0]
 801f1f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f1f4:	ab02      	add	r3, sp, #8
 801f1f6:	6849      	ldr	r1, [r1, #4]
 801f1f8:	4d3a      	ldr	r5, [pc, #232]	@ (801f2e4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801f1fa:	c303      	stmia	r3!, {r0, r1}
 801f1fc:	4669      	mov	r1, sp
 801f1fe:	4620      	mov	r0, r4
 801f200:	f7fa f978 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f204:	4668      	mov	r0, sp
 801f206:	f7fa f931 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f20a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f20e:	f8bd 2000 	ldrh.w	r2, [sp]
 801f212:	462e      	mov	r6, r5
 801f214:	6828      	ldr	r0, [r5, #0]
 801f216:	4413      	add	r3, r2
 801f218:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f21c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f220:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f224:	4413      	add	r3, r2
 801f226:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f22a:	6803      	ldr	r3, [r0, #0]
 801f22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f22e:	4798      	blx	r3
 801f230:	f010 0f01 	tst.w	r0, #1
 801f234:	d00b      	beq.n	801f24e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801f236:	6828      	ldr	r0, [r5, #0]
 801f238:	6803      	ldr	r3, [r0, #0]
 801f23a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f23e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801f240:	4798      	blx	r3
 801f242:	b005      	add	sp, #20
 801f244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f246:	4a26      	ldr	r2, [pc, #152]	@ (801f2e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801f248:	e7c7      	b.n	801f1da <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f24a:	4b24      	ldr	r3, [pc, #144]	@ (801f2dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f24c:	e7cc      	b.n	801f1e8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f24e:	6830      	ldr	r0, [r6, #0]
 801f250:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801f254:	6803      	ldr	r3, [r0, #0]
 801f256:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801f25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f25c:	4798      	blx	r3
 801f25e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f262:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f266:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801f26a:	fb14 3402 	smlabb	r4, r4, r2, r3
 801f26e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f272:	4404      	add	r4, r0
 801f274:	6830      	ldr	r0, [r6, #0]
 801f276:	6803      	ldr	r3, [r0, #0]
 801f278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f27a:	4798      	blx	r3
 801f27c:	4917      	ldr	r1, [pc, #92]	@ (801f2dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801f27e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801f282:	880b      	ldrh	r3, [r1, #0]
 801f284:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801f288:	fb03 c202 	mla	r2, r3, r2, ip
 801f28c:	437b      	muls	r3, r7
 801f28e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801f292:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f29a:	4410      	add	r0, r2
 801f29c:	18c2      	adds	r2, r0, r3
 801f29e:	4290      	cmp	r0, r2
 801f2a0:	d214      	bcs.n	801f2cc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801f2a2:	eb00 0c07 	add.w	ip, r0, r7
 801f2a6:	4560      	cmp	r0, ip
 801f2a8:	d204      	bcs.n	801f2b4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801f2aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f2ae:	f800 3b01 	strb.w	r3, [r0], #1
 801f2b2:	e7f8      	b.n	801f2a6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801f2b4:	880b      	ldrh	r3, [r1, #0]
 801f2b6:	1b5b      	subs	r3, r3, r5
 801f2b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2bc:	4418      	add	r0, r3
 801f2be:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f2c2:	1b5b      	subs	r3, r3, r5
 801f2c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2c8:	441c      	add	r4, r3
 801f2ca:	e7e8      	b.n	801f29e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801f2cc:	6830      	ldr	r0, [r6, #0]
 801f2ce:	6803      	ldr	r3, [r0, #0]
 801f2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2d2:	4798      	blx	r3
 801f2d4:	e7b5      	b.n	801f242 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f2d6:	bf00      	nop
 801f2d8:	240284e0 	.word	0x240284e0
 801f2dc:	240284e2 	.word	0x240284e2
 801f2e0:	240284e4 	.word	0x240284e4
 801f2e4:	240284e8 	.word	0x240284e8

0801f2e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ec:	b08f      	sub	sp, #60	@ 0x3c
 801f2ee:	461c      	mov	r4, r3
 801f2f0:	9203      	str	r2, [sp, #12]
 801f2f2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f2f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f2f8:	6820      	ldr	r0, [r4, #0]
 801f2fa:	9100      	str	r1, [sp, #0]
 801f2fc:	9204      	str	r2, [sp, #16]
 801f2fe:	aa0a      	add	r2, sp, #40	@ 0x28
 801f300:	6861      	ldr	r1, [r4, #4]
 801f302:	c203      	stmia	r2!, {r0, r1}
 801f304:	6818      	ldr	r0, [r3, #0]
 801f306:	aa0c      	add	r2, sp, #48	@ 0x30
 801f308:	6859      	ldr	r1, [r3, #4]
 801f30a:	c203      	stmia	r2!, {r0, r1}
 801f30c:	a80a      	add	r0, sp, #40	@ 0x28
 801f30e:	f7fa f8ad 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f312:	4621      	mov	r1, r4
 801f314:	a80c      	add	r0, sp, #48	@ 0x30
 801f316:	f7fa f8ed 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f31a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801f31e:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801f322:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f326:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801f32a:	bfdb      	ittet	le
 801f32c:	b2b3      	uxthle	r3, r6
 801f32e:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f332:	2301      	movgt	r3, #1
 801f334:	fb92 f3f3 	sdivle	r3, r2, r3
 801f338:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f33c:	441d      	add	r5, r3
 801f33e:	fb92 f1f3 	sdiv	r1, r2, r3
 801f342:	fa1f fc81 	uxth.w	ip, r1
 801f346:	3d01      	subs	r5, #1
 801f348:	fb0c 2413 	mls	r4, ip, r3, r2
 801f34c:	4661      	mov	r1, ip
 801f34e:	fb14 f406 	smulbb	r4, r4, r6
 801f352:	4404      	add	r4, r0
 801f354:	fb95 f5f3 	sdiv	r5, r5, r3
 801f358:	b2a4      	uxth	r4, r4
 801f35a:	b131      	cbz	r1, 801f36a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801f35c:	9b03      	ldr	r3, [sp, #12]
 801f35e:	9900      	ldr	r1, [sp, #0]
 801f360:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f364:	ba1b      	rev	r3, r3
 801f366:	4419      	add	r1, r3
 801f368:	9100      	str	r1, [sp, #0]
 801f36a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f36e:	b2ad      	uxth	r5, r5
 801f370:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801f374:	4418      	add	r0, r3
 801f376:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f37a:	00ad      	lsls	r5, r5, #2
 801f37c:	441a      	add	r2, r3
 801f37e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801f382:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801f386:	9301      	str	r3, [sp, #4]
 801f388:	4b79      	ldr	r3, [pc, #484]	@ (801f570 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801f38a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801f38e:	6818      	ldr	r0, [r3, #0]
 801f390:	6803      	ldr	r3, [r0, #0]
 801f392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f394:	4798      	blx	r3
 801f396:	4a77      	ldr	r2, [pc, #476]	@ (801f574 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801f398:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801f39c:	2c00      	cmp	r4, #0
 801f39e:	8813      	ldrh	r3, [r2, #0]
 801f3a0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801f3a4:	9209      	str	r2, [sp, #36]	@ 0x24
 801f3a6:	fb03 c101 	mla	r1, r3, r1, ip
 801f3aa:	fb06 f303 	mul.w	r3, r6, r3
 801f3ae:	bf18      	it	ne
 801f3b0:	2600      	movne	r6, #0
 801f3b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f3b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3ba:	4408      	add	r0, r1
 801f3bc:	4403      	add	r3, r0
 801f3be:	9306      	str	r3, [sp, #24]
 801f3c0:	f105 0304 	add.w	r3, r5, #4
 801f3c4:	9305      	str	r3, [sp, #20]
 801f3c6:	9b01      	ldr	r3, [sp, #4]
 801f3c8:	bf08      	it	eq
 801f3ca:	461e      	moveq	r6, r3
 801f3cc:	2300      	movs	r3, #0
 801f3ce:	b2b6      	uxth	r6, r6
 801f3d0:	9302      	str	r3, [sp, #8]
 801f3d2:	9a06      	ldr	r2, [sp, #24]
 801f3d4:	4290      	cmp	r0, r2
 801f3d6:	f080 80c2 	bcs.w	801f55e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801f3da:	b963      	cbnz	r3, 801f3f6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801f3dc:	9b00      	ldr	r3, [sp, #0]
 801f3de:	781a      	ldrb	r2, [r3, #0]
 801f3e0:	0993      	lsrs	r3, r2, #6
 801f3e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f3e6:	9202      	str	r2, [sp, #8]
 801f3e8:	1e5a      	subs	r2, r3, #1
 801f3ea:	2a02      	cmp	r2, #2
 801f3ec:	d815      	bhi.n	801f41a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801f3ee:	9a00      	ldr	r2, [sp, #0]
 801f3f0:	b29b      	uxth	r3, r3
 801f3f2:	3201      	adds	r2, #1
 801f3f4:	9200      	str	r2, [sp, #0]
 801f3f6:	b1b4      	cbz	r4, 801f426 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801f3f8:	429c      	cmp	r4, r3
 801f3fa:	bf91      	iteee	ls
 801f3fc:	1b1c      	subls	r4, r3, r4
 801f3fe:	1ae4      	subhi	r4, r4, r3
 801f400:	4635      	movhi	r5, r6
 801f402:	f04f 0e00 	movhi.w	lr, #0
 801f406:	bf9b      	ittet	ls
 801f408:	fa1f fe84 	uxthls.w	lr, r4
 801f40c:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801f410:	b2a4      	uxthhi	r4, r4
 801f412:	2400      	movls	r4, #0
 801f414:	4673      	mov	r3, lr
 801f416:	462e      	mov	r6, r5
 801f418:	e7db      	b.n	801f3d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801f41a:	9a00      	ldr	r2, [sp, #0]
 801f41c:	9b00      	ldr	r3, [sp, #0]
 801f41e:	3202      	adds	r2, #2
 801f420:	785b      	ldrb	r3, [r3, #1]
 801f422:	9200      	str	r2, [sp, #0]
 801f424:	e7e7      	b.n	801f3f6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801f426:	2204      	movs	r2, #4
 801f428:	9905      	ldr	r1, [sp, #20]
 801f42a:	429e      	cmp	r6, r3
 801f42c:	4615      	mov	r5, r2
 801f42e:	9a02      	ldr	r2, [sp, #8]
 801f430:	bf94      	ite	ls
 801f432:	eba3 0e06 	subls.w	lr, r3, r6
 801f436:	46a6      	movhi	lr, r4
 801f438:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f43c:	9903      	ldr	r1, [sp, #12]
 801f43e:	bf8c      	ite	hi
 801f440:	1af5      	subhi	r5, r6, r3
 801f442:	fa1f fe8e 	uxthls.w	lr, lr
 801f446:	f851 c002 	ldr.w	ip, [r1, r2]
 801f44a:	bf9a      	itte	ls
 801f44c:	4625      	movls	r5, r4
 801f44e:	4632      	movls	r2, r6
 801f450:	b2ad      	uxthhi	r5, r5
 801f452:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801f456:	bf88      	it	hi
 801f458:	461a      	movhi	r2, r3
 801f45a:	b179      	cbz	r1, 801f47c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801f45c:	29ff      	cmp	r1, #255	@ 0xff
 801f45e:	fa5f f98c 	uxtb.w	r9, ip
 801f462:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801f466:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801f46a:	d126      	bne.n	801f4ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f46c:	9f04      	ldr	r7, [sp, #16]
 801f46e:	2fff      	cmp	r7, #255	@ 0xff
 801f470:	d123      	bne.n	801f4ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f472:	4682      	mov	sl, r0
 801f474:	4611      	mov	r1, r2
 801f476:	f10a 0a03 	add.w	sl, sl, #3
 801f47a:	b9a9      	cbnz	r1, 801f4a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801f47c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f480:	429e      	cmp	r6, r3
 801f482:	4410      	add	r0, r2
 801f484:	d8c6      	bhi.n	801f414 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801f486:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801f48a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801f48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f490:	1b64      	subs	r4, r4, r5
 801f492:	9a01      	ldr	r2, [sp, #4]
 801f494:	881b      	ldrh	r3, [r3, #0]
 801f496:	b2a4      	uxth	r4, r4
 801f498:	1a9b      	subs	r3, r3, r2
 801f49a:	2c00      	cmp	r4, #0
 801f49c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4a0:	bf18      	it	ne
 801f4a2:	2500      	movne	r5, #0
 801f4a4:	4418      	add	r0, r3
 801f4a6:	e7b5      	b.n	801f414 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801f4a8:	3901      	subs	r1, #1
 801f4aa:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801f4ae:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801f4b2:	f80a cc01 	strb.w	ip, [sl, #-1]
 801f4b6:	b289      	uxth	r1, r1
 801f4b8:	e7dd      	b.n	801f476 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801f4ba:	9f04      	ldr	r7, [sp, #16]
 801f4bc:	fb07 fa01 	mul.w	sl, r7, r1
 801f4c0:	f10a 0101 	add.w	r1, sl, #1
 801f4c4:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801f4c8:	1209      	asrs	r1, r1, #8
 801f4ca:	ea6f 0a01 	mvn.w	sl, r1
 801f4ce:	b289      	uxth	r1, r1
 801f4d0:	fb19 f901 	smulbb	r9, r9, r1
 801f4d4:	fa5f fa8a 	uxtb.w	sl, sl
 801f4d8:	fb18 f801 	smulbb	r8, r8, r1
 801f4dc:	fb1c f101 	smulbb	r1, ip, r1
 801f4e0:	fa1f f789 	uxth.w	r7, r9
 801f4e4:	4684      	mov	ip, r0
 801f4e6:	4691      	mov	r9, r2
 801f4e8:	9707      	str	r7, [sp, #28]
 801f4ea:	b289      	uxth	r1, r1
 801f4ec:	fa1f f788 	uxth.w	r7, r8
 801f4f0:	9708      	str	r7, [sp, #32]
 801f4f2:	f10c 0c03 	add.w	ip, ip, #3
 801f4f6:	f1b9 0f00 	cmp.w	r9, #0
 801f4fa:	d0bf      	beq.n	801f47c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801f4fc:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801f500:	f109 39ff 	add.w	r9, r9, #4294967295
 801f504:	9f07      	ldr	r7, [sp, #28]
 801f506:	fa1f f989 	uxth.w	r9, r9
 801f50a:	fb08 780a 	mla	r8, r8, sl, r7
 801f50e:	9f08      	ldr	r7, [sp, #32]
 801f510:	fa1f f888 	uxth.w	r8, r8
 801f514:	f108 0b01 	add.w	fp, r8, #1
 801f518:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f51c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f520:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801f524:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801f528:	fb08 780a 	mla	r8, r8, sl, r7
 801f52c:	fa1f f888 	uxth.w	r8, r8
 801f530:	f108 0b01 	add.w	fp, r8, #1
 801f534:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f538:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f53c:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801f540:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801f544:	fb08 180a 	mla	r8, r8, sl, r1
 801f548:	fa1f f888 	uxth.w	r8, r8
 801f54c:	f108 0b01 	add.w	fp, r8, #1
 801f550:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f554:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f558:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801f55c:	e7c9      	b.n	801f4f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801f55e:	4b04      	ldr	r3, [pc, #16]	@ (801f570 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801f560:	6818      	ldr	r0, [r3, #0]
 801f562:	6803      	ldr	r3, [r0, #0]
 801f564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f566:	4798      	blx	r3
 801f568:	b00f      	add	sp, #60	@ 0x3c
 801f56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f56e:	bf00      	nop
 801f570:	240284e8 	.word	0x240284e8
 801f574:	240284e2 	.word	0x240284e2

0801f578 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f57c:	b089      	sub	sp, #36	@ 0x24
 801f57e:	4607      	mov	r7, r0
 801f580:	4689      	mov	r9, r1
 801f582:	4692      	mov	sl, r2
 801f584:	ac08      	add	r4, sp, #32
 801f586:	461e      	mov	r6, r3
 801f588:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f58c:	4620      	mov	r0, r4
 801f58e:	f7fd ff77 	bl	801d480 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f592:	683b      	ldr	r3, [r7, #0]
 801f594:	4605      	mov	r5, r0
 801f596:	4620      	mov	r0, r4
 801f598:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801f59c:	f7fd fe7e 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f5a0:	4683      	mov	fp, r0
 801f5a2:	4620      	mov	r0, r4
 801f5a4:	f7fd feae 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f5a8:	4653      	mov	r3, sl
 801f5aa:	464a      	mov	r2, r9
 801f5ac:	4639      	mov	r1, r7
 801f5ae:	9500      	str	r5, [sp, #0]
 801f5b0:	e9cd b001 	strd	fp, r0, [sp, #4]
 801f5b4:	a806      	add	r0, sp, #24
 801f5b6:	47c0      	blx	r8
 801f5b8:	a906      	add	r1, sp, #24
 801f5ba:	4630      	mov	r0, r6
 801f5bc:	f7fd fd52 	bl	801d064 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801f5c0:	4628      	mov	r0, r5
 801f5c2:	b009      	add	sp, #36	@ 0x24
 801f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5c8 <_ZN8touchgfx8LCD24bppD0Ev>:
 801f5c8:	b510      	push	{r4, lr}
 801f5ca:	4604      	mov	r4, r0
 801f5cc:	216c      	movs	r1, #108	@ 0x6c
 801f5ce:	f008 fc7f 	bl	8027ed0 <_ZdlPvj>
 801f5d2:	4620      	mov	r0, r4
 801f5d4:	bd10      	pop	{r4, pc}

0801f5d6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801f5d6:	b510      	push	{r4, lr}
 801f5d8:	4604      	mov	r4, r0
 801f5da:	2104      	movs	r1, #4
 801f5dc:	f008 fc78 	bl	8027ed0 <_ZdlPvj>
 801f5e0:	4620      	mov	r0, r4
 801f5e2:	bd10      	pop	{r4, pc}

0801f5e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801f5e4:	b510      	push	{r4, lr}
 801f5e6:	4604      	mov	r4, r0
 801f5e8:	2104      	movs	r1, #4
 801f5ea:	f008 fc71 	bl	8027ed0 <_ZdlPvj>
 801f5ee:	4620      	mov	r0, r4
 801f5f0:	bd10      	pop	{r4, pc}

0801f5f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801f5f2:	b510      	push	{r4, lr}
 801f5f4:	4604      	mov	r4, r0
 801f5f6:	f640 0144 	movw	r1, #2116	@ 0x844
 801f5fa:	f008 fc69 	bl	8027ed0 <_ZdlPvj>
 801f5fe:	4620      	mov	r0, r4
 801f600:	bd10      	pop	{r4, pc}

0801f602 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801f602:	b510      	push	{r4, lr}
 801f604:	4604      	mov	r4, r0
 801f606:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801f60a:	f008 fc61 	bl	8027ed0 <_ZdlPvj>
 801f60e:	4620      	mov	r0, r4
 801f610:	bd10      	pop	{r4, pc}

0801f612 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f612:	b510      	push	{r4, lr}
 801f614:	4604      	mov	r4, r0
 801f616:	2104      	movs	r1, #4
 801f618:	f008 fc5a 	bl	8027ed0 <_ZdlPvj>
 801f61c:	4620      	mov	r0, r4
 801f61e:	bd10      	pop	{r4, pc}

0801f620 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f620:	b510      	push	{r4, lr}
 801f622:	4604      	mov	r4, r0
 801f624:	2104      	movs	r1, #4
 801f626:	f008 fc53 	bl	8027ed0 <_ZdlPvj>
 801f62a:	4620      	mov	r0, r4
 801f62c:	bd10      	pop	{r4, pc}

0801f62e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f62e:	b510      	push	{r4, lr}
 801f630:	4604      	mov	r4, r0
 801f632:	2104      	movs	r1, #4
 801f634:	f008 fc4c 	bl	8027ed0 <_ZdlPvj>
 801f638:	4620      	mov	r0, r4
 801f63a:	bd10      	pop	{r4, pc}

0801f63c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f63c:	b510      	push	{r4, lr}
 801f63e:	4604      	mov	r4, r0
 801f640:	2104      	movs	r1, #4
 801f642:	f008 fc45 	bl	8027ed0 <_ZdlPvj>
 801f646:	4620      	mov	r0, r4
 801f648:	bd10      	pop	{r4, pc}

0801f64a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f64a:	b510      	push	{r4, lr}
 801f64c:	4604      	mov	r4, r0
 801f64e:	2104      	movs	r1, #4
 801f650:	f008 fc3e 	bl	8027ed0 <_ZdlPvj>
 801f654:	4620      	mov	r0, r4
 801f656:	bd10      	pop	{r4, pc}

0801f658 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f658:	b510      	push	{r4, lr}
 801f65a:	4604      	mov	r4, r0
 801f65c:	2104      	movs	r1, #4
 801f65e:	f008 fc37 	bl	8027ed0 <_ZdlPvj>
 801f662:	4620      	mov	r0, r4
 801f664:	bd10      	pop	{r4, pc}

0801f666 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f666:	b510      	push	{r4, lr}
 801f668:	4604      	mov	r4, r0
 801f66a:	2104      	movs	r1, #4
 801f66c:	f008 fc30 	bl	8027ed0 <_ZdlPvj>
 801f670:	4620      	mov	r0, r4
 801f672:	bd10      	pop	{r4, pc}

0801f674 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f674:	b510      	push	{r4, lr}
 801f676:	4604      	mov	r4, r0
 801f678:	2104      	movs	r1, #4
 801f67a:	f008 fc29 	bl	8027ed0 <_ZdlPvj>
 801f67e:	4620      	mov	r0, r4
 801f680:	bd10      	pop	{r4, pc}

0801f682 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f682:	b510      	push	{r4, lr}
 801f684:	4604      	mov	r4, r0
 801f686:	2104      	movs	r1, #4
 801f688:	f008 fc22 	bl	8027ed0 <_ZdlPvj>
 801f68c:	4620      	mov	r0, r4
 801f68e:	bd10      	pop	{r4, pc}

0801f690 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f690:	b510      	push	{r4, lr}
 801f692:	4604      	mov	r4, r0
 801f694:	2104      	movs	r1, #4
 801f696:	f008 fc1b 	bl	8027ed0 <_ZdlPvj>
 801f69a:	4620      	mov	r0, r4
 801f69c:	bd10      	pop	{r4, pc}

0801f69e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f69e:	b510      	push	{r4, lr}
 801f6a0:	4604      	mov	r4, r0
 801f6a2:	2104      	movs	r1, #4
 801f6a4:	f008 fc14 	bl	8027ed0 <_ZdlPvj>
 801f6a8:	4620      	mov	r0, r4
 801f6aa:	bd10      	pop	{r4, pc}

0801f6ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f6ac:	b510      	push	{r4, lr}
 801f6ae:	4604      	mov	r4, r0
 801f6b0:	2104      	movs	r1, #4
 801f6b2:	f008 fc0d 	bl	8027ed0 <_ZdlPvj>
 801f6b6:	4620      	mov	r0, r4
 801f6b8:	bd10      	pop	{r4, pc}

0801f6ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f6ba:	b510      	push	{r4, lr}
 801f6bc:	4604      	mov	r4, r0
 801f6be:	2104      	movs	r1, #4
 801f6c0:	f008 fc06 	bl	8027ed0 <_ZdlPvj>
 801f6c4:	4620      	mov	r0, r4
 801f6c6:	bd10      	pop	{r4, pc}

0801f6c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f6c8:	b510      	push	{r4, lr}
 801f6ca:	4604      	mov	r4, r0
 801f6cc:	2104      	movs	r1, #4
 801f6ce:	f008 fbff 	bl	8027ed0 <_ZdlPvj>
 801f6d2:	4620      	mov	r0, r4
 801f6d4:	bd10      	pop	{r4, pc}

0801f6d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f6d6:	b510      	push	{r4, lr}
 801f6d8:	4604      	mov	r4, r0
 801f6da:	2104      	movs	r1, #4
 801f6dc:	f008 fbf8 	bl	8027ed0 <_ZdlPvj>
 801f6e0:	4620      	mov	r0, r4
 801f6e2:	bd10      	pop	{r4, pc}

0801f6e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f6e4:	b510      	push	{r4, lr}
 801f6e6:	4604      	mov	r4, r0
 801f6e8:	2104      	movs	r1, #4
 801f6ea:	f008 fbf1 	bl	8027ed0 <_ZdlPvj>
 801f6ee:	4620      	mov	r0, r4
 801f6f0:	bd10      	pop	{r4, pc}

0801f6f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f6f2:	b510      	push	{r4, lr}
 801f6f4:	4604      	mov	r4, r0
 801f6f6:	2104      	movs	r1, #4
 801f6f8:	f008 fbea 	bl	8027ed0 <_ZdlPvj>
 801f6fc:	4620      	mov	r0, r4
 801f6fe:	bd10      	pop	{r4, pc}

0801f700 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f700:	b510      	push	{r4, lr}
 801f702:	4604      	mov	r4, r0
 801f704:	2104      	movs	r1, #4
 801f706:	f008 fbe3 	bl	8027ed0 <_ZdlPvj>
 801f70a:	4620      	mov	r0, r4
 801f70c:	bd10      	pop	{r4, pc}

0801f70e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f70e:	b510      	push	{r4, lr}
 801f710:	4604      	mov	r4, r0
 801f712:	2104      	movs	r1, #4
 801f714:	f008 fbdc 	bl	8027ed0 <_ZdlPvj>
 801f718:	4620      	mov	r0, r4
 801f71a:	bd10      	pop	{r4, pc}

0801f71c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f71c:	b510      	push	{r4, lr}
 801f71e:	4604      	mov	r4, r0
 801f720:	2104      	movs	r1, #4
 801f722:	f008 fbd5 	bl	8027ed0 <_ZdlPvj>
 801f726:	4620      	mov	r0, r4
 801f728:	bd10      	pop	{r4, pc}
	...

0801f72c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f730:	b08f      	sub	sp, #60	@ 0x3c
 801f732:	461c      	mov	r4, r3
 801f734:	460e      	mov	r6, r1
 801f736:	9206      	str	r2, [sp, #24]
 801f738:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f73c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f73e:	9202      	str	r2, [sp, #8]
 801f740:	2a00      	cmp	r2, #0
 801f742:	f000 8128 	beq.w	801f996 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801f746:	6820      	ldr	r0, [r4, #0]
 801f748:	aa0a      	add	r2, sp, #40	@ 0x28
 801f74a:	6861      	ldr	r1, [r4, #4]
 801f74c:	c203      	stmia	r2!, {r0, r1}
 801f74e:	6818      	ldr	r0, [r3, #0]
 801f750:	aa0c      	add	r2, sp, #48	@ 0x30
 801f752:	6859      	ldr	r1, [r3, #4]
 801f754:	c203      	stmia	r2!, {r0, r1}
 801f756:	a80a      	add	r0, sp, #40	@ 0x28
 801f758:	f7f9 fe88 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f75c:	4621      	mov	r1, r4
 801f75e:	a80c      	add	r0, sp, #48	@ 0x30
 801f760:	f7f9 fec8 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f764:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801f768:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801f76c:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801f770:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801f774:	bfdb      	ittet	le
 801f776:	b2bb      	uxthle	r3, r7
 801f778:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f77c:	2301      	movgt	r3, #1
 801f77e:	fb92 f3f3 	sdivle	r3, r2, r3
 801f782:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801f786:	441d      	add	r5, r3
 801f788:	fb92 f1f3 	sdiv	r1, r2, r3
 801f78c:	fa1f fc81 	uxth.w	ip, r1
 801f790:	3d01      	subs	r5, #1
 801f792:	fb0c 2413 	mls	r4, ip, r3, r2
 801f796:	4661      	mov	r1, ip
 801f798:	fb14 f407 	smulbb	r4, r4, r7
 801f79c:	4404      	add	r4, r0
 801f79e:	fb95 f5f3 	sdiv	r5, r5, r3
 801f7a2:	b2a4      	uxth	r4, r4
 801f7a4:	b121      	cbz	r1, 801f7b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801f7a6:	9b06      	ldr	r3, [sp, #24]
 801f7a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f7ac:	ba1b      	rev	r3, r3
 801f7ae:	441e      	add	r6, r3
 801f7b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f7b4:	b2ad      	uxth	r5, r5
 801f7b6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801f7ba:	4418      	add	r0, r3
 801f7bc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f7c0:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801f7c4:	00ad      	lsls	r5, r5, #2
 801f7c6:	441a      	add	r2, r3
 801f7c8:	4b74      	ldr	r3, [pc, #464]	@ (801f99c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f7ca:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801f7ce:	6818      	ldr	r0, [r3, #0]
 801f7d0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801f7d4:	6803      	ldr	r3, [r0, #0]
 801f7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7d8:	4798      	blx	r3
 801f7da:	4a71      	ldr	r2, [pc, #452]	@ (801f9a0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801f7dc:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801f7e0:	2c00      	cmp	r4, #0
 801f7e2:	8813      	ldrh	r3, [r2, #0]
 801f7e4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801f7e8:	9209      	str	r2, [sp, #36]	@ 0x24
 801f7ea:	fb03 c101 	mla	r1, r3, r1, ip
 801f7ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f7f2:	fb03 f307 	mul.w	r3, r3, r7
 801f7f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f7fa:	9204      	str	r2, [sp, #16]
 801f7fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f800:	9a02      	ldr	r2, [sp, #8]
 801f802:	4408      	add	r0, r1
 801f804:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801f808:	4403      	add	r3, r0
 801f80a:	b292      	uxth	r2, r2
 801f80c:	9307      	str	r3, [sp, #28]
 801f80e:	f105 0304 	add.w	r3, r5, #4
 801f812:	bf0c      	ite	eq
 801f814:	4645      	moveq	r5, r8
 801f816:	2500      	movne	r5, #0
 801f818:	9308      	str	r3, [sp, #32]
 801f81a:	2300      	movs	r3, #0
 801f81c:	b2ad      	uxth	r5, r5
 801f81e:	9205      	str	r2, [sp, #20]
 801f820:	9303      	str	r3, [sp, #12]
 801f822:	9a07      	ldr	r2, [sp, #28]
 801f824:	4282      	cmp	r2, r0
 801f826:	f240 80b1 	bls.w	801f98c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801f82a:	b95b      	cbnz	r3, 801f844 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801f82c:	7832      	ldrb	r2, [r6, #0]
 801f82e:	0993      	lsrs	r3, r2, #6
 801f830:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f834:	9203      	str	r2, [sp, #12]
 801f836:	1e5a      	subs	r2, r3, #1
 801f838:	2a02      	cmp	r2, #2
 801f83a:	bf8d      	iteet	hi
 801f83c:	7873      	ldrbhi	r3, [r6, #1]
 801f83e:	3601      	addls	r6, #1
 801f840:	b29b      	uxthls	r3, r3
 801f842:	3602      	addhi	r6, #2
 801f844:	b184      	cbz	r4, 801f868 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801f846:	429c      	cmp	r4, r3
 801f848:	bf91      	iteee	ls
 801f84a:	1b1c      	subls	r4, r3, r4
 801f84c:	1ae4      	subhi	r4, r4, r3
 801f84e:	4629      	movhi	r1, r5
 801f850:	f04f 0e00 	movhi.w	lr, #0
 801f854:	bf9b      	ittet	ls
 801f856:	fa1f fe84 	uxthls.w	lr, r4
 801f85a:	2400      	movls	r4, #0
 801f85c:	b2a4      	uxthhi	r4, r4
 801f85e:	fa1f f188 	uxthls.w	r1, r8
 801f862:	4673      	mov	r3, lr
 801f864:	460d      	mov	r5, r1
 801f866:	e7dc      	b.n	801f822 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801f868:	2203      	movs	r2, #3
 801f86a:	9908      	ldr	r1, [sp, #32]
 801f86c:	42ab      	cmp	r3, r5
 801f86e:	4617      	mov	r7, r2
 801f870:	9a03      	ldr	r2, [sp, #12]
 801f872:	bf24      	itt	cs
 801f874:	eba3 0e05 	subcs.w	lr, r3, r5
 801f878:	9501      	strcs	r5, [sp, #4]
 801f87a:	fb17 1702 	smlabb	r7, r7, r2, r1
 801f87e:	9a06      	ldr	r2, [sp, #24]
 801f880:	bf34      	ite	cc
 801f882:	1ae9      	subcc	r1, r5, r3
 801f884:	fa1f fe8e 	uxthcs.w	lr, lr
 801f888:	4417      	add	r7, r2
 801f88a:	9a02      	ldr	r2, [sp, #8]
 801f88c:	bf2f      	iteee	cs
 801f88e:	4621      	movcs	r1, r4
 801f890:	b289      	uxthcc	r1, r1
 801f892:	9301      	strcc	r3, [sp, #4]
 801f894:	46a6      	movcc	lr, r4
 801f896:	2aff      	cmp	r2, #255	@ 0xff
 801f898:	d11e      	bne.n	801f8d8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801f89a:	4681      	mov	r9, r0
 801f89c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f8a0:	f109 0903 	add.w	r9, r9, #3
 801f8a4:	f1bc 0f00 	cmp.w	ip, #0
 801f8a8:	d15f      	bne.n	801f96a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801f8aa:	9a01      	ldr	r2, [sp, #4]
 801f8ac:	42ab      	cmp	r3, r5
 801f8ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8b2:	4410      	add	r0, r2
 801f8b4:	d3d5      	bcc.n	801f862 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801f8b6:	fa1f f188 	uxth.w	r1, r8
 801f8ba:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801f8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8c0:	1a64      	subs	r4, r4, r1
 801f8c2:	881b      	ldrh	r3, [r3, #0]
 801f8c4:	b2a4      	uxth	r4, r4
 801f8c6:	eba3 0308 	sub.w	r3, r3, r8
 801f8ca:	2c00      	cmp	r4, #0
 801f8cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8d0:	bf18      	it	ne
 801f8d2:	2100      	movne	r1, #0
 801f8d4:	4418      	add	r0, r3
 801f8d6:	e7c4      	b.n	801f862 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801f8d8:	4684      	mov	ip, r0
 801f8da:	f8dd a004 	ldr.w	sl, [sp, #4]
 801f8de:	f10c 0c03 	add.w	ip, ip, #3
 801f8e2:	f1ba 0f00 	cmp.w	sl, #0
 801f8e6:	d0e0      	beq.n	801f8aa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f8e8:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801f8ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f8f0:	9a05      	ldr	r2, [sp, #20]
 801f8f2:	f897 9000 	ldrb.w	r9, [r7]
 801f8f6:	fa1f fa8a 	uxth.w	sl, sl
 801f8fa:	fb1b fb02 	smulbb	fp, fp, r2
 801f8fe:	9a04      	ldr	r2, [sp, #16]
 801f900:	fb09 b902 	mla	r9, r9, r2, fp
 801f904:	9a05      	ldr	r2, [sp, #20]
 801f906:	fa1f f989 	uxth.w	r9, r9
 801f90a:	f109 0b01 	add.w	fp, r9, #1
 801f90e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f912:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801f916:	fb1b fb02 	smulbb	fp, fp, r2
 801f91a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f91e:	9a04      	ldr	r2, [sp, #16]
 801f920:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801f924:	f897 9001 	ldrb.w	r9, [r7, #1]
 801f928:	fb09 b902 	mla	r9, r9, r2, fp
 801f92c:	9a05      	ldr	r2, [sp, #20]
 801f92e:	fa1f f989 	uxth.w	r9, r9
 801f932:	f109 0b01 	add.w	fp, r9, #1
 801f936:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f93a:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801f93e:	fb1b fb02 	smulbb	fp, fp, r2
 801f942:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f946:	9a04      	ldr	r2, [sp, #16]
 801f948:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801f94c:	f897 9002 	ldrb.w	r9, [r7, #2]
 801f950:	fb09 b902 	mla	r9, r9, r2, fp
 801f954:	fa1f f989 	uxth.w	r9, r9
 801f958:	f109 0b01 	add.w	fp, r9, #1
 801f95c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f960:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f964:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801f968:	e7b9      	b.n	801f8de <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801f96a:	f897 a000 	ldrb.w	sl, [r7]
 801f96e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f972:	f809 ac03 	strb.w	sl, [r9, #-3]
 801f976:	fa1f fc8c 	uxth.w	ip, ip
 801f97a:	f897 a001 	ldrb.w	sl, [r7, #1]
 801f97e:	f809 ac02 	strb.w	sl, [r9, #-2]
 801f982:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f986:	f809 ac01 	strb.w	sl, [r9, #-1]
 801f98a:	e789      	b.n	801f8a0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801f98c:	4b03      	ldr	r3, [pc, #12]	@ (801f99c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f98e:	6818      	ldr	r0, [r3, #0]
 801f990:	6803      	ldr	r3, [r0, #0]
 801f992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f994:	4798      	blx	r3
 801f996:	b00f      	add	sp, #60	@ 0x3c
 801f998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f99c:	240284e8 	.word	0x240284e8
 801f9a0:	240284e2 	.word	0x240284e2

0801f9a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9a8:	b09b      	sub	sp, #108	@ 0x6c
 801f9aa:	461d      	mov	r5, r3
 801f9ac:	4604      	mov	r4, r0
 801f9ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f9b0:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801f9b4:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801f9b8:	9208      	str	r2, [sp, #32]
 801f9ba:	2a00      	cmp	r2, #0
 801f9bc:	f000 81f3 	beq.w	801fda6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801f9c0:	6828      	ldr	r0, [r5, #0]
 801f9c2:	aa16      	add	r2, sp, #88	@ 0x58
 801f9c4:	6869      	ldr	r1, [r5, #4]
 801f9c6:	c203      	stmia	r2!, {r0, r1}
 801f9c8:	6818      	ldr	r0, [r3, #0]
 801f9ca:	aa18      	add	r2, sp, #96	@ 0x60
 801f9cc:	6859      	ldr	r1, [r3, #4]
 801f9ce:	c203      	stmia	r2!, {r0, r1}
 801f9d0:	a816      	add	r0, sp, #88	@ 0x58
 801f9d2:	f7f9 fd4b 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f9d6:	4629      	mov	r1, r5
 801f9d8:	a818      	add	r0, sp, #96	@ 0x60
 801f9da:	f7f9 fd8b 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f9de:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801f9e2:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801f9e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f9ea:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801f9ee:	bfdb      	ittet	le
 801f9f0:	b29a      	uxthle	r2, r3
 801f9f2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f9f6:	f04f 0a01 	movgt.w	sl, #1
 801f9fa:	fb91 faf2 	sdivle	sl, r1, r2
 801f9fe:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801fa02:	4456      	add	r6, sl
 801fa04:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801fa08:	3e01      	subs	r6, #1
 801fa0a:	fb92 f0fa 	sdiv	r0, r2, sl
 801fa0e:	b280      	uxth	r0, r0
 801fa10:	fb00 281a 	mls	r8, r0, sl, r2
 801fa14:	900e      	str	r0, [sp, #56]	@ 0x38
 801fa16:	fb18 f803 	smulbb	r8, r8, r3
 801fa1a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801fa1e:	4488      	add	r8, r1
 801fa20:	4419      	add	r1, r3
 801fa22:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801fa26:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801fa2a:	fa1f f888 	uxth.w	r8, r8
 801fa2e:	441a      	add	r2, r3
 801fa30:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801fa34:	9303      	str	r3, [sp, #12]
 801fa36:	4b9c      	ldr	r3, [pc, #624]	@ (801fca8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801fa38:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801fa3c:	6818      	ldr	r0, [r3, #0]
 801fa3e:	6803      	ldr	r3, [r0, #0]
 801fa40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa42:	4798      	blx	r3
 801fa44:	4b99      	ldr	r3, [pc, #612]	@ (801fcac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801fa46:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801fa4a:	f1b8 0f00 	cmp.w	r8, #0
 801fa4e:	881a      	ldrh	r2, [r3, #0]
 801fa50:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801fa54:	fb02 f505 	mul.w	r5, r2, r5
 801fa58:	fb02 7101 	mla	r1, r2, r1, r7
 801fa5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fa60:	9314      	str	r3, [sp, #80]	@ 0x50
 801fa62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fa66:	9b08      	ldr	r3, [sp, #32]
 801fa68:	fb96 f6fa 	sdiv	r6, r6, sl
 801fa6c:	4408      	add	r0, r1
 801fa6e:	f106 0601 	add.w	r6, r6, #1
 801fa72:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801fa76:	f04f 0100 	mov.w	r1, #0
 801fa7a:	eb00 0205 	add.w	r2, r0, r5
 801fa7e:	b2b6      	uxth	r6, r6
 801fa80:	b29b      	uxth	r3, r3
 801fa82:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fa84:	9209      	str	r2, [sp, #36]	@ 0x24
 801fa86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fa88:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fa8e:	4b88      	ldr	r3, [pc, #544]	@ (801fcb0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801fa90:	f106 0204 	add.w	r2, r6, #4
 801fa94:	eba3 0304 	sub.w	r3, r3, r4
 801fa98:	9205      	str	r2, [sp, #20]
 801fa9a:	9a03      	ldr	r2, [sp, #12]
 801fa9c:	bf18      	it	ne
 801fa9e:	2200      	movne	r2, #0
 801faa0:	9315      	str	r3, [sp, #84]	@ 0x54
 801faa2:	b292      	uxth	r2, r2
 801faa4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801faa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801faa8:	fa11 f383 	uxtah	r3, r1, r3
 801faac:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801faae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801fab2:	3304      	adds	r3, #4
 801fab4:	9306      	str	r3, [sp, #24]
 801fab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fab8:	4283      	cmp	r3, r0
 801faba:	f240 816f 	bls.w	801fd9c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801fabe:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801fac2:	f04f 0900 	mov.w	r9, #0
 801fac6:	9d06      	ldr	r5, [sp, #24]
 801fac8:	fbb8 f3f3 	udiv	r3, r8, r3
 801facc:	ebaa 0303 	sub.w	r3, sl, r3
 801fad0:	782d      	ldrb	r5, [r5, #0]
 801fad2:	b29b      	uxth	r3, r3
 801fad4:	950f      	str	r5, [sp, #60]	@ 0x3c
 801fad6:	3501      	adds	r5, #1
 801fad8:	9312      	str	r3, [sp, #72]	@ 0x48
 801fada:	9b06      	ldr	r3, [sp, #24]
 801fadc:	9504      	str	r5, [sp, #16]
 801fade:	7859      	ldrb	r1, [r3, #1]
 801fae0:	789b      	ldrb	r3, [r3, #2]
 801fae2:	021b      	lsls	r3, r3, #8
 801fae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801fae8:	9906      	ldr	r1, [sp, #24]
 801faea:	78c9      	ldrb	r1, [r1, #3]
 801faec:	430b      	orrs	r3, r1
 801faee:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801faf0:	4419      	add	r1, r3
 801faf2:	1c4d      	adds	r5, r1, #1
 801faf4:	7849      	ldrb	r1, [r1, #1]
 801faf6:	9502      	str	r5, [sp, #8]
 801faf8:	0209      	lsls	r1, r1, #8
 801fafa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801fafc:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801fb00:	5ceb      	ldrb	r3, [r5, r3]
 801fb02:	4319      	orrs	r1, r3
 801fb04:	b28b      	uxth	r3, r1
 801fb06:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801fb0a:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb0c:	2300      	movs	r3, #0
 801fb0e:	9307      	str	r3, [sp, #28]
 801fb10:	2301      	movs	r3, #1
 801fb12:	e9cd 3300 	strd	r3, r3, [sp]
 801fb16:	469c      	mov	ip, r3
 801fb18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fb1c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb1e:	f1b8 0f00 	cmp.w	r8, #0
 801fb22:	f000 8082 	beq.w	801fc2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801fb26:	45c4      	cmp	ip, r8
 801fb28:	d270      	bcs.n	801fc0c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801fb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb2c:	eba8 080c 	sub.w	r8, r8, ip
 801fb30:	4611      	mov	r1, r2
 801fb32:	4283      	cmp	r3, r0
 801fb34:	fa1f f888 	uxth.w	r8, r8
 801fb38:	d802      	bhi.n	801fb40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801fb3a:	e074      	b.n	801fc26 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	d15f      	bne.n	801fc00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801fb40:	9b02      	ldr	r3, [sp, #8]
 801fb42:	9a01      	ldr	r2, [sp, #4]
 801fb44:	785b      	ldrb	r3, [r3, #1]
 801fb46:	f1c2 0207 	rsb	r2, r2, #7
 801fb4a:	9d01      	ldr	r5, [sp, #4]
 801fb4c:	4093      	lsls	r3, r2
 801fb4e:	005b      	lsls	r3, r3, #1
 801fb50:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801fb54:	9b02      	ldr	r3, [sp, #8]
 801fb56:	781b      	ldrb	r3, [r3, #0]
 801fb58:	412b      	asrs	r3, r5
 801fb5a:	b2db      	uxtb	r3, r3
 801fb5c:	4313      	orrs	r3, r2
 801fb5e:	462a      	mov	r2, r5
 801fb60:	3201      	adds	r2, #1
 801fb62:	b29e      	uxth	r6, r3
 801fb64:	b2d2      	uxtb	r2, r2
 801fb66:	2a08      	cmp	r2, #8
 801fb68:	9201      	str	r2, [sp, #4]
 801fb6a:	9a02      	ldr	r2, [sp, #8]
 801fb6c:	bf09      	itett	eq
 801fb6e:	3202      	addeq	r2, #2
 801fb70:	3201      	addne	r2, #1
 801fb72:	9202      	streq	r2, [sp, #8]
 801fb74:	2200      	moveq	r2, #0
 801fb76:	bf14      	ite	ne
 801fb78:	9202      	strne	r2, [sp, #8]
 801fb7a:	9201      	streq	r2, [sp, #4]
 801fb7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fb7e:	42b2      	cmp	r2, r6
 801fb80:	d309      	bcc.n	801fb96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801fb82:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801fb86:	2301      	movs	r3, #1
 801fb88:	9a04      	ldr	r2, [sp, #16]
 801fb8a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801fb8e:	d30e      	bcc.n	801fbae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801fb90:	9300      	str	r3, [sp, #0]
 801fb92:	2500      	movs	r5, #0
 801fb94:	e035      	b.n	801fc02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801fb96:	9b04      	ldr	r3, [sp, #16]
 801fb98:	429e      	cmp	r6, r3
 801fb9a:	d318      	bcc.n	801fbce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801fb9c:	9b00      	ldr	r3, [sp, #0]
 801fb9e:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801fba2:	18e3      	adds	r3, r4, r3
 801fba4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801fba8:	9b00      	ldr	r3, [sp, #0]
 801fbaa:	3301      	adds	r3, #1
 801fbac:	b29b      	uxth	r3, r3
 801fbae:	9a04      	ldr	r2, [sp, #16]
 801fbb0:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801fbb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fbb8:	9f00      	ldr	r7, [sp, #0]
 801fbba:	7115      	strb	r5, [r2, #4]
 801fbbc:	3701      	adds	r7, #1
 801fbbe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fbc0:	7157      	strb	r7, [r2, #5]
 801fbc2:	80d5      	strh	r5, [r2, #6]
 801fbc4:	9a04      	ldr	r2, [sp, #16]
 801fbc6:	3201      	adds	r2, #1
 801fbc8:	b292      	uxth	r2, r2
 801fbca:	9204      	str	r2, [sp, #16]
 801fbcc:	e7e0      	b.n	801fb90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801fbce:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801fbd2:	4632      	mov	r2, r6
 801fbd4:	795b      	ldrb	r3, [r3, #5]
 801fbd6:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801fbda:	4425      	add	r5, r4
 801fbdc:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801fbde:	eb07 0c05 	add.w	ip, r7, r5
 801fbe2:	f1bc 0f00 	cmp.w	ip, #0
 801fbe6:	dd07      	ble.n	801fbf8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801fbe8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fbec:	f892 c004 	ldrb.w	ip, [r2, #4]
 801fbf0:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801fbf4:	88d2      	ldrh	r2, [r2, #6]
 801fbf6:	e7f1      	b.n	801fbdc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801fbf8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801fbfc:	b29b      	uxth	r3, r3
 801fbfe:	e7c3      	b.n	801fb88 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801fc00:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fc02:	460a      	mov	r2, r1
 801fc04:	960a      	str	r6, [sp, #40]	@ 0x28
 801fc06:	46a9      	mov	r9, r5
 801fc08:	469c      	mov	ip, r3
 801fc0a:	e788      	b.n	801fb1e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801fc0c:	ebac 0308 	sub.w	r3, ip, r8
 801fc10:	eb09 0508 	add.w	r5, r9, r8
 801fc14:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801fc18:	b29b      	uxth	r3, r3
 801fc1a:	b2ad      	uxth	r5, r5
 801fc1c:	f04f 0800 	mov.w	r8, #0
 801fc20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc22:	4282      	cmp	r2, r0
 801fc24:	d88a      	bhi.n	801fb3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801fc26:	460a      	mov	r2, r1
 801fc28:	e745      	b.n	801fab6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801fc2a:	4594      	cmp	ip, r2
 801fc2c:	9d08      	ldr	r5, [sp, #32]
 801fc2e:	4686      	mov	lr, r0
 801fc30:	bf27      	ittee	cs
 801fc32:	ebac 0302 	subcs.w	r3, ip, r2
 801fc36:	4616      	movcs	r6, r2
 801fc38:	eba2 010c 	subcc.w	r1, r2, ip
 801fc3c:	4666      	movcc	r6, ip
 801fc3e:	bf27      	ittee	cs
 801fc40:	b29b      	uxthcs	r3, r3
 801fc42:	4641      	movcs	r1, r8
 801fc44:	b289      	uxthcc	r1, r1
 801fc46:	4643      	movcc	r3, r8
 801fc48:	2dff      	cmp	r5, #255	@ 0xff
 801fc4a:	eb09 0506 	add.w	r5, r9, r6
 801fc4e:	b2ad      	uxth	r5, r5
 801fc50:	d130      	bne.n	801fcb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801fc52:	45a9      	cmp	r9, r5
 801fc54:	f10e 0e03 	add.w	lr, lr, #3
 801fc58:	d17a      	bne.n	801fd50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801fc5a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fc5e:	4594      	cmp	ip, r2
 801fc60:	4430      	add	r0, r6
 801fc62:	d3db      	bcc.n	801fc1c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801fc64:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fc66:	9903      	ldr	r1, [sp, #12]
 801fc68:	8812      	ldrh	r2, [r2, #0]
 801fc6a:	1a52      	subs	r2, r2, r1
 801fc6c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fc6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc72:	4410      	add	r0, r2
 801fc74:	9a07      	ldr	r2, [sp, #28]
 801fc76:	3201      	adds	r2, #1
 801fc78:	428a      	cmp	r2, r1
 801fc7a:	9207      	str	r2, [sp, #28]
 801fc7c:	f040 8081 	bne.w	801fd82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801fc80:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801fc84:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801fc88:	9b03      	ldr	r3, [sp, #12]
 801fc8a:	eba8 080c 	sub.w	r8, r8, ip
 801fc8e:	fa1f f888 	uxth.w	r8, r8
 801fc92:	f1b8 0f00 	cmp.w	r8, #0
 801fc96:	bf08      	it	eq
 801fc98:	461a      	moveq	r2, r3
 801fc9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc9c:	bf18      	it	ne
 801fc9e:	2200      	movne	r2, #0
 801fca0:	3301      	adds	r3, #1
 801fca2:	b292      	uxth	r2, r2
 801fca4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fca6:	e6fd      	b.n	801faa4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801fca8:	240284e8 	.word	0x240284e8
 801fcac:	240284e2 	.word	0x240284e2
 801fcb0:	fffff7fb 	.word	0xfffff7fb
 801fcb4:	45a9      	cmp	r9, r5
 801fcb6:	f10e 0e03 	add.w	lr, lr, #3
 801fcba:	d0ce      	beq.n	801fc5a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801fcbc:	f109 0701 	add.w	r7, r9, #1
 801fcc0:	44a1      	add	r9, r4
 801fcc2:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801fcc6:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801fcca:	9713      	str	r7, [sp, #76]	@ 0x4c
 801fccc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fcd0:	9f05      	ldr	r7, [sp, #20]
 801fcd2:	eb07 0908 	add.w	r9, r7, r8
 801fcd6:	f817 8008 	ldrb.w	r8, [r7, r8]
 801fcda:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801fcdc:	fb1b fb07 	smulbb	fp, fp, r7
 801fce0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fce2:	fb08 b807 	mla	r8, r8, r7, fp
 801fce6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801fce8:	fa1f f888 	uxth.w	r8, r8
 801fcec:	f108 0b01 	add.w	fp, r8, #1
 801fcf0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fcf4:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801fcf8:	fb1b fb07 	smulbb	fp, fp, r7
 801fcfc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd00:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fd02:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801fd06:	f899 8001 	ldrb.w	r8, [r9, #1]
 801fd0a:	fb08 b807 	mla	r8, r8, r7, fp
 801fd0e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801fd10:	fa1f f888 	uxth.w	r8, r8
 801fd14:	f108 0b01 	add.w	fp, r8, #1
 801fd18:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fd1c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd20:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801fd24:	f899 8002 	ldrb.w	r8, [r9, #2]
 801fd28:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801fd2c:	fb19 f907 	smulbb	r9, r9, r7
 801fd30:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fd32:	fb08 9807 	mla	r8, r8, r7, r9
 801fd36:	fa1f f888 	uxth.w	r8, r8
 801fd3a:	f108 0901 	add.w	r9, r8, #1
 801fd3e:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801fd42:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801fd46:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd4a:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801fd4e:	e7b1      	b.n	801fcb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801fd50:	f109 0b01 	add.w	fp, r9, #1
 801fd54:	44a1      	add	r9, r4
 801fd56:	9f05      	ldr	r7, [sp, #20]
 801fd58:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801fd5c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fd60:	eb07 0908 	add.w	r9, r7, r8
 801fd64:	f817 8008 	ldrb.w	r8, [r7, r8]
 801fd68:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801fd6c:	f899 8001 	ldrb.w	r8, [r9, #1]
 801fd70:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801fd74:	f899 8002 	ldrb.w	r8, [r9, #2]
 801fd78:	fa1f f98b 	uxth.w	r9, fp
 801fd7c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801fd80:	e767      	b.n	801fc52 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801fd82:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801fd86:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801fd8a:	eba8 0801 	sub.w	r8, r8, r1
 801fd8e:	fa1f f888 	uxth.w	r8, r8
 801fd92:	f1b8 0f00 	cmp.w	r8, #0
 801fd96:	bf18      	it	ne
 801fd98:	2100      	movne	r1, #0
 801fd9a:	e741      	b.n	801fc20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801fd9c:	4b03      	ldr	r3, [pc, #12]	@ (801fdac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801fd9e:	6818      	ldr	r0, [r3, #0]
 801fda0:	6803      	ldr	r3, [r0, #0]
 801fda2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fda4:	4798      	blx	r3
 801fda6:	b01b      	add	sp, #108	@ 0x6c
 801fda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdac:	240284e8 	.word	0x240284e8

0801fdb0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801fdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdb4:	b09d      	sub	sp, #116	@ 0x74
 801fdb6:	461d      	mov	r5, r3
 801fdb8:	4604      	mov	r4, r0
 801fdba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fdbc:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801fdc0:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801fdc4:	920c      	str	r2, [sp, #48]	@ 0x30
 801fdc6:	2a00      	cmp	r2, #0
 801fdc8:	f000 81de 	beq.w	8020188 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801fdcc:	6828      	ldr	r0, [r5, #0]
 801fdce:	aa18      	add	r2, sp, #96	@ 0x60
 801fdd0:	6869      	ldr	r1, [r5, #4]
 801fdd2:	c203      	stmia	r2!, {r0, r1}
 801fdd4:	6818      	ldr	r0, [r3, #0]
 801fdd6:	aa1a      	add	r2, sp, #104	@ 0x68
 801fdd8:	6859      	ldr	r1, [r3, #4]
 801fdda:	c203      	stmia	r2!, {r0, r1}
 801fddc:	a818      	add	r0, sp, #96	@ 0x60
 801fdde:	f7f9 fb45 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fde2:	4629      	mov	r1, r5
 801fde4:	a81a      	add	r0, sp, #104	@ 0x68
 801fde6:	f7f9 fb85 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fdea:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801fdee:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801fdf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fdf6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801fdfa:	bfdb      	ittet	le
 801fdfc:	b29a      	uxthle	r2, r3
 801fdfe:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801fe02:	2201      	movgt	r2, #1
 801fe04:	fb91 f2f2 	sdivle	r2, r1, r2
 801fe08:	9201      	str	r2, [sp, #4]
 801fe0a:	9801      	ldr	r0, [sp, #4]
 801fe0c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801fe10:	9901      	ldr	r1, [sp, #4]
 801fe12:	fb92 f0f0 	sdiv	r0, r2, r0
 801fe16:	b280      	uxth	r0, r0
 801fe18:	440f      	add	r7, r1
 801fe1a:	900d      	str	r0, [sp, #52]	@ 0x34
 801fe1c:	3f01      	subs	r7, #1
 801fe1e:	9801      	ldr	r0, [sp, #4]
 801fe20:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801fe22:	fb05 2510 	mls	r5, r5, r0, r2
 801fe26:	fb97 f7f1 	sdiv	r7, r7, r1
 801fe2a:	fb15 f503 	smulbb	r5, r5, r3
 801fe2e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801fe32:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801fe36:	3701      	adds	r7, #1
 801fe38:	440d      	add	r5, r1
 801fe3a:	4419      	add	r1, r3
 801fe3c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801fe40:	b2bf      	uxth	r7, r7
 801fe42:	441a      	add	r2, r3
 801fe44:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801fe48:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801fe4c:	00bf      	lsls	r7, r7, #2
 801fe4e:	9304      	str	r3, [sp, #16]
 801fe50:	b2ad      	uxth	r5, r5
 801fe52:	4bb0      	ldr	r3, [pc, #704]	@ (8020114 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801fe54:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801fe58:	6818      	ldr	r0, [r3, #0]
 801fe5a:	6803      	ldr	r3, [r0, #0]
 801fe5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe5e:	4798      	blx	r3
 801fe60:	4bad      	ldr	r3, [pc, #692]	@ (8020118 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801fe62:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801fe66:	2d00      	cmp	r5, #0
 801fe68:	881a      	ldrh	r2, [r3, #0]
 801fe6a:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801fe6e:	fb02 f606 	mul.w	r6, r2, r6
 801fe72:	fb02 c101 	mla	r1, r2, r1, ip
 801fe76:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fe7a:	9316      	str	r3, [sp, #88]	@ 0x58
 801fe7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fe80:	4ba6      	ldr	r3, [pc, #664]	@ (802011c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801fe82:	eb00 0801 	add.w	r8, r0, r1
 801fe86:	bf18      	it	ne
 801fe88:	2100      	movne	r1, #0
 801fe8a:	eba3 0304 	sub.w	r3, r3, r4
 801fe8e:	eb08 0206 	add.w	r2, r8, r6
 801fe92:	9317      	str	r3, [sp, #92]	@ 0x5c
 801fe94:	9208      	str	r2, [sp, #32]
 801fe96:	f107 0204 	add.w	r2, r7, #4
 801fe9a:	9211      	str	r2, [sp, #68]	@ 0x44
 801fe9c:	9a04      	ldr	r2, [sp, #16]
 801fe9e:	bf08      	it	eq
 801fea0:	4611      	moveq	r1, r2
 801fea2:	2200      	movs	r2, #0
 801fea4:	b289      	uxth	r1, r1
 801fea6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fea8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801feaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801feac:	fa12 f383 	uxtah	r3, r2, r3
 801feb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801feb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801feb6:	3304      	adds	r3, #4
 801feb8:	9306      	str	r3, [sp, #24]
 801feba:	9b08      	ldr	r3, [sp, #32]
 801febc:	4543      	cmp	r3, r8
 801febe:	f240 815e 	bls.w	802017e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801fec2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801fec6:	f04f 0b01 	mov.w	fp, #1
 801feca:	9a01      	ldr	r2, [sp, #4]
 801fecc:	9806      	ldr	r0, [sp, #24]
 801fece:	465e      	mov	r6, fp
 801fed0:	f8cd b008 	str.w	fp, [sp, #8]
 801fed4:	7800      	ldrb	r0, [r0, #0]
 801fed6:	fbb5 f3f3 	udiv	r3, r5, r3
 801feda:	1ad3      	subs	r3, r2, r3
 801fedc:	900e      	str	r0, [sp, #56]	@ 0x38
 801fede:	3001      	adds	r0, #1
 801fee0:	b29b      	uxth	r3, r3
 801fee2:	9005      	str	r0, [sp, #20]
 801fee4:	9312      	str	r3, [sp, #72]	@ 0x48
 801fee6:	9b06      	ldr	r3, [sp, #24]
 801fee8:	785a      	ldrb	r2, [r3, #1]
 801feea:	789b      	ldrb	r3, [r3, #2]
 801feec:	021b      	lsls	r3, r3, #8
 801feee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fef2:	9a06      	ldr	r2, [sp, #24]
 801fef4:	78d2      	ldrb	r2, [r2, #3]
 801fef6:	4313      	orrs	r3, r2
 801fef8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fefa:	441a      	add	r2, r3
 801fefc:	1c50      	adds	r0, r2, #1
 801fefe:	7852      	ldrb	r2, [r2, #1]
 801ff00:	9003      	str	r0, [sp, #12]
 801ff02:	0212      	lsls	r2, r2, #8
 801ff04:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ff06:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801ff0a:	5cc3      	ldrb	r3, [r0, r3]
 801ff0c:	431a      	orrs	r2, r3
 801ff0e:	b293      	uxth	r3, r2
 801ff10:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801ff14:	930a      	str	r3, [sp, #40]	@ 0x28
 801ff16:	2300      	movs	r3, #0
 801ff18:	461a      	mov	r2, r3
 801ff1a:	9307      	str	r3, [sp, #28]
 801ff1c:	2d00      	cmp	r5, #0
 801ff1e:	d07c      	beq.n	802001a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801ff20:	42ae      	cmp	r6, r5
 801ff22:	d26c      	bcs.n	801fffe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801ff24:	9b08      	ldr	r3, [sp, #32]
 801ff26:	1bad      	subs	r5, r5, r6
 801ff28:	4608      	mov	r0, r1
 801ff2a:	4543      	cmp	r3, r8
 801ff2c:	b2ad      	uxth	r5, r5
 801ff2e:	d802      	bhi.n	801ff36 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801ff30:	e071      	b.n	8020016 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d15d      	bne.n	801fff2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801ff36:	9b03      	ldr	r3, [sp, #12]
 801ff38:	9a02      	ldr	r2, [sp, #8]
 801ff3a:	785b      	ldrb	r3, [r3, #1]
 801ff3c:	f1c2 0207 	rsb	r2, r2, #7
 801ff40:	9902      	ldr	r1, [sp, #8]
 801ff42:	4093      	lsls	r3, r2
 801ff44:	005b      	lsls	r3, r3, #1
 801ff46:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801ff4a:	9b03      	ldr	r3, [sp, #12]
 801ff4c:	781b      	ldrb	r3, [r3, #0]
 801ff4e:	410b      	asrs	r3, r1
 801ff50:	3101      	adds	r1, #1
 801ff52:	b2c9      	uxtb	r1, r1
 801ff54:	b2db      	uxtb	r3, r3
 801ff56:	2908      	cmp	r1, #8
 801ff58:	9102      	str	r1, [sp, #8]
 801ff5a:	9903      	ldr	r1, [sp, #12]
 801ff5c:	ea43 0302 	orr.w	r3, r3, r2
 801ff60:	bf0c      	ite	eq
 801ff62:	3102      	addeq	r1, #2
 801ff64:	3101      	addne	r1, #1
 801ff66:	b29a      	uxth	r2, r3
 801ff68:	bf05      	ittet	eq
 801ff6a:	9103      	streq	r1, [sp, #12]
 801ff6c:	2100      	moveq	r1, #0
 801ff6e:	9103      	strne	r1, [sp, #12]
 801ff70:	9102      	streq	r1, [sp, #8]
 801ff72:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ff74:	4291      	cmp	r1, r2
 801ff76:	d30a      	bcc.n	801ff8e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801ff78:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801ff7c:	2301      	movs	r3, #1
 801ff7e:	9905      	ldr	r1, [sp, #20]
 801ff80:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801ff84:	d30f      	bcc.n	801ffa6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801ff86:	469b      	mov	fp, r3
 801ff88:	f04f 0c00 	mov.w	ip, #0
 801ff8c:	e032      	b.n	801fff4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801ff8e:	9b05      	ldr	r3, [sp, #20]
 801ff90:	429a      	cmp	r2, r3
 801ff92:	d318      	bcc.n	801ffc6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801ff94:	eb04 030b 	add.w	r3, r4, fp
 801ff98:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801ff9c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801ffa0:	f10b 0301 	add.w	r3, fp, #1
 801ffa4:	b29b      	uxth	r3, r3
 801ffa6:	9905      	ldr	r1, [sp, #20]
 801ffa8:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801ffac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ffb0:	710e      	strb	r6, [r1, #4]
 801ffb2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ffb4:	80ce      	strh	r6, [r1, #6]
 801ffb6:	f10b 0601 	add.w	r6, fp, #1
 801ffba:	714e      	strb	r6, [r1, #5]
 801ffbc:	9905      	ldr	r1, [sp, #20]
 801ffbe:	3101      	adds	r1, #1
 801ffc0:	b289      	uxth	r1, r1
 801ffc2:	9105      	str	r1, [sp, #20]
 801ffc4:	e7df      	b.n	801ff86 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801ffc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ffca:	4611      	mov	r1, r2
 801ffcc:	795b      	ldrb	r3, [r3, #5]
 801ffce:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801ffd2:	4426      	add	r6, r4
 801ffd4:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801ffd6:	4437      	add	r7, r6
 801ffd8:	2f00      	cmp	r7, #0
 801ffda:	dd06      	ble.n	801ffea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801ffdc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ffe0:	790f      	ldrb	r7, [r1, #4]
 801ffe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ffe6:	88c9      	ldrh	r1, [r1, #6]
 801ffe8:	e7f4      	b.n	801ffd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801ffea:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801ffee:	b29b      	uxth	r3, r3
 801fff0:	e7c5      	b.n	801ff7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801fff2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fff4:	920a      	str	r2, [sp, #40]	@ 0x28
 801fff6:	4601      	mov	r1, r0
 801fff8:	4662      	mov	r2, ip
 801fffa:	461e      	mov	r6, r3
 801fffc:	e78e      	b.n	801ff1c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801fffe:	1b73      	subs	r3, r6, r5
 8020000:	eb02 0c05 	add.w	ip, r2, r5
 8020004:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8020008:	b29b      	uxth	r3, r3
 802000a:	fa1f fc8c 	uxth.w	ip, ip
 802000e:	2500      	movs	r5, #0
 8020010:	9a08      	ldr	r2, [sp, #32]
 8020012:	4542      	cmp	r2, r8
 8020014:	d88d      	bhi.n	801ff32 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8020016:	4601      	mov	r1, r0
 8020018:	e74f      	b.n	801feba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 802001a:	428e      	cmp	r6, r1
 802001c:	bf2b      	itete	cs
 802001e:	468e      	movcs	lr, r1
 8020020:	46b6      	movcc	lr, r6
 8020022:	1a73      	subcs	r3, r6, r1
 8020024:	1b88      	subcc	r0, r1, r6
 8020026:	eb02 0c0e 	add.w	ip, r2, lr
 802002a:	bf2b      	itete	cs
 802002c:	4628      	movcs	r0, r5
 802002e:	462b      	movcc	r3, r5
 8020030:	b29b      	uxthcs	r3, r3
 8020032:	b280      	uxthcc	r0, r0
 8020034:	f108 0503 	add.w	r5, r8, #3
 8020038:	fa1f fc8c 	uxth.w	ip, ip
 802003c:	4562      	cmp	r2, ip
 802003e:	d06f      	beq.n	8020120 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8020040:	1c57      	adds	r7, r2, #1
 8020042:	4422      	add	r2, r4
 8020044:	b2bf      	uxth	r7, r7
 8020046:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802004a:	9713      	str	r7, [sp, #76]	@ 0x4c
 802004c:	2704      	movs	r7, #4
 802004e:	46b9      	mov	r9, r7
 8020050:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8020052:	fb19 7202 	smlabb	r2, r9, r2, r7
 8020056:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020058:	58bf      	ldr	r7, [r7, r2]
 802005a:	0e3a      	lsrs	r2, r7, #24
 802005c:	9209      	str	r2, [sp, #36]	@ 0x24
 802005e:	d016      	beq.n	802008e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8020060:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020064:	fa5f fa87 	uxtb.w	sl, r7
 8020068:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802006c:	fa5f f289 	uxtb.w	r2, r9
 8020070:	9214      	str	r2, [sp, #80]	@ 0x50
 8020072:	b2fa      	uxtb	r2, r7
 8020074:	9215      	str	r2, [sp, #84]	@ 0x54
 8020076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020078:	2aff      	cmp	r2, #255	@ 0xff
 802007a:	d10b      	bne.n	8020094 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 802007c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802007e:	2aff      	cmp	r2, #255	@ 0xff
 8020080:	d108      	bne.n	8020094 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8020082:	f805 ac03 	strb.w	sl, [r5, #-3]
 8020086:	f805 9c02 	strb.w	r9, [r5, #-2]
 802008a:	f805 7c01 	strb.w	r7, [r5, #-1]
 802008e:	3503      	adds	r5, #3
 8020090:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020092:	e7d3      	b.n	802003c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8020094:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020096:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020098:	437a      	muls	r2, r7
 802009a:	1c57      	adds	r7, r2, #1
 802009c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80200a0:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80200a4:	1212      	asrs	r2, r2, #8
 80200a6:	fa1f f982 	uxth.w	r9, r2
 80200aa:	43d2      	mvns	r2, r2
 80200ac:	fb1a fa09 	smulbb	sl, sl, r9
 80200b0:	b2d2      	uxtb	r2, r2
 80200b2:	fb07 a702 	mla	r7, r7, r2, sl
 80200b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80200b8:	b2bf      	uxth	r7, r7
 80200ba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80200bc:	f107 0a01 	add.w	sl, r7, #1
 80200c0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80200c4:	fb12 fa09 	smulbb	sl, r2, r9
 80200c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80200ca:	123f      	asrs	r7, r7, #8
 80200cc:	f805 7c03 	strb.w	r7, [r5, #-3]
 80200d0:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 80200d4:	fb07 aa02 	mla	sl, r7, r2, sl
 80200d8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80200da:	fb12 f909 	smulbb	r9, r2, r9
 80200de:	fa1f fa8a 	uxth.w	sl, sl
 80200e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80200e4:	f10a 0701 	add.w	r7, sl, #1
 80200e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80200ec:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 80200f0:	fb07 9902 	mla	r9, r7, r2, r9
 80200f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80200f8:	fa1f f989 	uxth.w	r9, r9
 80200fc:	f805 ac02 	strb.w	sl, [r5, #-2]
 8020100:	f109 0201 	add.w	r2, r9, #1
 8020104:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8020108:	ea4f 2929 	mov.w	r9, r9, asr #8
 802010c:	f805 9c01 	strb.w	r9, [r5, #-1]
 8020110:	e7bd      	b.n	802008e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8020112:	bf00      	nop
 8020114:	240284e8 	.word	0x240284e8
 8020118:	240284e2 	.word	0x240284e2
 802011c:	fffff7fb 	.word	0xfffff7fb
 8020120:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020124:	428e      	cmp	r6, r1
 8020126:	44f0      	add	r8, lr
 8020128:	f4ff af71 	bcc.w	802000e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 802012c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802012e:	9904      	ldr	r1, [sp, #16]
 8020130:	8812      	ldrh	r2, [r2, #0]
 8020132:	1a52      	subs	r2, r2, r1
 8020134:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020136:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802013a:	4490      	add	r8, r2
 802013c:	9a07      	ldr	r2, [sp, #28]
 802013e:	3201      	adds	r2, #1
 8020140:	428a      	cmp	r2, r1
 8020142:	9207      	str	r2, [sp, #28]
 8020144:	d111      	bne.n	802016a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8020146:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 802014a:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 802014e:	9b04      	ldr	r3, [sp, #16]
 8020150:	eba5 050c 	sub.w	r5, r5, ip
 8020154:	b2ad      	uxth	r5, r5
 8020156:	2d00      	cmp	r5, #0
 8020158:	bf08      	it	eq
 802015a:	4619      	moveq	r1, r3
 802015c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802015e:	bf18      	it	ne
 8020160:	2100      	movne	r1, #0
 8020162:	3301      	adds	r3, #1
 8020164:	b289      	uxth	r1, r1
 8020166:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020168:	e69e      	b.n	801fea8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 802016a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 802016e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8020172:	1a2d      	subs	r5, r5, r0
 8020174:	b2ad      	uxth	r5, r5
 8020176:	2d00      	cmp	r5, #0
 8020178:	bf18      	it	ne
 802017a:	2000      	movne	r0, #0
 802017c:	e748      	b.n	8020010 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 802017e:	4b04      	ldr	r3, [pc, #16]	@ (8020190 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8020180:	6818      	ldr	r0, [r3, #0]
 8020182:	6803      	ldr	r3, [r0, #0]
 8020184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020186:	4798      	blx	r3
 8020188:	b01d      	add	sp, #116	@ 0x74
 802018a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802018e:	bf00      	nop
 8020190:	240284e8 	.word	0x240284e8

08020194 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8020194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020198:	b08f      	sub	sp, #60	@ 0x3c
 802019a:	4616      	mov	r6, r2
 802019c:	4681      	mov	r9, r0
 802019e:	460d      	mov	r5, r1
 80201a0:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 80201a4:	9205      	str	r2, [sp, #20]
 80201a6:	2a00      	cmp	r2, #0
 80201a8:	f000 82a8 	beq.w	80206fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 80201ac:	6830      	ldr	r0, [r6, #0]
 80201ae:	ac0a      	add	r4, sp, #40	@ 0x28
 80201b0:	6871      	ldr	r1, [r6, #4]
 80201b2:	c403      	stmia	r4!, {r0, r1}
 80201b4:	6818      	ldr	r0, [r3, #0]
 80201b6:	ac0c      	add	r4, sp, #48	@ 0x30
 80201b8:	6859      	ldr	r1, [r3, #4]
 80201ba:	c403      	stmia	r4!, {r0, r1}
 80201bc:	a80a      	add	r0, sp, #40	@ 0x28
 80201be:	f7f9 f955 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201c2:	4631      	mov	r1, r6
 80201c4:	a80c      	add	r0, sp, #48	@ 0x30
 80201c6:	f7f9 f995 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80201ca:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80201ce:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80201d2:	bfdb      	ittet	le
 80201d4:	b293      	uxthle	r3, r2
 80201d6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80201da:	2301      	movgt	r3, #1
 80201dc:	fb91 f3f3 	sdivle	r3, r1, r3
 80201e0:	9300      	str	r3, [sp, #0]
 80201e2:	f105 0308 	add.w	r3, r5, #8
 80201e6:	9900      	ldr	r1, [sp, #0]
 80201e8:	9306      	str	r3, [sp, #24]
 80201ea:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80201ee:	440b      	add	r3, r1
 80201f0:	3b01      	subs	r3, #1
 80201f2:	fb93 f3f1 	sdiv	r3, r3, r1
 80201f6:	3b01      	subs	r3, #1
 80201f8:	9906      	ldr	r1, [sp, #24]
 80201fa:	b29b      	uxth	r3, r3
 80201fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020200:	9900      	ldr	r1, [sp, #0]
 8020202:	9307      	str	r3, [sp, #28]
 8020204:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020208:	fb93 f0f1 	sdiv	r0, r3, r1
 802020c:	b284      	uxth	r4, r0
 802020e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8020212:	b280      	uxth	r0, r0
 8020214:	9402      	str	r4, [sp, #8]
 8020216:	9d02      	ldr	r5, [sp, #8]
 8020218:	9c00      	ldr	r4, [sp, #0]
 802021a:	fb05 3514 	mls	r5, r5, r4, r3
 802021e:	fb15 f502 	smulbb	r5, r5, r2
 8020222:	440d      	add	r5, r1
 8020224:	b2ad      	uxth	r5, r5
 8020226:	2800      	cmp	r0, #0
 8020228:	d071      	beq.n	802030e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 802022a:	1e42      	subs	r2, r0, #1
 802022c:	9806      	ldr	r0, [sp, #24]
 802022e:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 8020232:	9a07      	ldr	r2, [sp, #28]
 8020234:	fa98 f888 	rev.w	r8, r8
 8020238:	4490      	add	r8, r2
 802023a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 802023e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8020242:	4411      	add	r1, r2
 8020244:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8020248:	f8df b348 	ldr.w	fp, [pc, #840]	@ 8020594 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 802024c:	4413      	add	r3, r2
 802024e:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8020252:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020256:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802025a:	9301      	str	r3, [sp, #4]
 802025c:	4bcb      	ldr	r3, [pc, #812]	@ (802058c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 802025e:	6818      	ldr	r0, [r3, #0]
 8020260:	6803      	ldr	r3, [r0, #0]
 8020262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020264:	4798      	blx	r3
 8020266:	4bca      	ldr	r3, [pc, #808]	@ (8020590 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8020268:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802026c:	881b      	ldrh	r3, [r3, #0]
 802026e:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8020272:	fb03 2707 	mla	r7, r3, r7, r2
 8020276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802027a:	4363      	muls	r3, r4
 802027c:	2400      	movs	r4, #0
 802027e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020282:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020286:	4621      	mov	r1, r4
 8020288:	4407      	add	r7, r0
 802028a:	18fb      	adds	r3, r7, r3
 802028c:	9309      	str	r3, [sp, #36]	@ 0x24
 802028e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020292:	fb95 f3f3 	sdiv	r3, r5, r3
 8020296:	9304      	str	r3, [sp, #16]
 8020298:	f109 0304 	add.w	r3, r9, #4
 802029c:	4618      	mov	r0, r3
 802029e:	9308      	str	r3, [sp, #32]
 80202a0:	f008 fc2a 	bl	8028af8 <memset>
 80202a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202a6:	42bb      	cmp	r3, r7
 80202a8:	f240 8223 	bls.w	80206f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 80202ac:	2003      	movs	r0, #3
 80202ae:	f04f 0c07 	mov.w	ip, #7
 80202b2:	f04f 0e0b 	mov.w	lr, #11
 80202b6:	2d00      	cmp	r5, #0
 80202b8:	f000 813c 	beq.w	8020534 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 80202bc:	f898 3000 	ldrb.w	r3, [r8]
 80202c0:	b2db      	uxtb	r3, r3
 80202c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80202c4:	d126      	bne.n	8020314 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 80202c6:	f898 1001 	ldrb.w	r1, [r8, #1]
 80202ca:	f108 0604 	add.w	r6, r8, #4
 80202ce:	f898 2002 	ldrb.w	r2, [r8, #2]
 80202d2:	3d01      	subs	r5, #1
 80202d4:	b2c9      	uxtb	r1, r1
 80202d6:	f898 8003 	ldrb.w	r8, [r8, #3]
 80202da:	b2d2      	uxtb	r2, r2
 80202dc:	f361 0407 	bfi	r4, r1, #0, #8
 80202e0:	fa5f f888 	uxtb.w	r8, r8
 80202e4:	b2ad      	uxth	r5, r5
 80202e6:	f362 240f 	bfi	r4, r2, #8, #8
 80202ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80202ee:	fb10 2208 	smlabb	r2, r0, r8, r2
 80202f2:	f368 4417 	bfi	r4, r8, #16, #8
 80202f6:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80202fa:	0e23      	lsrs	r3, r4, #24
 80202fc:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8020300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020304:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8020308:	605c      	str	r4, [r3, #4]
 802030a:	46b0      	mov	r8, r6
 802030c:	e7d3      	b.n	80202b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 802030e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020312:	e792      	b.n	802023a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8020314:	2bff      	cmp	r3, #255	@ 0xff
 8020316:	d127      	bne.n	8020368 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8020318:	f898 2001 	ldrb.w	r2, [r8, #1]
 802031c:	f108 0605 	add.w	r6, r8, #5
 8020320:	f898 3002 	ldrb.w	r3, [r8, #2]
 8020324:	3d01      	subs	r5, #1
 8020326:	b2d2      	uxtb	r2, r2
 8020328:	f898 1003 	ldrb.w	r1, [r8, #3]
 802032c:	b2db      	uxtb	r3, r3
 802032e:	f898 8004 	ldrb.w	r8, [r8, #4]
 8020332:	f362 0407 	bfi	r4, r2, #0, #8
 8020336:	b2c9      	uxtb	r1, r1
 8020338:	fa5f f888 	uxtb.w	r8, r8
 802033c:	f363 240f 	bfi	r4, r3, #8, #8
 8020340:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020344:	b2ad      	uxth	r5, r5
 8020346:	fb10 3301 	smlabb	r3, r0, r1, r3
 802034a:	f361 4417 	bfi	r4, r1, #16, #8
 802034e:	fb1c 3302 	smlabb	r3, ip, r2, r3
 8020352:	f368 641f 	bfi	r4, r8, #24, #8
 8020356:	fb1e 3808 	smlabb	r8, lr, r8, r3
 802035a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 802035e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8020362:	f8c8 4004 	str.w	r4, [r8, #4]
 8020366:	e7d0      	b.n	802030a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8020368:	119a      	asrs	r2, r3, #6
 802036a:	f108 0601 	add.w	r6, r8, #1
 802036e:	d107      	bne.n	8020380 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8020370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020374:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8020378:	685c      	ldr	r4, [r3, #4]
 802037a:	3d01      	subs	r5, #1
 802037c:	b2ad      	uxth	r5, r5
 802037e:	e7c4      	b.n	802030a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8020380:	2a01      	cmp	r2, #1
 8020382:	d129      	bne.n	80203d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8020384:	f003 0203 	and.w	r2, r3, #3
 8020388:	1ea1      	subs	r1, r4, #2
 802038a:	4411      	add	r1, r2
 802038c:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8020390:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020394:	b2c9      	uxtb	r1, r1
 8020396:	3a02      	subs	r2, #2
 8020398:	3b02      	subs	r3, #2
 802039a:	f361 0407 	bfi	r4, r1, #0, #8
 802039e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80203a2:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80203a6:	f362 240f 	bfi	r4, r2, #8, #8
 80203aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80203ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80203b2:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80203b6:	fb10 2203 	smlabb	r2, r0, r3, r2
 80203ba:	f363 4417 	bfi	r4, r3, #16, #8
 80203be:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80203c2:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80203c6:	fb1e 2808 	smlabb	r8, lr, r8, r2
 80203ca:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80203ce:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80203d2:	f8c8 4004 	str.w	r4, [r8, #4]
 80203d6:	e7d0      	b.n	802037a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80203d8:	2a02      	cmp	r2, #2
 80203da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80203de:	d12e      	bne.n	802043e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 80203e0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80203e4:	f1a3 0a20 	sub.w	sl, r3, #32
 80203e8:	f108 0602 	add.w	r6, r8, #2
 80203ec:	b2d2      	uxtb	r2, r2
 80203ee:	f002 010f 	and.w	r1, r2, #15
 80203f2:	1112      	asrs	r2, r2, #4
 80203f4:	3908      	subs	r1, #8
 80203f6:	3a08      	subs	r2, #8
 80203f8:	4451      	add	r1, sl
 80203fa:	4492      	add	sl, r2
 80203fc:	4421      	add	r1, r4
 80203fe:	b2c9      	uxtb	r1, r1
 8020400:	f361 0407 	bfi	r4, r1, #0, #8
 8020404:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8020408:	f1a8 0820 	sub.w	r8, r8, #32
 802040c:	4443      	add	r3, r8
 802040e:	b2db      	uxtb	r3, r3
 8020410:	f363 240f 	bfi	r4, r3, #8, #8
 8020414:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020418:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 802041c:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 8020420:	fb10 330a 	smlabb	r3, r0, sl, r3
 8020424:	f36a 4417 	bfi	r4, sl, #16, #8
 8020428:	fb1c 3301 	smlabb	r3, ip, r1, r3
 802042c:	0e22      	lsrs	r2, r4, #24
 802042e:	fb1e 3202 	smlabb	r2, lr, r2, r3
 8020432:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020436:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 802043a:	6054      	str	r4, [r2, #4]
 802043c:	e79d      	b.n	802037a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 802043e:	3301      	adds	r3, #1
 8020440:	42ab      	cmp	r3, r5
 8020442:	dd59      	ble.n	80204f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 8020444:	1b5d      	subs	r5, r3, r5
 8020446:	2d00      	cmp	r5, #0
 8020448:	dc58      	bgt.n	80204fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 802044a:	f8dd a004 	ldr.w	sl, [sp, #4]
 802044e:	f04f 0800 	mov.w	r8, #0
 8020452:	f1ba 0f00 	cmp.w	sl, #0
 8020456:	f340 8108 	ble.w	802066a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 802045a:	1c73      	adds	r3, r6, #1
 802045c:	9303      	str	r3, [sp, #12]
 802045e:	7833      	ldrb	r3, [r6, #0]
 8020460:	b2db      	uxtb	r3, r3
 8020462:	2bfe      	cmp	r3, #254	@ 0xfe
 8020464:	d16a      	bne.n	802053c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 8020466:	7871      	ldrb	r1, [r6, #1]
 8020468:	1d33      	adds	r3, r6, #4
 802046a:	78b2      	ldrb	r2, [r6, #2]
 802046c:	b2c9      	uxtb	r1, r1
 802046e:	78f0      	ldrb	r0, [r6, #3]
 8020470:	b2d2      	uxtb	r2, r2
 8020472:	9303      	str	r3, [sp, #12]
 8020474:	f361 0407 	bfi	r4, r1, #0, #8
 8020478:	b2c0      	uxtb	r0, r0
 802047a:	2303      	movs	r3, #3
 802047c:	f362 240f 	bfi	r4, r2, #8, #8
 8020480:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020484:	fb13 2200 	smlabb	r2, r3, r0, r2
 8020488:	f360 4417 	bfi	r4, r0, #16, #8
 802048c:	2307      	movs	r3, #7
 802048e:	0e25      	lsrs	r5, r4, #24
 8020490:	fb13 2101 	smlabb	r1, r3, r1, r2
 8020494:	230b      	movs	r3, #11
 8020496:	fb13 1305 	smlabb	r3, r3, r5, r1
 802049a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802049e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80204a2:	605c      	str	r4, [r3, #4]
 80204a4:	2501      	movs	r5, #1
 80204a6:	462e      	mov	r6, r5
 80204a8:	eb06 0308 	add.w	r3, r6, r8
 80204ac:	ebaa 0a06 	sub.w	sl, sl, r6
 80204b0:	1bad      	subs	r5, r5, r6
 80204b2:	2b40      	cmp	r3, #64	@ 0x40
 80204b4:	dd16      	ble.n	80204e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 80204b6:	4658      	mov	r0, fp
 80204b8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80204bc:	f7e2 fcdc 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 80204c0:	4659      	mov	r1, fp
 80204c2:	9b05      	ldr	r3, [sp, #20]
 80204c4:	4642      	mov	r2, r8
 80204c6:	4638      	mov	r0, r7
 80204c8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80204cc:	f7e2 fd3c 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80204d0:	4b30      	ldr	r3, [pc, #192]	@ (8020594 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 80204d2:	4447      	add	r7, r8
 80204d4:	f04f 0800 	mov.w	r8, #0
 80204d8:	459b      	cmp	fp, r3
 80204da:	bf0c      	ite	eq
 80204dc:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8020598 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 80204e0:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 8020594 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80204e4:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 80204e8:	4633      	mov	r3, r6
 80204ea:	3b01      	subs	r3, #1
 80204ec:	f842 4b04 	str.w	r4, [r2], #4
 80204f0:	d1fb      	bne.n	80204ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 80204f2:	44b0      	add	r8, r6
 80204f4:	9e03      	ldr	r6, [sp, #12]
 80204f6:	e7ac      	b.n	8020452 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 80204f8:	1aed      	subs	r5, r5, r3
 80204fa:	e73f      	b.n	802037c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 80204fc:	9b01      	ldr	r3, [sp, #4]
 80204fe:	42ab      	cmp	r3, r5
 8020500:	bfa8      	it	ge
 8020502:	462b      	movge	r3, r5
 8020504:	4698      	mov	r8, r3
 8020506:	9b01      	ldr	r3, [sp, #4]
 8020508:	eba3 0a08 	sub.w	sl, r3, r8
 802050c:	0e23      	lsrs	r3, r4, #24
 802050e:	eba5 0508 	sub.w	r5, r5, r8
 8020512:	d00b      	beq.n	802052c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8020514:	9a05      	ldr	r2, [sp, #20]
 8020516:	4641      	mov	r1, r8
 8020518:	4638      	mov	r0, r7
 802051a:	4353      	muls	r3, r2
 802051c:	1c5a      	adds	r2, r3, #1
 802051e:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8020522:	4622      	mov	r2, r4
 8020524:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020528:	f7e2 fcc0 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 802052c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020530:	4447      	add	r7, r8
 8020532:	e78c      	b.n	802044e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8020534:	f8dd a004 	ldr.w	sl, [sp, #4]
 8020538:	4646      	mov	r6, r8
 802053a:	e788      	b.n	802044e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 802053c:	2bff      	cmp	r3, #255	@ 0xff
 802053e:	d11d      	bne.n	802057c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8020540:	7870      	ldrb	r0, [r6, #1]
 8020542:	1d73      	adds	r3, r6, #5
 8020544:	78b2      	ldrb	r2, [r6, #2]
 8020546:	b2c0      	uxtb	r0, r0
 8020548:	78f5      	ldrb	r5, [r6, #3]
 802054a:	b2d2      	uxtb	r2, r2
 802054c:	9303      	str	r3, [sp, #12]
 802054e:	f360 0407 	bfi	r4, r0, #0, #8
 8020552:	7933      	ldrb	r3, [r6, #4]
 8020554:	b2ed      	uxtb	r5, r5
 8020556:	b2d9      	uxtb	r1, r3
 8020558:	f362 240f 	bfi	r4, r2, #8, #8
 802055c:	2303      	movs	r3, #3
 802055e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020562:	f365 4417 	bfi	r4, r5, #16, #8
 8020566:	fb13 2205 	smlabb	r2, r3, r5, r2
 802056a:	2307      	movs	r3, #7
 802056c:	f361 641f 	bfi	r4, r1, #24, #8
 8020570:	fb13 2000 	smlabb	r0, r3, r0, r2
 8020574:	230b      	movs	r3, #11
 8020576:	fb13 0301 	smlabb	r3, r3, r1, r0
 802057a:	e78e      	b.n	802049a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 802057c:	119d      	asrs	r5, r3, #6
 802057e:	d10d      	bne.n	802059c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8020580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020584:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8020588:	685c      	ldr	r4, [r3, #4]
 802058a:	e78b      	b.n	80204a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 802058c:	240284e8 	.word	0x240284e8
 8020590:	240284e2 	.word	0x240284e2
 8020594:	24000140 	.word	0x24000140
 8020598:	24000240 	.word	0x24000240
 802059c:	2d01      	cmp	r5, #1
 802059e:	d12a      	bne.n	80205f6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 80205a0:	f003 0203 	and.w	r2, r3, #3
 80205a4:	1ea1      	subs	r1, r4, #2
 80205a6:	2603      	movs	r6, #3
 80205a8:	4411      	add	r1, r2
 80205aa:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80205ae:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80205b2:	b2c9      	uxtb	r1, r1
 80205b4:	3a02      	subs	r2, #2
 80205b6:	3b02      	subs	r3, #2
 80205b8:	f361 0407 	bfi	r4, r1, #0, #8
 80205bc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80205c0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80205c4:	f362 240f 	bfi	r4, r2, #8, #8
 80205c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80205cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80205d0:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80205d4:	fb16 2203 	smlabb	r2, r6, r3, r2
 80205d8:	f363 4417 	bfi	r4, r3, #16, #8
 80205dc:	2307      	movs	r3, #7
 80205de:	0e20      	lsrs	r0, r4, #24
 80205e0:	fb13 2101 	smlabb	r1, r3, r1, r2
 80205e4:	230b      	movs	r3, #11
 80205e6:	fb13 1300 	smlabb	r3, r3, r0, r1
 80205ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80205ee:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80205f2:	605c      	str	r4, [r3, #4]
 80205f4:	e757      	b.n	80204a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 80205f6:	2d02      	cmp	r5, #2
 80205f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80205fc:	d12f      	bne.n	802065e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 80205fe:	1cb2      	adds	r2, r6, #2
 8020600:	f1a3 0020 	sub.w	r0, r3, #32
 8020604:	9203      	str	r2, [sp, #12]
 8020606:	7872      	ldrb	r2, [r6, #1]
 8020608:	b2d2      	uxtb	r2, r2
 802060a:	f002 010f 	and.w	r1, r2, #15
 802060e:	1112      	asrs	r2, r2, #4
 8020610:	3908      	subs	r1, #8
 8020612:	3a08      	subs	r2, #8
 8020614:	4401      	add	r1, r0
 8020616:	4402      	add	r2, r0
 8020618:	4421      	add	r1, r4
 802061a:	b2c9      	uxtb	r1, r1
 802061c:	f361 0407 	bfi	r4, r1, #0, #8
 8020620:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8020624:	3d20      	subs	r5, #32
 8020626:	442b      	add	r3, r5
 8020628:	2503      	movs	r5, #3
 802062a:	b2db      	uxtb	r3, r3
 802062c:	f363 240f 	bfi	r4, r3, #8, #8
 8020630:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020634:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8020638:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802063c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8020640:	f362 4417 	bfi	r4, r2, #16, #8
 8020644:	2207      	movs	r2, #7
 8020646:	0e20      	lsrs	r0, r4, #24
 8020648:	fb12 3201 	smlabb	r2, r2, r1, r3
 802064c:	210b      	movs	r1, #11
 802064e:	fb11 2100 	smlabb	r1, r1, r0, r2
 8020652:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020656:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 802065a:	604c      	str	r4, [r1, #4]
 802065c:	e722      	b.n	80204a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 802065e:	1c5d      	adds	r5, r3, #1
 8020660:	4656      	mov	r6, sl
 8020662:	45aa      	cmp	sl, r5
 8020664:	bfa8      	it	ge
 8020666:	462e      	movge	r6, r5
 8020668:	e71e      	b.n	80204a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 802066a:	f1b8 0f00 	cmp.w	r8, #0
 802066e:	d00d      	beq.n	802068c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8020670:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8020674:	4658      	mov	r0, fp
 8020676:	f7e2 fbff 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 802067a:	4642      	mov	r2, r8
 802067c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020680:	4638      	mov	r0, r7
 8020682:	9b05      	ldr	r3, [sp, #20]
 8020684:	4659      	mov	r1, fp
 8020686:	4447      	add	r7, r8
 8020688:	f7e2 fc5e 	bl	8002f48 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 802068c:	4b1d      	ldr	r3, [pc, #116]	@ (8020704 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 802068e:	9a01      	ldr	r2, [sp, #4]
 8020690:	881b      	ldrh	r3, [r3, #0]
 8020692:	1a9b      	subs	r3, r3, r2
 8020694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020698:	441f      	add	r7, r3
 802069a:	9b04      	ldr	r3, [sp, #16]
 802069c:	3301      	adds	r3, #1
 802069e:	9304      	str	r3, [sp, #16]
 80206a0:	9a04      	ldr	r2, [sp, #16]
 80206a2:	9b00      	ldr	r3, [sp, #0]
 80206a4:	4293      	cmp	r3, r2
 80206a6:	d11d      	bne.n	80206e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 80206a8:	9b02      	ldr	r3, [sp, #8]
 80206aa:	2400      	movs	r4, #0
 80206ac:	9a02      	ldr	r2, [sp, #8]
 80206ae:	f103 0801 	add.w	r8, r3, #1
 80206b2:	9b06      	ldr	r3, [sp, #24]
 80206b4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80206b8:	4621      	mov	r1, r4
 80206ba:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80206be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80206c2:	9b07      	ldr	r3, [sp, #28]
 80206c4:	ba36      	rev	r6, r6
 80206c6:	9808      	ldr	r0, [sp, #32]
 80206c8:	441e      	add	r6, r3
 80206ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80206ce:	1aed      	subs	r5, r5, r3
 80206d0:	f008 fa12 	bl	8028af8 <memset>
 80206d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80206d8:	b2ad      	uxth	r5, r5
 80206da:	9404      	str	r4, [sp, #16]
 80206dc:	f7e2 fbc2 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 80206e0:	46b0      	mov	r8, r6
 80206e2:	e5df      	b.n	80202a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 80206e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80206e8:	9a01      	ldr	r2, [sp, #4]
 80206ea:	1a9b      	subs	r3, r3, r2
 80206ec:	1b5d      	subs	r5, r3, r5
 80206ee:	b2ad      	uxth	r5, r5
 80206f0:	e7f4      	b.n	80206dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 80206f2:	4b05      	ldr	r3, [pc, #20]	@ (8020708 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 80206f4:	6818      	ldr	r0, [r3, #0]
 80206f6:	6803      	ldr	r3, [r0, #0]
 80206f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80206fa:	4798      	blx	r3
 80206fc:	b00f      	add	sp, #60	@ 0x3c
 80206fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020702:	bf00      	nop
 8020704:	240284e2 	.word	0x240284e2
 8020708:	240284e8 	.word	0x240284e8

0802070c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 802070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020710:	b093      	sub	sp, #76	@ 0x4c
 8020712:	460d      	mov	r5, r1
 8020714:	4616      	mov	r6, r2
 8020716:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 802071a:	9000      	str	r0, [sp, #0]
 802071c:	f1bb 0f00 	cmp.w	fp, #0
 8020720:	f000 82ac 	beq.w	8020c7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 8020724:	6810      	ldr	r0, [r2, #0]
 8020726:	ac0e      	add	r4, sp, #56	@ 0x38
 8020728:	6851      	ldr	r1, [r2, #4]
 802072a:	c403      	stmia	r4!, {r0, r1}
 802072c:	6818      	ldr	r0, [r3, #0]
 802072e:	ac10      	add	r4, sp, #64	@ 0x40
 8020730:	6859      	ldr	r1, [r3, #4]
 8020732:	c403      	stmia	r4!, {r0, r1}
 8020734:	a80e      	add	r0, sp, #56	@ 0x38
 8020736:	f7f8 fe99 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802073a:	4631      	mov	r1, r6
 802073c:	a810      	add	r0, sp, #64	@ 0x40
 802073e:	f7f8 fed9 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020742:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8020746:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 802074a:	bfdb      	ittet	le
 802074c:	b293      	uxthle	r3, r2
 802074e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020752:	2301      	movgt	r3, #1
 8020754:	fb91 f3f3 	sdivle	r3, r1, r3
 8020758:	9301      	str	r3, [sp, #4]
 802075a:	f105 0308 	add.w	r3, r5, #8
 802075e:	9901      	ldr	r1, [sp, #4]
 8020760:	9305      	str	r3, [sp, #20]
 8020762:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8020766:	440b      	add	r3, r1
 8020768:	3b01      	subs	r3, #1
 802076a:	fb93 f3f1 	sdiv	r3, r3, r1
 802076e:	3b01      	subs	r3, #1
 8020770:	9905      	ldr	r1, [sp, #20]
 8020772:	b29b      	uxth	r3, r3
 8020774:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020778:	9901      	ldr	r1, [sp, #4]
 802077a:	9306      	str	r3, [sp, #24]
 802077c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8020780:	fb93 f0f1 	sdiv	r0, r3, r1
 8020784:	b284      	uxth	r4, r0
 8020786:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 802078a:	9403      	str	r4, [sp, #12]
 802078c:	9d03      	ldr	r5, [sp, #12]
 802078e:	9c01      	ldr	r4, [sp, #4]
 8020790:	fb05 3714 	mls	r7, r5, r4, r3
 8020794:	fb17 f702 	smulbb	r7, r7, r2
 8020798:	440f      	add	r7, r1
 802079a:	b2bf      	uxth	r7, r7
 802079c:	2d00      	cmp	r5, #0
 802079e:	d06b      	beq.n	8020878 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 80207a0:	1e6a      	subs	r2, r5, #1
 80207a2:	9805      	ldr	r0, [sp, #20]
 80207a4:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 80207a8:	9a06      	ldr	r2, [sp, #24]
 80207aa:	fa99 f989 	rev.w	r9, r9
 80207ae:	4491      	add	r9, r2
 80207b0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80207b4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80207b8:	4411      	add	r1, r2
 80207ba:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80207be:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8020b1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 80207c2:	4413      	add	r3, r2
 80207c4:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80207c8:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80207cc:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80207d0:	9302      	str	r3, [sp, #8]
 80207d2:	4bd0      	ldr	r3, [pc, #832]	@ (8020b14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 80207d4:	6818      	ldr	r0, [r3, #0]
 80207d6:	6803      	ldr	r3, [r0, #0]
 80207d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80207da:	4798      	blx	r3
 80207dc:	4bce      	ldr	r3, [pc, #824]	@ (8020b18 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80207de:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80207e2:	881b      	ldrh	r3, [r3, #0]
 80207e4:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80207e8:	fb03 2404 	mla	r4, r3, r4, r2
 80207ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80207f0:	436b      	muls	r3, r5
 80207f2:	2500      	movs	r5, #0
 80207f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80207f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207fc:	4629      	mov	r1, r5
 80207fe:	4404      	add	r4, r0
 8020800:	18e3      	adds	r3, r4, r3
 8020802:	930d      	str	r3, [sp, #52]	@ 0x34
 8020804:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8020808:	fb97 f3f3 	sdiv	r3, r7, r3
 802080c:	9304      	str	r3, [sp, #16]
 802080e:	9b00      	ldr	r3, [sp, #0]
 8020810:	3304      	adds	r3, #4
 8020812:	4618      	mov	r0, r3
 8020814:	9309      	str	r3, [sp, #36]	@ 0x24
 8020816:	f008 f96f 	bl	8028af8 <memset>
 802081a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802081c:	42a3      	cmp	r3, r4
 802081e:	f240 8228 	bls.w	8020c72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8020822:	2003      	movs	r0, #3
 8020824:	2607      	movs	r6, #7
 8020826:	2f00      	cmp	r7, #0
 8020828:	f000 80cb 	beq.w	80209c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 802082c:	f899 3000 	ldrb.w	r3, [r9]
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2bfe      	cmp	r3, #254	@ 0xfe
 8020834:	d123      	bne.n	802087e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8020836:	f899 3001 	ldrb.w	r3, [r9, #1]
 802083a:	3f01      	subs	r7, #1
 802083c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8020840:	f109 0804 	add.w	r8, r9, #4
 8020844:	b2db      	uxtb	r3, r3
 8020846:	f899 1003 	ldrb.w	r1, [r9, #3]
 802084a:	b2d2      	uxtb	r2, r2
 802084c:	f363 0507 	bfi	r5, r3, #0, #8
 8020850:	b2c9      	uxtb	r1, r1
 8020852:	b2bf      	uxth	r7, r7
 8020854:	f362 250f 	bfi	r5, r2, #8, #8
 8020858:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802085c:	fb10 2201 	smlabb	r2, r0, r1, r2
 8020860:	f361 4517 	bfi	r5, r1, #16, #8
 8020864:	fb16 2303 	smlabb	r3, r6, r3, r2
 8020868:	9a00      	ldr	r2, [sp, #0]
 802086a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802086e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020872:	605d      	str	r5, [r3, #4]
 8020874:	46c1      	mov	r9, r8
 8020876:	e7d6      	b.n	8020826 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8020878:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802087c:	e798      	b.n	80207b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 802087e:	119a      	asrs	r2, r3, #6
 8020880:	f109 0801 	add.w	r8, r9, #1
 8020884:	d108      	bne.n	8020898 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8020886:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802088a:	9a00      	ldr	r2, [sp, #0]
 802088c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020890:	685d      	ldr	r5, [r3, #4]
 8020892:	3f01      	subs	r7, #1
 8020894:	b2bf      	uxth	r7, r7
 8020896:	e7ed      	b.n	8020874 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8020898:	2a01      	cmp	r2, #1
 802089a:	d125      	bne.n	80208e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 802089c:	f003 0103 	and.w	r1, r3, #3
 80208a0:	1eaa      	subs	r2, r5, #2
 80208a2:	440a      	add	r2, r1
 80208a4:	f3c3 0181 	ubfx	r1, r3, #2, #2
 80208a8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80208ac:	b2d2      	uxtb	r2, r2
 80208ae:	3902      	subs	r1, #2
 80208b0:	3b02      	subs	r3, #2
 80208b2:	f362 0507 	bfi	r5, r2, #0, #8
 80208b6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80208ba:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80208be:	f361 250f 	bfi	r5, r1, #8, #8
 80208c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80208c6:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 80208ca:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 80208ce:	fb10 1103 	smlabb	r1, r0, r3, r1
 80208d2:	f363 4517 	bfi	r5, r3, #16, #8
 80208d6:	9b00      	ldr	r3, [sp, #0]
 80208d8:	fb16 1202 	smlabb	r2, r6, r2, r1
 80208dc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80208e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80208e4:	6055      	str	r5, [r2, #4]
 80208e6:	e7d4      	b.n	8020892 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 80208e8:	2a02      	cmp	r2, #2
 80208ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80208ee:	d12c      	bne.n	802094a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 80208f0:	f899 2001 	ldrb.w	r2, [r9, #1]
 80208f4:	f1a3 0c20 	sub.w	ip, r3, #32
 80208f8:	f109 0802 	add.w	r8, r9, #2
 80208fc:	b2d2      	uxtb	r2, r2
 80208fe:	f002 010f 	and.w	r1, r2, #15
 8020902:	1112      	asrs	r2, r2, #4
 8020904:	3908      	subs	r1, #8
 8020906:	3a08      	subs	r2, #8
 8020908:	4461      	add	r1, ip
 802090a:	4494      	add	ip, r2
 802090c:	4429      	add	r1, r5
 802090e:	b2c9      	uxtb	r1, r1
 8020910:	f361 0507 	bfi	r5, r1, #0, #8
 8020914:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8020918:	f1ae 0e20 	sub.w	lr, lr, #32
 802091c:	4473      	add	r3, lr
 802091e:	b2db      	uxtb	r3, r3
 8020920:	f363 250f 	bfi	r5, r3, #8, #8
 8020924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020928:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 802092c:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8020930:	fb10 330c 	smlabb	r3, r0, ip, r3
 8020934:	f36c 4517 	bfi	r5, ip, #16, #8
 8020938:	fb16 3101 	smlabb	r1, r6, r1, r3
 802093c:	9b00      	ldr	r3, [sp, #0]
 802093e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020942:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020946:	604d      	str	r5, [r1, #4]
 8020948:	e7a3      	b.n	8020892 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 802094a:	3301      	adds	r3, #1
 802094c:	42bb      	cmp	r3, r7
 802094e:	dd23      	ble.n	8020998 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8020950:	eba3 0907 	sub.w	r9, r3, r7
 8020954:	f1b9 0f00 	cmp.w	r9, #0
 8020958:	dc20      	bgt.n	802099c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 802095a:	9e02      	ldr	r6, [sp, #8]
 802095c:	2700      	movs	r7, #0
 802095e:	2e00      	cmp	r6, #0
 8020960:	f340 8142 	ble.w	8020be8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8020964:	f108 0301 	add.w	r3, r8, #1
 8020968:	9307      	str	r3, [sp, #28]
 802096a:	f898 3000 	ldrb.w	r3, [r8]
 802096e:	b2db      	uxtb	r3, r3
 8020970:	119a      	asrs	r2, r3, #6
 8020972:	d12a      	bne.n	80209ca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8020974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020978:	9a00      	ldr	r2, [sp, #0]
 802097a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802097e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020982:	685d      	ldr	r5, [r3, #4]
 8020984:	f040 811f 	bne.w	8020bc6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8020988:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802098c:	7025      	strb	r5, [r4, #0]
 802098e:	7063      	strb	r3, [r4, #1]
 8020990:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020994:	70a3      	strb	r3, [r4, #2]
 8020996:	e04e      	b.n	8020a36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8020998:	1aff      	subs	r7, r7, r3
 802099a:	e77b      	b.n	8020894 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 802099c:	9b02      	ldr	r3, [sp, #8]
 802099e:	4620      	mov	r0, r4
 80209a0:	462a      	mov	r2, r5
 80209a2:	454b      	cmp	r3, r9
 80209a4:	bfa8      	it	ge
 80209a6:	464b      	movge	r3, r9
 80209a8:	461f      	mov	r7, r3
 80209aa:	9b02      	ldr	r3, [sp, #8]
 80209ac:	4639      	mov	r1, r7
 80209ae:	1bde      	subs	r6, r3, r7
 80209b0:	eba9 0907 	sub.w	r9, r9, r7
 80209b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80209b8:	465b      	mov	r3, fp
 80209ba:	f7e2 fa77 	bl	8002eac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 80209be:	443c      	add	r4, r7
 80209c0:	e7cc      	b.n	802095c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 80209c2:	46c8      	mov	r8, r9
 80209c4:	9e02      	ldr	r6, [sp, #8]
 80209c6:	46b9      	mov	r9, r7
 80209c8:	e7c8      	b.n	802095c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 80209ca:	2a01      	cmp	r2, #1
 80209cc:	d136      	bne.n	8020a3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 80209ce:	f003 0103 	and.w	r1, r3, #3
 80209d2:	1ea8      	subs	r0, r5, #2
 80209d4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80209d8:	4408      	add	r0, r1
 80209da:	f3c3 0181 	ubfx	r1, r3, #2, #2
 80209de:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80209e2:	b2c0      	uxtb	r0, r0
 80209e4:	f1a1 0102 	sub.w	r1, r1, #2
 80209e8:	f1a3 0302 	sub.w	r3, r3, #2
 80209ec:	f360 0507 	bfi	r5, r0, #0, #8
 80209f0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80209f4:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80209f8:	f361 250f 	bfi	r5, r1, #8, #8
 80209fc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8020a00:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8020a04:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8020a08:	f04f 0303 	mov.w	r3, #3
 8020a0c:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8020a10:	f04f 0c07 	mov.w	ip, #7
 8020a14:	9b00      	ldr	r3, [sp, #0]
 8020a16:	f368 4517 	bfi	r5, r8, #16, #8
 8020a1a:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8020a1e:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8020a22:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8020a26:	f8cc 5004 	str.w	r5, [ip, #4]
 8020a2a:	f040 80cd 	bne.w	8020bc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8020a2e:	7020      	strb	r0, [r4, #0]
 8020a30:	7061      	strb	r1, [r4, #1]
 8020a32:	f884 8002 	strb.w	r8, [r4, #2]
 8020a36:	3e01      	subs	r6, #1
 8020a38:	3403      	adds	r4, #3
 8020a3a:	e0c1      	b.n	8020bc0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8020a3c:	2a02      	cmp	r2, #2
 8020a3e:	d13d      	bne.n	8020abc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8020a40:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020a48:	f108 0202 	add.w	r2, r8, #2
 8020a4c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020a50:	b2c9      	uxtb	r1, r1
 8020a52:	f1a3 0c20 	sub.w	ip, r3, #32
 8020a56:	9207      	str	r2, [sp, #28]
 8020a58:	f001 000f 	and.w	r0, r1, #15
 8020a5c:	f1a0 0008 	sub.w	r0, r0, #8
 8020a60:	4460      	add	r0, ip
 8020a62:	4428      	add	r0, r5
 8020a64:	b2c0      	uxtb	r0, r0
 8020a66:	f360 0507 	bfi	r5, r0, #0, #8
 8020a6a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8020a6e:	f1a2 0220 	sub.w	r2, r2, #32
 8020a72:	4413      	add	r3, r2
 8020a74:	ea4f 1221 	mov.w	r2, r1, asr #4
 8020a78:	b2db      	uxtb	r3, r3
 8020a7a:	f1a2 0208 	sub.w	r2, r2, #8
 8020a7e:	f363 250f 	bfi	r5, r3, #8, #8
 8020a82:	4462      	add	r2, ip
 8020a84:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8020a88:	f04f 0c03 	mov.w	ip, #3
 8020a8c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8020a90:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8020a94:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8020a98:	f04f 0107 	mov.w	r1, #7
 8020a9c:	f362 4517 	bfi	r5, r2, #16, #8
 8020aa0:	fb11 c100 	smlabb	r1, r1, r0, ip
 8020aa4:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8020aa8:	9900      	ldr	r1, [sp, #0]
 8020aaa:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8020aae:	604d      	str	r5, [r1, #4]
 8020ab0:	f040 8089 	bne.w	8020bc6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8020ab4:	7020      	strb	r0, [r4, #0]
 8020ab6:	7063      	strb	r3, [r4, #1]
 8020ab8:	70a2      	strb	r2, [r4, #2]
 8020aba:	e7bc      	b.n	8020a36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8020abc:	2bfe      	cmp	r3, #254	@ 0xfe
 8020abe:	d12f      	bne.n	8020b20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8020ac0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8020ac4:	f108 0304 	add.w	r3, r8, #4
 8020ac8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020acc:	f04f 0c03 	mov.w	ip, #3
 8020ad0:	f898 1003 	ldrb.w	r1, [r8, #3]
 8020ad4:	b2c0      	uxtb	r0, r0
 8020ad6:	b2d2      	uxtb	r2, r2
 8020ad8:	9307      	str	r3, [sp, #28]
 8020ada:	b2c9      	uxtb	r1, r1
 8020adc:	f360 0507 	bfi	r5, r0, #0, #8
 8020ae0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8020ae4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020ae8:	f362 250f 	bfi	r5, r2, #8, #8
 8020aec:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8020af0:	f04f 0307 	mov.w	r3, #7
 8020af4:	f361 4517 	bfi	r5, r1, #16, #8
 8020af8:	fb13 c300 	smlabb	r3, r3, r0, ip
 8020afc:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8020b00:	9b00      	ldr	r3, [sp, #0]
 8020b02:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8020b06:	605d      	str	r5, [r3, #4]
 8020b08:	d15d      	bne.n	8020bc6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8020b0a:	7020      	strb	r0, [r4, #0]
 8020b0c:	7062      	strb	r2, [r4, #1]
 8020b0e:	70a1      	strb	r1, [r4, #2]
 8020b10:	e791      	b.n	8020a36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8020b12:	bf00      	nop
 8020b14:	240284e8 	.word	0x240284e8
 8020b18:	240284e2 	.word	0x240284e2
 8020b1c:	24000140 	.word	0x24000140
 8020b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020b24:	1c5a      	adds	r2, r3, #1
 8020b26:	b94b      	cbnz	r3, 8020b3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8020b28:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020b2c:	d14c      	bne.n	8020bc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8020b2e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8020b32:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020b36:	7025      	strb	r5, [r4, #0]
 8020b38:	7062      	strb	r2, [r4, #1]
 8020b3a:	e72b      	b.n	8020994 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8020b3c:	4296      	cmp	r6, r2
 8020b3e:	46b0      	mov	r8, r6
 8020b40:	bfa8      	it	ge
 8020b42:	4690      	movge	r8, r2
 8020b44:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8020b48:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020b4c:	eba6 0608 	sub.w	r6, r6, r8
 8020b50:	eba2 0908 	sub.w	r9, r2, r8
 8020b54:	9308      	str	r3, [sp, #32]
 8020b56:	b2eb      	uxtb	r3, r5
 8020b58:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b5a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8020b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020b60:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020b64:	930a      	str	r3, [sp, #40]	@ 0x28
 8020b66:	9b08      	ldr	r3, [sp, #32]
 8020b68:	d030      	beq.n	8020bcc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8020b6a:	18fb      	adds	r3, r7, r3
 8020b6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8020b6e:	dd15      	ble.n	8020b9c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8020b70:	4650      	mov	r0, sl
 8020b72:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8020b76:	f7e2 f97f 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 8020b7a:	2203      	movs	r2, #3
 8020b7c:	4651      	mov	r1, sl
 8020b7e:	465b      	mov	r3, fp
 8020b80:	4620      	mov	r0, r4
 8020b82:	443c      	add	r4, r7
 8020b84:	fb97 f2f2 	sdiv	r2, r7, r2
 8020b88:	f7e2 f9ba 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8020b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8020c84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8020b8e:	2700      	movs	r7, #0
 8020b90:	459a      	cmp	sl, r3
 8020b92:	bf0c      	ite	eq
 8020b94:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8020c90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8020b98:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8020c84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8020b9c:	eb0a 0307 	add.w	r3, sl, r7
 8020ba0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020ba2:	f1b8 0801 	subs.w	r8, r8, #1
 8020ba6:	f103 0303 	add.w	r3, r3, #3
 8020baa:	f803 2c03 	strb.w	r2, [r3, #-3]
 8020bae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020bb0:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020bb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020bb6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020bba:	d1f1      	bne.n	8020ba0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8020bbc:	9b08      	ldr	r3, [sp, #32]
 8020bbe:	441f      	add	r7, r3
 8020bc0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020bc4:	e6cb      	b.n	802095e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8020bc6:	2201      	movs	r2, #1
 8020bc8:	4690      	mov	r8, r2
 8020bca:	e7bb      	b.n	8020b44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8020bcc:	4423      	add	r3, r4
 8020bce:	42a3      	cmp	r3, r4
 8020bd0:	d9f6      	bls.n	8020bc0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8020bd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020bd4:	3403      	adds	r4, #3
 8020bd6:	f804 2c03 	strb.w	r2, [r4, #-3]
 8020bda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020bdc:	f804 2c02 	strb.w	r2, [r4, #-2]
 8020be0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020be2:	f804 2c01 	strb.w	r2, [r4, #-1]
 8020be6:	e7f2      	b.n	8020bce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8020be8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020bec:	d00e      	beq.n	8020c0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8020bee:	b16f      	cbz	r7, 8020c0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8020bf0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8020bf4:	4650      	mov	r0, sl
 8020bf6:	f7e2 f93f 	bl	8002e78 <_ZN8touchgfx5paint9flushLineEPmi>
 8020bfa:	2203      	movs	r2, #3
 8020bfc:	4620      	mov	r0, r4
 8020bfe:	443c      	add	r4, r7
 8020c00:	465b      	mov	r3, fp
 8020c02:	4651      	mov	r1, sl
 8020c04:	fb97 f2f2 	sdiv	r2, r7, r2
 8020c08:	f7e2 f97a 	bl	8002f00 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8020c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8020c88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8020c0e:	9a02      	ldr	r2, [sp, #8]
 8020c10:	881b      	ldrh	r3, [r3, #0]
 8020c12:	1a9b      	subs	r3, r3, r2
 8020c14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c18:	441c      	add	r4, r3
 8020c1a:	9b04      	ldr	r3, [sp, #16]
 8020c1c:	3301      	adds	r3, #1
 8020c1e:	9304      	str	r3, [sp, #16]
 8020c20:	9a04      	ldr	r2, [sp, #16]
 8020c22:	9b01      	ldr	r3, [sp, #4]
 8020c24:	4293      	cmp	r3, r2
 8020c26:	d11c      	bne.n	8020c62 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8020c28:	9b03      	ldr	r3, [sp, #12]
 8020c2a:	2500      	movs	r5, #0
 8020c2c:	9a03      	ldr	r2, [sp, #12]
 8020c2e:	1c5e      	adds	r6, r3, #1
 8020c30:	9b05      	ldr	r3, [sp, #20]
 8020c32:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8020c36:	4629      	mov	r1, r5
 8020c38:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8020c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8020c40:	9b06      	ldr	r3, [sp, #24]
 8020c42:	fa98 f888 	rev.w	r8, r8
 8020c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020c48:	4498      	add	r8, r3
 8020c4a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8020c4e:	1aff      	subs	r7, r7, r3
 8020c50:	f007 ff52 	bl	8028af8 <memset>
 8020c54:	b2bf      	uxth	r7, r7
 8020c56:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8020c5a:	f7e2 f903 	bl	8002e64 <_ZN8touchgfx5paint8tearDownEv>
 8020c5e:	46c1      	mov	r9, r8
 8020c60:	e5db      	b.n	802081a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8020c62:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8020c66:	9b02      	ldr	r3, [sp, #8]
 8020c68:	1aff      	subs	r7, r7, r3
 8020c6a:	eba7 0709 	sub.w	r7, r7, r9
 8020c6e:	b2bf      	uxth	r7, r7
 8020c70:	e7f3      	b.n	8020c5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8020c72:	4b06      	ldr	r3, [pc, #24]	@ (8020c8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8020c74:	6818      	ldr	r0, [r3, #0]
 8020c76:	6803      	ldr	r3, [r0, #0]
 8020c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c7a:	4798      	blx	r3
 8020c7c:	b013      	add	sp, #76	@ 0x4c
 8020c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c82:	bf00      	nop
 8020c84:	24000140 	.word	0x24000140
 8020c88:	240284e2 	.word	0x240284e2
 8020c8c:	240284e8 	.word	0x240284e8
 8020c90:	24000240 	.word	0x24000240

08020c94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c98:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8020c9c:	9c06      	ldr	r4, [sp, #24]
 8020c9e:	2800      	cmp	r0, #0
 8020ca0:	d06e      	beq.n	8020d80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020ca2:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8020ca6:	2d00      	cmp	r5, #0
 8020ca8:	dd6a      	ble.n	8020d80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020caa:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8020cae:	f1bc 0f00 	cmp.w	ip, #0
 8020cb2:	dd65      	ble.n	8020d80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020cb4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8020cb8:	28ff      	cmp	r0, #255	@ 0xff
 8020cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020cbe:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8020cc2:	fb02 3306 	mla	r3, r2, r6, r3
 8020cc6:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8020cca:	b2e4      	uxtb	r4, r4
 8020ccc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cd0:	4419      	add	r1, r3
 8020cd2:	fb02 f30c 	mul.w	r3, r2, ip
 8020cd6:	eba2 0205 	sub.w	r2, r2, r5
 8020cda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020cde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ce2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ce6:	440b      	add	r3, r1
 8020ce8:	d03e      	beq.n	8020d68 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8020cea:	fa1f fc80 	uxth.w	ip, r0
 8020cee:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8020cf2:	fb06 f60c 	mul.w	r6, r6, ip
 8020cf6:	b280      	uxth	r0, r0
 8020cf8:	fb07 f70c 	mul.w	r7, r7, ip
 8020cfc:	fb04 f40c 	mul.w	r4, r4, ip
 8020d00:	4299      	cmp	r1, r3
 8020d02:	d23d      	bcs.n	8020d80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020d04:	eb01 0c05 	add.w	ip, r1, r5
 8020d08:	458c      	cmp	ip, r1
 8020d0a:	f101 0e03 	add.w	lr, r1, #3
 8020d0e:	d928      	bls.n	8020d62 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8020d10:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020d14:	fb11 f100 	smulbb	r1, r1, r0
 8020d18:	4421      	add	r1, r4
 8020d1a:	b289      	uxth	r1, r1
 8020d1c:	f101 0801 	add.w	r8, r1, #1
 8020d20:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020d24:	1209      	asrs	r1, r1, #8
 8020d26:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020d2a:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8020d2e:	fb11 f100 	smulbb	r1, r1, r0
 8020d32:	4439      	add	r1, r7
 8020d34:	b289      	uxth	r1, r1
 8020d36:	f101 0801 	add.w	r8, r1, #1
 8020d3a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020d3e:	1209      	asrs	r1, r1, #8
 8020d40:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020d44:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020d48:	fb11 f100 	smulbb	r1, r1, r0
 8020d4c:	4431      	add	r1, r6
 8020d4e:	b289      	uxth	r1, r1
 8020d50:	f101 0801 	add.w	r8, r1, #1
 8020d54:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020d58:	1209      	asrs	r1, r1, #8
 8020d5a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8020d5e:	4671      	mov	r1, lr
 8020d60:	e7d2      	b.n	8020d08 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8020d62:	4411      	add	r1, r2
 8020d64:	e7cc      	b.n	8020d00 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8020d66:	4411      	add	r1, r2
 8020d68:	4299      	cmp	r1, r3
 8020d6a:	d209      	bcs.n	8020d80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8020d6c:	1948      	adds	r0, r1, r5
 8020d6e:	4281      	cmp	r1, r0
 8020d70:	d2f9      	bcs.n	8020d66 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8020d72:	700c      	strb	r4, [r1, #0]
 8020d74:	3103      	adds	r1, #3
 8020d76:	f801 7c02 	strb.w	r7, [r1, #-2]
 8020d7a:	f801 6c01 	strb.w	r6, [r1, #-1]
 8020d7e:	e7f6      	b.n	8020d6e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8020d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020d84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d88:	b093      	sub	sp, #76	@ 0x4c
 8020d8a:	4699      	mov	r9, r3
 8020d8c:	4617      	mov	r7, r2
 8020d8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020d92:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8020d96:	4604      	mov	r4, r0
 8020d98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020d9c:	a80c      	add	r0, sp, #48	@ 0x30
 8020d9e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8020da2:	460d      	mov	r5, r1
 8020da4:	4649      	mov	r1, r9
 8020da6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020daa:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020dae:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8020db2:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8020db6:	f7f1 f85b 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8020dba:	4639      	mov	r1, r7
 8020dbc:	a80c      	add	r0, sp, #48	@ 0x30
 8020dbe:	f7f1 f857 	bl	8011e70 <_ZN8touchgfx4RectaNERKS0_>
 8020dc2:	4b78      	ldr	r3, [pc, #480]	@ (8020fa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020dc4:	8818      	ldrh	r0, [r3, #0]
 8020dc6:	4b78      	ldr	r3, [pc, #480]	@ (8020fa8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8020dc8:	b202      	sxth	r2, r0
 8020dca:	8819      	ldrh	r1, [r3, #0]
 8020dcc:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8020dd0:	b20f      	sxth	r7, r1
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	da07      	bge.n	8020de6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8020dd6:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8020dda:	4463      	add	r3, ip
 8020ddc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8020de0:	2300      	movs	r3, #0
 8020de2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8020de6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8020dea:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8020dee:	1ad2      	subs	r2, r2, r3
 8020df0:	4594      	cmp	ip, r2
 8020df2:	bfc4      	itt	gt
 8020df4:	1ac2      	subgt	r2, r0, r3
 8020df6:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8020dfa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020dfe:	2a00      	cmp	r2, #0
 8020e00:	da07      	bge.n	8020e12 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8020e02:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8020e06:	4462      	add	r2, ip
 8020e08:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8020e0c:	2200      	movs	r2, #0
 8020e0e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020e12:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020e16:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8020e1a:	1abf      	subs	r7, r7, r2
 8020e1c:	45bc      	cmp	ip, r7
 8020e1e:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8020fb0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8020e22:	bfc8      	it	gt
 8020e24:	1a8f      	subgt	r7, r1, r2
 8020e26:	f89c c000 	ldrb.w	ip, [ip]
 8020e2a:	bfc8      	it	gt
 8020e2c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8020e30:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8020e34:	f1bc 0f00 	cmp.w	ip, #0
 8020e38:	d176      	bne.n	8020f28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8020e3a:	4287      	cmp	r7, r0
 8020e3c:	bf14      	ite	ne
 8020e3e:	2100      	movne	r1, #0
 8020e40:	2101      	moveq	r1, #1
 8020e42:	2f00      	cmp	r7, #0
 8020e44:	9107      	str	r1, [sp, #28]
 8020e46:	dd73      	ble.n	8020f30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8020e48:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8020e4c:	2900      	cmp	r1, #0
 8020e4e:	9104      	str	r1, [sp, #16]
 8020e50:	dd6e      	ble.n	8020f30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8020e52:	f8b9 1000 	ldrh.w	r1, [r9]
 8020e56:	a80e      	add	r0, sp, #56	@ 0x38
 8020e58:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8020e5c:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8020e60:	1a5b      	subs	r3, r3, r1
 8020e62:	a910      	add	r1, sp, #64	@ 0x40
 8020e64:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8020e68:	b21b      	sxth	r3, r3
 8020e6a:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8020e6e:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8020fb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8020e72:	9305      	str	r3, [sp, #20]
 8020e74:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8020e78:	1ad2      	subs	r2, r2, r3
 8020e7a:	b213      	sxth	r3, r2
 8020e7c:	9306      	str	r3, [sp, #24]
 8020e7e:	9b05      	ldr	r3, [sp, #20]
 8020e80:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8020e84:	9b06      	ldr	r3, [sp, #24]
 8020e86:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8020e8a:	9b04      	ldr	r3, [sp, #16]
 8020e8c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8020e90:	2300      	movs	r3, #0
 8020e92:	9310      	str	r3, [sp, #64]	@ 0x40
 8020e94:	f7f8 fb2e 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e98:	4640      	mov	r0, r8
 8020e9a:	f7f8 fae7 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e9e:	a810      	add	r0, sp, #64	@ 0x40
 8020ea0:	f7f8 fae4 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ea4:	4b41      	ldr	r3, [pc, #260]	@ (8020fac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8020ea6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8020eaa:	4628      	mov	r0, r5
 8020eac:	881b      	ldrh	r3, [r3, #0]
 8020eae:	9308      	str	r3, [sp, #32]
 8020eb0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020eb4:	b21b      	sxth	r3, r3
 8020eb6:	9303      	str	r3, [sp, #12]
 8020eb8:	682b      	ldr	r3, [r5, #0]
 8020eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020ebc:	4798      	blx	r3
 8020ebe:	9a03      	ldr	r2, [sp, #12]
 8020ec0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8020ec4:	4681      	mov	r9, r0
 8020ec6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8020eca:	fb13 f302 	smulbb	r3, r3, r2
 8020ece:	2203      	movs	r2, #3
 8020ed0:	f8da 0000 	ldr.w	r0, [sl]
 8020ed4:	fb15 3302 	smlabb	r3, r5, r2, r3
 8020ed8:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8020eda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020edc:	441d      	add	r5, r3
 8020ede:	6803      	ldr	r3, [r0, #0]
 8020ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020ee2:	4798      	blx	r3
 8020ee4:	9009      	str	r0, [sp, #36]	@ 0x24
 8020ee6:	f8da 0000 	ldr.w	r0, [sl]
 8020eea:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8020eee:	6803      	ldr	r3, [r0, #0]
 8020ef0:	910a      	str	r1, [sp, #40]	@ 0x28
 8020ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020ef4:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8020ef8:	4798      	blx	r3
 8020efa:	f010 0f01 	tst.w	r0, #1
 8020efe:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8020f02:	d01e      	beq.n	8020f42 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8020f04:	f8da 0000 	ldr.w	r0, [sl]
 8020f08:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8020f0c:	6803      	ldr	r3, [r0, #0]
 8020f0e:	9200      	str	r2, [sp, #0]
 8020f10:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8020f12:	462b      	mov	r3, r5
 8020f14:	e898 0006 	ldmia.w	r8, {r1, r2}
 8020f18:	47b0      	blx	r6
 8020f1a:	9b05      	ldr	r3, [sp, #20]
 8020f1c:	80a7      	strh	r7, [r4, #4]
 8020f1e:	8023      	strh	r3, [r4, #0]
 8020f20:	9b06      	ldr	r3, [sp, #24]
 8020f22:	8063      	strh	r3, [r4, #2]
 8020f24:	9b04      	ldr	r3, [sp, #16]
 8020f26:	e007      	b.n	8020f38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8020f28:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8020f2c:	4288      	cmp	r0, r1
 8020f2e:	e785      	b.n	8020e3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8020f30:	2300      	movs	r3, #0
 8020f32:	8023      	strh	r3, [r4, #0]
 8020f34:	8063      	strh	r3, [r4, #2]
 8020f36:	80a3      	strh	r3, [r4, #4]
 8020f38:	4620      	mov	r0, r4
 8020f3a:	80e3      	strh	r3, [r4, #6]
 8020f3c:	b013      	add	sp, #76	@ 0x4c
 8020f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f42:	fb09 f606 	mul.w	r6, r9, r6
 8020f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f48:	fb11 6602 	smlabb	r6, r1, r2, r6
 8020f4c:	9a07      	ldr	r2, [sp, #28]
 8020f4e:	4433      	add	r3, r6
 8020f50:	461e      	mov	r6, r3
 8020f52:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8020f56:	b16a      	cbz	r2, 8020f74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8020f58:	9a08      	ldr	r2, [sp, #32]
 8020f5a:	4593      	cmp	fp, r2
 8020f5c:	d10a      	bne.n	8020f74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8020f5e:	f8da 0000 	ldr.w	r0, [sl]
 8020f62:	fb09 f303 	mul.w	r3, r9, r3
 8020f66:	4629      	mov	r1, r5
 8020f68:	6802      	ldr	r2, [r0, #0]
 8020f6a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8020f6e:	4632      	mov	r2, r6
 8020f70:	47d0      	blx	sl
 8020f72:	e7d2      	b.n	8020f1a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8020f74:	9a03      	ldr	r2, [sp, #12]
 8020f76:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8020fb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8020f7a:	fb02 5803 	mla	r8, r2, r3, r5
 8020f7e:	4545      	cmp	r5, r8
 8020f80:	d2cb      	bcs.n	8020f1a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8020f82:	f8db 0000 	ldr.w	r0, [fp]
 8020f86:	4629      	mov	r1, r5
 8020f88:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8020f8c:	6802      	ldr	r2, [r0, #0]
 8020f8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f92:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8020f96:	4632      	mov	r2, r6
 8020f98:	47d0      	blx	sl
 8020f9a:	9b03      	ldr	r3, [sp, #12]
 8020f9c:	444e      	add	r6, r9
 8020f9e:	441d      	add	r5, r3
 8020fa0:	e7ed      	b.n	8020f7e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8020fa2:	bf00      	nop
 8020fa4:	240284dc 	.word	0x240284dc
 8020fa8:	240284de 	.word	0x240284de
 8020fac:	240284e2 	.word	0x240284e2
 8020fb0:	240284e0 	.word	0x240284e0
 8020fb4:	240284e8 	.word	0x240284e8

08020fb8 <_ZN8touchgfx8LCD24bppC1Ev>:
 8020fb8:	2200      	movs	r2, #0
 8020fba:	490e      	ldr	r1, [pc, #56]	@ (8020ff4 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8020fbc:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8020fc0:	6001      	str	r1, [r0, #0]
 8020fc2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8020fc6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8020fca:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8020fce:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8020fd2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8020fd6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8020fda:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8020fde:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8020fe2:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8020fe6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8020fea:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8020fee:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8020ff2:	4770      	bx	lr
 8020ff4:	0802d554 	.word	0x0802d554

08020ff8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ffc:	b091      	sub	sp, #68	@ 0x44
 8020ffe:	4607      	mov	r7, r0
 8021000:	4688      	mov	r8, r1
 8021002:	6810      	ldr	r0, [r2, #0]
 8021004:	6851      	ldr	r1, [r2, #4]
 8021006:	ac0c      	add	r4, sp, #48	@ 0x30
 8021008:	4616      	mov	r6, r2
 802100a:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 802100e:	4d64      	ldr	r5, [pc, #400]	@ (80211a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021010:	f8df a190 	ldr.w	sl, [pc, #400]	@ 80211a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8021014:	c403      	stmia	r4!, {r0, r1}
 8021016:	6818      	ldr	r0, [r3, #0]
 8021018:	ac0e      	add	r4, sp, #56	@ 0x38
 802101a:	6859      	ldr	r1, [r3, #4]
 802101c:	c403      	stmia	r4!, {r0, r1}
 802101e:	a80c      	add	r0, sp, #48	@ 0x30
 8021020:	f7f8 fa24 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021024:	4631      	mov	r1, r6
 8021026:	a80e      	add	r0, sp, #56	@ 0x38
 8021028:	f7f8 fa64 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802102c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8021030:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021034:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8021038:	6828      	ldr	r0, [r5, #0]
 802103a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802103e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8021042:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8021046:	440f      	add	r7, r1
 8021048:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802104c:	440a      	add	r2, r1
 802104e:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021052:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8021056:	4413      	add	r3, r2
 8021058:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802105c:	6803      	ldr	r3, [r0, #0]
 802105e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021060:	4798      	blx	r3
 8021062:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8021066:	6828      	ldr	r0, [r5, #0]
 8021068:	d01f      	beq.n	80210aa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 802106a:	2201      	movs	r2, #1
 802106c:	2500      	movs	r5, #0
 802106e:	6801      	ldr	r1, [r0, #0]
 8021070:	b2a4      	uxth	r4, r4
 8021072:	b2b6      	uxth	r6, r6
 8021074:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021078:	e9cd 2508 	strd	r2, r5, [sp, #32]
 802107c:	250b      	movs	r5, #11
 802107e:	9507      	str	r5, [sp, #28]
 8021080:	f8ba 5000 	ldrh.w	r5, [sl]
 8021084:	f8cd 9010 	str.w	r9, [sp, #16]
 8021088:	9602      	str	r6, [sp, #8]
 802108a:	9401      	str	r4, [sp, #4]
 802108c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8021090:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8021094:	9203      	str	r2, [sp, #12]
 8021096:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802109a:	9200      	str	r2, [sp, #0]
 802109c:	4642      	mov	r2, r8
 802109e:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80210a0:	4639      	mov	r1, r7
 80210a2:	47a0      	blx	r4
 80210a4:	b011      	add	sp, #68	@ 0x44
 80210a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210aa:	6803      	ldr	r3, [r0, #0]
 80210ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80210ae:	4798      	blx	r3
 80210b0:	f8ba 5000 	ldrh.w	r5, [sl]
 80210b4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80210b8:	f04f 0e04 	mov.w	lr, #4
 80210bc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80210c0:	436e      	muls	r6, r5
 80210c2:	fb05 2303 	mla	r3, r5, r3, r2
 80210c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80210ca:	1b2d      	subs	r5, r5, r4
 80210cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80210d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80210d4:	4418      	add	r0, r3
 80210d6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80210da:	1982      	adds	r2, r0, r6
 80210dc:	1b1b      	subs	r3, r3, r4
 80210de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80210e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80210e4:	4290      	cmp	r0, r2
 80210e6:	d254      	bcs.n	8021192 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 80210e8:	eb00 0a04 	add.w	sl, r0, r4
 80210ec:	4550      	cmp	r0, sl
 80210ee:	d24c      	bcs.n	802118a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 80210f0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80210f4:	fb1e e101 	smlabb	r1, lr, r1, lr
 80210f8:	eb08 0c01 	add.w	ip, r8, r1
 80210fc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021100:	b173      	cbz	r3, 8021120 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021102:	2bff      	cmp	r3, #255	@ 0xff
 8021104:	f818 b001 	ldrb.w	fp, [r8, r1]
 8021108:	d10c      	bne.n	8021124 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802110a:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802110e:	d109      	bne.n	8021124 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021110:	f880 b000 	strb.w	fp, [r0]
 8021114:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021118:	7043      	strb	r3, [r0, #1]
 802111a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802111e:	7083      	strb	r3, [r0, #2]
 8021120:	3003      	adds	r0, #3
 8021122:	e7e3      	b.n	80210ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8021124:	fb09 f103 	mul.w	r1, r9, r3
 8021128:	1c4b      	adds	r3, r1, #1
 802112a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802112e:	7801      	ldrb	r1, [r0, #0]
 8021130:	121b      	asrs	r3, r3, #8
 8021132:	b29e      	uxth	r6, r3
 8021134:	43db      	mvns	r3, r3
 8021136:	fb1b fb06 	smulbb	fp, fp, r6
 802113a:	b2db      	uxtb	r3, r3
 802113c:	fb01 b103 	mla	r1, r1, r3, fp
 8021140:	b289      	uxth	r1, r1
 8021142:	f101 0b01 	add.w	fp, r1, #1
 8021146:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 802114a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802114e:	fb1b fb03 	smulbb	fp, fp, r3
 8021152:	1209      	asrs	r1, r1, #8
 8021154:	7001      	strb	r1, [r0, #0]
 8021156:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802115a:	fb01 b106 	mla	r1, r1, r6, fp
 802115e:	b289      	uxth	r1, r1
 8021160:	f101 0b01 	add.w	fp, r1, #1
 8021164:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021168:	1209      	asrs	r1, r1, #8
 802116a:	7041      	strb	r1, [r0, #1]
 802116c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8021170:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021174:	fb1c f303 	smulbb	r3, ip, r3
 8021178:	fb01 3606 	mla	r6, r1, r6, r3
 802117c:	b2b6      	uxth	r6, r6
 802117e:	1c73      	adds	r3, r6, #1
 8021180:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021184:	1236      	asrs	r6, r6, #8
 8021186:	7086      	strb	r6, [r0, #2]
 8021188:	e7ca      	b.n	8021120 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802118a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802118c:	4428      	add	r0, r5
 802118e:	441f      	add	r7, r3
 8021190:	e7a8      	b.n	80210e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8021192:	4b03      	ldr	r3, [pc, #12]	@ (80211a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8021194:	6818      	ldr	r0, [r3, #0]
 8021196:	6803      	ldr	r3, [r0, #0]
 8021198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802119a:	4798      	blx	r3
 802119c:	e782      	b.n	80210a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802119e:	bf00      	nop
 80211a0:	240284e8 	.word	0x240284e8
 80211a4:	240284e2 	.word	0x240284e2

080211a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80211a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211ac:	b091      	sub	sp, #68	@ 0x44
 80211ae:	4680      	mov	r8, r0
 80211b0:	460e      	mov	r6, r1
 80211b2:	6810      	ldr	r0, [r2, #0]
 80211b4:	6851      	ldr	r1, [r2, #4]
 80211b6:	ad0c      	add	r5, sp, #48	@ 0x30
 80211b8:	4614      	mov	r4, r2
 80211ba:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 80211be:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8021358 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80211c2:	f8df a198 	ldr.w	sl, [pc, #408]	@ 802135c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80211c6:	c503      	stmia	r5!, {r0, r1}
 80211c8:	6818      	ldr	r0, [r3, #0]
 80211ca:	ad0e      	add	r5, sp, #56	@ 0x38
 80211cc:	6859      	ldr	r1, [r3, #4]
 80211ce:	c503      	stmia	r5!, {r0, r1}
 80211d0:	a80c      	add	r0, sp, #48	@ 0x30
 80211d2:	f7f8 f94b 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211d6:	4621      	mov	r1, r4
 80211d8:	a80e      	add	r0, sp, #56	@ 0x38
 80211da:	f7f8 f98b 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211de:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80211e2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80211e6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80211ea:	f8d9 0000 	ldr.w	r0, [r9]
 80211ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 80211f2:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 80211f6:	eb08 0401 	add.w	r4, r8, r1
 80211fa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80211fe:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8021202:	440a      	add	r2, r1
 8021204:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021208:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802120c:	4413      	add	r3, r2
 802120e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021212:	6803      	ldr	r3, [r0, #0]
 8021214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021216:	4798      	blx	r3
 8021218:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802121c:	f8d9 0000 	ldr.w	r0, [r9]
 8021220:	d022      	beq.n	8021268 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021222:	2200      	movs	r2, #0
 8021224:	f04f 0c01 	mov.w	ip, #1
 8021228:	6801      	ldr	r1, [r0, #0]
 802122a:	b2ad      	uxth	r5, r5
 802122c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021230:	e9cd c208 	strd	ip, r2, [sp, #32]
 8021234:	f04f 0c0b 	mov.w	ip, #11
 8021238:	f8cd c01c 	str.w	ip, [sp, #28]
 802123c:	f8ba c000 	ldrh.w	ip, [sl]
 8021240:	9704      	str	r7, [sp, #16]
 8021242:	9502      	str	r5, [sp, #8]
 8021244:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8021248:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802124c:	9203      	str	r2, [sp, #12]
 802124e:	fa1f f288 	uxth.w	r2, r8
 8021252:	9201      	str	r2, [sp, #4]
 8021254:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8021258:	9200      	str	r2, [sp, #0]
 802125a:	4632      	mov	r2, r6
 802125c:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 802125e:	4621      	mov	r1, r4
 8021260:	47a8      	blx	r5
 8021262:	b011      	add	sp, #68	@ 0x44
 8021264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021268:	6803      	ldr	r3, [r0, #0]
 802126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802126c:	4798      	blx	r3
 802126e:	f8ba 2000 	ldrh.w	r2, [sl]
 8021272:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021276:	f04f 0e03 	mov.w	lr, #3
 802127a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 802127e:	4355      	muls	r5, r2
 8021280:	fa1f fc87 	uxth.w	ip, r7
 8021284:	fb02 1303 	mla	r3, r2, r3, r1
 8021288:	eba2 0208 	sub.w	r2, r2, r8
 802128c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021290:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021294:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021298:	4418      	add	r0, r3
 802129a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802129c:	1943      	adds	r3, r0, r5
 802129e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80212a2:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 80212a6:	eba2 0208 	sub.w	r2, r2, r8
 80212aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80212ae:	b2ad      	uxth	r5, r5
 80212b0:	4298      	cmp	r0, r3
 80212b2:	d24a      	bcs.n	802134a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80212b4:	eb00 0908 	add.w	r9, r0, r8
 80212b8:	4621      	mov	r1, r4
 80212ba:	4548      	cmp	r0, r9
 80212bc:	460c      	mov	r4, r1
 80212be:	d240      	bcs.n	8021342 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80212c0:	f04f 0a04 	mov.w	sl, #4
 80212c4:	7824      	ldrb	r4, [r4, #0]
 80212c6:	2fff      	cmp	r7, #255	@ 0xff
 80212c8:	f101 0101 	add.w	r1, r1, #1
 80212cc:	fb1e a404 	smlabb	r4, lr, r4, sl
 80212d0:	eb06 0a04 	add.w	sl, r6, r4
 80212d4:	f816 b004 	ldrb.w	fp, [r6, r4]
 80212d8:	d02b      	beq.n	8021332 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80212da:	7804      	ldrb	r4, [r0, #0]
 80212dc:	fb14 f405 	smulbb	r4, r4, r5
 80212e0:	fb0b 440c 	mla	r4, fp, ip, r4
 80212e4:	b2a4      	uxth	r4, r4
 80212e6:	f104 0b01 	add.w	fp, r4, #1
 80212ea:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80212ee:	f890 b001 	ldrb.w	fp, [r0, #1]
 80212f2:	fb1b fb05 	smulbb	fp, fp, r5
 80212f6:	1224      	asrs	r4, r4, #8
 80212f8:	7004      	strb	r4, [r0, #0]
 80212fa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80212fe:	fb04 b40c 	mla	r4, r4, ip, fp
 8021302:	b2a4      	uxth	r4, r4
 8021304:	f104 0b01 	add.w	fp, r4, #1
 8021308:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 802130c:	1224      	asrs	r4, r4, #8
 802130e:	7044      	strb	r4, [r0, #1]
 8021310:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021314:	f890 a002 	ldrb.w	sl, [r0, #2]
 8021318:	fb1a fa05 	smulbb	sl, sl, r5
 802131c:	fb04 a40c 	mla	r4, r4, ip, sl
 8021320:	b2a4      	uxth	r4, r4
 8021322:	f104 0a01 	add.w	sl, r4, #1
 8021326:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802132a:	1224      	asrs	r4, r4, #8
 802132c:	7084      	strb	r4, [r0, #2]
 802132e:	3003      	adds	r0, #3
 8021330:	e7c3      	b.n	80212ba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8021332:	f880 b000 	strb.w	fp, [r0]
 8021336:	f89a 4001 	ldrb.w	r4, [sl, #1]
 802133a:	7044      	strb	r4, [r0, #1]
 802133c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8021340:	e7f4      	b.n	802132c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8021342:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021344:	4420      	add	r0, r4
 8021346:	188c      	adds	r4, r1, r2
 8021348:	e7b2      	b.n	80212b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 802134a:	4b03      	ldr	r3, [pc, #12]	@ (8021358 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802134c:	6818      	ldr	r0, [r3, #0]
 802134e:	6803      	ldr	r3, [r0, #0]
 8021350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021352:	4798      	blx	r3
 8021354:	e785      	b.n	8021262 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8021356:	bf00      	nop
 8021358:	240284e8 	.word	0x240284e8
 802135c:	240284e2 	.word	0x240284e2

08021360 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021360:	b4f0      	push	{r4, r5, r6, r7}
 8021362:	460c      	mov	r4, r1
 8021364:	4611      	mov	r1, r2
 8021366:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802136a:	461a      	mov	r2, r3
 802136c:	780f      	ldrb	r7, [r1, #0]
 802136e:	9b04      	ldr	r3, [sp, #16]
 8021370:	784e      	ldrb	r6, [r1, #1]
 8021372:	b11f      	cbz	r7, 802137c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8021374:	2f01      	cmp	r7, #1
 8021376:	d01d      	beq.n	80213b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8021378:	bcf0      	pop	{r4, r5, r6, r7}
 802137a:	4770      	bx	lr
 802137c:	2e03      	cmp	r6, #3
 802137e:	d8fb      	bhi.n	8021378 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8021380:	e8df f006 	tbb	[pc, r6]
 8021384:	16140702 	.word	0x16140702
 8021388:	9504      	str	r5, [sp, #16]
 802138a:	4620      	mov	r0, r4
 802138c:	bcf0      	pop	{r4, r5, r6, r7}
 802138e:	f7ff be33 	b.w	8020ff8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021392:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8021394:	2800      	cmp	r0, #0
 8021396:	d0ef      	beq.n	8021378 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8021398:	6806      	ldr	r6, [r0, #0]
 802139a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 802139e:	68f5      	ldr	r5, [r6, #12]
 80213a0:	4613      	mov	r3, r2
 80213a2:	46ac      	mov	ip, r5
 80213a4:	460a      	mov	r2, r1
 80213a6:	4621      	mov	r1, r4
 80213a8:	bcf0      	pop	{r4, r5, r6, r7}
 80213aa:	4760      	bx	ip
 80213ac:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80213ae:	e7f1      	b.n	8021394 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80213b0:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80213b2:	e7ef      	b.n	8021394 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80213b4:	2e03      	cmp	r6, #3
 80213b6:	d8df      	bhi.n	8021378 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80213b8:	e8df f006 	tbb	[pc, r6]
 80213bc:	110f0702 	.word	0x110f0702
 80213c0:	9504      	str	r5, [sp, #16]
 80213c2:	4620      	mov	r0, r4
 80213c4:	bcf0      	pop	{r4, r5, r6, r7}
 80213c6:	f7ff beef 	b.w	80211a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80213ca:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80213cc:	2800      	cmp	r0, #0
 80213ce:	d0d3      	beq.n	8021378 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80213d0:	6806      	ldr	r6, [r0, #0]
 80213d2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80213d6:	68b5      	ldr	r5, [r6, #8]
 80213d8:	e7e2      	b.n	80213a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80213da:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80213dc:	e7f6      	b.n	80213cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 80213de:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80213e0:	e7f4      	b.n	80213cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

080213e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80213e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80213e8:	4605      	mov	r5, r0
 80213ea:	b08f      	sub	sp, #60	@ 0x3c
 80213ec:	460c      	mov	r4, r1
 80213ee:	461f      	mov	r7, r3
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d052      	beq.n	802149a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80213f4:	6808      	ldr	r0, [r1, #0]
 80213f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80213f8:	6849      	ldr	r1, [r1, #4]
 80213fa:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 80215c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80213fe:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 80215c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8021402:	c303      	stmia	r3!, {r0, r1}
 8021404:	6810      	ldr	r0, [r2, #0]
 8021406:	ab0c      	add	r3, sp, #48	@ 0x30
 8021408:	6851      	ldr	r1, [r2, #4]
 802140a:	c303      	stmia	r3!, {r0, r1}
 802140c:	a80a      	add	r0, sp, #40	@ 0x28
 802140e:	f7f8 f82d 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021412:	4621      	mov	r1, r4
 8021414:	a80c      	add	r0, sp, #48	@ 0x30
 8021416:	f7f8 f86d 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802141a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802141e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021422:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8021426:	f8d8 0000 	ldr.w	r0, [r8]
 802142a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802142e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8021432:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8021436:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 802143a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802143e:	440a      	add	r2, r1
 8021440:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021444:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021448:	4413      	add	r3, r2
 802144a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 802144e:	6803      	ldr	r3, [r0, #0]
 8021450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021452:	4798      	blx	r3
 8021454:	2fff      	cmp	r7, #255	@ 0xff
 8021456:	d023      	beq.n	80214a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8021458:	f010 0f04 	tst.w	r0, #4
 802145c:	f8d8 0000 	ldr.w	r0, [r8]
 8021460:	d021      	beq.n	80214a6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8021462:	2100      	movs	r1, #0
 8021464:	f04f 0e01 	mov.w	lr, #1
 8021468:	f8d0 c000 	ldr.w	ip, [r0]
 802146c:	b2a4      	uxth	r4, r4
 802146e:	9106      	str	r1, [sp, #24]
 8021470:	b2b6      	uxth	r6, r6
 8021472:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8021476:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 802147a:	e9cd e107 	strd	lr, r1, [sp, #28]
 802147e:	f8b9 e000 	ldrh.w	lr, [r9]
 8021482:	9703      	str	r7, [sp, #12]
 8021484:	9401      	str	r4, [sp, #4]
 8021486:	9600      	str	r6, [sp, #0]
 8021488:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 802148c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8021490:	9102      	str	r1, [sp, #8]
 8021492:	4629      	mov	r1, r5
 8021494:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8021498:	47a0      	blx	r4
 802149a:	b00f      	add	sp, #60	@ 0x3c
 802149c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80214a0:	f010 0f01 	tst.w	r0, #1
 80214a4:	e7da      	b.n	802145c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80214a6:	6803      	ldr	r3, [r0, #0]
 80214a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80214aa:	4798      	blx	r3
 80214ac:	f8b9 1000 	ldrh.w	r1, [r9]
 80214b0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80214b4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80214b8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80214bc:	434c      	muls	r4, r1
 80214be:	2fff      	cmp	r7, #255	@ 0xff
 80214c0:	fb01 2303 	mla	r3, r1, r3, r2
 80214c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80214c8:	eba1 0106 	sub.w	r1, r1, r6
 80214cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80214d4:	4418      	add	r0, r3
 80214d6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80214da:	eba3 0606 	sub.w	r6, r3, r6
 80214de:	4404      	add	r4, r0
 80214e0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80214e4:	d04a      	beq.n	802157c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80214e6:	43fa      	mvns	r2, r7
 80214e8:	b2bb      	uxth	r3, r7
 80214ea:	b2d7      	uxtb	r7, r2
 80214ec:	42a0      	cmp	r0, r4
 80214ee:	d263      	bcs.n	80215b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80214f0:	eb00 0e0c 	add.w	lr, r0, ip
 80214f4:	4586      	cmp	lr, r0
 80214f6:	f100 0803 	add.w	r8, r0, #3
 80214fa:	d93a      	bls.n	8021572 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80214fc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8021500:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8021504:	00d0      	lsls	r0, r2, #3
 8021506:	fb19 f907 	smulbb	r9, r9, r7
 802150a:	b2c0      	uxtb	r0, r0
 802150c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8021510:	fb00 9003 	mla	r0, r0, r3, r9
 8021514:	b280      	uxth	r0, r0
 8021516:	f100 0901 	add.w	r9, r0, #1
 802151a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802151e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8021522:	fb19 f907 	smulbb	r9, r9, r7
 8021526:	1200      	asrs	r0, r0, #8
 8021528:	f808 0c03 	strb.w	r0, [r8, #-3]
 802152c:	10d0      	asrs	r0, r2, #3
 802152e:	1212      	asrs	r2, r2, #8
 8021530:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8021534:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021538:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802153c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021540:	fb00 9003 	mla	r0, r0, r3, r9
 8021544:	b280      	uxth	r0, r0
 8021546:	f100 0901 	add.w	r9, r0, #1
 802154a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802154e:	1200      	asrs	r0, r0, #8
 8021550:	f808 0c02 	strb.w	r0, [r8, #-2]
 8021554:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8021558:	fb10 f007 	smulbb	r0, r0, r7
 802155c:	fb02 0203 	mla	r2, r2, r3, r0
 8021560:	b292      	uxth	r2, r2
 8021562:	1c50      	adds	r0, r2, #1
 8021564:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021568:	4640      	mov	r0, r8
 802156a:	1212      	asrs	r2, r2, #8
 802156c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8021570:	e7c0      	b.n	80214f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8021572:	4408      	add	r0, r1
 8021574:	4435      	add	r5, r6
 8021576:	e7b9      	b.n	80214ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8021578:	4408      	add	r0, r1
 802157a:	4435      	add	r5, r6
 802157c:	42a0      	cmp	r0, r4
 802157e:	d21b      	bcs.n	80215b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8021580:	eb00 070c 	add.w	r7, r0, ip
 8021584:	42b8      	cmp	r0, r7
 8021586:	d2f7      	bcs.n	8021578 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8021588:	f835 3b02 	ldrh.w	r3, [r5], #2
 802158c:	3003      	adds	r0, #3
 802158e:	00da      	lsls	r2, r3, #3
 8021590:	b2d2      	uxtb	r2, r2
 8021592:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021596:	f800 2c03 	strb.w	r2, [r0, #-3]
 802159a:	10da      	asrs	r2, r3, #3
 802159c:	121b      	asrs	r3, r3, #8
 802159e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80215a2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80215a6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80215aa:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80215ae:	f800 2c02 	strb.w	r2, [r0, #-2]
 80215b2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80215b6:	e7e5      	b.n	8021584 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80215b8:	4b02      	ldr	r3, [pc, #8]	@ (80215c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80215ba:	6818      	ldr	r0, [r3, #0]
 80215bc:	6803      	ldr	r3, [r0, #0]
 80215be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80215c0:	4798      	blx	r3
 80215c2:	e76a      	b.n	802149a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80215c4:	240284e8 	.word	0x240284e8
 80215c8:	240284e2 	.word	0x240284e2

080215cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80215cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80215d0:	b08a      	sub	sp, #40	@ 0x28
 80215d2:	460d      	mov	r5, r1
 80215d4:	4604      	mov	r4, r0
 80215d6:	461e      	mov	r6, r3
 80215d8:	6808      	ldr	r0, [r1, #0]
 80215da:	ab06      	add	r3, sp, #24
 80215dc:	6849      	ldr	r1, [r1, #4]
 80215de:	4f5d      	ldr	r7, [pc, #372]	@ (8021754 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80215e0:	c303      	stmia	r3!, {r0, r1}
 80215e2:	6810      	ldr	r0, [r2, #0]
 80215e4:	ab08      	add	r3, sp, #32
 80215e6:	6851      	ldr	r1, [r2, #4]
 80215e8:	c303      	stmia	r3!, {r0, r1}
 80215ea:	a806      	add	r0, sp, #24
 80215ec:	f7f7 ff3e 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215f0:	4629      	mov	r1, r5
 80215f2:	a808      	add	r0, sp, #32
 80215f4:	f7f7 ff7e 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215f8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80215fc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8021600:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021604:	6838      	ldr	r0, [r7, #0]
 8021606:	fb11 2103 	smlabb	r1, r1, r3, r2
 802160a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802160e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8021612:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021616:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802161a:	440a      	add	r2, r1
 802161c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021620:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021624:	4413      	add	r3, r2
 8021626:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 802162a:	6803      	ldr	r3, [r0, #0]
 802162c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802162e:	4798      	blx	r3
 8021630:	2eff      	cmp	r6, #255	@ 0xff
 8021632:	d119      	bne.n	8021668 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8021634:	f010 0f20 	tst.w	r0, #32
 8021638:	6838      	ldr	r0, [r7, #0]
 802163a:	d018      	beq.n	802166e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 802163c:	b2ad      	uxth	r5, r5
 802163e:	2700      	movs	r7, #0
 8021640:	6801      	ldr	r1, [r0, #0]
 8021642:	9501      	str	r5, [sp, #4]
 8021644:	fa1f f588 	uxth.w	r5, r8
 8021648:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802164c:	9500      	str	r5, [sp, #0]
 802164e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021652:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8021656:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 802165a:	9602      	str	r6, [sp, #8]
 802165c:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 802165e:	4621      	mov	r1, r4
 8021660:	47a8      	blx	r5
 8021662:	b00a      	add	sp, #40	@ 0x28
 8021664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021668:	f010 0f40 	tst.w	r0, #64	@ 0x40
 802166c:	e7e4      	b.n	8021638 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 802166e:	6803      	ldr	r3, [r0, #0]
 8021670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021672:	4798      	blx	r3
 8021674:	4b38      	ldr	r3, [pc, #224]	@ (8021758 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8021676:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802167a:	f8b3 c000 	ldrh.w	ip, [r3]
 802167e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8021682:	fb0c f505 	mul.w	r5, ip, r5
 8021686:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 802168a:	fb0c 2303 	mla	r3, ip, r3, r2
 802168e:	ebac 0c08 	sub.w	ip, ip, r8
 8021692:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021696:	ebae 0e08 	sub.w	lr, lr, r8
 802169a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802169e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80216a2:	4418      	add	r0, r3
 80216a4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80216a8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80216ac:	4405      	add	r5, r0
 80216ae:	42a8      	cmp	r0, r5
 80216b0:	d24a      	bcs.n	8021748 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80216b2:	eb00 0803 	add.w	r8, r0, r3
 80216b6:	4540      	cmp	r0, r8
 80216b8:	d243      	bcs.n	8021742 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80216ba:	78e2      	ldrb	r2, [r4, #3]
 80216bc:	b15a      	cbz	r2, 80216d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80216be:	2aff      	cmp	r2, #255	@ 0xff
 80216c0:	f894 9000 	ldrb.w	r9, [r4]
 80216c4:	d10a      	bne.n	80216dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80216c6:	2eff      	cmp	r6, #255	@ 0xff
 80216c8:	d108      	bne.n	80216dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80216ca:	f880 9000 	strb.w	r9, [r0]
 80216ce:	7862      	ldrb	r2, [r4, #1]
 80216d0:	7042      	strb	r2, [r0, #1]
 80216d2:	78a2      	ldrb	r2, [r4, #2]
 80216d4:	7082      	strb	r2, [r0, #2]
 80216d6:	3003      	adds	r0, #3
 80216d8:	3404      	adds	r4, #4
 80216da:	e7ec      	b.n	80216b6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80216dc:	4372      	muls	r2, r6
 80216de:	1c51      	adds	r1, r2, #1
 80216e0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80216e4:	1209      	asrs	r1, r1, #8
 80216e6:	fa1f fa81 	uxth.w	sl, r1
 80216ea:	43c9      	mvns	r1, r1
 80216ec:	fb19 f90a 	smulbb	r9, r9, sl
 80216f0:	b2ca      	uxtb	r2, r1
 80216f2:	7801      	ldrb	r1, [r0, #0]
 80216f4:	fb01 9902 	mla	r9, r1, r2, r9
 80216f8:	fa1f f989 	uxth.w	r9, r9
 80216fc:	f109 0101 	add.w	r1, r9, #1
 8021700:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8021704:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021708:	f880 9000 	strb.w	r9, [r0]
 802170c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8021710:	7861      	ldrb	r1, [r4, #1]
 8021712:	fb19 f902 	smulbb	r9, r9, r2
 8021716:	fb01 910a 	mla	r1, r1, sl, r9
 802171a:	b289      	uxth	r1, r1
 802171c:	f101 0901 	add.w	r9, r1, #1
 8021720:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8021724:	1209      	asrs	r1, r1, #8
 8021726:	7041      	strb	r1, [r0, #1]
 8021728:	7881      	ldrb	r1, [r0, #2]
 802172a:	f894 9002 	ldrb.w	r9, [r4, #2]
 802172e:	fb11 f202 	smulbb	r2, r1, r2
 8021732:	fb09 220a 	mla	r2, r9, sl, r2
 8021736:	b292      	uxth	r2, r2
 8021738:	1c51      	adds	r1, r2, #1
 802173a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802173e:	1212      	asrs	r2, r2, #8
 8021740:	e7c8      	b.n	80216d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8021742:	4460      	add	r0, ip
 8021744:	4474      	add	r4, lr
 8021746:	e7b2      	b.n	80216ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8021748:	6838      	ldr	r0, [r7, #0]
 802174a:	6803      	ldr	r3, [r0, #0]
 802174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802174e:	4798      	blx	r3
 8021750:	e787      	b.n	8021662 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8021752:	bf00      	nop
 8021754:	240284e8 	.word	0x240284e8
 8021758:	240284e2 	.word	0x240284e2

0802175c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802175c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021760:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8021764:	4607      	mov	r7, r0
 8021766:	460c      	mov	r4, r1
 8021768:	4692      	mov	sl, r2
 802176a:	4699      	mov	r9, r3
 802176c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802176e:	b335      	cbz	r5, 80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021770:	4608      	mov	r0, r1
 8021772:	f7fb fd93 	bl	801d29c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021776:	4680      	mov	r8, r0
 8021778:	4620      	mov	r0, r4
 802177a:	f7fb fdc3 	bl	801d304 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802177e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021782:	4620      	mov	r0, r4
 8021784:	f8ad a008 	strh.w	sl, [sp, #8]
 8021788:	f8ad 900a 	strh.w	r9, [sp, #10]
 802178c:	f8ad 800c 	strh.w	r8, [sp, #12]
 8021790:	f7fb fefa 	bl	801d588 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021794:	2810      	cmp	r0, #16
 8021796:	d812      	bhi.n	80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021798:	e8df f000 	tbb	[pc, r0]
 802179c:	11092d24 	.word	0x11092d24
 80217a0:	11111111 	.word	0x11111111
 80217a4:	14111111 	.word	0x14111111
 80217a8:	4c111111 	.word	0x4c111111
 80217ac:	3c          	.byte	0x3c
 80217ad:	00          	.byte	0x00
 80217ae:	4620      	mov	r0, r4
 80217b0:	f7fb fe66 	bl	801d480 <_ZNK8touchgfx6Bitmap7getDataEv>
 80217b4:	462b      	mov	r3, r5
 80217b6:	4632      	mov	r2, r6
 80217b8:	a902      	add	r1, sp, #8
 80217ba:	f7ff ff07 	bl	80215cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80217be:	b004      	add	sp, #16
 80217c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217c4:	4620      	mov	r0, r4
 80217c6:	f7fb fe5b 	bl	801d480 <_ZNK8touchgfx6Bitmap7getDataEv>
 80217ca:	4680      	mov	r8, r0
 80217cc:	4620      	mov	r0, r4
 80217ce:	f7fb fe87 	bl	801d4e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80217d2:	ab02      	add	r3, sp, #8
 80217d4:	4602      	mov	r2, r0
 80217d6:	4641      	mov	r1, r8
 80217d8:	4638      	mov	r0, r7
 80217da:	e9cd 6500 	strd	r6, r5, [sp]
 80217de:	f7ff fdbf 	bl	8021360 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80217e2:	e7ec      	b.n	80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80217e4:	4620      	mov	r0, r4
 80217e6:	f7fb fe4b 	bl	801d480 <_ZNK8touchgfx6Bitmap7getDataEv>
 80217ea:	462b      	mov	r3, r5
 80217ec:	4632      	mov	r2, r6
 80217ee:	a902      	add	r1, sp, #8
 80217f0:	f7ff fdf8 	bl	80213e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80217f4:	e7e3      	b.n	80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80217f6:	683b      	ldr	r3, [r7, #0]
 80217f8:	4620      	mov	r0, r4
 80217fa:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80217fe:	f7fb fe3f 	bl	801d480 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021802:	2300      	movs	r3, #0
 8021804:	4601      	mov	r1, r0
 8021806:	aa02      	add	r2, sp, #8
 8021808:	4638      	mov	r0, r7
 802180a:	e9cd 5300 	strd	r5, r3, [sp]
 802180e:	4633      	mov	r3, r6
 8021810:	47c0      	blx	r8
 8021812:	e7d4      	b.n	80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021814:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8021816:	2f00      	cmp	r7, #0
 8021818:	d0d1      	beq.n	80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802181a:	683b      	ldr	r3, [r7, #0]
 802181c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8021820:	4620      	mov	r0, r4
 8021822:	f7fb fe2d 	bl	801d480 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021826:	9500      	str	r5, [sp, #0]
 8021828:	4601      	mov	r1, r0
 802182a:	4633      	mov	r3, r6
 802182c:	aa02      	add	r2, sp, #8
 802182e:	4638      	mov	r0, r7
 8021830:	47c0      	blx	r8
 8021832:	e7c4      	b.n	80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8021834:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8021836:	2f00      	cmp	r7, #0
 8021838:	d0c1      	beq.n	80217be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 802183a:	683b      	ldr	r3, [r7, #0]
 802183c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8021840:	e7ee      	b.n	8021820 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08021842 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021842:	b4f0      	push	{r4, r5, r6, r7}
 8021844:	4616      	mov	r6, r2
 8021846:	461c      	mov	r4, r3
 8021848:	460d      	mov	r5, r1
 802184a:	9a04      	ldr	r2, [sp, #16]
 802184c:	2e01      	cmp	r6, #1
 802184e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021852:	d00e      	beq.n	8021872 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8021854:	d303      	bcc.n	802185e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8021856:	2e02      	cmp	r6, #2
 8021858:	d006      	beq.n	8021868 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 802185a:	bcf0      	pop	{r4, r5, r6, r7}
 802185c:	4770      	bx	lr
 802185e:	4621      	mov	r1, r4
 8021860:	4628      	mov	r0, r5
 8021862:	bcf0      	pop	{r4, r5, r6, r7}
 8021864:	f7ff bdbe 	b.w	80213e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8021868:	4621      	mov	r1, r4
 802186a:	4628      	mov	r0, r5
 802186c:	bcf0      	pop	{r4, r5, r6, r7}
 802186e:	f7ff bead 	b.w	80215cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021872:	6805      	ldr	r5, [r0, #0]
 8021874:	2600      	movs	r6, #0
 8021876:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802187a:	68ed      	ldr	r5, [r5, #12]
 802187c:	4613      	mov	r3, r2
 802187e:	4622      	mov	r2, r4
 8021880:	46ac      	mov	ip, r5
 8021882:	bcf0      	pop	{r4, r5, r6, r7}
 8021884:	4760      	bx	ip
	...

08021888 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8021888:	b160      	cbz	r0, 80218a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 802188a:	2903      	cmp	r1, #3
 802188c:	d818      	bhi.n	80218c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 802188e:	e8df f001 	tbb	[pc, r1]
 8021892:	1902      	.short	0x1902
 8021894:	1b06      	.short	0x1b06
 8021896:	4b0e      	ldr	r3, [pc, #56]	@ (80218d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8021898:	8818      	ldrh	r0, [r3, #0]
 802189a:	4240      	negs	r0, r0
 802189c:	4770      	bx	lr
 802189e:	4b0c      	ldr	r3, [pc, #48]	@ (80218d0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80218a0:	8818      	ldrh	r0, [r3, #0]
 80218a2:	4770      	bx	lr
 80218a4:	2903      	cmp	r1, #3
 80218a6:	d80b      	bhi.n	80218c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80218a8:	a301      	add	r3, pc, #4	@ (adr r3, 80218b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80218aa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80218ae:	bf00      	nop
 80218b0:	080218c5 	.word	0x080218c5
 80218b4:	0802189f 	.word	0x0802189f
 80218b8:	080218c9 	.word	0x080218c9
 80218bc:	08021897 	.word	0x08021897
 80218c0:	2000      	movs	r0, #0
 80218c2:	4770      	bx	lr
 80218c4:	2001      	movs	r0, #1
 80218c6:	4770      	bx	lr
 80218c8:	f04f 30ff 	mov.w	r0, #4294967295
 80218cc:	4770      	bx	lr
 80218ce:	bf00      	nop
 80218d0:	240284e2 	.word	0x240284e2

080218d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80218d4:	b160      	cbz	r0, 80218f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80218d6:	2903      	cmp	r1, #3
 80218d8:	d818      	bhi.n	802190c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80218da:	e8df f001 	tbb	[pc, r1]
 80218de:	0219      	.short	0x0219
 80218e0:	051b      	.short	0x051b
 80218e2:	4b0e      	ldr	r3, [pc, #56]	@ (802191c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80218e4:	8818      	ldrh	r0, [r3, #0]
 80218e6:	4770      	bx	lr
 80218e8:	4b0c      	ldr	r3, [pc, #48]	@ (802191c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80218ea:	8818      	ldrh	r0, [r3, #0]
 80218ec:	4240      	negs	r0, r0
 80218ee:	4770      	bx	lr
 80218f0:	2903      	cmp	r1, #3
 80218f2:	d80b      	bhi.n	802190c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80218f4:	a301      	add	r3, pc, #4	@ (adr r3, 80218fc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 80218f6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80218fa:	bf00      	nop
 80218fc:	080218e3 	.word	0x080218e3
 8021900:	08021915 	.word	0x08021915
 8021904:	080218e9 	.word	0x080218e9
 8021908:	08021911 	.word	0x08021911
 802190c:	2000      	movs	r0, #0
 802190e:	4770      	bx	lr
 8021910:	2001      	movs	r0, #1
 8021912:	4770      	bx	lr
 8021914:	f04f 30ff 	mov.w	r0, #4294967295
 8021918:	4770      	bx	lr
 802191a:	bf00      	nop
 802191c:	240284e2 	.word	0x240284e2

08021920 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021924:	b097      	sub	sp, #92	@ 0x5c
 8021926:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021928:	a912      	add	r1, sp, #72	@ 0x48
 802192a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 802192e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8021932:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8021936:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 802193a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 802193e:	e881 000c 	stmia.w	r1, {r2, r3}
 8021942:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8021946:	930a      	str	r3, [sp, #40]	@ 0x28
 8021948:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 802194c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8021950:	9311      	str	r3, [sp, #68]	@ 0x44
 8021952:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8021956:	798d      	ldrb	r5, [r1, #6]
 8021958:	930c      	str	r3, [sp, #48]	@ 0x30
 802195a:	7b4b      	ldrb	r3, [r1, #13]
 802195c:	0158      	lsls	r0, r3, #5
 802195e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8021962:	4328      	orrs	r0, r5
 8021964:	9009      	str	r0, [sp, #36]	@ 0x24
 8021966:	f000 817c 	beq.w	8021c62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802196a:	011b      	lsls	r3, r3, #4
 802196c:	79c8      	ldrb	r0, [r1, #7]
 802196e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021972:	4303      	orrs	r3, r0
 8021974:	930e      	str	r3, [sp, #56]	@ 0x38
 8021976:	f000 8174 	beq.w	8021c62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 802197a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802197e:	b29b      	uxth	r3, r3
 8021980:	2f00      	cmp	r7, #0
 8021982:	f000 8116 	beq.w	8021bb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8021986:	1aff      	subs	r7, r7, r3
 8021988:	b2bf      	uxth	r7, r7
 802198a:	043b      	lsls	r3, r7, #16
 802198c:	d502      	bpl.n	8021994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802198e:	1bf6      	subs	r6, r6, r7
 8021990:	2700      	movs	r7, #0
 8021992:	b236      	sxth	r6, r6
 8021994:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021998:	a812      	add	r0, sp, #72	@ 0x48
 802199a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802199e:	428e      	cmp	r6, r1
 80219a0:	b28b      	uxth	r3, r1
 80219a2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80219a6:	bfbf      	itttt	lt
 80219a8:	18ff      	addlt	r7, r7, r3
 80219aa:	1bbe      	sublt	r6, r7, r6
 80219ac:	b2b7      	uxthlt	r7, r6
 80219ae:	460e      	movlt	r6, r1
 80219b0:	8891      	ldrh	r1, [r2, #4]
 80219b2:	440b      	add	r3, r1
 80219b4:	4631      	mov	r1, r6
 80219b6:	b21b      	sxth	r3, r3
 80219b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80219ba:	88d3      	ldrh	r3, [r2, #6]
 80219bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80219be:	449a      	add	sl, r3
 80219c0:	fa0f f38a 	sxth.w	r3, sl
 80219c4:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80219c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80219ca:	4bb5      	ldr	r3, [pc, #724]	@ (8021ca0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80219cc:	f893 b000 	ldrb.w	fp, [r3]
 80219d0:	f10b 3cff 	add.w	ip, fp, #4294967295
 80219d4:	f1dc 0300 	rsbs	r3, ip, #0
 80219d8:	eb43 030c 	adc.w	r3, r3, ip
 80219dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80219de:	464b      	mov	r3, r9
 80219e0:	f7f7 fbb9 	bl	8019156 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80219e4:	4631      	mov	r1, r6
 80219e6:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80219ea:	464b      	mov	r3, r9
 80219ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80219ee:	a812      	add	r0, sp, #72	@ 0x48
 80219f0:	f7f7 fbce 	bl	8019190 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80219f4:	a916      	add	r1, sp, #88	@ 0x58
 80219f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80219fa:	a815      	add	r0, sp, #84	@ 0x54
 80219fc:	f7f7 fcf4 	bl	80193e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021a00:	f1b9 0f00 	cmp.w	r9, #0
 8021a04:	f040 80d8 	bne.w	8021bb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8021a08:	f1bb 0f01 	cmp.w	fp, #1
 8021a0c:	f040 80dc 	bne.w	8021bc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8021a10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021a12:	b153      	cbz	r3, 8021a2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8021a14:	2508      	movs	r5, #8
 8021a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021a18:	fb95 f3f8 	sdiv	r3, r5, r8
 8021a1c:	1e5d      	subs	r5, r3, #1
 8021a1e:	4415      	add	r5, r2
 8021a20:	fb95 f5f3 	sdiv	r5, r5, r3
 8021a24:	fb15 f503 	smulbb	r5, r5, r3
 8021a28:	b2ad      	uxth	r5, r5
 8021a2a:	b907      	cbnz	r7, 8021a2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8021a2c:	b16c      	cbz	r4, 8021a4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8021a2e:	fb04 7305 	mla	r3, r4, r5, r7
 8021a32:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021a34:	ebaa 0a04 	sub.w	sl, sl, r4
 8021a38:	fb08 f303 	mul.w	r3, r8, r3
 8021a3c:	fa1f fa8a 	uxth.w	sl, sl
 8021a40:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021a44:	f003 0407 	and.w	r4, r3, #7
 8021a48:	9226      	str	r2, [sp, #152]	@ 0x98
 8021a4a:	4649      	mov	r1, r9
 8021a4c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021a4e:	f7ff ff1b 	bl	8021888 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8021a52:	4683      	mov	fp, r0
 8021a54:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021a56:	f7ff ff3d 	bl	80218d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8021a5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021a5e:	4681      	mov	r9, r0
 8021a60:	1a9b      	subs	r3, r3, r2
 8021a62:	459a      	cmp	sl, r3
 8021a64:	bfa8      	it	ge
 8021a66:	469a      	movge	sl, r3
 8021a68:	f1ba 0f00 	cmp.w	sl, #0
 8021a6c:	f340 80f9 	ble.w	8021c62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021a70:	1bf6      	subs	r6, r6, r7
 8021a72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021a74:	1b9e      	subs	r6, r3, r6
 8021a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a78:	429e      	cmp	r6, r3
 8021a7a:	bfd4      	ite	le
 8021a7c:	ebc7 0706 	rsble	r7, r7, r6
 8021a80:	ebc7 0703 	rsbgt	r7, r7, r3
 8021a84:	2f00      	cmp	r7, #0
 8021a86:	f340 80ec 	ble.w	8021c62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021a8a:	1bed      	subs	r5, r5, r7
 8021a8c:	fb08 f305 	mul.w	r3, r8, r5
 8021a90:	930d      	str	r3, [sp, #52]	@ 0x34
 8021a92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021a94:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021a98:	930e      	str	r3, [sp, #56]	@ 0x38
 8021a9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021a9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021aa0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021aa2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021aa4:	b2db      	uxtb	r3, r3
 8021aa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8021aa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	f040 80de 	bne.w	8021c6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8021ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8021ca4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8021ab2:	6818      	ldr	r0, [r3, #0]
 8021ab4:	6803      	ldr	r3, [r0, #0]
 8021ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ab8:	4798      	blx	r3
 8021aba:	2301      	movs	r3, #1
 8021abc:	4a7a      	ldr	r2, [pc, #488]	@ (8021ca8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8021abe:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8021ac2:	fb07 9b1b 	mls	fp, r7, fp, r9
 8021ac6:	fa03 f308 	lsl.w	r3, r3, r8
 8021aca:	8811      	ldrh	r1, [r2, #0]
 8021acc:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8021ad0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8021ad4:	3b01      	subs	r3, #1
 8021ad6:	fb06 bb07 	mla	fp, r6, r7, fp
 8021ada:	b2db      	uxtb	r3, r3
 8021adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8021ade:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8021ae2:	fb01 2303 	mla	r3, r1, r3, r2
 8021ae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021aea:	18c3      	adds	r3, r0, r3
 8021aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8021aee:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021af0:	781a      	ldrb	r2, [r3, #0]
 8021af2:	4122      	asrs	r2, r4
 8021af4:	b2d2      	uxtb	r2, r2
 8021af6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8021afa:	f0c0 80d7 	bcc.w	8021cac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8021afe:	46be      	mov	lr, r7
 8021b00:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021b02:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8021b06:	f0c0 80ba 	bcc.w	8021c7e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8021b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021b0c:	4013      	ands	r3, r2
 8021b0e:	d041      	beq.n	8021b94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8021b10:	20ff      	movs	r0, #255	@ 0xff
 8021b12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021b14:	fb90 f5f5 	sdiv	r5, r0, r5
 8021b18:	436b      	muls	r3, r5
 8021b1a:	2bfe      	cmp	r3, #254	@ 0xfe
 8021b1c:	dd03      	ble.n	8021b26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8021b1e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021b20:	4285      	cmp	r5, r0
 8021b22:	f000 80a5 	beq.w	8021c70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8021b26:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021b28:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021b2a:	fb15 f303 	smulbb	r3, r5, r3
 8021b2e:	b29b      	uxth	r3, r3
 8021b30:	1c5d      	adds	r5, r3, #1
 8021b32:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8021b36:	780d      	ldrb	r5, [r1, #0]
 8021b38:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021b3c:	fa1f fc83 	uxth.w	ip, r3
 8021b40:	43db      	mvns	r3, r3
 8021b42:	fb10 f90c 	smulbb	r9, r0, ip
 8021b46:	b2db      	uxtb	r3, r3
 8021b48:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021b4a:	fb05 9503 	mla	r5, r5, r3, r9
 8021b4e:	b2ad      	uxth	r5, r5
 8021b50:	f105 0901 	add.w	r9, r5, #1
 8021b54:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021b58:	fb10 f90c 	smulbb	r9, r0, ip
 8021b5c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021b5e:	122d      	asrs	r5, r5, #8
 8021b60:	fb10 fc0c 	smulbb	ip, r0, ip
 8021b64:	700d      	strb	r5, [r1, #0]
 8021b66:	784d      	ldrb	r5, [r1, #1]
 8021b68:	fb05 9503 	mla	r5, r5, r3, r9
 8021b6c:	b2ad      	uxth	r5, r5
 8021b6e:	f105 0901 	add.w	r9, r5, #1
 8021b72:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021b76:	122d      	asrs	r5, r5, #8
 8021b78:	704d      	strb	r5, [r1, #1]
 8021b7a:	788d      	ldrb	r5, [r1, #2]
 8021b7c:	fb05 cc03 	mla	ip, r5, r3, ip
 8021b80:	fa1f fc8c 	uxth.w	ip, ip
 8021b84:	f10c 0301 	add.w	r3, ip, #1
 8021b88:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021b8c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021b90:	f881 c002 	strb.w	ip, [r1, #2]
 8021b94:	4444      	add	r4, r8
 8021b96:	4431      	add	r1, r6
 8021b98:	b2a4      	uxth	r4, r4
 8021b9a:	2c07      	cmp	r4, #7
 8021b9c:	bf89      	itett	hi
 8021b9e:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8021ba0:	fa42 f208 	asrls.w	r2, r2, r8
 8021ba4:	2400      	movhi	r4, #0
 8021ba6:	785a      	ldrbhi	r2, [r3, #1]
 8021ba8:	bf8a      	itet	hi
 8021baa:	3301      	addhi	r3, #1
 8021bac:	b2d2      	uxtbls	r2, r2
 8021bae:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8021bb0:	e7a7      	b.n	8021b02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8021bb2:	441e      	add	r6, r3
 8021bb4:	b236      	sxth	r6, r6
 8021bb6:	e6ed      	b.n	8021994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021bb8:	f1b9 0f01 	cmp.w	r9, #1
 8021bbc:	f47f af28 	bne.w	8021a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021bc0:	f1bb 0f01 	cmp.w	fp, #1
 8021bc4:	f47f af24 	bne.w	8021a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021bc8:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8021ca4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8021bcc:	f8db 0000 	ldr.w	r0, [fp]
 8021bd0:	6803      	ldr	r3, [r0, #0]
 8021bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021bd4:	4798      	blx	r3
 8021bd6:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8021bda:	465a      	mov	r2, fp
 8021bdc:	d006      	beq.n	8021bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8021bde:	f1b8 0f04 	cmp.w	r8, #4
 8021be2:	d141      	bne.n	8021c68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8021be4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021be6:	3300      	adds	r3, #0
 8021be8:	bf18      	it	ne
 8021bea:	2301      	movne	r3, #1
 8021bec:	0580      	lsls	r0, r0, #22
 8021bee:	d566      	bpl.n	8021cbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8021bf0:	f1b8 0f08 	cmp.w	r8, #8
 8021bf4:	d163      	bne.n	8021cbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	bf0c      	ite	eq
 8021bfa:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8021bfe:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8021c02:	2f00      	cmp	r7, #0
 8021c04:	f47f af04 	bne.w	8021a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021c08:	2c00      	cmp	r4, #0
 8021c0a:	f47f af01 	bne.w	8021a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c10:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021c12:	18f3      	adds	r3, r6, r3
 8021c14:	4283      	cmp	r3, r0
 8021c16:	f73f aefb 	bgt.w	8021a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021c1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021c1e:	4403      	add	r3, r0
 8021c20:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021c22:	4283      	cmp	r3, r0
 8021c24:	f73f aef4 	bgt.w	8021a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021c28:	f1b8 0f08 	cmp.w	r8, #8
 8021c2c:	6810      	ldr	r0, [r2, #0]
 8021c2e:	f04f 0600 	mov.w	r6, #0
 8021c32:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8021c36:	bf18      	it	ne
 8021c38:	3501      	addne	r5, #1
 8021c3a:	6804      	ldr	r4, [r0, #0]
 8021c3c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8021c40:	bf18      	it	ne
 8021c42:	f025 0501 	bicne.w	r5, r5, #1
 8021c46:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8021c4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021c4c:	bf18      	it	ne
 8021c4e:	b2ad      	uxthne	r5, r5
 8021c50:	9104      	str	r1, [sp, #16]
 8021c52:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021c54:	e9cd 5a00 	strd	r5, sl, [sp]
 8021c58:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8021c5c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8021c5e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8021c60:	47a0      	blx	r4
 8021c62:	b017      	add	sp, #92	@ 0x5c
 8021c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c68:	2300      	movs	r3, #0
 8021c6a:	e7bf      	b.n	8021bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8021c6c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021c6e:	e724      	b.n	8021aba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8021c70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021c72:	700b      	strb	r3, [r1, #0]
 8021c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021c76:	704b      	strb	r3, [r1, #1]
 8021c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021c7a:	708b      	strb	r3, [r1, #2]
 8021c7c:	e78a      	b.n	8021b94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8021c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c80:	b153      	cbz	r3, 8021c98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8021c82:	441c      	add	r4, r3
 8021c84:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021c86:	b2a4      	uxth	r4, r4
 8021c88:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021c8c:	f004 0407 	and.w	r4, r4, #7
 8021c90:	781a      	ldrb	r2, [r3, #0]
 8021c92:	9326      	str	r3, [sp, #152]	@ 0x98
 8021c94:	4122      	asrs	r2, r4
 8021c96:	b2d2      	uxtb	r2, r2
 8021c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c9a:	445b      	add	r3, fp
 8021c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c9e:	e72a      	b.n	8021af6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8021ca0:	240284e0 	.word	0x240284e0
 8021ca4:	240284e8 	.word	0x240284e8
 8021ca8:	240284e2 	.word	0x240284e2
 8021cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d1d7      	bne.n	8021c62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021cb2:	4b06      	ldr	r3, [pc, #24]	@ (8021ccc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8021cb4:	6818      	ldr	r0, [r3, #0]
 8021cb6:	6803      	ldr	r3, [r0, #0]
 8021cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021cba:	4798      	blx	r3
 8021cbc:	e7d1      	b.n	8021c62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	f43f aea6 	beq.w	8021a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021cc8:	e79b      	b.n	8021c02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8021cca:	bf00      	nop
 8021ccc:	240284e8 	.word	0x240284e8

08021cd0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021cd0:	b538      	push	{r3, r4, r5, lr}
 8021cd2:	4c15      	ldr	r4, [pc, #84]	@ (8021d28 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021cd4:	4605      	mov	r5, r0
 8021cd6:	7823      	ldrb	r3, [r4, #0]
 8021cd8:	f3bf 8f5b 	dmb	ish
 8021cdc:	07da      	lsls	r2, r3, #31
 8021cde:	d40b      	bmi.n	8021cf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021ce0:	4620      	mov	r0, r4
 8021ce2:	f006 f8f7 	bl	8027ed4 <__cxa_guard_acquire>
 8021ce6:	b138      	cbz	r0, 8021cf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021ce8:	4620      	mov	r0, r4
 8021cea:	f006 f8ff 	bl	8027eec <__cxa_guard_release>
 8021cee:	4a0f      	ldr	r2, [pc, #60]	@ (8021d2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021cf0:	490f      	ldr	r1, [pc, #60]	@ (8021d30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021cf2:	4810      	ldr	r0, [pc, #64]	@ (8021d34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021cf4:	f006 f8e7 	bl	8027ec6 <__aeabi_atexit>
 8021cf8:	4c0f      	ldr	r4, [pc, #60]	@ (8021d38 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021cfa:	7823      	ldrb	r3, [r4, #0]
 8021cfc:	f3bf 8f5b 	dmb	ish
 8021d00:	07db      	lsls	r3, r3, #31
 8021d02:	d40b      	bmi.n	8021d1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021d04:	4620      	mov	r0, r4
 8021d06:	f006 f8e5 	bl	8027ed4 <__cxa_guard_acquire>
 8021d0a:	b138      	cbz	r0, 8021d1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021d0c:	4620      	mov	r0, r4
 8021d0e:	f006 f8ed 	bl	8027eec <__cxa_guard_release>
 8021d12:	4a06      	ldr	r2, [pc, #24]	@ (8021d2c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021d14:	4909      	ldr	r1, [pc, #36]	@ (8021d3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021d16:	480a      	ldr	r0, [pc, #40]	@ (8021d40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021d18:	f006 f8d5 	bl	8027ec6 <__aeabi_atexit>
 8021d1c:	4b05      	ldr	r3, [pc, #20]	@ (8021d34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021d1e:	616b      	str	r3, [r5, #20]
 8021d20:	4b07      	ldr	r3, [pc, #28]	@ (8021d40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021d22:	61ab      	str	r3, [r5, #24]
 8021d24:	bd38      	pop	{r3, r4, r5, pc}
 8021d26:	bf00      	nop
 8021d28:	240285cc 	.word	0x240285cc
 8021d2c:	24000000 	.word	0x24000000
 8021d30:	0801efc1 	.word	0x0801efc1
 8021d34:	240000c8 	.word	0x240000c8
 8021d38:	240285d0 	.word	0x240285d0
 8021d3c:	0801efbf 	.word	0x0801efbf
 8021d40:	240000cc 	.word	0x240000cc

08021d44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021d44:	b538      	push	{r3, r4, r5, lr}
 8021d46:	4c15      	ldr	r4, [pc, #84]	@ (8021d9c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021d48:	4605      	mov	r5, r0
 8021d4a:	7823      	ldrb	r3, [r4, #0]
 8021d4c:	f3bf 8f5b 	dmb	ish
 8021d50:	07da      	lsls	r2, r3, #31
 8021d52:	d40b      	bmi.n	8021d6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021d54:	4620      	mov	r0, r4
 8021d56:	f006 f8bd 	bl	8027ed4 <__cxa_guard_acquire>
 8021d5a:	b138      	cbz	r0, 8021d6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021d5c:	4620      	mov	r0, r4
 8021d5e:	f006 f8c5 	bl	8027eec <__cxa_guard_release>
 8021d62:	4a0f      	ldr	r2, [pc, #60]	@ (8021da0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021d64:	490f      	ldr	r1, [pc, #60]	@ (8021da4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021d66:	4810      	ldr	r0, [pc, #64]	@ (8021da8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021d68:	f006 f8ad 	bl	8027ec6 <__aeabi_atexit>
 8021d6c:	4c0f      	ldr	r4, [pc, #60]	@ (8021dac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8021d6e:	7823      	ldrb	r3, [r4, #0]
 8021d70:	f3bf 8f5b 	dmb	ish
 8021d74:	07db      	lsls	r3, r3, #31
 8021d76:	d40b      	bmi.n	8021d90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021d78:	4620      	mov	r0, r4
 8021d7a:	f006 f8ab 	bl	8027ed4 <__cxa_guard_acquire>
 8021d7e:	b138      	cbz	r0, 8021d90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021d80:	4620      	mov	r0, r4
 8021d82:	f006 f8b3 	bl	8027eec <__cxa_guard_release>
 8021d86:	4a06      	ldr	r2, [pc, #24]	@ (8021da0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021d88:	4909      	ldr	r1, [pc, #36]	@ (8021db0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021d8a:	480a      	ldr	r0, [pc, #40]	@ (8021db4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021d8c:	f006 f89b 	bl	8027ec6 <__aeabi_atexit>
 8021d90:	4b05      	ldr	r3, [pc, #20]	@ (8021da8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021d92:	60eb      	str	r3, [r5, #12]
 8021d94:	4b07      	ldr	r3, [pc, #28]	@ (8021db4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021d96:	612b      	str	r3, [r5, #16]
 8021d98:	bd38      	pop	{r3, r4, r5, pc}
 8021d9a:	bf00      	nop
 8021d9c:	240285ac 	.word	0x240285ac
 8021da0:	24000000 	.word	0x24000000
 8021da4:	0801efc5 	.word	0x0801efc5
 8021da8:	240000a8 	.word	0x240000a8
 8021dac:	240285b0 	.word	0x240285b0
 8021db0:	0801efc3 	.word	0x0801efc3
 8021db4:	240000ac 	.word	0x240000ac

08021db8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8021db8:	b510      	push	{r4, lr}
 8021dba:	4604      	mov	r4, r0
 8021dbc:	f7ff ff88 	bl	8021cd0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021dc6:	f7ff bfbd 	b.w	8021d44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021dcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021dcc:	b538      	push	{r3, r4, r5, lr}
 8021dce:	4c15      	ldr	r4, [pc, #84]	@ (8021e24 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021dd0:	4605      	mov	r5, r0
 8021dd2:	7823      	ldrb	r3, [r4, #0]
 8021dd4:	f3bf 8f5b 	dmb	ish
 8021dd8:	07da      	lsls	r2, r3, #31
 8021dda:	d40b      	bmi.n	8021df4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021ddc:	4620      	mov	r0, r4
 8021dde:	f006 f879 	bl	8027ed4 <__cxa_guard_acquire>
 8021de2:	b138      	cbz	r0, 8021df4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021de4:	4620      	mov	r0, r4
 8021de6:	f006 f881 	bl	8027eec <__cxa_guard_release>
 8021dea:	4a0f      	ldr	r2, [pc, #60]	@ (8021e28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021dec:	490f      	ldr	r1, [pc, #60]	@ (8021e2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021dee:	4810      	ldr	r0, [pc, #64]	@ (8021e30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021df0:	f006 f869 	bl	8027ec6 <__aeabi_atexit>
 8021df4:	4c0f      	ldr	r4, [pc, #60]	@ (8021e34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021df6:	7823      	ldrb	r3, [r4, #0]
 8021df8:	f3bf 8f5b 	dmb	ish
 8021dfc:	07db      	lsls	r3, r3, #31
 8021dfe:	d40b      	bmi.n	8021e18 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021e00:	4620      	mov	r0, r4
 8021e02:	f006 f867 	bl	8027ed4 <__cxa_guard_acquire>
 8021e06:	b138      	cbz	r0, 8021e18 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021e08:	4620      	mov	r0, r4
 8021e0a:	f006 f86f 	bl	8027eec <__cxa_guard_release>
 8021e0e:	4a06      	ldr	r2, [pc, #24]	@ (8021e28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021e10:	4909      	ldr	r1, [pc, #36]	@ (8021e38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021e12:	480a      	ldr	r0, [pc, #40]	@ (8021e3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021e14:	f006 f857 	bl	8027ec6 <__aeabi_atexit>
 8021e18:	4b05      	ldr	r3, [pc, #20]	@ (8021e30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021e1a:	626b      	str	r3, [r5, #36]	@ 0x24
 8021e1c:	4b07      	ldr	r3, [pc, #28]	@ (8021e3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021e1e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8021e20:	bd38      	pop	{r3, r4, r5, pc}
 8021e22:	bf00      	nop
 8021e24:	240285d4 	.word	0x240285d4
 8021e28:	24000000 	.word	0x24000000
 8021e2c:	0801efb9 	.word	0x0801efb9
 8021e30:	240000d0 	.word	0x240000d0
 8021e34:	240285d8 	.word	0x240285d8
 8021e38:	0801efb7 	.word	0x0801efb7
 8021e3c:	240000d4 	.word	0x240000d4

08021e40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021e40:	b538      	push	{r3, r4, r5, lr}
 8021e42:	4c15      	ldr	r4, [pc, #84]	@ (8021e98 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021e44:	4605      	mov	r5, r0
 8021e46:	7823      	ldrb	r3, [r4, #0]
 8021e48:	f3bf 8f5b 	dmb	ish
 8021e4c:	07da      	lsls	r2, r3, #31
 8021e4e:	d40b      	bmi.n	8021e68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021e50:	4620      	mov	r0, r4
 8021e52:	f006 f83f 	bl	8027ed4 <__cxa_guard_acquire>
 8021e56:	b138      	cbz	r0, 8021e68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021e58:	4620      	mov	r0, r4
 8021e5a:	f006 f847 	bl	8027eec <__cxa_guard_release>
 8021e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8021e9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021e60:	490f      	ldr	r1, [pc, #60]	@ (8021ea0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021e62:	4810      	ldr	r0, [pc, #64]	@ (8021ea4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021e64:	f006 f82f 	bl	8027ec6 <__aeabi_atexit>
 8021e68:	4c0f      	ldr	r4, [pc, #60]	@ (8021ea8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021e6a:	7823      	ldrb	r3, [r4, #0]
 8021e6c:	f3bf 8f5b 	dmb	ish
 8021e70:	07db      	lsls	r3, r3, #31
 8021e72:	d40b      	bmi.n	8021e8c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021e74:	4620      	mov	r0, r4
 8021e76:	f006 f82d 	bl	8027ed4 <__cxa_guard_acquire>
 8021e7a:	b138      	cbz	r0, 8021e8c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021e7c:	4620      	mov	r0, r4
 8021e7e:	f006 f835 	bl	8027eec <__cxa_guard_release>
 8021e82:	4a06      	ldr	r2, [pc, #24]	@ (8021e9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021e84:	4909      	ldr	r1, [pc, #36]	@ (8021eac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021e86:	480a      	ldr	r0, [pc, #40]	@ (8021eb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021e88:	f006 f81d 	bl	8027ec6 <__aeabi_atexit>
 8021e8c:	4b05      	ldr	r3, [pc, #20]	@ (8021ea4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021e8e:	61eb      	str	r3, [r5, #28]
 8021e90:	4b07      	ldr	r3, [pc, #28]	@ (8021eb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021e92:	622b      	str	r3, [r5, #32]
 8021e94:	bd38      	pop	{r3, r4, r5, pc}
 8021e96:	bf00      	nop
 8021e98:	240285b4 	.word	0x240285b4
 8021e9c:	24000000 	.word	0x24000000
 8021ea0:	0801efbd 	.word	0x0801efbd
 8021ea4:	240000b0 	.word	0x240000b0
 8021ea8:	240285b8 	.word	0x240285b8
 8021eac:	0801efbb 	.word	0x0801efbb
 8021eb0:	240000b4 	.word	0x240000b4

08021eb4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021eb4:	b510      	push	{r4, lr}
 8021eb6:	4604      	mov	r4, r0
 8021eb8:	f7ff ff88 	bl	8021dcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021ebc:	4620      	mov	r0, r4
 8021ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ec2:	f7ff bfbd 	b.w	8021e40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021ec8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8021ec8:	b538      	push	{r3, r4, r5, lr}
 8021eca:	4c15      	ldr	r4, [pc, #84]	@ (8021f20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021ecc:	4605      	mov	r5, r0
 8021ece:	7823      	ldrb	r3, [r4, #0]
 8021ed0:	f3bf 8f5b 	dmb	ish
 8021ed4:	07da      	lsls	r2, r3, #31
 8021ed6:	d40b      	bmi.n	8021ef0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021ed8:	4620      	mov	r0, r4
 8021eda:	f005 fffb 	bl	8027ed4 <__cxa_guard_acquire>
 8021ede:	b138      	cbz	r0, 8021ef0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021ee0:	4620      	mov	r0, r4
 8021ee2:	f006 f803 	bl	8027eec <__cxa_guard_release>
 8021ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8021f24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021ee8:	490f      	ldr	r1, [pc, #60]	@ (8021f28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8021eea:	4810      	ldr	r0, [pc, #64]	@ (8021f2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021eec:	f005 ffeb 	bl	8027ec6 <__aeabi_atexit>
 8021ef0:	4c0f      	ldr	r4, [pc, #60]	@ (8021f30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8021ef2:	7823      	ldrb	r3, [r4, #0]
 8021ef4:	f3bf 8f5b 	dmb	ish
 8021ef8:	07db      	lsls	r3, r3, #31
 8021efa:	d40b      	bmi.n	8021f14 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021efc:	4620      	mov	r0, r4
 8021efe:	f005 ffe9 	bl	8027ed4 <__cxa_guard_acquire>
 8021f02:	b138      	cbz	r0, 8021f14 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021f04:	4620      	mov	r0, r4
 8021f06:	f005 fff1 	bl	8027eec <__cxa_guard_release>
 8021f0a:	4a06      	ldr	r2, [pc, #24]	@ (8021f24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021f0c:	4909      	ldr	r1, [pc, #36]	@ (8021f34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8021f0e:	480a      	ldr	r0, [pc, #40]	@ (8021f38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021f10:	f005 ffd9 	bl	8027ec6 <__aeabi_atexit>
 8021f14:	4b05      	ldr	r3, [pc, #20]	@ (8021f2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021f16:	636b      	str	r3, [r5, #52]	@ 0x34
 8021f18:	4b07      	ldr	r3, [pc, #28]	@ (8021f38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021f1a:	63ab      	str	r3, [r5, #56]	@ 0x38
 8021f1c:	bd38      	pop	{r3, r4, r5, pc}
 8021f1e:	bf00      	nop
 8021f20:	240285bc 	.word	0x240285bc
 8021f24:	24000000 	.word	0x24000000
 8021f28:	0801efb1 	.word	0x0801efb1
 8021f2c:	240000b8 	.word	0x240000b8
 8021f30:	240285c0 	.word	0x240285c0
 8021f34:	0801efaf 	.word	0x0801efaf
 8021f38:	240000bc 	.word	0x240000bc

08021f3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021f3c:	b538      	push	{r3, r4, r5, lr}
 8021f3e:	4c15      	ldr	r4, [pc, #84]	@ (8021f94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8021f40:	4605      	mov	r5, r0
 8021f42:	7823      	ldrb	r3, [r4, #0]
 8021f44:	f3bf 8f5b 	dmb	ish
 8021f48:	07da      	lsls	r2, r3, #31
 8021f4a:	d40b      	bmi.n	8021f64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021f4c:	4620      	mov	r0, r4
 8021f4e:	f005 ffc1 	bl	8027ed4 <__cxa_guard_acquire>
 8021f52:	b138      	cbz	r0, 8021f64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021f54:	4620      	mov	r0, r4
 8021f56:	f005 ffc9 	bl	8027eec <__cxa_guard_release>
 8021f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8021f98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021f5c:	490f      	ldr	r1, [pc, #60]	@ (8021f9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8021f5e:	4810      	ldr	r0, [pc, #64]	@ (8021fa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021f60:	f005 ffb1 	bl	8027ec6 <__aeabi_atexit>
 8021f64:	4c0f      	ldr	r4, [pc, #60]	@ (8021fa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8021f66:	7823      	ldrb	r3, [r4, #0]
 8021f68:	f3bf 8f5b 	dmb	ish
 8021f6c:	07db      	lsls	r3, r3, #31
 8021f6e:	d40b      	bmi.n	8021f88 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021f70:	4620      	mov	r0, r4
 8021f72:	f005 ffaf 	bl	8027ed4 <__cxa_guard_acquire>
 8021f76:	b138      	cbz	r0, 8021f88 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021f78:	4620      	mov	r0, r4
 8021f7a:	f005 ffb7 	bl	8027eec <__cxa_guard_release>
 8021f7e:	4a06      	ldr	r2, [pc, #24]	@ (8021f98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021f80:	4909      	ldr	r1, [pc, #36]	@ (8021fa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8021f82:	480a      	ldr	r0, [pc, #40]	@ (8021fac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021f84:	f005 ff9f 	bl	8027ec6 <__aeabi_atexit>
 8021f88:	4b05      	ldr	r3, [pc, #20]	@ (8021fa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021f8a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8021f8c:	4b07      	ldr	r3, [pc, #28]	@ (8021fac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021f8e:	632b      	str	r3, [r5, #48]	@ 0x30
 8021f90:	bd38      	pop	{r3, r4, r5, pc}
 8021f92:	bf00      	nop
 8021f94:	24028594 	.word	0x24028594
 8021f98:	24000000 	.word	0x24000000
 8021f9c:	0801efb5 	.word	0x0801efb5
 8021fa0:	24000090 	.word	0x24000090
 8021fa4:	24028598 	.word	0x24028598
 8021fa8:	0801efb3 	.word	0x0801efb3
 8021fac:	24000094 	.word	0x24000094

08021fb0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8021fb0:	b510      	push	{r4, lr}
 8021fb2:	4604      	mov	r4, r0
 8021fb4:	f7ff ff88 	bl	8021ec8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8021fb8:	4620      	mov	r0, r4
 8021fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fbe:	f7ff bfbd 	b.w	8021f3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021fc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021fc4:	b538      	push	{r3, r4, r5, lr}
 8021fc6:	4c15      	ldr	r4, [pc, #84]	@ (802201c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021fc8:	4605      	mov	r5, r0
 8021fca:	7823      	ldrb	r3, [r4, #0]
 8021fcc:	f3bf 8f5b 	dmb	ish
 8021fd0:	07da      	lsls	r2, r3, #31
 8021fd2:	d40b      	bmi.n	8021fec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021fd4:	4620      	mov	r0, r4
 8021fd6:	f005 ff7d 	bl	8027ed4 <__cxa_guard_acquire>
 8021fda:	b138      	cbz	r0, 8021fec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021fdc:	4620      	mov	r0, r4
 8021fde:	f005 ff85 	bl	8027eec <__cxa_guard_release>
 8021fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8022020 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021fe4:	490f      	ldr	r1, [pc, #60]	@ (8022024 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021fe6:	4810      	ldr	r0, [pc, #64]	@ (8022028 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021fe8:	f005 ff6d 	bl	8027ec6 <__aeabi_atexit>
 8021fec:	4c0f      	ldr	r4, [pc, #60]	@ (802202c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021fee:	7823      	ldrb	r3, [r4, #0]
 8021ff0:	f3bf 8f5b 	dmb	ish
 8021ff4:	07db      	lsls	r3, r3, #31
 8021ff6:	d40b      	bmi.n	8022010 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021ff8:	4620      	mov	r0, r4
 8021ffa:	f005 ff6b 	bl	8027ed4 <__cxa_guard_acquire>
 8021ffe:	b138      	cbz	r0, 8022010 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022000:	4620      	mov	r0, r4
 8022002:	f005 ff73 	bl	8027eec <__cxa_guard_release>
 8022006:	4a06      	ldr	r2, [pc, #24]	@ (8022020 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022008:	4909      	ldr	r1, [pc, #36]	@ (8022030 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802200a:	480a      	ldr	r0, [pc, #40]	@ (8022034 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802200c:	f005 ff5b 	bl	8027ec6 <__aeabi_atexit>
 8022010:	4b05      	ldr	r3, [pc, #20]	@ (8022028 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022012:	646b      	str	r3, [r5, #68]	@ 0x44
 8022014:	4b07      	ldr	r3, [pc, #28]	@ (8022034 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022016:	64ab      	str	r3, [r5, #72]	@ 0x48
 8022018:	bd38      	pop	{r3, r4, r5, pc}
 802201a:	bf00      	nop
 802201c:	240285c4 	.word	0x240285c4
 8022020:	24000000 	.word	0x24000000
 8022024:	0801efa9 	.word	0x0801efa9
 8022028:	240000c0 	.word	0x240000c0
 802202c:	240285c8 	.word	0x240285c8
 8022030:	0801efa7 	.word	0x0801efa7
 8022034:	240000c4 	.word	0x240000c4

08022038 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022038:	b538      	push	{r3, r4, r5, lr}
 802203a:	4c15      	ldr	r4, [pc, #84]	@ (8022090 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802203c:	4605      	mov	r5, r0
 802203e:	7823      	ldrb	r3, [r4, #0]
 8022040:	f3bf 8f5b 	dmb	ish
 8022044:	07da      	lsls	r2, r3, #31
 8022046:	d40b      	bmi.n	8022060 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022048:	4620      	mov	r0, r4
 802204a:	f005 ff43 	bl	8027ed4 <__cxa_guard_acquire>
 802204e:	b138      	cbz	r0, 8022060 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022050:	4620      	mov	r0, r4
 8022052:	f005 ff4b 	bl	8027eec <__cxa_guard_release>
 8022056:	4a0f      	ldr	r2, [pc, #60]	@ (8022094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022058:	490f      	ldr	r1, [pc, #60]	@ (8022098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802205a:	4810      	ldr	r0, [pc, #64]	@ (802209c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802205c:	f005 ff33 	bl	8027ec6 <__aeabi_atexit>
 8022060:	4c0f      	ldr	r4, [pc, #60]	@ (80220a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022062:	7823      	ldrb	r3, [r4, #0]
 8022064:	f3bf 8f5b 	dmb	ish
 8022068:	07db      	lsls	r3, r3, #31
 802206a:	d40b      	bmi.n	8022084 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802206c:	4620      	mov	r0, r4
 802206e:	f005 ff31 	bl	8027ed4 <__cxa_guard_acquire>
 8022072:	b138      	cbz	r0, 8022084 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022074:	4620      	mov	r0, r4
 8022076:	f005 ff39 	bl	8027eec <__cxa_guard_release>
 802207a:	4a06      	ldr	r2, [pc, #24]	@ (8022094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802207c:	4909      	ldr	r1, [pc, #36]	@ (80220a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802207e:	480a      	ldr	r0, [pc, #40]	@ (80220a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022080:	f005 ff21 	bl	8027ec6 <__aeabi_atexit>
 8022084:	4b05      	ldr	r3, [pc, #20]	@ (802209c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022086:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8022088:	4b07      	ldr	r3, [pc, #28]	@ (80220a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802208a:	642b      	str	r3, [r5, #64]	@ 0x40
 802208c:	bd38      	pop	{r3, r4, r5, pc}
 802208e:	bf00      	nop
 8022090:	240285a4 	.word	0x240285a4
 8022094:	24000000 	.word	0x24000000
 8022098:	0801efad 	.word	0x0801efad
 802209c:	240000a0 	.word	0x240000a0
 80220a0:	240285a8 	.word	0x240285a8
 80220a4:	0801efab 	.word	0x0801efab
 80220a8:	240000a4 	.word	0x240000a4

080220ac <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80220ac:	b510      	push	{r4, lr}
 80220ae:	4604      	mov	r4, r0
 80220b0:	f7ff ff88 	bl	8021fc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80220b4:	4620      	mov	r0, r4
 80220b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80220ba:	f7ff bfbd 	b.w	8022038 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080220c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80220c0:	b538      	push	{r3, r4, r5, lr}
 80220c2:	4c15      	ldr	r4, [pc, #84]	@ (8022118 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80220c4:	4605      	mov	r5, r0
 80220c6:	7823      	ldrb	r3, [r4, #0]
 80220c8:	f3bf 8f5b 	dmb	ish
 80220cc:	07da      	lsls	r2, r3, #31
 80220ce:	d40b      	bmi.n	80220e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80220d0:	4620      	mov	r0, r4
 80220d2:	f005 feff 	bl	8027ed4 <__cxa_guard_acquire>
 80220d6:	b138      	cbz	r0, 80220e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80220d8:	4620      	mov	r0, r4
 80220da:	f005 ff07 	bl	8027eec <__cxa_guard_release>
 80220de:	4a0f      	ldr	r2, [pc, #60]	@ (802211c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80220e0:	490f      	ldr	r1, [pc, #60]	@ (8022120 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80220e2:	4810      	ldr	r0, [pc, #64]	@ (8022124 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80220e4:	f005 feef 	bl	8027ec6 <__aeabi_atexit>
 80220e8:	4c0f      	ldr	r4, [pc, #60]	@ (8022128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80220ea:	7823      	ldrb	r3, [r4, #0]
 80220ec:	f3bf 8f5b 	dmb	ish
 80220f0:	07db      	lsls	r3, r3, #31
 80220f2:	d40b      	bmi.n	802210c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80220f4:	4620      	mov	r0, r4
 80220f6:	f005 feed 	bl	8027ed4 <__cxa_guard_acquire>
 80220fa:	b138      	cbz	r0, 802210c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80220fc:	4620      	mov	r0, r4
 80220fe:	f005 fef5 	bl	8027eec <__cxa_guard_release>
 8022102:	4a06      	ldr	r2, [pc, #24]	@ (802211c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022104:	4909      	ldr	r1, [pc, #36]	@ (802212c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022106:	480a      	ldr	r0, [pc, #40]	@ (8022130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022108:	f005 fedd 	bl	8027ec6 <__aeabi_atexit>
 802210c:	4b05      	ldr	r3, [pc, #20]	@ (8022124 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802210e:	656b      	str	r3, [r5, #84]	@ 0x54
 8022110:	4b07      	ldr	r3, [pc, #28]	@ (8022130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022112:	65ab      	str	r3, [r5, #88]	@ 0x58
 8022114:	bd38      	pop	{r3, r4, r5, pc}
 8022116:	bf00      	nop
 8022118:	2402859c 	.word	0x2402859c
 802211c:	24000000 	.word	0x24000000
 8022120:	0801efa1 	.word	0x0801efa1
 8022124:	24000098 	.word	0x24000098
 8022128:	240285a0 	.word	0x240285a0
 802212c:	0801ef9f 	.word	0x0801ef9f
 8022130:	2400009c 	.word	0x2400009c

08022134 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022134:	b538      	push	{r3, r4, r5, lr}
 8022136:	4c15      	ldr	r4, [pc, #84]	@ (802218c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022138:	4605      	mov	r5, r0
 802213a:	7823      	ldrb	r3, [r4, #0]
 802213c:	f3bf 8f5b 	dmb	ish
 8022140:	07da      	lsls	r2, r3, #31
 8022142:	d40b      	bmi.n	802215c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022144:	4620      	mov	r0, r4
 8022146:	f005 fec5 	bl	8027ed4 <__cxa_guard_acquire>
 802214a:	b138      	cbz	r0, 802215c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802214c:	4620      	mov	r0, r4
 802214e:	f005 fecd 	bl	8027eec <__cxa_guard_release>
 8022152:	4a0f      	ldr	r2, [pc, #60]	@ (8022190 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022154:	490f      	ldr	r1, [pc, #60]	@ (8022194 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022156:	4810      	ldr	r0, [pc, #64]	@ (8022198 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022158:	f005 feb5 	bl	8027ec6 <__aeabi_atexit>
 802215c:	4c0f      	ldr	r4, [pc, #60]	@ (802219c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802215e:	7823      	ldrb	r3, [r4, #0]
 8022160:	f3bf 8f5b 	dmb	ish
 8022164:	07db      	lsls	r3, r3, #31
 8022166:	d40b      	bmi.n	8022180 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022168:	4620      	mov	r0, r4
 802216a:	f005 feb3 	bl	8027ed4 <__cxa_guard_acquire>
 802216e:	b138      	cbz	r0, 8022180 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022170:	4620      	mov	r0, r4
 8022172:	f005 febb 	bl	8027eec <__cxa_guard_release>
 8022176:	4a06      	ldr	r2, [pc, #24]	@ (8022190 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022178:	4909      	ldr	r1, [pc, #36]	@ (80221a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802217a:	480a      	ldr	r0, [pc, #40]	@ (80221a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802217c:	f005 fea3 	bl	8027ec6 <__aeabi_atexit>
 8022180:	4b05      	ldr	r3, [pc, #20]	@ (8022198 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022182:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8022184:	4b07      	ldr	r3, [pc, #28]	@ (80221a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022186:	652b      	str	r3, [r5, #80]	@ 0x50
 8022188:	bd38      	pop	{r3, r4, r5, pc}
 802218a:	bf00      	nop
 802218c:	2402858c 	.word	0x2402858c
 8022190:	24000000 	.word	0x24000000
 8022194:	0801efa5 	.word	0x0801efa5
 8022198:	24000088 	.word	0x24000088
 802219c:	24028590 	.word	0x24028590
 80221a0:	0801efa3 	.word	0x0801efa3
 80221a4:	2400008c 	.word	0x2400008c

080221a8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80221a8:	b510      	push	{r4, lr}
 80221aa:	4604      	mov	r4, r0
 80221ac:	f7ff ff88 	bl	80220c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80221b0:	4620      	mov	r0, r4
 80221b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221b6:	f7ff bfbd 	b.w	8022134 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080221ba <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80221ba:	b510      	push	{r4, lr}
 80221bc:	4604      	mov	r4, r0
 80221be:	f7ff fff3 	bl	80221a8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80221c2:	4620      	mov	r0, r4
 80221c4:	f7ff ff72 	bl	80220ac <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80221c8:	4620      	mov	r0, r4
 80221ca:	f7ff fe73 	bl	8021eb4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80221ce:	4620      	mov	r0, r4
 80221d0:	f7ff fdf2 	bl	8021db8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80221d4:	4620      	mov	r0, r4
 80221d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221da:	f7ff bee9 	b.w	8021fb0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080221e0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 80221e0:	b538      	push	{r3, r4, r5, lr}
 80221e2:	4c0b      	ldr	r4, [pc, #44]	@ (8022210 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 80221e4:	4605      	mov	r5, r0
 80221e6:	7823      	ldrb	r3, [r4, #0]
 80221e8:	f3bf 8f5b 	dmb	ish
 80221ec:	07db      	lsls	r3, r3, #31
 80221ee:	d40b      	bmi.n	8022208 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 80221f0:	4620      	mov	r0, r4
 80221f2:	f005 fe6f 	bl	8027ed4 <__cxa_guard_acquire>
 80221f6:	b138      	cbz	r0, 8022208 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 80221f8:	4620      	mov	r0, r4
 80221fa:	f005 fe77 	bl	8027eec <__cxa_guard_release>
 80221fe:	4a05      	ldr	r2, [pc, #20]	@ (8022214 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8022200:	4905      	ldr	r1, [pc, #20]	@ (8022218 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8022202:	4806      	ldr	r0, [pc, #24]	@ (802221c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8022204:	f005 fe5f 	bl	8027ec6 <__aeabi_atexit>
 8022208:	4b04      	ldr	r3, [pc, #16]	@ (802221c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 802220a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 802220c:	bd38      	pop	{r3, r4, r5, pc}
 802220e:	bf00      	nop
 8022210:	24028580 	.word	0x24028580
 8022214:	24000000 	.word	0x24000000
 8022218:	0801ef9d 	.word	0x0801ef9d
 802221c:	24000080 	.word	0x24000080

08022220 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8022220:	b538      	push	{r3, r4, r5, lr}
 8022222:	4c0b      	ldr	r4, [pc, #44]	@ (8022250 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8022224:	4605      	mov	r5, r0
 8022226:	7823      	ldrb	r3, [r4, #0]
 8022228:	f3bf 8f5b 	dmb	ish
 802222c:	07db      	lsls	r3, r3, #31
 802222e:	d40b      	bmi.n	8022248 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8022230:	4620      	mov	r0, r4
 8022232:	f005 fe4f 	bl	8027ed4 <__cxa_guard_acquire>
 8022236:	b138      	cbz	r0, 8022248 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8022238:	4620      	mov	r0, r4
 802223a:	f005 fe57 	bl	8027eec <__cxa_guard_release>
 802223e:	4a05      	ldr	r2, [pc, #20]	@ (8022254 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8022240:	4905      	ldr	r1, [pc, #20]	@ (8022258 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8022242:	4806      	ldr	r0, [pc, #24]	@ (802225c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8022244:	f005 fe3f 	bl	8027ec6 <__aeabi_atexit>
 8022248:	4b04      	ldr	r3, [pc, #16]	@ (802225c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 802224a:	662b      	str	r3, [r5, #96]	@ 0x60
 802224c:	bd38      	pop	{r3, r4, r5, pc}
 802224e:	bf00      	nop
 8022250:	24028584 	.word	0x24028584
 8022254:	24000000 	.word	0x24000000
 8022258:	0801ef9b 	.word	0x0801ef9b
 802225c:	24000084 	.word	0x24000084

08022260 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8022260:	b570      	push	{r4, r5, r6, lr}
 8022262:	4d0c      	ldr	r5, [pc, #48]	@ (8022294 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8022264:	4606      	mov	r6, r0
 8022266:	4c0c      	ldr	r4, [pc, #48]	@ (8022298 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8022268:	782b      	ldrb	r3, [r5, #0]
 802226a:	f3bf 8f5b 	dmb	ish
 802226e:	f013 0f01 	tst.w	r3, #1
 8022272:	d10d      	bne.n	8022290 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8022274:	4628      	mov	r0, r5
 8022276:	f005 fe2d 	bl	8027ed4 <__cxa_guard_acquire>
 802227a:	b148      	cbz	r0, 8022290 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 802227c:	4b07      	ldr	r3, [pc, #28]	@ (802229c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 802227e:	4628      	mov	r0, r5
 8022280:	6023      	str	r3, [r4, #0]
 8022282:	f005 fe33 	bl	8027eec <__cxa_guard_release>
 8022286:	4a06      	ldr	r2, [pc, #24]	@ (80222a0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8022288:	4620      	mov	r0, r4
 802228a:	4906      	ldr	r1, [pc, #24]	@ (80222a4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 802228c:	f005 fe1b 	bl	8027ec6 <__aeabi_atexit>
 8022290:	6674      	str	r4, [r6, #100]	@ 0x64
 8022292:	bd70      	pop	{r4, r5, r6, pc}
 8022294:	24028588 	.word	0x24028588
 8022298:	240286e0 	.word	0x240286e0
 802229c:	0802d394 	.word	0x0802d394
 80222a0:	24000000 	.word	0x24000000
 80222a4:	0801ef99 	.word	0x0801ef99

080222a8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 80222a8:	b510      	push	{r4, lr}
 80222aa:	4604      	mov	r4, r0
 80222ac:	f7ff ff98 	bl	80221e0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 80222b0:	4620      	mov	r0, r4
 80222b2:	f7ff ffb5 	bl	8022220 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 80222b6:	4620      	mov	r0, r4
 80222b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222bc:	f7ff bfd0 	b.w	8022260 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

080222c0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 80222c0:	b570      	push	{r4, r5, r6, lr}
 80222c2:	4d0c      	ldr	r5, [pc, #48]	@ (80222f4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 80222c4:	4606      	mov	r6, r0
 80222c6:	4c0c      	ldr	r4, [pc, #48]	@ (80222f8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 80222c8:	782b      	ldrb	r3, [r5, #0]
 80222ca:	f3bf 8f5b 	dmb	ish
 80222ce:	f013 0f01 	tst.w	r3, #1
 80222d2:	d10d      	bne.n	80222f0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80222d4:	4628      	mov	r0, r5
 80222d6:	f005 fdfd 	bl	8027ed4 <__cxa_guard_acquire>
 80222da:	b148      	cbz	r0, 80222f0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80222dc:	4b07      	ldr	r3, [pc, #28]	@ (80222fc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 80222de:	4628      	mov	r0, r5
 80222e0:	6023      	str	r3, [r4, #0]
 80222e2:	f005 fe03 	bl	8027eec <__cxa_guard_release>
 80222e6:	4a06      	ldr	r2, [pc, #24]	@ (8022300 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 80222e8:	4620      	mov	r0, r4
 80222ea:	4906      	ldr	r1, [pc, #24]	@ (8022304 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 80222ec:	f005 fdeb 	bl	8027ec6 <__aeabi_atexit>
 80222f0:	66b4      	str	r4, [r6, #104]	@ 0x68
 80222f2:	bd70      	pop	{r4, r5, r6, pc}
 80222f4:	2402857c 	.word	0x2402857c
 80222f8:	240285dc 	.word	0x240285dc
 80222fc:	0802d3ac 	.word	0x0802d3ac
 8022300:	24000000 	.word	0x24000000
 8022304:	0801ef97 	.word	0x0801ef97

08022308 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8022308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802230c:	b087      	sub	sp, #28
 802230e:	788d      	ldrb	r5, [r1, #2]
 8022310:	f891 9000 	ldrb.w	r9, [r1]
 8022314:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8022318:	9501      	str	r5, [sp, #4]
 802231a:	784d      	ldrb	r5, [r1, #1]
 802231c:	9203      	str	r2, [sp, #12]
 802231e:	9502      	str	r5, [sp, #8]
 8022320:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8022324:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8022328:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 802232c:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8022330:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8022334:	fb06 0708 	mla	r7, r6, r8, r0
 8022338:	2e00      	cmp	r6, #0
 802233a:	eb02 0a07 	add.w	sl, r2, r7
 802233e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8022342:	9d01      	ldr	r5, [sp, #4]
 8022344:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022348:	ea45 0509 	orr.w	r5, r5, r9
 802234c:	9505      	str	r5, [sp, #20]
 802234e:	f2c0 80b2 	blt.w	80224b6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022352:	45b3      	cmp	fp, r6
 8022354:	f340 80af 	ble.w	80224b6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8022358:	2800      	cmp	r0, #0
 802235a:	f2c0 80aa 	blt.w	80224b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 802235e:	4580      	cmp	r8, r0
 8022360:	f340 80a7 	ble.w	80224b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8022364:	9a03      	ldr	r2, [sp, #12]
 8022366:	5dd7      	ldrb	r7, [r2, r7]
 8022368:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802236c:	441f      	add	r7, r3
 802236e:	1c42      	adds	r2, r0, #1
 8022370:	f100 80a4 	bmi.w	80224bc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022374:	4590      	cmp	r8, r2
 8022376:	f340 80a1 	ble.w	80224bc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802237a:	2c00      	cmp	r4, #0
 802237c:	f000 809e 	beq.w	80224bc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8022380:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8022384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022388:	441d      	add	r5, r3
 802238a:	3601      	adds	r6, #1
 802238c:	f100 809a 	bmi.w	80224c4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022390:	45b3      	cmp	fp, r6
 8022392:	f340 8097 	ble.w	80224c4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8022396:	f1bc 0f00 	cmp.w	ip, #0
 802239a:	f000 8093 	beq.w	80224c4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 802239e:	2800      	cmp	r0, #0
 80223a0:	f2c0 808e 	blt.w	80224c0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80223a4:	4580      	cmp	r8, r0
 80223a6:	f340 808b 	ble.w	80224c0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80223aa:	f81a 6008 	ldrb.w	r6, [sl, r8]
 80223ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80223b2:	441e      	add	r6, r3
 80223b4:	3001      	adds	r0, #1
 80223b6:	f100 8088 	bmi.w	80224ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80223ba:	4580      	cmp	r8, r0
 80223bc:	f340 8085 	ble.w	80224ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80223c0:	2c00      	cmp	r4, #0
 80223c2:	f000 8082 	beq.w	80224ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 80223c6:	44d0      	add	r8, sl
 80223c8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80223cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80223d0:	4413      	add	r3, r2
 80223d2:	b2a4      	uxth	r4, r4
 80223d4:	f895 a000 	ldrb.w	sl, [r5]
 80223d8:	fa1f fc8c 	uxth.w	ip, ip
 80223dc:	fb04 fb0c 	mul.w	fp, r4, ip
 80223e0:	0124      	lsls	r4, r4, #4
 80223e2:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80223e6:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 80223ea:	eba4 040b 	sub.w	r4, r4, fp
 80223ee:	fa1f f08c 	uxth.w	r0, ip
 80223f2:	b2a2      	uxth	r2, r4
 80223f4:	783c      	ldrb	r4, [r7, #0]
 80223f6:	eba8 0800 	sub.w	r8, r8, r0
 80223fa:	fa1f fc8e 	uxth.w	ip, lr
 80223fe:	fb02 fa0a 	mul.w	sl, r2, sl
 8022402:	ea6f 0e0e 	mvn.w	lr, lr
 8022406:	fa1f f888 	uxth.w	r8, r8
 802240a:	fa5f fe8e 	uxtb.w	lr, lr
 802240e:	fb08 aa04 	mla	sl, r8, r4, sl
 8022412:	7834      	ldrb	r4, [r6, #0]
 8022414:	fb19 f90e 	smulbb	r9, r9, lr
 8022418:	fb00 aa04 	mla	sl, r0, r4, sl
 802241c:	781c      	ldrb	r4, [r3, #0]
 802241e:	fb0b a404 	mla	r4, fp, r4, sl
 8022422:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022426:	fb04 990c 	mla	r9, r4, ip, r9
 802242a:	fa1f f989 	uxth.w	r9, r9
 802242e:	f109 0401 	add.w	r4, r9, #1
 8022432:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022436:	ea4f 2929 	mov.w	r9, r9, asr #8
 802243a:	f881 9000 	strb.w	r9, [r1]
 802243e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8022442:	787c      	ldrb	r4, [r7, #1]
 8022444:	fb02 f909 	mul.w	r9, r2, r9
 8022448:	fb08 9904 	mla	r9, r8, r4, r9
 802244c:	7874      	ldrb	r4, [r6, #1]
 802244e:	fb00 9904 	mla	r9, r0, r4, r9
 8022452:	785c      	ldrb	r4, [r3, #1]
 8022454:	fb0b 9404 	mla	r4, fp, r4, r9
 8022458:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 802245c:	9c02      	ldr	r4, [sp, #8]
 802245e:	fb14 f90e 	smulbb	r9, r4, lr
 8022462:	fb0a 940c 	mla	r4, sl, ip, r9
 8022466:	b2a4      	uxth	r4, r4
 8022468:	f104 0901 	add.w	r9, r4, #1
 802246c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8022470:	1224      	asrs	r4, r4, #8
 8022472:	704c      	strb	r4, [r1, #1]
 8022474:	78ad      	ldrb	r5, [r5, #2]
 8022476:	78bc      	ldrb	r4, [r7, #2]
 8022478:	436a      	muls	r2, r5
 802247a:	789b      	ldrb	r3, [r3, #2]
 802247c:	fb08 2204 	mla	r2, r8, r4, r2
 8022480:	78b4      	ldrb	r4, [r6, #2]
 8022482:	fb00 2004 	mla	r0, r0, r4, r2
 8022486:	fb0b 0b03 	mla	fp, fp, r3, r0
 802248a:	9b01      	ldr	r3, [sp, #4]
 802248c:	fb13 fe0e 	smulbb	lr, r3, lr
 8022490:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8022494:	fb0b ec0c 	mla	ip, fp, ip, lr
 8022498:	fa1f fc8c 	uxth.w	ip, ip
 802249c:	f10c 0e01 	add.w	lr, ip, #1
 80224a0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80224a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80224a8:	f881 c002 	strb.w	ip, [r1, #2]
 80224ac:	b007      	add	sp, #28
 80224ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224b2:	af05      	add	r7, sp, #20
 80224b4:	e75b      	b.n	802236e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 80224b6:	ad05      	add	r5, sp, #20
 80224b8:	462f      	mov	r7, r5
 80224ba:	e766      	b.n	802238a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80224bc:	ad05      	add	r5, sp, #20
 80224be:	e764      	b.n	802238a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 80224c0:	ae05      	add	r6, sp, #20
 80224c2:	e777      	b.n	80223b4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 80224c4:	ab05      	add	r3, sp, #20
 80224c6:	461e      	mov	r6, r3
 80224c8:	e783      	b.n	80223d2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 80224ca:	ab05      	add	r3, sp, #20
 80224cc:	e781      	b.n	80223d2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

080224ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224d2:	b093      	sub	sp, #76	@ 0x4c
 80224d4:	9210      	str	r2, [sp, #64]	@ 0x40
 80224d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80224d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80224da:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 80224de:	9011      	str	r0, [sp, #68]	@ 0x44
 80224e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80224e2:	6850      	ldr	r0, [r2, #4]
 80224e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80224e6:	6812      	ldr	r2, [r2, #0]
 80224e8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80224ec:	fb00 1303 	mla	r3, r0, r3, r1
 80224f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224f4:	18d3      	adds	r3, r2, r3
 80224f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80224f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80224fa:	681b      	ldr	r3, [r3, #0]
 80224fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80224fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022500:	685c      	ldr	r4, [r3, #4]
 8022502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022504:	3404      	adds	r4, #4
 8022506:	43db      	mvns	r3, r3
 8022508:	b2db      	uxtb	r3, r3
 802250a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802250c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802250e:	2b00      	cmp	r3, #0
 8022510:	dc03      	bgt.n	802251a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022512:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022514:	2b00      	cmp	r3, #0
 8022516:	f340 8250 	ble.w	80229ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802251a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802251c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022520:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022524:	1e48      	subs	r0, r1, #1
 8022526:	1e55      	subs	r5, r2, #1
 8022528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802252a:	2b00      	cmp	r3, #0
 802252c:	f340 80ee 	ble.w	802270c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8022530:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8022532:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022534:	1436      	asrs	r6, r6, #16
 8022536:	ea4f 4323 	mov.w	r3, r3, asr #16
 802253a:	d406      	bmi.n	802254a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802253c:	4286      	cmp	r6, r0
 802253e:	da04      	bge.n	802254a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022540:	2b00      	cmp	r3, #0
 8022542:	db02      	blt.n	802254a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022544:	42ab      	cmp	r3, r5
 8022546:	f2c0 80e2 	blt.w	802270e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802254a:	3601      	adds	r6, #1
 802254c:	f100 80cf 	bmi.w	80226ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022550:	42b1      	cmp	r1, r6
 8022552:	f2c0 80cc 	blt.w	80226ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022556:	3301      	adds	r3, #1
 8022558:	f100 80c9 	bmi.w	80226ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802255c:	429a      	cmp	r2, r3
 802255e:	f2c0 80c6 	blt.w	80226ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8022562:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 8022566:	f1bb 0f00 	cmp.w	fp, #0
 802256a:	f340 80f1 	ble.w	8022750 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802256e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022570:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022572:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8022574:	141d      	asrs	r5, r3, #16
 8022576:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022578:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802257c:	68c7      	ldr	r7, [r0, #12]
 802257e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022580:	1418      	asrs	r0, r3, #16
 8022582:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8022586:	6892      	ldr	r2, [r2, #8]
 8022588:	f100 8137 	bmi.w	80227fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802258c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022590:	4560      	cmp	r0, ip
 8022592:	f280 8132 	bge.w	80227fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022596:	2d00      	cmp	r5, #0
 8022598:	f2c0 812f 	blt.w	80227fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802259c:	f107 3cff 	add.w	ip, r7, #4294967295
 80225a0:	4565      	cmp	r5, ip
 80225a2:	f280 812a 	bge.w	80227fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80225a6:	b212      	sxth	r2, r2
 80225a8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80225aa:	fb05 0002 	mla	r0, r5, r2, r0
 80225ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80225b0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80225b4:	4405      	add	r5, r0
 80225b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80225ba:	eb04 0e0c 	add.w	lr, r4, ip
 80225be:	f1b8 0f00 	cmp.w	r8, #0
 80225c2:	f000 810c 	beq.w	80227de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80225c6:	786f      	ldrb	r7, [r5, #1]
 80225c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80225cc:	4427      	add	r7, r4
 80225ce:	2900      	cmp	r1, #0
 80225d0:	f000 810d 	beq.w	80227ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80225d4:	18a8      	adds	r0, r5, r2
 80225d6:	5caa      	ldrb	r2, [r5, r2]
 80225d8:	7840      	ldrb	r0, [r0, #1]
 80225da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80225de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80225e2:	4422      	add	r2, r4
 80225e4:	4420      	add	r0, r4
 80225e6:	fa1f f388 	uxth.w	r3, r8
 80225ea:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80225ee:	b289      	uxth	r1, r1
 80225f0:	f897 c000 	ldrb.w	ip, [r7]
 80225f4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80225f8:	fb03 f901 	mul.w	r9, r3, r1
 80225fc:	011b      	lsls	r3, r3, #4
 80225fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022602:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8022606:	eba3 0309 	sub.w	r3, r3, r9
 802260a:	b289      	uxth	r1, r1
 802260c:	b29b      	uxth	r3, r3
 802260e:	eba8 0801 	sub.w	r8, r8, r1
 8022612:	fb03 fc0c 	mul.w	ip, r3, ip
 8022616:	fa1f f888 	uxth.w	r8, r8
 802261a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802261c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802261e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8022622:	f892 a000 	ldrb.w	sl, [r2]
 8022626:	fb01 cc0a 	mla	ip, r1, sl, ip
 802262a:	f890 a000 	ldrb.w	sl, [r0]
 802262e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8022632:	f896 a000 	ldrb.w	sl, [r6]
 8022636:	fb1a fa03 	smulbb	sl, sl, r3
 802263a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802263e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022640:	fb0c ac05 	mla	ip, ip, r5, sl
 8022644:	fa1f fc8c 	uxth.w	ip, ip
 8022648:	f10c 0a01 	add.w	sl, ip, #1
 802264c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8022650:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022654:	f886 a000 	strb.w	sl, [r6]
 8022658:	f897 c001 	ldrb.w	ip, [r7, #1]
 802265c:	f89e a001 	ldrb.w	sl, [lr, #1]
 8022660:	fb03 fc0c 	mul.w	ip, r3, ip
 8022664:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022666:	fb08 cc0a 	mla	ip, r8, sl, ip
 802266a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802266e:	fb01 cc0a 	mla	ip, r1, sl, ip
 8022672:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022676:	fb09 cc0a 	mla	ip, r9, sl, ip
 802267a:	f896 a001 	ldrb.w	sl, [r6, #1]
 802267e:	fb1a fa03 	smulbb	sl, sl, r3
 8022682:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022686:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022688:	fb0c ac05 	mla	ip, ip, r5, sl
 802268c:	fa1f fc8c 	uxth.w	ip, ip
 8022690:	f10c 0a01 	add.w	sl, ip, #1
 8022694:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8022698:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802269c:	f886 c001 	strb.w	ip, [r6, #1]
 80226a0:	78bf      	ldrb	r7, [r7, #2]
 80226a2:	f89e c002 	ldrb.w	ip, [lr, #2]
 80226a6:	437b      	muls	r3, r7
 80226a8:	fb08 330c 	mla	r3, r8, ip, r3
 80226ac:	f892 c002 	ldrb.w	ip, [r2, #2]
 80226b0:	7882      	ldrb	r2, [r0, #2]
 80226b2:	fb01 310c 	mla	r1, r1, ip, r3
 80226b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80226b8:	fb09 1902 	mla	r9, r9, r2, r1
 80226bc:	78b1      	ldrb	r1, [r6, #2]
 80226be:	fb11 f103 	smulbb	r1, r1, r3
 80226c2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80226c6:	fb09 1505 	mla	r5, r9, r5, r1
 80226ca:	b2ad      	uxth	r5, r5
 80226cc:	1c6b      	adds	r3, r5, #1
 80226ce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80226d2:	122d      	asrs	r5, r5, #8
 80226d4:	70b5      	strb	r5, [r6, #2]
 80226d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80226d8:	3603      	adds	r6, #3
 80226da:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80226dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80226e0:	4413      	add	r3, r2
 80226e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80226e4:	931d      	str	r3, [sp, #116]	@ 0x74
 80226e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80226e8:	4413      	add	r3, r2
 80226ea:	931e      	str	r3, [sp, #120]	@ 0x78
 80226ec:	e73b      	b.n	8022566 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80226ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80226f0:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80226f2:	4433      	add	r3, r6
 80226f4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80226f6:	931d      	str	r3, [sp, #116]	@ 0x74
 80226f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80226fa:	4433      	add	r3, r6
 80226fc:	931e      	str	r3, [sp, #120]	@ 0x78
 80226fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022700:	3b01      	subs	r3, #1
 8022702:	9309      	str	r3, [sp, #36]	@ 0x24
 8022704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022706:	3303      	adds	r3, #3
 8022708:	930a      	str	r3, [sp, #40]	@ 0x28
 802270a:	e70d      	b.n	8022528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802270c:	d028      	beq.n	8022760 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802270e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022710:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022712:	3b01      	subs	r3, #1
 8022714:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8022716:	fb00 5003 	mla	r0, r0, r3, r5
 802271a:	1400      	asrs	r0, r0, #16
 802271c:	f53f af21 	bmi.w	8022562 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022720:	3901      	subs	r1, #1
 8022722:	4288      	cmp	r0, r1
 8022724:	f6bf af1d 	bge.w	8022562 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022728:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802272a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802272c:	fb01 0303 	mla	r3, r1, r3, r0
 8022730:	141b      	asrs	r3, r3, #16
 8022732:	f53f af16 	bmi.w	8022562 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022736:	3a01      	subs	r2, #1
 8022738:	4293      	cmp	r3, r2
 802273a:	f6bf af12 	bge.w	8022562 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802273e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022740:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8022744:	1cdf      	adds	r7, r3, #3
 8022746:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 802274a:	f1b9 0f00 	cmp.w	r9, #0
 802274e:	dc73      	bgt.n	8022838 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8022750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022752:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802275c:	441a      	add	r2, r3
 802275e:	920a      	str	r2, [sp, #40]	@ 0x28
 8022760:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022762:	2b00      	cmp	r3, #0
 8022764:	f340 8129 	ble.w	80229ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8022768:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802276c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802276e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022772:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022776:	eef0 6a62 	vmov.f32	s13, s5
 802277a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802277e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022782:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022786:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 802278a:	eef0 6a43 	vmov.f32	s13, s6
 802278e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022792:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 8022796:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802279a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802279e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80227a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80227a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80227aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80227ae:	ee12 2a90 	vmov	r2, s5
 80227b2:	eef0 2a47 	vmov.f32	s5, s14
 80227b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80227ba:	ee13 2a10 	vmov	r2, s6
 80227be:	931f      	str	r3, [sp, #124]	@ 0x7c
 80227c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80227c2:	eeb0 3a67 	vmov.f32	s6, s15
 80227c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80227ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80227cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80227ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80227d0:	3b01      	subs	r3, #1
 80227d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80227d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80227d6:	bf08      	it	eq
 80227d8:	4613      	moveq	r3, r2
 80227da:	9309      	str	r3, [sp, #36]	@ 0x24
 80227dc:	e696      	b.n	802250c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80227de:	b149      	cbz	r1, 80227f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80227e0:	5caa      	ldrb	r2, [r5, r2]
 80227e2:	4670      	mov	r0, lr
 80227e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80227e8:	4422      	add	r2, r4
 80227ea:	4677      	mov	r7, lr
 80227ec:	e6fb      	b.n	80225e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80227ee:	4670      	mov	r0, lr
 80227f0:	4672      	mov	r2, lr
 80227f2:	e6f8      	b.n	80225e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80227f4:	4670      	mov	r0, lr
 80227f6:	4672      	mov	r2, lr
 80227f8:	e7f7      	b.n	80227ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80227fa:	f110 0c01 	adds.w	ip, r0, #1
 80227fe:	f53f af6a 	bmi.w	80226d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022802:	4562      	cmp	r2, ip
 8022804:	f6ff af67 	blt.w	80226d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022808:	f115 0c01 	adds.w	ip, r5, #1
 802280c:	f53f af63 	bmi.w	80226d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022810:	4567      	cmp	r7, ip
 8022812:	f6ff af60 	blt.w	80226d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022818:	b23f      	sxth	r7, r7
 802281a:	b212      	sxth	r2, r2
 802281c:	9002      	str	r0, [sp, #8]
 802281e:	9701      	str	r7, [sp, #4]
 8022820:	9200      	str	r2, [sp, #0]
 8022822:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022824:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022826:	e9cd 1305 	strd	r1, r3, [sp, #20]
 802282a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 802282e:	4623      	mov	r3, r4
 8022830:	4631      	mov	r1, r6
 8022832:	f7ff fd69 	bl	8022308 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8022836:	e74e      	b.n	80226d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8022838:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802283a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802283c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022840:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8022842:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022844:	1400      	asrs	r0, r0, #16
 8022846:	142d      	asrs	r5, r5, #16
 8022848:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802284a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802284e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022852:	fb02 5000 	mla	r0, r2, r0, r5
 8022856:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022858:	f815 e000 	ldrb.w	lr, [r5, r0]
 802285c:	eb05 0c00 	add.w	ip, r5, r0
 8022860:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022864:	eb04 060e 	add.w	r6, r4, lr
 8022868:	2b00      	cmp	r3, #0
 802286a:	f000 8097 	beq.w	802299c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802286e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022872:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022876:	4425      	add	r5, r4
 8022878:	2900      	cmp	r1, #0
 802287a:	f000 8098 	beq.w	80229ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 802287e:	eb0c 0002 	add.w	r0, ip, r2
 8022882:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022886:	7840      	ldrb	r0, [r0, #1]
 8022888:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802288c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022890:	4422      	add	r2, r4
 8022892:	4420      	add	r0, r4
 8022894:	b29b      	uxth	r3, r3
 8022896:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802289a:	b289      	uxth	r1, r1
 802289c:	f895 e000 	ldrb.w	lr, [r5]
 80228a0:	3703      	adds	r7, #3
 80228a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80228a6:	fb03 f801 	mul.w	r8, r3, r1
 80228aa:	011b      	lsls	r3, r3, #4
 80228ac:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80228b0:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 80228b4:	eba3 0308 	sub.w	r3, r3, r8
 80228b8:	b289      	uxth	r1, r1
 80228ba:	b29b      	uxth	r3, r3
 80228bc:	ebac 0c01 	sub.w	ip, ip, r1
 80228c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80228c4:	fa1f fc8c 	uxth.w	ip, ip
 80228c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80228ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80228cc:	fb0c ee0b 	mla	lr, ip, fp, lr
 80228d0:	f892 b000 	ldrb.w	fp, [r2]
 80228d4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80228d8:	f890 b000 	ldrb.w	fp, [r0]
 80228dc:	fb08 ee0b 	mla	lr, r8, fp, lr
 80228e0:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80228e4:	fb1b fb03 	smulbb	fp, fp, r3
 80228e8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80228ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80228ee:	fb0e be0a 	mla	lr, lr, sl, fp
 80228f2:	fa1f fe8e 	uxth.w	lr, lr
 80228f6:	f10e 0b01 	add.w	fp, lr, #1
 80228fa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80228fe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022902:	f807 ec06 	strb.w	lr, [r7, #-6]
 8022906:	f895 e001 	ldrb.w	lr, [r5, #1]
 802290a:	f896 b001 	ldrb.w	fp, [r6, #1]
 802290e:	fb03 fe0e 	mul.w	lr, r3, lr
 8022912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022914:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022918:	f892 b001 	ldrb.w	fp, [r2, #1]
 802291c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022920:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022924:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022928:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802292c:	fb1b fb03 	smulbb	fp, fp, r3
 8022930:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022936:	fb0e be0a 	mla	lr, lr, sl, fp
 802293a:	fa1f fe8e 	uxth.w	lr, lr
 802293e:	f10e 0b01 	add.w	fp, lr, #1
 8022942:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022946:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802294a:	f807 ec05 	strb.w	lr, [r7, #-5]
 802294e:	78ad      	ldrb	r5, [r5, #2]
 8022950:	78b6      	ldrb	r6, [r6, #2]
 8022952:	436b      	muls	r3, r5
 8022954:	7895      	ldrb	r5, [r2, #2]
 8022956:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022958:	fb0c 3306 	mla	r3, ip, r6, r3
 802295c:	fb01 3305 	mla	r3, r1, r5, r3
 8022960:	7885      	ldrb	r5, [r0, #2]
 8022962:	fb08 3805 	mla	r8, r8, r5, r3
 8022966:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 802296a:	fb13 f302 	smulbb	r3, r3, r2
 802296e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8022972:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8022974:	fb08 380a 	mla	r8, r8, sl, r3
 8022978:	fa1f f888 	uxth.w	r8, r8
 802297c:	f108 0301 	add.w	r3, r8, #1
 8022980:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8022984:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022986:	4413      	add	r3, r2
 8022988:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802298a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802298e:	931d      	str	r3, [sp, #116]	@ 0x74
 8022990:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022992:	f807 8c04 	strb.w	r8, [r7, #-4]
 8022996:	4413      	add	r3, r2
 8022998:	931e      	str	r3, [sp, #120]	@ 0x78
 802299a:	e6d6      	b.n	802274a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802299c:	b151      	cbz	r1, 80229b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802299e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80229a2:	4630      	mov	r0, r6
 80229a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229a8:	4422      	add	r2, r4
 80229aa:	4635      	mov	r5, r6
 80229ac:	e772      	b.n	8022894 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80229ae:	4630      	mov	r0, r6
 80229b0:	4632      	mov	r2, r6
 80229b2:	e76f      	b.n	8022894 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80229b4:	4630      	mov	r0, r6
 80229b6:	4632      	mov	r2, r6
 80229b8:	e7f7      	b.n	80229aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80229ba:	b013      	add	sp, #76	@ 0x4c
 80229bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080229c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80229c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80229c4:	784c      	ldrb	r4, [r1, #1]
 80229c6:	f891 a002 	ldrb.w	sl, [r1, #2]
 80229ca:	0224      	lsls	r4, r4, #8
 80229cc:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80229d0:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 80229d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80229d8:	f891 a000 	ldrb.w	sl, [r1]
 80229dc:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 80229e0:	ea44 040a 	orr.w	r4, r4, sl
 80229e4:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 80229e8:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 80229ec:	9401      	str	r4, [sp, #4]
 80229ee:	fb05 c70e 	mla	r7, r5, lr, ip
 80229f2:	2d00      	cmp	r5, #0
 80229f4:	eb02 0807 	add.w	r8, r2, r7
 80229f8:	db72      	blt.n	8022ae0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80229fa:	45a9      	cmp	r9, r5
 80229fc:	dd70      	ble.n	8022ae0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80229fe:	f1bc 0f00 	cmp.w	ip, #0
 8022a02:	db6b      	blt.n	8022adc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8022a04:	45e6      	cmp	lr, ip
 8022a06:	dd69      	ble.n	8022adc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8022a08:	5dd7      	ldrb	r7, [r2, r7]
 8022a0a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022a0e:	441f      	add	r7, r3
 8022a10:	f11c 0201 	adds.w	r2, ip, #1
 8022a14:	d467      	bmi.n	8022ae6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8022a16:	4596      	cmp	lr, r2
 8022a18:	dd65      	ble.n	8022ae6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8022a1a:	2800      	cmp	r0, #0
 8022a1c:	d063      	beq.n	8022ae6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8022a1e:	f898 4001 	ldrb.w	r4, [r8, #1]
 8022a22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a26:	441c      	add	r4, r3
 8022a28:	3501      	adds	r5, #1
 8022a2a:	d460      	bmi.n	8022aee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022a2c:	45a9      	cmp	r9, r5
 8022a2e:	dd5e      	ble.n	8022aee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022a30:	2e00      	cmp	r6, #0
 8022a32:	d05c      	beq.n	8022aee <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8022a34:	f1bc 0f00 	cmp.w	ip, #0
 8022a38:	db57      	blt.n	8022aea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8022a3a:	45e6      	cmp	lr, ip
 8022a3c:	dd55      	ble.n	8022aea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8022a3e:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022a46:	441d      	add	r5, r3
 8022a48:	f11c 0201 	adds.w	r2, ip, #1
 8022a4c:	d452      	bmi.n	8022af4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022a4e:	4596      	cmp	lr, r2
 8022a50:	dd50      	ble.n	8022af4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022a52:	2800      	cmp	r0, #0
 8022a54:	d04e      	beq.n	8022af4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8022a56:	44c6      	add	lr, r8
 8022a58:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022a5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a60:	4413      	add	r3, r2
 8022a62:	b280      	uxth	r0, r0
 8022a64:	f897 8000 	ldrb.w	r8, [r7]
 8022a68:	b2b2      	uxth	r2, r6
 8022a6a:	fb00 f602 	mul.w	r6, r0, r2
 8022a6e:	0100      	lsls	r0, r0, #4
 8022a70:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8022a74:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8022a78:	1b80      	subs	r0, r0, r6
 8022a7a:	fa1f fc82 	uxth.w	ip, r2
 8022a7e:	b282      	uxth	r2, r0
 8022a80:	7820      	ldrb	r0, [r4, #0]
 8022a82:	ebae 0e0c 	sub.w	lr, lr, ip
 8022a86:	4350      	muls	r0, r2
 8022a88:	fa1f fe8e 	uxth.w	lr, lr
 8022a8c:	fb0e 0808 	mla	r8, lr, r8, r0
 8022a90:	7828      	ldrb	r0, [r5, #0]
 8022a92:	fb0c 8800 	mla	r8, ip, r0, r8
 8022a96:	7818      	ldrb	r0, [r3, #0]
 8022a98:	fb06 8000 	mla	r0, r6, r0, r8
 8022a9c:	1200      	asrs	r0, r0, #8
 8022a9e:	7008      	strb	r0, [r1, #0]
 8022aa0:	7860      	ldrb	r0, [r4, #1]
 8022aa2:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022aa6:	4350      	muls	r0, r2
 8022aa8:	fb0e 0808 	mla	r8, lr, r8, r0
 8022aac:	7868      	ldrb	r0, [r5, #1]
 8022aae:	fb0c 8800 	mla	r8, ip, r0, r8
 8022ab2:	7858      	ldrb	r0, [r3, #1]
 8022ab4:	fb06 8000 	mla	r0, r6, r0, r8
 8022ab8:	1200      	asrs	r0, r0, #8
 8022aba:	7048      	strb	r0, [r1, #1]
 8022abc:	78a0      	ldrb	r0, [r4, #2]
 8022abe:	78bf      	ldrb	r7, [r7, #2]
 8022ac0:	4350      	muls	r0, r2
 8022ac2:	78aa      	ldrb	r2, [r5, #2]
 8022ac4:	fb0e 0007 	mla	r0, lr, r7, r0
 8022ac8:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022acc:	789a      	ldrb	r2, [r3, #2]
 8022ace:	fb06 c202 	mla	r2, r6, r2, ip
 8022ad2:	1212      	asrs	r2, r2, #8
 8022ad4:	708a      	strb	r2, [r1, #2]
 8022ad6:	b002      	add	sp, #8
 8022ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022adc:	af01      	add	r7, sp, #4
 8022ade:	e797      	b.n	8022a10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8022ae0:	ac01      	add	r4, sp, #4
 8022ae2:	4627      	mov	r7, r4
 8022ae4:	e7a0      	b.n	8022a28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022ae6:	ac01      	add	r4, sp, #4
 8022ae8:	e79e      	b.n	8022a28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022aea:	ad01      	add	r5, sp, #4
 8022aec:	e7ac      	b.n	8022a48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8022aee:	ab01      	add	r3, sp, #4
 8022af0:	461d      	mov	r5, r3
 8022af2:	e7b6      	b.n	8022a62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8022af4:	ab01      	add	r3, sp, #4
 8022af6:	e7b4      	b.n	8022a62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08022af8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022afc:	b08d      	sub	sp, #52	@ 0x34
 8022afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022b02:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8022b06:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022b08:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022b0a:	9306      	str	r3, [sp, #24]
 8022b0c:	6850      	ldr	r0, [r2, #4]
 8022b0e:	6812      	ldr	r2, [r2, #0]
 8022b10:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8022b12:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 8022b16:	fb00 1303 	mla	r3, r0, r3, r1
 8022b1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b1e:	18d3      	adds	r3, r2, r3
 8022b20:	9307      	str	r3, [sp, #28]
 8022b22:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022b24:	681b      	ldr	r3, [r3, #0]
 8022b26:	9308      	str	r3, [sp, #32]
 8022b28:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022b2a:	685d      	ldr	r5, [r3, #4]
 8022b2c:	3504      	adds	r5, #4
 8022b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	dc03      	bgt.n	8022b3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8022b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	f340 81e6 	ble.w	8022f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8022b3c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022b3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b46:	1e48      	subs	r0, r1, #1
 8022b48:	1e56      	subs	r6, r2, #1
 8022b4a:	9b06      	ldr	r3, [sp, #24]
 8022b4c:	2b00      	cmp	r3, #0
 8022b4e:	f340 80bd 	ble.w	8022ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022b52:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022b54:	1427      	asrs	r7, r4, #16
 8022b56:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022b5a:	d406      	bmi.n	8022b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022b5c:	4287      	cmp	r7, r0
 8022b5e:	da04      	bge.n	8022b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	db02      	blt.n	8022b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022b64:	42b3      	cmp	r3, r6
 8022b66:	f2c0 80b2 	blt.w	8022cce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8022b6a:	3701      	adds	r7, #1
 8022b6c:	f100 80a1 	bmi.w	8022cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022b70:	42b9      	cmp	r1, r7
 8022b72:	f2c0 809e 	blt.w	8022cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022b76:	3301      	adds	r3, #1
 8022b78:	f100 809b 	bmi.w	8022cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022b7c:	429a      	cmp	r2, r3
 8022b7e:	f2c0 8098 	blt.w	8022cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022b82:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8022b86:	f1bb 0f00 	cmp.w	fp, #0
 8022b8a:	f340 80bf 	ble.w	8022d0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022b8e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022b90:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8022b92:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022b94:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022b98:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8022b9c:	1420      	asrs	r0, r4, #16
 8022b9e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022ba0:	ea4f 4723 	mov.w	r7, r3, asr #16
 8022ba4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022ba8:	6892      	ldr	r2, [r2, #8]
 8022baa:	f100 8103 	bmi.w	8022db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022bae:	f102 3eff 	add.w	lr, r2, #4294967295
 8022bb2:	4570      	cmp	r0, lr
 8022bb4:	f280 80fe 	bge.w	8022db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022bb8:	2f00      	cmp	r7, #0
 8022bba:	f2c0 80fb 	blt.w	8022db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022bbe:	f10c 3eff 	add.w	lr, ip, #4294967295
 8022bc2:	4577      	cmp	r7, lr
 8022bc4:	f280 80f6 	bge.w	8022db4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8022bc8:	b212      	sxth	r2, r2
 8022bca:	fb07 0002 	mla	r0, r7, r2, r0
 8022bce:	9f08      	ldr	r7, [sp, #32]
 8022bd0:	f817 8000 	ldrb.w	r8, [r7, r0]
 8022bd4:	eb07 0e00 	add.w	lr, r7, r0
 8022bd8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022bdc:	eb05 0c08 	add.w	ip, r5, r8
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	f000 80d8 	beq.w	8022d96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022be6:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8022bea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022bee:	442f      	add	r7, r5
 8022bf0:	2900      	cmp	r1, #0
 8022bf2:	f000 80d9 	beq.w	8022da8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022bf6:	eb0e 0002 	add.w	r0, lr, r2
 8022bfa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022bfe:	7840      	ldrb	r0, [r0, #1]
 8022c00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022c08:	442a      	add	r2, r5
 8022c0a:	4428      	add	r0, r5
 8022c0c:	b29b      	uxth	r3, r3
 8022c0e:	f815 a008 	ldrb.w	sl, [r5, r8]
 8022c12:	b289      	uxth	r1, r1
 8022c14:	f897 8000 	ldrb.w	r8, [r7]
 8022c18:	fb03 f901 	mul.w	r9, r3, r1
 8022c1c:	011b      	lsls	r3, r3, #4
 8022c1e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022c22:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022c26:	eba3 0309 	sub.w	r3, r3, r9
 8022c2a:	b289      	uxth	r1, r1
 8022c2c:	b29b      	uxth	r3, r3
 8022c2e:	ebae 0e01 	sub.w	lr, lr, r1
 8022c32:	fb03 f808 	mul.w	r8, r3, r8
 8022c36:	fa1f fe8e 	uxth.w	lr, lr
 8022c3a:	fb0e 880a 	mla	r8, lr, sl, r8
 8022c3e:	f892 a000 	ldrb.w	sl, [r2]
 8022c42:	fb01 880a 	mla	r8, r1, sl, r8
 8022c46:	f890 a000 	ldrb.w	sl, [r0]
 8022c4a:	fb09 880a 	mla	r8, r9, sl, r8
 8022c4e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022c52:	f886 8000 	strb.w	r8, [r6]
 8022c56:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022c5a:	f89c a001 	ldrb.w	sl, [ip, #1]
 8022c5e:	fb03 f808 	mul.w	r8, r3, r8
 8022c62:	fb0e 880a 	mla	r8, lr, sl, r8
 8022c66:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022c6a:	fb01 880a 	mla	r8, r1, sl, r8
 8022c6e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022c72:	fb09 880a 	mla	r8, r9, sl, r8
 8022c76:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022c7a:	f886 8001 	strb.w	r8, [r6, #1]
 8022c7e:	78bf      	ldrb	r7, [r7, #2]
 8022c80:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022c84:	437b      	muls	r3, r7
 8022c86:	7892      	ldrb	r2, [r2, #2]
 8022c88:	fb0e 330c 	mla	r3, lr, ip, r3
 8022c8c:	fb01 3102 	mla	r1, r1, r2, r3
 8022c90:	7882      	ldrb	r2, [r0, #2]
 8022c92:	fb09 1902 	mla	r9, r9, r2, r1
 8022c96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022c9a:	f886 9002 	strb.w	r9, [r6, #2]
 8022c9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022ca0:	3603      	adds	r6, #3
 8022ca2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022ca4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022ca8:	441c      	add	r4, r3
 8022caa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022cac:	4413      	add	r3, r2
 8022cae:	9318      	str	r3, [sp, #96]	@ 0x60
 8022cb0:	e769      	b.n	8022b86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022cb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022cb4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8022cb6:	441c      	add	r4, r3
 8022cb8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022cba:	443b      	add	r3, r7
 8022cbc:	9318      	str	r3, [sp, #96]	@ 0x60
 8022cbe:	9b06      	ldr	r3, [sp, #24]
 8022cc0:	3b01      	subs	r3, #1
 8022cc2:	9306      	str	r3, [sp, #24]
 8022cc4:	9b07      	ldr	r3, [sp, #28]
 8022cc6:	3303      	adds	r3, #3
 8022cc8:	9307      	str	r3, [sp, #28]
 8022cca:	e73e      	b.n	8022b4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022ccc:	d026      	beq.n	8022d1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022cce:	9b06      	ldr	r3, [sp, #24]
 8022cd0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8022cd2:	3b01      	subs	r3, #1
 8022cd4:	fb00 4003 	mla	r0, r0, r3, r4
 8022cd8:	1400      	asrs	r0, r0, #16
 8022cda:	f53f af52 	bmi.w	8022b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022cde:	3901      	subs	r1, #1
 8022ce0:	4288      	cmp	r0, r1
 8022ce2:	f6bf af4e 	bge.w	8022b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022ce6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022ce8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8022cea:	fb01 0303 	mla	r3, r1, r3, r0
 8022cee:	141b      	asrs	r3, r3, #16
 8022cf0:	f53f af47 	bmi.w	8022b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022cf4:	3a01      	subs	r2, #1
 8022cf6:	4293      	cmp	r3, r2
 8022cf8:	f6bf af43 	bge.w	8022b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022cfc:	9b07      	ldr	r3, [sp, #28]
 8022cfe:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022d02:	f103 0803 	add.w	r8, r3, #3
 8022d06:	f1ba 0f00 	cmp.w	sl, #0
 8022d0a:	dc71      	bgt.n	8022df0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022d0c:	9b06      	ldr	r3, [sp, #24]
 8022d0e:	9a07      	ldr	r2, [sp, #28]
 8022d10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022d14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d18:	441a      	add	r2, r3
 8022d1a:	9207      	str	r2, [sp, #28]
 8022d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	f340 80f2 	ble.w	8022f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8022d24:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022d2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d2e:	eeb0 6a62 	vmov.f32	s12, s5
 8022d32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022d36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d3e:	ee16 4a10 	vmov	r4, s12
 8022d42:	eeb0 6a43 	vmov.f32	s12, s6
 8022d46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d4a:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8022d4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d66:	ee12 2a90 	vmov	r2, s5
 8022d6a:	eef0 2a47 	vmov.f32	s5, s14
 8022d6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d72:	ee13 2a10 	vmov	r2, s6
 8022d76:	9319      	str	r3, [sp, #100]	@ 0x64
 8022d78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022d7a:	eeb0 3a67 	vmov.f32	s6, s15
 8022d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8022d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022d88:	3b01      	subs	r3, #1
 8022d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022d8e:	bf08      	it	eq
 8022d90:	4613      	moveq	r3, r2
 8022d92:	9306      	str	r3, [sp, #24]
 8022d94:	e6cb      	b.n	8022b2e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022d96:	b151      	cbz	r1, 8022dae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022d98:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8022d9c:	4660      	mov	r0, ip
 8022d9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022da2:	442a      	add	r2, r5
 8022da4:	4667      	mov	r7, ip
 8022da6:	e731      	b.n	8022c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022da8:	4660      	mov	r0, ip
 8022daa:	4662      	mov	r2, ip
 8022dac:	e72e      	b.n	8022c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022dae:	4660      	mov	r0, ip
 8022db0:	4662      	mov	r2, ip
 8022db2:	e7f7      	b.n	8022da4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8022db4:	f110 0e01 	adds.w	lr, r0, #1
 8022db8:	f53f af71 	bmi.w	8022c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022dbc:	4572      	cmp	r2, lr
 8022dbe:	f6ff af6e 	blt.w	8022c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022dc2:	f117 0e01 	adds.w	lr, r7, #1
 8022dc6:	f53f af6a 	bmi.w	8022c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022dca:	45f4      	cmp	ip, lr
 8022dcc:	f6ff af67 	blt.w	8022c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022dd0:	b212      	sxth	r2, r2
 8022dd2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022dd6:	fa0f f38c 	sxth.w	r3, ip
 8022dda:	9200      	str	r2, [sp, #0]
 8022ddc:	4631      	mov	r1, r6
 8022dde:	9a08      	ldr	r2, [sp, #32]
 8022de0:	9301      	str	r3, [sp, #4]
 8022de2:	462b      	mov	r3, r5
 8022de4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8022de8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022dea:	f7ff fde9 	bl	80229c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8022dee:	e756      	b.n	8022c9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8022df0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022df2:	1426      	asrs	r6, r4, #16
 8022df4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8022df6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022dfa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022dfe:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022e00:	1400      	asrs	r0, r0, #16
 8022e02:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022e06:	fb02 6000 	mla	r0, r2, r0, r6
 8022e0a:	9e08      	ldr	r6, [sp, #32]
 8022e0c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8022e10:	eb06 0c00 	add.w	ip, r6, r0
 8022e14:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022e18:	eb05 070e 	add.w	r7, r5, lr
 8022e1c:	2b00      	cmp	r3, #0
 8022e1e:	d064      	beq.n	8022eea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8022e20:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8022e24:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022e28:	442e      	add	r6, r5
 8022e2a:	2900      	cmp	r1, #0
 8022e2c:	d066      	beq.n	8022efc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8022e2e:	eb0c 0002 	add.w	r0, ip, r2
 8022e32:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022e36:	7840      	ldrb	r0, [r0, #1]
 8022e38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022e40:	442a      	add	r2, r5
 8022e42:	4428      	add	r0, r5
 8022e44:	b29b      	uxth	r3, r3
 8022e46:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8022e4a:	b289      	uxth	r1, r1
 8022e4c:	f896 e000 	ldrb.w	lr, [r6]
 8022e50:	f108 0803 	add.w	r8, r8, #3
 8022e54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022e58:	fb03 f901 	mul.w	r9, r3, r1
 8022e5c:	011b      	lsls	r3, r3, #4
 8022e5e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022e62:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8022e66:	eba3 0309 	sub.w	r3, r3, r9
 8022e6a:	b289      	uxth	r1, r1
 8022e6c:	b29b      	uxth	r3, r3
 8022e6e:	ebac 0c01 	sub.w	ip, ip, r1
 8022e72:	fb03 fe0e 	mul.w	lr, r3, lr
 8022e76:	fa1f fc8c 	uxth.w	ip, ip
 8022e7a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022e7e:	f892 b000 	ldrb.w	fp, [r2]
 8022e82:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022e86:	f890 b000 	ldrb.w	fp, [r0]
 8022e8a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022e8e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022e92:	f808 ec06 	strb.w	lr, [r8, #-6]
 8022e96:	f896 e001 	ldrb.w	lr, [r6, #1]
 8022e9a:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022e9e:	fb03 fe0e 	mul.w	lr, r3, lr
 8022ea2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022ea6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022eaa:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022eae:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022eb2:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022eb6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022eba:	f808 ec05 	strb.w	lr, [r8, #-5]
 8022ebe:	78b6      	ldrb	r6, [r6, #2]
 8022ec0:	78bf      	ldrb	r7, [r7, #2]
 8022ec2:	4373      	muls	r3, r6
 8022ec4:	7896      	ldrb	r6, [r2, #2]
 8022ec6:	7882      	ldrb	r2, [r0, #2]
 8022ec8:	fb0c 3307 	mla	r3, ip, r7, r3
 8022ecc:	fb01 3306 	mla	r3, r1, r6, r3
 8022ed0:	fb09 3902 	mla	r9, r9, r2, r3
 8022ed4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022ed6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022ed8:	441c      	add	r4, r3
 8022eda:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022edc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022ee0:	4413      	add	r3, r2
 8022ee2:	f808 9c04 	strb.w	r9, [r8, #-4]
 8022ee6:	9318      	str	r3, [sp, #96]	@ 0x60
 8022ee8:	e70d      	b.n	8022d06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8022eea:	b151      	cbz	r1, 8022f02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8022eec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022ef0:	4638      	mov	r0, r7
 8022ef2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ef6:	442a      	add	r2, r5
 8022ef8:	463e      	mov	r6, r7
 8022efa:	e7a3      	b.n	8022e44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8022efc:	4638      	mov	r0, r7
 8022efe:	463a      	mov	r2, r7
 8022f00:	e7a0      	b.n	8022e44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8022f02:	4638      	mov	r0, r7
 8022f04:	463a      	mov	r2, r7
 8022f06:	e7f7      	b.n	8022ef8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8022f08:	b00d      	add	sp, #52	@ 0x34
 8022f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8022f0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f12:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8022f16:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8022f1a:	2d00      	cmp	r5, #0
 8022f1c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8022f20:	fb05 700c 	mla	r0, r5, ip, r7
 8022f24:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8022f28:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8022f2c:	eb02 0800 	add.w	r8, r2, r0
 8022f30:	f2c0 8118 	blt.w	8023164 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8022f34:	45a9      	cmp	r9, r5
 8022f36:	f340 8115 	ble.w	8023164 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8022f3a:	2f00      	cmp	r7, #0
 8022f3c:	f2c0 8110 	blt.w	8023160 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8022f40:	45bc      	cmp	ip, r7
 8022f42:	f340 810d 	ble.w	8023160 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8022f46:	5c12      	ldrb	r2, [r2, r0]
 8022f48:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022f4c:	1c7a      	adds	r2, r7, #1
 8022f4e:	f100 810c 	bmi.w	802316a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8022f52:	4594      	cmp	ip, r2
 8022f54:	f340 8109 	ble.w	802316a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8022f58:	2c00      	cmp	r4, #0
 8022f5a:	f000 8108 	beq.w	802316e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8022f5e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022f62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022f66:	3501      	adds	r5, #1
 8022f68:	f100 8105 	bmi.w	8023176 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8022f6c:	45a9      	cmp	r9, r5
 8022f6e:	f340 8102 	ble.w	8023176 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8022f72:	f1be 0f00 	cmp.w	lr, #0
 8022f76:	f000 8101 	beq.w	802317c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8022f7a:	2f00      	cmp	r7, #0
 8022f7c:	f2c0 80f9 	blt.w	8023172 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8022f80:	45bc      	cmp	ip, r7
 8022f82:	f340 80f6 	ble.w	8023172 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8022f86:	f818 200c 	ldrb.w	r2, [r8, ip]
 8022f8a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022f8e:	3701      	adds	r7, #1
 8022f90:	f100 80f7 	bmi.w	8023182 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8022f94:	45bc      	cmp	ip, r7
 8022f96:	f340 80f4 	ble.w	8023182 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8022f9a:	2c00      	cmp	r4, #0
 8022f9c:	f000 80f3 	beq.w	8023186 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8022fa0:	44c4      	add	ip, r8
 8022fa2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022fa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022faa:	fa1f fc84 	uxth.w	ip, r4
 8022fae:	fa1f f48e 	uxth.w	r4, lr
 8022fb2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8022fb6:	fb04 fe0c 	mul.w	lr, r4, ip
 8022fba:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022fbe:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022fc2:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8022fc6:	ebac 070e 	sub.w	r7, ip, lr
 8022fca:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8022fce:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022fd2:	b2a4      	uxth	r4, r4
 8022fd4:	b2bf      	uxth	r7, r7
 8022fd6:	1b1b      	subs	r3, r3, r4
 8022fd8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022fdc:	fb07 fc0a 	mul.w	ip, r7, sl
 8022fe0:	b29b      	uxth	r3, r3
 8022fe2:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022fe6:	9300      	str	r3, [sp, #0]
 8022fe8:	fb04 cc09 	mla	ip, r4, r9, ip
 8022fec:	fb0e cc08 	mla	ip, lr, r8, ip
 8022ff0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022ff4:	9301      	str	r3, [sp, #4]
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	f000 80af 	beq.w	802315a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8022ffc:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8023000:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023004:	fb0b fc0c 	mul.w	ip, fp, ip
 8023008:	fb0b f606 	mul.w	r6, fp, r6
 802300c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023010:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023014:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8023018:	44dc      	add	ip, fp
 802301a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 802301e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023022:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023026:	fb0a fb0b 	mul.w	fp, sl, fp
 802302a:	fb0a fa00 	mul.w	sl, sl, r0
 802302e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8023032:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8023036:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802303a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802303e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023042:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023046:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802304a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802304e:	0a36      	lsrs	r6, r6, #8
 8023050:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023054:	44dc      	add	ip, fp
 8023056:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802305a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802305e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023062:	fb09 fb0b 	mul.w	fp, r9, fp
 8023066:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802306a:	fb09 f905 	mul.w	r9, r9, r5
 802306e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8023072:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023076:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802307a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802307e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023082:	fb0c fc07 	mul.w	ip, ip, r7
 8023086:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802308a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 802308e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023092:	4458      	add	r0, fp
 8023094:	fb08 f505 	mul.w	r5, r8, r5
 8023098:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802309c:	fb08 f802 	mul.w	r8, r8, r2
 80230a0:	0a00      	lsrs	r0, r0, #8
 80230a2:	0a2a      	lsrs	r2, r5, #8
 80230a4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80230a8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80230ac:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80230b0:	4415      	add	r5, r2
 80230b2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80230b6:	0a2d      	lsrs	r5, r5, #8
 80230b8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80230bc:	9a00      	ldr	r2, [sp, #0]
 80230be:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80230c2:	fb03 cc02 	mla	ip, r3, r2, ip
 80230c6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80230ca:	9b01      	ldr	r3, [sp, #4]
 80230cc:	fb05 c50e 	mla	r5, r5, lr, ip
 80230d0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80230d4:	fb00 5004 	mla	r0, r0, r4, r5
 80230d8:	0a00      	lsrs	r0, r0, #8
 80230da:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80230de:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80230e2:	4378      	muls	r0, r7
 80230e4:	fb02 0006 	mla	r0, r2, r6, r0
 80230e8:	fb0e 0e08 	mla	lr, lr, r8, r0
 80230ec:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80230f0:	fb04 e000 	mla	r0, r4, r0, lr
 80230f4:	0a00      	lsrs	r0, r0, #8
 80230f6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80230fa:	4328      	orrs	r0, r5
 80230fc:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8023100:	b2ad      	uxth	r5, r5
 8023102:	b2c4      	uxtb	r4, r0
 8023104:	436b      	muls	r3, r5
 8023106:	fb14 f405 	smulbb	r4, r4, r5
 802310a:	1c5a      	adds	r2, r3, #1
 802310c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023110:	780b      	ldrb	r3, [r1, #0]
 8023112:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8023116:	b2d2      	uxtb	r2, r2
 8023118:	fb03 4302 	mla	r3, r3, r2, r4
 802311c:	b29b      	uxth	r3, r3
 802311e:	1c5c      	adds	r4, r3, #1
 8023120:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023124:	784c      	ldrb	r4, [r1, #1]
 8023126:	fb14 f402 	smulbb	r4, r4, r2
 802312a:	121b      	asrs	r3, r3, #8
 802312c:	700b      	strb	r3, [r1, #0]
 802312e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8023132:	fb03 4305 	mla	r3, r3, r5, r4
 8023136:	b29b      	uxth	r3, r3
 8023138:	1c5c      	adds	r4, r3, #1
 802313a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802313e:	0c04      	lsrs	r4, r0, #16
 8023140:	7888      	ldrb	r0, [r1, #2]
 8023142:	121b      	asrs	r3, r3, #8
 8023144:	fb10 f002 	smulbb	r0, r0, r2
 8023148:	704b      	strb	r3, [r1, #1]
 802314a:	fb04 0005 	mla	r0, r4, r5, r0
 802314e:	b280      	uxth	r0, r0
 8023150:	1c43      	adds	r3, r0, #1
 8023152:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023156:	1200      	asrs	r0, r0, #8
 8023158:	7088      	strb	r0, [r1, #2]
 802315a:	b003      	add	sp, #12
 802315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023160:	2600      	movs	r6, #0
 8023162:	e6f3      	b.n	8022f4c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8023164:	2000      	movs	r0, #0
 8023166:	4606      	mov	r6, r0
 8023168:	e6fd      	b.n	8022f66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802316a:	2000      	movs	r0, #0
 802316c:	e6fb      	b.n	8022f66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802316e:	4620      	mov	r0, r4
 8023170:	e6f9      	b.n	8022f66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8023172:	2500      	movs	r5, #0
 8023174:	e70b      	b.n	8022f8e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8023176:	2200      	movs	r2, #0
 8023178:	4615      	mov	r5, r2
 802317a:	e716      	b.n	8022faa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802317c:	4672      	mov	r2, lr
 802317e:	4675      	mov	r5, lr
 8023180:	e713      	b.n	8022faa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023182:	2200      	movs	r2, #0
 8023184:	e711      	b.n	8022faa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8023186:	4622      	mov	r2, r4
 8023188:	e70f      	b.n	8022faa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0802318a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802318a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802318e:	b09f      	sub	sp, #124	@ 0x7c
 8023190:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023192:	9309      	str	r3, [sp, #36]	@ 0x24
 8023194:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8023196:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802319a:	901d      	str	r0, [sp, #116]	@ 0x74
 802319c:	931c      	str	r3, [sp, #112]	@ 0x70
 802319e:	6850      	ldr	r0, [r2, #4]
 80231a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80231a2:	6812      	ldr	r2, [r2, #0]
 80231a4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80231a6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80231aa:	fb00 1303 	mla	r3, r0, r3, r1
 80231ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80231b2:	18d3      	adds	r3, r2, r3
 80231b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80231b6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80231b8:	681b      	ldr	r3, [r3, #0]
 80231ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80231bc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80231be:	685e      	ldr	r6, [r3, #4]
 80231c0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80231c4:	3604      	adds	r6, #4
 80231c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80231c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80231ca:	2b00      	cmp	r3, #0
 80231cc:	dc03      	bgt.n	80231d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80231ce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	f340 8378 	ble.w	80238c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80231d6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80231d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80231dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80231e0:	1e48      	subs	r0, r1, #1
 80231e2:	1e57      	subs	r7, r2, #1
 80231e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231e6:	2b00      	cmp	r3, #0
 80231e8:	f340 818c 	ble.w	8023504 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80231ec:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80231ee:	142b      	asrs	r3, r5, #16
 80231f0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80231f4:	d406      	bmi.n	8023204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80231f6:	4584      	cmp	ip, r0
 80231f8:	da04      	bge.n	8023204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	db02      	blt.n	8023204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80231fe:	42bb      	cmp	r3, r7
 8023200:	f2c0 8181 	blt.w	8023506 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8023204:	f11c 0c01 	adds.w	ip, ip, #1
 8023208:	f100 816f 	bmi.w	80234ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802320c:	4561      	cmp	r1, ip
 802320e:	f2c0 816c 	blt.w	80234ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023212:	3301      	adds	r3, #1
 8023214:	f100 8169 	bmi.w	80234ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8023218:	429a      	cmp	r2, r3
 802321a:	f2c0 8166 	blt.w	80234ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802321e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023220:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8023222:	931a      	str	r3, [sp, #104]	@ 0x68
 8023224:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8023226:	2b00      	cmp	r3, #0
 8023228:	f340 818c 	ble.w	8023544 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802322c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802322e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023232:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023236:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802323a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802323c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023240:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023242:	141b      	asrs	r3, r3, #16
 8023244:	f100 81d0 	bmi.w	80235e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023248:	f100 38ff 	add.w	r8, r0, #4294967295
 802324c:	4543      	cmp	r3, r8
 802324e:	f280 81cb 	bge.w	80235e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023252:	f1bc 0f00 	cmp.w	ip, #0
 8023256:	f2c0 81c7 	blt.w	80235e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802325a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802325e:	45c4      	cmp	ip, r8
 8023260:	f280 81c2 	bge.w	80235e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023264:	b200      	sxth	r0, r0
 8023266:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023268:	fb0c 3300 	mla	r3, ip, r0, r3
 802326c:	eb04 0803 	add.w	r8, r4, r3
 8023270:	5ce3      	ldrb	r3, [r4, r3]
 8023272:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023276:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802327a:	2a00      	cmp	r2, #0
 802327c:	f000 81a9 	beq.w	80235d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023280:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023284:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023288:	940e      	str	r4, [sp, #56]	@ 0x38
 802328a:	0e24      	lsrs	r4, r4, #24
 802328c:	9415      	str	r4, [sp, #84]	@ 0x54
 802328e:	b179      	cbz	r1, 80232b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8023290:	eb08 0c00 	add.w	ip, r8, r0
 8023294:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023298:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802329c:	900a      	str	r0, [sp, #40]	@ 0x28
 802329e:	0e00      	lsrs	r0, r0, #24
 80232a0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80232a2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80232a6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80232aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80232ac:	0e00      	lsrs	r0, r0, #24
 80232ae:	9016      	str	r0, [sp, #88]	@ 0x58
 80232b0:	b292      	uxth	r2, r2
 80232b2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80232b4:	b289      	uxth	r1, r1
 80232b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80232b8:	fb02 f901 	mul.w	r9, r2, r1
 80232bc:	0112      	lsls	r2, r2, #4
 80232be:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80232c2:	eba2 0809 	sub.w	r8, r2, r9
 80232c6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80232ca:	b289      	uxth	r1, r1
 80232cc:	fa1f f888 	uxth.w	r8, r8
 80232d0:	1a52      	subs	r2, r2, r1
 80232d2:	fb08 f000 	mul.w	r0, r8, r0
 80232d6:	b292      	uxth	r2, r2
 80232d8:	fb02 000e 	mla	r0, r2, lr, r0
 80232dc:	fb01 0004 	mla	r0, r1, r4, r0
 80232e0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80232e2:	fb09 0004 	mla	r0, r9, r4, r0
 80232e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80232ea:	2800      	cmp	r0, #0
 80232ec:	f000 80f2 	beq.w	80234d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80232f0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80232f4:	d01b      	beq.n	802332e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80232f6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80232fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80232fe:	fb0e fa0a 	mul.w	sl, lr, sl
 8023302:	fb0e fe03 	mul.w	lr, lr, r3
 8023306:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802330a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802330e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023312:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023316:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802331a:	4453      	add	r3, sl
 802331c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023320:	0a1b      	lsrs	r3, r3, #8
 8023322:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023326:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802332a:	ea43 030c 	orr.w	r3, r3, ip
 802332e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023330:	2cff      	cmp	r4, #255	@ 0xff
 8023332:	d021      	beq.n	8023378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023334:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023336:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802333a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802333c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023340:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023342:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023346:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023348:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802334c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023350:	fb04 fa0a 	mul.w	sl, r4, sl
 8023354:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023358:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802335c:	44de      	add	lr, fp
 802335e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023362:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023366:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802336a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802336e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023372:	ea4e 040a 	orr.w	r4, lr, sl
 8023376:	940e      	str	r4, [sp, #56]	@ 0x38
 8023378:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802337a:	2cff      	cmp	r4, #255	@ 0xff
 802337c:	d021      	beq.n	80233c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802337e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023380:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023384:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023386:	fb04 fb0b 	mul.w	fp, r4, fp
 802338a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802338c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023390:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023392:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023396:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802339a:	fb04 fa0a 	mul.w	sl, r4, sl
 802339e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233a2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80233a6:	44de      	add	lr, fp
 80233a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80233bc:	ea4e 040a 	orr.w	r4, lr, sl
 80233c0:	940a      	str	r4, [sp, #40]	@ 0x28
 80233c2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80233c4:	2cff      	cmp	r4, #255	@ 0xff
 80233c6:	d021      	beq.n	802340c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80233c8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80233ca:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80233ce:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80233d0:	fb04 fb0b 	mul.w	fp, r4, fp
 80233d4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80233d6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80233da:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80233dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80233e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80233e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80233e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80233ec:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80233f0:	44de      	add	lr, fp
 80233f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023402:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023406:	ea4e 040a 	orr.w	r4, lr, sl
 802340a:	940f      	str	r4, [sp, #60]	@ 0x3c
 802340c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802340e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023412:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023416:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802341a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802341c:	fb08 fc0c 	mul.w	ip, r8, ip
 8023420:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023424:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023428:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802342a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802342e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023432:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023434:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023438:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802343c:	fb08 f80e 	mul.w	r8, r8, lr
 8023440:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023444:	fb02 8303 	mla	r3, r2, r3, r8
 8023448:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802344a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802344e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023452:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023454:	fb01 330a 	mla	r3, r1, sl, r3
 8023458:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802345c:	fb09 3901 	mla	r9, r9, r1, r3
 8023460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023462:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023464:	4343      	muls	r3, r0
 8023466:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802346a:	1c58      	adds	r0, r3, #1
 802346c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8023470:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023474:	ea4c 0c09 	orr.w	ip, ip, r9
 8023478:	783b      	ldrb	r3, [r7, #0]
 802347a:	fa5f f28c 	uxtb.w	r2, ip
 802347e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023482:	fb12 f201 	smulbb	r2, r2, r1
 8023486:	b2c0      	uxtb	r0, r0
 8023488:	fb03 2300 	mla	r3, r3, r0, r2
 802348c:	b29b      	uxth	r3, r3
 802348e:	1c5a      	adds	r2, r3, #1
 8023490:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023494:	787a      	ldrb	r2, [r7, #1]
 8023496:	fb12 f200 	smulbb	r2, r2, r0
 802349a:	121b      	asrs	r3, r3, #8
 802349c:	703b      	strb	r3, [r7, #0]
 802349e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80234a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80234a6:	fb03 2301 	mla	r3, r3, r1, r2
 80234aa:	b29b      	uxth	r3, r3
 80234ac:	1c5a      	adds	r2, r3, #1
 80234ae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80234b2:	121b      	asrs	r3, r3, #8
 80234b4:	707b      	strb	r3, [r7, #1]
 80234b6:	78bb      	ldrb	r3, [r7, #2]
 80234b8:	fb13 f000 	smulbb	r0, r3, r0
 80234bc:	fb0c 0c01 	mla	ip, ip, r1, r0
 80234c0:	fa1f fc8c 	uxth.w	ip, ip
 80234c4:	f10c 0301 	add.w	r3, ip, #1
 80234c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80234cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80234d0:	f887 c002 	strb.w	ip, [r7, #2]
 80234d4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80234d6:	3703      	adds	r7, #3
 80234d8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80234da:	441a      	add	r2, r3
 80234dc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80234de:	441d      	add	r5, r3
 80234e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80234e2:	9229      	str	r2, [sp, #164]	@ 0xa4
 80234e4:	3b01      	subs	r3, #1
 80234e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80234e8:	e69c      	b.n	8023224 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80234ea:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80234ec:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80234ee:	441c      	add	r4, r3
 80234f0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80234f2:	441d      	add	r5, r3
 80234f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234f6:	9429      	str	r4, [sp, #164]	@ 0xa4
 80234f8:	3b01      	subs	r3, #1
 80234fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80234fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80234fe:	3303      	adds	r3, #3
 8023500:	930c      	str	r3, [sp, #48]	@ 0x30
 8023502:	e66f      	b.n	80231e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023504:	d026      	beq.n	8023554 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023508:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802350a:	3b01      	subs	r3, #1
 802350c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802350e:	fb00 4003 	mla	r0, r0, r3, r4
 8023512:	1400      	asrs	r0, r0, #16
 8023514:	f53f ae83 	bmi.w	802321e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023518:	3901      	subs	r1, #1
 802351a:	4288      	cmp	r0, r1
 802351c:	f6bf ae7f 	bge.w	802321e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023520:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8023522:	fb01 5303 	mla	r3, r1, r3, r5
 8023526:	141b      	asrs	r3, r3, #16
 8023528:	f53f ae79 	bmi.w	802321e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802352c:	3a01      	subs	r2, #1
 802352e:	4293      	cmp	r3, r2
 8023530:	f6bf ae75 	bge.w	802321e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023536:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802353a:	f103 0e03 	add.w	lr, r3, #3
 802353e:	f1bb 0f00 	cmp.w	fp, #0
 8023542:	dc71      	bgt.n	8023628 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023546:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802354a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802354c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023550:	4423      	add	r3, r4
 8023552:	930c      	str	r3, [sp, #48]	@ 0x30
 8023554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023556:	2b00      	cmp	r3, #0
 8023558:	f340 81b5 	ble.w	80238c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802355c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023560:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023562:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023566:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802356a:	eef0 6a62 	vmov.f32	s13, s5
 802356e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023572:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023576:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802357a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 802357e:	eef0 6a43 	vmov.f32	s13, s6
 8023582:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023586:	ee16 5a90 	vmov	r5, s13
 802358a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802358e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023592:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023596:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802359a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802359e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80235a2:	ee12 2a90 	vmov	r2, s5
 80235a6:	eef0 2a47 	vmov.f32	s5, s14
 80235aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80235ae:	ee13 2a10 	vmov	r2, s6
 80235b2:	932b      	str	r3, [sp, #172]	@ 0xac
 80235b4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235b6:	eeb0 3a67 	vmov.f32	s6, s15
 80235ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80235be:	932c      	str	r3, [sp, #176]	@ 0xb0
 80235c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80235c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80235c4:	3b01      	subs	r3, #1
 80235c6:	9319      	str	r3, [sp, #100]	@ 0x64
 80235c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80235ca:	bf08      	it	eq
 80235cc:	4613      	moveq	r3, r2
 80235ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80235d0:	e5fa      	b.n	80231c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80235d2:	2900      	cmp	r1, #0
 80235d4:	f43f ae6c 	beq.w	80232b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80235d8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80235dc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80235e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80235e2:	0e00      	lsrs	r0, r0, #24
 80235e4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80235e6:	e663      	b.n	80232b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80235e8:	f113 0801 	adds.w	r8, r3, #1
 80235ec:	f53f af72 	bmi.w	80234d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80235f0:	4540      	cmp	r0, r8
 80235f2:	f6ff af6f 	blt.w	80234d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80235f6:	f11c 0801 	adds.w	r8, ip, #1
 80235fa:	f53f af6b 	bmi.w	80234d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80235fe:	45c6      	cmp	lr, r8
 8023600:	f6ff af68 	blt.w	80234d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023604:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8023606:	b200      	sxth	r0, r0
 8023608:	9302      	str	r3, [sp, #8]
 802360a:	fa0f f38e 	sxth.w	r3, lr
 802360e:	9000      	str	r0, [sp, #0]
 8023610:	9301      	str	r3, [sp, #4]
 8023612:	4633      	mov	r3, r6
 8023614:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023616:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802361a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802361e:	4639      	mov	r1, r7
 8023620:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023622:	f7ff fc74 	bl	8022f0e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8023626:	e755      	b.n	80234d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023628:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802362a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802362e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023630:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023634:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023636:	1427      	asrs	r7, r4, #16
 8023638:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802363a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802363e:	142b      	asrs	r3, r5, #16
 8023640:	fb01 7303 	mla	r3, r1, r3, r7
 8023644:	18e7      	adds	r7, r4, r3
 8023646:	5ce3      	ldrb	r3, [r4, r3]
 8023648:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802364c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023650:	2a00      	cmp	r2, #0
 8023652:	f000 812e 	beq.w	80238b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8023656:	f897 8001 	ldrb.w	r8, [r7, #1]
 802365a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802365e:	9410      	str	r4, [sp, #64]	@ 0x40
 8023660:	0e24      	lsrs	r4, r4, #24
 8023662:	9417      	str	r4, [sp, #92]	@ 0x5c
 8023664:	b170      	cbz	r0, 8023684 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8023666:	eb07 0801 	add.w	r8, r7, r1
 802366a:	5c79      	ldrb	r1, [r7, r1]
 802366c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023670:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023672:	0e09      	lsrs	r1, r1, #24
 8023674:	9114      	str	r1, [sp, #80]	@ 0x50
 8023676:	f898 1001 	ldrb.w	r1, [r8, #1]
 802367a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802367e:	9111      	str	r1, [sp, #68]	@ 0x44
 8023680:	0e09      	lsrs	r1, r1, #24
 8023682:	9118      	str	r1, [sp, #96]	@ 0x60
 8023684:	b292      	uxth	r2, r2
 8023686:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023688:	b280      	uxth	r0, r0
 802368a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802368c:	fb02 f900 	mul.w	r9, r2, r0
 8023690:	0112      	lsls	r2, r2, #4
 8023692:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023696:	eba2 0809 	sub.w	r8, r2, r9
 802369a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802369e:	b280      	uxth	r0, r0
 80236a0:	fa1f f888 	uxth.w	r8, r8
 80236a4:	1a12      	subs	r2, r2, r0
 80236a6:	fb08 f101 	mul.w	r1, r8, r1
 80236aa:	b292      	uxth	r2, r2
 80236ac:	fb02 110c 	mla	r1, r2, ip, r1
 80236b0:	fb00 1104 	mla	r1, r0, r4, r1
 80236b4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80236b6:	fb09 1104 	mla	r1, r9, r4, r1
 80236ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80236be:	2900      	cmp	r1, #0
 80236c0:	f000 80ec 	beq.w	802389c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80236c4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80236c8:	d019      	beq.n	80236fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80236ca:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80236ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80236d2:	fb0c fa0a 	mul.w	sl, ip, sl
 80236d6:	fb0c fc03 	mul.w	ip, ip, r3
 80236da:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80236de:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80236e2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80236e6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80236ea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80236ee:	4453      	add	r3, sl
 80236f0:	0a3f      	lsrs	r7, r7, #8
 80236f2:	0a1b      	lsrs	r3, r3, #8
 80236f4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80236f8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80236fc:	433b      	orrs	r3, r7
 80236fe:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023700:	2cff      	cmp	r4, #255	@ 0xff
 8023702:	d020      	beq.n	8023746 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8023704:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023706:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802370a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802370c:	4367      	muls	r7, r4
 802370e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023710:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023714:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023718:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802371a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802371e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023722:	fb04 fa0a 	mul.w	sl, r4, sl
 8023726:	44bc      	add	ip, r7
 8023728:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802372c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023730:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023734:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023738:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802373c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023740:	ea4c 040a 	orr.w	r4, ip, sl
 8023744:	9410      	str	r4, [sp, #64]	@ 0x40
 8023746:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023748:	2cff      	cmp	r4, #255	@ 0xff
 802374a:	d020      	beq.n	802378e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 802374c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802374e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023752:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023754:	4367      	muls	r7, r4
 8023756:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023758:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802375c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023760:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023762:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023766:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802376a:	fb04 fa0a 	mul.w	sl, r4, sl
 802376e:	44bc      	add	ip, r7
 8023770:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023774:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023778:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802377c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023780:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023784:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023788:	ea4c 040a 	orr.w	r4, ip, sl
 802378c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802378e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023790:	2cff      	cmp	r4, #255	@ 0xff
 8023792:	d020      	beq.n	80237d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8023794:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023796:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802379a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802379c:	4367      	muls	r7, r4
 802379e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80237a0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80237a4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80237a8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80237aa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80237ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80237b6:	44bc      	add	ip, r7
 80237b8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80237bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237c0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237c4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80237c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80237d0:	ea4c 040a 	orr.w	r4, ip, sl
 80237d4:	9411      	str	r4, [sp, #68]	@ 0x44
 80237d6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80237d8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80237dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80237e0:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80237e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80237e6:	fb08 f707 	mul.w	r7, r8, r7
 80237ea:	fb02 770c 	mla	r7, r2, ip, r7
 80237ee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80237f2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80237f4:	fb00 770c 	mla	r7, r0, ip, r7
 80237f8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80237fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80237fe:	fb09 770c 	mla	r7, r9, ip, r7
 8023802:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8023806:	fb08 f80c 	mul.w	r8, r8, ip
 802380a:	0a3f      	lsrs	r7, r7, #8
 802380c:	fb02 8303 	mla	r3, r2, r3, r8
 8023810:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023812:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8023816:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802381a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802381c:	fb00 330a 	mla	r3, r0, sl, r3
 8023820:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8023824:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023826:	fb09 3c0c 	mla	ip, r9, ip, r3
 802382a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802382c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023830:	434b      	muls	r3, r1
 8023832:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023836:	1c59      	adds	r1, r3, #1
 8023838:	ea47 070c 	orr.w	r7, r7, ip
 802383c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023840:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023844:	b2fa      	uxtb	r2, r7
 8023846:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802384a:	fb12 f200 	smulbb	r2, r2, r0
 802384e:	b2c9      	uxtb	r1, r1
 8023850:	fb03 2301 	mla	r3, r3, r1, r2
 8023854:	b29b      	uxth	r3, r3
 8023856:	1c5a      	adds	r2, r3, #1
 8023858:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802385c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023860:	fb12 f201 	smulbb	r2, r2, r1
 8023864:	121b      	asrs	r3, r3, #8
 8023866:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802386a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802386e:	0c3f      	lsrs	r7, r7, #16
 8023870:	fb03 2300 	mla	r3, r3, r0, r2
 8023874:	b29b      	uxth	r3, r3
 8023876:	1c5a      	adds	r2, r3, #1
 8023878:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802387c:	121b      	asrs	r3, r3, #8
 802387e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023882:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8023886:	fb13 f101 	smulbb	r1, r3, r1
 802388a:	fb07 1700 	mla	r7, r7, r0, r1
 802388e:	b2bf      	uxth	r7, r7
 8023890:	1c7b      	adds	r3, r7, #1
 8023892:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023896:	123f      	asrs	r7, r7, #8
 8023898:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802389c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802389e:	f10e 0e03 	add.w	lr, lr, #3
 80238a2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80238a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80238a8:	441a      	add	r2, r3
 80238aa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80238ac:	9229      	str	r2, [sp, #164]	@ 0xa4
 80238ae:	441d      	add	r5, r3
 80238b0:	e645      	b.n	802353e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80238b2:	2800      	cmp	r0, #0
 80238b4:	f43f aee6 	beq.w	8023684 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80238b8:	5c79      	ldrb	r1, [r7, r1]
 80238ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80238be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80238c0:	0e09      	lsrs	r1, r1, #24
 80238c2:	9114      	str	r1, [sp, #80]	@ 0x50
 80238c4:	e6de      	b.n	8023684 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80238c6:	b01f      	add	sp, #124	@ 0x7c
 80238c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080238cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80238cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238d0:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80238d4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80238d8:	2d00      	cmp	r5, #0
 80238da:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80238de:	fb05 700e 	mla	r0, r5, lr, r7
 80238e2:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80238e6:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 80238ea:	eb02 0800 	add.w	r8, r2, r0
 80238ee:	f2c0 8105 	blt.w	8023afc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80238f2:	45a9      	cmp	r9, r5
 80238f4:	f340 8102 	ble.w	8023afc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80238f8:	2f00      	cmp	r7, #0
 80238fa:	f2c0 80fd 	blt.w	8023af8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80238fe:	45be      	cmp	lr, r7
 8023900:	f340 80fa 	ble.w	8023af8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8023904:	5c12      	ldrb	r2, [r2, r0]
 8023906:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802390a:	1c7a      	adds	r2, r7, #1
 802390c:	f100 80f9 	bmi.w	8023b02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8023910:	4596      	cmp	lr, r2
 8023912:	f340 80f6 	ble.w	8023b02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8023916:	2c00      	cmp	r4, #0
 8023918:	f000 80f5 	beq.w	8023b06 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 802391c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023920:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023924:	3501      	adds	r5, #1
 8023926:	f100 80f2 	bmi.w	8023b0e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 802392a:	45a9      	cmp	r9, r5
 802392c:	f340 80ef 	ble.w	8023b0e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8023930:	f1bc 0f00 	cmp.w	ip, #0
 8023934:	f000 80ee 	beq.w	8023b14 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8023938:	2f00      	cmp	r7, #0
 802393a:	f2c0 80e6 	blt.w	8023b0a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802393e:	45be      	cmp	lr, r7
 8023940:	f340 80e3 	ble.w	8023b0a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8023944:	f818 200e 	ldrb.w	r2, [r8, lr]
 8023948:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802394c:	3701      	adds	r7, #1
 802394e:	f100 80e4 	bmi.w	8023b1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8023952:	45be      	cmp	lr, r7
 8023954:	f340 80e1 	ble.w	8023b1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8023958:	2c00      	cmp	r4, #0
 802395a:	f000 80e0 	beq.w	8023b1e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 802395e:	44c6      	add	lr, r8
 8023960:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023964:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023968:	b2a3      	uxth	r3, r4
 802396a:	fa1f fc8c 	uxth.w	ip, ip
 802396e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023972:	fb0c fe03 	mul.w	lr, ip, r3
 8023976:	011b      	lsls	r3, r3, #4
 8023978:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802397c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8023980:	eba3 070e 	sub.w	r7, r3, lr
 8023984:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8023988:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802398c:	fa1f f48c 	uxth.w	r4, ip
 8023990:	b2bf      	uxth	r7, r7
 8023992:	1b1b      	subs	r3, r3, r4
 8023994:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023998:	fb07 fc0a 	mul.w	ip, r7, sl
 802399c:	b29b      	uxth	r3, r3
 802399e:	fb03 cc0b 	mla	ip, r3, fp, ip
 80239a2:	9300      	str	r3, [sp, #0]
 80239a4:	fb04 cc09 	mla	ip, r4, r9, ip
 80239a8:	fb0e cc08 	mla	ip, lr, r8, ip
 80239ac:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80239b0:	9301      	str	r3, [sp, #4]
 80239b2:	2b00      	cmp	r3, #0
 80239b4:	f000 809d 	beq.w	8023af2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80239b8:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80239bc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80239c0:	fb0b fc0c 	mul.w	ip, fp, ip
 80239c4:	fb0b f606 	mul.w	r6, fp, r6
 80239c8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80239cc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80239d0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80239d4:	44dc      	add	ip, fp
 80239d6:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80239da:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80239de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239e2:	fb0a fb0b 	mul.w	fp, sl, fp
 80239e6:	fb0a fa00 	mul.w	sl, sl, r0
 80239ea:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80239ee:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80239f2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80239f6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80239fa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80239fe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023a02:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023a06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a0a:	0a36      	lsrs	r6, r6, #8
 8023a0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a10:	44dc      	add	ip, fp
 8023a12:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8023a16:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023a1a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023a1e:	fb09 fb0b 	mul.w	fp, r9, fp
 8023a22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a26:	fb09 f905 	mul.w	r9, r9, r5
 8023a2a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8023a2e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a32:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8023a36:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023a3a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023a3e:	fb0c fc07 	mul.w	ip, ip, r7
 8023a42:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8023a46:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8023a4a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023a4e:	4458      	add	r0, fp
 8023a50:	fb08 f505 	mul.w	r5, r8, r5
 8023a54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023a58:	fb08 f802 	mul.w	r8, r8, r2
 8023a5c:	0a00      	lsrs	r0, r0, #8
 8023a5e:	0a2a      	lsrs	r2, r5, #8
 8023a60:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8023a64:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023a68:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023a6c:	4415      	add	r5, r2
 8023a6e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8023a72:	0a2d      	lsrs	r5, r5, #8
 8023a74:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023a78:	9a00      	ldr	r2, [sp, #0]
 8023a7a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023a7e:	fb03 cc02 	mla	ip, r3, r2, ip
 8023a82:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023a86:	9b01      	ldr	r3, [sp, #4]
 8023a88:	fb05 c50e 	mla	r5, r5, lr, ip
 8023a8c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8023a90:	43db      	mvns	r3, r3
 8023a92:	fb00 5004 	mla	r0, r0, r4, r5
 8023a96:	b2db      	uxtb	r3, r3
 8023a98:	0a00      	lsrs	r0, r0, #8
 8023a9a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8023a9e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8023aa2:	4378      	muls	r0, r7
 8023aa4:	fb02 0006 	mla	r0, r2, r6, r0
 8023aa8:	780a      	ldrb	r2, [r1, #0]
 8023aaa:	fb0e 0e08 	mla	lr, lr, r8, r0
 8023aae:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8023ab2:	fb04 e000 	mla	r0, r4, r0, lr
 8023ab6:	fb02 f403 	mul.w	r4, r2, r3
 8023aba:	0a00      	lsrs	r0, r0, #8
 8023abc:	1c62      	adds	r2, r4, #1
 8023abe:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023ac2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023ac6:	4328      	orrs	r0, r5
 8023ac8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023acc:	700a      	strb	r2, [r1, #0]
 8023ace:	784a      	ldrb	r2, [r1, #1]
 8023ad0:	435a      	muls	r2, r3
 8023ad2:	1c54      	adds	r4, r2, #1
 8023ad4:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8023ad8:	0a02      	lsrs	r2, r0, #8
 8023ada:	0c00      	lsrs	r0, r0, #16
 8023adc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8023ae0:	704a      	strb	r2, [r1, #1]
 8023ae2:	788a      	ldrb	r2, [r1, #2]
 8023ae4:	4353      	muls	r3, r2
 8023ae6:	1c5a      	adds	r2, r3, #1
 8023ae8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023aec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023af0:	7088      	strb	r0, [r1, #2]
 8023af2:	b003      	add	sp, #12
 8023af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023af8:	2600      	movs	r6, #0
 8023afa:	e706      	b.n	802390a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8023afc:	2000      	movs	r0, #0
 8023afe:	4606      	mov	r6, r0
 8023b00:	e710      	b.n	8023924 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8023b02:	2000      	movs	r0, #0
 8023b04:	e70e      	b.n	8023924 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8023b06:	4620      	mov	r0, r4
 8023b08:	e70c      	b.n	8023924 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8023b0a:	2500      	movs	r5, #0
 8023b0c:	e71e      	b.n	802394c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8023b0e:	2200      	movs	r2, #0
 8023b10:	4615      	mov	r5, r2
 8023b12:	e729      	b.n	8023968 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8023b14:	4662      	mov	r2, ip
 8023b16:	4665      	mov	r5, ip
 8023b18:	e726      	b.n	8023968 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8023b1a:	2200      	movs	r2, #0
 8023b1c:	e724      	b.n	8023968 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8023b1e:	4622      	mov	r2, r4
 8023b20:	e722      	b.n	8023968 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08023b22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b26:	b09b      	sub	sp, #108	@ 0x6c
 8023b28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023b2c:	9218      	str	r2, [sp, #96]	@ 0x60
 8023b2e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023b30:	9019      	str	r0, [sp, #100]	@ 0x64
 8023b32:	9116      	str	r1, [sp, #88]	@ 0x58
 8023b34:	6850      	ldr	r0, [r2, #4]
 8023b36:	9307      	str	r3, [sp, #28]
 8023b38:	6812      	ldr	r2, [r2, #0]
 8023b3a:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8023b3c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8023b40:	fb00 1303 	mla	r3, r0, r3, r1
 8023b44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023b48:	18d3      	adds	r3, r2, r3
 8023b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8023b4c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023b4e:	681b      	ldr	r3, [r3, #0]
 8023b50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023b52:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023b54:	685e      	ldr	r6, [r3, #4]
 8023b56:	3604      	adds	r6, #4
 8023b58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	dc03      	bgt.n	8023b66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023b5e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023b60:	2b00      	cmp	r3, #0
 8023b62:	f340 834f 	ble.w	8024204 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8023b66:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023b68:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b6c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b70:	1e48      	subs	r0, r1, #1
 8023b72:	1e57      	subs	r7, r2, #1
 8023b74:	9b07      	ldr	r3, [sp, #28]
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	f340 8178 	ble.w	8023e6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023b7c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023b7e:	142b      	asrs	r3, r5, #16
 8023b80:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023b84:	d406      	bmi.n	8023b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023b86:	4584      	cmp	ip, r0
 8023b88:	da04      	bge.n	8023b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023b8a:	2b00      	cmp	r3, #0
 8023b8c:	db02      	blt.n	8023b94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023b8e:	42bb      	cmp	r3, r7
 8023b90:	f2c0 816d 	blt.w	8023e6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023b94:	f11c 0c01 	adds.w	ip, ip, #1
 8023b98:	f100 815b 	bmi.w	8023e52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023b9c:	4561      	cmp	r1, ip
 8023b9e:	f2c0 8158 	blt.w	8023e52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023ba2:	3301      	adds	r3, #1
 8023ba4:	f100 8155 	bmi.w	8023e52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023ba8:	429a      	cmp	r2, r3
 8023baa:	f2c0 8152 	blt.w	8023e52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023bae:	9b07      	ldr	r3, [sp, #28]
 8023bb0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023bb2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023bb4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023bb6:	2b00      	cmp	r3, #0
 8023bb8:	f340 8178 	ble.w	8023eac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023bbc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023bbe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023bc2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023bc6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023bca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023bcc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023bd0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023bd2:	141b      	asrs	r3, r3, #16
 8023bd4:	f100 81ba 	bmi.w	8023f4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023bd8:	f101 38ff 	add.w	r8, r1, #4294967295
 8023bdc:	4543      	cmp	r3, r8
 8023bde:	f280 81b5 	bge.w	8023f4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023be2:	f1bc 0f00 	cmp.w	ip, #0
 8023be6:	f2c0 81b1 	blt.w	8023f4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023bea:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023bee:	45c4      	cmp	ip, r8
 8023bf0:	f280 81ac 	bge.w	8023f4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023bf4:	b209      	sxth	r1, r1
 8023bf6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023bf8:	fb0c 3301 	mla	r3, ip, r1, r3
 8023bfc:	eb04 0803 	add.w	r8, r4, r3
 8023c00:	5ce3      	ldrb	r3, [r4, r3]
 8023c02:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023c06:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023c0a:	2a00      	cmp	r2, #0
 8023c0c:	f000 8193 	beq.w	8023f36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8023c10:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023c14:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023c18:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023c1a:	0e24      	lsrs	r4, r4, #24
 8023c1c:	9412      	str	r4, [sp, #72]	@ 0x48
 8023c1e:	b178      	cbz	r0, 8023c40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8023c20:	eb08 0c01 	add.w	ip, r8, r1
 8023c24:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023c28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023c2c:	9108      	str	r1, [sp, #32]
 8023c2e:	0e09      	lsrs	r1, r1, #24
 8023c30:	9110      	str	r1, [sp, #64]	@ 0x40
 8023c32:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023c36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023c3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8023c3c:	0e09      	lsrs	r1, r1, #24
 8023c3e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8023c40:	b292      	uxth	r2, r2
 8023c42:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023c44:	b280      	uxth	r0, r0
 8023c46:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023c48:	fb02 f900 	mul.w	r9, r2, r0
 8023c4c:	0112      	lsls	r2, r2, #4
 8023c4e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023c52:	eba2 0809 	sub.w	r8, r2, r9
 8023c56:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023c5a:	b280      	uxth	r0, r0
 8023c5c:	fa1f f888 	uxth.w	r8, r8
 8023c60:	1a12      	subs	r2, r2, r0
 8023c62:	fb08 f101 	mul.w	r1, r8, r1
 8023c66:	b292      	uxth	r2, r2
 8023c68:	fb02 110e 	mla	r1, r2, lr, r1
 8023c6c:	fb00 1104 	mla	r1, r0, r4, r1
 8023c70:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023c72:	fb09 1104 	mla	r1, r9, r4, r1
 8023c76:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023c7a:	2900      	cmp	r1, #0
 8023c7c:	f000 80de 	beq.w	8023e3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023c80:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023c84:	d01b      	beq.n	8023cbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023c86:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023c8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023c8e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023c92:	fb0e fe03 	mul.w	lr, lr, r3
 8023c96:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023c9a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023c9e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023ca2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023ca6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023caa:	4453      	add	r3, sl
 8023cac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cb0:	0a1b      	lsrs	r3, r3, #8
 8023cb2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023cb6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023cba:	ea43 030c 	orr.w	r3, r3, ip
 8023cbe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023cc0:	2cff      	cmp	r4, #255	@ 0xff
 8023cc2:	d021      	beq.n	8023d08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023cc4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023cc6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023cca:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023ccc:	fb04 fb0b 	mul.w	fp, r4, fp
 8023cd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023cd2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023cd6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023cd8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023cdc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023ce0:	fb04 fa0a 	mul.w	sl, r4, sl
 8023ce4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023ce8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023cec:	44de      	add	lr, fp
 8023cee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023cf2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023cf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cfa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023cfe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d02:	ea4e 040a 	orr.w	r4, lr, sl
 8023d06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023d08:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023d0a:	2cff      	cmp	r4, #255	@ 0xff
 8023d0c:	d021      	beq.n	8023d52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023d0e:	9c08      	ldr	r4, [sp, #32]
 8023d10:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023d14:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023d16:	fb04 fb0b 	mul.w	fp, r4, fp
 8023d1a:	9c08      	ldr	r4, [sp, #32]
 8023d1c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023d20:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023d22:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d26:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023d2a:	fb04 fa0a 	mul.w	sl, r4, sl
 8023d2e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d32:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023d36:	44de      	add	lr, fp
 8023d38:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d44:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d48:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d4c:	ea4e 040a 	orr.w	r4, lr, sl
 8023d50:	9408      	str	r4, [sp, #32]
 8023d52:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023d54:	2cff      	cmp	r4, #255	@ 0xff
 8023d56:	d021      	beq.n	8023d9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023d58:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023d5a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023d5e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023d60:	fb04 fb0b 	mul.w	fp, r4, fp
 8023d64:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023d66:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023d6a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023d6c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023d70:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023d74:	fb04 fa0a 	mul.w	sl, r4, sl
 8023d78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d7c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023d80:	44de      	add	lr, fp
 8023d82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023d86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d8e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023d92:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d96:	ea4e 040a 	orr.w	r4, lr, sl
 8023d9a:	940c      	str	r4, [sp, #48]	@ 0x30
 8023d9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023d9e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023da2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023da6:	43c9      	mvns	r1, r1
 8023da8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023dac:	9c08      	ldr	r4, [sp, #32]
 8023dae:	b2c9      	uxtb	r1, r1
 8023db0:	fb08 fc0c 	mul.w	ip, r8, ip
 8023db4:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023db8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023dbc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023dbe:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023dc2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023dc6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023dc8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023dcc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023dd0:	fb08 f80e 	mul.w	r8, r8, lr
 8023dd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023dd8:	fb02 8303 	mla	r3, r2, r3, r8
 8023ddc:	9a08      	ldr	r2, [sp, #32]
 8023dde:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023de2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023de6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023de8:	fb00 330a 	mla	r3, r0, sl, r3
 8023dec:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8023df0:	fb09 3900 	mla	r9, r9, r0, r3
 8023df4:	783b      	ldrb	r3, [r7, #0]
 8023df6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023dfa:	fb03 f201 	mul.w	r2, r3, r1
 8023dfe:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8023e02:	1c53      	adds	r3, r2, #1
 8023e04:	ea4c 0c09 	orr.w	ip, ip, r9
 8023e08:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023e0c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023e10:	703b      	strb	r3, [r7, #0]
 8023e12:	787b      	ldrb	r3, [r7, #1]
 8023e14:	434b      	muls	r3, r1
 8023e16:	1c5a      	adds	r2, r3, #1
 8023e18:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023e1c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023e20:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023e24:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023e28:	707b      	strb	r3, [r7, #1]
 8023e2a:	78bb      	ldrb	r3, [r7, #2]
 8023e2c:	4359      	muls	r1, r3
 8023e2e:	1c4b      	adds	r3, r1, #1
 8023e30:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023e34:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023e38:	f887 c002 	strb.w	ip, [r7, #2]
 8023e3c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023e3e:	3703      	adds	r7, #3
 8023e40:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8023e42:	441a      	add	r2, r3
 8023e44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023e46:	441d      	add	r5, r3
 8023e48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023e4a:	9225      	str	r2, [sp, #148]	@ 0x94
 8023e4c:	3b01      	subs	r3, #1
 8023e4e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023e50:	e6b0      	b.n	8023bb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023e52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023e54:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023e56:	441c      	add	r4, r3
 8023e58:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023e5a:	441d      	add	r5, r3
 8023e5c:	9b07      	ldr	r3, [sp, #28]
 8023e5e:	9425      	str	r4, [sp, #148]	@ 0x94
 8023e60:	3b01      	subs	r3, #1
 8023e62:	9307      	str	r3, [sp, #28]
 8023e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e66:	3303      	adds	r3, #3
 8023e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e6a:	e683      	b.n	8023b74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023e6c:	d026      	beq.n	8023ebc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8023e6e:	9b07      	ldr	r3, [sp, #28]
 8023e70:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8023e72:	3b01      	subs	r3, #1
 8023e74:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023e76:	fb00 4003 	mla	r0, r0, r3, r4
 8023e7a:	1400      	asrs	r0, r0, #16
 8023e7c:	f53f ae97 	bmi.w	8023bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023e80:	3901      	subs	r1, #1
 8023e82:	4288      	cmp	r0, r1
 8023e84:	f6bf ae93 	bge.w	8023bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023e88:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8023e8a:	fb01 5303 	mla	r3, r1, r3, r5
 8023e8e:	141b      	asrs	r3, r3, #16
 8023e90:	f53f ae8d 	bmi.w	8023bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023e94:	3a01      	subs	r2, #1
 8023e96:	4293      	cmp	r3, r2
 8023e98:	f6bf ae89 	bge.w	8023bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e9e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023ea2:	f103 0e03 	add.w	lr, r3, #3
 8023ea6:	f1bb 0f00 	cmp.w	fp, #0
 8023eaa:	dc6d      	bgt.n	8023f88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8023eac:	9b07      	ldr	r3, [sp, #28]
 8023eae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023eb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023eb8:	4423      	add	r3, r4
 8023eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ebc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	f340 81a0 	ble.w	8024204 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8023ec4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023ec8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023eca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ece:	eeb0 6a62 	vmov.f32	s12, s5
 8023ed2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023ed6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023eda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023ede:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8023ee2:	eeb0 6a43 	vmov.f32	s12, s6
 8023ee6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023eea:	ee16 5a10 	vmov	r5, s12
 8023eee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023ef2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023ef6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023efa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023efe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023f02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023f06:	ee12 2a90 	vmov	r2, s5
 8023f0a:	eef0 2a47 	vmov.f32	s5, s14
 8023f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f12:	ee13 2a10 	vmov	r2, s6
 8023f16:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023f18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f1a:	eeb0 3a67 	vmov.f32	s6, s15
 8023f1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f22:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023f24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023f26:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023f28:	3b01      	subs	r3, #1
 8023f2a:	9316      	str	r3, [sp, #88]	@ 0x58
 8023f2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f2e:	bf08      	it	eq
 8023f30:	4613      	moveq	r3, r2
 8023f32:	9307      	str	r3, [sp, #28]
 8023f34:	e610      	b.n	8023b58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023f36:	2800      	cmp	r0, #0
 8023f38:	f43f ae82 	beq.w	8023c40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8023f3c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023f40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f44:	9108      	str	r1, [sp, #32]
 8023f46:	0e09      	lsrs	r1, r1, #24
 8023f48:	9110      	str	r1, [sp, #64]	@ 0x40
 8023f4a:	e679      	b.n	8023c40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8023f4c:	f113 0801 	adds.w	r8, r3, #1
 8023f50:	f53f af74 	bmi.w	8023e3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023f54:	4541      	cmp	r1, r8
 8023f56:	f6ff af71 	blt.w	8023e3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023f5a:	f11c 0801 	adds.w	r8, ip, #1
 8023f5e:	f53f af6d 	bmi.w	8023e3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023f62:	45c6      	cmp	lr, r8
 8023f64:	f6ff af6a 	blt.w	8023e3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023f68:	b209      	sxth	r1, r1
 8023f6a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023f6e:	fa0f f38e 	sxth.w	r3, lr
 8023f72:	9100      	str	r1, [sp, #0]
 8023f74:	4639      	mov	r1, r7
 8023f76:	9301      	str	r3, [sp, #4]
 8023f78:	4633      	mov	r3, r6
 8023f7a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023f7e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023f80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8023f82:	f7ff fca3 	bl	80238cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8023f86:	e759      	b.n	8023e3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023f88:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023f8a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023f8e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023f90:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023f94:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023f96:	1427      	asrs	r7, r4, #16
 8023f98:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023f9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f9e:	142b      	asrs	r3, r5, #16
 8023fa0:	fb01 7303 	mla	r3, r1, r3, r7
 8023fa4:	18e7      	adds	r7, r4, r3
 8023fa6:	5ce3      	ldrb	r3, [r4, r3]
 8023fa8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023fac:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023fb0:	2a00      	cmp	r2, #0
 8023fb2:	f000 811d 	beq.w	80241f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8023fb6:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023fba:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8023fbe:	940d      	str	r4, [sp, #52]	@ 0x34
 8023fc0:	0e24      	lsrs	r4, r4, #24
 8023fc2:	9414      	str	r4, [sp, #80]	@ 0x50
 8023fc4:	b170      	cbz	r0, 8023fe4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023fc6:	eb07 0801 	add.w	r8, r7, r1
 8023fca:	5c79      	ldrb	r1, [r7, r1]
 8023fcc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023fd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8023fd2:	0e09      	lsrs	r1, r1, #24
 8023fd4:	9111      	str	r1, [sp, #68]	@ 0x44
 8023fd6:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023fda:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023fde:	910e      	str	r1, [sp, #56]	@ 0x38
 8023fe0:	0e09      	lsrs	r1, r1, #24
 8023fe2:	9115      	str	r1, [sp, #84]	@ 0x54
 8023fe4:	b292      	uxth	r2, r2
 8023fe6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023fe8:	b280      	uxth	r0, r0
 8023fea:	fb02 f900 	mul.w	r9, r2, r0
 8023fee:	0112      	lsls	r2, r2, #4
 8023ff0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023ff4:	eba2 0809 	sub.w	r8, r2, r9
 8023ff8:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8023ffc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023ffe:	b280      	uxth	r0, r0
 8024000:	fa1f f888 	uxth.w	r8, r8
 8024004:	1a09      	subs	r1, r1, r0
 8024006:	fb08 f202 	mul.w	r2, r8, r2
 802400a:	b289      	uxth	r1, r1
 802400c:	fb01 220c 	mla	r2, r1, ip, r2
 8024010:	fb00 2204 	mla	r2, r0, r4, r2
 8024014:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024016:	fb09 2204 	mla	r2, r9, r4, r2
 802401a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802401e:	2a00      	cmp	r2, #0
 8024020:	f000 80db 	beq.w	80241da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8024024:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024028:	d019      	beq.n	802405e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 802402a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802402e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024032:	fb0c fa0a 	mul.w	sl, ip, sl
 8024036:	fb0c fc03 	mul.w	ip, ip, r3
 802403a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802403e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024042:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8024046:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802404a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802404e:	4453      	add	r3, sl
 8024050:	0a3f      	lsrs	r7, r7, #8
 8024052:	0a1b      	lsrs	r3, r3, #8
 8024054:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024058:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802405c:	433b      	orrs	r3, r7
 802405e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024060:	2cff      	cmp	r4, #255	@ 0xff
 8024062:	d020      	beq.n	80240a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8024064:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024066:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802406a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802406c:	4367      	muls	r7, r4
 802406e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024070:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024074:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024078:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802407a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802407e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024082:	fb04 fa0a 	mul.w	sl, r4, sl
 8024086:	44bc      	add	ip, r7
 8024088:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802408c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024090:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024094:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024098:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802409c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80240a0:	ea4c 040a 	orr.w	r4, ip, sl
 80240a4:	940d      	str	r4, [sp, #52]	@ 0x34
 80240a6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80240a8:	2cff      	cmp	r4, #255	@ 0xff
 80240aa:	d020      	beq.n	80240ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80240ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80240ae:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80240b2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80240b4:	4367      	muls	r7, r4
 80240b6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80240b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80240bc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80240c0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80240c2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80240c6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80240ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80240ce:	44bc      	add	ip, r7
 80240d0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80240d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80240dc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80240e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80240e4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80240e8:	ea4c 040a 	orr.w	r4, ip, sl
 80240ec:	9409      	str	r4, [sp, #36]	@ 0x24
 80240ee:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80240f0:	2cff      	cmp	r4, #255	@ 0xff
 80240f2:	d020      	beq.n	8024136 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80240f4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80240f6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80240fa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80240fc:	4367      	muls	r7, r4
 80240fe:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024100:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024104:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024108:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802410a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802410e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024112:	fb04 fa0a 	mul.w	sl, r4, sl
 8024116:	44bc      	add	ip, r7
 8024118:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802411c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024120:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024124:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024128:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802412c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024130:	ea4c 040a 	orr.w	r4, ip, sl
 8024134:	940e      	str	r4, [sp, #56]	@ 0x38
 8024136:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024138:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802413c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024140:	43d2      	mvns	r2, r2
 8024142:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024146:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024148:	b2d2      	uxtb	r2, r2
 802414a:	fb08 f707 	mul.w	r7, r8, r7
 802414e:	fb01 770c 	mla	r7, r1, ip, r7
 8024152:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024156:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024158:	fb00 770c 	mla	r7, r0, ip, r7
 802415c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024160:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024162:	fb09 770c 	mla	r7, r9, ip, r7
 8024166:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802416a:	fb08 f80c 	mul.w	r8, r8, ip
 802416e:	0a3f      	lsrs	r7, r7, #8
 8024170:	fb01 8303 	mla	r3, r1, r3, r8
 8024174:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024176:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802417a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802417e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024180:	fb00 330a 	mla	r3, r0, sl, r3
 8024184:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8024188:	fb09 3c0c 	mla	ip, r9, ip, r3
 802418c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024190:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024194:	fb03 f102 	mul.w	r1, r3, r2
 8024198:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802419c:	1c4b      	adds	r3, r1, #1
 802419e:	ea47 070c 	orr.w	r7, r7, ip
 80241a2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80241a6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80241aa:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80241ae:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80241b2:	4353      	muls	r3, r2
 80241b4:	1c59      	adds	r1, r3, #1
 80241b6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80241ba:	0a3b      	lsrs	r3, r7, #8
 80241bc:	0c3f      	lsrs	r7, r7, #16
 80241be:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80241c2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80241c6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80241ca:	435a      	muls	r2, r3
 80241cc:	1c53      	adds	r3, r2, #1
 80241ce:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80241d2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80241d6:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80241da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80241dc:	f10e 0e03 	add.w	lr, lr, #3
 80241e0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80241e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80241e6:	441a      	add	r2, r3
 80241e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80241ea:	9225      	str	r2, [sp, #148]	@ 0x94
 80241ec:	441d      	add	r5, r3
 80241ee:	e65a      	b.n	8023ea6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80241f0:	2800      	cmp	r0, #0
 80241f2:	f43f aef7 	beq.w	8023fe4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80241f6:	5c79      	ldrb	r1, [r7, r1]
 80241f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80241fe:	0e09      	lsrs	r1, r1, #24
 8024200:	9111      	str	r1, [sp, #68]	@ 0x44
 8024202:	e6ef      	b.n	8023fe4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024204:	b01b      	add	sp, #108	@ 0x6c
 8024206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802420a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802420a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802420e:	b08d      	sub	sp, #52	@ 0x34
 8024210:	468b      	mov	fp, r1
 8024212:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8024216:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 802421a:	fb0c 5703 	mla	r7, ip, r3, r5
 802421e:	f1bc 0f00 	cmp.w	ip, #0
 8024222:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024224:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024228:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 802422c:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8024230:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8024234:	eb02 0607 	add.w	r6, r2, r7
 8024238:	f89b 4000 	ldrb.w	r4, [fp]
 802423c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8024240:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8024244:	f2c0 80c1 	blt.w	80243ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8024248:	45e6      	cmp	lr, ip
 802424a:	f340 80be 	ble.w	80243ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802424e:	2d00      	cmp	r5, #0
 8024250:	f2c0 80b7 	blt.w	80243c2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8024254:	42ab      	cmp	r3, r5
 8024256:	f340 80b4 	ble.w	80243c2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802425a:	5dd2      	ldrb	r2, [r2, r7]
 802425c:	9205      	str	r2, [sp, #20]
 802425e:	7872      	ldrb	r2, [r6, #1]
 8024260:	9206      	str	r2, [sp, #24]
 8024262:	78b2      	ldrb	r2, [r6, #2]
 8024264:	9207      	str	r2, [sp, #28]
 8024266:	1c6a      	adds	r2, r5, #1
 8024268:	f100 80b6 	bmi.w	80243d8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802426c:	4293      	cmp	r3, r2
 802426e:	f340 80b3 	ble.w	80243d8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8024272:	f1b8 0f00 	cmp.w	r8, #0
 8024276:	f000 80af 	beq.w	80243d8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802427a:	78f2      	ldrb	r2, [r6, #3]
 802427c:	9201      	str	r2, [sp, #4]
 802427e:	7932      	ldrb	r2, [r6, #4]
 8024280:	9202      	str	r2, [sp, #8]
 8024282:	7972      	ldrb	r2, [r6, #5]
 8024284:	9203      	str	r2, [sp, #12]
 8024286:	f11c 0c01 	adds.w	ip, ip, #1
 802428a:	f100 80ad 	bmi.w	80243e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802428e:	45e6      	cmp	lr, ip
 8024290:	f340 80aa 	ble.w	80243e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8024294:	f1ba 0f00 	cmp.w	sl, #0
 8024298:	f000 80a6 	beq.w	80243e8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802429c:	2d00      	cmp	r5, #0
 802429e:	f2c0 809f 	blt.w	80243e0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80242a2:	42ab      	cmp	r3, r5
 80242a4:	f340 809c 	ble.w	80243e0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80242a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80242ac:	f816 9002 	ldrb.w	r9, [r6, r2]
 80242b0:	2203      	movs	r2, #3
 80242b2:	fb03 6c02 	mla	ip, r3, r2, r6
 80242b6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80242ba:	f89c e002 	ldrb.w	lr, [ip, #2]
 80242be:	9704      	str	r7, [sp, #16]
 80242c0:	3501      	adds	r5, #1
 80242c2:	f100 8098 	bmi.w	80243f6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80242c6:	42ab      	cmp	r3, r5
 80242c8:	f340 8095 	ble.w	80243f6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80242cc:	f1b8 0f00 	cmp.w	r8, #0
 80242d0:	f000 8091 	beq.w	80243f6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80242d4:	f04f 0c03 	mov.w	ip, #3
 80242d8:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80242dc:	5cb5      	ldrb	r5, [r6, r2]
 80242de:	fb03 620c 	mla	r2, r3, ip, r6
 80242e2:	fb03 630c 	mla	r3, r3, ip, r6
 80242e6:	7912      	ldrb	r2, [r2, #4]
 80242e8:	795e      	ldrb	r6, [r3, #5]
 80242ea:	fa1f f388 	uxth.w	r3, r8
 80242ee:	fa1f fc8a 	uxth.w	ip, sl
 80242f2:	fb03 f70c 	mul.w	r7, r3, ip
 80242f6:	011b      	lsls	r3, r3, #4
 80242f8:	9708      	str	r7, [sp, #32]
 80242fa:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80242fe:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8024302:	1bdb      	subs	r3, r3, r7
 8024304:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8024308:	fa1f fc8c 	uxth.w	ip, ip
 802430c:	b29b      	uxth	r3, r3
 802430e:	9709      	str	r7, [sp, #36]	@ 0x24
 8024310:	ebaa 0a0c 	sub.w	sl, sl, ip
 8024314:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024316:	930a      	str	r3, [sp, #40]	@ 0x28
 8024318:	fa1f fa8a 	uxth.w	sl, sl
 802431c:	ea6f 0807 	mvn.w	r8, r7
 8024320:	9f01      	ldr	r7, [sp, #4]
 8024322:	435f      	muls	r7, r3
 8024324:	9b05      	ldr	r3, [sp, #20]
 8024326:	fa5f f888 	uxtb.w	r8, r8
 802432a:	fb0a 7703 	mla	r7, sl, r3, r7
 802432e:	9b08      	ldr	r3, [sp, #32]
 8024330:	fb14 f408 	smulbb	r4, r4, r8
 8024334:	fb0c 7709 	mla	r7, ip, r9, r7
 8024338:	fb10 f008 	smulbb	r0, r0, r8
 802433c:	fb11 f108 	smulbb	r1, r1, r8
 8024340:	fb03 7705 	mla	r7, r3, r5, r7
 8024344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024346:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802434a:	fb07 4703 	mla	r7, r7, r3, r4
 802434e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024350:	b2bf      	uxth	r7, r7
 8024352:	1c7c      	adds	r4, r7, #1
 8024354:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8024358:	1224      	asrs	r4, r4, #8
 802435a:	f88b 4000 	strb.w	r4, [fp]
 802435e:	9c02      	ldr	r4, [sp, #8]
 8024360:	435c      	muls	r4, r3
 8024362:	9b06      	ldr	r3, [sp, #24]
 8024364:	fb0a 4403 	mla	r4, sl, r3, r4
 8024368:	9b04      	ldr	r3, [sp, #16]
 802436a:	fb0c 4403 	mla	r4, ip, r3, r4
 802436e:	9b08      	ldr	r3, [sp, #32]
 8024370:	fb03 4402 	mla	r4, r3, r2, r4
 8024374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024376:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024378:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802437c:	fb04 0403 	mla	r4, r4, r3, r0
 8024380:	9b03      	ldr	r3, [sp, #12]
 8024382:	435a      	muls	r2, r3
 8024384:	b2a4      	uxth	r4, r4
 8024386:	4613      	mov	r3, r2
 8024388:	9a07      	ldr	r2, [sp, #28]
 802438a:	1c60      	adds	r0, r4, #1
 802438c:	fb0a 3a02 	mla	sl, sl, r2, r3
 8024390:	9b08      	ldr	r3, [sp, #32]
 8024392:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8024396:	fb0c ac0e 	mla	ip, ip, lr, sl
 802439a:	1224      	asrs	r4, r4, #8
 802439c:	fb03 c606 	mla	r6, r3, r6, ip
 80243a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243a2:	f88b 4001 	strb.w	r4, [fp, #1]
 80243a6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80243aa:	fb06 1103 	mla	r1, r6, r3, r1
 80243ae:	b289      	uxth	r1, r1
 80243b0:	1c4e      	adds	r6, r1, #1
 80243b2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80243b6:	1209      	asrs	r1, r1, #8
 80243b8:	f88b 1002 	strb.w	r1, [fp, #2]
 80243bc:	b00d      	add	sp, #52	@ 0x34
 80243be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80243c6:	9405      	str	r4, [sp, #20]
 80243c8:	e74d      	b.n	8024266 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80243ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80243ce:	9401      	str	r4, [sp, #4]
 80243d0:	9405      	str	r4, [sp, #20]
 80243d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80243d6:	e756      	b.n	8024286 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80243d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80243dc:	9401      	str	r4, [sp, #4]
 80243de:	e752      	b.n	8024286 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80243e0:	468e      	mov	lr, r1
 80243e2:	9004      	str	r0, [sp, #16]
 80243e4:	46a1      	mov	r9, r4
 80243e6:	e76b      	b.n	80242c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80243e8:	460e      	mov	r6, r1
 80243ea:	4602      	mov	r2, r0
 80243ec:	4625      	mov	r5, r4
 80243ee:	468e      	mov	lr, r1
 80243f0:	9004      	str	r0, [sp, #16]
 80243f2:	46a1      	mov	r9, r4
 80243f4:	e779      	b.n	80242ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80243f6:	460e      	mov	r6, r1
 80243f8:	4602      	mov	r2, r0
 80243fa:	4625      	mov	r5, r4
 80243fc:	e775      	b.n	80242ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080243fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024402:	b09f      	sub	sp, #124	@ 0x7c
 8024404:	920e      	str	r2, [sp, #56]	@ 0x38
 8024406:	9307      	str	r3, [sp, #28]
 8024408:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802440a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802440e:	901d      	str	r0, [sp, #116]	@ 0x74
 8024410:	930c      	str	r3, [sp, #48]	@ 0x30
 8024412:	6850      	ldr	r0, [r2, #4]
 8024414:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024416:	6812      	ldr	r2, [r2, #0]
 8024418:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802441c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8024420:	fb00 1303 	mla	r3, r0, r3, r1
 8024424:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024428:	18d3      	adds	r3, r2, r3
 802442a:	9308      	str	r3, [sp, #32]
 802442c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802442e:	681b      	ldr	r3, [r3, #0]
 8024430:	930a      	str	r3, [sp, #40]	@ 0x28
 8024432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024434:	43db      	mvns	r3, r3
 8024436:	b2db      	uxtb	r3, r3
 8024438:	9309      	str	r3, [sp, #36]	@ 0x24
 802443a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802443c:	2b00      	cmp	r3, #0
 802443e:	dc03      	bgt.n	8024448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024442:	2b00      	cmp	r3, #0
 8024444:	f340 81f5 	ble.w	8024832 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024448:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802444a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802444e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024452:	1e48      	subs	r0, r1, #1
 8024454:	1e54      	subs	r4, r2, #1
 8024456:	9b07      	ldr	r3, [sp, #28]
 8024458:	2b00      	cmp	r3, #0
 802445a:	f340 80d5 	ble.w	8024608 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802445e:	ea5f 452a 	movs.w	r5, sl, asr #16
 8024462:	ea4f 4328 	mov.w	r3, r8, asr #16
 8024466:	d406      	bmi.n	8024476 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024468:	4285      	cmp	r5, r0
 802446a:	da04      	bge.n	8024476 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802446c:	2b00      	cmp	r3, #0
 802446e:	db02      	blt.n	8024476 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024470:	42a3      	cmp	r3, r4
 8024472:	f2c0 80ca 	blt.w	802460a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024476:	3501      	adds	r5, #1
 8024478:	f100 80bb 	bmi.w	80245f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802447c:	42a9      	cmp	r1, r5
 802447e:	f2c0 80b8 	blt.w	80245f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024482:	3301      	adds	r3, #1
 8024484:	f100 80b5 	bmi.w	80245f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8024488:	429a      	cmp	r2, r3
 802448a:	f2c0 80b2 	blt.w	80245f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802448e:	9b07      	ldr	r3, [sp, #28]
 8024490:	9d08      	ldr	r5, [sp, #32]
 8024492:	930d      	str	r3, [sp, #52]	@ 0x34
 8024494:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024496:	2b00      	cmp	r3, #0
 8024498:	f340 80d6 	ble.w	8024648 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 802449c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 802449e:	ea4f 4428 	mov.w	r4, r8, asr #16
 80244a2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80244a4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80244a8:	68c6      	ldr	r6, [r0, #12]
 80244aa:	ea5f 402a 	movs.w	r0, sl, asr #16
 80244ae:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80244b2:	689b      	ldr	r3, [r3, #8]
 80244b4:	f100 810f 	bmi.w	80246d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80244b8:	1e5f      	subs	r7, r3, #1
 80244ba:	42b8      	cmp	r0, r7
 80244bc:	f280 810b 	bge.w	80246d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80244c0:	2c00      	cmp	r4, #0
 80244c2:	f2c0 8108 	blt.w	80246d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80244c6:	1e77      	subs	r7, r6, #1
 80244c8:	42bc      	cmp	r4, r7
 80244ca:	f280 8104 	bge.w	80246d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80244ce:	b21b      	sxth	r3, r3
 80244d0:	fb04 0003 	mla	r0, r4, r3, r0
 80244d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80244d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80244da:	1826      	adds	r6, r4, r0
 80244dc:	5c24      	ldrb	r4, [r4, r0]
 80244de:	78b7      	ldrb	r7, [r6, #2]
 80244e0:	7870      	ldrb	r0, [r6, #1]
 80244e2:	970f      	str	r7, [sp, #60]	@ 0x3c
 80244e4:	7977      	ldrb	r7, [r6, #5]
 80244e6:	f896 e003 	ldrb.w	lr, [r6, #3]
 80244ea:	f896 c004 	ldrb.w	ip, [r6, #4]
 80244ee:	9710      	str	r7, [sp, #64]	@ 0x40
 80244f0:	b1c9      	cbz	r1, 8024526 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80244f2:	f04f 0b03 	mov.w	fp, #3
 80244f6:	f06f 0904 	mvn.w	r9, #4
 80244fa:	3605      	adds	r6, #5
 80244fc:	fb13 930b 	smlabb	r3, r3, fp, r9
 8024500:	eb06 0b03 	add.w	fp, r6, r3
 8024504:	5cf3      	ldrb	r3, [r6, r3]
 8024506:	9311      	str	r3, [sp, #68]	@ 0x44
 8024508:	f89b 3001 	ldrb.w	r3, [fp, #1]
 802450c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802450e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8024512:	9315      	str	r3, [sp, #84]	@ 0x54
 8024514:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8024518:	9312      	str	r3, [sp, #72]	@ 0x48
 802451a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 802451e:	9314      	str	r3, [sp, #80]	@ 0x50
 8024520:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8024524:	9316      	str	r3, [sp, #88]	@ 0x58
 8024526:	b292      	uxth	r2, r2
 8024528:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 802452a:	b289      	uxth	r1, r1
 802452c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8024530:	fb02 f601 	mul.w	r6, r2, r1
 8024534:	0112      	lsls	r2, r2, #4
 8024536:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802453a:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 802453e:	1b92      	subs	r2, r2, r6
 8024540:	b289      	uxth	r1, r1
 8024542:	b292      	uxth	r2, r2
 8024544:	eba9 0901 	sub.w	r9, r9, r1
 8024548:	fb02 fe0e 	mul.w	lr, r2, lr
 802454c:	fa1f f989 	uxth.w	r9, r9
 8024550:	fb02 fc0c 	mul.w	ip, r2, ip
 8024554:	fb09 e404 	mla	r4, r9, r4, lr
 8024558:	f895 e000 	ldrb.w	lr, [r5]
 802455c:	fb09 c000 	mla	r0, r9, r0, ip
 8024560:	fb01 4407 	mla	r4, r1, r7, r4
 8024564:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8024566:	fb06 4407 	mla	r4, r6, r7, r4
 802456a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802456c:	fb1e fe07 	smulbb	lr, lr, r7
 8024570:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024574:	fb04 e403 	mla	r4, r4, r3, lr
 8024578:	b2a4      	uxth	r4, r4
 802457a:	f104 0e01 	add.w	lr, r4, #1
 802457e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8024582:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024584:	fb01 0004 	mla	r0, r1, r4, r0
 8024588:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802458a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802458e:	fb06 0004 	mla	r0, r6, r4, r0
 8024592:	786c      	ldrb	r4, [r5, #1]
 8024594:	f885 e000 	strb.w	lr, [r5]
 8024598:	fb14 f407 	smulbb	r4, r4, r7
 802459c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80245a0:	fb00 4003 	mla	r0, r0, r3, r4
 80245a4:	b280      	uxth	r0, r0
 80245a6:	1c44      	adds	r4, r0, #1
 80245a8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80245ac:	1200      	asrs	r0, r0, #8
 80245ae:	7068      	strb	r0, [r5, #1]
 80245b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80245b2:	4342      	muls	r2, r0
 80245b4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80245b6:	fb09 2200 	mla	r2, r9, r0, r2
 80245ba:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80245bc:	fb01 2100 	mla	r1, r1, r0, r2
 80245c0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80245c2:	fb06 1602 	mla	r6, r6, r2, r1
 80245c6:	78a9      	ldrb	r1, [r5, #2]
 80245c8:	fb11 f107 	smulbb	r1, r1, r7
 80245cc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80245d0:	fb06 1303 	mla	r3, r6, r3, r1
 80245d4:	b29b      	uxth	r3, r3
 80245d6:	1c5e      	adds	r6, r3, #1
 80245d8:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80245dc:	121b      	asrs	r3, r3, #8
 80245de:	70ab      	strb	r3, [r5, #2]
 80245e0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80245e2:	3503      	adds	r5, #3
 80245e4:	449a      	add	sl, r3
 80245e6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80245e8:	4498      	add	r8, r3
 80245ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80245ec:	3b01      	subs	r3, #1
 80245ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80245f0:	e750      	b.n	8024494 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80245f2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80245f4:	449a      	add	sl, r3
 80245f6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80245f8:	4498      	add	r8, r3
 80245fa:	9b07      	ldr	r3, [sp, #28]
 80245fc:	3b01      	subs	r3, #1
 80245fe:	9307      	str	r3, [sp, #28]
 8024600:	9b08      	ldr	r3, [sp, #32]
 8024602:	3303      	adds	r3, #3
 8024604:	9308      	str	r3, [sp, #32]
 8024606:	e726      	b.n	8024456 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024608:	d026      	beq.n	8024658 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802460a:	9b07      	ldr	r3, [sp, #28]
 802460c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802460e:	3b01      	subs	r3, #1
 8024610:	fb00 a003 	mla	r0, r0, r3, sl
 8024614:	1400      	asrs	r0, r0, #16
 8024616:	f53f af3a 	bmi.w	802448e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802461a:	3901      	subs	r1, #1
 802461c:	4288      	cmp	r0, r1
 802461e:	f6bf af36 	bge.w	802448e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024622:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8024624:	fb01 8303 	mla	r3, r1, r3, r8
 8024628:	141b      	asrs	r3, r3, #16
 802462a:	f53f af30 	bmi.w	802448e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802462e:	3a01      	subs	r2, #1
 8024630:	4293      	cmp	r3, r2
 8024632:	f6bf af2c 	bge.w	802448e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024636:	9b08      	ldr	r3, [sp, #32]
 8024638:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802463c:	1cdd      	adds	r5, r3, #3
 802463e:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 8024642:	f1bc 0f00 	cmp.w	ip, #0
 8024646:	dc5f      	bgt.n	8024708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8024648:	9b07      	ldr	r3, [sp, #28]
 802464a:	9a08      	ldr	r2, [sp, #32]
 802464c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024654:	441a      	add	r2, r3
 8024656:	9208      	str	r2, [sp, #32]
 8024658:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802465a:	2b00      	cmp	r3, #0
 802465c:	f340 80e9 	ble.w	8024832 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8024660:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024664:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024666:	ee30 0a04 	vadd.f32	s0, s0, s8
 802466a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802466e:	eef0 6a62 	vmov.f32	s13, s5
 8024672:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024676:	ee31 1a05 	vadd.f32	s2, s2, s10
 802467a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802467e:	ee16 aa90 	vmov	sl, s13
 8024682:	eef0 6a43 	vmov.f32	s13, s6
 8024686:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802468a:	ee16 8a90 	vmov	r8, s13
 802468e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024692:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024696:	ee77 2a62 	vsub.f32	s5, s14, s5
 802469a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802469e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80246a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80246a6:	ee12 2a90 	vmov	r2, s5
 80246aa:	eef0 2a47 	vmov.f32	s5, s14
 80246ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80246b2:	ee13 2a10 	vmov	r2, s6
 80246b6:	932b      	str	r3, [sp, #172]	@ 0xac
 80246b8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80246ba:	eeb0 3a67 	vmov.f32	s6, s15
 80246be:	fb92 f3f3 	sdiv	r3, r2, r3
 80246c2:	932c      	str	r3, [sp, #176]	@ 0xb0
 80246c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80246c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80246c8:	3b01      	subs	r3, #1
 80246ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80246cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80246ce:	bf08      	it	eq
 80246d0:	4613      	moveq	r3, r2
 80246d2:	9307      	str	r3, [sp, #28]
 80246d4:	e6b1      	b.n	802443a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80246d6:	1c47      	adds	r7, r0, #1
 80246d8:	d482      	bmi.n	80245e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80246da:	42bb      	cmp	r3, r7
 80246dc:	db80      	blt.n	80245e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80246de:	1c67      	adds	r7, r4, #1
 80246e0:	f53f af7e 	bmi.w	80245e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80246e4:	42be      	cmp	r6, r7
 80246e6:	f6ff af7b 	blt.w	80245e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80246ea:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80246ec:	b236      	sxth	r6, r6
 80246ee:	9001      	str	r0, [sp, #4]
 80246f0:	b21b      	sxth	r3, r3
 80246f2:	9600      	str	r6, [sp, #0]
 80246f4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80246f6:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80246fa:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80246fe:	4629      	mov	r1, r5
 8024700:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024702:	f7ff fd82 	bl	802420a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8024706:	e76b      	b.n	80245e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024708:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 802470a:	ea4f 402a 	mov.w	r0, sl, asr #16
 802470e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8024712:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8024716:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802471a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802471e:	fb07 0101 	mla	r1, r7, r1, r0
 8024722:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024724:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024728:	1844      	adds	r4, r0, r1
 802472a:	5c40      	ldrb	r0, [r0, r1]
 802472c:	78a6      	ldrb	r6, [r4, #2]
 802472e:	7861      	ldrb	r1, [r4, #1]
 8024730:	960f      	str	r6, [sp, #60]	@ 0x3c
 8024732:	78e6      	ldrb	r6, [r4, #3]
 8024734:	910d      	str	r1, [sp, #52]	@ 0x34
 8024736:	9610      	str	r6, [sp, #64]	@ 0x40
 8024738:	f894 9004 	ldrb.w	r9, [r4, #4]
 802473c:	f894 b005 	ldrb.w	fp, [r4, #5]
 8024740:	b192      	cbz	r2, 8024768 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024742:	f06f 0604 	mvn.w	r6, #4
 8024746:	2103      	movs	r1, #3
 8024748:	3405      	adds	r4, #5
 802474a:	fb17 6701 	smlabb	r7, r7, r1, r6
 802474e:	19e6      	adds	r6, r4, r7
 8024750:	5de4      	ldrb	r4, [r4, r7]
 8024752:	9417      	str	r4, [sp, #92]	@ 0x5c
 8024754:	7874      	ldrb	r4, [r6, #1]
 8024756:	9419      	str	r4, [sp, #100]	@ 0x64
 8024758:	78b4      	ldrb	r4, [r6, #2]
 802475a:	941b      	str	r4, [sp, #108]	@ 0x6c
 802475c:	78f4      	ldrb	r4, [r6, #3]
 802475e:	9418      	str	r4, [sp, #96]	@ 0x60
 8024760:	7934      	ldrb	r4, [r6, #4]
 8024762:	941a      	str	r4, [sp, #104]	@ 0x68
 8024764:	7974      	ldrb	r4, [r6, #5]
 8024766:	941c      	str	r4, [sp, #112]	@ 0x70
 8024768:	b29b      	uxth	r3, r3
 802476a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 802476c:	b292      	uxth	r2, r2
 802476e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024770:	3503      	adds	r5, #3
 8024772:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024776:	fb03 f402 	mul.w	r4, r3, r2
 802477a:	011b      	lsls	r3, r3, #4
 802477c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8024780:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8024784:	1b1b      	subs	r3, r3, r4
 8024786:	b292      	uxth	r2, r2
 8024788:	b29b      	uxth	r3, r3
 802478a:	1ab6      	subs	r6, r6, r2
 802478c:	435f      	muls	r7, r3
 802478e:	b2b6      	uxth	r6, r6
 8024790:	fb03 f909 	mul.w	r9, r3, r9
 8024794:	fb03 fb0b 	mul.w	fp, r3, fp
 8024798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802479a:	fb06 7000 	mla	r0, r6, r0, r7
 802479e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80247a0:	fb06 bb03 	mla	fp, r6, r3, fp
 80247a4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80247a6:	fb02 0007 	mla	r0, r2, r7, r0
 80247aa:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80247ac:	fb02 bb03 	mla	fp, r2, r3, fp
 80247b0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80247b2:	fb04 0007 	mla	r0, r4, r7, r0
 80247b6:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80247ba:	fb17 f701 	smulbb	r7, r7, r1
 80247be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80247c4:	fb00 700e 	mla	r0, r0, lr, r7
 80247c8:	fb06 9101 	mla	r1, r6, r1, r9
 80247cc:	b280      	uxth	r0, r0
 80247ce:	1c47      	adds	r7, r0, #1
 80247d0:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80247d4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80247d6:	1200      	asrs	r0, r0, #8
 80247d8:	f805 0c06 	strb.w	r0, [r5, #-6]
 80247dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80247de:	fb02 1100 	mla	r1, r2, r0, r1
 80247e2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80247e4:	fb04 1100 	mla	r1, r4, r0, r1
 80247e8:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80247ec:	fb04 b403 	mla	r4, r4, r3, fp
 80247f0:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80247f4:	fb10 f007 	smulbb	r0, r0, r7
 80247f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80247fc:	fb13 f307 	smulbb	r3, r3, r7
 8024800:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8024804:	fb01 010e 	mla	r1, r1, lr, r0
 8024808:	fb04 340e 	mla	r4, r4, lr, r3
 802480c:	b289      	uxth	r1, r1
 802480e:	b2a4      	uxth	r4, r4
 8024810:	1c48      	adds	r0, r1, #1
 8024812:	1c63      	adds	r3, r4, #1
 8024814:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024818:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802481c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802481e:	1209      	asrs	r1, r1, #8
 8024820:	1224      	asrs	r4, r4, #8
 8024822:	449a      	add	sl, r3
 8024824:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024826:	f805 1c05 	strb.w	r1, [r5, #-5]
 802482a:	f805 4c04 	strb.w	r4, [r5, #-4]
 802482e:	4498      	add	r8, r3
 8024830:	e707      	b.n	8024642 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024832:	b01f      	add	sp, #124	@ 0x7c
 8024834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024838 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8024838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802483c:	b087      	sub	sp, #28
 802483e:	780d      	ldrb	r5, [r1, #0]
 8024840:	784c      	ldrb	r4, [r1, #1]
 8024842:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8024846:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 802484a:	9004      	str	r0, [sp, #16]
 802484c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8024850:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8024854:	9005      	str	r0, [sp, #20]
 8024856:	fb06 bc03 	mla	ip, r6, r3, fp
 802485a:	2e00      	cmp	r6, #0
 802485c:	7888      	ldrb	r0, [r1, #2]
 802485e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024862:	eb02 090c 	add.w	r9, r2, ip
 8024866:	f2c0 8084 	blt.w	8024972 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802486a:	42b7      	cmp	r7, r6
 802486c:	f340 8081 	ble.w	8024972 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8024870:	f1bb 0f00 	cmp.w	fp, #0
 8024874:	db79      	blt.n	802496a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8024876:	455b      	cmp	r3, fp
 8024878:	dd77      	ble.n	802496a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802487a:	f812 200c 	ldrb.w	r2, [r2, ip]
 802487e:	9201      	str	r2, [sp, #4]
 8024880:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024884:	9202      	str	r2, [sp, #8]
 8024886:	f899 2002 	ldrb.w	r2, [r9, #2]
 802488a:	9203      	str	r2, [sp, #12]
 802488c:	f11b 0201 	adds.w	r2, fp, #1
 8024890:	d476      	bmi.n	8024980 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024892:	4293      	cmp	r3, r2
 8024894:	dd74      	ble.n	8024980 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8024896:	9a04      	ldr	r2, [sp, #16]
 8024898:	2a00      	cmp	r2, #0
 802489a:	d071      	beq.n	8024980 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802489c:	f899 8003 	ldrb.w	r8, [r9, #3]
 80248a0:	f899 c004 	ldrb.w	ip, [r9, #4]
 80248a4:	f899 a005 	ldrb.w	sl, [r9, #5]
 80248a8:	3601      	adds	r6, #1
 80248aa:	d471      	bmi.n	8024990 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80248ac:	42b7      	cmp	r7, r6
 80248ae:	dd6f      	ble.n	8024990 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80248b0:	9a05      	ldr	r2, [sp, #20]
 80248b2:	2a00      	cmp	r2, #0
 80248b4:	d06c      	beq.n	8024990 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80248b6:	f1bb 0f00 	cmp.w	fp, #0
 80248ba:	db65      	blt.n	8024988 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80248bc:	455b      	cmp	r3, fp
 80248be:	dd63      	ble.n	8024988 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80248c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80248c4:	f819 e002 	ldrb.w	lr, [r9, r2]
 80248c8:	2203      	movs	r2, #3
 80248ca:	fb03 9602 	mla	r6, r3, r2, r9
 80248ce:	7877      	ldrb	r7, [r6, #1]
 80248d0:	78b6      	ldrb	r6, [r6, #2]
 80248d2:	f11b 0b01 	adds.w	fp, fp, #1
 80248d6:	d40c      	bmi.n	80248f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80248d8:	455b      	cmp	r3, fp
 80248da:	dd0a      	ble.n	80248f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80248dc:	9a04      	ldr	r2, [sp, #16]
 80248de:	b142      	cbz	r2, 80248f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80248e0:	2203      	movs	r2, #3
 80248e2:	fb13 2002 	smlabb	r0, r3, r2, r2
 80248e6:	f819 5000 	ldrb.w	r5, [r9, r0]
 80248ea:	fb03 9002 	mla	r0, r3, r2, r9
 80248ee:	7904      	ldrb	r4, [r0, #4]
 80248f0:	7940      	ldrb	r0, [r0, #5]
 80248f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80248f6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80248fa:	fb03 fb02 	mul.w	fp, r3, r2
 80248fe:	011b      	lsls	r3, r3, #4
 8024900:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8024904:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8024908:	eba3 030b 	sub.w	r3, r3, fp
 802490c:	b292      	uxth	r2, r2
 802490e:	b29b      	uxth	r3, r3
 8024910:	eba9 0902 	sub.w	r9, r9, r2
 8024914:	9304      	str	r3, [sp, #16]
 8024916:	fa1f f989 	uxth.w	r9, r9
 802491a:	fb03 f808 	mul.w	r8, r3, r8
 802491e:	9b01      	ldr	r3, [sp, #4]
 8024920:	fb09 8803 	mla	r8, r9, r3, r8
 8024924:	9b04      	ldr	r3, [sp, #16]
 8024926:	fb03 fc0c 	mul.w	ip, r3, ip
 802492a:	9b02      	ldr	r3, [sp, #8]
 802492c:	fb02 880e 	mla	r8, r2, lr, r8
 8024930:	fb09 cc03 	mla	ip, r9, r3, ip
 8024934:	9b04      	ldr	r3, [sp, #16]
 8024936:	fb0b 8805 	mla	r8, fp, r5, r8
 802493a:	fb02 c707 	mla	r7, r2, r7, ip
 802493e:	fb03 f30a 	mul.w	r3, r3, sl
 8024942:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024946:	fb0b 7404 	mla	r4, fp, r4, r7
 802494a:	f881 8000 	strb.w	r8, [r1]
 802494e:	1224      	asrs	r4, r4, #8
 8024950:	704c      	strb	r4, [r1, #1]
 8024952:	9c03      	ldr	r4, [sp, #12]
 8024954:	fb09 3904 	mla	r9, r9, r4, r3
 8024958:	fb02 9206 	mla	r2, r2, r6, r9
 802495c:	fb0b 2000 	mla	r0, fp, r0, r2
 8024960:	1200      	asrs	r0, r0, #8
 8024962:	7088      	strb	r0, [r1, #2]
 8024964:	b007      	add	sp, #28
 8024966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802496a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802496e:	9501      	str	r5, [sp, #4]
 8024970:	e78c      	b.n	802488c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8024972:	4682      	mov	sl, r0
 8024974:	46a4      	mov	ip, r4
 8024976:	46a8      	mov	r8, r5
 8024978:	9501      	str	r5, [sp, #4]
 802497a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802497e:	e793      	b.n	80248a8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8024980:	4682      	mov	sl, r0
 8024982:	46a4      	mov	ip, r4
 8024984:	46a8      	mov	r8, r5
 8024986:	e78f      	b.n	80248a8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8024988:	4606      	mov	r6, r0
 802498a:	4627      	mov	r7, r4
 802498c:	46ae      	mov	lr, r5
 802498e:	e7a0      	b.n	80248d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8024990:	4606      	mov	r6, r0
 8024992:	4627      	mov	r7, r4
 8024994:	46ae      	mov	lr, r5
 8024996:	e7ac      	b.n	80248f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08024998 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802499c:	b09b      	sub	sp, #108	@ 0x6c
 802499e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80249a0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80249a2:	9019      	str	r0, [sp, #100]	@ 0x64
 80249a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80249a6:	6850      	ldr	r0, [r2, #4]
 80249a8:	9306      	str	r3, [sp, #24]
 80249aa:	6812      	ldr	r2, [r2, #0]
 80249ac:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80249b0:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 80249b4:	fb00 1303 	mla	r3, r0, r3, r1
 80249b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80249bc:	18d3      	adds	r3, r2, r3
 80249be:	9307      	str	r3, [sp, #28]
 80249c0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80249c2:	681b      	ldr	r3, [r3, #0]
 80249c4:	9308      	str	r3, [sp, #32]
 80249c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80249c8:	2b00      	cmp	r3, #0
 80249ca:	dc03      	bgt.n	80249d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80249cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80249ce:	2b00      	cmp	r3, #0
 80249d0:	f340 81ab 	ble.w	8024d2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80249d4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80249d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80249da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80249de:	1e48      	subs	r0, r1, #1
 80249e0:	1e55      	subs	r5, r2, #1
 80249e2:	9b06      	ldr	r3, [sp, #24]
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	f340 80b1 	ble.w	8024b4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80249ea:	ea5f 462b 	movs.w	r6, fp, asr #16
 80249ee:	ea4f 4324 	mov.w	r3, r4, asr #16
 80249f2:	d406      	bmi.n	8024a02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80249f4:	4286      	cmp	r6, r0
 80249f6:	da04      	bge.n	8024a02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80249f8:	2b00      	cmp	r3, #0
 80249fa:	db02      	blt.n	8024a02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80249fc:	42ab      	cmp	r3, r5
 80249fe:	f2c0 80a6 	blt.w	8024b4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8024a02:	3601      	adds	r6, #1
 8024a04:	f100 8097 	bmi.w	8024b36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024a08:	42b1      	cmp	r1, r6
 8024a0a:	f2c0 8094 	blt.w	8024b36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024a0e:	3301      	adds	r3, #1
 8024a10:	f100 8091 	bmi.w	8024b36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024a14:	429a      	cmp	r2, r3
 8024a16:	f2c0 808e 	blt.w	8024b36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024a1a:	9b06      	ldr	r3, [sp, #24]
 8024a1c:	9e07      	ldr	r6, [sp, #28]
 8024a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	f340 80b0 	ble.w	8024b88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8024a28:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8024a2a:	1425      	asrs	r5, r4, #16
 8024a2c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024a2e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8024a32:	68c7      	ldr	r7, [r0, #12]
 8024a34:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024a38:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024a3c:	689b      	ldr	r3, [r3, #8]
 8024a3e:	f100 80ea 	bmi.w	8024c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024a42:	f103 3cff 	add.w	ip, r3, #4294967295
 8024a46:	4560      	cmp	r0, ip
 8024a48:	f280 80e5 	bge.w	8024c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024a4c:	2d00      	cmp	r5, #0
 8024a4e:	f2c0 80e2 	blt.w	8024c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024a52:	f107 3cff 	add.w	ip, r7, #4294967295
 8024a56:	4565      	cmp	r5, ip
 8024a58:	f280 80dd 	bge.w	8024c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024a5c:	b21b      	sxth	r3, r3
 8024a5e:	fb05 0003 	mla	r0, r5, r3, r0
 8024a62:	9d08      	ldr	r5, [sp, #32]
 8024a64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a68:	182f      	adds	r7, r5, r0
 8024a6a:	5c2d      	ldrb	r5, [r5, r0]
 8024a6c:	7878      	ldrb	r0, [r7, #1]
 8024a6e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8024a72:	900c      	str	r0, [sp, #48]	@ 0x30
 8024a74:	f897 9003 	ldrb.w	r9, [r7, #3]
 8024a78:	f897 8004 	ldrb.w	r8, [r7, #4]
 8024a7c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8024a80:	b1c9      	cbz	r1, 8024ab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024a82:	f04f 0c03 	mov.w	ip, #3
 8024a86:	f06f 0004 	mvn.w	r0, #4
 8024a8a:	3705      	adds	r7, #5
 8024a8c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8024a90:	eb07 0c03 	add.w	ip, r7, r3
 8024a94:	5cfb      	ldrb	r3, [r7, r3]
 8024a96:	930d      	str	r3, [sp, #52]	@ 0x34
 8024a98:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024a9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024a9e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8024aa2:	9311      	str	r3, [sp, #68]	@ 0x44
 8024aa4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8024aa8:	930e      	str	r3, [sp, #56]	@ 0x38
 8024aaa:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8024aae:	9310      	str	r3, [sp, #64]	@ 0x40
 8024ab0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8024ab4:	9312      	str	r3, [sp, #72]	@ 0x48
 8024ab6:	b292      	uxth	r2, r2
 8024ab8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024aba:	b289      	uxth	r1, r1
 8024abc:	fb02 f301 	mul.w	r3, r2, r1
 8024ac0:	0112      	lsls	r2, r2, #4
 8024ac2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024ac6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8024aca:	1ad2      	subs	r2, r2, r3
 8024acc:	b289      	uxth	r1, r1
 8024ace:	b292      	uxth	r2, r2
 8024ad0:	1a7f      	subs	r7, r7, r1
 8024ad2:	fb02 f909 	mul.w	r9, r2, r9
 8024ad6:	b2bf      	uxth	r7, r7
 8024ad8:	fb02 f808 	mul.w	r8, r2, r8
 8024adc:	fb02 fa0a 	mul.w	sl, r2, sl
 8024ae0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024ae2:	fb07 9905 	mla	r9, r7, r5, r9
 8024ae6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024ae8:	fb07 8800 	mla	r8, r7, r0, r8
 8024aec:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024aee:	fb07 aa0e 	mla	sl, r7, lr, sl
 8024af2:	fb01 9905 	mla	r9, r1, r5, r9
 8024af6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024af8:	fb01 8800 	mla	r8, r1, r0, r8
 8024afc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024afe:	fb01 a102 	mla	r1, r1, r2, sl
 8024b02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024b04:	fb03 9905 	mla	r9, r3, r5, r9
 8024b08:	fb03 8800 	mla	r8, r3, r0, r8
 8024b0c:	fb03 1302 	mla	r3, r3, r2, r1
 8024b10:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024b14:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024b18:	121b      	asrs	r3, r3, #8
 8024b1a:	f886 9000 	strb.w	r9, [r6]
 8024b1e:	f886 8001 	strb.w	r8, [r6, #1]
 8024b22:	70b3      	strb	r3, [r6, #2]
 8024b24:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024b26:	3603      	adds	r6, #3
 8024b28:	449b      	add	fp, r3
 8024b2a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b2c:	441c      	add	r4, r3
 8024b2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024b30:	3b01      	subs	r3, #1
 8024b32:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b34:	e774      	b.n	8024a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8024b36:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024b38:	449b      	add	fp, r3
 8024b3a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b3c:	441c      	add	r4, r3
 8024b3e:	9b06      	ldr	r3, [sp, #24]
 8024b40:	3b01      	subs	r3, #1
 8024b42:	9306      	str	r3, [sp, #24]
 8024b44:	9b07      	ldr	r3, [sp, #28]
 8024b46:	3303      	adds	r3, #3
 8024b48:	9307      	str	r3, [sp, #28]
 8024b4a:	e74a      	b.n	80249e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8024b4c:	d024      	beq.n	8024b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8024b4e:	9b06      	ldr	r3, [sp, #24]
 8024b50:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024b52:	3b01      	subs	r3, #1
 8024b54:	fb00 b003 	mla	r0, r0, r3, fp
 8024b58:	1400      	asrs	r0, r0, #16
 8024b5a:	f53f af5e 	bmi.w	8024a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024b5e:	3901      	subs	r1, #1
 8024b60:	4288      	cmp	r0, r1
 8024b62:	f6bf af5a 	bge.w	8024a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024b66:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024b68:	fb01 4303 	mla	r3, r1, r3, r4
 8024b6c:	141b      	asrs	r3, r3, #16
 8024b6e:	f53f af54 	bmi.w	8024a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024b72:	3a01      	subs	r2, #1
 8024b74:	4293      	cmp	r3, r2
 8024b76:	f6bf af50 	bge.w	8024a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8024b7a:	9b07      	ldr	r3, [sp, #28]
 8024b7c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024b80:	1cde      	adds	r6, r3, #3
 8024b82:	f1be 0f00 	cmp.w	lr, #0
 8024b86:	dc5f      	bgt.n	8024c48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8024b88:	9b06      	ldr	r3, [sp, #24]
 8024b8a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024b8e:	9b07      	ldr	r3, [sp, #28]
 8024b90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024b94:	4423      	add	r3, r4
 8024b96:	9307      	str	r3, [sp, #28]
 8024b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	f340 80c5 	ble.w	8024d2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8024ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024ba4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024ba6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024baa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024bae:	eef0 6a62 	vmov.f32	s13, s5
 8024bb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024bb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024bba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024bbe:	ee16 ba90 	vmov	fp, s13
 8024bc2:	eef0 6a43 	vmov.f32	s13, s6
 8024bc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024bca:	ee16 4a90 	vmov	r4, s13
 8024bce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024bd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024bd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024bda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024bde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024be2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024be6:	ee12 2a90 	vmov	r2, s5
 8024bea:	eef0 2a47 	vmov.f32	s5, s14
 8024bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8024bf2:	ee13 2a10 	vmov	r2, s6
 8024bf6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024bf8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024bfa:	eeb0 3a67 	vmov.f32	s6, s15
 8024bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c02:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024c08:	3b01      	subs	r3, #1
 8024c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024c0e:	bf08      	it	eq
 8024c10:	4613      	moveq	r3, r2
 8024c12:	9306      	str	r3, [sp, #24]
 8024c14:	e6d7      	b.n	80249c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8024c16:	f110 0c01 	adds.w	ip, r0, #1
 8024c1a:	d483      	bmi.n	8024b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024c1c:	4563      	cmp	r3, ip
 8024c1e:	db81      	blt.n	8024b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024c20:	f115 0c01 	adds.w	ip, r5, #1
 8024c24:	f53f af7e 	bmi.w	8024b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024c28:	4567      	cmp	r7, ip
 8024c2a:	f6ff af7b 	blt.w	8024b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024c2e:	b23f      	sxth	r7, r7
 8024c30:	b21b      	sxth	r3, r3
 8024c32:	9700      	str	r7, [sp, #0]
 8024c34:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8024c38:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8024c3c:	9a08      	ldr	r2, [sp, #32]
 8024c3e:	4631      	mov	r1, r6
 8024c40:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024c42:	f7ff fdf9 	bl	8024838 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8024c46:	e76d      	b.n	8024b24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8024c48:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8024c4a:	ea4f 402b 	mov.w	r0, fp, asr #16
 8024c4e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024c52:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024c56:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8024c5a:	1421      	asrs	r1, r4, #16
 8024c5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8024c5e:	fb0c 0101 	mla	r1, ip, r1, r0
 8024c62:	9808      	ldr	r0, [sp, #32]
 8024c64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024c68:	1845      	adds	r5, r0, r1
 8024c6a:	5c40      	ldrb	r0, [r0, r1]
 8024c6c:	796f      	ldrb	r7, [r5, #5]
 8024c6e:	7869      	ldrb	r1, [r5, #1]
 8024c70:	f895 8002 	ldrb.w	r8, [r5, #2]
 8024c74:	f895 a003 	ldrb.w	sl, [r5, #3]
 8024c78:	f895 9004 	ldrb.w	r9, [r5, #4]
 8024c7c:	970c      	str	r7, [sp, #48]	@ 0x30
 8024c7e:	b1a2      	cbz	r2, 8024caa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8024c80:	2703      	movs	r7, #3
 8024c82:	f06f 0304 	mvn.w	r3, #4
 8024c86:	3505      	adds	r5, #5
 8024c88:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8024c8c:	eb05 070c 	add.w	r7, r5, ip
 8024c90:	f815 500c 	ldrb.w	r5, [r5, ip]
 8024c94:	9513      	str	r5, [sp, #76]	@ 0x4c
 8024c96:	787d      	ldrb	r5, [r7, #1]
 8024c98:	9515      	str	r5, [sp, #84]	@ 0x54
 8024c9a:	78bd      	ldrb	r5, [r7, #2]
 8024c9c:	9517      	str	r5, [sp, #92]	@ 0x5c
 8024c9e:	78fd      	ldrb	r5, [r7, #3]
 8024ca0:	9514      	str	r5, [sp, #80]	@ 0x50
 8024ca2:	793d      	ldrb	r5, [r7, #4]
 8024ca4:	9516      	str	r5, [sp, #88]	@ 0x58
 8024ca6:	797d      	ldrb	r5, [r7, #5]
 8024ca8:	9518      	str	r5, [sp, #96]	@ 0x60
 8024caa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024cae:	b292      	uxth	r2, r2
 8024cb0:	3603      	adds	r6, #3
 8024cb2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024cb6:	fb03 f502 	mul.w	r5, r3, r2
 8024cba:	011b      	lsls	r3, r3, #4
 8024cbc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8024cc0:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8024cc4:	1b5b      	subs	r3, r3, r5
 8024cc6:	b292      	uxth	r2, r2
 8024cc8:	b29b      	uxth	r3, r3
 8024cca:	1abf      	subs	r7, r7, r2
 8024ccc:	fb03 f909 	mul.w	r9, r3, r9
 8024cd0:	b2bf      	uxth	r7, r7
 8024cd2:	fb03 fa0a 	mul.w	sl, r3, sl
 8024cd6:	fb07 9901 	mla	r9, r7, r1, r9
 8024cda:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8024cdc:	fb07 aa00 	mla	sl, r7, r0, sl
 8024ce0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024ce2:	fb02 9901 	mla	r9, r2, r1, r9
 8024ce6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8024ce8:	fb02 aa00 	mla	sl, r2, r0, sl
 8024cec:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8024cee:	fb05 9901 	mla	r9, r5, r1, r9
 8024cf2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024cf4:	fb05 aa00 	mla	sl, r5, r0, sl
 8024cf8:	434b      	muls	r3, r1
 8024cfa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024cfc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024d00:	fb07 3308 	mla	r3, r7, r8, r3
 8024d04:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024d08:	f806 ac06 	strb.w	sl, [r6, #-6]
 8024d0c:	fb02 3201 	mla	r2, r2, r1, r3
 8024d10:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024d12:	f806 9c05 	strb.w	r9, [r6, #-5]
 8024d16:	fb05 2503 	mla	r5, r5, r3, r2
 8024d1a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024d1c:	122d      	asrs	r5, r5, #8
 8024d1e:	449b      	add	fp, r3
 8024d20:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024d22:	f806 5c04 	strb.w	r5, [r6, #-4]
 8024d26:	441c      	add	r4, r3
 8024d28:	e72b      	b.n	8024b82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024d2a:	b01b      	add	sp, #108	@ 0x6c
 8024d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024d30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8024d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d34:	b087      	sub	sp, #28
 8024d36:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8024d3a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8024d3e:	fb05 7003 	mla	r0, r5, r3, r7
 8024d42:	2d00      	cmp	r5, #0
 8024d44:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8024d48:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8024d4c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8024d50:	f2c0 811f 	blt.w	8024f92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8024d54:	45a8      	cmp	r8, r5
 8024d56:	f340 811c 	ble.w	8024f92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8024d5a:	2f00      	cmp	r7, #0
 8024d5c:	f2c0 8117 	blt.w	8024f8e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8024d60:	42bb      	cmp	r3, r7
 8024d62:	f340 8114 	ble.w	8024f8e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8024d66:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8024d6a:	1c7a      	adds	r2, r7, #1
 8024d6c:	f100 8114 	bmi.w	8024f98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8024d70:	4293      	cmp	r3, r2
 8024d72:	f340 8111 	ble.w	8024f98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8024d76:	2c00      	cmp	r4, #0
 8024d78:	f000 8110 	beq.w	8024f9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8024d7c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8024d80:	3501      	adds	r5, #1
 8024d82:	f100 810f 	bmi.w	8024fa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8024d86:	45a8      	cmp	r8, r5
 8024d88:	f340 810c 	ble.w	8024fa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8024d8c:	f1be 0f00 	cmp.w	lr, #0
 8024d90:	f000 810b 	beq.w	8024faa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8024d94:	2f00      	cmp	r7, #0
 8024d96:	f2c0 8103 	blt.w	8024fa0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8024d9a:	42bb      	cmp	r3, r7
 8024d9c:	f340 8100 	ble.w	8024fa0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8024da0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8024da4:	3701      	adds	r7, #1
 8024da6:	f100 8103 	bmi.w	8024fb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8024daa:	42bb      	cmp	r3, r7
 8024dac:	f340 8100 	ble.w	8024fb0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8024db0:	2c00      	cmp	r4, #0
 8024db2:	f000 80ff 	beq.w	8024fb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8024db6:	3301      	adds	r3, #1
 8024db8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8024dbc:	fa1f fc84 	uxth.w	ip, r4
 8024dc0:	fa1f fe8e 	uxth.w	lr, lr
 8024dc4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024dc8:	fb0c f90e 	mul.w	r9, ip, lr
 8024dcc:	0e13      	lsrs	r3, r2, #24
 8024dce:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024dd2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8024dd6:	9302      	str	r3, [sp, #8]
 8024dd8:	ebac 0709 	sub.w	r7, ip, r9
 8024ddc:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8024de0:	fa1f f48e 	uxth.w	r4, lr
 8024de4:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8024de8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024dec:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8024df0:	fb0a fe0e 	mul.w	lr, sl, lr
 8024df4:	1b1b      	subs	r3, r3, r4
 8024df6:	fb0a f606 	mul.w	r6, sl, r6
 8024dfa:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8024dfe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024e02:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8024e06:	b29b      	uxth	r3, r3
 8024e08:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024e0c:	b2bf      	uxth	r7, r7
 8024e0e:	9301      	str	r3, [sp, #4]
 8024e10:	44e6      	add	lr, ip
 8024e12:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8024e16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e1a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024e1e:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8024e22:	9303      	str	r3, [sp, #12]
 8024e24:	0a33      	lsrs	r3, r6, #8
 8024e26:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8024e2a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024e2e:	9304      	str	r3, [sp, #16]
 8024e30:	fb0b f606 	mul.w	r6, fp, r6
 8024e34:	fb0b f000 	mul.w	r0, fp, r0
 8024e38:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8024e3c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8024e40:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e44:	44b6      	add	lr, r6
 8024e46:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8024e4a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8024e4e:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8024e52:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024e56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e5a:	fb08 f606 	mul.w	r6, r8, r6
 8024e5e:	0a03      	lsrs	r3, r0, #8
 8024e60:	fb08 f505 	mul.w	r5, r8, r5
 8024e64:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e68:	0a30      	lsrs	r0, r6, #8
 8024e6a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8024e6e:	9305      	str	r3, [sp, #20]
 8024e70:	0e13      	lsrs	r3, r2, #24
 8024e72:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024e76:	fb0e fe07 	mul.w	lr, lr, r7
 8024e7a:	4430      	add	r0, r6
 8024e7c:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8024e80:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024e84:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8024e88:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8024e8c:	0a00      	lsrs	r0, r0, #8
 8024e8e:	435e      	muls	r6, r3
 8024e90:	0a2d      	lsrs	r5, r5, #8
 8024e92:	435a      	muls	r2, r3
 8024e94:	9b03      	ldr	r3, [sp, #12]
 8024e96:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8024e9a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8024e9e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024ea2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024ea6:	44b4      	add	ip, r6
 8024ea8:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8024eac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024eb0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8024eb4:	9e01      	ldr	r6, [sp, #4]
 8024eb6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024eba:	fb03 ee06 	mla	lr, r3, r6, lr
 8024ebe:	9b04      	ldr	r3, [sp, #16]
 8024ec0:	0a12      	lsrs	r2, r2, #8
 8024ec2:	fb0c ee09 	mla	lr, ip, r9, lr
 8024ec6:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8024eca:	9b05      	ldr	r3, [sp, #20]
 8024ecc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8024ed0:	fb00 ee04 	mla	lr, r0, r4, lr
 8024ed4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ed8:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8024edc:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8024ee0:	9b01      	ldr	r3, [sp, #4]
 8024ee2:	fb07 fe0e 	mul.w	lr, r7, lr
 8024ee6:	fb07 f70b 	mul.w	r7, r7, fp
 8024eea:	fb03 ee06 	mla	lr, r3, r6, lr
 8024eee:	fb03 730a 	mla	r3, r3, sl, r7
 8024ef2:	fb09 e202 	mla	r2, r9, r2, lr
 8024ef6:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8024efa:	fb04 2e0e 	mla	lr, r4, lr, r2
 8024efe:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8024f02:	fb04 3408 	mla	r4, r4, r8, r3
 8024f06:	9b02      	ldr	r3, [sp, #8]
 8024f08:	b292      	uxth	r2, r2
 8024f0a:	fb09 4903 	mla	r9, r9, r3, r4
 8024f0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f12:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8024f16:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8024f1a:	fb09 f902 	mul.w	r9, r9, r2
 8024f1e:	ea40 0e0e 	orr.w	lr, r0, lr
 8024f22:	f109 0301 	add.w	r3, r9, #1
 8024f26:	fa5f f08e 	uxtb.w	r0, lr
 8024f2a:	fb10 f002 	smulbb	r0, r0, r2
 8024f2e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024f32:	780b      	ldrb	r3, [r1, #0]
 8024f34:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8024f38:	fa5f f989 	uxtb.w	r9, r9
 8024f3c:	fb03 0309 	mla	r3, r3, r9, r0
 8024f40:	b29b      	uxth	r3, r3
 8024f42:	1c58      	adds	r0, r3, #1
 8024f44:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024f48:	7848      	ldrb	r0, [r1, #1]
 8024f4a:	fb10 f009 	smulbb	r0, r0, r9
 8024f4e:	121b      	asrs	r3, r3, #8
 8024f50:	700b      	strb	r3, [r1, #0]
 8024f52:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8024f56:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024f5a:	fb03 0302 	mla	r3, r3, r2, r0
 8024f5e:	b29b      	uxth	r3, r3
 8024f60:	1c58      	adds	r0, r3, #1
 8024f62:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024f66:	121b      	asrs	r3, r3, #8
 8024f68:	704b      	strb	r3, [r1, #1]
 8024f6a:	788b      	ldrb	r3, [r1, #2]
 8024f6c:	fb13 f909 	smulbb	r9, r3, r9
 8024f70:	fb0e 9e02 	mla	lr, lr, r2, r9
 8024f74:	fa1f fe8e 	uxth.w	lr, lr
 8024f78:	f10e 0301 	add.w	r3, lr, #1
 8024f7c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8024f80:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024f84:	f881 e002 	strb.w	lr, [r1, #2]
 8024f88:	b007      	add	sp, #28
 8024f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f8e:	2600      	movs	r6, #0
 8024f90:	e6eb      	b.n	8024d6a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8024f92:	2000      	movs	r0, #0
 8024f94:	4606      	mov	r6, r0
 8024f96:	e6f3      	b.n	8024d80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8024f98:	2000      	movs	r0, #0
 8024f9a:	e6f1      	b.n	8024d80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8024f9c:	4620      	mov	r0, r4
 8024f9e:	e6ef      	b.n	8024d80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8024fa0:	2500      	movs	r5, #0
 8024fa2:	e6ff      	b.n	8024da4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8024fa4:	2200      	movs	r2, #0
 8024fa6:	4615      	mov	r5, r2
 8024fa8:	e708      	b.n	8024dbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024faa:	4672      	mov	r2, lr
 8024fac:	4675      	mov	r5, lr
 8024fae:	e705      	b.n	8024dbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024fb0:	2200      	movs	r2, #0
 8024fb2:	e703      	b.n	8024dbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024fb4:	4622      	mov	r2, r4
 8024fb6:	e701      	b.n	8024dbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08024fb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fbc:	b09d      	sub	sp, #116	@ 0x74
 8024fbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8024fc0:	9307      	str	r3, [sp, #28]
 8024fc2:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8024fc4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8024fc8:	901b      	str	r0, [sp, #108]	@ 0x6c
 8024fca:	931a      	str	r3, [sp, #104]	@ 0x68
 8024fcc:	6850      	ldr	r0, [r2, #4]
 8024fce:	9117      	str	r1, [sp, #92]	@ 0x5c
 8024fd0:	6812      	ldr	r2, [r2, #0]
 8024fd2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8024fd6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8024fda:	fb00 1303 	mla	r3, r0, r3, r1
 8024fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024fe2:	18d3      	adds	r3, r2, r3
 8024fe4:	930a      	str	r3, [sp, #40]	@ 0x28
 8024fe6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024fe8:	681b      	ldr	r3, [r3, #0]
 8024fea:	9310      	str	r3, [sp, #64]	@ 0x40
 8024fec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8024ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024ff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024ff4:	2b00      	cmp	r3, #0
 8024ff6:	dc03      	bgt.n	8025000 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024ff8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	f340 8368 	ble.w	80256d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025000:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025002:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025006:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802500a:	1e48      	subs	r0, r1, #1
 802500c:	1e57      	subs	r7, r2, #1
 802500e:	9b07      	ldr	r3, [sp, #28]
 8025010:	2b00      	cmp	r3, #0
 8025012:	f340 8187 	ble.w	8025324 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025016:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802501a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802501e:	d406      	bmi.n	802502e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025020:	4584      	cmp	ip, r0
 8025022:	da04      	bge.n	802502e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025024:	2b00      	cmp	r3, #0
 8025026:	db02      	blt.n	802502e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025028:	42bb      	cmp	r3, r7
 802502a:	f2c0 817c 	blt.w	8025326 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802502e:	f11c 0c01 	adds.w	ip, ip, #1
 8025032:	f100 816c 	bmi.w	802530e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025036:	4561      	cmp	r1, ip
 8025038:	f2c0 8169 	blt.w	802530e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802503c:	3301      	adds	r3, #1
 802503e:	f100 8166 	bmi.w	802530e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025042:	429a      	cmp	r2, r3
 8025044:	f2c0 8163 	blt.w	802530e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025048:	9b07      	ldr	r3, [sp, #28]
 802504a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802504c:	9318      	str	r3, [sp, #96]	@ 0x60
 802504e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025050:	2b00      	cmp	r3, #0
 8025052:	f340 8186 	ble.w	8025362 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025056:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025058:	142a      	asrs	r2, r5, #16
 802505a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802505e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025062:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025066:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802506a:	f100 81cb 	bmi.w	8025404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802506e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025072:	4542      	cmp	r2, r8
 8025074:	f280 81c6 	bge.w	8025404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025078:	2800      	cmp	r0, #0
 802507a:	f2c0 81c3 	blt.w	8025404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802507e:	f103 38ff 	add.w	r8, r3, #4294967295
 8025082:	4540      	cmp	r0, r8
 8025084:	f280 81be 	bge.w	8025404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8025088:	fa0f f38e 	sxth.w	r3, lr
 802508c:	fb00 2203 	mla	r2, r0, r3, r2
 8025090:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025092:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8025096:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802509a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802509e:	2900      	cmp	r1, #0
 80250a0:	f000 81a6 	beq.w	80253f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80250a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80250a8:	900c      	str	r0, [sp, #48]	@ 0x30
 80250aa:	0e00      	lsrs	r0, r0, #24
 80250ac:	9013      	str	r0, [sp, #76]	@ 0x4c
 80250ae:	f1bc 0f00 	cmp.w	ip, #0
 80250b2:	d00f      	beq.n	80250d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80250b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80250b8:	3b01      	subs	r3, #1
 80250ba:	009b      	lsls	r3, r3, #2
 80250bc:	3304      	adds	r3, #4
 80250be:	eb08 0003 	add.w	r0, r8, r3
 80250c2:	f858 3003 	ldr.w	r3, [r8, r3]
 80250c6:	9308      	str	r3, [sp, #32]
 80250c8:	0e1b      	lsrs	r3, r3, #24
 80250ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80250cc:	6843      	ldr	r3, [r0, #4]
 80250ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80250d0:	0e1b      	lsrs	r3, r3, #24
 80250d2:	9314      	str	r3, [sp, #80]	@ 0x50
 80250d4:	b289      	uxth	r1, r1
 80250d6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80250d8:	fa1f fc8c 	uxth.w	ip, ip
 80250dc:	0108      	lsls	r0, r1, #4
 80250de:	fb01 f90c 	mul.w	r9, r1, ip
 80250e2:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80250e6:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80250ea:	eba0 0809 	sub.w	r8, r0, r9
 80250ee:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80250f0:	fa1f f18c 	uxth.w	r1, ip
 80250f4:	fa1f f888 	uxth.w	r8, r8
 80250f8:	1a5b      	subs	r3, r3, r1
 80250fa:	fb08 f000 	mul.w	r0, r8, r0
 80250fe:	b29b      	uxth	r3, r3
 8025100:	fb03 000e 	mla	r0, r3, lr, r0
 8025104:	fb01 0004 	mla	r0, r1, r4, r0
 8025108:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802510a:	fb09 0004 	mla	r0, r9, r4, r0
 802510e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025112:	2800      	cmp	r0, #0
 8025114:	f000 80f2 	beq.w	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025118:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802511c:	d01b      	beq.n	8025156 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802511e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8025122:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025126:	fb0e fa0a 	mul.w	sl, lr, sl
 802512a:	fb0e fe02 	mul.w	lr, lr, r2
 802512e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8025132:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025136:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802513a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802513e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025142:	4452      	add	r2, sl
 8025144:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025148:	0a12      	lsrs	r2, r2, #8
 802514a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802514e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025152:	ea42 020c 	orr.w	r2, r2, ip
 8025156:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025158:	2cff      	cmp	r4, #255	@ 0xff
 802515a:	d021      	beq.n	80251a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802515c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802515e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8025162:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025164:	fb04 fb0b 	mul.w	fp, r4, fp
 8025168:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802516a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802516e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025170:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025174:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025178:	fb04 fa0a 	mul.w	sl, r4, sl
 802517c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025180:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025184:	44de      	add	lr, fp
 8025186:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802518a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802518e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025192:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025196:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802519a:	ea4e 040a 	orr.w	r4, lr, sl
 802519e:	940c      	str	r4, [sp, #48]	@ 0x30
 80251a0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80251a2:	2cff      	cmp	r4, #255	@ 0xff
 80251a4:	d021      	beq.n	80251ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80251a6:	9c08      	ldr	r4, [sp, #32]
 80251a8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80251ac:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80251ae:	fb04 fb0b 	mul.w	fp, r4, fp
 80251b2:	9c08      	ldr	r4, [sp, #32]
 80251b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80251b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80251ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80251be:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80251c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80251c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80251ca:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80251ce:	44de      	add	lr, fp
 80251d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80251d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80251e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80251e4:	ea4e 040a 	orr.w	r4, lr, sl
 80251e8:	9408      	str	r4, [sp, #32]
 80251ea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80251ec:	2cff      	cmp	r4, #255	@ 0xff
 80251ee:	d021      	beq.n	8025234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80251f0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80251f2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80251f6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80251f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80251fc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80251fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025202:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025204:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025208:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802520c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025210:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025214:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025218:	44de      	add	lr, fp
 802521a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802521e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025222:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025226:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802522a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802522e:	ea4e 040a 	orr.w	r4, lr, sl
 8025232:	940d      	str	r4, [sp, #52]	@ 0x34
 8025234:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025236:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802523a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802523e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025242:	9c08      	ldr	r4, [sp, #32]
 8025244:	fb08 fc0c 	mul.w	ip, r8, ip
 8025248:	fb03 cc0e 	mla	ip, r3, lr, ip
 802524c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025250:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025252:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025256:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802525a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802525c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025260:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025264:	fb08 f80e 	mul.w	r8, r8, lr
 8025268:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802526c:	fb03 8202 	mla	r2, r3, r2, r8
 8025270:	9b08      	ldr	r3, [sp, #32]
 8025272:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025276:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802527a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802527c:	fb01 220a 	mla	r2, r1, sl, r2
 8025280:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8025284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025286:	fb09 2901 	mla	r9, r9, r1, r2
 802528a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802528c:	4343      	muls	r3, r0
 802528e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025292:	1c58      	adds	r0, r3, #1
 8025294:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025298:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802529c:	783b      	ldrb	r3, [r7, #0]
 802529e:	ea4c 0c09 	orr.w	ip, ip, r9
 80252a2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80252a6:	fa5f f28c 	uxtb.w	r2, ip
 80252aa:	b2c0      	uxtb	r0, r0
 80252ac:	fb12 f201 	smulbb	r2, r2, r1
 80252b0:	fb03 2300 	mla	r3, r3, r0, r2
 80252b4:	b29b      	uxth	r3, r3
 80252b6:	1c5a      	adds	r2, r3, #1
 80252b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80252bc:	787a      	ldrb	r2, [r7, #1]
 80252be:	fb12 f200 	smulbb	r2, r2, r0
 80252c2:	121b      	asrs	r3, r3, #8
 80252c4:	703b      	strb	r3, [r7, #0]
 80252c6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80252ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80252ce:	fb03 2301 	mla	r3, r3, r1, r2
 80252d2:	b29b      	uxth	r3, r3
 80252d4:	1c5a      	adds	r2, r3, #1
 80252d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80252da:	121b      	asrs	r3, r3, #8
 80252dc:	707b      	strb	r3, [r7, #1]
 80252de:	78bb      	ldrb	r3, [r7, #2]
 80252e0:	fb13 f000 	smulbb	r0, r3, r0
 80252e4:	fb0c 0c01 	mla	ip, ip, r1, r0
 80252e8:	fa1f fc8c 	uxth.w	ip, ip
 80252ec:	f10c 0301 	add.w	r3, ip, #1
 80252f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80252f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80252f8:	f887 c002 	strb.w	ip, [r7, #2]
 80252fc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80252fe:	3703      	adds	r7, #3
 8025300:	441d      	add	r5, r3
 8025302:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025304:	441e      	add	r6, r3
 8025306:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025308:	3b01      	subs	r3, #1
 802530a:	9318      	str	r3, [sp, #96]	@ 0x60
 802530c:	e69f      	b.n	802504e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802530e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025310:	441d      	add	r5, r3
 8025312:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025314:	441e      	add	r6, r3
 8025316:	9b07      	ldr	r3, [sp, #28]
 8025318:	3b01      	subs	r3, #1
 802531a:	9307      	str	r3, [sp, #28]
 802531c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802531e:	3303      	adds	r3, #3
 8025320:	930a      	str	r3, [sp, #40]	@ 0x28
 8025322:	e674      	b.n	802500e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025324:	d025      	beq.n	8025372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8025326:	9b07      	ldr	r3, [sp, #28]
 8025328:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802532a:	3b01      	subs	r3, #1
 802532c:	fb00 5003 	mla	r0, r0, r3, r5
 8025330:	1400      	asrs	r0, r0, #16
 8025332:	f53f ae89 	bmi.w	8025048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025336:	3901      	subs	r1, #1
 8025338:	4288      	cmp	r0, r1
 802533a:	f6bf ae85 	bge.w	8025048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802533e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8025340:	fb01 6303 	mla	r3, r1, r3, r6
 8025344:	141b      	asrs	r3, r3, #16
 8025346:	f53f ae7f 	bmi.w	8025048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802534a:	3a01      	subs	r2, #1
 802534c:	4293      	cmp	r3, r2
 802534e:	f6bf ae7b 	bge.w	8025048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025354:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025358:	f103 0e03 	add.w	lr, r3, #3
 802535c:	f1bb 0f00 	cmp.w	fp, #0
 8025360:	dc6e      	bgt.n	8025440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025362:	9b07      	ldr	r3, [sp, #28]
 8025364:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802536a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802536e:	4423      	add	r3, r4
 8025370:	930a      	str	r3, [sp, #40]	@ 0x28
 8025372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025374:	2b00      	cmp	r3, #0
 8025376:	f340 81ab 	ble.w	80256d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802537a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802537e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025380:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025384:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025388:	eef0 6a62 	vmov.f32	s13, s5
 802538c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025390:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025394:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025398:	ee16 5a90 	vmov	r5, s13
 802539c:	eef0 6a43 	vmov.f32	s13, s6
 80253a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253a4:	ee16 6a90 	vmov	r6, s13
 80253a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80253ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80253b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80253b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80253b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80253bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80253c0:	ee12 2a90 	vmov	r2, s5
 80253c4:	eef0 2a47 	vmov.f32	s5, s14
 80253c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80253cc:	ee13 2a10 	vmov	r2, s6
 80253d0:	9329      	str	r3, [sp, #164]	@ 0xa4
 80253d2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80253d4:	eeb0 3a67 	vmov.f32	s6, s15
 80253d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80253dc:	932a      	str	r3, [sp, #168]	@ 0xa8
 80253de:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80253e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80253e2:	3b01      	subs	r3, #1
 80253e4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80253e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80253e8:	bf08      	it	eq
 80253ea:	4613      	moveq	r3, r2
 80253ec:	9307      	str	r3, [sp, #28]
 80253ee:	e600      	b.n	8024ff2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80253f0:	f1bc 0f00 	cmp.w	ip, #0
 80253f4:	f43f ae6e 	beq.w	80250d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80253f8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80253fc:	9308      	str	r3, [sp, #32]
 80253fe:	0e1b      	lsrs	r3, r3, #24
 8025400:	9311      	str	r3, [sp, #68]	@ 0x44
 8025402:	e667      	b.n	80250d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8025404:	f112 0801 	adds.w	r8, r2, #1
 8025408:	f53f af78 	bmi.w	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802540c:	45c6      	cmp	lr, r8
 802540e:	f6ff af75 	blt.w	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025412:	f110 0801 	adds.w	r8, r0, #1
 8025416:	f53f af71 	bmi.w	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802541a:	4543      	cmp	r3, r8
 802541c:	f6ff af6e 	blt.w	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025420:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8025422:	b21b      	sxth	r3, r3
 8025424:	9201      	str	r2, [sp, #4]
 8025426:	9300      	str	r3, [sp, #0]
 8025428:	fa0f f38e 	sxth.w	r3, lr
 802542c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802542e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025432:	e9cd c404 	strd	ip, r4, [sp, #16]
 8025436:	4639      	mov	r1, r7
 8025438:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802543a:	f7ff fc79 	bl	8024d30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802543e:	e75d      	b.n	80252fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025440:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025442:	142f      	asrs	r7, r5, #16
 8025444:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025446:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802544a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802544e:	1433      	asrs	r3, r6, #16
 8025450:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025454:	fb02 7303 	mla	r3, r2, r3, r7
 8025458:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 802545c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025460:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025464:	2900      	cmp	r1, #0
 8025466:	f000 812a 	beq.w	80256be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802546a:	687c      	ldr	r4, [r7, #4]
 802546c:	940e      	str	r4, [sp, #56]	@ 0x38
 802546e:	0e24      	lsrs	r4, r4, #24
 8025470:	9415      	str	r4, [sp, #84]	@ 0x54
 8025472:	b178      	cbz	r0, 8025494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8025474:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8025478:	3a01      	subs	r2, #1
 802547a:	0092      	lsls	r2, r2, #2
 802547c:	3204      	adds	r2, #4
 802547e:	eb07 0802 	add.w	r8, r7, r2
 8025482:	58ba      	ldr	r2, [r7, r2]
 8025484:	9209      	str	r2, [sp, #36]	@ 0x24
 8025486:	0e12      	lsrs	r2, r2, #24
 8025488:	9212      	str	r2, [sp, #72]	@ 0x48
 802548a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802548e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8025490:	0e12      	lsrs	r2, r2, #24
 8025492:	9216      	str	r2, [sp, #88]	@ 0x58
 8025494:	b289      	uxth	r1, r1
 8025496:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025498:	b280      	uxth	r0, r0
 802549a:	fb01 f900 	mul.w	r9, r1, r0
 802549e:	0109      	lsls	r1, r1, #4
 80254a0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80254a4:	eba1 0809 	sub.w	r8, r1, r9
 80254a8:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 80254ac:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80254ae:	b280      	uxth	r0, r0
 80254b0:	fa1f f888 	uxth.w	r8, r8
 80254b4:	1a12      	subs	r2, r2, r0
 80254b6:	fb08 f101 	mul.w	r1, r8, r1
 80254ba:	b292      	uxth	r2, r2
 80254bc:	fb02 110c 	mla	r1, r2, ip, r1
 80254c0:	fb00 1104 	mla	r1, r0, r4, r1
 80254c4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80254c6:	fb09 1104 	mla	r1, r9, r4, r1
 80254ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80254ce:	2900      	cmp	r1, #0
 80254d0:	f000 80ec 	beq.w	80256ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80254d4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80254d8:	d019      	beq.n	802550e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80254da:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80254de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80254e2:	fb0c fa0a 	mul.w	sl, ip, sl
 80254e6:	fb0c fc03 	mul.w	ip, ip, r3
 80254ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80254ee:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80254f2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80254f6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80254fa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80254fe:	4453      	add	r3, sl
 8025500:	0a3f      	lsrs	r7, r7, #8
 8025502:	0a1b      	lsrs	r3, r3, #8
 8025504:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025508:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802550c:	433b      	orrs	r3, r7
 802550e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025510:	2cff      	cmp	r4, #255	@ 0xff
 8025512:	d020      	beq.n	8025556 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8025514:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025516:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802551a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802551c:	4367      	muls	r7, r4
 802551e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025520:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025524:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025528:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802552a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802552e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025532:	fb04 fa0a 	mul.w	sl, r4, sl
 8025536:	44bc      	add	ip, r7
 8025538:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802553c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025540:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025544:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025548:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802554c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025550:	ea4c 040a 	orr.w	r4, ip, sl
 8025554:	940e      	str	r4, [sp, #56]	@ 0x38
 8025556:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025558:	2cff      	cmp	r4, #255	@ 0xff
 802555a:	d020      	beq.n	802559e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802555c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802555e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025562:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025564:	4367      	muls	r7, r4
 8025566:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025568:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802556c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025570:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025572:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025576:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802557a:	fb04 fa0a 	mul.w	sl, r4, sl
 802557e:	44bc      	add	ip, r7
 8025580:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025584:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025588:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802558c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025590:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025594:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025598:	ea4c 040a 	orr.w	r4, ip, sl
 802559c:	9409      	str	r4, [sp, #36]	@ 0x24
 802559e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80255a0:	2cff      	cmp	r4, #255	@ 0xff
 80255a2:	d020      	beq.n	80255e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80255a4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80255a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80255aa:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80255ac:	4367      	muls	r7, r4
 80255ae:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80255b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80255b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80255b8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80255ba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80255be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80255c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80255c6:	44bc      	add	ip, r7
 80255c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80255cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80255d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80255d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80255e0:	ea4c 040a 	orr.w	r4, ip, sl
 80255e4:	940f      	str	r4, [sp, #60]	@ 0x3c
 80255e6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80255e8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80255ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80255f0:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80255f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80255f6:	fb08 f707 	mul.w	r7, r8, r7
 80255fa:	fb02 770c 	mla	r7, r2, ip, r7
 80255fe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025602:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025604:	fb00 770c 	mla	r7, r0, ip, r7
 8025608:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802560c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802560e:	fb09 770c 	mla	r7, r9, ip, r7
 8025612:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025616:	fb08 f80c 	mul.w	r8, r8, ip
 802561a:	0a3f      	lsrs	r7, r7, #8
 802561c:	fb02 8303 	mla	r3, r2, r3, r8
 8025620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025622:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025626:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802562a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802562c:	fb00 330a 	mla	r3, r0, sl, r3
 8025630:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025634:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8025636:	fb09 3c0c 	mla	ip, r9, ip, r3
 802563a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802563c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025640:	434b      	muls	r3, r1
 8025642:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025646:	1c59      	adds	r1, r3, #1
 8025648:	ea47 070c 	orr.w	r7, r7, ip
 802564c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025650:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025654:	b2fa      	uxtb	r2, r7
 8025656:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802565a:	fb12 f200 	smulbb	r2, r2, r0
 802565e:	b2c9      	uxtb	r1, r1
 8025660:	fb03 2301 	mla	r3, r3, r1, r2
 8025664:	b29b      	uxth	r3, r3
 8025666:	1c5a      	adds	r2, r3, #1
 8025668:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802566c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025670:	fb12 f201 	smulbb	r2, r2, r1
 8025674:	121b      	asrs	r3, r3, #8
 8025676:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802567a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802567e:	0c3f      	lsrs	r7, r7, #16
 8025680:	fb03 2300 	mla	r3, r3, r0, r2
 8025684:	b29b      	uxth	r3, r3
 8025686:	1c5a      	adds	r2, r3, #1
 8025688:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802568c:	121b      	asrs	r3, r3, #8
 802568e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025692:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025696:	fb13 f101 	smulbb	r1, r3, r1
 802569a:	fb07 1700 	mla	r7, r7, r0, r1
 802569e:	b2bf      	uxth	r7, r7
 80256a0:	1c79      	adds	r1, r7, #1
 80256a2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80256a6:	123f      	asrs	r7, r7, #8
 80256a8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80256ac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80256ae:	f10e 0e03 	add.w	lr, lr, #3
 80256b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80256b6:	441d      	add	r5, r3
 80256b8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80256ba:	441e      	add	r6, r3
 80256bc:	e64e      	b.n	802535c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80256be:	2800      	cmp	r0, #0
 80256c0:	f43f aee8 	beq.w	8025494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80256c4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80256c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80256ca:	0e12      	lsrs	r2, r2, #24
 80256cc:	9212      	str	r2, [sp, #72]	@ 0x48
 80256ce:	e6e1      	b.n	8025494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80256d0:	b01d      	add	sp, #116	@ 0x74
 80256d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080256d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80256d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256da:	b087      	sub	sp, #28
 80256dc:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80256e0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80256e4:	fb05 7003 	mla	r0, r5, r3, r7
 80256e8:	2d00      	cmp	r5, #0
 80256ea:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80256ee:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80256f2:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80256f6:	f2c0 810a 	blt.w	802590e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80256fa:	45a8      	cmp	r8, r5
 80256fc:	f340 8107 	ble.w	802590e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8025700:	2f00      	cmp	r7, #0
 8025702:	f2c0 8102 	blt.w	802590a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8025706:	42bb      	cmp	r3, r7
 8025708:	f340 80ff 	ble.w	802590a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802570c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025710:	1c7a      	adds	r2, r7, #1
 8025712:	f100 80ff 	bmi.w	8025914 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8025716:	4293      	cmp	r3, r2
 8025718:	f340 80fc 	ble.w	8025914 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802571c:	2c00      	cmp	r4, #0
 802571e:	f000 80fb 	beq.w	8025918 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8025722:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8025726:	3501      	adds	r5, #1
 8025728:	f100 80fa 	bmi.w	8025920 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802572c:	45a8      	cmp	r8, r5
 802572e:	f340 80f7 	ble.w	8025920 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8025732:	f1be 0f00 	cmp.w	lr, #0
 8025736:	f000 80f6 	beq.w	8025926 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802573a:	2f00      	cmp	r7, #0
 802573c:	f2c0 80ee 	blt.w	802591c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8025740:	42bb      	cmp	r3, r7
 8025742:	f340 80eb 	ble.w	802591c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8025746:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802574a:	3701      	adds	r7, #1
 802574c:	f100 80ee 	bmi.w	802592c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8025750:	42bb      	cmp	r3, r7
 8025752:	f340 80eb 	ble.w	802592c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8025756:	2c00      	cmp	r4, #0
 8025758:	f000 80ea 	beq.w	8025930 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 802575c:	3301      	adds	r3, #1
 802575e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025762:	fa1f fc84 	uxth.w	ip, r4
 8025766:	fa1f fe8e 	uxth.w	lr, lr
 802576a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802576e:	fb0c f90e 	mul.w	r9, ip, lr
 8025772:	0e13      	lsrs	r3, r2, #24
 8025774:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8025778:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802577c:	9302      	str	r3, [sp, #8]
 802577e:	ebac 0709 	sub.w	r7, ip, r9
 8025782:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8025786:	fa1f f48e 	uxth.w	r4, lr
 802578a:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 802578e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025792:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8025796:	fb0a fe0e 	mul.w	lr, sl, lr
 802579a:	1b1b      	subs	r3, r3, r4
 802579c:	fb0a f606 	mul.w	r6, sl, r6
 80257a0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80257a4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80257a8:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80257ac:	b29b      	uxth	r3, r3
 80257ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80257b2:	b2bf      	uxth	r7, r7
 80257b4:	9301      	str	r3, [sp, #4]
 80257b6:	44e6      	add	lr, ip
 80257b8:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80257bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257c0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80257c4:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80257c8:	9303      	str	r3, [sp, #12]
 80257ca:	0a33      	lsrs	r3, r6, #8
 80257cc:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80257d0:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80257d4:	9304      	str	r3, [sp, #16]
 80257d6:	fb0b f606 	mul.w	r6, fp, r6
 80257da:	fb0b f000 	mul.w	r0, fp, r0
 80257de:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80257e2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80257e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80257ea:	44b6      	add	lr, r6
 80257ec:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80257f0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80257f4:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80257f8:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80257fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025800:	fb08 f606 	mul.w	r6, r8, r6
 8025804:	0a03      	lsrs	r3, r0, #8
 8025806:	fb08 f505 	mul.w	r5, r8, r5
 802580a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802580e:	0a30      	lsrs	r0, r6, #8
 8025810:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025814:	9305      	str	r3, [sp, #20]
 8025816:	0e13      	lsrs	r3, r2, #24
 8025818:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802581c:	fb0e fe07 	mul.w	lr, lr, r7
 8025820:	4430      	add	r0, r6
 8025822:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8025826:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802582a:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 802582e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025832:	0a00      	lsrs	r0, r0, #8
 8025834:	435e      	muls	r6, r3
 8025836:	0a2d      	lsrs	r5, r5, #8
 8025838:	435a      	muls	r2, r3
 802583a:	9b03      	ldr	r3, [sp, #12]
 802583c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8025840:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025844:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025848:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802584c:	44b4      	add	ip, r6
 802584e:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8025852:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025856:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802585a:	9e01      	ldr	r6, [sp, #4]
 802585c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025860:	fb03 ee06 	mla	lr, r3, r6, lr
 8025864:	9b04      	ldr	r3, [sp, #16]
 8025866:	0a12      	lsrs	r2, r2, #8
 8025868:	fb0c ee09 	mla	lr, ip, r9, lr
 802586c:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8025870:	9b05      	ldr	r3, [sp, #20]
 8025872:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025876:	fb00 ee04 	mla	lr, r0, r4, lr
 802587a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802587e:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8025882:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8025886:	9b01      	ldr	r3, [sp, #4]
 8025888:	fb07 fe0e 	mul.w	lr, r7, lr
 802588c:	fb07 f70b 	mul.w	r7, r7, fp
 8025890:	fb03 ee06 	mla	lr, r3, r6, lr
 8025894:	fb03 730a 	mla	r3, r3, sl, r7
 8025898:	fb09 e202 	mla	r2, r9, r2, lr
 802589c:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80258a0:	fb04 2e0e 	mla	lr, r4, lr, r2
 80258a4:	fb04 3408 	mla	r4, r4, r8, r3
 80258a8:	9b02      	ldr	r3, [sp, #8]
 80258aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80258ae:	fb09 4903 	mla	r9, r9, r3, r4
 80258b2:	780b      	ldrb	r3, [r1, #0]
 80258b4:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80258b8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80258bc:	ea40 0e0e 	orr.w	lr, r0, lr
 80258c0:	fa5f f989 	uxtb.w	r9, r9
 80258c4:	fb03 f209 	mul.w	r2, r3, r9
 80258c8:	1c53      	adds	r3, r2, #1
 80258ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80258ce:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80258d2:	700b      	strb	r3, [r1, #0]
 80258d4:	784b      	ldrb	r3, [r1, #1]
 80258d6:	fb03 f309 	mul.w	r3, r3, r9
 80258da:	1c5a      	adds	r2, r3, #1
 80258dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80258e0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80258e4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80258e8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80258ec:	704b      	strb	r3, [r1, #1]
 80258ee:	788b      	ldrb	r3, [r1, #2]
 80258f0:	fb03 f909 	mul.w	r9, r3, r9
 80258f4:	f109 0301 	add.w	r3, r9, #1
 80258f8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80258fc:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8025900:	f881 e002 	strb.w	lr, [r1, #2]
 8025904:	b007      	add	sp, #28
 8025906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802590a:	2600      	movs	r6, #0
 802590c:	e700      	b.n	8025710 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 802590e:	2000      	movs	r0, #0
 8025910:	4606      	mov	r6, r0
 8025912:	e708      	b.n	8025726 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025914:	2000      	movs	r0, #0
 8025916:	e706      	b.n	8025726 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8025918:	4620      	mov	r0, r4
 802591a:	e704      	b.n	8025726 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802591c:	2500      	movs	r5, #0
 802591e:	e714      	b.n	802574a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8025920:	2200      	movs	r2, #0
 8025922:	4615      	mov	r5, r2
 8025924:	e71d      	b.n	8025762 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025926:	4672      	mov	r2, lr
 8025928:	4675      	mov	r5, lr
 802592a:	e71a      	b.n	8025762 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802592c:	2200      	movs	r2, #0
 802592e:	e718      	b.n	8025762 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025930:	4622      	mov	r2, r4
 8025932:	e716      	b.n	8025762 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08025934 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025938:	b099      	sub	sp, #100	@ 0x64
 802593a:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 802593e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8025940:	9017      	str	r0, [sp, #92]	@ 0x5c
 8025942:	9306      	str	r3, [sp, #24]
 8025944:	6850      	ldr	r0, [r2, #4]
 8025946:	6812      	ldr	r2, [r2, #0]
 8025948:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 802594c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8025950:	fb00 1303 	mla	r3, r0, r3, r1
 8025954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025958:	18d3      	adds	r3, r2, r3
 802595a:	9309      	str	r3, [sp, #36]	@ 0x24
 802595c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802595e:	681b      	ldr	r3, [r3, #0]
 8025960:	930e      	str	r3, [sp, #56]	@ 0x38
 8025962:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025964:	2b00      	cmp	r3, #0
 8025966:	dc03      	bgt.n	8025970 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025968:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802596a:	2b00      	cmp	r3, #0
 802596c:	f340 8360 	ble.w	8026030 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8025970:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025972:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025976:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802597a:	1e48      	subs	r0, r1, #1
 802597c:	1e57      	subs	r7, r2, #1
 802597e:	9b06      	ldr	r3, [sp, #24]
 8025980:	2b00      	cmp	r3, #0
 8025982:	f340 817b 	ble.w	8025c7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8025986:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802598a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802598e:	d406      	bmi.n	802599e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025990:	4584      	cmp	ip, r0
 8025992:	da04      	bge.n	802599e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025994:	2b00      	cmp	r3, #0
 8025996:	db02      	blt.n	802599e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025998:	42bb      	cmp	r3, r7
 802599a:	f2c0 8170 	blt.w	8025c7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802599e:	f11c 0c01 	adds.w	ip, ip, #1
 80259a2:	f100 8160 	bmi.w	8025c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80259a6:	4561      	cmp	r1, ip
 80259a8:	f2c0 815d 	blt.w	8025c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80259ac:	3301      	adds	r3, #1
 80259ae:	f100 815a 	bmi.w	8025c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80259b2:	429a      	cmp	r2, r3
 80259b4:	f2c0 8157 	blt.w	8025c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80259b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80259bc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80259be:	f1b8 0f00 	cmp.w	r8, #0
 80259c2:	f340 8179 	ble.w	8025cb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80259c6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80259c8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80259cc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80259ce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80259d2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80259d6:	142a      	asrs	r2, r5, #16
 80259d8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80259dc:	689b      	ldr	r3, [r3, #8]
 80259de:	f100 81be 	bmi.w	8025d5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80259e2:	f103 39ff 	add.w	r9, r3, #4294967295
 80259e6:	454a      	cmp	r2, r9
 80259e8:	f280 81b9 	bge.w	8025d5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80259ec:	f1bc 0f00 	cmp.w	ip, #0
 80259f0:	f2c0 81b5 	blt.w	8025d5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80259f4:	f10e 39ff 	add.w	r9, lr, #4294967295
 80259f8:	45cc      	cmp	ip, r9
 80259fa:	f280 81b0 	bge.w	8025d5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80259fe:	b21b      	sxth	r3, r3
 8025a00:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025a02:	fb0c 2203 	mla	r2, ip, r3, r2
 8025a06:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8025a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025a0e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8025a12:	2900      	cmp	r1, #0
 8025a14:	f000 8197 	beq.w	8025d46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8025a18:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8025a1c:	940a      	str	r4, [sp, #40]	@ 0x28
 8025a1e:	0e24      	lsrs	r4, r4, #24
 8025a20:	9411      	str	r4, [sp, #68]	@ 0x44
 8025a22:	b180      	cbz	r0, 8025a46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025a24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8025a28:	3b01      	subs	r3, #1
 8025a2a:	009b      	lsls	r3, r3, #2
 8025a2c:	3304      	adds	r3, #4
 8025a2e:	eb09 0c03 	add.w	ip, r9, r3
 8025a32:	f859 3003 	ldr.w	r3, [r9, r3]
 8025a36:	9307      	str	r3, [sp, #28]
 8025a38:	0e1b      	lsrs	r3, r3, #24
 8025a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025a3c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8025a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025a42:	0e1b      	lsrs	r3, r3, #24
 8025a44:	9312      	str	r3, [sp, #72]	@ 0x48
 8025a46:	b289      	uxth	r1, r1
 8025a48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025a4a:	b280      	uxth	r0, r0
 8025a4c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025a4e:	fb01 fa00 	mul.w	sl, r1, r0
 8025a52:	0109      	lsls	r1, r1, #4
 8025a54:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025a58:	eba1 090a 	sub.w	r9, r1, sl
 8025a5c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8025a60:	b280      	uxth	r0, r0
 8025a62:	fa1f f989 	uxth.w	r9, r9
 8025a66:	1a09      	subs	r1, r1, r0
 8025a68:	fb09 f303 	mul.w	r3, r9, r3
 8025a6c:	b289      	uxth	r1, r1
 8025a6e:	fb01 330e 	mla	r3, r1, lr, r3
 8025a72:	fb00 3304 	mla	r3, r0, r4, r3
 8025a76:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025a78:	fb0a 3304 	mla	r3, sl, r4, r3
 8025a7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	f000 80e8 	beq.w	8025c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025a86:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025a8a:	d01b      	beq.n	8025ac4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8025a8c:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8025a90:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025a94:	fb0e fb0b 	mul.w	fp, lr, fp
 8025a98:	fb0e fe02 	mul.w	lr, lr, r2
 8025a9c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8025aa0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025aa4:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025aa8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025aac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025ab0:	445a      	add	r2, fp
 8025ab2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ab6:	0a12      	lsrs	r2, r2, #8
 8025ab8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025abc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8025ac0:	ea42 020c 	orr.w	r2, r2, ip
 8025ac4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025ac6:	2cff      	cmp	r4, #255	@ 0xff
 8025ac8:	d021      	beq.n	8025b0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8025aca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025acc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025ad0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025ad2:	fb04 fc0c 	mul.w	ip, r4, ip
 8025ad6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025ad8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025adc:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8025ae0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025ae2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025ae6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025aea:	fb04 fb0b 	mul.w	fp, r4, fp
 8025aee:	44e6      	add	lr, ip
 8025af0:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8025af4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025af8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8025afc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025b00:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025b04:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8025b08:	ea4e 040b 	orr.w	r4, lr, fp
 8025b0c:	940a      	str	r4, [sp, #40]	@ 0x28
 8025b0e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025b10:	2cff      	cmp	r4, #255	@ 0xff
 8025b12:	d021      	beq.n	8025b58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025b14:	9c07      	ldr	r4, [sp, #28]
 8025b16:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025b1a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025b1c:	fb04 fc0c 	mul.w	ip, r4, ip
 8025b20:	9c07      	ldr	r4, [sp, #28]
 8025b22:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025b26:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8025b2a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025b2c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025b30:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025b34:	fb04 fb0b 	mul.w	fp, r4, fp
 8025b38:	44e6      	add	lr, ip
 8025b3a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8025b3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b42:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8025b46:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025b4a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025b4e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8025b52:	ea4e 040b 	orr.w	r4, lr, fp
 8025b56:	9407      	str	r4, [sp, #28]
 8025b58:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025b5a:	2cff      	cmp	r4, #255	@ 0xff
 8025b5c:	d021      	beq.n	8025ba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8025b5e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b60:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025b64:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025b66:	fb04 fc0c 	mul.w	ip, r4, ip
 8025b6a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025b6c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025b70:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8025b74:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025b76:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025b7a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025b7e:	fb04 fb0b 	mul.w	fp, r4, fp
 8025b82:	44e6      	add	lr, ip
 8025b84:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8025b88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b8c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8025b90:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025b94:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025b98:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8025b9c:	ea4e 040b 	orr.w	r4, lr, fp
 8025ba0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025ba2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025ba4:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8025ba8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025bac:	2bff      	cmp	r3, #255	@ 0xff
 8025bae:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025bb2:	9c07      	ldr	r4, [sp, #28]
 8025bb4:	fb09 fc0c 	mul.w	ip, r9, ip
 8025bb8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025bbc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025bc0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025bc2:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025bc6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025bca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025bcc:	fb0a cc0e 	mla	ip, sl, lr, ip
 8025bd0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025bd4:	fb09 f90e 	mul.w	r9, r9, lr
 8025bd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bdc:	fb01 9202 	mla	r2, r1, r2, r9
 8025be0:	9907      	ldr	r1, [sp, #28]
 8025be2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025be6:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8025bea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025bec:	fb00 220b 	mla	r2, r0, fp, r2
 8025bf0:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8025bf4:	fb0a 2a00 	mla	sl, sl, r0, r2
 8025bf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025bfc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025c00:	ea4c 0c0a 	orr.w	ip, ip, sl
 8025c04:	fa5f f08c 	uxtb.w	r0, ip
 8025c08:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8025c0c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025c10:	f000 80a2 	beq.w	8025d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025c14:	43db      	mvns	r3, r3
 8025c16:	783a      	ldrb	r2, [r7, #0]
 8025c18:	f897 a002 	ldrb.w	sl, [r7, #2]
 8025c1c:	b2db      	uxtb	r3, r3
 8025c1e:	fb02 fe03 	mul.w	lr, r2, r3
 8025c22:	fb0a fa03 	mul.w	sl, sl, r3
 8025c26:	f10e 0201 	add.w	r2, lr, #1
 8025c2a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8025c2e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025c32:	703a      	strb	r2, [r7, #0]
 8025c34:	787a      	ldrb	r2, [r7, #1]
 8025c36:	fb02 f003 	mul.w	r0, r2, r3
 8025c3a:	f10a 0301 	add.w	r3, sl, #1
 8025c3e:	1c42      	adds	r2, r0, #1
 8025c40:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025c44:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025c48:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8025c4c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025c50:	707a      	strb	r2, [r7, #1]
 8025c52:	f887 c002 	strb.w	ip, [r7, #2]
 8025c56:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025c58:	3703      	adds	r7, #3
 8025c5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8025c5e:	441d      	add	r5, r3
 8025c60:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025c62:	441e      	add	r6, r3
 8025c64:	e6ab      	b.n	80259be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025c66:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025c68:	441d      	add	r5, r3
 8025c6a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025c6c:	441e      	add	r6, r3
 8025c6e:	9b06      	ldr	r3, [sp, #24]
 8025c70:	3b01      	subs	r3, #1
 8025c72:	9306      	str	r3, [sp, #24]
 8025c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c76:	3303      	adds	r3, #3
 8025c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c7a:	e680      	b.n	802597e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025c7c:	d024      	beq.n	8025cc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025c7e:	9b06      	ldr	r3, [sp, #24]
 8025c80:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8025c82:	3b01      	subs	r3, #1
 8025c84:	fb00 5003 	mla	r0, r0, r3, r5
 8025c88:	1400      	asrs	r0, r0, #16
 8025c8a:	f53f ae95 	bmi.w	80259b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025c8e:	3901      	subs	r1, #1
 8025c90:	4288      	cmp	r0, r1
 8025c92:	f6bf ae91 	bge.w	80259b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025c96:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8025c98:	fb01 6303 	mla	r3, r1, r3, r6
 8025c9c:	141b      	asrs	r3, r3, #16
 8025c9e:	f53f ae8b 	bmi.w	80259b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025ca2:	3a01      	subs	r2, #1
 8025ca4:	4293      	cmp	r3, r2
 8025ca6:	f6bf ae87 	bge.w	80259b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025cac:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025cb0:	1cdf      	adds	r7, r3, #3
 8025cb2:	f1bb 0f00 	cmp.w	fp, #0
 8025cb6:	dc6e      	bgt.n	8025d96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8025cb8:	9b06      	ldr	r3, [sp, #24]
 8025cba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025cc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025cc4:	4423      	add	r3, r4
 8025cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8025cc8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025cca:	2b00      	cmp	r3, #0
 8025ccc:	f340 81b0 	ble.w	8026030 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8025cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025cd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025cd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025cda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025cde:	eef0 6a62 	vmov.f32	s13, s5
 8025ce2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ce6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025cea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cee:	ee16 5a90 	vmov	r5, s13
 8025cf2:	eef0 6a43 	vmov.f32	s13, s6
 8025cf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cfa:	ee16 6a90 	vmov	r6, s13
 8025cfe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025d02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025d06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025d0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025d0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025d12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025d16:	ee12 2a90 	vmov	r2, s5
 8025d1a:	eef0 2a47 	vmov.f32	s5, s14
 8025d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d22:	ee13 2a10 	vmov	r2, s6
 8025d26:	9325      	str	r3, [sp, #148]	@ 0x94
 8025d28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025d2a:	eeb0 3a67 	vmov.f32	s6, s15
 8025d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025d32:	9326      	str	r3, [sp, #152]	@ 0x98
 8025d34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025d36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025d38:	3b01      	subs	r3, #1
 8025d3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8025d3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025d3e:	bf08      	it	eq
 8025d40:	4613      	moveq	r3, r2
 8025d42:	9306      	str	r3, [sp, #24]
 8025d44:	e60d      	b.n	8025962 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025d46:	2800      	cmp	r0, #0
 8025d48:	f43f ae7d 	beq.w	8025a46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025d4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8025d50:	9307      	str	r3, [sp, #28]
 8025d52:	0e1b      	lsrs	r3, r3, #24
 8025d54:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025d56:	e676      	b.n	8025a46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025d58:	7038      	strb	r0, [r7, #0]
 8025d5a:	7079      	strb	r1, [r7, #1]
 8025d5c:	e779      	b.n	8025c52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025d5e:	f112 0901 	adds.w	r9, r2, #1
 8025d62:	f53f af78 	bmi.w	8025c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025d66:	454b      	cmp	r3, r9
 8025d68:	f6ff af75 	blt.w	8025c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025d6c:	f11c 0901 	adds.w	r9, ip, #1
 8025d70:	f53f af71 	bmi.w	8025c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025d74:	45ce      	cmp	lr, r9
 8025d76:	f6ff af6e 	blt.w	8025c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025d7a:	b21b      	sxth	r3, r3
 8025d7c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8025d80:	fa0f f28e 	sxth.w	r2, lr
 8025d84:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025d88:	9200      	str	r2, [sp, #0]
 8025d8a:	4639      	mov	r1, r7
 8025d8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025d8e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8025d90:	f7ff fca1 	bl	80256d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025d94:	e75f      	b.n	8025c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025d96:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025d98:	1429      	asrs	r1, r5, #16
 8025d9a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025d9c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025da0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8025da4:	1433      	asrs	r3, r6, #16
 8025da6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025daa:	fb0c 1303 	mla	r3, ip, r3, r1
 8025dae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025db0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025db4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025db8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025dbc:	2a00      	cmp	r2, #0
 8025dbe:	f000 8129 	beq.w	8026014 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8025dc2:	684c      	ldr	r4, [r1, #4]
 8025dc4:	940c      	str	r4, [sp, #48]	@ 0x30
 8025dc6:	0e24      	lsrs	r4, r4, #24
 8025dc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8025dca:	b198      	cbz	r0, 8025df4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8025dcc:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8025dd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025dd4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8025dd8:	f10c 0c04 	add.w	ip, ip, #4
 8025ddc:	eb01 080c 	add.w	r8, r1, ip
 8025de0:	f851 100c 	ldr.w	r1, [r1, ip]
 8025de4:	9108      	str	r1, [sp, #32]
 8025de6:	0e09      	lsrs	r1, r1, #24
 8025de8:	9110      	str	r1, [sp, #64]	@ 0x40
 8025dea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8025dee:	910d      	str	r1, [sp, #52]	@ 0x34
 8025df0:	0e09      	lsrs	r1, r1, #24
 8025df2:	9114      	str	r1, [sp, #80]	@ 0x50
 8025df4:	b292      	uxth	r2, r2
 8025df6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025df8:	b280      	uxth	r0, r0
 8025dfa:	fb02 f900 	mul.w	r9, r2, r0
 8025dfe:	0112      	lsls	r2, r2, #4
 8025e00:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025e04:	eba2 0809 	sub.w	r8, r2, r9
 8025e08:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8025e0c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025e0e:	b280      	uxth	r0, r0
 8025e10:	fa1f f888 	uxth.w	r8, r8
 8025e14:	1a09      	subs	r1, r1, r0
 8025e16:	fb08 f202 	mul.w	r2, r8, r2
 8025e1a:	b289      	uxth	r1, r1
 8025e1c:	fb01 220e 	mla	r2, r1, lr, r2
 8025e20:	fb00 2204 	mla	r2, r0, r4, r2
 8025e24:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025e26:	fb09 2204 	mla	r2, r9, r4, r2
 8025e2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025e2e:	2a00      	cmp	r2, #0
 8025e30:	f000 80e8 	beq.w	8026004 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8025e34:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025e38:	d01b      	beq.n	8025e72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8025e3a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025e3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025e42:	fb0e fa0a 	mul.w	sl, lr, sl
 8025e46:	fb0e fe03 	mul.w	lr, lr, r3
 8025e4a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025e4e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025e52:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025e56:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025e5a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025e5e:	4453      	add	r3, sl
 8025e60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e64:	0a1b      	lsrs	r3, r3, #8
 8025e66:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025e6a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025e6e:	ea43 030c 	orr.w	r3, r3, ip
 8025e72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025e74:	2cff      	cmp	r4, #255	@ 0xff
 8025e76:	d021      	beq.n	8025ebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8025e78:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025e7a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025e7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025e80:	fb04 fc0c 	mul.w	ip, r4, ip
 8025e84:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025e86:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025e8a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025e8e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025e90:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025e94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025e98:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e9c:	44e6      	add	lr, ip
 8025e9e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025ea2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ea6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025eaa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025eae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025eb2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025eb6:	ea4e 040a 	orr.w	r4, lr, sl
 8025eba:	940c      	str	r4, [sp, #48]	@ 0x30
 8025ebc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025ebe:	2cff      	cmp	r4, #255	@ 0xff
 8025ec0:	d021      	beq.n	8025f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8025ec2:	9c08      	ldr	r4, [sp, #32]
 8025ec4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025ec8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025eca:	fb04 fc0c 	mul.w	ip, r4, ip
 8025ece:	9c08      	ldr	r4, [sp, #32]
 8025ed0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025ed4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025ed6:	fb04 fa0e 	mul.w	sl, r4, lr
 8025eda:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025ede:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025ee2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025ee6:	44e6      	add	lr, ip
 8025ee8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025eec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025ef0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ef4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ef8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025efc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025f00:	ea4e 040a 	orr.w	r4, lr, sl
 8025f04:	9408      	str	r4, [sp, #32]
 8025f06:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025f08:	2cff      	cmp	r4, #255	@ 0xff
 8025f0a:	d021      	beq.n	8025f50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8025f0c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025f0e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025f12:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025f14:	fb04 fc0c 	mul.w	ip, r4, ip
 8025f18:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025f1a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025f1e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025f22:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025f24:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8025f28:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025f2c:	fb04 fa0a 	mul.w	sl, r4, sl
 8025f30:	44e6      	add	lr, ip
 8025f32:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025f36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f3a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025f3e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025f42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f46:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025f4a:	ea4e 040a 	orr.w	r4, lr, sl
 8025f4e:	940d      	str	r4, [sp, #52]	@ 0x34
 8025f50:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025f52:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025f56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025f5a:	2aff      	cmp	r2, #255	@ 0xff
 8025f5c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025f60:	9c08      	ldr	r4, [sp, #32]
 8025f62:	fb08 fc0c 	mul.w	ip, r8, ip
 8025f66:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025f6a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025f6e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025f70:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025f74:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025f78:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025f7a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025f7e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025f82:	fb08 f80e 	mul.w	r8, r8, lr
 8025f86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f8a:	fb01 8303 	mla	r3, r1, r3, r8
 8025f8e:	9908      	ldr	r1, [sp, #32]
 8025f90:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025f94:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8025f98:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025f9a:	fb00 330a 	mla	r3, r0, sl, r3
 8025f9e:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8025fa2:	fb09 3e0e 	mla	lr, r9, lr, r3
 8025fa6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025faa:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8025fae:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025fb2:	fa5f f08c 	uxtb.w	r0, ip
 8025fb6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8025fba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025fbe:	d032      	beq.n	8026026 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8025fc0:	43d2      	mvns	r2, r2
 8025fc2:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8025fc6:	b2d2      	uxtb	r2, r2
 8025fc8:	fb0e fe02 	mul.w	lr, lr, r2
 8025fcc:	f10e 0301 	add.w	r3, lr, #1
 8025fd0:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8025fd4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025fd8:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8025fdc:	4350      	muls	r0, r2
 8025fde:	f807 3c03 	strb.w	r3, [r7, #-3]
 8025fe2:	1c43      	adds	r3, r0, #1
 8025fe4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025fe8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025fec:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8025ff0:	4353      	muls	r3, r2
 8025ff2:	f807 1c02 	strb.w	r1, [r7, #-2]
 8025ff6:	1c5a      	adds	r2, r3, #1
 8025ff8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025ffc:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8026000:	f807 cc01 	strb.w	ip, [r7, #-1]
 8026004:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026006:	3703      	adds	r7, #3
 8026008:	f10b 3bff 	add.w	fp, fp, #4294967295
 802600c:	441d      	add	r5, r3
 802600e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026010:	441e      	add	r6, r3
 8026012:	e64e      	b.n	8025cb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026014:	2800      	cmp	r0, #0
 8026016:	f43f aeed 	beq.w	8025df4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802601a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802601e:	9108      	str	r1, [sp, #32]
 8026020:	0e09      	lsrs	r1, r1, #24
 8026022:	9110      	str	r1, [sp, #64]	@ 0x40
 8026024:	e6e6      	b.n	8025df4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8026026:	f807 0c03 	strb.w	r0, [r7, #-3]
 802602a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802602e:	e7e7      	b.n	8026000 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8026030:	b019      	add	sp, #100	@ 0x64
 8026032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026038 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8026038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802603c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8026040:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8026044:	2c00      	cmp	r4, #0
 8026046:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802604a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802604e:	fb00 4e03 	mla	lr, r0, r3, r4
 8026052:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8026056:	f2c0 80b8 	blt.w	80261ca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802605a:	45a1      	cmp	r9, r4
 802605c:	f340 80b5 	ble.w	80261ca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026060:	2800      	cmp	r0, #0
 8026062:	f2c0 80b2 	blt.w	80261ca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8026066:	4580      	cmp	r8, r0
 8026068:	f340 80af 	ble.w	80261ca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802606c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8026070:	f01e 0f01 	tst.w	lr, #1
 8026074:	5d56      	ldrb	r6, [r2, r5]
 8026076:	bf0c      	ite	eq
 8026078:	f006 060f 	andeq.w	r6, r6, #15
 802607c:	1136      	asrne	r6, r6, #4
 802607e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026082:	b2f6      	uxtb	r6, r6
 8026084:	f114 0a01 	adds.w	sl, r4, #1
 8026088:	f100 80a1 	bmi.w	80261ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802608c:	45d1      	cmp	r9, sl
 802608e:	f340 809e 	ble.w	80261ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026092:	2800      	cmp	r0, #0
 8026094:	f2c0 809b 	blt.w	80261ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8026098:	4580      	cmp	r8, r0
 802609a:	f340 8098 	ble.w	80261ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802609e:	2f00      	cmp	r7, #0
 80260a0:	f000 8097 	beq.w	80261d2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80260a4:	f10e 0b01 	add.w	fp, lr, #1
 80260a8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80260ac:	f01b 0f01 	tst.w	fp, #1
 80260b0:	5d55      	ldrb	r5, [r2, r5]
 80260b2:	bf0c      	ite	eq
 80260b4:	f005 050f 	andeq.w	r5, r5, #15
 80260b8:	112d      	asrne	r5, r5, #4
 80260ba:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80260be:	b2ed      	uxtb	r5, r5
 80260c0:	f1bc 0f00 	cmp.w	ip, #0
 80260c4:	f000 8089 	beq.w	80261da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80260c8:	2c00      	cmp	r4, #0
 80260ca:	f100 0001 	add.w	r0, r0, #1
 80260ce:	f2c0 8082 	blt.w	80261d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80260d2:	45a1      	cmp	r9, r4
 80260d4:	dd7f      	ble.n	80261d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80260d6:	2800      	cmp	r0, #0
 80260d8:	db7d      	blt.n	80261d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80260da:	4580      	cmp	r8, r0
 80260dc:	dd7b      	ble.n	80261d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80260de:	eb03 0b0e 	add.w	fp, r3, lr
 80260e2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80260e6:	f01b 0f01 	tst.w	fp, #1
 80260ea:	5d14      	ldrb	r4, [r2, r4]
 80260ec:	bf0c      	ite	eq
 80260ee:	f004 040f 	andeq.w	r4, r4, #15
 80260f2:	1124      	asrne	r4, r4, #4
 80260f4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80260f8:	b2e4      	uxtb	r4, r4
 80260fa:	f1ba 0f00 	cmp.w	sl, #0
 80260fe:	db6f      	blt.n	80261e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026100:	45d1      	cmp	r9, sl
 8026102:	dd6d      	ble.n	80261e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026104:	2800      	cmp	r0, #0
 8026106:	db6b      	blt.n	80261e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8026108:	4580      	cmp	r8, r0
 802610a:	dd69      	ble.n	80261e0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802610c:	2f00      	cmp	r7, #0
 802610e:	d069      	beq.n	80261e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8026110:	3301      	adds	r3, #1
 8026112:	449e      	add	lr, r3
 8026114:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026118:	f01e 0f01 	tst.w	lr, #1
 802611c:	5cd0      	ldrb	r0, [r2, r3]
 802611e:	bf0c      	ite	eq
 8026120:	f000 000f 	andeq.w	r0, r0, #15
 8026124:	1100      	asrne	r0, r0, #4
 8026126:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802612a:	b2c3      	uxtb	r3, r0
 802612c:	b2ba      	uxth	r2, r7
 802612e:	fa1f fc8c 	uxth.w	ip, ip
 8026132:	fb02 f00c 	mul.w	r0, r2, ip
 8026136:	0112      	lsls	r2, r2, #4
 8026138:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802613c:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8026140:	1a12      	subs	r2, r2, r0
 8026142:	fa1f fc8c 	uxth.w	ip, ip
 8026146:	b292      	uxth	r2, r2
 8026148:	eba7 070c 	sub.w	r7, r7, ip
 802614c:	436a      	muls	r2, r5
 802614e:	b2bf      	uxth	r7, r7
 8026150:	fb06 2207 	mla	r2, r6, r7, r2
 8026154:	fb0c 2404 	mla	r4, ip, r4, r2
 8026158:	fb00 4303 	mla	r3, r0, r3, r4
 802615c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026160:	b38b      	cbz	r3, 80261c6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8026162:	4a21      	ldr	r2, [pc, #132]	@ (80261e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8026164:	6814      	ldr	r4, [r2, #0]
 8026166:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 802616a:	b2e5      	uxtb	r5, r4
 802616c:	4353      	muls	r3, r2
 802616e:	1c5a      	adds	r2, r3, #1
 8026170:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026174:	1212      	asrs	r2, r2, #8
 8026176:	b290      	uxth	r0, r2
 8026178:	43d2      	mvns	r2, r2
 802617a:	fb15 f500 	smulbb	r5, r5, r0
 802617e:	b2d3      	uxtb	r3, r2
 8026180:	780a      	ldrb	r2, [r1, #0]
 8026182:	fb02 5203 	mla	r2, r2, r3, r5
 8026186:	b292      	uxth	r2, r2
 8026188:	1c55      	adds	r5, r2, #1
 802618a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802618e:	784d      	ldrb	r5, [r1, #1]
 8026190:	fb15 f503 	smulbb	r5, r5, r3
 8026194:	1212      	asrs	r2, r2, #8
 8026196:	700a      	strb	r2, [r1, #0]
 8026198:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802619c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80261a0:	fb02 5200 	mla	r2, r2, r0, r5
 80261a4:	b292      	uxth	r2, r2
 80261a6:	1c55      	adds	r5, r2, #1
 80261a8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80261ac:	1212      	asrs	r2, r2, #8
 80261ae:	704a      	strb	r2, [r1, #1]
 80261b0:	788a      	ldrb	r2, [r1, #2]
 80261b2:	fb12 f303 	smulbb	r3, r2, r3
 80261b6:	fb04 3300 	mla	r3, r4, r0, r3
 80261ba:	b29b      	uxth	r3, r3
 80261bc:	1c5a      	adds	r2, r3, #1
 80261be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80261c2:	121b      	asrs	r3, r3, #8
 80261c4:	708b      	strb	r3, [r1, #2]
 80261c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261ca:	2600      	movs	r6, #0
 80261cc:	e75a      	b.n	8026084 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80261ce:	2500      	movs	r5, #0
 80261d0:	e776      	b.n	80260c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80261d2:	463d      	mov	r5, r7
 80261d4:	e774      	b.n	80260c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80261d6:	2400      	movs	r4, #0
 80261d8:	e78f      	b.n	80260fa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80261da:	4663      	mov	r3, ip
 80261dc:	4664      	mov	r4, ip
 80261de:	e7a5      	b.n	802612c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80261e0:	2300      	movs	r3, #0
 80261e2:	e7a3      	b.n	802612c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80261e4:	463b      	mov	r3, r7
 80261e6:	e7a1      	b.n	802612c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80261e8:	240284f8 	.word	0x240284f8

080261ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261f0:	b097      	sub	sp, #92	@ 0x5c
 80261f2:	9214      	str	r2, [sp, #80]	@ 0x50
 80261f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80261f6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80261f8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80261fc:	9015      	str	r0, [sp, #84]	@ 0x54
 80261fe:	910c      	str	r1, [sp, #48]	@ 0x30
 8026200:	6850      	ldr	r0, [r2, #4]
 8026202:	930e      	str	r3, [sp, #56]	@ 0x38
 8026204:	6812      	ldr	r2, [r2, #0]
 8026206:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802620a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 802620e:	fb00 1303 	mla	r3, r0, r3, r1
 8026212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026216:	eb02 0a03 	add.w	sl, r2, r3
 802621a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802621c:	689b      	ldr	r3, [r3, #8]
 802621e:	3301      	adds	r3, #1
 8026220:	f023 0301 	bic.w	r3, r3, #1
 8026224:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026226:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026228:	681f      	ldr	r7, [r3, #0]
 802622a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802622c:	2b00      	cmp	r3, #0
 802622e:	dc03      	bgt.n	8026238 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026230:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026232:	2b00      	cmp	r3, #0
 8026234:	f340 8247 	ble.w	80266c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8026238:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802623a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802623e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026242:	1e48      	subs	r0, r1, #1
 8026244:	f102 3cff 	add.w	ip, r2, #4294967295
 8026248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802624a:	2b00      	cmp	r3, #0
 802624c:	f340 80e5 	ble.w	802641a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026250:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8026254:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026258:	d406      	bmi.n	8026268 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802625a:	4586      	cmp	lr, r0
 802625c:	da04      	bge.n	8026268 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802625e:	2b00      	cmp	r3, #0
 8026260:	db02      	blt.n	8026268 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026262:	4563      	cmp	r3, ip
 8026264:	f2c0 80da 	blt.w	802641c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8026268:	f11e 0e01 	adds.w	lr, lr, #1
 802626c:	f100 80cb 	bmi.w	8026406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026270:	4571      	cmp	r1, lr
 8026272:	f2c0 80c8 	blt.w	8026406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026276:	3301      	adds	r3, #1
 8026278:	f100 80c5 	bmi.w	8026406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802627c:	429a      	cmp	r2, r3
 802627e:	f2c0 80c2 	blt.w	8026406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8026282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026284:	46d0      	mov	r8, sl
 8026286:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802628a:	930d      	str	r3, [sp, #52]	@ 0x34
 802628c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802628e:	2b00      	cmp	r3, #0
 8026290:	f340 80e3 	ble.w	802645a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026294:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026296:	1430      	asrs	r0, r6, #16
 8026298:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802629c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80262a0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80262a4:	142b      	asrs	r3, r5, #16
 80262a6:	f100 812e 	bmi.w	8026506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80262aa:	f10c 3bff 	add.w	fp, ip, #4294967295
 80262ae:	455b      	cmp	r3, fp
 80262b0:	f280 8129 	bge.w	8026506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80262b4:	2800      	cmp	r0, #0
 80262b6:	f2c0 8126 	blt.w	8026506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80262ba:	f10e 3bff 	add.w	fp, lr, #4294967295
 80262be:	4558      	cmp	r0, fp
 80262c0:	f280 8121 	bge.w	8026506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80262c4:	fb00 3309 	mla	r3, r0, r9, r3
 80262c8:	0858      	lsrs	r0, r3, #1
 80262ca:	07dc      	lsls	r4, r3, #31
 80262cc:	f817 c000 	ldrb.w	ip, [r7, r0]
 80262d0:	bf54      	ite	pl
 80262d2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80262d6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80262da:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80262de:	fa5f fc8c 	uxtb.w	ip, ip
 80262e2:	2a00      	cmp	r2, #0
 80262e4:	f000 80fe 	beq.w	80264e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80262e8:	1c58      	adds	r0, r3, #1
 80262ea:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80262ee:	07c0      	lsls	r0, r0, #31
 80262f0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80262f4:	bf54      	ite	pl
 80262f6:	f00e 0e0f 	andpl.w	lr, lr, #15
 80262fa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80262fe:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026302:	fa5f f08e 	uxtb.w	r0, lr
 8026306:	9010      	str	r0, [sp, #64]	@ 0x40
 8026308:	b1d9      	cbz	r1, 8026342 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802630a:	444b      	add	r3, r9
 802630c:	0858      	lsrs	r0, r3, #1
 802630e:	07dc      	lsls	r4, r3, #31
 8026310:	f103 0301 	add.w	r3, r3, #1
 8026314:	5c38      	ldrb	r0, [r7, r0]
 8026316:	bf54      	ite	pl
 8026318:	f000 000f 	andpl.w	r0, r0, #15
 802631c:	1100      	asrmi	r0, r0, #4
 802631e:	07dc      	lsls	r4, r3, #31
 8026320:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026324:	b2c0      	uxtb	r0, r0
 8026326:	900a      	str	r0, [sp, #40]	@ 0x28
 8026328:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802632c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8026330:	bf54      	ite	pl
 8026332:	f00e 030f 	andpl.w	r3, lr, #15
 8026336:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802633a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802633e:	b2db      	uxtb	r3, r3
 8026340:	9311      	str	r3, [sp, #68]	@ 0x44
 8026342:	b292      	uxth	r2, r2
 8026344:	b289      	uxth	r1, r1
 8026346:	0113      	lsls	r3, r2, #4
 8026348:	fb02 f001 	mul.w	r0, r2, r1
 802634c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802634e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8026352:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8026356:	1a1b      	subs	r3, r3, r0
 8026358:	b289      	uxth	r1, r1
 802635a:	b29b      	uxth	r3, r3
 802635c:	ebae 0e01 	sub.w	lr, lr, r1
 8026360:	4353      	muls	r3, r2
 8026362:	fa1f fe8e 	uxth.w	lr, lr
 8026366:	fb0c 320e 	mla	r2, ip, lr, r3
 802636a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802636c:	fb01 2203 	mla	r2, r1, r3, r2
 8026370:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026372:	fb00 2203 	mla	r2, r0, r3, r2
 8026376:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802637a:	2a00      	cmp	r2, #0
 802637c:	d039      	beq.n	80263f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802637e:	4bc7      	ldr	r3, [pc, #796]	@ (802669c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026380:	6819      	ldr	r1, [r3, #0]
 8026382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026384:	fa5f fc81 	uxtb.w	ip, r1
 8026388:	435a      	muls	r2, r3
 802638a:	1c53      	adds	r3, r2, #1
 802638c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026390:	1212      	asrs	r2, r2, #8
 8026392:	b290      	uxth	r0, r2
 8026394:	43d2      	mvns	r2, r2
 8026396:	fb1c fc00 	smulbb	ip, ip, r0
 802639a:	b2d3      	uxtb	r3, r2
 802639c:	f898 2000 	ldrb.w	r2, [r8]
 80263a0:	fb02 c203 	mla	r2, r2, r3, ip
 80263a4:	b292      	uxth	r2, r2
 80263a6:	f102 0c01 	add.w	ip, r2, #1
 80263aa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80263ae:	f898 c001 	ldrb.w	ip, [r8, #1]
 80263b2:	fb1c fc03 	smulbb	ip, ip, r3
 80263b6:	1212      	asrs	r2, r2, #8
 80263b8:	f888 2000 	strb.w	r2, [r8]
 80263bc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80263c0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80263c4:	fb02 c200 	mla	r2, r2, r0, ip
 80263c8:	b292      	uxth	r2, r2
 80263ca:	f102 0c01 	add.w	ip, r2, #1
 80263ce:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80263d2:	1212      	asrs	r2, r2, #8
 80263d4:	f888 2001 	strb.w	r2, [r8, #1]
 80263d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80263dc:	fb12 f303 	smulbb	r3, r2, r3
 80263e0:	fb01 3300 	mla	r3, r1, r0, r3
 80263e4:	b29b      	uxth	r3, r3
 80263e6:	1c5a      	adds	r2, r3, #1
 80263e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80263ec:	121b      	asrs	r3, r3, #8
 80263ee:	f888 3002 	strb.w	r3, [r8, #2]
 80263f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80263f4:	f108 0803 	add.w	r8, r8, #3
 80263f8:	441d      	add	r5, r3
 80263fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80263fc:	441e      	add	r6, r3
 80263fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026400:	3b01      	subs	r3, #1
 8026402:	930d      	str	r3, [sp, #52]	@ 0x34
 8026404:	e742      	b.n	802628c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026406:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026408:	f10a 0a03 	add.w	sl, sl, #3
 802640c:	441d      	add	r5, r3
 802640e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026410:	441e      	add	r6, r3
 8026412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026414:	3b01      	subs	r3, #1
 8026416:	9309      	str	r3, [sp, #36]	@ 0x24
 8026418:	e716      	b.n	8026248 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802641a:	d024      	beq.n	8026466 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802641c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802641e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8026420:	3b01      	subs	r3, #1
 8026422:	fb00 5003 	mla	r0, r0, r3, r5
 8026426:	1400      	asrs	r0, r0, #16
 8026428:	f53f af2b 	bmi.w	8026282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802642c:	3901      	subs	r1, #1
 802642e:	4288      	cmp	r0, r1
 8026430:	f6bf af27 	bge.w	8026282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026434:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8026436:	fb01 6303 	mla	r3, r1, r3, r6
 802643a:	141b      	asrs	r3, r3, #16
 802643c:	f53f af21 	bmi.w	8026282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026440:	3a01      	subs	r2, #1
 8026442:	4293      	cmp	r3, r2
 8026444:	f6bf af1d 	bge.w	8026282 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026448:	f10a 0e03 	add.w	lr, sl, #3
 802644c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8026450:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8026454:	f1b8 0f00 	cmp.w	r8, #0
 8026458:	dc76      	bgt.n	8026548 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802645a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802645c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026460:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026464:	44a2      	add	sl, r4
 8026466:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026468:	2b00      	cmp	r3, #0
 802646a:	f340 812c 	ble.w	80266c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802646e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026472:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026474:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026478:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802647c:	eef0 6a62 	vmov.f32	s13, s5
 8026480:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026484:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026488:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802648c:	ee16 5a90 	vmov	r5, s13
 8026490:	eef0 6a43 	vmov.f32	s13, s6
 8026494:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026498:	ee16 6a90 	vmov	r6, s13
 802649c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80264a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80264a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80264a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80264ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80264b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80264b4:	ee12 2a90 	vmov	r2, s5
 80264b8:	eef0 2a47 	vmov.f32	s5, s14
 80264bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80264c0:	ee13 2a10 	vmov	r2, s6
 80264c4:	9323      	str	r3, [sp, #140]	@ 0x8c
 80264c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80264c8:	eeb0 3a67 	vmov.f32	s6, s15
 80264cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80264d0:	9324      	str	r3, [sp, #144]	@ 0x90
 80264d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80264d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80264d6:	3b01      	subs	r3, #1
 80264d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80264da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80264dc:	bf08      	it	eq
 80264de:	4613      	moveq	r3, r2
 80264e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80264e2:	e6a2      	b.n	802622a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80264e4:	2900      	cmp	r1, #0
 80264e6:	f43f af2c 	beq.w	8026342 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80264ea:	eb09 0003 	add.w	r0, r9, r3
 80264ee:	0843      	lsrs	r3, r0, #1
 80264f0:	07c0      	lsls	r0, r0, #31
 80264f2:	5cfb      	ldrb	r3, [r7, r3]
 80264f4:	bf54      	ite	pl
 80264f6:	f003 030f 	andpl.w	r3, r3, #15
 80264fa:	111b      	asrmi	r3, r3, #4
 80264fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026500:	b2db      	uxtb	r3, r3
 8026502:	930a      	str	r3, [sp, #40]	@ 0x28
 8026504:	e71d      	b.n	8026342 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8026506:	f113 0b01 	adds.w	fp, r3, #1
 802650a:	f53f af72 	bmi.w	80263f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802650e:	45dc      	cmp	ip, fp
 8026510:	f6ff af6f 	blt.w	80263f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026514:	f110 0b01 	adds.w	fp, r0, #1
 8026518:	f53f af6b 	bmi.w	80263f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802651c:	45de      	cmp	lr, fp
 802651e:	f6ff af68 	blt.w	80263f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026522:	9302      	str	r3, [sp, #8]
 8026524:	fa0f f38e 	sxth.w	r3, lr
 8026528:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802652a:	9301      	str	r3, [sp, #4]
 802652c:	fa0f f38c 	sxth.w	r3, ip
 8026530:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026534:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026538:	9300      	str	r3, [sp, #0]
 802653a:	463a      	mov	r2, r7
 802653c:	464b      	mov	r3, r9
 802653e:	4641      	mov	r1, r8
 8026540:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8026542:	f7ff fd79 	bl	8026038 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8026546:	e754      	b.n	80263f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026548:	142a      	asrs	r2, r5, #16
 802654a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802654e:	1433      	asrs	r3, r6, #16
 8026550:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026554:	fb09 2303 	mla	r3, r9, r3, r2
 8026558:	085a      	lsrs	r2, r3, #1
 802655a:	07dc      	lsls	r4, r3, #31
 802655c:	5cba      	ldrb	r2, [r7, r2]
 802655e:	bf54      	ite	pl
 8026560:	f002 020f 	andpl.w	r2, r2, #15
 8026564:	1112      	asrmi	r2, r2, #4
 8026566:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802656a:	b2d2      	uxtb	r2, r2
 802656c:	2900      	cmp	r1, #0
 802656e:	f000 8097 	beq.w	80266a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8026572:	f103 0b01 	add.w	fp, r3, #1
 8026576:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802657a:	f01b 0f01 	tst.w	fp, #1
 802657e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026582:	bf0c      	ite	eq
 8026584:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026588:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802658c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026590:	fa5f f48c 	uxtb.w	r4, ip
 8026594:	9412      	str	r4, [sp, #72]	@ 0x48
 8026596:	b300      	cbz	r0, 80265da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026598:	444b      	add	r3, r9
 802659a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802659e:	07dc      	lsls	r4, r3, #31
 80265a0:	f103 0301 	add.w	r3, r3, #1
 80265a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80265a8:	bf54      	ite	pl
 80265aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80265ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80265b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80265b6:	fa5f f48c 	uxtb.w	r4, ip
 80265ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80265be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80265c0:	07dc      	lsls	r4, r3, #31
 80265c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80265c6:	bf54      	ite	pl
 80265c8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80265cc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80265d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80265d4:	fa5f f38c 	uxtb.w	r3, ip
 80265d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80265da:	b289      	uxth	r1, r1
 80265dc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80265de:	b280      	uxth	r0, r0
 80265e0:	fb01 f300 	mul.w	r3, r1, r0
 80265e4:	0109      	lsls	r1, r1, #4
 80265e6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80265ea:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 80265ee:	1ac9      	subs	r1, r1, r3
 80265f0:	b280      	uxth	r0, r0
 80265f2:	b289      	uxth	r1, r1
 80265f4:	ebac 0c00 	sub.w	ip, ip, r0
 80265f8:	4361      	muls	r1, r4
 80265fa:	fa1f fc8c 	uxth.w	ip, ip
 80265fe:	fb02 120c 	mla	r2, r2, ip, r1
 8026602:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026604:	fb00 2001 	mla	r0, r0, r1, r2
 8026608:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802660a:	fb03 0302 	mla	r3, r3, r2, r0
 802660e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026612:	2b00      	cmp	r3, #0
 8026614:	d039      	beq.n	802668a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026616:	4a21      	ldr	r2, [pc, #132]	@ (802669c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8026618:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802661c:	6810      	ldr	r0, [r2, #0]
 802661e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026620:	fa5f fc80 	uxtb.w	ip, r0
 8026624:	4353      	muls	r3, r2
 8026626:	1c5a      	adds	r2, r3, #1
 8026628:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802662c:	121b      	asrs	r3, r3, #8
 802662e:	b29a      	uxth	r2, r3
 8026630:	43db      	mvns	r3, r3
 8026632:	fb1c fc02 	smulbb	ip, ip, r2
 8026636:	b2db      	uxtb	r3, r3
 8026638:	fb01 c103 	mla	r1, r1, r3, ip
 802663c:	b289      	uxth	r1, r1
 802663e:	f101 0c01 	add.w	ip, r1, #1
 8026642:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026646:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802664a:	fb1c fc03 	smulbb	ip, ip, r3
 802664e:	1209      	asrs	r1, r1, #8
 8026650:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026654:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026658:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802665c:	fb01 c102 	mla	r1, r1, r2, ip
 8026660:	b289      	uxth	r1, r1
 8026662:	f101 0c01 	add.w	ip, r1, #1
 8026666:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802666a:	1209      	asrs	r1, r1, #8
 802666c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8026670:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8026674:	fb11 f303 	smulbb	r3, r1, r3
 8026678:	fb00 3002 	mla	r0, r0, r2, r3
 802667c:	b280      	uxth	r0, r0
 802667e:	1c42      	adds	r2, r0, #1
 8026680:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026684:	1200      	asrs	r0, r0, #8
 8026686:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802668a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802668c:	f10e 0e03 	add.w	lr, lr, #3
 8026690:	f108 38ff 	add.w	r8, r8, #4294967295
 8026694:	441d      	add	r5, r3
 8026696:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026698:	441e      	add	r6, r3
 802669a:	e6db      	b.n	8026454 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802669c:	240284f8 	.word	0x240284f8
 80266a0:	2800      	cmp	r0, #0
 80266a2:	d09a      	beq.n	80265da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80266a4:	444b      	add	r3, r9
 80266a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80266aa:	07db      	lsls	r3, r3, #31
 80266ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80266b0:	bf54      	ite	pl
 80266b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80266b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80266ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80266be:	fa5f f38c 	uxtb.w	r3, ip
 80266c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80266c4:	e789      	b.n	80265da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80266c6:	b017      	add	sp, #92	@ 0x5c
 80266c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080266cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80266cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266d0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 80266d4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80266d8:	2d00      	cmp	r5, #0
 80266da:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80266de:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80266e2:	fb04 5e03 	mla	lr, r4, r3, r5
 80266e6:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80266ea:	f2c0 80b1 	blt.w	8026850 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80266ee:	45a9      	cmp	r9, r5
 80266f0:	f340 80ae 	ble.w	8026850 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80266f4:	2c00      	cmp	r4, #0
 80266f6:	f2c0 80ab 	blt.w	8026850 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80266fa:	45a0      	cmp	r8, r4
 80266fc:	f340 80a8 	ble.w	8026850 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8026700:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8026704:	f01e 0f01 	tst.w	lr, #1
 8026708:	5d97      	ldrb	r7, [r2, r6]
 802670a:	bf0c      	ite	eq
 802670c:	f007 070f 	andeq.w	r7, r7, #15
 8026710:	113f      	asrne	r7, r7, #4
 8026712:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8026716:	b2ff      	uxtb	r7, r7
 8026718:	f115 0a01 	adds.w	sl, r5, #1
 802671c:	f100 809a 	bmi.w	8026854 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026720:	45d1      	cmp	r9, sl
 8026722:	f340 8097 	ble.w	8026854 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026726:	2c00      	cmp	r4, #0
 8026728:	f2c0 8094 	blt.w	8026854 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802672c:	45a0      	cmp	r8, r4
 802672e:	f340 8091 	ble.w	8026854 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8026732:	2800      	cmp	r0, #0
 8026734:	f000 8090 	beq.w	8026858 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8026738:	f10e 0b01 	add.w	fp, lr, #1
 802673c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8026740:	f01b 0f01 	tst.w	fp, #1
 8026744:	5d96      	ldrb	r6, [r2, r6]
 8026746:	bf0c      	ite	eq
 8026748:	f006 060f 	andeq.w	r6, r6, #15
 802674c:	1136      	asrne	r6, r6, #4
 802674e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026752:	b2f6      	uxtb	r6, r6
 8026754:	f1bc 0f00 	cmp.w	ip, #0
 8026758:	f000 8082 	beq.w	8026860 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 802675c:	2d00      	cmp	r5, #0
 802675e:	f104 0401 	add.w	r4, r4, #1
 8026762:	db7b      	blt.n	802685c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026764:	45a9      	cmp	r9, r5
 8026766:	dd79      	ble.n	802685c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026768:	2c00      	cmp	r4, #0
 802676a:	db77      	blt.n	802685c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802676c:	45a0      	cmp	r8, r4
 802676e:	dd75      	ble.n	802685c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8026770:	eb03 0b0e 	add.w	fp, r3, lr
 8026774:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8026778:	f01b 0f01 	tst.w	fp, #1
 802677c:	5d55      	ldrb	r5, [r2, r5]
 802677e:	bf0c      	ite	eq
 8026780:	f005 050f 	andeq.w	r5, r5, #15
 8026784:	112d      	asrne	r5, r5, #4
 8026786:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802678a:	b2ed      	uxtb	r5, r5
 802678c:	f1ba 0f00 	cmp.w	sl, #0
 8026790:	db69      	blt.n	8026866 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8026792:	45d1      	cmp	r9, sl
 8026794:	dd67      	ble.n	8026866 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8026796:	2c00      	cmp	r4, #0
 8026798:	db65      	blt.n	8026866 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802679a:	45a0      	cmp	r8, r4
 802679c:	dd63      	ble.n	8026866 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802679e:	2800      	cmp	r0, #0
 80267a0:	d063      	beq.n	802686a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80267a2:	3301      	adds	r3, #1
 80267a4:	449e      	add	lr, r3
 80267a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80267aa:	f01e 0f01 	tst.w	lr, #1
 80267ae:	5cd4      	ldrb	r4, [r2, r3]
 80267b0:	bf0c      	ite	eq
 80267b2:	f004 040f 	andeq.w	r4, r4, #15
 80267b6:	1124      	asrne	r4, r4, #4
 80267b8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80267bc:	b2e3      	uxtb	r3, r4
 80267be:	b282      	uxth	r2, r0
 80267c0:	fa1f fc8c 	uxth.w	ip, ip
 80267c4:	fb02 f40c 	mul.w	r4, r2, ip
 80267c8:	0112      	lsls	r2, r2, #4
 80267ca:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80267ce:	fa1f f08c 	uxth.w	r0, ip
 80267d2:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 80267d6:	1b12      	subs	r2, r2, r4
 80267d8:	ebac 0c00 	sub.w	ip, ip, r0
 80267dc:	b292      	uxth	r2, r2
 80267de:	fa1f fc8c 	uxth.w	ip, ip
 80267e2:	4372      	muls	r2, r6
 80267e4:	fb07 220c 	mla	r2, r7, ip, r2
 80267e8:	fb00 2005 	mla	r0, r0, r5, r2
 80267ec:	fb04 0303 	mla	r3, r4, r3, r0
 80267f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80267f4:	b353      	cbz	r3, 802684c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80267f6:	4a1e      	ldr	r2, [pc, #120]	@ (8026870 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80267f8:	7808      	ldrb	r0, [r1, #0]
 80267fa:	6814      	ldr	r4, [r2, #0]
 80267fc:	b29a      	uxth	r2, r3
 80267fe:	43db      	mvns	r3, r3
 8026800:	b2e5      	uxtb	r5, r4
 8026802:	b2db      	uxtb	r3, r3
 8026804:	fb15 f502 	smulbb	r5, r5, r2
 8026808:	fb00 5003 	mla	r0, r0, r3, r5
 802680c:	b280      	uxth	r0, r0
 802680e:	1c45      	adds	r5, r0, #1
 8026810:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026814:	784d      	ldrb	r5, [r1, #1]
 8026816:	fb15 f503 	smulbb	r5, r5, r3
 802681a:	1200      	asrs	r0, r0, #8
 802681c:	7008      	strb	r0, [r1, #0]
 802681e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8026822:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8026826:	fb00 5002 	mla	r0, r0, r2, r5
 802682a:	b280      	uxth	r0, r0
 802682c:	1c45      	adds	r5, r0, #1
 802682e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026832:	1200      	asrs	r0, r0, #8
 8026834:	7048      	strb	r0, [r1, #1]
 8026836:	7888      	ldrb	r0, [r1, #2]
 8026838:	fb10 f303 	smulbb	r3, r0, r3
 802683c:	fb04 3202 	mla	r2, r4, r2, r3
 8026840:	b292      	uxth	r2, r2
 8026842:	1c53      	adds	r3, r2, #1
 8026844:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026848:	1212      	asrs	r2, r2, #8
 802684a:	708a      	strb	r2, [r1, #2]
 802684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026850:	2700      	movs	r7, #0
 8026852:	e761      	b.n	8026718 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8026854:	2600      	movs	r6, #0
 8026856:	e77d      	b.n	8026754 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8026858:	4606      	mov	r6, r0
 802685a:	e77b      	b.n	8026754 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802685c:	2500      	movs	r5, #0
 802685e:	e795      	b.n	802678c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8026860:	4663      	mov	r3, ip
 8026862:	4665      	mov	r5, ip
 8026864:	e7ab      	b.n	80267be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8026866:	2300      	movs	r3, #0
 8026868:	e7a9      	b.n	80267be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802686a:	4603      	mov	r3, r0
 802686c:	e7a7      	b.n	80267be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802686e:	bf00      	nop
 8026870:	240284f8 	.word	0x240284f8

08026874 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026878:	b093      	sub	sp, #76	@ 0x4c
 802687a:	461c      	mov	r4, r3
 802687c:	920c      	str	r2, [sp, #48]	@ 0x30
 802687e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8026880:	9011      	str	r0, [sp, #68]	@ 0x44
 8026882:	9107      	str	r1, [sp, #28]
 8026884:	6850      	ldr	r0, [r2, #4]
 8026886:	6812      	ldr	r2, [r2, #0]
 8026888:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802688c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8026890:	fb00 1303 	mla	r3, r0, r3, r1
 8026894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026898:	eb02 0b03 	add.w	fp, r2, r3
 802689c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802689e:	689b      	ldr	r3, [r3, #8]
 80268a0:	3301      	adds	r3, #1
 80268a2:	f023 0301 	bic.w	r3, r3, #1
 80268a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80268a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80268aa:	f8d3 8000 	ldr.w	r8, [r3]
 80268ae:	9b07      	ldr	r3, [sp, #28]
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	dc03      	bgt.n	80268bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80268b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80268b6:	2b00      	cmp	r3, #0
 80268b8:	f340 822b 	ble.w	8026d12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80268bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80268be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80268c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80268c6:	1e48      	subs	r0, r1, #1
 80268c8:	1e57      	subs	r7, r2, #1
 80268ca:	2c00      	cmp	r4, #0
 80268cc:	f340 80d7 	ble.w	8026a7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80268d0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80268d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80268d8:	d406      	bmi.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80268da:	4584      	cmp	ip, r0
 80268dc:	da04      	bge.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80268de:	2b00      	cmp	r3, #0
 80268e0:	db02      	blt.n	80268e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80268e2:	42bb      	cmp	r3, r7
 80268e4:	f2c0 80cc 	blt.w	8026a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80268e8:	f11c 0c01 	adds.w	ip, ip, #1
 80268ec:	f100 80bf 	bmi.w	8026a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80268f0:	4561      	cmp	r1, ip
 80268f2:	f2c0 80bc 	blt.w	8026a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80268f6:	3301      	adds	r3, #1
 80268f8:	f100 80b9 	bmi.w	8026a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80268fc:	429a      	cmp	r2, r3
 80268fe:	f2c0 80b6 	blt.w	8026a6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8026902:	46a2      	mov	sl, r4
 8026904:	465f      	mov	r7, fp
 8026906:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802690a:	f1ba 0f00 	cmp.w	sl, #0
 802690e:	f340 80d4 	ble.w	8026aba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8026912:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8026916:	1430      	asrs	r0, r6, #16
 8026918:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802691c:	9308      	str	r3, [sp, #32]
 802691e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026920:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026924:	142b      	asrs	r3, r5, #16
 8026926:	f100 8124 	bmi.w	8026b72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802692a:	f10c 32ff 	add.w	r2, ip, #4294967295
 802692e:	4293      	cmp	r3, r2
 8026930:	f280 811f 	bge.w	8026b72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026934:	2800      	cmp	r0, #0
 8026936:	f2c0 811c 	blt.w	8026b72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802693a:	f10e 32ff 	add.w	r2, lr, #4294967295
 802693e:	4290      	cmp	r0, r2
 8026940:	f280 8117 	bge.w	8026b72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8026944:	fb00 3309 	mla	r3, r0, r9, r3
 8026948:	0858      	lsrs	r0, r3, #1
 802694a:	07da      	lsls	r2, r3, #31
 802694c:	9a08      	ldr	r2, [sp, #32]
 802694e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8026952:	bf54      	ite	pl
 8026954:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026958:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802695c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026960:	fa5f fc8c 	uxtb.w	ip, ip
 8026964:	2a00      	cmp	r2, #0
 8026966:	f000 80ed 	beq.w	8026b44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802696a:	1c58      	adds	r0, r3, #1
 802696c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8026970:	07c0      	lsls	r0, r0, #31
 8026972:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8026976:	bf54      	ite	pl
 8026978:	f00e 0e0f 	andpl.w	lr, lr, #15
 802697c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8026980:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8026984:	fa5f fe8e 	uxtb.w	lr, lr
 8026988:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802698c:	b1c9      	cbz	r1, 80269c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802698e:	444b      	add	r3, r9
 8026990:	0858      	lsrs	r0, r3, #1
 8026992:	07da      	lsls	r2, r3, #31
 8026994:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026998:	bf54      	ite	pl
 802699a:	f000 000f 	andpl.w	r0, r0, #15
 802699e:	1100      	asrmi	r0, r0, #4
 80269a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80269a4:	b2c0      	uxtb	r0, r0
 80269a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80269a8:	1c58      	adds	r0, r3, #1
 80269aa:	0843      	lsrs	r3, r0, #1
 80269ac:	07c2      	lsls	r2, r0, #31
 80269ae:	f818 3003 	ldrb.w	r3, [r8, r3]
 80269b2:	bf54      	ite	pl
 80269b4:	f003 030f 	andpl.w	r3, r3, #15
 80269b8:	111b      	asrmi	r3, r3, #4
 80269ba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80269be:	b2db      	uxtb	r3, r3
 80269c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80269c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80269c6:	b289      	uxth	r1, r1
 80269c8:	fb02 f301 	mul.w	r3, r2, r1
 80269cc:	0112      	lsls	r2, r2, #4
 80269ce:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80269d2:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80269d6:	1ad2      	subs	r2, r2, r3
 80269d8:	b289      	uxth	r1, r1
 80269da:	b292      	uxth	r2, r2
 80269dc:	1a40      	subs	r0, r0, r1
 80269de:	fa1f fe80 	uxth.w	lr, r0
 80269e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80269e4:	4342      	muls	r2, r0
 80269e6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80269ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80269ec:	fb01 c102 	mla	r1, r1, r2, ip
 80269f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80269f2:	fb03 1302 	mla	r3, r3, r2, r1
 80269f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80269fa:	b383      	cbz	r3, 8026a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80269fc:	4ac6      	ldr	r2, [pc, #792]	@ (8026d18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80269fe:	2bff      	cmp	r3, #255	@ 0xff
 8026a00:	6812      	ldr	r2, [r2, #0]
 8026a02:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8026a06:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8026a0a:	b2d2      	uxtb	r2, r2
 8026a0c:	f000 80ac 	beq.w	8026b68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026a10:	b299      	uxth	r1, r3
 8026a12:	43db      	mvns	r3, r3
 8026a14:	f897 c000 	ldrb.w	ip, [r7]
 8026a18:	fb12 f201 	smulbb	r2, r2, r1
 8026a1c:	b2db      	uxtb	r3, r3
 8026a1e:	fb10 f001 	smulbb	r0, r0, r1
 8026a22:	fb0c 2203 	mla	r2, ip, r3, r2
 8026a26:	fb1e f101 	smulbb	r1, lr, r1
 8026a2a:	b292      	uxth	r2, r2
 8026a2c:	f102 0c01 	add.w	ip, r2, #1
 8026a30:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026a34:	1212      	asrs	r2, r2, #8
 8026a36:	703a      	strb	r2, [r7, #0]
 8026a38:	787a      	ldrb	r2, [r7, #1]
 8026a3a:	fb02 0003 	mla	r0, r2, r3, r0
 8026a3e:	b280      	uxth	r0, r0
 8026a40:	1c42      	adds	r2, r0, #1
 8026a42:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026a46:	78ba      	ldrb	r2, [r7, #2]
 8026a48:	fb02 1303 	mla	r3, r2, r3, r1
 8026a4c:	1200      	asrs	r0, r0, #8
 8026a4e:	b29b      	uxth	r3, r3
 8026a50:	7078      	strb	r0, [r7, #1]
 8026a52:	f103 0e01 	add.w	lr, r3, #1
 8026a56:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8026a5a:	121b      	asrs	r3, r3, #8
 8026a5c:	70bb      	strb	r3, [r7, #2]
 8026a5e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026a60:	3703      	adds	r7, #3
 8026a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026a66:	441d      	add	r5, r3
 8026a68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026a6a:	441e      	add	r6, r3
 8026a6c:	e74d      	b.n	802690a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026a6e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026a70:	3c01      	subs	r4, #1
 8026a72:	f10b 0b03 	add.w	fp, fp, #3
 8026a76:	441d      	add	r5, r3
 8026a78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026a7a:	441e      	add	r6, r3
 8026a7c:	e725      	b.n	80268ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8026a7e:	d021      	beq.n	8026ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8026a80:	1e63      	subs	r3, r4, #1
 8026a82:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8026a84:	fb00 5003 	mla	r0, r0, r3, r5
 8026a88:	1400      	asrs	r0, r0, #16
 8026a8a:	f53f af3a 	bmi.w	8026902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026a8e:	3901      	subs	r1, #1
 8026a90:	4288      	cmp	r0, r1
 8026a92:	f6bf af36 	bge.w	8026902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026a96:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8026a98:	fb01 6303 	mla	r3, r1, r3, r6
 8026a9c:	141b      	asrs	r3, r3, #16
 8026a9e:	f53f af30 	bmi.w	8026902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026aa2:	3a01      	subs	r2, #1
 8026aa4:	4293      	cmp	r3, r2
 8026aa6:	f6bf af2c 	bge.w	8026902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026aaa:	f10b 0c03 	add.w	ip, fp, #3
 8026aae:	46a6      	mov	lr, r4
 8026ab0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8026ab4:	f1be 0f00 	cmp.w	lr, #0
 8026ab8:	dc79      	bgt.n	8026bae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8026aba:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8026abe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026ac2:	44a3      	add	fp, r4
 8026ac4:	9b07      	ldr	r3, [sp, #28]
 8026ac6:	2b00      	cmp	r3, #0
 8026ac8:	f340 8123 	ble.w	8026d12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026acc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026ad0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026ad2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026ad6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026ada:	eef0 6a62 	vmov.f32	s13, s5
 8026ade:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026ae2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026ae6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026aea:	ee16 5a90 	vmov	r5, s13
 8026aee:	eef0 6a43 	vmov.f32	s13, s6
 8026af2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026af6:	ee16 6a90 	vmov	r6, s13
 8026afa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026afe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026b02:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026b06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026b0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026b0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026b12:	ee12 2a90 	vmov	r2, s5
 8026b16:	eef0 2a47 	vmov.f32	s5, s14
 8026b1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b1e:	ee13 2a10 	vmov	r2, s6
 8026b22:	931f      	str	r3, [sp, #124]	@ 0x7c
 8026b24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026b26:	eeb0 3a67 	vmov.f32	s6, s15
 8026b2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b2e:	9320      	str	r3, [sp, #128]	@ 0x80
 8026b30:	9b07      	ldr	r3, [sp, #28]
 8026b32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026b34:	3b01      	subs	r3, #1
 8026b36:	9307      	str	r3, [sp, #28]
 8026b38:	bf08      	it	eq
 8026b3a:	4614      	moveq	r4, r2
 8026b3c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026b3e:	bf18      	it	ne
 8026b40:	461c      	movne	r4, r3
 8026b42:	e6b4      	b.n	80268ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026b44:	2900      	cmp	r1, #0
 8026b46:	f43f af3c 	beq.w	80269c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8026b4a:	eb09 0003 	add.w	r0, r9, r3
 8026b4e:	0843      	lsrs	r3, r0, #1
 8026b50:	07c0      	lsls	r0, r0, #31
 8026b52:	f818 3003 	ldrb.w	r3, [r8, r3]
 8026b56:	bf54      	ite	pl
 8026b58:	f003 030f 	andpl.w	r3, r3, #15
 8026b5c:	111b      	asrmi	r3, r3, #4
 8026b5e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026b62:	b2db      	uxtb	r3, r3
 8026b64:	930a      	str	r3, [sp, #40]	@ 0x28
 8026b66:	e72c      	b.n	80269c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8026b68:	703a      	strb	r2, [r7, #0]
 8026b6a:	7078      	strb	r0, [r7, #1]
 8026b6c:	f887 e002 	strb.w	lr, [r7, #2]
 8026b70:	e775      	b.n	8026a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026b72:	1c5a      	adds	r2, r3, #1
 8026b74:	f53f af73 	bmi.w	8026a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026b78:	4594      	cmp	ip, r2
 8026b7a:	f6ff af70 	blt.w	8026a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026b7e:	1c42      	adds	r2, r0, #1
 8026b80:	f53f af6d 	bmi.w	8026a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026b84:	4596      	cmp	lr, r2
 8026b86:	f6ff af6a 	blt.w	8026a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026b8a:	9302      	str	r3, [sp, #8]
 8026b8c:	fa0f f38e 	sxth.w	r3, lr
 8026b90:	9a08      	ldr	r2, [sp, #32]
 8026b92:	9301      	str	r3, [sp, #4]
 8026b94:	fa0f f38c 	sxth.w	r3, ip
 8026b98:	9105      	str	r1, [sp, #20]
 8026b9a:	4639      	mov	r1, r7
 8026b9c:	9300      	str	r3, [sp, #0]
 8026b9e:	464b      	mov	r3, r9
 8026ba0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026ba4:	4642      	mov	r2, r8
 8026ba6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026ba8:	f7ff fd90 	bl	80266cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8026bac:	e757      	b.n	8026a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8026bae:	142a      	asrs	r2, r5, #16
 8026bb0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026bb4:	1433      	asrs	r3, r6, #16
 8026bb6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8026bba:	fb09 2303 	mla	r3, r9, r3, r2
 8026bbe:	085a      	lsrs	r2, r3, #1
 8026bc0:	07d9      	lsls	r1, r3, #31
 8026bc2:	f818 2002 	ldrb.w	r2, [r8, r2]
 8026bc6:	bf54      	ite	pl
 8026bc8:	f002 020f 	andpl.w	r2, r2, #15
 8026bcc:	1112      	asrmi	r2, r2, #4
 8026bce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026bd2:	b2d2      	uxtb	r2, r2
 8026bd4:	2800      	cmp	r0, #0
 8026bd6:	f000 8085 	beq.w	8026ce4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8026bda:	f103 0a01 	add.w	sl, r3, #1
 8026bde:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8026be2:	f01a 0f01 	tst.w	sl, #1
 8026be6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026bea:	bf0c      	ite	eq
 8026bec:	f001 010f 	andeq.w	r1, r1, #15
 8026bf0:	1109      	asrne	r1, r1, #4
 8026bf2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026bf6:	b2c9      	uxtb	r1, r1
 8026bf8:	910f      	str	r1, [sp, #60]	@ 0x3c
 8026bfa:	b1df      	cbz	r7, 8026c34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026bfc:	444b      	add	r3, r9
 8026bfe:	0859      	lsrs	r1, r3, #1
 8026c00:	f013 0f01 	tst.w	r3, #1
 8026c04:	f103 0301 	add.w	r3, r3, #1
 8026c08:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026c0c:	bf0c      	ite	eq
 8026c0e:	f001 010f 	andeq.w	r1, r1, #15
 8026c12:	1109      	asrne	r1, r1, #4
 8026c14:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026c18:	b2c9      	uxtb	r1, r1
 8026c1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026c1c:	0859      	lsrs	r1, r3, #1
 8026c1e:	07db      	lsls	r3, r3, #31
 8026c20:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026c24:	bf54      	ite	pl
 8026c26:	f001 010f 	andpl.w	r1, r1, #15
 8026c2a:	1109      	asrmi	r1, r1, #4
 8026c2c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026c30:	b2c9      	uxtb	r1, r1
 8026c32:	9110      	str	r1, [sp, #64]	@ 0x40
 8026c34:	b280      	uxth	r0, r0
 8026c36:	b2bf      	uxth	r7, r7
 8026c38:	fb00 f307 	mul.w	r3, r0, r7
 8026c3c:	0100      	lsls	r0, r0, #4
 8026c3e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8026c42:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8026c46:	1ac0      	subs	r0, r0, r3
 8026c48:	b2bf      	uxth	r7, r7
 8026c4a:	b280      	uxth	r0, r0
 8026c4c:	1bc9      	subs	r1, r1, r7
 8026c4e:	fa1f fa81 	uxth.w	sl, r1
 8026c52:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8026c54:	4348      	muls	r0, r1
 8026c56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026c58:	fb02 020a 	mla	r2, r2, sl, r0
 8026c5c:	fb07 2701 	mla	r7, r7, r1, r2
 8026c60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026c62:	fb03 7302 	mla	r3, r3, r2, r7
 8026c66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026c6a:	b393      	cbz	r3, 8026cd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8026d18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8026c6e:	2bff      	cmp	r3, #255	@ 0xff
 8026c70:	6811      	ldr	r1, [r2, #0]
 8026c72:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8026c76:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8026c7a:	b2c9      	uxtb	r1, r1
 8026c7c:	d042      	beq.n	8026d04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026c7e:	b298      	uxth	r0, r3
 8026c80:	43db      	mvns	r3, r3
 8026c82:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8026c86:	fb11 f100 	smulbb	r1, r1, r0
 8026c8a:	b2db      	uxtb	r3, r3
 8026c8c:	fb17 f700 	smulbb	r7, r7, r0
 8026c90:	fb02 1103 	mla	r1, r2, r3, r1
 8026c94:	fb1a f000 	smulbb	r0, sl, r0
 8026c98:	b289      	uxth	r1, r1
 8026c9a:	1c4a      	adds	r2, r1, #1
 8026c9c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026ca0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8026ca4:	fb02 7703 	mla	r7, r2, r3, r7
 8026ca8:	1209      	asrs	r1, r1, #8
 8026caa:	b2bf      	uxth	r7, r7
 8026cac:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026cb0:	1c7a      	adds	r2, r7, #1
 8026cb2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8026cb6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8026cba:	fb02 0303 	mla	r3, r2, r3, r0
 8026cbe:	123f      	asrs	r7, r7, #8
 8026cc0:	b29b      	uxth	r3, r3
 8026cc2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8026cc6:	1c5a      	adds	r2, r3, #1
 8026cc8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026ccc:	121b      	asrs	r3, r3, #8
 8026cce:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8026cd2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026cd4:	f10c 0c03 	add.w	ip, ip, #3
 8026cd8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026cdc:	441d      	add	r5, r3
 8026cde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026ce0:	441e      	add	r6, r3
 8026ce2:	e6e7      	b.n	8026ab4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026ce4:	2f00      	cmp	r7, #0
 8026ce6:	d0a5      	beq.n	8026c34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026ce8:	444b      	add	r3, r9
 8026cea:	0859      	lsrs	r1, r3, #1
 8026cec:	07db      	lsls	r3, r3, #31
 8026cee:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026cf2:	bf54      	ite	pl
 8026cf4:	f001 010f 	andpl.w	r1, r1, #15
 8026cf8:	1109      	asrmi	r1, r1, #4
 8026cfa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026cfe:	b2c9      	uxtb	r1, r1
 8026d00:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d02:	e797      	b.n	8026c34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026d04:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8026d08:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8026d0c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8026d10:	e7df      	b.n	8026cd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8026d12:	b013      	add	sp, #76	@ 0x4c
 8026d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d18:	240284f8 	.word	0x240284f8

08026d1c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8026d1c:	b530      	push	{r4, r5, lr}
 8026d1e:	b29d      	uxth	r5, r3
 8026d20:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8026d24:	780c      	ldrb	r4, [r1, #0]
 8026d26:	b298      	uxth	r0, r3
 8026d28:	7813      	ldrb	r3, [r2, #0]
 8026d2a:	fb14 f405 	smulbb	r4, r4, r5
 8026d2e:	fb13 f300 	smulbb	r3, r3, r0
 8026d32:	441c      	add	r4, r3
 8026d34:	b2a4      	uxth	r4, r4
 8026d36:	1c63      	adds	r3, r4, #1
 8026d38:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026d3c:	7853      	ldrb	r3, [r2, #1]
 8026d3e:	fb13 f300 	smulbb	r3, r3, r0
 8026d42:	1224      	asrs	r4, r4, #8
 8026d44:	7014      	strb	r4, [r2, #0]
 8026d46:	784c      	ldrb	r4, [r1, #1]
 8026d48:	fb14 f405 	smulbb	r4, r4, r5
 8026d4c:	441c      	add	r4, r3
 8026d4e:	b2a4      	uxth	r4, r4
 8026d50:	1c63      	adds	r3, r4, #1
 8026d52:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026d56:	1224      	asrs	r4, r4, #8
 8026d58:	7054      	strb	r4, [r2, #1]
 8026d5a:	788b      	ldrb	r3, [r1, #2]
 8026d5c:	7891      	ldrb	r1, [r2, #2]
 8026d5e:	fb13 f305 	smulbb	r3, r3, r5
 8026d62:	fb11 f000 	smulbb	r0, r1, r0
 8026d66:	4403      	add	r3, r0
 8026d68:	b29b      	uxth	r3, r3
 8026d6a:	1c59      	adds	r1, r3, #1
 8026d6c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026d70:	121b      	asrs	r3, r3, #8
 8026d72:	7093      	strb	r3, [r2, #2]
 8026d74:	bd30      	pop	{r4, r5, pc}
	...

08026d78 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8026d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d7c:	461c      	mov	r4, r3
 8026d7e:	b08b      	sub	sp, #44	@ 0x2c
 8026d80:	460e      	mov	r6, r1
 8026d82:	4615      	mov	r5, r2
 8026d84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026d86:	4682      	mov	sl, r0
 8026d88:	6861      	ldr	r1, [r4, #4]
 8026d8a:	aa06      	add	r2, sp, #24
 8026d8c:	6820      	ldr	r0, [r4, #0]
 8026d8e:	2702      	movs	r7, #2
 8026d90:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8026d94:	3504      	adds	r5, #4
 8026d96:	c203      	stmia	r2!, {r0, r1}
 8026d98:	6818      	ldr	r0, [r3, #0]
 8026d9a:	aa08      	add	r2, sp, #32
 8026d9c:	6859      	ldr	r1, [r3, #4]
 8026d9e:	c203      	stmia	r2!, {r0, r1}
 8026da0:	a806      	add	r0, sp, #24
 8026da2:	f7f2 fb63 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026da6:	4621      	mov	r1, r4
 8026da8:	a808      	add	r0, sp, #32
 8026daa:	f7f2 fba3 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026dae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8026db2:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8026db6:	f002 0301 	and.w	r3, r2, #1
 8026dba:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8026dbe:	9302      	str	r3, [sp, #8]
 8026dc0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8026dc4:	f003 0101 	and.w	r1, r3, #1
 8026dc8:	9101      	str	r1, [sp, #4]
 8026dca:	9801      	ldr	r0, [sp, #4]
 8026dcc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8026dd0:	4403      	add	r3, r0
 8026dd2:	fb01 2303 	mla	r3, r1, r3, r2
 8026dd6:	fb93 f3f7 	sdiv	r3, r3, r7
 8026dda:	441e      	add	r6, r3
 8026ddc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8026de0:	441a      	add	r2, r3
 8026de2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8026de6:	4419      	add	r1, r3
 8026de8:	4b70      	ldr	r3, [pc, #448]	@ (8026fac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8026dea:	f8ad 2020 	strh.w	r2, [sp, #32]
 8026dee:	6818      	ldr	r0, [r3, #0]
 8026df0:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8026df4:	6803      	ldr	r3, [r0, #0]
 8026df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026df8:	4798      	blx	r3
 8026dfa:	4a6d      	ldr	r2, [pc, #436]	@ (8026fb0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8026dfc:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8026e00:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026e04:	8813      	ldrh	r3, [r2, #0]
 8026e06:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8026e0a:	fb03 1404 	mla	r4, r3, r4, r1
 8026e0e:	4611      	mov	r1, r2
 8026e10:	fb0b f303 	mul.w	r3, fp, r3
 8026e14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026e18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026e1c:	4404      	add	r4, r0
 8026e1e:	4423      	add	r3, r4
 8026e20:	d073      	beq.n	8026f0a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8026e22:	9705      	str	r7, [sp, #20]
 8026e24:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8026e28:	9b03      	ldr	r3, [sp, #12]
 8026e2a:	429c      	cmp	r4, r3
 8026e2c:	f080 80b5 	bcs.w	8026f9a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8026e30:	9b02      	ldr	r3, [sp, #8]
 8026e32:	b35b      	cbz	r3, 8026e8c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8026e34:	7831      	ldrb	r1, [r6, #0]
 8026e36:	4622      	mov	r2, r4
 8026e38:	1c77      	adds	r7, r6, #1
 8026e3a:	3403      	adds	r4, #3
 8026e3c:	f001 010f 	and.w	r1, r1, #15
 8026e40:	f108 3bff 	add.w	fp, r8, #4294967295
 8026e44:	464b      	mov	r3, r9
 8026e46:	4650      	mov	r0, sl
 8026e48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026e4c:	4429      	add	r1, r5
 8026e4e:	f7ff ff65 	bl	8026d1c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8026e52:	f1bb 0f01 	cmp.w	fp, #1
 8026e56:	dd1c      	ble.n	8026e92 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8026e58:	7839      	ldrb	r1, [r7, #0]
 8026e5a:	4622      	mov	r2, r4
 8026e5c:	464b      	mov	r3, r9
 8026e5e:	4650      	mov	r0, sl
 8026e60:	0909      	lsrs	r1, r1, #4
 8026e62:	f1ab 0b02 	sub.w	fp, fp, #2
 8026e66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026e6a:	4429      	add	r1, r5
 8026e6c:	f7ff ff56 	bl	8026d1c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8026e70:	f817 1b01 	ldrb.w	r1, [r7], #1
 8026e74:	1ce2      	adds	r2, r4, #3
 8026e76:	464b      	mov	r3, r9
 8026e78:	f001 010f 	and.w	r1, r1, #15
 8026e7c:	4650      	mov	r0, sl
 8026e7e:	3406      	adds	r4, #6
 8026e80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026e84:	4429      	add	r1, r5
 8026e86:	f7ff ff49 	bl	8026d1c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8026e8a:	e7e2      	b.n	8026e52 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8026e8c:	4637      	mov	r7, r6
 8026e8e:	46c3      	mov	fp, r8
 8026e90:	e7df      	b.n	8026e52 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8026e92:	d10a      	bne.n	8026eaa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8026e94:	7839      	ldrb	r1, [r7, #0]
 8026e96:	4622      	mov	r2, r4
 8026e98:	3403      	adds	r4, #3
 8026e9a:	464b      	mov	r3, r9
 8026e9c:	0909      	lsrs	r1, r1, #4
 8026e9e:	4650      	mov	r0, sl
 8026ea0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026ea4:	4429      	add	r1, r5
 8026ea6:	f7ff ff39 	bl	8026d1c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8026eaa:	9b04      	ldr	r3, [sp, #16]
 8026eac:	9a01      	ldr	r2, [sp, #4]
 8026eae:	881b      	ldrh	r3, [r3, #0]
 8026eb0:	eba3 0308 	sub.w	r3, r3, r8
 8026eb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026eb8:	441c      	add	r4, r3
 8026eba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8026ebe:	4413      	add	r3, r2
 8026ec0:	9a05      	ldr	r2, [sp, #20]
 8026ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8026ec6:	441e      	add	r6, r3
 8026ec8:	e7ae      	b.n	8026e28 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8026eca:	4632      	mov	r2, r6
 8026ecc:	46c4      	mov	ip, r8
 8026ece:	e037      	b.n	8026f40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8026ed0:	d10e      	bne.n	8026ef0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8026ed2:	7812      	ldrb	r2, [r2, #0]
 8026ed4:	3003      	adds	r0, #3
 8026ed6:	0912      	lsrs	r2, r2, #4
 8026ed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026edc:	18ac      	adds	r4, r5, r2
 8026ede:	5caa      	ldrb	r2, [r5, r2]
 8026ee0:	f800 2c03 	strb.w	r2, [r0, #-3]
 8026ee4:	7862      	ldrb	r2, [r4, #1]
 8026ee6:	f800 2c02 	strb.w	r2, [r0, #-2]
 8026eea:	78a2      	ldrb	r2, [r4, #2]
 8026eec:	f800 2c01 	strb.w	r2, [r0, #-1]
 8026ef0:	880c      	ldrh	r4, [r1, #0]
 8026ef2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8026ef6:	eba4 0408 	sub.w	r4, r4, r8
 8026efa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026efe:	4404      	add	r4, r0
 8026f00:	9801      	ldr	r0, [sp, #4]
 8026f02:	4402      	add	r2, r0
 8026f04:	fb92 f2f7 	sdiv	r2, r2, r7
 8026f08:	4416      	add	r6, r2
 8026f0a:	429c      	cmp	r4, r3
 8026f0c:	d245      	bcs.n	8026f9a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8026f0e:	9a02      	ldr	r2, [sp, #8]
 8026f10:	2a00      	cmp	r2, #0
 8026f12:	d0da      	beq.n	8026eca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8026f14:	7830      	ldrb	r0, [r6, #0]
 8026f16:	1c72      	adds	r2, r6, #1
 8026f18:	3403      	adds	r4, #3
 8026f1a:	f000 000f 	and.w	r0, r0, #15
 8026f1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026f22:	eb05 0c00 	add.w	ip, r5, r0
 8026f26:	5c28      	ldrb	r0, [r5, r0]
 8026f28:	f804 0c03 	strb.w	r0, [r4, #-3]
 8026f2c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026f30:	f804 0c02 	strb.w	r0, [r4, #-2]
 8026f34:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8026f38:	f108 3cff 	add.w	ip, r8, #4294967295
 8026f3c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8026f40:	f1bc 0f01 	cmp.w	ip, #1
 8026f44:	4620      	mov	r0, r4
 8026f46:	f104 0406 	add.w	r4, r4, #6
 8026f4a:	ddc1      	ble.n	8026ed0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8026f4c:	7810      	ldrb	r0, [r2, #0]
 8026f4e:	f1ac 0c02 	sub.w	ip, ip, #2
 8026f52:	0900      	lsrs	r0, r0, #4
 8026f54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026f58:	eb05 0e00 	add.w	lr, r5, r0
 8026f5c:	5c28      	ldrb	r0, [r5, r0]
 8026f5e:	f804 0c06 	strb.w	r0, [r4, #-6]
 8026f62:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8026f66:	f804 0c05 	strb.w	r0, [r4, #-5]
 8026f6a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8026f6e:	f804 0c04 	strb.w	r0, [r4, #-4]
 8026f72:	f812 0b01 	ldrb.w	r0, [r2], #1
 8026f76:	f000 000f 	and.w	r0, r0, #15
 8026f7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026f7e:	eb05 0e00 	add.w	lr, r5, r0
 8026f82:	5c28      	ldrb	r0, [r5, r0]
 8026f84:	f804 0c03 	strb.w	r0, [r4, #-3]
 8026f88:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8026f8c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8026f90:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8026f94:	f804 0c01 	strb.w	r0, [r4, #-1]
 8026f98:	e7d2      	b.n	8026f40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8026f9a:	4b04      	ldr	r3, [pc, #16]	@ (8026fac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8026f9c:	6818      	ldr	r0, [r3, #0]
 8026f9e:	6803      	ldr	r3, [r0, #0]
 8026fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026fa2:	4798      	blx	r3
 8026fa4:	b00b      	add	sp, #44	@ 0x2c
 8026fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026faa:	bf00      	nop
 8026fac:	240284e8 	.word	0x240284e8
 8026fb0:	240284e2 	.word	0x240284e2

08026fb4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8026fb4:	b530      	push	{r4, r5, lr}
 8026fb6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8026fba:	780d      	ldrb	r5, [r1, #0]
 8026fbc:	28ff      	cmp	r0, #255	@ 0xff
 8026fbe:	d107      	bne.n	8026fd0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8026fc0:	2bff      	cmp	r3, #255	@ 0xff
 8026fc2:	d105      	bne.n	8026fd0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8026fc4:	7015      	strb	r5, [r2, #0]
 8026fc6:	784b      	ldrb	r3, [r1, #1]
 8026fc8:	7053      	strb	r3, [r2, #1]
 8026fca:	788b      	ldrb	r3, [r1, #2]
 8026fcc:	7093      	strb	r3, [r2, #2]
 8026fce:	bd30      	pop	{r4, r5, pc}
 8026fd0:	fb10 f003 	smulbb	r0, r0, r3
 8026fd4:	b283      	uxth	r3, r0
 8026fd6:	1c58      	adds	r0, r3, #1
 8026fd8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026fdc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026fe0:	b284      	uxth	r4, r0
 8026fe2:	43c0      	mvns	r0, r0
 8026fe4:	fb15 f504 	smulbb	r5, r5, r4
 8026fe8:	b2c3      	uxtb	r3, r0
 8026fea:	7810      	ldrb	r0, [r2, #0]
 8026fec:	fb00 5003 	mla	r0, r0, r3, r5
 8026ff0:	b280      	uxth	r0, r0
 8026ff2:	1c45      	adds	r5, r0, #1
 8026ff4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026ff8:	7855      	ldrb	r5, [r2, #1]
 8026ffa:	fb15 f503 	smulbb	r5, r5, r3
 8026ffe:	1200      	asrs	r0, r0, #8
 8027000:	7010      	strb	r0, [r2, #0]
 8027002:	7848      	ldrb	r0, [r1, #1]
 8027004:	fb00 5004 	mla	r0, r0, r4, r5
 8027008:	b280      	uxth	r0, r0
 802700a:	1c45      	adds	r5, r0, #1
 802700c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027010:	1200      	asrs	r0, r0, #8
 8027012:	7050      	strb	r0, [r2, #1]
 8027014:	7888      	ldrb	r0, [r1, #2]
 8027016:	7891      	ldrb	r1, [r2, #2]
 8027018:	fb11 f303 	smulbb	r3, r1, r3
 802701c:	fb00 3304 	mla	r3, r0, r4, r3
 8027020:	b29b      	uxth	r3, r3
 8027022:	1c59      	adds	r1, r3, #1
 8027024:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027028:	121b      	asrs	r3, r3, #8
 802702a:	e7cf      	b.n	8026fcc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0802702c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027030:	461d      	mov	r5, r3
 8027032:	b08f      	sub	sp, #60	@ 0x3c
 8027034:	460c      	mov	r4, r1
 8027036:	4616      	mov	r6, r2
 8027038:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802703a:	4680      	mov	r8, r0
 802703c:	6869      	ldr	r1, [r5, #4]
 802703e:	aa0a      	add	r2, sp, #40	@ 0x28
 8027040:	6828      	ldr	r0, [r5, #0]
 8027042:	3604      	adds	r6, #4
 8027044:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8027048:	4f57      	ldr	r7, [pc, #348]	@ (80271a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 802704a:	c203      	stmia	r2!, {r0, r1}
 802704c:	6818      	ldr	r0, [r3, #0]
 802704e:	aa0c      	add	r2, sp, #48	@ 0x30
 8027050:	6859      	ldr	r1, [r3, #4]
 8027052:	c203      	stmia	r2!, {r0, r1}
 8027054:	a80a      	add	r0, sp, #40	@ 0x28
 8027056:	f7f2 fa09 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802705a:	4629      	mov	r1, r5
 802705c:	a80c      	add	r0, sp, #48	@ 0x30
 802705e:	2502      	movs	r5, #2
 8027060:	f7f2 fa48 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027064:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8027068:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 802706c:	f002 0301 	and.w	r3, r2, #1
 8027070:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8027074:	9304      	str	r3, [sp, #16]
 8027076:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802707a:	f003 0101 	and.w	r1, r3, #1
 802707e:	9103      	str	r1, [sp, #12]
 8027080:	9803      	ldr	r0, [sp, #12]
 8027082:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8027086:	4403      	add	r3, r0
 8027088:	6838      	ldr	r0, [r7, #0]
 802708a:	fb01 2303 	mla	r3, r1, r3, r2
 802708e:	fb93 f3f5 	sdiv	r3, r3, r5
 8027092:	18e5      	adds	r5, r4, r3
 8027094:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8027098:	441a      	add	r2, r3
 802709a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802709e:	4419      	add	r1, r3
 80270a0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80270a4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80270a8:	6803      	ldr	r3, [r0, #0]
 80270aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80270ac:	4798      	blx	r3
 80270ae:	4a3f      	ldr	r2, [pc, #252]	@ (80271ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 80270b0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80270b4:	8813      	ldrh	r3, [r2, #0]
 80270b6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80270ba:	9207      	str	r2, [sp, #28]
 80270bc:	fb03 1404 	mla	r4, r3, r4, r1
 80270c0:	fb0a f303 	mul.w	r3, sl, r3
 80270c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80270c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80270cc:	4404      	add	r4, r0
 80270ce:	18e3      	adds	r3, r4, r3
 80270d0:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80270d4:	9b05      	ldr	r3, [sp, #20]
 80270d6:	429c      	cmp	r4, r3
 80270d8:	d25d      	bcs.n	8027196 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80270da:	9b04      	ldr	r3, [sp, #16]
 80270dc:	2b00      	cmp	r3, #0
 80270de:	d037      	beq.n	8027150 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80270e0:	782b      	ldrb	r3, [r5, #0]
 80270e2:	1c6f      	adds	r7, r5, #1
 80270e4:	f003 030f 	and.w	r3, r3, #15
 80270e8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80270ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80270ee:	0e1b      	lsrs	r3, r3, #24
 80270f0:	d006      	beq.n	8027100 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 80270f2:	9300      	str	r3, [sp, #0]
 80270f4:	4622      	mov	r2, r4
 80270f6:	464b      	mov	r3, r9
 80270f8:	a909      	add	r1, sp, #36	@ 0x24
 80270fa:	4640      	mov	r0, r8
 80270fc:	f7ff ff5a 	bl	8026fb4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8027100:	3403      	adds	r4, #3
 8027102:	f10b 3aff 	add.w	sl, fp, #4294967295
 8027106:	f1ba 0f01 	cmp.w	sl, #1
 802710a:	dd24      	ble.n	8027156 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 802710c:	783b      	ldrb	r3, [r7, #0]
 802710e:	091b      	lsrs	r3, r3, #4
 8027110:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027114:	9308      	str	r3, [sp, #32]
 8027116:	0e1b      	lsrs	r3, r3, #24
 8027118:	d006      	beq.n	8027128 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802711a:	9300      	str	r3, [sp, #0]
 802711c:	4622      	mov	r2, r4
 802711e:	464b      	mov	r3, r9
 8027120:	a908      	add	r1, sp, #32
 8027122:	4640      	mov	r0, r8
 8027124:	f7ff ff46 	bl	8026fb4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8027128:	f817 3b01 	ldrb.w	r3, [r7], #1
 802712c:	f003 030f 	and.w	r3, r3, #15
 8027130:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027134:	9309      	str	r3, [sp, #36]	@ 0x24
 8027136:	0e1b      	lsrs	r3, r3, #24
 8027138:	d006      	beq.n	8027148 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802713a:	9300      	str	r3, [sp, #0]
 802713c:	1ce2      	adds	r2, r4, #3
 802713e:	464b      	mov	r3, r9
 8027140:	a909      	add	r1, sp, #36	@ 0x24
 8027142:	4640      	mov	r0, r8
 8027144:	f7ff ff36 	bl	8026fb4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8027148:	3406      	adds	r4, #6
 802714a:	f1aa 0a02 	sub.w	sl, sl, #2
 802714e:	e7da      	b.n	8027106 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8027150:	462f      	mov	r7, r5
 8027152:	46da      	mov	sl, fp
 8027154:	e7d7      	b.n	8027106 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8027156:	d10e      	bne.n	8027176 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8027158:	783b      	ldrb	r3, [r7, #0]
 802715a:	091b      	lsrs	r3, r3, #4
 802715c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027160:	9309      	str	r3, [sp, #36]	@ 0x24
 8027162:	0e1b      	lsrs	r3, r3, #24
 8027164:	d006      	beq.n	8027174 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8027166:	9300      	str	r3, [sp, #0]
 8027168:	4622      	mov	r2, r4
 802716a:	464b      	mov	r3, r9
 802716c:	a909      	add	r1, sp, #36	@ 0x24
 802716e:	4640      	mov	r0, r8
 8027170:	f7ff ff20 	bl	8026fb4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8027174:	3403      	adds	r4, #3
 8027176:	9b07      	ldr	r3, [sp, #28]
 8027178:	9a03      	ldr	r2, [sp, #12]
 802717a:	881b      	ldrh	r3, [r3, #0]
 802717c:	eba3 030b 	sub.w	r3, r3, fp
 8027180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027184:	441c      	add	r4, r3
 8027186:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802718a:	4413      	add	r3, r2
 802718c:	2202      	movs	r2, #2
 802718e:	fb93 f3f2 	sdiv	r3, r3, r2
 8027192:	441d      	add	r5, r3
 8027194:	e79e      	b.n	80270d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8027196:	9b06      	ldr	r3, [sp, #24]
 8027198:	6818      	ldr	r0, [r3, #0]
 802719a:	6803      	ldr	r3, [r0, #0]
 802719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802719e:	4798      	blx	r3
 80271a0:	b00f      	add	sp, #60	@ 0x3c
 80271a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271a6:	bf00      	nop
 80271a8:	240284e8 	.word	0x240284e8
 80271ac:	240284e2 	.word	0x240284e2

080271b0 <CRC_Lock>:
 80271b0:	4a2d      	ldr	r2, [pc, #180]	@ (8027268 <CRC_Lock+0xb8>)
 80271b2:	b530      	push	{r4, r5, lr}
 80271b4:	6813      	ldr	r3, [r2, #0]
 80271b6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80271ba:	f023 0301 	bic.w	r3, r3, #1
 80271be:	6013      	str	r3, [r2, #0]
 80271c0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80271c4:	4b29      	ldr	r3, [pc, #164]	@ (802726c <CRC_Lock+0xbc>)
 80271c6:	681c      	ldr	r4, [r3, #0]
 80271c8:	4014      	ands	r4, r2
 80271ca:	42ac      	cmp	r4, r5
 80271cc:	d005      	beq.n	80271da <CRC_Lock+0x2a>
 80271ce:	681c      	ldr	r4, [r3, #0]
 80271d0:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80271d4:	4014      	ands	r4, r2
 80271d6:	42ac      	cmp	r4, r5
 80271d8:	d125      	bne.n	8027226 <CRC_Lock+0x76>
 80271da:	4b25      	ldr	r3, [pc, #148]	@ (8027270 <CRC_Lock+0xc0>)
 80271dc:	681b      	ldr	r3, [r3, #0]
 80271de:	2b00      	cmp	r3, #0
 80271e0:	d139      	bne.n	8027256 <CRC_Lock+0xa6>
 80271e2:	4b24      	ldr	r3, [pc, #144]	@ (8027274 <CRC_Lock+0xc4>)
 80271e4:	681a      	ldr	r2, [r3, #0]
 80271e6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80271ea:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80271ee:	d00d      	beq.n	802720c <CRC_Lock+0x5c>
 80271f0:	681a      	ldr	r2, [r3, #0]
 80271f2:	f240 4483 	movw	r4, #1155	@ 0x483
 80271f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80271fa:	42a2      	cmp	r2, r4
 80271fc:	d006      	beq.n	802720c <CRC_Lock+0x5c>
 80271fe:	681b      	ldr	r3, [r3, #0]
 8027200:	f240 4285 	movw	r2, #1157	@ 0x485
 8027204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027208:	4293      	cmp	r3, r2
 802720a:	d124      	bne.n	8027256 <CRC_Lock+0xa6>
 802720c:	4b1a      	ldr	r3, [pc, #104]	@ (8027278 <CRC_Lock+0xc8>)
 802720e:	2201      	movs	r2, #1
 8027210:	601a      	str	r2, [r3, #0]
 8027212:	681a      	ldr	r2, [r3, #0]
 8027214:	2a00      	cmp	r2, #0
 8027216:	d1fc      	bne.n	8027212 <CRC_Lock+0x62>
 8027218:	4b18      	ldr	r3, [pc, #96]	@ (802727c <CRC_Lock+0xcc>)
 802721a:	6018      	str	r0, [r3, #0]
 802721c:	6818      	ldr	r0, [r3, #0]
 802721e:	1a43      	subs	r3, r0, r1
 8027220:	4258      	negs	r0, r3
 8027222:	4158      	adcs	r0, r3
 8027224:	e00e      	b.n	8027244 <CRC_Lock+0x94>
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	4013      	ands	r3, r2
 802722a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802722e:	4293      	cmp	r3, r2
 8027230:	d111      	bne.n	8027256 <CRC_Lock+0xa6>
 8027232:	4b13      	ldr	r3, [pc, #76]	@ (8027280 <CRC_Lock+0xd0>)
 8027234:	f240 4286 	movw	r2, #1158	@ 0x486
 8027238:	681b      	ldr	r3, [r3, #0]
 802723a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802723e:	4293      	cmp	r3, r2
 8027240:	d001      	beq.n	8027246 <CRC_Lock+0x96>
 8027242:	2000      	movs	r0, #0
 8027244:	bd30      	pop	{r4, r5, pc}
 8027246:	4b0f      	ldr	r3, [pc, #60]	@ (8027284 <CRC_Lock+0xd4>)
 8027248:	2201      	movs	r2, #1
 802724a:	601a      	str	r2, [r3, #0]
 802724c:	681a      	ldr	r2, [r3, #0]
 802724e:	2a00      	cmp	r2, #0
 8027250:	d1fc      	bne.n	802724c <CRC_Lock+0x9c>
 8027252:	4b0d      	ldr	r3, [pc, #52]	@ (8027288 <CRC_Lock+0xd8>)
 8027254:	e7e1      	b.n	802721a <CRC_Lock+0x6a>
 8027256:	4b0d      	ldr	r3, [pc, #52]	@ (802728c <CRC_Lock+0xdc>)
 8027258:	2201      	movs	r2, #1
 802725a:	601a      	str	r2, [r3, #0]
 802725c:	681a      	ldr	r2, [r3, #0]
 802725e:	2a00      	cmp	r2, #0
 8027260:	d1fc      	bne.n	802725c <CRC_Lock+0xac>
 8027262:	4b0b      	ldr	r3, [pc, #44]	@ (8027290 <CRC_Lock+0xe0>)
 8027264:	e7d9      	b.n	802721a <CRC_Lock+0x6a>
 8027266:	bf00      	nop
 8027268:	e0002000 	.word	0xe0002000
 802726c:	e000ed00 	.word	0xe000ed00
 8027270:	e0042000 	.word	0xe0042000
 8027274:	5c001000 	.word	0x5c001000
 8027278:	58024c08 	.word	0x58024c08
 802727c:	58024c00 	.word	0x58024c00
 8027280:	46008ff0 	.word	0x46008ff0
 8027284:	46024c08 	.word	0x46024c08
 8027288:	46024c00 	.word	0x46024c00
 802728c:	40023008 	.word	0x40023008
 8027290:	40023000 	.word	0x40023000

08027294 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8027294:	6101      	str	r1, [r0, #16]
 8027296:	4770      	bx	lr

08027298 <_ZN8touchgfx8Gestures4tickEv>:
 8027298:	7b83      	ldrb	r3, [r0, #14]
 802729a:	b14b      	cbz	r3, 80272b0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802729c:	8903      	ldrh	r3, [r0, #8]
 802729e:	3301      	adds	r3, #1
 80272a0:	b29b      	uxth	r3, r3
 80272a2:	2b07      	cmp	r3, #7
 80272a4:	8103      	strh	r3, [r0, #8]
 80272a6:	bf81      	itttt	hi
 80272a8:	2300      	movhi	r3, #0
 80272aa:	8143      	strhhi	r3, [r0, #10]
 80272ac:	8183      	strhhi	r3, [r0, #12]
 80272ae:	7383      	strbhi	r3, [r0, #14]
 80272b0:	4770      	bx	lr
	...

080272b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80272b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80272b8:	4698      	mov	r8, r3
 80272ba:	8883      	ldrh	r3, [r0, #4]
 80272bc:	4604      	mov	r4, r0
 80272be:	4617      	mov	r7, r2
 80272c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80272c4:	eba8 0303 	sub.w	r3, r8, r3
 80272c8:	4a19      	ldr	r2, [pc, #100]	@ (8027330 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80272ca:	460e      	mov	r6, r1
 80272cc:	b21b      	sxth	r3, r3
 80272ce:	88c1      	ldrh	r1, [r0, #6]
 80272d0:	9200      	str	r2, [sp, #0]
 80272d2:	2000      	movs	r0, #0
 80272d4:	2b00      	cmp	r3, #0
 80272d6:	8aa2      	ldrh	r2, [r4, #20]
 80272d8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80272dc:	bfb8      	it	lt
 80272de:	425b      	neglt	r3, r3
 80272e0:	f88d 0004 	strb.w	r0, [sp, #4]
 80272e4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80272e8:	b21b      	sxth	r3, r3
 80272ea:	f8ad 800a 	strh.w	r8, [sp, #10]
 80272ee:	f8ad 500c 	strh.w	r5, [sp, #12]
 80272f2:	4293      	cmp	r3, r2
 80272f4:	dc07      	bgt.n	8027306 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80272f6:	1a69      	subs	r1, r5, r1
 80272f8:	b209      	sxth	r1, r1
 80272fa:	2900      	cmp	r1, #0
 80272fc:	bfb8      	it	lt
 80272fe:	4249      	neglt	r1, r1
 8027300:	b209      	sxth	r1, r1
 8027302:	428a      	cmp	r2, r1
 8027304:	da10      	bge.n	8027328 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8027306:	6920      	ldr	r0, [r4, #16]
 8027308:	4669      	mov	r1, sp
 802730a:	eba8 0606 	sub.w	r6, r8, r6
 802730e:	1bef      	subs	r7, r5, r7
 8027310:	6803      	ldr	r3, [r0, #0]
 8027312:	685b      	ldr	r3, [r3, #4]
 8027314:	4798      	blx	r3
 8027316:	2300      	movs	r3, #0
 8027318:	2001      	movs	r0, #1
 802731a:	8166      	strh	r6, [r4, #10]
 802731c:	8123      	strh	r3, [r4, #8]
 802731e:	81a7      	strh	r7, [r4, #12]
 8027320:	f8a4 8004 	strh.w	r8, [r4, #4]
 8027324:	80e5      	strh	r5, [r4, #6]
 8027326:	73a0      	strb	r0, [r4, #14]
 8027328:	b004      	add	sp, #16
 802732a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802732e:	bf00      	nop
 8027330:	0802ca28 	.word	0x0802ca28

08027334 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8027334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027336:	461e      	mov	r6, r3
 8027338:	1e4b      	subs	r3, r1, #1
 802733a:	b085      	sub	sp, #20
 802733c:	4604      	mov	r4, r0
 802733e:	2b01      	cmp	r3, #1
 8027340:	460d      	mov	r5, r1
 8027342:	4617      	mov	r7, r2
 8027344:	d84b      	bhi.n	80273de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8027346:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802734a:	1cd3      	adds	r3, r2, #3
 802734c:	b29b      	uxth	r3, r3
 802734e:	2b06      	cmp	r3, #6
 8027350:	d916      	bls.n	8027380 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8027352:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80273f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027356:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802735a:	f8cd c004 	str.w	ip, [sp, #4]
 802735e:	f04f 0c00 	mov.w	ip, #0
 8027362:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8027366:	6900      	ldr	r0, [r0, #16]
 8027368:	f8ad 100c 	strh.w	r1, [sp, #12]
 802736c:	a901      	add	r1, sp, #4
 802736e:	f88d c008 	strb.w	ip, [sp, #8]
 8027372:	f8ad 200a 	strh.w	r2, [sp, #10]
 8027376:	f8ad 300e 	strh.w	r3, [sp, #14]
 802737a:	6803      	ldr	r3, [r0, #0]
 802737c:	689b      	ldr	r3, [r3, #8]
 802737e:	4798      	blx	r3
 8027380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027384:	1cd3      	adds	r3, r2, #3
 8027386:	b29b      	uxth	r3, r3
 8027388:	2b06      	cmp	r3, #6
 802738a:	d916      	bls.n	80273ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802738c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80273f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8027390:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8027394:	f8cd c004 	str.w	ip, [sp, #4]
 8027398:	f04f 0c01 	mov.w	ip, #1
 802739c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80273a0:	6920      	ldr	r0, [r4, #16]
 80273a2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80273a6:	a901      	add	r1, sp, #4
 80273a8:	f88d c008 	strb.w	ip, [sp, #8]
 80273ac:	f8ad 200a 	strh.w	r2, [sp, #10]
 80273b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80273b4:	6803      	ldr	r3, [r0, #0]
 80273b6:	689b      	ldr	r3, [r3, #8]
 80273b8:	4798      	blx	r3
 80273ba:	4b0d      	ldr	r3, [pc, #52]	@ (80273f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80273bc:	a901      	add	r1, sp, #4
 80273be:	6920      	ldr	r0, [r4, #16]
 80273c0:	9301      	str	r3, [sp, #4]
 80273c2:	2300      	movs	r3, #0
 80273c4:	f88d 5008 	strb.w	r5, [sp, #8]
 80273c8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80273cc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80273d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80273d4:	6803      	ldr	r3, [r0, #0]
 80273d6:	681b      	ldr	r3, [r3, #0]
 80273d8:	4798      	blx	r3
 80273da:	b005      	add	sp, #20
 80273dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80273de:	2900      	cmp	r1, #0
 80273e0:	d1eb      	bne.n	80273ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80273e2:	80a2      	strh	r2, [r4, #4]
 80273e4:	80c6      	strh	r6, [r0, #6]
 80273e6:	60a1      	str	r1, [r4, #8]
 80273e8:	81a1      	strh	r1, [r4, #12]
 80273ea:	73a1      	strb	r1, [r4, #14]
 80273ec:	e7e5      	b.n	80273ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80273ee:	bf00      	nop
 80273f0:	0802ca14 	.word	0x0802ca14
 80273f4:	0802d31c 	.word	0x0802d31c

080273f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 80273f8:	10c9      	asrs	r1, r1, #3
 80273fa:	2900      	cmp	r1, #0
 80273fc:	bfb8      	it	lt
 80273fe:	4249      	neglt	r1, r1
 8027400:	2801      	cmp	r0, #1
 8027402:	d108      	bne.n	8027416 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8027404:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8027408:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802740c:	4601      	mov	r1, r0
 802740e:	dd02      	ble.n	8027416 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8027410:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8027414:	4770      	bx	lr
 8027416:	29ff      	cmp	r1, #255	@ 0xff
 8027418:	bfa8      	it	ge
 802741a:	21ff      	movge	r1, #255	@ 0xff
 802741c:	4608      	mov	r0, r1
 802741e:	4770      	bx	lr

08027420 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8027420:	b410      	push	{r4}
 8027422:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8027426:	429c      	cmp	r4, r3
 8027428:	d803      	bhi.n	8027432 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802742a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802742e:	f7f0 bb13 	b.w	8017a58 <_ZN8touchgfx7Outline6lineToEii>
 8027432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027436:	4770      	bx	lr

08027438 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8027438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802743c:	b08b      	sub	sp, #44	@ 0x2c
 802743e:	4606      	mov	r6, r0
 8027440:	468a      	mov	sl, r1
 8027442:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027446:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802744a:	9308      	str	r3, [sp, #32]
 802744c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8027450:	9309      	str	r3, [sp, #36]	@ 0x24
 8027452:	f7f0 fc6c 	bl	8017d2e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8027456:	68b5      	ldr	r5, [r6, #8]
 8027458:	4604      	mov	r4, r0
 802745a:	2d00      	cmp	r5, #0
 802745c:	d044      	beq.n	80274e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802745e:	6873      	ldr	r3, [r6, #4]
 8027460:	42ab      	cmp	r3, r5
 8027462:	d33d      	bcc.n	80274e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8027464:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8027468:	f04f 0800 	mov.w	r8, #0
 802746c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8027470:	eb02 0b03 	add.w	fp, r2, r3
 8027474:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8027478:	fb02 1203 	mla	r2, r2, r3, r1
 802747c:	9205      	str	r2, [sp, #20]
 802747e:	1e6a      	subs	r2, r5, #1
 8027480:	9204      	str	r2, [sp, #16]
 8027482:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8027486:	f9b4 7000 	ldrsh.w	r7, [r4]
 802748a:	454b      	cmp	r3, r9
 802748c:	463a      	mov	r2, r7
 802748e:	d008      	beq.n	80274a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8027490:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8027494:	eb03 0b09 	add.w	fp, r3, r9
 8027498:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802749c:	fb03 1309 	mla	r3, r3, r9, r1
 80274a0:	9305      	str	r3, [sp, #20]
 80274a2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80274a6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80274aa:	4498      	add	r8, r3
 80274ac:	9b04      	ldr	r3, [sp, #16]
 80274ae:	3b01      	subs	r3, #1
 80274b0:	9304      	str	r3, [sp, #16]
 80274b2:	9b04      	ldr	r3, [sp, #16]
 80274b4:	3301      	adds	r3, #1
 80274b6:	d015      	beq.n	80274e4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80274b8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80274bc:	42bb      	cmp	r3, r7
 80274be:	d117      	bne.n	80274f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80274c0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80274c4:	9b04      	ldr	r3, [sp, #16]
 80274c6:	4548      	cmp	r0, r9
 80274c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80274cc:	d17d      	bne.n	80275ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80274ce:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80274d2:	4401      	add	r1, r0
 80274d4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80274d8:	4480      	add	r8, r0
 80274da:	e7e9      	b.n	80274b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80274dc:	461f      	mov	r7, r3
 80274de:	e042      	b.n	8027566 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80274e0:	2000      	movs	r0, #0
 80274e2:	e002      	b.n	80274ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80274e4:	2900      	cmp	r1, #0
 80274e6:	d16d      	bne.n	80275c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80274e8:	2001      	movs	r0, #1
 80274ea:	b00b      	add	sp, #44	@ 0x2c
 80274ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80274f0:	b379      	cbz	r1, 8027552 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80274f2:	2f00      	cmp	r7, #0
 80274f4:	db29      	blt.n	802754a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80274f6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80274fa:	42bb      	cmp	r3, r7
 80274fc:	dd25      	ble.n	802754a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80274fe:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8027502:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8027506:	f7ff ff77 	bl	80273f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802750a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802750c:	fb10 f003 	smulbb	r0, r0, r3
 8027510:	b280      	uxth	r0, r0
 8027512:	1c41      	adds	r1, r0, #1
 8027514:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027518:	1209      	asrs	r1, r1, #8
 802751a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802751e:	d014      	beq.n	802754a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8027520:	b2c9      	uxtb	r1, r1
 8027522:	9808      	ldr	r0, [sp, #32]
 8027524:	b2ba      	uxth	r2, r7
 8027526:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8027528:	9102      	str	r1, [sp, #8]
 802752a:	2101      	movs	r1, #1
 802752c:	4413      	add	r3, r2
 802752e:	4402      	add	r2, r0
 8027530:	9101      	str	r1, [sp, #4]
 8027532:	fa0f f18b 	sxth.w	r1, fp
 8027536:	f8da 0000 	ldr.w	r0, [sl]
 802753a:	b21b      	sxth	r3, r3
 802753c:	9100      	str	r1, [sp, #0]
 802753e:	b212      	sxth	r2, r2
 8027540:	6941      	ldr	r1, [r0, #20]
 8027542:	4650      	mov	r0, sl
 8027544:	460d      	mov	r5, r1
 8027546:	9905      	ldr	r1, [sp, #20]
 8027548:	47a8      	blx	r5
 802754a:	9b04      	ldr	r3, [sp, #16]
 802754c:	1c7a      	adds	r2, r7, #1
 802754e:	3301      	adds	r3, #1
 8027550:	d0ca      	beq.n	80274e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8027552:	f9b4 7000 	ldrsh.w	r7, [r4]
 8027556:	1abb      	subs	r3, r7, r2
 8027558:	2b00      	cmp	r3, #0
 802755a:	dd31      	ble.n	80275c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802755c:	2a00      	cmp	r2, #0
 802755e:	dabd      	bge.n	80274dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8027560:	2f00      	cmp	r7, #0
 8027562:	dd2d      	ble.n	80275c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8027564:	2200      	movs	r2, #0
 8027566:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802756a:	19d1      	adds	r1, r2, r7
 802756c:	4299      	cmp	r1, r3
 802756e:	db02      	blt.n	8027576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8027570:	1a9f      	subs	r7, r3, r2
 8027572:	2f00      	cmp	r7, #0
 8027574:	dd24      	ble.n	80275c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8027576:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802757a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802757e:	f7ff ff3b 	bl	80273f8 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8027582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027584:	fb10 f003 	smulbb	r0, r0, r3
 8027588:	b280      	uxth	r0, r0
 802758a:	1c41      	adds	r1, r0, #1
 802758c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027590:	1209      	asrs	r1, r1, #8
 8027592:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8027596:	d013      	beq.n	80275c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8027598:	b292      	uxth	r2, r2
 802759a:	9808      	ldr	r0, [sp, #32]
 802759c:	b2c9      	uxtb	r1, r1
 802759e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80275a0:	b23f      	sxth	r7, r7
 80275a2:	4413      	add	r3, r2
 80275a4:	9102      	str	r1, [sp, #8]
 80275a6:	4402      	add	r2, r0
 80275a8:	fa0f f18b 	sxth.w	r1, fp
 80275ac:	f8da 0000 	ldr.w	r0, [sl]
 80275b0:	b21b      	sxth	r3, r3
 80275b2:	9100      	str	r1, [sp, #0]
 80275b4:	b212      	sxth	r2, r2
 80275b6:	9701      	str	r7, [sp, #4]
 80275b8:	9905      	ldr	r1, [sp, #20]
 80275ba:	6947      	ldr	r7, [r0, #20]
 80275bc:	4650      	mov	r0, sl
 80275be:	47b8      	blx	r7
 80275c0:	464b      	mov	r3, r9
 80275c2:	e75e      	b.n	8027482 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80275c4:	2f00      	cmp	r7, #0
 80275c6:	da96      	bge.n	80274f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80275c8:	e78e      	b.n	80274e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80275ca:	2900      	cmp	r1, #0
 80275cc:	d0f8      	beq.n	80275c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80275ce:	e790      	b.n	80274f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080275d0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80275d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80275d4:	461e      	mov	r6, r3
 80275d6:	4b36      	ldr	r3, [pc, #216]	@ (80276b0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 80275d8:	2500      	movs	r5, #0
 80275da:	f100 0814 	add.w	r8, r0, #20
 80275de:	4604      	mov	r4, r0
 80275e0:	4617      	mov	r7, r2
 80275e2:	e9c0 3100 	strd	r3, r1, [r0]
 80275e6:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80275ea:	8185      	strh	r5, [r0, #12]
 80275ec:	8103      	strh	r3, [r0, #8]
 80275ee:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80275f2:	81c5      	strh	r5, [r0, #14]
 80275f4:	7283      	strb	r3, [r0, #10]
 80275f6:	8205      	strh	r5, [r0, #16]
 80275f8:	8245      	strh	r5, [r0, #18]
 80275fa:	4640      	mov	r0, r8
 80275fc:	f7ef fd72 	bl	80170e4 <_ZN8touchgfx7OutlineC1Ev>
 8027600:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8027604:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8027608:	466b      	mov	r3, sp
 802760a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802760e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8027612:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8027616:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802761a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802761e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8027622:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8027626:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802762a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802762e:	6830      	ldr	r0, [r6, #0]
 8027630:	6871      	ldr	r1, [r6, #4]
 8027632:	8872      	ldrh	r2, [r6, #2]
 8027634:	8835      	ldrh	r5, [r6, #0]
 8027636:	c303      	stmia	r3!, {r0, r1}
 8027638:	887b      	ldrh	r3, [r7, #2]
 802763a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802763e:	4413      	add	r3, r2
 8027640:	883a      	ldrh	r2, [r7, #0]
 8027642:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8027646:	442a      	add	r2, r5
 8027648:	81e3      	strh	r3, [r4, #14]
 802764a:	8220      	strh	r0, [r4, #16]
 802764c:	4668      	mov	r0, sp
 802764e:	81a2      	strh	r2, [r4, #12]
 8027650:	8261      	strh	r1, [r4, #18]
 8027652:	4639      	mov	r1, r7
 8027654:	f7f1 ff4e 	bl	80194f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027658:	f104 000c 	add.w	r0, r4, #12
 802765c:	f7f1 ff06 	bl	801946c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027660:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8027664:	f8bd 2000 	ldrh.w	r2, [sp]
 8027668:	4640      	mov	r0, r8
 802766a:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802766e:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8027672:	f7ef fd1b 	bl	80170ac <_ZN8touchgfx7Outline5resetEv>
 8027676:	f9bd 3000 	ldrsh.w	r3, [sp]
 802767a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802767e:	4620      	mov	r0, r4
 8027680:	015b      	lsls	r3, r3, #5
 8027682:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8027684:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8027688:	015b      	lsls	r3, r3, #5
 802768a:	6523      	str	r3, [r4, #80]	@ 0x50
 802768c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8027690:	015b      	lsls	r3, r3, #5
 8027692:	6563      	str	r3, [r4, #84]	@ 0x54
 8027694:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8027698:	015b      	lsls	r3, r3, #5
 802769a:	65a3      	str	r3, [r4, #88]	@ 0x58
 802769c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80276a0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80276a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80276a8:	b002      	add	sp, #8
 80276aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80276ae:	bf00      	nop
 80276b0:	0802d5ac 	.word	0x0802d5ac

080276b4 <_ZN8touchgfx6Canvas5closeEv>:
 80276b4:	b538      	push	{r3, r4, r5, lr}
 80276b6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80276ba:	4604      	mov	r4, r0
 80276bc:	b193      	cbz	r3, 80276e4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80276be:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80276c2:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80276c6:	4213      	tst	r3, r2
 80276c8:	d10c      	bne.n	80276e4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 80276ca:	f100 0514 	add.w	r5, r0, #20
 80276ce:	b123      	cbz	r3, 80276da <_ZN8touchgfx6Canvas5closeEv+0x26>
 80276d0:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 80276d4:	4628      	mov	r0, r5
 80276d6:	f7ff fea3 	bl	8027420 <_ZN8touchgfx10Rasterizer6lineToEii>
 80276da:	4628      	mov	r0, r5
 80276dc:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 80276e0:	f7ff fe9e 	bl	8027420 <_ZN8touchgfx10Rasterizer6lineToEii>
 80276e4:	2300      	movs	r3, #0
 80276e6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80276ea:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 80276ee:	4298      	cmp	r0, r3
 80276f0:	bf34      	ite	cc
 80276f2:	2000      	movcc	r0, #0
 80276f4:	2001      	movcs	r0, #1
 80276f6:	bd38      	pop	{r3, r4, r5, pc}

080276f8 <_ZN8touchgfx6Canvas6renderEh>:
 80276f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80276fc:	7a85      	ldrb	r5, [r0, #10]
 80276fe:	4604      	mov	r4, r0
 8027700:	4369      	muls	r1, r5
 8027702:	1c4d      	adds	r5, r1, #1
 8027704:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027708:	122d      	asrs	r5, r5, #8
 802770a:	f000 8098 	beq.w	802783e <_ZN8touchgfx6Canvas6renderEh+0x146>
 802770e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8027712:	2b00      	cmp	r3, #0
 8027714:	f000 8093 	beq.w	802783e <_ZN8touchgfx6Canvas6renderEh+0x146>
 8027718:	f7ff ffcc 	bl	80276b4 <_ZN8touchgfx6Canvas5closeEv>
 802771c:	4607      	mov	r7, r0
 802771e:	2800      	cmp	r0, #0
 8027720:	d045      	beq.n	80277ae <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8027722:	6860      	ldr	r0, [r4, #4]
 8027724:	4e47      	ldr	r6, [pc, #284]	@ (8027844 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8027726:	6803      	ldr	r3, [r0, #0]
 8027728:	6837      	ldr	r7, [r6, #0]
 802772a:	689b      	ldr	r3, [r3, #8]
 802772c:	4798      	blx	r3
 802772e:	4601      	mov	r1, r0
 8027730:	4638      	mov	r0, r7
 8027732:	f7ec f90d 	bl	8013950 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8027736:	4607      	mov	r7, r0
 8027738:	f7e0 f826 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 802773c:	6803      	ldr	r3, [r0, #0]
 802773e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027740:	4798      	blx	r3
 8027742:	4680      	mov	r8, r0
 8027744:	f7e0 f820 	bl	8007788 <_ZN8touchgfx3HAL3lcdEv>
 8027748:	6803      	ldr	r3, [r0, #0]
 802774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802774c:	4798      	blx	r3
 802774e:	280b      	cmp	r0, #11
 8027750:	d85a      	bhi.n	8027808 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8027752:	e8df f000 	tbb	[pc, r0]
 8027756:	5b50      	.short	0x5b50
 8027758:	3059066b 	.word	0x3059066b
 802775c:	64646440 	.word	0x64646440
 8027760:	6464      	.short	0x6464
 8027762:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8027766:	2208      	movs	r2, #8
 8027768:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802776c:	fb91 f2f2 	sdiv	r2, r1, r2
 8027770:	fb08 2303 	mla	r3, r8, r3, r2
 8027774:	441f      	add	r7, r3
 8027776:	424b      	negs	r3, r1
 8027778:	f001 0107 	and.w	r1, r1, #7
 802777c:	f003 0307 	and.w	r3, r3, #7
 8027780:	bf58      	it	pl
 8027782:	4259      	negpl	r1, r3
 8027784:	b2c9      	uxtb	r1, r1
 8027786:	b2ed      	uxtb	r5, r5
 8027788:	463a      	mov	r2, r7
 802778a:	fa0f f388 	sxth.w	r3, r8
 802778e:	f104 0014 	add.w	r0, r4, #20
 8027792:	e9cd 1500 	strd	r1, r5, [sp]
 8027796:	6861      	ldr	r1, [r4, #4]
 8027798:	f7ff fe4e 	bl	8027438 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802779c:	4607      	mov	r7, r0
 802779e:	6860      	ldr	r0, [r4, #4]
 80277a0:	6803      	ldr	r3, [r0, #0]
 80277a2:	691b      	ldr	r3, [r3, #16]
 80277a4:	4798      	blx	r3
 80277a6:	6830      	ldr	r0, [r6, #0]
 80277a8:	6803      	ldr	r3, [r0, #0]
 80277aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80277ac:	4798      	blx	r3
 80277ae:	4638      	mov	r0, r7
 80277b0:	b002      	add	sp, #8
 80277b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80277b6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80277ba:	2204      	movs	r2, #4
 80277bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80277c0:	fb91 f2f2 	sdiv	r2, r1, r2
 80277c4:	fb08 2303 	mla	r3, r8, r3, r2
 80277c8:	441f      	add	r7, r3
 80277ca:	424b      	negs	r3, r1
 80277cc:	f001 0103 	and.w	r1, r1, #3
 80277d0:	f003 0303 	and.w	r3, r3, #3
 80277d4:	e7d4      	b.n	8027780 <_ZN8touchgfx6Canvas6renderEh+0x88>
 80277d6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80277da:	2202      	movs	r2, #2
 80277dc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80277e0:	2900      	cmp	r1, #0
 80277e2:	fb91 f2f2 	sdiv	r2, r1, r2
 80277e6:	f001 0101 	and.w	r1, r1, #1
 80277ea:	fb08 2303 	mla	r3, r8, r3, r2
 80277ee:	bfb8      	it	lt
 80277f0:	4249      	neglt	r1, r1
 80277f2:	441f      	add	r7, r3
 80277f4:	e7c6      	b.n	8027784 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 80277f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80277fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80277fe:	fb08 f303 	mul.w	r3, r8, r3
 8027802:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8027806:	441f      	add	r7, r3
 8027808:	2100      	movs	r1, #0
 802780a:	e7bc      	b.n	8027786 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802780c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027810:	2103      	movs	r1, #3
 8027812:	fb08 f203 	mul.w	r2, r8, r3
 8027816:	89a3      	ldrh	r3, [r4, #12]
 8027818:	fb13 2301 	smlabb	r3, r3, r1, r2
 802781c:	e7f3      	b.n	8027806 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802781e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027826:	fb08 2303 	mla	r3, r8, r3, r2
 802782a:	e7ec      	b.n	8027806 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802782c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8027830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027834:	fb08 f303 	mul.w	r3, r8, r3
 8027838:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802783c:	e7e3      	b.n	8027806 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802783e:	2701      	movs	r7, #1
 8027840:	e7b5      	b.n	80277ae <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8027842:	bf00      	nop
 8027844:	240284e8 	.word	0x240284e8

08027848 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8027848:	4b06      	ldr	r3, [pc, #24]	@ (8027864 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802784a:	b510      	push	{r4, lr}
 802784c:	781b      	ldrb	r3, [r3, #0]
 802784e:	2b01      	cmp	r3, #1
 8027850:	d107      	bne.n	8027862 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8027852:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8027856:	680b      	ldr	r3, [r1, #0]
 8027858:	6814      	ldr	r4, [r2, #0]
 802785a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802785e:	6013      	str	r3, [r2, #0]
 8027860:	600c      	str	r4, [r1, #0]
 8027862:	bd10      	pop	{r4, pc}
 8027864:	240284e0 	.word	0x240284e0

08027868 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8027868:	b513      	push	{r0, r1, r4, lr}
 802786a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802786e:	4604      	mov	r4, r0
 8027870:	e9cd 2100 	strd	r2, r1, [sp]
 8027874:	b9a3      	cbnz	r3, 80278a0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8027876:	466a      	mov	r2, sp
 8027878:	a901      	add	r1, sp, #4
 802787a:	4620      	mov	r0, r4
 802787c:	f7ff ffe4 	bl	8027848 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8027880:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8027882:	9901      	ldr	r1, [sp, #4]
 8027884:	9a00      	ldr	r2, [sp, #0]
 8027886:	1ac9      	subs	r1, r1, r3
 8027888:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802788a:	1ad2      	subs	r2, r2, r3
 802788c:	9101      	str	r1, [sp, #4]
 802788e:	2a00      	cmp	r2, #0
 8027890:	9200      	str	r2, [sp, #0]
 8027892:	da0b      	bge.n	80278ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8027894:	2301      	movs	r3, #1
 8027896:	2900      	cmp	r1, #0
 8027898:	da0e      	bge.n	80278b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802789a:	f043 0304 	orr.w	r3, r3, #4
 802789e:	e013      	b.n	80278c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80278a0:	f7ff ff08 	bl	80276b4 <_ZN8touchgfx6Canvas5closeEv>
 80278a4:	2800      	cmp	r0, #0
 80278a6:	d1e6      	bne.n	8027876 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80278a8:	b002      	add	sp, #8
 80278aa:	bd10      	pop	{r4, pc}
 80278ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80278ae:	429a      	cmp	r2, r3
 80278b0:	bfac      	ite	ge
 80278b2:	2302      	movge	r3, #2
 80278b4:	2300      	movlt	r3, #0
 80278b6:	e7ee      	b.n	8027896 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80278b8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80278ba:	4281      	cmp	r1, r0
 80278bc:	bfac      	ite	ge
 80278be:	2008      	movge	r0, #8
 80278c0:	2000      	movlt	r0, #0
 80278c2:	4318      	orrs	r0, r3
 80278c4:	b2c3      	uxtb	r3, r0
 80278c6:	b158      	cbz	r0, 80278e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80278c8:	2200      	movs	r2, #0
 80278ca:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80278ce:	9901      	ldr	r1, [sp, #4]
 80278d0:	9a00      	ldr	r2, [sp, #0]
 80278d2:	66e1      	str	r1, [r4, #108]	@ 0x6c
 80278d4:	6722      	str	r2, [r4, #112]	@ 0x70
 80278d6:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80278da:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 80278de:	e7e3      	b.n	80278a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80278e0:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80278e4:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80278e8:	4298      	cmp	r0, r3
 80278ea:	d803      	bhi.n	80278f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80278ec:	f104 0014 	add.w	r0, r4, #20
 80278f0:	f7f0 f8cc 	bl	8017a8c <_ZN8touchgfx7Outline6moveToEii>
 80278f4:	2301      	movs	r3, #1
 80278f6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80278fa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80278fe:	2300      	movs	r3, #0
 8027900:	e7e5      	b.n	80278ce <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08027902 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8027902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027904:	ab02      	add	r3, sp, #8
 8027906:	4604      	mov	r4, r0
 8027908:	9101      	str	r1, [sp, #4]
 802790a:	a901      	add	r1, sp, #4
 802790c:	f843 2d08 	str.w	r2, [r3, #-8]!
 8027910:	461a      	mov	r2, r3
 8027912:	f7ff ff99 	bl	8027848 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8027916:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8027918:	9901      	ldr	r1, [sp, #4]
 802791a:	9a00      	ldr	r2, [sp, #0]
 802791c:	1ac9      	subs	r1, r1, r3
 802791e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8027920:	1ad2      	subs	r2, r2, r3
 8027922:	9101      	str	r1, [sp, #4]
 8027924:	2a00      	cmp	r2, #0
 8027926:	9200      	str	r2, [sp, #0]
 8027928:	db1c      	blt.n	8027964 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802792a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802792c:	429a      	cmp	r2, r3
 802792e:	bfac      	ite	ge
 8027930:	2002      	movge	r0, #2
 8027932:	2000      	movlt	r0, #0
 8027934:	2900      	cmp	r1, #0
 8027936:	db17      	blt.n	8027968 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8027938:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802793a:	4299      	cmp	r1, r3
 802793c:	bfac      	ite	ge
 802793e:	2308      	movge	r3, #8
 8027940:	2300      	movlt	r3, #0
 8027942:	4303      	orrs	r3, r0
 8027944:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8027948:	b2dd      	uxtb	r5, r3
 802794a:	b978      	cbnz	r0, 802796c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802794c:	f104 0014 	add.w	r0, r4, #20
 8027950:	f7ff fd66 	bl	8027420 <_ZN8touchgfx10Rasterizer6lineToEii>
 8027954:	9b01      	ldr	r3, [sp, #4]
 8027956:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802795a:	6623      	str	r3, [r4, #96]	@ 0x60
 802795c:	9b00      	ldr	r3, [sp, #0]
 802795e:	6663      	str	r3, [r4, #100]	@ 0x64
 8027960:	b002      	add	sp, #8
 8027962:	bd70      	pop	{r4, r5, r6, pc}
 8027964:	2001      	movs	r0, #1
 8027966:	e7e5      	b.n	8027934 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8027968:	2304      	movs	r3, #4
 802796a:	e7ea      	b.n	8027942 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802796c:	b113      	cbz	r3, 8027974 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802796e:	ea10 0305 	ands.w	r3, r0, r5
 8027972:	d11c      	bne.n	80279ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8027974:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8027978:	f104 0614 	add.w	r6, r4, #20
 802797c:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8027980:	b98b      	cbnz	r3, 80279a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8027982:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8027986:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802798a:	4298      	cmp	r0, r3
 802798c:	d802      	bhi.n	8027994 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802798e:	4630      	mov	r0, r6
 8027990:	f7f0 f87c 	bl	8017a8c <_ZN8touchgfx7Outline6moveToEii>
 8027994:	2301      	movs	r3, #1
 8027996:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802799a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802799e:	4630      	mov	r0, r6
 80279a0:	e9dd 2100 	ldrd	r2, r1, [sp]
 80279a4:	e7d4      	b.n	8027950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80279a6:	4630      	mov	r0, r6
 80279a8:	f7ff fd3a 	bl	8027420 <_ZN8touchgfx10Rasterizer6lineToEii>
 80279ac:	e7f7      	b.n	802799e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80279ae:	461d      	mov	r5, r3
 80279b0:	e7d0      	b.n	8027954 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080279b4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 80279b4:	b538      	push	{r3, r4, r5, lr}
 80279b6:	ed2d 8b10 	vpush	{d8-d15}
 80279ba:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 80279be:	4605      	mov	r5, r0
 80279c0:	eeb0 ca40 	vmov.f32	s24, s0
 80279c4:	460c      	mov	r4, r1
 80279c6:	eef0 ca60 	vmov.f32	s25, s1
 80279ca:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8027b28 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 80279ce:	eeb0 da41 	vmov.f32	s26, s2
 80279d2:	eef0 da61 	vmov.f32	s27, s3
 80279d6:	eeb0 ea42 	vmov.f32	s28, s4
 80279da:	eef0 ea62 	vmov.f32	s29, s5
 80279de:	eef0 aa6b 	vmov.f32	s21, s23
 80279e2:	2c08      	cmp	r4, #8
 80279e4:	d86e      	bhi.n	8027ac4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 80279e6:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 80279ea:	ee7d 7aee 	vsub.f32	s15, s27, s29
 80279ee:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 80279f2:	ee3e 7aec 	vsub.f32	s14, s29, s25
 80279f6:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 80279fa:	ee3c fa0d 	vadd.f32	s30, s24, s26
 80279fe:	ee7c faad 	vadd.f32	s31, s25, s27
 8027a02:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027a06:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8027a0a:	ee3d aaae 	vadd.f32	s20, s27, s29
 8027a0e:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8027a12:	ee6f faab 	vmul.f32	s31, s31, s23
 8027a16:	ee69 9aab 	vmul.f32	s19, s19, s23
 8027a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8027a1e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8027a22:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8027a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a2a:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8027a2e:	ee68 8aab 	vmul.f32	s17, s17, s23
 8027a32:	bf48      	it	mi
 8027a34:	eef1 7a67 	vnegmi.f32	s15, s15
 8027a38:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8027a3c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8027a40:	eef4 7acb 	vcmpe.f32	s15, s22
 8027a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a48:	dd3f      	ble.n	8027aca <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8027a4a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8027a4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8027a52:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8027a56:	ee27 7a06 	vmul.f32	s14, s14, s12
 8027a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8027a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a62:	d847      	bhi.n	8027af4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8027a64:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8027a68:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8027a6c:	f000 fa57 	bl	8027f1e <atan2f>
 8027a70:	eeb0 8a40 	vmov.f32	s16, s0
 8027a74:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8027a78:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8027a7c:	f000 fa4f 	bl	8027f1e <atan2f>
 8027a80:	ee38 0a40 	vsub.f32	s0, s16, s0
 8027a84:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8027b2c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8027a88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a90:	bf48      	it	mi
 8027a92:	eeb1 0a40 	vnegmi.f32	s0, s0
 8027a96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027a9e:	bfa4      	itt	ge
 8027aa0:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8027b30 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8027aa4:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8027aa8:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8027b34 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8027aac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ab4:	d51e      	bpl.n	8027af4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8027ab6:	eef0 0a49 	vmov.f32	s1, s18
 8027aba:	4628      	mov	r0, r5
 8027abc:	eeb0 0a68 	vmov.f32	s0, s17
 8027ac0:	f7ec fdc6 	bl	8014650 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8027ac4:	ecbd 8b10 	vpop	{d8-d15}
 8027ac8:	bd38      	pop	{r3, r4, r5, pc}
 8027aca:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8027ace:	eeb0 7a68 	vmov.f32	s14, s17
 8027ad2:	eef0 6a49 	vmov.f32	s13, s18
 8027ad6:	eea7 7aea 	vfms.f32	s14, s15, s21
 8027ada:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8027ade:	eee7 6aea 	vfms.f32	s13, s15, s21
 8027ae2:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8027ae6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8027aea:	eef4 7ac6 	vcmpe.f32	s15, s12
 8027aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027af2:	d9e0      	bls.n	8027ab6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8027af4:	3401      	adds	r4, #1
 8027af6:	eef0 0a6c 	vmov.f32	s1, s25
 8027afa:	eeb0 0a4c 	vmov.f32	s0, s24
 8027afe:	4628      	mov	r0, r5
 8027b00:	4621      	mov	r1, r4
 8027b02:	eef0 2a49 	vmov.f32	s5, s18
 8027b06:	eeb0 2a68 	vmov.f32	s4, s17
 8027b0a:	eef0 1a6f 	vmov.f32	s3, s31
 8027b0e:	eeb0 1a4f 	vmov.f32	s2, s30
 8027b12:	f7ff ff4f 	bl	80279b4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8027b16:	eef0 da4a 	vmov.f32	s27, s20
 8027b1a:	eeb0 da69 	vmov.f32	s26, s19
 8027b1e:	eef0 ca49 	vmov.f32	s25, s18
 8027b22:	eeb0 ca68 	vmov.f32	s24, s17
 8027b26:	e75c      	b.n	80279e2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8027b28:	2edbe6ff 	.word	0x2edbe6ff
 8027b2c:	40490fdb 	.word	0x40490fdb
 8027b30:	40c90fdb 	.word	0x40c90fdb
 8027b34:	3dcccccd 	.word	0x3dcccccd

08027b38 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8027b38:	b530      	push	{r4, r5, lr}
 8027b3a:	ed2d 8b10 	vpush	{d8-d15}
 8027b3e:	eef0 8a40 	vmov.f32	s17, s0
 8027b42:	b085      	sub	sp, #20
 8027b44:	eef0 9a60 	vmov.f32	s19, s1
 8027b48:	4604      	mov	r4, r0
 8027b4a:	eef0 fa41 	vmov.f32	s31, s2
 8027b4e:	460d      	mov	r5, r1
 8027b50:	eeb0 fa61 	vmov.f32	s30, s3
 8027b54:	eef0 ba42 	vmov.f32	s23, s4
 8027b58:	eeb0 ca62 	vmov.f32	s24, s5
 8027b5c:	eef0 aa43 	vmov.f32	s21, s6
 8027b60:	eeb0 ba63 	vmov.f32	s22, s7
 8027b64:	2d08      	cmp	r5, #8
 8027b66:	f200 8113 	bhi.w	8027d90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8027b6a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8027b6e:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8027b72:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8027b76:	ee38 daaf 	vadd.f32	s26, s17, s31
 8027b7a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8027b7e:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8027b82:	ee2d da27 	vmul.f32	s26, s26, s15
 8027b86:	ed8d 6a01 	vstr	s12, [sp, #4]
 8027b8a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8027b8e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8027b92:	eeb0 ea4d 	vmov.f32	s28, s26
 8027b96:	ee79 da8f 	vadd.f32	s27, s19, s30
 8027b9a:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8027b9e:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8027ba2:	ee66 6a27 	vmul.f32	s13, s12, s15
 8027ba6:	ee6d daa7 	vmul.f32	s27, s27, s15
 8027baa:	edcd 6a03 	vstr	s13, [sp, #12]
 8027bae:	eef0 6a6c 	vmov.f32	s13, s25
 8027bb2:	eef0 ea6d 	vmov.f32	s29, s27
 8027bb6:	ee2e ea27 	vmul.f32	s28, s28, s15
 8027bba:	eee7 6a27 	vfma.f32	s13, s14, s15
 8027bbe:	eee7 ea27 	vfma.f32	s29, s14, s15
 8027bc2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8027bc6:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8027bca:	eef0 6a67 	vmov.f32	s13, s15
 8027bce:	ed8d 7a02 	vstr	s14, [sp, #8]
 8027bd2:	ed9d 7a03 	vldr	s14, [sp, #12]
 8027bd6:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8027bda:	ed9d 7a02 	vldr	s14, [sp, #8]
 8027bde:	ee3e aa87 	vadd.f32	s20, s29, s14
 8027be2:	ee29 9a27 	vmul.f32	s18, s18, s15
 8027be6:	ee2a aa27 	vmul.f32	s20, s20, s15
 8027bea:	2d00      	cmp	r5, #0
 8027bec:	f000 810b 	beq.w	8027e06 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027bf0:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8027bf4:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8027e4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8027bf8:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8027bfc:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8027c00:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8027c04:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8027c08:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8027c0c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8027c10:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8027c14:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8027c18:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8027c1c:	eea5 6a27 	vfma.f32	s12, s10, s15
 8027c20:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8027c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c28:	bf48      	it	mi
 8027c2a:	eeb1 7a47 	vnegmi.f32	s14, s14
 8027c2e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8027c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c36:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8027c3a:	bf48      	it	mi
 8027c3c:	eeb1 6a46 	vnegmi.f32	s12, s12
 8027c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c44:	f340 80a8 	ble.w	8027d98 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8027c48:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8027c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c50:	dd5a      	ble.n	8027d08 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8027c52:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8027c56:	ee37 7a06 	vadd.f32	s14, s14, s12
 8027c5a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8027c5e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8027c62:	ee65 7a85 	vmul.f32	s15, s11, s10
 8027c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c6e:	f200 80ca 	bhi.w	8027e06 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027c72:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8027c76:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8027c7a:	f000 f950 	bl	8027f1e <atan2f>
 8027c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8027c82:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8027c86:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8027c8a:	f000 f948 	bl	8027f1e <atan2f>
 8027c8e:	ee38 fa40 	vsub.f32	s30, s16, s0
 8027c92:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8027c96:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8027c9a:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8027c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ca2:	bf48      	it	mi
 8027ca4:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8027ca8:	f000 f939 	bl	8027f1e <atan2f>
 8027cac:	ee30 0a48 	vsub.f32	s0, s0, s16
 8027cb0:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8027e50 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8027cb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cbc:	eeb4 fae7 	vcmpe.f32	s30, s15
 8027cc0:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8027e50 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8027cc4:	bf48      	it	mi
 8027cc6:	eeb1 0a40 	vnegmi.f32	s0, s0
 8027cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027cd2:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8027e54 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8027cd6:	bfa4      	itt	ge
 8027cd8:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8027e58 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8027cdc:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8027ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ce4:	bfa4      	itt	ge
 8027ce6:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8027e58 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8027cea:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8027cee:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8027cf2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cfa:	f140 8084 	bpl.w	8027e06 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027cfe:	eef0 0a4a 	vmov.f32	s1, s20
 8027d02:	eeb0 0a49 	vmov.f32	s0, s18
 8027d06:	e040      	b.n	8027d8a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8027d08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8027d0c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8027d10:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8027d14:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d20:	d871      	bhi.n	8027e06 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027d22:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8027d26:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8027d2a:	f000 f8f8 	bl	8027f1e <atan2f>
 8027d2e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8027d32:	eeb0 8a40 	vmov.f32	s16, s0
 8027d36:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8027d3a:	f000 f8f0 	bl	8027f1e <atan2f>
 8027d3e:	ee38 0a40 	vsub.f32	s0, s16, s0
 8027d42:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8027e50 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8027d46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8027d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d4e:	bf48      	it	mi
 8027d50:	eeb1 0a40 	vnegmi.f32	s0, s0
 8027d54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d5c:	bfa4      	itt	ge
 8027d5e:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8027e58 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8027d62:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8027d66:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8027e54 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8027d6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d72:	d548      	bpl.n	8027e06 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027d74:	eef0 0a4f 	vmov.f32	s1, s30
 8027d78:	4620      	mov	r0, r4
 8027d7a:	eeb0 0a6f 	vmov.f32	s0, s31
 8027d7e:	f7ec fc67 	bl	8014650 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8027d82:	eef0 0a4c 	vmov.f32	s1, s24
 8027d86:	eeb0 0a6b 	vmov.f32	s0, s23
 8027d8a:	4620      	mov	r0, r4
 8027d8c:	f7ec fc60 	bl	8014650 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8027d90:	b005      	add	sp, #20
 8027d92:	ecbd 8b10 	vpop	{d8-d15}
 8027d96:	bd30      	pop	{r4, r5, pc}
 8027d98:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8027e4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8027d9c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8027da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027da4:	dd19      	ble.n	8027dda <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8027da6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8027daa:	ee26 7a06 	vmul.f32	s14, s12, s12
 8027dae:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8027db2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8027dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dbe:	d822      	bhi.n	8027e06 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8027dc0:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8027dc4:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8027dc8:	f000 f8a9 	bl	8027f1e <atan2f>
 8027dcc:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8027dd0:	eeb0 8a40 	vmov.f32	s16, s0
 8027dd4:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8027dd8:	e7af      	b.n	8027d3a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8027dda:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8027dde:	eeb0 7a49 	vmov.f32	s14, s18
 8027de2:	eeb0 6a4a 	vmov.f32	s12, s20
 8027de6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8027dea:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8027dee:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8027df2:	ee66 7a06 	vmul.f32	s15, s12, s12
 8027df6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8027dfa:	eef4 7ac5 	vcmpe.f32	s15, s10
 8027dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e02:	f67f af7c 	bls.w	8027cfe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8027e06:	3501      	adds	r5, #1
 8027e08:	eef0 0a69 	vmov.f32	s1, s19
 8027e0c:	eeb0 0a68 	vmov.f32	s0, s17
 8027e10:	4620      	mov	r0, r4
 8027e12:	4629      	mov	r1, r5
 8027e14:	eef0 3a4a 	vmov.f32	s7, s20
 8027e18:	eeb0 3a49 	vmov.f32	s6, s18
 8027e1c:	eef0 2a6e 	vmov.f32	s5, s29
 8027e20:	eeb0 2a4e 	vmov.f32	s4, s28
 8027e24:	eef0 1a6d 	vmov.f32	s3, s27
 8027e28:	eeb0 1a4d 	vmov.f32	s2, s26
 8027e2c:	f7ff fe84 	bl	8027b38 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8027e30:	eeb0 ca6c 	vmov.f32	s24, s25
 8027e34:	eddd ba01 	vldr	s23, [sp, #4]
 8027e38:	eef0 9a4a 	vmov.f32	s19, s20
 8027e3c:	ed9d fa02 	vldr	s30, [sp, #8]
 8027e40:	eef0 8a49 	vmov.f32	s17, s18
 8027e44:	eddd fa03 	vldr	s31, [sp, #12]
 8027e48:	e68c      	b.n	8027b64 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8027e4a:	bf00      	nop
 8027e4c:	2edbe6ff 	.word	0x2edbe6ff
 8027e50:	40490fdb 	.word	0x40490fdb
 8027e54:	3dcccccd 	.word	0x3dcccccd
 8027e58:	40c90fdb 	.word	0x40c90fdb

08027e5c <_ZN8touchgfx6CanvasD1Ev>:
 8027e5c:	4b04      	ldr	r3, [pc, #16]	@ (8027e70 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8027e5e:	b510      	push	{r4, lr}
 8027e60:	4604      	mov	r4, r0
 8027e62:	f840 3b14 	str.w	r3, [r0], #20
 8027e66:	f7ef f919 	bl	801709c <_ZN8touchgfx7OutlineD1Ev>
 8027e6a:	4620      	mov	r0, r4
 8027e6c:	bd10      	pop	{r4, pc}
 8027e6e:	bf00      	nop
 8027e70:	0802d5ac 	.word	0x0802d5ac

08027e74 <_ZN8touchgfx6CanvasD0Ev>:
 8027e74:	b510      	push	{r4, lr}
 8027e76:	4604      	mov	r4, r0
 8027e78:	f7ff fff0 	bl	8027e5c <_ZN8touchgfx6CanvasD1Ev>
 8027e7c:	2174      	movs	r1, #116	@ 0x74
 8027e7e:	4620      	mov	r0, r4
 8027e80:	f000 f826 	bl	8027ed0 <_ZdlPvj>
 8027e84:	4620      	mov	r0, r4
 8027e86:	bd10      	pop	{r4, pc}

08027e88 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8027e88:	790b      	ldrb	r3, [r1, #4]
 8027e8a:	2b00      	cmp	r3, #0
 8027e8c:	bf0c      	ite	eq
 8027e8e:	2301      	moveq	r3, #1
 8027e90:	2300      	movne	r3, #0
 8027e92:	b570      	push	{r4, r5, r6, lr}
 8027e94:	4604      	mov	r4, r0
 8027e96:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8027e9a:	460e      	mov	r6, r1
 8027e9c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8027ea0:	d109      	bne.n	8027eb6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8027ea2:	b14d      	cbz	r5, 8027eb8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8027ea4:	7933      	ldrb	r3, [r6, #4]
 8027ea6:	2b01      	cmp	r3, #1
 8027ea8:	d10c      	bne.n	8027ec4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8027eaa:	6823      	ldr	r3, [r4, #0]
 8027eac:	4620      	mov	r0, r4
 8027eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8027eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027eb4:	4718      	bx	r3
 8027eb6:	b12d      	cbz	r5, 8027ec4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8027eb8:	6823      	ldr	r3, [r4, #0]
 8027eba:	4620      	mov	r0, r4
 8027ebc:	695b      	ldr	r3, [r3, #20]
 8027ebe:	4798      	blx	r3
 8027ec0:	2d00      	cmp	r5, #0
 8027ec2:	d1ef      	bne.n	8027ea4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8027ec4:	bd70      	pop	{r4, r5, r6, pc}

08027ec6 <__aeabi_atexit>:
 8027ec6:	460b      	mov	r3, r1
 8027ec8:	4601      	mov	r1, r0
 8027eca:	4618      	mov	r0, r3
 8027ecc:	f000 bc5a 	b.w	8028784 <__cxa_atexit>

08027ed0 <_ZdlPvj>:
 8027ed0:	f000 b812 	b.w	8027ef8 <_ZdlPv>

08027ed4 <__cxa_guard_acquire>:
 8027ed4:	6802      	ldr	r2, [r0, #0]
 8027ed6:	07d2      	lsls	r2, r2, #31
 8027ed8:	4603      	mov	r3, r0
 8027eda:	d405      	bmi.n	8027ee8 <__cxa_guard_acquire+0x14>
 8027edc:	7842      	ldrb	r2, [r0, #1]
 8027ede:	b102      	cbz	r2, 8027ee2 <__cxa_guard_acquire+0xe>
 8027ee0:	deff      	udf	#255	@ 0xff
 8027ee2:	2001      	movs	r0, #1
 8027ee4:	7058      	strb	r0, [r3, #1]
 8027ee6:	4770      	bx	lr
 8027ee8:	2000      	movs	r0, #0
 8027eea:	4770      	bx	lr

08027eec <__cxa_guard_release>:
 8027eec:	2301      	movs	r3, #1
 8027eee:	6003      	str	r3, [r0, #0]
 8027ef0:	4770      	bx	lr

08027ef2 <__cxa_pure_virtual>:
 8027ef2:	b508      	push	{r3, lr}
 8027ef4:	f000 f80e 	bl	8027f14 <_ZSt9terminatev>

08027ef8 <_ZdlPv>:
 8027ef8:	f000 bb8e 	b.w	8028618 <free>

08027efc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8027efc:	b508      	push	{r3, lr}
 8027efe:	4780      	blx	r0
 8027f00:	f000 fb57 	bl	80285b2 <abort>

08027f04 <_ZSt13get_terminatev>:
 8027f04:	4b02      	ldr	r3, [pc, #8]	@ (8027f10 <_ZSt13get_terminatev+0xc>)
 8027f06:	6818      	ldr	r0, [r3, #0]
 8027f08:	f3bf 8f5b 	dmb	ish
 8027f0c:	4770      	bx	lr
 8027f0e:	bf00      	nop
 8027f10:	240000d8 	.word	0x240000d8

08027f14 <_ZSt9terminatev>:
 8027f14:	b508      	push	{r3, lr}
 8027f16:	f7ff fff5 	bl	8027f04 <_ZSt13get_terminatev>
 8027f1a:	f7ff ffef 	bl	8027efc <_ZN10__cxxabiv111__terminateEPFvvE>

08027f1e <atan2f>:
 8027f1e:	f000 b9cf 	b.w	80282c0 <__ieee754_atan2f>
	...

08027f24 <sqrtf>:
 8027f24:	b508      	push	{r3, lr}
 8027f26:	ed2d 8b02 	vpush	{d8}
 8027f2a:	eeb0 8a40 	vmov.f32	s16, s0
 8027f2e:	f000 f9c4 	bl	80282ba <__ieee754_sqrtf>
 8027f32:	eeb4 8a48 	vcmp.f32	s16, s16
 8027f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f3a:	d60c      	bvs.n	8027f56 <sqrtf+0x32>
 8027f3c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8027f5c <sqrtf+0x38>
 8027f40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8027f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f48:	d505      	bpl.n	8027f56 <sqrtf+0x32>
 8027f4a:	f000 fe89 	bl	8028c60 <__errno>
 8027f4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8027f52:	2321      	movs	r3, #33	@ 0x21
 8027f54:	6003      	str	r3, [r0, #0]
 8027f56:	ecbd 8b02 	vpop	{d8}
 8027f5a:	bd08      	pop	{r3, pc}
 8027f5c:	00000000 	.word	0x00000000

08027f60 <sinf_poly>:
 8027f60:	07cb      	lsls	r3, r1, #31
 8027f62:	d412      	bmi.n	8027f8a <sinf_poly+0x2a>
 8027f64:	ee21 5b00 	vmul.f64	d5, d1, d0
 8027f68:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8027f6c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8027f70:	eea6 7b01 	vfma.f64	d7, d6, d1
 8027f74:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8027f78:	ee21 1b05 	vmul.f64	d1, d1, d5
 8027f7c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8027f80:	eea7 0b01 	vfma.f64	d0, d7, d1
 8027f84:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027f88:	4770      	bx	lr
 8027f8a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8027f8e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8027f92:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8027f96:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8027f9a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8027f9e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8027fa2:	eea1 0b06 	vfma.f64	d0, d1, d6
 8027fa6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8027faa:	ee21 1b05 	vmul.f64	d1, d1, d5
 8027fae:	eea5 0b06 	vfma.f64	d0, d5, d6
 8027fb2:	e7e5      	b.n	8027f80 <sinf_poly+0x20>
 8027fb4:	0000      	movs	r0, r0
	...

08027fb8 <sinf>:
 8027fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027fba:	ee10 4a10 	vmov	r4, s0
 8027fbe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8027fc2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8027fc6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8027fca:	eef0 7a40 	vmov.f32	s15, s0
 8027fce:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8027fd2:	d218      	bcs.n	8028006 <sinf+0x4e>
 8027fd4:	ee26 1b06 	vmul.f64	d1, d6, d6
 8027fd8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8027fdc:	d20a      	bcs.n	8027ff4 <sinf+0x3c>
 8027fde:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8027fe2:	d103      	bne.n	8027fec <sinf+0x34>
 8027fe4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8027fe8:	ed8d 1a01 	vstr	s2, [sp, #4]
 8027fec:	eeb0 0a67 	vmov.f32	s0, s15
 8027ff0:	b003      	add	sp, #12
 8027ff2:	bd30      	pop	{r4, r5, pc}
 8027ff4:	483a      	ldr	r0, [pc, #232]	@ (80280e0 <sinf+0x128>)
 8027ff6:	eeb0 0b46 	vmov.f64	d0, d6
 8027ffa:	2100      	movs	r1, #0
 8027ffc:	b003      	add	sp, #12
 8027ffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028002:	f7ff bfad 	b.w	8027f60 <sinf_poly>
 8028006:	f240 422e 	movw	r2, #1070	@ 0x42e
 802800a:	4293      	cmp	r3, r2
 802800c:	d824      	bhi.n	8028058 <sinf+0xa0>
 802800e:	4b34      	ldr	r3, [pc, #208]	@ (80280e0 <sinf+0x128>)
 8028010:	ed93 7b08 	vldr	d7, [r3, #32]
 8028014:	ee26 7b07 	vmul.f64	d7, d6, d7
 8028018:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802801c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8028020:	ee17 1a90 	vmov	r1, s15
 8028024:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8028028:	1609      	asrs	r1, r1, #24
 802802a:	ee07 1a90 	vmov	s15, r1
 802802e:	f001 0203 	and.w	r2, r1, #3
 8028032:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8028036:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802803a:	ed92 0b00 	vldr	d0, [r2]
 802803e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8028042:	f011 0f02 	tst.w	r1, #2
 8028046:	eea5 6b47 	vfms.f64	d6, d5, d7
 802804a:	bf08      	it	eq
 802804c:	4618      	moveq	r0, r3
 802804e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8028052:	ee20 0b06 	vmul.f64	d0, d0, d6
 8028056:	e7d1      	b.n	8027ffc <sinf+0x44>
 8028058:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802805c:	d237      	bcs.n	80280ce <sinf+0x116>
 802805e:	4921      	ldr	r1, [pc, #132]	@ (80280e4 <sinf+0x12c>)
 8028060:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8028064:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8028068:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802806c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8028070:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8028074:	6a10      	ldr	r0, [r2, #32]
 8028076:	6912      	ldr	r2, [r2, #16]
 8028078:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802807c:	40ab      	lsls	r3, r5
 802807e:	fba0 5003 	umull	r5, r0, r0, r3
 8028082:	4359      	muls	r1, r3
 8028084:	fbe3 0102 	umlal	r0, r1, r3, r2
 8028088:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802808c:	0f9d      	lsrs	r5, r3, #30
 802808e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8028092:	1ac9      	subs	r1, r1, r3
 8028094:	f7d8 fb02 	bl	800069c <__aeabi_l2d>
 8028098:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802809c:	4b10      	ldr	r3, [pc, #64]	@ (80280e0 <sinf+0x128>)
 802809e:	f004 0203 	and.w	r2, r4, #3
 80280a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80280a6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80280d8 <sinf+0x120>
 80280aa:	ed92 0b00 	vldr	d0, [r2]
 80280ae:	ec41 0b17 	vmov	d7, r0, r1
 80280b2:	f014 0f02 	tst.w	r4, #2
 80280b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80280ba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80280be:	4629      	mov	r1, r5
 80280c0:	bf08      	it	eq
 80280c2:	4618      	moveq	r0, r3
 80280c4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80280c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80280cc:	e796      	b.n	8027ffc <sinf+0x44>
 80280ce:	b003      	add	sp, #12
 80280d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80280d4:	f000 b8e2 	b.w	802829c <__math_invalidf>
 80280d8:	54442d18 	.word	0x54442d18
 80280dc:	3c1921fb 	.word	0x3c1921fb
 80280e0:	0802d618 	.word	0x0802d618
 80280e4:	0802d5b8 	.word	0x0802d5b8

080280e8 <sinf_poly>:
 80280e8:	07cb      	lsls	r3, r1, #31
 80280ea:	d412      	bmi.n	8028112 <sinf_poly+0x2a>
 80280ec:	ee21 5b00 	vmul.f64	d5, d1, d0
 80280f0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80280f4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80280f8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80280fc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8028100:	ee21 1b05 	vmul.f64	d1, d1, d5
 8028104:	eea6 0b05 	vfma.f64	d0, d6, d5
 8028108:	eea7 0b01 	vfma.f64	d0, d7, d1
 802810c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028110:	4770      	bx	lr
 8028112:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8028116:	ee21 5b01 	vmul.f64	d5, d1, d1
 802811a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802811e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8028122:	eea1 7b06 	vfma.f64	d7, d1, d6
 8028126:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802812a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802812e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8028132:	ee21 1b05 	vmul.f64	d1, d1, d5
 8028136:	eea5 0b06 	vfma.f64	d0, d5, d6
 802813a:	e7e5      	b.n	8028108 <sinf_poly+0x20>
 802813c:	0000      	movs	r0, r0
	...

08028140 <cosf>:
 8028140:	b538      	push	{r3, r4, r5, lr}
 8028142:	ee10 4a10 	vmov	r4, s0
 8028146:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802814a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802814e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8028152:	d21f      	bcs.n	8028194 <cosf+0x54>
 8028154:	ee27 7b07 	vmul.f64	d7, d7, d7
 8028158:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802815c:	f0c0 8082 	bcc.w	8028264 <cosf+0x124>
 8028160:	ee27 4b07 	vmul.f64	d4, d7, d7
 8028164:	4b44      	ldr	r3, [pc, #272]	@ (8028278 <cosf+0x138>)
 8028166:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802816a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802816e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8028172:	eea7 6b05 	vfma.f64	d6, d7, d5
 8028176:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802817a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802817e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8028182:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028186:	eea4 0b05 	vfma.f64	d0, d4, d5
 802818a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802818e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028192:	bd38      	pop	{r3, r4, r5, pc}
 8028194:	f240 422e 	movw	r2, #1070	@ 0x42e
 8028198:	4293      	cmp	r3, r2
 802819a:	d829      	bhi.n	80281f0 <cosf+0xb0>
 802819c:	4b36      	ldr	r3, [pc, #216]	@ (8028278 <cosf+0x138>)
 802819e:	ed93 6b08 	vldr	d6, [r3, #32]
 80281a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80281a6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80281aa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80281ae:	ee16 1a90 	vmov	r1, s13
 80281b2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80281b6:	1609      	asrs	r1, r1, #24
 80281b8:	ee06 1a90 	vmov	s13, r1
 80281bc:	f001 0203 	and.w	r2, r1, #3
 80281c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80281c4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80281c8:	ed92 0b00 	vldr	d0, [r2]
 80281cc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80281d0:	f011 0f02 	tst.w	r1, #2
 80281d4:	f081 0101 	eor.w	r1, r1, #1
 80281d8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80281dc:	bf08      	it	eq
 80281de:	4618      	moveq	r0, r3
 80281e0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80281e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80281e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80281ec:	f7ff bf7c 	b.w	80280e8 <sinf_poly>
 80281f0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80281f4:	d232      	bcs.n	802825c <cosf+0x11c>
 80281f6:	4921      	ldr	r1, [pc, #132]	@ (802827c <cosf+0x13c>)
 80281f8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80281fc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8028200:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8028204:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8028208:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802820c:	6a10      	ldr	r0, [r2, #32]
 802820e:	6912      	ldr	r2, [r2, #16]
 8028210:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8028214:	40ab      	lsls	r3, r5
 8028216:	fba0 5003 	umull	r5, r0, r0, r3
 802821a:	4359      	muls	r1, r3
 802821c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8028220:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8028224:	0f9d      	lsrs	r5, r3, #30
 8028226:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802822a:	1ac9      	subs	r1, r1, r3
 802822c:	f7d8 fa36 	bl	800069c <__aeabi_l2d>
 8028230:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8028234:	4b10      	ldr	r3, [pc, #64]	@ (8028278 <cosf+0x138>)
 8028236:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8028270 <cosf+0x130>
 802823a:	ec41 0b17 	vmov	d7, r0, r1
 802823e:	f004 0203 	and.w	r2, r4, #3
 8028242:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8028246:	ed92 0b00 	vldr	d0, [r2]
 802824a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802824e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8028252:	f014 0f02 	tst.w	r4, #2
 8028256:	f085 0101 	eor.w	r1, r5, #1
 802825a:	e7bf      	b.n	80281dc <cosf+0x9c>
 802825c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028260:	f000 b81c 	b.w	802829c <__math_invalidf>
 8028264:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028268:	e793      	b.n	8028192 <cosf+0x52>
 802826a:	bf00      	nop
 802826c:	f3af 8000 	nop.w
 8028270:	54442d18 	.word	0x54442d18
 8028274:	3c1921fb 	.word	0x3c1921fb
 8028278:	0802d618 	.word	0x0802d618
 802827c:	0802d5b8 	.word	0x0802d5b8

08028280 <with_errnof>:
 8028280:	b510      	push	{r4, lr}
 8028282:	ed2d 8b02 	vpush	{d8}
 8028286:	eeb0 8a40 	vmov.f32	s16, s0
 802828a:	4604      	mov	r4, r0
 802828c:	f000 fce8 	bl	8028c60 <__errno>
 8028290:	eeb0 0a48 	vmov.f32	s0, s16
 8028294:	ecbd 8b02 	vpop	{d8}
 8028298:	6004      	str	r4, [r0, #0]
 802829a:	bd10      	pop	{r4, pc}

0802829c <__math_invalidf>:
 802829c:	eef0 7a40 	vmov.f32	s15, s0
 80282a0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80282a4:	eef4 7a67 	vcmp.f32	s15, s15
 80282a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282ac:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80282b0:	d602      	bvs.n	80282b8 <__math_invalidf+0x1c>
 80282b2:	2021      	movs	r0, #33	@ 0x21
 80282b4:	f7ff bfe4 	b.w	8028280 <with_errnof>
 80282b8:	4770      	bx	lr

080282ba <__ieee754_sqrtf>:
 80282ba:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80282be:	4770      	bx	lr

080282c0 <__ieee754_atan2f>:
 80282c0:	ee10 2a90 	vmov	r2, s1
 80282c4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80282c8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80282cc:	b510      	push	{r4, lr}
 80282ce:	eef0 7a40 	vmov.f32	s15, s0
 80282d2:	d806      	bhi.n	80282e2 <__ieee754_atan2f+0x22>
 80282d4:	ee10 0a10 	vmov	r0, s0
 80282d8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80282dc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80282e0:	d904      	bls.n	80282ec <__ieee754_atan2f+0x2c>
 80282e2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80282e6:	eeb0 0a67 	vmov.f32	s0, s15
 80282ea:	bd10      	pop	{r4, pc}
 80282ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80282f0:	d103      	bne.n	80282fa <__ieee754_atan2f+0x3a>
 80282f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80282f6:	f000 b881 	b.w	80283fc <atanf>
 80282fa:	1794      	asrs	r4, r2, #30
 80282fc:	f004 0402 	and.w	r4, r4, #2
 8028300:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8028304:	b93b      	cbnz	r3, 8028316 <__ieee754_atan2f+0x56>
 8028306:	2c02      	cmp	r4, #2
 8028308:	d05c      	beq.n	80283c4 <__ieee754_atan2f+0x104>
 802830a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80283d8 <__ieee754_atan2f+0x118>
 802830e:	2c03      	cmp	r4, #3
 8028310:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8028314:	e7e7      	b.n	80282e6 <__ieee754_atan2f+0x26>
 8028316:	b939      	cbnz	r1, 8028328 <__ieee754_atan2f+0x68>
 8028318:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80283dc <__ieee754_atan2f+0x11c>
 802831c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80283e0 <__ieee754_atan2f+0x120>
 8028320:	2800      	cmp	r0, #0
 8028322:	fe67 7a87 	vselge.f32	s15, s15, s14
 8028326:	e7de      	b.n	80282e6 <__ieee754_atan2f+0x26>
 8028328:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802832c:	d110      	bne.n	8028350 <__ieee754_atan2f+0x90>
 802832e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8028332:	f104 34ff 	add.w	r4, r4, #4294967295
 8028336:	d107      	bne.n	8028348 <__ieee754_atan2f+0x88>
 8028338:	2c02      	cmp	r4, #2
 802833a:	d846      	bhi.n	80283ca <__ieee754_atan2f+0x10a>
 802833c:	4b29      	ldr	r3, [pc, #164]	@ (80283e4 <__ieee754_atan2f+0x124>)
 802833e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028342:	edd3 7a00 	vldr	s15, [r3]
 8028346:	e7ce      	b.n	80282e6 <__ieee754_atan2f+0x26>
 8028348:	2c02      	cmp	r4, #2
 802834a:	d841      	bhi.n	80283d0 <__ieee754_atan2f+0x110>
 802834c:	4b26      	ldr	r3, [pc, #152]	@ (80283e8 <__ieee754_atan2f+0x128>)
 802834e:	e7f6      	b.n	802833e <__ieee754_atan2f+0x7e>
 8028350:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8028354:	d0e0      	beq.n	8028318 <__ieee754_atan2f+0x58>
 8028356:	1a5b      	subs	r3, r3, r1
 8028358:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802835c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8028360:	da1a      	bge.n	8028398 <__ieee754_atan2f+0xd8>
 8028362:	2a00      	cmp	r2, #0
 8028364:	da01      	bge.n	802836a <__ieee754_atan2f+0xaa>
 8028366:	313c      	adds	r1, #60	@ 0x3c
 8028368:	db19      	blt.n	802839e <__ieee754_atan2f+0xde>
 802836a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802836e:	f000 f919 	bl	80285a4 <fabsf>
 8028372:	f000 f843 	bl	80283fc <atanf>
 8028376:	eef0 7a40 	vmov.f32	s15, s0
 802837a:	2c01      	cmp	r4, #1
 802837c:	d012      	beq.n	80283a4 <__ieee754_atan2f+0xe4>
 802837e:	2c02      	cmp	r4, #2
 8028380:	d017      	beq.n	80283b2 <__ieee754_atan2f+0xf2>
 8028382:	2c00      	cmp	r4, #0
 8028384:	d0af      	beq.n	80282e6 <__ieee754_atan2f+0x26>
 8028386:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80283ec <__ieee754_atan2f+0x12c>
 802838a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802838e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80283f0 <__ieee754_atan2f+0x130>
 8028392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028396:	e7a6      	b.n	80282e6 <__ieee754_atan2f+0x26>
 8028398:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80283dc <__ieee754_atan2f+0x11c>
 802839c:	e7ed      	b.n	802837a <__ieee754_atan2f+0xba>
 802839e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80283f4 <__ieee754_atan2f+0x134>
 80283a2:	e7ea      	b.n	802837a <__ieee754_atan2f+0xba>
 80283a4:	ee17 3a90 	vmov	r3, s15
 80283a8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80283ac:	ee07 3a90 	vmov	s15, r3
 80283b0:	e799      	b.n	80282e6 <__ieee754_atan2f+0x26>
 80283b2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80283ec <__ieee754_atan2f+0x12c>
 80283b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80283ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80283f0 <__ieee754_atan2f+0x130>
 80283be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80283c2:	e790      	b.n	80282e6 <__ieee754_atan2f+0x26>
 80283c4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80283f0 <__ieee754_atan2f+0x130>
 80283c8:	e78d      	b.n	80282e6 <__ieee754_atan2f+0x26>
 80283ca:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80283f8 <__ieee754_atan2f+0x138>
 80283ce:	e78a      	b.n	80282e6 <__ieee754_atan2f+0x26>
 80283d0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80283f4 <__ieee754_atan2f+0x134>
 80283d4:	e787      	b.n	80282e6 <__ieee754_atan2f+0x26>
 80283d6:	bf00      	nop
 80283d8:	c0490fdb 	.word	0xc0490fdb
 80283dc:	3fc90fdb 	.word	0x3fc90fdb
 80283e0:	bfc90fdb 	.word	0xbfc90fdb
 80283e4:	0802d704 	.word	0x0802d704
 80283e8:	0802d6f8 	.word	0x0802d6f8
 80283ec:	33bbbd2e 	.word	0x33bbbd2e
 80283f0:	40490fdb 	.word	0x40490fdb
 80283f4:	00000000 	.word	0x00000000
 80283f8:	3f490fdb 	.word	0x3f490fdb

080283fc <atanf>:
 80283fc:	b538      	push	{r3, r4, r5, lr}
 80283fe:	ee10 5a10 	vmov	r5, s0
 8028402:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8028406:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802840a:	eef0 7a40 	vmov.f32	s15, s0
 802840e:	d30f      	bcc.n	8028430 <atanf+0x34>
 8028410:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8028414:	d904      	bls.n	8028420 <atanf+0x24>
 8028416:	ee70 7a00 	vadd.f32	s15, s0, s0
 802841a:	eeb0 0a67 	vmov.f32	s0, s15
 802841e:	bd38      	pop	{r3, r4, r5, pc}
 8028420:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8028558 <atanf+0x15c>
 8028424:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802855c <atanf+0x160>
 8028428:	2d00      	cmp	r5, #0
 802842a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802842e:	e7f4      	b.n	802841a <atanf+0x1e>
 8028430:	4b4b      	ldr	r3, [pc, #300]	@ (8028560 <atanf+0x164>)
 8028432:	429c      	cmp	r4, r3
 8028434:	d810      	bhi.n	8028458 <atanf+0x5c>
 8028436:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802843a:	d20a      	bcs.n	8028452 <atanf+0x56>
 802843c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8028564 <atanf+0x168>
 8028440:	ee30 7a07 	vadd.f32	s14, s0, s14
 8028444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8028448:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028450:	dce3      	bgt.n	802841a <atanf+0x1e>
 8028452:	f04f 33ff 	mov.w	r3, #4294967295
 8028456:	e013      	b.n	8028480 <atanf+0x84>
 8028458:	f000 f8a4 	bl	80285a4 <fabsf>
 802845c:	4b42      	ldr	r3, [pc, #264]	@ (8028568 <atanf+0x16c>)
 802845e:	429c      	cmp	r4, r3
 8028460:	d84f      	bhi.n	8028502 <atanf+0x106>
 8028462:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8028466:	429c      	cmp	r4, r3
 8028468:	d841      	bhi.n	80284ee <atanf+0xf2>
 802846a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802846e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8028472:	eea0 7a27 	vfma.f32	s14, s0, s15
 8028476:	2300      	movs	r3, #0
 8028478:	ee30 0a27 	vadd.f32	s0, s0, s15
 802847c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028480:	1c5a      	adds	r2, r3, #1
 8028482:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8028486:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802856c <atanf+0x170>
 802848a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8028570 <atanf+0x174>
 802848e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8028574 <atanf+0x178>
 8028492:	ee66 6a06 	vmul.f32	s13, s12, s12
 8028496:	eee6 5a87 	vfma.f32	s11, s13, s14
 802849a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8028578 <atanf+0x17c>
 802849e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80284a2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802857c <atanf+0x180>
 80284a6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80284aa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8028580 <atanf+0x184>
 80284ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80284b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8028584 <atanf+0x188>
 80284b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80284ba:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8028588 <atanf+0x18c>
 80284be:	eea6 5a87 	vfma.f32	s10, s13, s14
 80284c2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802858c <atanf+0x190>
 80284c6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80284ca:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8028590 <atanf+0x194>
 80284ce:	eea7 5a26 	vfma.f32	s10, s14, s13
 80284d2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8028594 <atanf+0x198>
 80284d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80284da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80284de:	eea5 7a86 	vfma.f32	s14, s11, s12
 80284e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80284e6:	d121      	bne.n	802852c <atanf+0x130>
 80284e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80284ec:	e795      	b.n	802841a <atanf+0x1e>
 80284ee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80284f2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80284f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80284fa:	2301      	movs	r3, #1
 80284fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028500:	e7be      	b.n	8028480 <atanf+0x84>
 8028502:	4b25      	ldr	r3, [pc, #148]	@ (8028598 <atanf+0x19c>)
 8028504:	429c      	cmp	r4, r3
 8028506:	d80b      	bhi.n	8028520 <atanf+0x124>
 8028508:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802850c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028510:	eea0 7a27 	vfma.f32	s14, s0, s15
 8028514:	2302      	movs	r3, #2
 8028516:	ee70 6a67 	vsub.f32	s13, s0, s15
 802851a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802851e:	e7af      	b.n	8028480 <atanf+0x84>
 8028520:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8028524:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028528:	2303      	movs	r3, #3
 802852a:	e7a9      	b.n	8028480 <atanf+0x84>
 802852c:	4a1b      	ldr	r2, [pc, #108]	@ (802859c <atanf+0x1a0>)
 802852e:	491c      	ldr	r1, [pc, #112]	@ (80285a0 <atanf+0x1a4>)
 8028530:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8028534:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8028538:	edd3 6a00 	vldr	s13, [r3]
 802853c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8028540:	2d00      	cmp	r5, #0
 8028542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8028546:	edd2 7a00 	vldr	s15, [r2]
 802854a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802854e:	bfb8      	it	lt
 8028550:	eef1 7a67 	vneglt.f32	s15, s15
 8028554:	e761      	b.n	802841a <atanf+0x1e>
 8028556:	bf00      	nop
 8028558:	bfc90fdb 	.word	0xbfc90fdb
 802855c:	3fc90fdb 	.word	0x3fc90fdb
 8028560:	3edfffff 	.word	0x3edfffff
 8028564:	7149f2ca 	.word	0x7149f2ca
 8028568:	3f97ffff 	.word	0x3f97ffff
 802856c:	3c8569d7 	.word	0x3c8569d7
 8028570:	3d4bda59 	.word	0x3d4bda59
 8028574:	bd6ef16b 	.word	0xbd6ef16b
 8028578:	3d886b35 	.word	0x3d886b35
 802857c:	3dba2e6e 	.word	0x3dba2e6e
 8028580:	3e124925 	.word	0x3e124925
 8028584:	3eaaaaab 	.word	0x3eaaaaab
 8028588:	bd15a221 	.word	0xbd15a221
 802858c:	bd9d8795 	.word	0xbd9d8795
 8028590:	bde38e38 	.word	0xbde38e38
 8028594:	be4ccccd 	.word	0xbe4ccccd
 8028598:	401bffff 	.word	0x401bffff
 802859c:	0802d720 	.word	0x0802d720
 80285a0:	0802d710 	.word	0x0802d710

080285a4 <fabsf>:
 80285a4:	ee10 3a10 	vmov	r3, s0
 80285a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80285ac:	ee00 3a10 	vmov	s0, r3
 80285b0:	4770      	bx	lr

080285b2 <abort>:
 80285b2:	b508      	push	{r3, lr}
 80285b4:	2006      	movs	r0, #6
 80285b6:	f000 fae1 	bl	8028b7c <raise>
 80285ba:	2001      	movs	r0, #1
 80285bc:	f7d9 f85c 	bl	8001678 <_exit>

080285c0 <__assert_func>:
 80285c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80285c2:	4614      	mov	r4, r2
 80285c4:	461a      	mov	r2, r3
 80285c6:	4b09      	ldr	r3, [pc, #36]	@ (80285ec <__assert_func+0x2c>)
 80285c8:	681b      	ldr	r3, [r3, #0]
 80285ca:	4605      	mov	r5, r0
 80285cc:	68d8      	ldr	r0, [r3, #12]
 80285ce:	b954      	cbnz	r4, 80285e6 <__assert_func+0x26>
 80285d0:	4b07      	ldr	r3, [pc, #28]	@ (80285f0 <__assert_func+0x30>)
 80285d2:	461c      	mov	r4, r3
 80285d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80285d8:	9100      	str	r1, [sp, #0]
 80285da:	462b      	mov	r3, r5
 80285dc:	4905      	ldr	r1, [pc, #20]	@ (80285f4 <__assert_func+0x34>)
 80285de:	f000 f983 	bl	80288e8 <fiprintf>
 80285e2:	f7ff ffe6 	bl	80285b2 <abort>
 80285e6:	4b04      	ldr	r3, [pc, #16]	@ (80285f8 <__assert_func+0x38>)
 80285e8:	e7f4      	b.n	80285d4 <__assert_func+0x14>
 80285ea:	bf00      	nop
 80285ec:	240000e8 	.word	0x240000e8
 80285f0:	0802d76b 	.word	0x0802d76b
 80285f4:	0802d73d 	.word	0x0802d73d
 80285f8:	0802d730 	.word	0x0802d730

080285fc <atexit>:
 80285fc:	2300      	movs	r3, #0
 80285fe:	4601      	mov	r1, r0
 8028600:	461a      	mov	r2, r3
 8028602:	4618      	mov	r0, r3
 8028604:	f000 bb68 	b.w	8028cd8 <__register_exitproc>

08028608 <malloc>:
 8028608:	4b02      	ldr	r3, [pc, #8]	@ (8028614 <malloc+0xc>)
 802860a:	4601      	mov	r1, r0
 802860c:	6818      	ldr	r0, [r3, #0]
 802860e:	f000 b82d 	b.w	802866c <_malloc_r>
 8028612:	bf00      	nop
 8028614:	240000e8 	.word	0x240000e8

08028618 <free>:
 8028618:	4b02      	ldr	r3, [pc, #8]	@ (8028624 <free+0xc>)
 802861a:	4601      	mov	r1, r0
 802861c:	6818      	ldr	r0, [r3, #0]
 802861e:	f000 bbb7 	b.w	8028d90 <_free_r>
 8028622:	bf00      	nop
 8028624:	240000e8 	.word	0x240000e8

08028628 <sbrk_aligned>:
 8028628:	b570      	push	{r4, r5, r6, lr}
 802862a:	4e0f      	ldr	r6, [pc, #60]	@ (8028668 <sbrk_aligned+0x40>)
 802862c:	460c      	mov	r4, r1
 802862e:	6831      	ldr	r1, [r6, #0]
 8028630:	4605      	mov	r5, r0
 8028632:	b911      	cbnz	r1, 802863a <sbrk_aligned+0x12>
 8028634:	f000 faf2 	bl	8028c1c <_sbrk_r>
 8028638:	6030      	str	r0, [r6, #0]
 802863a:	4621      	mov	r1, r4
 802863c:	4628      	mov	r0, r5
 802863e:	f000 faed 	bl	8028c1c <_sbrk_r>
 8028642:	1c43      	adds	r3, r0, #1
 8028644:	d103      	bne.n	802864e <sbrk_aligned+0x26>
 8028646:	f04f 34ff 	mov.w	r4, #4294967295
 802864a:	4620      	mov	r0, r4
 802864c:	bd70      	pop	{r4, r5, r6, pc}
 802864e:	1cc4      	adds	r4, r0, #3
 8028650:	f024 0403 	bic.w	r4, r4, #3
 8028654:	42a0      	cmp	r0, r4
 8028656:	d0f8      	beq.n	802864a <sbrk_aligned+0x22>
 8028658:	1a21      	subs	r1, r4, r0
 802865a:	4628      	mov	r0, r5
 802865c:	f000 fade 	bl	8028c1c <_sbrk_r>
 8028660:	3001      	adds	r0, #1
 8028662:	d1f2      	bne.n	802864a <sbrk_aligned+0x22>
 8028664:	e7ef      	b.n	8028646 <sbrk_aligned+0x1e>
 8028666:	bf00      	nop
 8028668:	24028f24 	.word	0x24028f24

0802866c <_malloc_r>:
 802866c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028670:	1ccd      	adds	r5, r1, #3
 8028672:	f025 0503 	bic.w	r5, r5, #3
 8028676:	3508      	adds	r5, #8
 8028678:	2d0c      	cmp	r5, #12
 802867a:	bf38      	it	cc
 802867c:	250c      	movcc	r5, #12
 802867e:	2d00      	cmp	r5, #0
 8028680:	4606      	mov	r6, r0
 8028682:	db01      	blt.n	8028688 <_malloc_r+0x1c>
 8028684:	42a9      	cmp	r1, r5
 8028686:	d904      	bls.n	8028692 <_malloc_r+0x26>
 8028688:	230c      	movs	r3, #12
 802868a:	6033      	str	r3, [r6, #0]
 802868c:	2000      	movs	r0, #0
 802868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028768 <_malloc_r+0xfc>
 8028696:	f000 f869 	bl	802876c <__malloc_lock>
 802869a:	f8d8 3000 	ldr.w	r3, [r8]
 802869e:	461c      	mov	r4, r3
 80286a0:	bb44      	cbnz	r4, 80286f4 <_malloc_r+0x88>
 80286a2:	4629      	mov	r1, r5
 80286a4:	4630      	mov	r0, r6
 80286a6:	f7ff ffbf 	bl	8028628 <sbrk_aligned>
 80286aa:	1c43      	adds	r3, r0, #1
 80286ac:	4604      	mov	r4, r0
 80286ae:	d158      	bne.n	8028762 <_malloc_r+0xf6>
 80286b0:	f8d8 4000 	ldr.w	r4, [r8]
 80286b4:	4627      	mov	r7, r4
 80286b6:	2f00      	cmp	r7, #0
 80286b8:	d143      	bne.n	8028742 <_malloc_r+0xd6>
 80286ba:	2c00      	cmp	r4, #0
 80286bc:	d04b      	beq.n	8028756 <_malloc_r+0xea>
 80286be:	6823      	ldr	r3, [r4, #0]
 80286c0:	4639      	mov	r1, r7
 80286c2:	4630      	mov	r0, r6
 80286c4:	eb04 0903 	add.w	r9, r4, r3
 80286c8:	f000 faa8 	bl	8028c1c <_sbrk_r>
 80286cc:	4581      	cmp	r9, r0
 80286ce:	d142      	bne.n	8028756 <_malloc_r+0xea>
 80286d0:	6821      	ldr	r1, [r4, #0]
 80286d2:	1a6d      	subs	r5, r5, r1
 80286d4:	4629      	mov	r1, r5
 80286d6:	4630      	mov	r0, r6
 80286d8:	f7ff ffa6 	bl	8028628 <sbrk_aligned>
 80286dc:	3001      	adds	r0, #1
 80286de:	d03a      	beq.n	8028756 <_malloc_r+0xea>
 80286e0:	6823      	ldr	r3, [r4, #0]
 80286e2:	442b      	add	r3, r5
 80286e4:	6023      	str	r3, [r4, #0]
 80286e6:	f8d8 3000 	ldr.w	r3, [r8]
 80286ea:	685a      	ldr	r2, [r3, #4]
 80286ec:	bb62      	cbnz	r2, 8028748 <_malloc_r+0xdc>
 80286ee:	f8c8 7000 	str.w	r7, [r8]
 80286f2:	e00f      	b.n	8028714 <_malloc_r+0xa8>
 80286f4:	6822      	ldr	r2, [r4, #0]
 80286f6:	1b52      	subs	r2, r2, r5
 80286f8:	d420      	bmi.n	802873c <_malloc_r+0xd0>
 80286fa:	2a0b      	cmp	r2, #11
 80286fc:	d917      	bls.n	802872e <_malloc_r+0xc2>
 80286fe:	1961      	adds	r1, r4, r5
 8028700:	42a3      	cmp	r3, r4
 8028702:	6025      	str	r5, [r4, #0]
 8028704:	bf18      	it	ne
 8028706:	6059      	strne	r1, [r3, #4]
 8028708:	6863      	ldr	r3, [r4, #4]
 802870a:	bf08      	it	eq
 802870c:	f8c8 1000 	streq.w	r1, [r8]
 8028710:	5162      	str	r2, [r4, r5]
 8028712:	604b      	str	r3, [r1, #4]
 8028714:	4630      	mov	r0, r6
 8028716:	f000 f82f 	bl	8028778 <__malloc_unlock>
 802871a:	f104 000b 	add.w	r0, r4, #11
 802871e:	1d23      	adds	r3, r4, #4
 8028720:	f020 0007 	bic.w	r0, r0, #7
 8028724:	1ac2      	subs	r2, r0, r3
 8028726:	bf1c      	itt	ne
 8028728:	1a1b      	subne	r3, r3, r0
 802872a:	50a3      	strne	r3, [r4, r2]
 802872c:	e7af      	b.n	802868e <_malloc_r+0x22>
 802872e:	6862      	ldr	r2, [r4, #4]
 8028730:	42a3      	cmp	r3, r4
 8028732:	bf0c      	ite	eq
 8028734:	f8c8 2000 	streq.w	r2, [r8]
 8028738:	605a      	strne	r2, [r3, #4]
 802873a:	e7eb      	b.n	8028714 <_malloc_r+0xa8>
 802873c:	4623      	mov	r3, r4
 802873e:	6864      	ldr	r4, [r4, #4]
 8028740:	e7ae      	b.n	80286a0 <_malloc_r+0x34>
 8028742:	463c      	mov	r4, r7
 8028744:	687f      	ldr	r7, [r7, #4]
 8028746:	e7b6      	b.n	80286b6 <_malloc_r+0x4a>
 8028748:	461a      	mov	r2, r3
 802874a:	685b      	ldr	r3, [r3, #4]
 802874c:	42a3      	cmp	r3, r4
 802874e:	d1fb      	bne.n	8028748 <_malloc_r+0xdc>
 8028750:	2300      	movs	r3, #0
 8028752:	6053      	str	r3, [r2, #4]
 8028754:	e7de      	b.n	8028714 <_malloc_r+0xa8>
 8028756:	230c      	movs	r3, #12
 8028758:	6033      	str	r3, [r6, #0]
 802875a:	4630      	mov	r0, r6
 802875c:	f000 f80c 	bl	8028778 <__malloc_unlock>
 8028760:	e794      	b.n	802868c <_malloc_r+0x20>
 8028762:	6005      	str	r5, [r0, #0]
 8028764:	e7d6      	b.n	8028714 <_malloc_r+0xa8>
 8028766:	bf00      	nop
 8028768:	24028f28 	.word	0x24028f28

0802876c <__malloc_lock>:
 802876c:	4801      	ldr	r0, [pc, #4]	@ (8028774 <__malloc_lock+0x8>)
 802876e:	f000 baa2 	b.w	8028cb6 <__retarget_lock_acquire_recursive>
 8028772:	bf00      	nop
 8028774:	2402906c 	.word	0x2402906c

08028778 <__malloc_unlock>:
 8028778:	4801      	ldr	r0, [pc, #4]	@ (8028780 <__malloc_unlock+0x8>)
 802877a:	f000 ba9d 	b.w	8028cb8 <__retarget_lock_release_recursive>
 802877e:	bf00      	nop
 8028780:	2402906c 	.word	0x2402906c

08028784 <__cxa_atexit>:
 8028784:	b510      	push	{r4, lr}
 8028786:	4604      	mov	r4, r0
 8028788:	4804      	ldr	r0, [pc, #16]	@ (802879c <__cxa_atexit+0x18>)
 802878a:	4613      	mov	r3, r2
 802878c:	b120      	cbz	r0, 8028798 <__cxa_atexit+0x14>
 802878e:	460a      	mov	r2, r1
 8028790:	2002      	movs	r0, #2
 8028792:	4621      	mov	r1, r4
 8028794:	f000 faa0 	bl	8028cd8 <__register_exitproc>
 8028798:	bd10      	pop	{r4, pc}
 802879a:	bf00      	nop
 802879c:	08028cd9 	.word	0x08028cd9

080287a0 <std>:
 80287a0:	2300      	movs	r3, #0
 80287a2:	b510      	push	{r4, lr}
 80287a4:	4604      	mov	r4, r0
 80287a6:	e9c0 3300 	strd	r3, r3, [r0]
 80287aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80287ae:	6083      	str	r3, [r0, #8]
 80287b0:	8181      	strh	r1, [r0, #12]
 80287b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80287b4:	81c2      	strh	r2, [r0, #14]
 80287b6:	6183      	str	r3, [r0, #24]
 80287b8:	4619      	mov	r1, r3
 80287ba:	2208      	movs	r2, #8
 80287bc:	305c      	adds	r0, #92	@ 0x5c
 80287be:	f000 f99b 	bl	8028af8 <memset>
 80287c2:	4b0d      	ldr	r3, [pc, #52]	@ (80287f8 <std+0x58>)
 80287c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80287c6:	4b0d      	ldr	r3, [pc, #52]	@ (80287fc <std+0x5c>)
 80287c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80287ca:	4b0d      	ldr	r3, [pc, #52]	@ (8028800 <std+0x60>)
 80287cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80287ce:	4b0d      	ldr	r3, [pc, #52]	@ (8028804 <std+0x64>)
 80287d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80287d2:	4b0d      	ldr	r3, [pc, #52]	@ (8028808 <std+0x68>)
 80287d4:	6224      	str	r4, [r4, #32]
 80287d6:	429c      	cmp	r4, r3
 80287d8:	d006      	beq.n	80287e8 <std+0x48>
 80287da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80287de:	4294      	cmp	r4, r2
 80287e0:	d002      	beq.n	80287e8 <std+0x48>
 80287e2:	33d0      	adds	r3, #208	@ 0xd0
 80287e4:	429c      	cmp	r4, r3
 80287e6:	d105      	bne.n	80287f4 <std+0x54>
 80287e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80287ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80287f0:	f000 ba60 	b.w	8028cb4 <__retarget_lock_init_recursive>
 80287f4:	bd10      	pop	{r4, pc}
 80287f6:	bf00      	nop
 80287f8:	08028949 	.word	0x08028949
 80287fc:	0802896b 	.word	0x0802896b
 8028800:	080289a3 	.word	0x080289a3
 8028804:	080289c7 	.word	0x080289c7
 8028808:	24028f2c 	.word	0x24028f2c

0802880c <stdio_exit_handler>:
 802880c:	4a02      	ldr	r2, [pc, #8]	@ (8028818 <stdio_exit_handler+0xc>)
 802880e:	4903      	ldr	r1, [pc, #12]	@ (802881c <stdio_exit_handler+0x10>)
 8028810:	4803      	ldr	r0, [pc, #12]	@ (8028820 <stdio_exit_handler+0x14>)
 8028812:	f000 b87b 	b.w	802890c <_fwalk_sglue>
 8028816:	bf00      	nop
 8028818:	240000dc 	.word	0x240000dc
 802881c:	080294cd 	.word	0x080294cd
 8028820:	240000ec 	.word	0x240000ec

08028824 <cleanup_stdio>:
 8028824:	6841      	ldr	r1, [r0, #4]
 8028826:	4b0c      	ldr	r3, [pc, #48]	@ (8028858 <cleanup_stdio+0x34>)
 8028828:	4299      	cmp	r1, r3
 802882a:	b510      	push	{r4, lr}
 802882c:	4604      	mov	r4, r0
 802882e:	d001      	beq.n	8028834 <cleanup_stdio+0x10>
 8028830:	f000 fe4c 	bl	80294cc <_fflush_r>
 8028834:	68a1      	ldr	r1, [r4, #8]
 8028836:	4b09      	ldr	r3, [pc, #36]	@ (802885c <cleanup_stdio+0x38>)
 8028838:	4299      	cmp	r1, r3
 802883a:	d002      	beq.n	8028842 <cleanup_stdio+0x1e>
 802883c:	4620      	mov	r0, r4
 802883e:	f000 fe45 	bl	80294cc <_fflush_r>
 8028842:	68e1      	ldr	r1, [r4, #12]
 8028844:	4b06      	ldr	r3, [pc, #24]	@ (8028860 <cleanup_stdio+0x3c>)
 8028846:	4299      	cmp	r1, r3
 8028848:	d004      	beq.n	8028854 <cleanup_stdio+0x30>
 802884a:	4620      	mov	r0, r4
 802884c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028850:	f000 be3c 	b.w	80294cc <_fflush_r>
 8028854:	bd10      	pop	{r4, pc}
 8028856:	bf00      	nop
 8028858:	24028f2c 	.word	0x24028f2c
 802885c:	24028f94 	.word	0x24028f94
 8028860:	24028ffc 	.word	0x24028ffc

08028864 <global_stdio_init.part.0>:
 8028864:	b510      	push	{r4, lr}
 8028866:	4b0b      	ldr	r3, [pc, #44]	@ (8028894 <global_stdio_init.part.0+0x30>)
 8028868:	4c0b      	ldr	r4, [pc, #44]	@ (8028898 <global_stdio_init.part.0+0x34>)
 802886a:	4a0c      	ldr	r2, [pc, #48]	@ (802889c <global_stdio_init.part.0+0x38>)
 802886c:	601a      	str	r2, [r3, #0]
 802886e:	4620      	mov	r0, r4
 8028870:	2200      	movs	r2, #0
 8028872:	2104      	movs	r1, #4
 8028874:	f7ff ff94 	bl	80287a0 <std>
 8028878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802887c:	2201      	movs	r2, #1
 802887e:	2109      	movs	r1, #9
 8028880:	f7ff ff8e 	bl	80287a0 <std>
 8028884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8028888:	2202      	movs	r2, #2
 802888a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802888e:	2112      	movs	r1, #18
 8028890:	f7ff bf86 	b.w	80287a0 <std>
 8028894:	24029064 	.word	0x24029064
 8028898:	24028f2c 	.word	0x24028f2c
 802889c:	0802880d 	.word	0x0802880d

080288a0 <__sfp_lock_acquire>:
 80288a0:	4801      	ldr	r0, [pc, #4]	@ (80288a8 <__sfp_lock_acquire+0x8>)
 80288a2:	f000 ba08 	b.w	8028cb6 <__retarget_lock_acquire_recursive>
 80288a6:	bf00      	nop
 80288a8:	2402906e 	.word	0x2402906e

080288ac <__sfp_lock_release>:
 80288ac:	4801      	ldr	r0, [pc, #4]	@ (80288b4 <__sfp_lock_release+0x8>)
 80288ae:	f000 ba03 	b.w	8028cb8 <__retarget_lock_release_recursive>
 80288b2:	bf00      	nop
 80288b4:	2402906e 	.word	0x2402906e

080288b8 <__sinit>:
 80288b8:	b510      	push	{r4, lr}
 80288ba:	4604      	mov	r4, r0
 80288bc:	f7ff fff0 	bl	80288a0 <__sfp_lock_acquire>
 80288c0:	6a23      	ldr	r3, [r4, #32]
 80288c2:	b11b      	cbz	r3, 80288cc <__sinit+0x14>
 80288c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80288c8:	f7ff bff0 	b.w	80288ac <__sfp_lock_release>
 80288cc:	4b04      	ldr	r3, [pc, #16]	@ (80288e0 <__sinit+0x28>)
 80288ce:	6223      	str	r3, [r4, #32]
 80288d0:	4b04      	ldr	r3, [pc, #16]	@ (80288e4 <__sinit+0x2c>)
 80288d2:	681b      	ldr	r3, [r3, #0]
 80288d4:	2b00      	cmp	r3, #0
 80288d6:	d1f5      	bne.n	80288c4 <__sinit+0xc>
 80288d8:	f7ff ffc4 	bl	8028864 <global_stdio_init.part.0>
 80288dc:	e7f2      	b.n	80288c4 <__sinit+0xc>
 80288de:	bf00      	nop
 80288e0:	08028825 	.word	0x08028825
 80288e4:	24029064 	.word	0x24029064

080288e8 <fiprintf>:
 80288e8:	b40e      	push	{r1, r2, r3}
 80288ea:	b503      	push	{r0, r1, lr}
 80288ec:	4601      	mov	r1, r0
 80288ee:	ab03      	add	r3, sp, #12
 80288f0:	4805      	ldr	r0, [pc, #20]	@ (8028908 <fiprintf+0x20>)
 80288f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80288f6:	6800      	ldr	r0, [r0, #0]
 80288f8:	9301      	str	r3, [sp, #4]
 80288fa:	f000 fabd 	bl	8028e78 <_vfiprintf_r>
 80288fe:	b002      	add	sp, #8
 8028900:	f85d eb04 	ldr.w	lr, [sp], #4
 8028904:	b003      	add	sp, #12
 8028906:	4770      	bx	lr
 8028908:	240000e8 	.word	0x240000e8

0802890c <_fwalk_sglue>:
 802890c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028910:	4607      	mov	r7, r0
 8028912:	4688      	mov	r8, r1
 8028914:	4614      	mov	r4, r2
 8028916:	2600      	movs	r6, #0
 8028918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802891c:	f1b9 0901 	subs.w	r9, r9, #1
 8028920:	d505      	bpl.n	802892e <_fwalk_sglue+0x22>
 8028922:	6824      	ldr	r4, [r4, #0]
 8028924:	2c00      	cmp	r4, #0
 8028926:	d1f7      	bne.n	8028918 <_fwalk_sglue+0xc>
 8028928:	4630      	mov	r0, r6
 802892a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802892e:	89ab      	ldrh	r3, [r5, #12]
 8028930:	2b01      	cmp	r3, #1
 8028932:	d907      	bls.n	8028944 <_fwalk_sglue+0x38>
 8028934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028938:	3301      	adds	r3, #1
 802893a:	d003      	beq.n	8028944 <_fwalk_sglue+0x38>
 802893c:	4629      	mov	r1, r5
 802893e:	4638      	mov	r0, r7
 8028940:	47c0      	blx	r8
 8028942:	4306      	orrs	r6, r0
 8028944:	3568      	adds	r5, #104	@ 0x68
 8028946:	e7e9      	b.n	802891c <_fwalk_sglue+0x10>

08028948 <__sread>:
 8028948:	b510      	push	{r4, lr}
 802894a:	460c      	mov	r4, r1
 802894c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028950:	f000 f93e 	bl	8028bd0 <_read_r>
 8028954:	2800      	cmp	r0, #0
 8028956:	bfab      	itete	ge
 8028958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802895a:	89a3      	ldrhlt	r3, [r4, #12]
 802895c:	181b      	addge	r3, r3, r0
 802895e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8028962:	bfac      	ite	ge
 8028964:	6563      	strge	r3, [r4, #84]	@ 0x54
 8028966:	81a3      	strhlt	r3, [r4, #12]
 8028968:	bd10      	pop	{r4, pc}

0802896a <__swrite>:
 802896a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802896e:	461f      	mov	r7, r3
 8028970:	898b      	ldrh	r3, [r1, #12]
 8028972:	05db      	lsls	r3, r3, #23
 8028974:	4605      	mov	r5, r0
 8028976:	460c      	mov	r4, r1
 8028978:	4616      	mov	r6, r2
 802897a:	d505      	bpl.n	8028988 <__swrite+0x1e>
 802897c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028980:	2302      	movs	r3, #2
 8028982:	2200      	movs	r2, #0
 8028984:	f000 f912 	bl	8028bac <_lseek_r>
 8028988:	89a3      	ldrh	r3, [r4, #12]
 802898a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802898e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8028992:	81a3      	strh	r3, [r4, #12]
 8028994:	4632      	mov	r2, r6
 8028996:	463b      	mov	r3, r7
 8028998:	4628      	mov	r0, r5
 802899a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802899e:	f000 b94d 	b.w	8028c3c <_write_r>

080289a2 <__sseek>:
 80289a2:	b510      	push	{r4, lr}
 80289a4:	460c      	mov	r4, r1
 80289a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80289aa:	f000 f8ff 	bl	8028bac <_lseek_r>
 80289ae:	1c43      	adds	r3, r0, #1
 80289b0:	89a3      	ldrh	r3, [r4, #12]
 80289b2:	bf15      	itete	ne
 80289b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80289b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80289ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80289be:	81a3      	strheq	r3, [r4, #12]
 80289c0:	bf18      	it	ne
 80289c2:	81a3      	strhne	r3, [r4, #12]
 80289c4:	bd10      	pop	{r4, pc}

080289c6 <__sclose>:
 80289c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80289ca:	f000 b8df 	b.w	8028b8c <_close_r>

080289ce <__swbuf_r>:
 80289ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80289d0:	460e      	mov	r6, r1
 80289d2:	4614      	mov	r4, r2
 80289d4:	4605      	mov	r5, r0
 80289d6:	b118      	cbz	r0, 80289e0 <__swbuf_r+0x12>
 80289d8:	6a03      	ldr	r3, [r0, #32]
 80289da:	b90b      	cbnz	r3, 80289e0 <__swbuf_r+0x12>
 80289dc:	f7ff ff6c 	bl	80288b8 <__sinit>
 80289e0:	69a3      	ldr	r3, [r4, #24]
 80289e2:	60a3      	str	r3, [r4, #8]
 80289e4:	89a3      	ldrh	r3, [r4, #12]
 80289e6:	071a      	lsls	r2, r3, #28
 80289e8:	d501      	bpl.n	80289ee <__swbuf_r+0x20>
 80289ea:	6923      	ldr	r3, [r4, #16]
 80289ec:	b943      	cbnz	r3, 8028a00 <__swbuf_r+0x32>
 80289ee:	4621      	mov	r1, r4
 80289f0:	4628      	mov	r0, r5
 80289f2:	f000 f82b 	bl	8028a4c <__swsetup_r>
 80289f6:	b118      	cbz	r0, 8028a00 <__swbuf_r+0x32>
 80289f8:	f04f 37ff 	mov.w	r7, #4294967295
 80289fc:	4638      	mov	r0, r7
 80289fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028a00:	6823      	ldr	r3, [r4, #0]
 8028a02:	6922      	ldr	r2, [r4, #16]
 8028a04:	1a98      	subs	r0, r3, r2
 8028a06:	6963      	ldr	r3, [r4, #20]
 8028a08:	b2f6      	uxtb	r6, r6
 8028a0a:	4283      	cmp	r3, r0
 8028a0c:	4637      	mov	r7, r6
 8028a0e:	dc05      	bgt.n	8028a1c <__swbuf_r+0x4e>
 8028a10:	4621      	mov	r1, r4
 8028a12:	4628      	mov	r0, r5
 8028a14:	f000 fd5a 	bl	80294cc <_fflush_r>
 8028a18:	2800      	cmp	r0, #0
 8028a1a:	d1ed      	bne.n	80289f8 <__swbuf_r+0x2a>
 8028a1c:	68a3      	ldr	r3, [r4, #8]
 8028a1e:	3b01      	subs	r3, #1
 8028a20:	60a3      	str	r3, [r4, #8]
 8028a22:	6823      	ldr	r3, [r4, #0]
 8028a24:	1c5a      	adds	r2, r3, #1
 8028a26:	6022      	str	r2, [r4, #0]
 8028a28:	701e      	strb	r6, [r3, #0]
 8028a2a:	6962      	ldr	r2, [r4, #20]
 8028a2c:	1c43      	adds	r3, r0, #1
 8028a2e:	429a      	cmp	r2, r3
 8028a30:	d004      	beq.n	8028a3c <__swbuf_r+0x6e>
 8028a32:	89a3      	ldrh	r3, [r4, #12]
 8028a34:	07db      	lsls	r3, r3, #31
 8028a36:	d5e1      	bpl.n	80289fc <__swbuf_r+0x2e>
 8028a38:	2e0a      	cmp	r6, #10
 8028a3a:	d1df      	bne.n	80289fc <__swbuf_r+0x2e>
 8028a3c:	4621      	mov	r1, r4
 8028a3e:	4628      	mov	r0, r5
 8028a40:	f000 fd44 	bl	80294cc <_fflush_r>
 8028a44:	2800      	cmp	r0, #0
 8028a46:	d0d9      	beq.n	80289fc <__swbuf_r+0x2e>
 8028a48:	e7d6      	b.n	80289f8 <__swbuf_r+0x2a>
	...

08028a4c <__swsetup_r>:
 8028a4c:	b538      	push	{r3, r4, r5, lr}
 8028a4e:	4b29      	ldr	r3, [pc, #164]	@ (8028af4 <__swsetup_r+0xa8>)
 8028a50:	4605      	mov	r5, r0
 8028a52:	6818      	ldr	r0, [r3, #0]
 8028a54:	460c      	mov	r4, r1
 8028a56:	b118      	cbz	r0, 8028a60 <__swsetup_r+0x14>
 8028a58:	6a03      	ldr	r3, [r0, #32]
 8028a5a:	b90b      	cbnz	r3, 8028a60 <__swsetup_r+0x14>
 8028a5c:	f7ff ff2c 	bl	80288b8 <__sinit>
 8028a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028a64:	0719      	lsls	r1, r3, #28
 8028a66:	d422      	bmi.n	8028aae <__swsetup_r+0x62>
 8028a68:	06da      	lsls	r2, r3, #27
 8028a6a:	d407      	bmi.n	8028a7c <__swsetup_r+0x30>
 8028a6c:	2209      	movs	r2, #9
 8028a6e:	602a      	str	r2, [r5, #0]
 8028a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028a74:	81a3      	strh	r3, [r4, #12]
 8028a76:	f04f 30ff 	mov.w	r0, #4294967295
 8028a7a:	e033      	b.n	8028ae4 <__swsetup_r+0x98>
 8028a7c:	0758      	lsls	r0, r3, #29
 8028a7e:	d512      	bpl.n	8028aa6 <__swsetup_r+0x5a>
 8028a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028a82:	b141      	cbz	r1, 8028a96 <__swsetup_r+0x4a>
 8028a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028a88:	4299      	cmp	r1, r3
 8028a8a:	d002      	beq.n	8028a92 <__swsetup_r+0x46>
 8028a8c:	4628      	mov	r0, r5
 8028a8e:	f000 f97f 	bl	8028d90 <_free_r>
 8028a92:	2300      	movs	r3, #0
 8028a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8028a96:	89a3      	ldrh	r3, [r4, #12]
 8028a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8028a9c:	81a3      	strh	r3, [r4, #12]
 8028a9e:	2300      	movs	r3, #0
 8028aa0:	6063      	str	r3, [r4, #4]
 8028aa2:	6923      	ldr	r3, [r4, #16]
 8028aa4:	6023      	str	r3, [r4, #0]
 8028aa6:	89a3      	ldrh	r3, [r4, #12]
 8028aa8:	f043 0308 	orr.w	r3, r3, #8
 8028aac:	81a3      	strh	r3, [r4, #12]
 8028aae:	6923      	ldr	r3, [r4, #16]
 8028ab0:	b94b      	cbnz	r3, 8028ac6 <__swsetup_r+0x7a>
 8028ab2:	89a3      	ldrh	r3, [r4, #12]
 8028ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8028ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028abc:	d003      	beq.n	8028ac6 <__swsetup_r+0x7a>
 8028abe:	4621      	mov	r1, r4
 8028ac0:	4628      	mov	r0, r5
 8028ac2:	f000 fd51 	bl	8029568 <__smakebuf_r>
 8028ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028aca:	f013 0201 	ands.w	r2, r3, #1
 8028ace:	d00a      	beq.n	8028ae6 <__swsetup_r+0x9a>
 8028ad0:	2200      	movs	r2, #0
 8028ad2:	60a2      	str	r2, [r4, #8]
 8028ad4:	6962      	ldr	r2, [r4, #20]
 8028ad6:	4252      	negs	r2, r2
 8028ad8:	61a2      	str	r2, [r4, #24]
 8028ada:	6922      	ldr	r2, [r4, #16]
 8028adc:	b942      	cbnz	r2, 8028af0 <__swsetup_r+0xa4>
 8028ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8028ae2:	d1c5      	bne.n	8028a70 <__swsetup_r+0x24>
 8028ae4:	bd38      	pop	{r3, r4, r5, pc}
 8028ae6:	0799      	lsls	r1, r3, #30
 8028ae8:	bf58      	it	pl
 8028aea:	6962      	ldrpl	r2, [r4, #20]
 8028aec:	60a2      	str	r2, [r4, #8]
 8028aee:	e7f4      	b.n	8028ada <__swsetup_r+0x8e>
 8028af0:	2000      	movs	r0, #0
 8028af2:	e7f7      	b.n	8028ae4 <__swsetup_r+0x98>
 8028af4:	240000e8 	.word	0x240000e8

08028af8 <memset>:
 8028af8:	4402      	add	r2, r0
 8028afa:	4603      	mov	r3, r0
 8028afc:	4293      	cmp	r3, r2
 8028afe:	d100      	bne.n	8028b02 <memset+0xa>
 8028b00:	4770      	bx	lr
 8028b02:	f803 1b01 	strb.w	r1, [r3], #1
 8028b06:	e7f9      	b.n	8028afc <memset+0x4>

08028b08 <strncmp>:
 8028b08:	b510      	push	{r4, lr}
 8028b0a:	b16a      	cbz	r2, 8028b28 <strncmp+0x20>
 8028b0c:	3901      	subs	r1, #1
 8028b0e:	1884      	adds	r4, r0, r2
 8028b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028b14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8028b18:	429a      	cmp	r2, r3
 8028b1a:	d103      	bne.n	8028b24 <strncmp+0x1c>
 8028b1c:	42a0      	cmp	r0, r4
 8028b1e:	d001      	beq.n	8028b24 <strncmp+0x1c>
 8028b20:	2a00      	cmp	r2, #0
 8028b22:	d1f5      	bne.n	8028b10 <strncmp+0x8>
 8028b24:	1ad0      	subs	r0, r2, r3
 8028b26:	bd10      	pop	{r4, pc}
 8028b28:	4610      	mov	r0, r2
 8028b2a:	e7fc      	b.n	8028b26 <strncmp+0x1e>

08028b2c <_raise_r>:
 8028b2c:	291f      	cmp	r1, #31
 8028b2e:	b538      	push	{r3, r4, r5, lr}
 8028b30:	4605      	mov	r5, r0
 8028b32:	460c      	mov	r4, r1
 8028b34:	d904      	bls.n	8028b40 <_raise_r+0x14>
 8028b36:	2316      	movs	r3, #22
 8028b38:	6003      	str	r3, [r0, #0]
 8028b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8028b3e:	bd38      	pop	{r3, r4, r5, pc}
 8028b40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028b42:	b112      	cbz	r2, 8028b4a <_raise_r+0x1e>
 8028b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028b48:	b94b      	cbnz	r3, 8028b5e <_raise_r+0x32>
 8028b4a:	4628      	mov	r0, r5
 8028b4c:	f000 f864 	bl	8028c18 <_getpid_r>
 8028b50:	4622      	mov	r2, r4
 8028b52:	4601      	mov	r1, r0
 8028b54:	4628      	mov	r0, r5
 8028b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b5a:	f000 b84b 	b.w	8028bf4 <_kill_r>
 8028b5e:	2b01      	cmp	r3, #1
 8028b60:	d00a      	beq.n	8028b78 <_raise_r+0x4c>
 8028b62:	1c59      	adds	r1, r3, #1
 8028b64:	d103      	bne.n	8028b6e <_raise_r+0x42>
 8028b66:	2316      	movs	r3, #22
 8028b68:	6003      	str	r3, [r0, #0]
 8028b6a:	2001      	movs	r0, #1
 8028b6c:	e7e7      	b.n	8028b3e <_raise_r+0x12>
 8028b6e:	2100      	movs	r1, #0
 8028b70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8028b74:	4620      	mov	r0, r4
 8028b76:	4798      	blx	r3
 8028b78:	2000      	movs	r0, #0
 8028b7a:	e7e0      	b.n	8028b3e <_raise_r+0x12>

08028b7c <raise>:
 8028b7c:	4b02      	ldr	r3, [pc, #8]	@ (8028b88 <raise+0xc>)
 8028b7e:	4601      	mov	r1, r0
 8028b80:	6818      	ldr	r0, [r3, #0]
 8028b82:	f7ff bfd3 	b.w	8028b2c <_raise_r>
 8028b86:	bf00      	nop
 8028b88:	240000e8 	.word	0x240000e8

08028b8c <_close_r>:
 8028b8c:	b538      	push	{r3, r4, r5, lr}
 8028b8e:	4d06      	ldr	r5, [pc, #24]	@ (8028ba8 <_close_r+0x1c>)
 8028b90:	2300      	movs	r3, #0
 8028b92:	4604      	mov	r4, r0
 8028b94:	4608      	mov	r0, r1
 8028b96:	602b      	str	r3, [r5, #0]
 8028b98:	f7d8 fd90 	bl	80016bc <_close>
 8028b9c:	1c43      	adds	r3, r0, #1
 8028b9e:	d102      	bne.n	8028ba6 <_close_r+0x1a>
 8028ba0:	682b      	ldr	r3, [r5, #0]
 8028ba2:	b103      	cbz	r3, 8028ba6 <_close_r+0x1a>
 8028ba4:	6023      	str	r3, [r4, #0]
 8028ba6:	bd38      	pop	{r3, r4, r5, pc}
 8028ba8:	24029068 	.word	0x24029068

08028bac <_lseek_r>:
 8028bac:	b538      	push	{r3, r4, r5, lr}
 8028bae:	4d07      	ldr	r5, [pc, #28]	@ (8028bcc <_lseek_r+0x20>)
 8028bb0:	4604      	mov	r4, r0
 8028bb2:	4608      	mov	r0, r1
 8028bb4:	4611      	mov	r1, r2
 8028bb6:	2200      	movs	r2, #0
 8028bb8:	602a      	str	r2, [r5, #0]
 8028bba:	461a      	mov	r2, r3
 8028bbc:	f7d8 fd88 	bl	80016d0 <_lseek>
 8028bc0:	1c43      	adds	r3, r0, #1
 8028bc2:	d102      	bne.n	8028bca <_lseek_r+0x1e>
 8028bc4:	682b      	ldr	r3, [r5, #0]
 8028bc6:	b103      	cbz	r3, 8028bca <_lseek_r+0x1e>
 8028bc8:	6023      	str	r3, [r4, #0]
 8028bca:	bd38      	pop	{r3, r4, r5, pc}
 8028bcc:	24029068 	.word	0x24029068

08028bd0 <_read_r>:
 8028bd0:	b538      	push	{r3, r4, r5, lr}
 8028bd2:	4d07      	ldr	r5, [pc, #28]	@ (8028bf0 <_read_r+0x20>)
 8028bd4:	4604      	mov	r4, r0
 8028bd6:	4608      	mov	r0, r1
 8028bd8:	4611      	mov	r1, r2
 8028bda:	2200      	movs	r2, #0
 8028bdc:	602a      	str	r2, [r5, #0]
 8028bde:	461a      	mov	r2, r3
 8028be0:	f7d8 fd50 	bl	8001684 <_read>
 8028be4:	1c43      	adds	r3, r0, #1
 8028be6:	d102      	bne.n	8028bee <_read_r+0x1e>
 8028be8:	682b      	ldr	r3, [r5, #0]
 8028bea:	b103      	cbz	r3, 8028bee <_read_r+0x1e>
 8028bec:	6023      	str	r3, [r4, #0]
 8028bee:	bd38      	pop	{r3, r4, r5, pc}
 8028bf0:	24029068 	.word	0x24029068

08028bf4 <_kill_r>:
 8028bf4:	b538      	push	{r3, r4, r5, lr}
 8028bf6:	4d07      	ldr	r5, [pc, #28]	@ (8028c14 <_kill_r+0x20>)
 8028bf8:	2300      	movs	r3, #0
 8028bfa:	4604      	mov	r4, r0
 8028bfc:	4608      	mov	r0, r1
 8028bfe:	4611      	mov	r1, r2
 8028c00:	602b      	str	r3, [r5, #0]
 8028c02:	f7d8 fd31 	bl	8001668 <_kill>
 8028c06:	1c43      	adds	r3, r0, #1
 8028c08:	d102      	bne.n	8028c10 <_kill_r+0x1c>
 8028c0a:	682b      	ldr	r3, [r5, #0]
 8028c0c:	b103      	cbz	r3, 8028c10 <_kill_r+0x1c>
 8028c0e:	6023      	str	r3, [r4, #0]
 8028c10:	bd38      	pop	{r3, r4, r5, pc}
 8028c12:	bf00      	nop
 8028c14:	24029068 	.word	0x24029068

08028c18 <_getpid_r>:
 8028c18:	f7d8 bd24 	b.w	8001664 <_getpid>

08028c1c <_sbrk_r>:
 8028c1c:	b538      	push	{r3, r4, r5, lr}
 8028c1e:	4d06      	ldr	r5, [pc, #24]	@ (8028c38 <_sbrk_r+0x1c>)
 8028c20:	2300      	movs	r3, #0
 8028c22:	4604      	mov	r4, r0
 8028c24:	4608      	mov	r0, r1
 8028c26:	602b      	str	r3, [r5, #0]
 8028c28:	f7d8 fd54 	bl	80016d4 <_sbrk>
 8028c2c:	1c43      	adds	r3, r0, #1
 8028c2e:	d102      	bne.n	8028c36 <_sbrk_r+0x1a>
 8028c30:	682b      	ldr	r3, [r5, #0]
 8028c32:	b103      	cbz	r3, 8028c36 <_sbrk_r+0x1a>
 8028c34:	6023      	str	r3, [r4, #0]
 8028c36:	bd38      	pop	{r3, r4, r5, pc}
 8028c38:	24029068 	.word	0x24029068

08028c3c <_write_r>:
 8028c3c:	b538      	push	{r3, r4, r5, lr}
 8028c3e:	4d07      	ldr	r5, [pc, #28]	@ (8028c5c <_write_r+0x20>)
 8028c40:	4604      	mov	r4, r0
 8028c42:	4608      	mov	r0, r1
 8028c44:	4611      	mov	r1, r2
 8028c46:	2200      	movs	r2, #0
 8028c48:	602a      	str	r2, [r5, #0]
 8028c4a:	461a      	mov	r2, r3
 8028c4c:	f7d8 fd28 	bl	80016a0 <_write>
 8028c50:	1c43      	adds	r3, r0, #1
 8028c52:	d102      	bne.n	8028c5a <_write_r+0x1e>
 8028c54:	682b      	ldr	r3, [r5, #0]
 8028c56:	b103      	cbz	r3, 8028c5a <_write_r+0x1e>
 8028c58:	6023      	str	r3, [r4, #0]
 8028c5a:	bd38      	pop	{r3, r4, r5, pc}
 8028c5c:	24029068 	.word	0x24029068

08028c60 <__errno>:
 8028c60:	4b01      	ldr	r3, [pc, #4]	@ (8028c68 <__errno+0x8>)
 8028c62:	6818      	ldr	r0, [r3, #0]
 8028c64:	4770      	bx	lr
 8028c66:	bf00      	nop
 8028c68:	240000e8 	.word	0x240000e8

08028c6c <__libc_init_array>:
 8028c6c:	b570      	push	{r4, r5, r6, lr}
 8028c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8028ca4 <__libc_init_array+0x38>)
 8028c70:	4c0d      	ldr	r4, [pc, #52]	@ (8028ca8 <__libc_init_array+0x3c>)
 8028c72:	1b64      	subs	r4, r4, r5
 8028c74:	10a4      	asrs	r4, r4, #2
 8028c76:	2600      	movs	r6, #0
 8028c78:	42a6      	cmp	r6, r4
 8028c7a:	d109      	bne.n	8028c90 <__libc_init_array+0x24>
 8028c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8028cac <__libc_init_array+0x40>)
 8028c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8028cb0 <__libc_init_array+0x44>)
 8028c80:	f000 fcd0 	bl	8029624 <_init>
 8028c84:	1b64      	subs	r4, r4, r5
 8028c86:	10a4      	asrs	r4, r4, #2
 8028c88:	2600      	movs	r6, #0
 8028c8a:	42a6      	cmp	r6, r4
 8028c8c:	d105      	bne.n	8028c9a <__libc_init_array+0x2e>
 8028c8e:	bd70      	pop	{r4, r5, r6, pc}
 8028c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8028c94:	4798      	blx	r3
 8028c96:	3601      	adds	r6, #1
 8028c98:	e7ee      	b.n	8028c78 <__libc_init_array+0xc>
 8028c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8028c9e:	4798      	blx	r3
 8028ca0:	3601      	adds	r6, #1
 8028ca2:	e7f2      	b.n	8028c8a <__libc_init_array+0x1e>
 8028ca4:	08047470 	.word	0x08047470
 8028ca8:	08047470 	.word	0x08047470
 8028cac:	08047470 	.word	0x08047470
 8028cb0:	0804748c 	.word	0x0804748c

08028cb4 <__retarget_lock_init_recursive>:
 8028cb4:	4770      	bx	lr

08028cb6 <__retarget_lock_acquire_recursive>:
 8028cb6:	4770      	bx	lr

08028cb8 <__retarget_lock_release_recursive>:
 8028cb8:	4770      	bx	lr

08028cba <memcpy>:
 8028cba:	440a      	add	r2, r1
 8028cbc:	4291      	cmp	r1, r2
 8028cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8028cc2:	d100      	bne.n	8028cc6 <memcpy+0xc>
 8028cc4:	4770      	bx	lr
 8028cc6:	b510      	push	{r4, lr}
 8028cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028cd0:	4291      	cmp	r1, r2
 8028cd2:	d1f9      	bne.n	8028cc8 <memcpy+0xe>
 8028cd4:	bd10      	pop	{r4, pc}
	...

08028cd8 <__register_exitproc>:
 8028cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028cdc:	4d27      	ldr	r5, [pc, #156]	@ (8028d7c <__register_exitproc+0xa4>)
 8028cde:	4607      	mov	r7, r0
 8028ce0:	6828      	ldr	r0, [r5, #0]
 8028ce2:	4691      	mov	r9, r2
 8028ce4:	460e      	mov	r6, r1
 8028ce6:	4698      	mov	r8, r3
 8028ce8:	f7ff ffe5 	bl	8028cb6 <__retarget_lock_acquire_recursive>
 8028cec:	4a24      	ldr	r2, [pc, #144]	@ (8028d80 <__register_exitproc+0xa8>)
 8028cee:	6814      	ldr	r4, [r2, #0]
 8028cf0:	b93c      	cbnz	r4, 8028d02 <__register_exitproc+0x2a>
 8028cf2:	4b24      	ldr	r3, [pc, #144]	@ (8028d84 <__register_exitproc+0xac>)
 8028cf4:	6013      	str	r3, [r2, #0]
 8028cf6:	4a24      	ldr	r2, [pc, #144]	@ (8028d88 <__register_exitproc+0xb0>)
 8028cf8:	b112      	cbz	r2, 8028d00 <__register_exitproc+0x28>
 8028cfa:	6812      	ldr	r2, [r2, #0]
 8028cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8028d00:	4c20      	ldr	r4, [pc, #128]	@ (8028d84 <__register_exitproc+0xac>)
 8028d02:	6863      	ldr	r3, [r4, #4]
 8028d04:	2b1f      	cmp	r3, #31
 8028d06:	dd06      	ble.n	8028d16 <__register_exitproc+0x3e>
 8028d08:	6828      	ldr	r0, [r5, #0]
 8028d0a:	f7ff ffd5 	bl	8028cb8 <__retarget_lock_release_recursive>
 8028d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8028d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028d16:	b32f      	cbz	r7, 8028d64 <__register_exitproc+0x8c>
 8028d18:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8028d1c:	b968      	cbnz	r0, 8028d3a <__register_exitproc+0x62>
 8028d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8028d8c <__register_exitproc+0xb4>)
 8028d20:	2b00      	cmp	r3, #0
 8028d22:	d0f1      	beq.n	8028d08 <__register_exitproc+0x30>
 8028d24:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8028d28:	f7ff fc6e 	bl	8028608 <malloc>
 8028d2c:	2800      	cmp	r0, #0
 8028d2e:	d0eb      	beq.n	8028d08 <__register_exitproc+0x30>
 8028d30:	2300      	movs	r3, #0
 8028d32:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8028d36:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8028d3a:	6863      	ldr	r3, [r4, #4]
 8028d3c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8028d40:	2201      	movs	r2, #1
 8028d42:	409a      	lsls	r2, r3
 8028d44:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8028d48:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8028d4c:	4313      	orrs	r3, r2
 8028d4e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8028d52:	2f02      	cmp	r7, #2
 8028d54:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8028d58:	bf02      	ittt	eq
 8028d5a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8028d5e:	4313      	orreq	r3, r2
 8028d60:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8028d64:	6863      	ldr	r3, [r4, #4]
 8028d66:	6828      	ldr	r0, [r5, #0]
 8028d68:	1c5a      	adds	r2, r3, #1
 8028d6a:	3302      	adds	r3, #2
 8028d6c:	6062      	str	r2, [r4, #4]
 8028d6e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8028d72:	f7ff ffa1 	bl	8028cb8 <__retarget_lock_release_recursive>
 8028d76:	2000      	movs	r0, #0
 8028d78:	e7cb      	b.n	8028d12 <__register_exitproc+0x3a>
 8028d7a:	bf00      	nop
 8028d7c:	24000138 	.word	0x24000138
 8028d80:	240290fc 	.word	0x240290fc
 8028d84:	24029070 	.word	0x24029070
 8028d88:	0802d76c 	.word	0x0802d76c
 8028d8c:	08028609 	.word	0x08028609

08028d90 <_free_r>:
 8028d90:	b538      	push	{r3, r4, r5, lr}
 8028d92:	4605      	mov	r5, r0
 8028d94:	2900      	cmp	r1, #0
 8028d96:	d041      	beq.n	8028e1c <_free_r+0x8c>
 8028d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028d9c:	1f0c      	subs	r4, r1, #4
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	bfb8      	it	lt
 8028da2:	18e4      	addlt	r4, r4, r3
 8028da4:	f7ff fce2 	bl	802876c <__malloc_lock>
 8028da8:	4a1d      	ldr	r2, [pc, #116]	@ (8028e20 <_free_r+0x90>)
 8028daa:	6813      	ldr	r3, [r2, #0]
 8028dac:	b933      	cbnz	r3, 8028dbc <_free_r+0x2c>
 8028dae:	6063      	str	r3, [r4, #4]
 8028db0:	6014      	str	r4, [r2, #0]
 8028db2:	4628      	mov	r0, r5
 8028db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028db8:	f7ff bcde 	b.w	8028778 <__malloc_unlock>
 8028dbc:	42a3      	cmp	r3, r4
 8028dbe:	d908      	bls.n	8028dd2 <_free_r+0x42>
 8028dc0:	6820      	ldr	r0, [r4, #0]
 8028dc2:	1821      	adds	r1, r4, r0
 8028dc4:	428b      	cmp	r3, r1
 8028dc6:	bf01      	itttt	eq
 8028dc8:	6819      	ldreq	r1, [r3, #0]
 8028dca:	685b      	ldreq	r3, [r3, #4]
 8028dcc:	1809      	addeq	r1, r1, r0
 8028dce:	6021      	streq	r1, [r4, #0]
 8028dd0:	e7ed      	b.n	8028dae <_free_r+0x1e>
 8028dd2:	461a      	mov	r2, r3
 8028dd4:	685b      	ldr	r3, [r3, #4]
 8028dd6:	b10b      	cbz	r3, 8028ddc <_free_r+0x4c>
 8028dd8:	42a3      	cmp	r3, r4
 8028dda:	d9fa      	bls.n	8028dd2 <_free_r+0x42>
 8028ddc:	6811      	ldr	r1, [r2, #0]
 8028dde:	1850      	adds	r0, r2, r1
 8028de0:	42a0      	cmp	r0, r4
 8028de2:	d10b      	bne.n	8028dfc <_free_r+0x6c>
 8028de4:	6820      	ldr	r0, [r4, #0]
 8028de6:	4401      	add	r1, r0
 8028de8:	1850      	adds	r0, r2, r1
 8028dea:	4283      	cmp	r3, r0
 8028dec:	6011      	str	r1, [r2, #0]
 8028dee:	d1e0      	bne.n	8028db2 <_free_r+0x22>
 8028df0:	6818      	ldr	r0, [r3, #0]
 8028df2:	685b      	ldr	r3, [r3, #4]
 8028df4:	6053      	str	r3, [r2, #4]
 8028df6:	4408      	add	r0, r1
 8028df8:	6010      	str	r0, [r2, #0]
 8028dfa:	e7da      	b.n	8028db2 <_free_r+0x22>
 8028dfc:	d902      	bls.n	8028e04 <_free_r+0x74>
 8028dfe:	230c      	movs	r3, #12
 8028e00:	602b      	str	r3, [r5, #0]
 8028e02:	e7d6      	b.n	8028db2 <_free_r+0x22>
 8028e04:	6820      	ldr	r0, [r4, #0]
 8028e06:	1821      	adds	r1, r4, r0
 8028e08:	428b      	cmp	r3, r1
 8028e0a:	bf04      	itt	eq
 8028e0c:	6819      	ldreq	r1, [r3, #0]
 8028e0e:	685b      	ldreq	r3, [r3, #4]
 8028e10:	6063      	str	r3, [r4, #4]
 8028e12:	bf04      	itt	eq
 8028e14:	1809      	addeq	r1, r1, r0
 8028e16:	6021      	streq	r1, [r4, #0]
 8028e18:	6054      	str	r4, [r2, #4]
 8028e1a:	e7ca      	b.n	8028db2 <_free_r+0x22>
 8028e1c:	bd38      	pop	{r3, r4, r5, pc}
 8028e1e:	bf00      	nop
 8028e20:	24028f28 	.word	0x24028f28

08028e24 <__sfputc_r>:
 8028e24:	6893      	ldr	r3, [r2, #8]
 8028e26:	3b01      	subs	r3, #1
 8028e28:	2b00      	cmp	r3, #0
 8028e2a:	b410      	push	{r4}
 8028e2c:	6093      	str	r3, [r2, #8]
 8028e2e:	da08      	bge.n	8028e42 <__sfputc_r+0x1e>
 8028e30:	6994      	ldr	r4, [r2, #24]
 8028e32:	42a3      	cmp	r3, r4
 8028e34:	db01      	blt.n	8028e3a <__sfputc_r+0x16>
 8028e36:	290a      	cmp	r1, #10
 8028e38:	d103      	bne.n	8028e42 <__sfputc_r+0x1e>
 8028e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028e3e:	f7ff bdc6 	b.w	80289ce <__swbuf_r>
 8028e42:	6813      	ldr	r3, [r2, #0]
 8028e44:	1c58      	adds	r0, r3, #1
 8028e46:	6010      	str	r0, [r2, #0]
 8028e48:	7019      	strb	r1, [r3, #0]
 8028e4a:	4608      	mov	r0, r1
 8028e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028e50:	4770      	bx	lr

08028e52 <__sfputs_r>:
 8028e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e54:	4606      	mov	r6, r0
 8028e56:	460f      	mov	r7, r1
 8028e58:	4614      	mov	r4, r2
 8028e5a:	18d5      	adds	r5, r2, r3
 8028e5c:	42ac      	cmp	r4, r5
 8028e5e:	d101      	bne.n	8028e64 <__sfputs_r+0x12>
 8028e60:	2000      	movs	r0, #0
 8028e62:	e007      	b.n	8028e74 <__sfputs_r+0x22>
 8028e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028e68:	463a      	mov	r2, r7
 8028e6a:	4630      	mov	r0, r6
 8028e6c:	f7ff ffda 	bl	8028e24 <__sfputc_r>
 8028e70:	1c43      	adds	r3, r0, #1
 8028e72:	d1f3      	bne.n	8028e5c <__sfputs_r+0xa>
 8028e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028e78 <_vfiprintf_r>:
 8028e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e7c:	460d      	mov	r5, r1
 8028e7e:	b09d      	sub	sp, #116	@ 0x74
 8028e80:	4614      	mov	r4, r2
 8028e82:	4698      	mov	r8, r3
 8028e84:	4606      	mov	r6, r0
 8028e86:	b118      	cbz	r0, 8028e90 <_vfiprintf_r+0x18>
 8028e88:	6a03      	ldr	r3, [r0, #32]
 8028e8a:	b90b      	cbnz	r3, 8028e90 <_vfiprintf_r+0x18>
 8028e8c:	f7ff fd14 	bl	80288b8 <__sinit>
 8028e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028e92:	07d9      	lsls	r1, r3, #31
 8028e94:	d405      	bmi.n	8028ea2 <_vfiprintf_r+0x2a>
 8028e96:	89ab      	ldrh	r3, [r5, #12]
 8028e98:	059a      	lsls	r2, r3, #22
 8028e9a:	d402      	bmi.n	8028ea2 <_vfiprintf_r+0x2a>
 8028e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028e9e:	f7ff ff0a 	bl	8028cb6 <__retarget_lock_acquire_recursive>
 8028ea2:	89ab      	ldrh	r3, [r5, #12]
 8028ea4:	071b      	lsls	r3, r3, #28
 8028ea6:	d501      	bpl.n	8028eac <_vfiprintf_r+0x34>
 8028ea8:	692b      	ldr	r3, [r5, #16]
 8028eaa:	b99b      	cbnz	r3, 8028ed4 <_vfiprintf_r+0x5c>
 8028eac:	4629      	mov	r1, r5
 8028eae:	4630      	mov	r0, r6
 8028eb0:	f7ff fdcc 	bl	8028a4c <__swsetup_r>
 8028eb4:	b170      	cbz	r0, 8028ed4 <_vfiprintf_r+0x5c>
 8028eb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028eb8:	07dc      	lsls	r4, r3, #31
 8028eba:	d504      	bpl.n	8028ec6 <_vfiprintf_r+0x4e>
 8028ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8028ec0:	b01d      	add	sp, #116	@ 0x74
 8028ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ec6:	89ab      	ldrh	r3, [r5, #12]
 8028ec8:	0598      	lsls	r0, r3, #22
 8028eca:	d4f7      	bmi.n	8028ebc <_vfiprintf_r+0x44>
 8028ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028ece:	f7ff fef3 	bl	8028cb8 <__retarget_lock_release_recursive>
 8028ed2:	e7f3      	b.n	8028ebc <_vfiprintf_r+0x44>
 8028ed4:	2300      	movs	r3, #0
 8028ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ed8:	2320      	movs	r3, #32
 8028eda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8028ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8028ee2:	2330      	movs	r3, #48	@ 0x30
 8028ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029094 <_vfiprintf_r+0x21c>
 8028ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8028eec:	f04f 0901 	mov.w	r9, #1
 8028ef0:	4623      	mov	r3, r4
 8028ef2:	469a      	mov	sl, r3
 8028ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028ef8:	b10a      	cbz	r2, 8028efe <_vfiprintf_r+0x86>
 8028efa:	2a25      	cmp	r2, #37	@ 0x25
 8028efc:	d1f9      	bne.n	8028ef2 <_vfiprintf_r+0x7a>
 8028efe:	ebba 0b04 	subs.w	fp, sl, r4
 8028f02:	d00b      	beq.n	8028f1c <_vfiprintf_r+0xa4>
 8028f04:	465b      	mov	r3, fp
 8028f06:	4622      	mov	r2, r4
 8028f08:	4629      	mov	r1, r5
 8028f0a:	4630      	mov	r0, r6
 8028f0c:	f7ff ffa1 	bl	8028e52 <__sfputs_r>
 8028f10:	3001      	adds	r0, #1
 8028f12:	f000 80a7 	beq.w	8029064 <_vfiprintf_r+0x1ec>
 8028f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028f18:	445a      	add	r2, fp
 8028f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8028f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8028f20:	2b00      	cmp	r3, #0
 8028f22:	f000 809f 	beq.w	8029064 <_vfiprintf_r+0x1ec>
 8028f26:	2300      	movs	r3, #0
 8028f28:	f04f 32ff 	mov.w	r2, #4294967295
 8028f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028f30:	f10a 0a01 	add.w	sl, sl, #1
 8028f34:	9304      	str	r3, [sp, #16]
 8028f36:	9307      	str	r3, [sp, #28]
 8028f38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8028f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8028f3e:	4654      	mov	r4, sl
 8028f40:	2205      	movs	r2, #5
 8028f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028f46:	4853      	ldr	r0, [pc, #332]	@ (8029094 <_vfiprintf_r+0x21c>)
 8028f48:	f7d7 f9ca 	bl	80002e0 <memchr>
 8028f4c:	9a04      	ldr	r2, [sp, #16]
 8028f4e:	b9d8      	cbnz	r0, 8028f88 <_vfiprintf_r+0x110>
 8028f50:	06d1      	lsls	r1, r2, #27
 8028f52:	bf44      	itt	mi
 8028f54:	2320      	movmi	r3, #32
 8028f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028f5a:	0713      	lsls	r3, r2, #28
 8028f5c:	bf44      	itt	mi
 8028f5e:	232b      	movmi	r3, #43	@ 0x2b
 8028f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028f64:	f89a 3000 	ldrb.w	r3, [sl]
 8028f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8028f6a:	d015      	beq.n	8028f98 <_vfiprintf_r+0x120>
 8028f6c:	9a07      	ldr	r2, [sp, #28]
 8028f6e:	4654      	mov	r4, sl
 8028f70:	2000      	movs	r0, #0
 8028f72:	f04f 0c0a 	mov.w	ip, #10
 8028f76:	4621      	mov	r1, r4
 8028f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028f7c:	3b30      	subs	r3, #48	@ 0x30
 8028f7e:	2b09      	cmp	r3, #9
 8028f80:	d94b      	bls.n	802901a <_vfiprintf_r+0x1a2>
 8028f82:	b1b0      	cbz	r0, 8028fb2 <_vfiprintf_r+0x13a>
 8028f84:	9207      	str	r2, [sp, #28]
 8028f86:	e014      	b.n	8028fb2 <_vfiprintf_r+0x13a>
 8028f88:	eba0 0308 	sub.w	r3, r0, r8
 8028f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8028f90:	4313      	orrs	r3, r2
 8028f92:	9304      	str	r3, [sp, #16]
 8028f94:	46a2      	mov	sl, r4
 8028f96:	e7d2      	b.n	8028f3e <_vfiprintf_r+0xc6>
 8028f98:	9b03      	ldr	r3, [sp, #12]
 8028f9a:	1d19      	adds	r1, r3, #4
 8028f9c:	681b      	ldr	r3, [r3, #0]
 8028f9e:	9103      	str	r1, [sp, #12]
 8028fa0:	2b00      	cmp	r3, #0
 8028fa2:	bfbb      	ittet	lt
 8028fa4:	425b      	neglt	r3, r3
 8028fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8028faa:	9307      	strge	r3, [sp, #28]
 8028fac:	9307      	strlt	r3, [sp, #28]
 8028fae:	bfb8      	it	lt
 8028fb0:	9204      	strlt	r2, [sp, #16]
 8028fb2:	7823      	ldrb	r3, [r4, #0]
 8028fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8028fb6:	d10a      	bne.n	8028fce <_vfiprintf_r+0x156>
 8028fb8:	7863      	ldrb	r3, [r4, #1]
 8028fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8028fbc:	d132      	bne.n	8029024 <_vfiprintf_r+0x1ac>
 8028fbe:	9b03      	ldr	r3, [sp, #12]
 8028fc0:	1d1a      	adds	r2, r3, #4
 8028fc2:	681b      	ldr	r3, [r3, #0]
 8028fc4:	9203      	str	r2, [sp, #12]
 8028fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028fca:	3402      	adds	r4, #2
 8028fcc:	9305      	str	r3, [sp, #20]
 8028fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80290a4 <_vfiprintf_r+0x22c>
 8028fd2:	7821      	ldrb	r1, [r4, #0]
 8028fd4:	2203      	movs	r2, #3
 8028fd6:	4650      	mov	r0, sl
 8028fd8:	f7d7 f982 	bl	80002e0 <memchr>
 8028fdc:	b138      	cbz	r0, 8028fee <_vfiprintf_r+0x176>
 8028fde:	9b04      	ldr	r3, [sp, #16]
 8028fe0:	eba0 000a 	sub.w	r0, r0, sl
 8028fe4:	2240      	movs	r2, #64	@ 0x40
 8028fe6:	4082      	lsls	r2, r0
 8028fe8:	4313      	orrs	r3, r2
 8028fea:	3401      	adds	r4, #1
 8028fec:	9304      	str	r3, [sp, #16]
 8028fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028ff2:	4829      	ldr	r0, [pc, #164]	@ (8029098 <_vfiprintf_r+0x220>)
 8028ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8028ff8:	2206      	movs	r2, #6
 8028ffa:	f7d7 f971 	bl	80002e0 <memchr>
 8028ffe:	2800      	cmp	r0, #0
 8029000:	d03f      	beq.n	8029082 <_vfiprintf_r+0x20a>
 8029002:	4b26      	ldr	r3, [pc, #152]	@ (802909c <_vfiprintf_r+0x224>)
 8029004:	bb1b      	cbnz	r3, 802904e <_vfiprintf_r+0x1d6>
 8029006:	9b03      	ldr	r3, [sp, #12]
 8029008:	3307      	adds	r3, #7
 802900a:	f023 0307 	bic.w	r3, r3, #7
 802900e:	3308      	adds	r3, #8
 8029010:	9303      	str	r3, [sp, #12]
 8029012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029014:	443b      	add	r3, r7
 8029016:	9309      	str	r3, [sp, #36]	@ 0x24
 8029018:	e76a      	b.n	8028ef0 <_vfiprintf_r+0x78>
 802901a:	fb0c 3202 	mla	r2, ip, r2, r3
 802901e:	460c      	mov	r4, r1
 8029020:	2001      	movs	r0, #1
 8029022:	e7a8      	b.n	8028f76 <_vfiprintf_r+0xfe>
 8029024:	2300      	movs	r3, #0
 8029026:	3401      	adds	r4, #1
 8029028:	9305      	str	r3, [sp, #20]
 802902a:	4619      	mov	r1, r3
 802902c:	f04f 0c0a 	mov.w	ip, #10
 8029030:	4620      	mov	r0, r4
 8029032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029036:	3a30      	subs	r2, #48	@ 0x30
 8029038:	2a09      	cmp	r2, #9
 802903a:	d903      	bls.n	8029044 <_vfiprintf_r+0x1cc>
 802903c:	2b00      	cmp	r3, #0
 802903e:	d0c6      	beq.n	8028fce <_vfiprintf_r+0x156>
 8029040:	9105      	str	r1, [sp, #20]
 8029042:	e7c4      	b.n	8028fce <_vfiprintf_r+0x156>
 8029044:	fb0c 2101 	mla	r1, ip, r1, r2
 8029048:	4604      	mov	r4, r0
 802904a:	2301      	movs	r3, #1
 802904c:	e7f0      	b.n	8029030 <_vfiprintf_r+0x1b8>
 802904e:	ab03      	add	r3, sp, #12
 8029050:	9300      	str	r3, [sp, #0]
 8029052:	462a      	mov	r2, r5
 8029054:	4b12      	ldr	r3, [pc, #72]	@ (80290a0 <_vfiprintf_r+0x228>)
 8029056:	a904      	add	r1, sp, #16
 8029058:	4630      	mov	r0, r6
 802905a:	f3af 8000 	nop.w
 802905e:	4607      	mov	r7, r0
 8029060:	1c78      	adds	r0, r7, #1
 8029062:	d1d6      	bne.n	8029012 <_vfiprintf_r+0x19a>
 8029064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029066:	07d9      	lsls	r1, r3, #31
 8029068:	d405      	bmi.n	8029076 <_vfiprintf_r+0x1fe>
 802906a:	89ab      	ldrh	r3, [r5, #12]
 802906c:	059a      	lsls	r2, r3, #22
 802906e:	d402      	bmi.n	8029076 <_vfiprintf_r+0x1fe>
 8029070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029072:	f7ff fe21 	bl	8028cb8 <__retarget_lock_release_recursive>
 8029076:	89ab      	ldrh	r3, [r5, #12]
 8029078:	065b      	lsls	r3, r3, #25
 802907a:	f53f af1f 	bmi.w	8028ebc <_vfiprintf_r+0x44>
 802907e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029080:	e71e      	b.n	8028ec0 <_vfiprintf_r+0x48>
 8029082:	ab03      	add	r3, sp, #12
 8029084:	9300      	str	r3, [sp, #0]
 8029086:	462a      	mov	r2, r5
 8029088:	4b05      	ldr	r3, [pc, #20]	@ (80290a0 <_vfiprintf_r+0x228>)
 802908a:	a904      	add	r1, sp, #16
 802908c:	4630      	mov	r0, r6
 802908e:	f000 f879 	bl	8029184 <_printf_i>
 8029092:	e7e4      	b.n	802905e <_vfiprintf_r+0x1e6>
 8029094:	0802d770 	.word	0x0802d770
 8029098:	0802d77a 	.word	0x0802d77a
 802909c:	00000000 	.word	0x00000000
 80290a0:	08028e53 	.word	0x08028e53
 80290a4:	0802d776 	.word	0x0802d776

080290a8 <_printf_common>:
 80290a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80290ac:	4616      	mov	r6, r2
 80290ae:	4698      	mov	r8, r3
 80290b0:	688a      	ldr	r2, [r1, #8]
 80290b2:	690b      	ldr	r3, [r1, #16]
 80290b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80290b8:	4293      	cmp	r3, r2
 80290ba:	bfb8      	it	lt
 80290bc:	4613      	movlt	r3, r2
 80290be:	6033      	str	r3, [r6, #0]
 80290c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80290c4:	4607      	mov	r7, r0
 80290c6:	460c      	mov	r4, r1
 80290c8:	b10a      	cbz	r2, 80290ce <_printf_common+0x26>
 80290ca:	3301      	adds	r3, #1
 80290cc:	6033      	str	r3, [r6, #0]
 80290ce:	6823      	ldr	r3, [r4, #0]
 80290d0:	0699      	lsls	r1, r3, #26
 80290d2:	bf42      	ittt	mi
 80290d4:	6833      	ldrmi	r3, [r6, #0]
 80290d6:	3302      	addmi	r3, #2
 80290d8:	6033      	strmi	r3, [r6, #0]
 80290da:	6825      	ldr	r5, [r4, #0]
 80290dc:	f015 0506 	ands.w	r5, r5, #6
 80290e0:	d106      	bne.n	80290f0 <_printf_common+0x48>
 80290e2:	f104 0a19 	add.w	sl, r4, #25
 80290e6:	68e3      	ldr	r3, [r4, #12]
 80290e8:	6832      	ldr	r2, [r6, #0]
 80290ea:	1a9b      	subs	r3, r3, r2
 80290ec:	42ab      	cmp	r3, r5
 80290ee:	dc26      	bgt.n	802913e <_printf_common+0x96>
 80290f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80290f4:	6822      	ldr	r2, [r4, #0]
 80290f6:	3b00      	subs	r3, #0
 80290f8:	bf18      	it	ne
 80290fa:	2301      	movne	r3, #1
 80290fc:	0692      	lsls	r2, r2, #26
 80290fe:	d42b      	bmi.n	8029158 <_printf_common+0xb0>
 8029100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029104:	4641      	mov	r1, r8
 8029106:	4638      	mov	r0, r7
 8029108:	47c8      	blx	r9
 802910a:	3001      	adds	r0, #1
 802910c:	d01e      	beq.n	802914c <_printf_common+0xa4>
 802910e:	6823      	ldr	r3, [r4, #0]
 8029110:	6922      	ldr	r2, [r4, #16]
 8029112:	f003 0306 	and.w	r3, r3, #6
 8029116:	2b04      	cmp	r3, #4
 8029118:	bf02      	ittt	eq
 802911a:	68e5      	ldreq	r5, [r4, #12]
 802911c:	6833      	ldreq	r3, [r6, #0]
 802911e:	1aed      	subeq	r5, r5, r3
 8029120:	68a3      	ldr	r3, [r4, #8]
 8029122:	bf0c      	ite	eq
 8029124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029128:	2500      	movne	r5, #0
 802912a:	4293      	cmp	r3, r2
 802912c:	bfc4      	itt	gt
 802912e:	1a9b      	subgt	r3, r3, r2
 8029130:	18ed      	addgt	r5, r5, r3
 8029132:	2600      	movs	r6, #0
 8029134:	341a      	adds	r4, #26
 8029136:	42b5      	cmp	r5, r6
 8029138:	d11a      	bne.n	8029170 <_printf_common+0xc8>
 802913a:	2000      	movs	r0, #0
 802913c:	e008      	b.n	8029150 <_printf_common+0xa8>
 802913e:	2301      	movs	r3, #1
 8029140:	4652      	mov	r2, sl
 8029142:	4641      	mov	r1, r8
 8029144:	4638      	mov	r0, r7
 8029146:	47c8      	blx	r9
 8029148:	3001      	adds	r0, #1
 802914a:	d103      	bne.n	8029154 <_printf_common+0xac>
 802914c:	f04f 30ff 	mov.w	r0, #4294967295
 8029150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029154:	3501      	adds	r5, #1
 8029156:	e7c6      	b.n	80290e6 <_printf_common+0x3e>
 8029158:	18e1      	adds	r1, r4, r3
 802915a:	1c5a      	adds	r2, r3, #1
 802915c:	2030      	movs	r0, #48	@ 0x30
 802915e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029162:	4422      	add	r2, r4
 8029164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802916c:	3302      	adds	r3, #2
 802916e:	e7c7      	b.n	8029100 <_printf_common+0x58>
 8029170:	2301      	movs	r3, #1
 8029172:	4622      	mov	r2, r4
 8029174:	4641      	mov	r1, r8
 8029176:	4638      	mov	r0, r7
 8029178:	47c8      	blx	r9
 802917a:	3001      	adds	r0, #1
 802917c:	d0e6      	beq.n	802914c <_printf_common+0xa4>
 802917e:	3601      	adds	r6, #1
 8029180:	e7d9      	b.n	8029136 <_printf_common+0x8e>
	...

08029184 <_printf_i>:
 8029184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029188:	7e0f      	ldrb	r7, [r1, #24]
 802918a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802918c:	2f78      	cmp	r7, #120	@ 0x78
 802918e:	4691      	mov	r9, r2
 8029190:	4680      	mov	r8, r0
 8029192:	460c      	mov	r4, r1
 8029194:	469a      	mov	sl, r3
 8029196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802919a:	d807      	bhi.n	80291ac <_printf_i+0x28>
 802919c:	2f62      	cmp	r7, #98	@ 0x62
 802919e:	d80a      	bhi.n	80291b6 <_printf_i+0x32>
 80291a0:	2f00      	cmp	r7, #0
 80291a2:	f000 80d2 	beq.w	802934a <_printf_i+0x1c6>
 80291a6:	2f58      	cmp	r7, #88	@ 0x58
 80291a8:	f000 80b9 	beq.w	802931e <_printf_i+0x19a>
 80291ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80291b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80291b4:	e03a      	b.n	802922c <_printf_i+0xa8>
 80291b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80291ba:	2b15      	cmp	r3, #21
 80291bc:	d8f6      	bhi.n	80291ac <_printf_i+0x28>
 80291be:	a101      	add	r1, pc, #4	@ (adr r1, 80291c4 <_printf_i+0x40>)
 80291c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80291c4:	0802921d 	.word	0x0802921d
 80291c8:	08029231 	.word	0x08029231
 80291cc:	080291ad 	.word	0x080291ad
 80291d0:	080291ad 	.word	0x080291ad
 80291d4:	080291ad 	.word	0x080291ad
 80291d8:	080291ad 	.word	0x080291ad
 80291dc:	08029231 	.word	0x08029231
 80291e0:	080291ad 	.word	0x080291ad
 80291e4:	080291ad 	.word	0x080291ad
 80291e8:	080291ad 	.word	0x080291ad
 80291ec:	080291ad 	.word	0x080291ad
 80291f0:	08029331 	.word	0x08029331
 80291f4:	0802925b 	.word	0x0802925b
 80291f8:	080292eb 	.word	0x080292eb
 80291fc:	080291ad 	.word	0x080291ad
 8029200:	080291ad 	.word	0x080291ad
 8029204:	08029353 	.word	0x08029353
 8029208:	080291ad 	.word	0x080291ad
 802920c:	0802925b 	.word	0x0802925b
 8029210:	080291ad 	.word	0x080291ad
 8029214:	080291ad 	.word	0x080291ad
 8029218:	080292f3 	.word	0x080292f3
 802921c:	6833      	ldr	r3, [r6, #0]
 802921e:	1d1a      	adds	r2, r3, #4
 8029220:	681b      	ldr	r3, [r3, #0]
 8029222:	6032      	str	r2, [r6, #0]
 8029224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802922c:	2301      	movs	r3, #1
 802922e:	e09d      	b.n	802936c <_printf_i+0x1e8>
 8029230:	6833      	ldr	r3, [r6, #0]
 8029232:	6820      	ldr	r0, [r4, #0]
 8029234:	1d19      	adds	r1, r3, #4
 8029236:	6031      	str	r1, [r6, #0]
 8029238:	0606      	lsls	r6, r0, #24
 802923a:	d501      	bpl.n	8029240 <_printf_i+0xbc>
 802923c:	681d      	ldr	r5, [r3, #0]
 802923e:	e003      	b.n	8029248 <_printf_i+0xc4>
 8029240:	0645      	lsls	r5, r0, #25
 8029242:	d5fb      	bpl.n	802923c <_printf_i+0xb8>
 8029244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029248:	2d00      	cmp	r5, #0
 802924a:	da03      	bge.n	8029254 <_printf_i+0xd0>
 802924c:	232d      	movs	r3, #45	@ 0x2d
 802924e:	426d      	negs	r5, r5
 8029250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029254:	4859      	ldr	r0, [pc, #356]	@ (80293bc <_printf_i+0x238>)
 8029256:	230a      	movs	r3, #10
 8029258:	e011      	b.n	802927e <_printf_i+0xfa>
 802925a:	6821      	ldr	r1, [r4, #0]
 802925c:	6833      	ldr	r3, [r6, #0]
 802925e:	0608      	lsls	r0, r1, #24
 8029260:	f853 5b04 	ldr.w	r5, [r3], #4
 8029264:	d402      	bmi.n	802926c <_printf_i+0xe8>
 8029266:	0649      	lsls	r1, r1, #25
 8029268:	bf48      	it	mi
 802926a:	b2ad      	uxthmi	r5, r5
 802926c:	2f6f      	cmp	r7, #111	@ 0x6f
 802926e:	4853      	ldr	r0, [pc, #332]	@ (80293bc <_printf_i+0x238>)
 8029270:	6033      	str	r3, [r6, #0]
 8029272:	bf14      	ite	ne
 8029274:	230a      	movne	r3, #10
 8029276:	2308      	moveq	r3, #8
 8029278:	2100      	movs	r1, #0
 802927a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802927e:	6866      	ldr	r6, [r4, #4]
 8029280:	60a6      	str	r6, [r4, #8]
 8029282:	2e00      	cmp	r6, #0
 8029284:	bfa2      	ittt	ge
 8029286:	6821      	ldrge	r1, [r4, #0]
 8029288:	f021 0104 	bicge.w	r1, r1, #4
 802928c:	6021      	strge	r1, [r4, #0]
 802928e:	b90d      	cbnz	r5, 8029294 <_printf_i+0x110>
 8029290:	2e00      	cmp	r6, #0
 8029292:	d04b      	beq.n	802932c <_printf_i+0x1a8>
 8029294:	4616      	mov	r6, r2
 8029296:	fbb5 f1f3 	udiv	r1, r5, r3
 802929a:	fb03 5711 	mls	r7, r3, r1, r5
 802929e:	5dc7      	ldrb	r7, [r0, r7]
 80292a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80292a4:	462f      	mov	r7, r5
 80292a6:	42bb      	cmp	r3, r7
 80292a8:	460d      	mov	r5, r1
 80292aa:	d9f4      	bls.n	8029296 <_printf_i+0x112>
 80292ac:	2b08      	cmp	r3, #8
 80292ae:	d10b      	bne.n	80292c8 <_printf_i+0x144>
 80292b0:	6823      	ldr	r3, [r4, #0]
 80292b2:	07df      	lsls	r7, r3, #31
 80292b4:	d508      	bpl.n	80292c8 <_printf_i+0x144>
 80292b6:	6923      	ldr	r3, [r4, #16]
 80292b8:	6861      	ldr	r1, [r4, #4]
 80292ba:	4299      	cmp	r1, r3
 80292bc:	bfde      	ittt	le
 80292be:	2330      	movle	r3, #48	@ 0x30
 80292c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80292c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80292c8:	1b92      	subs	r2, r2, r6
 80292ca:	6122      	str	r2, [r4, #16]
 80292cc:	f8cd a000 	str.w	sl, [sp]
 80292d0:	464b      	mov	r3, r9
 80292d2:	aa03      	add	r2, sp, #12
 80292d4:	4621      	mov	r1, r4
 80292d6:	4640      	mov	r0, r8
 80292d8:	f7ff fee6 	bl	80290a8 <_printf_common>
 80292dc:	3001      	adds	r0, #1
 80292de:	d14a      	bne.n	8029376 <_printf_i+0x1f2>
 80292e0:	f04f 30ff 	mov.w	r0, #4294967295
 80292e4:	b004      	add	sp, #16
 80292e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80292ea:	6823      	ldr	r3, [r4, #0]
 80292ec:	f043 0320 	orr.w	r3, r3, #32
 80292f0:	6023      	str	r3, [r4, #0]
 80292f2:	4833      	ldr	r0, [pc, #204]	@ (80293c0 <_printf_i+0x23c>)
 80292f4:	2778      	movs	r7, #120	@ 0x78
 80292f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80292fa:	6823      	ldr	r3, [r4, #0]
 80292fc:	6831      	ldr	r1, [r6, #0]
 80292fe:	061f      	lsls	r7, r3, #24
 8029300:	f851 5b04 	ldr.w	r5, [r1], #4
 8029304:	d402      	bmi.n	802930c <_printf_i+0x188>
 8029306:	065f      	lsls	r7, r3, #25
 8029308:	bf48      	it	mi
 802930a:	b2ad      	uxthmi	r5, r5
 802930c:	6031      	str	r1, [r6, #0]
 802930e:	07d9      	lsls	r1, r3, #31
 8029310:	bf44      	itt	mi
 8029312:	f043 0320 	orrmi.w	r3, r3, #32
 8029316:	6023      	strmi	r3, [r4, #0]
 8029318:	b11d      	cbz	r5, 8029322 <_printf_i+0x19e>
 802931a:	2310      	movs	r3, #16
 802931c:	e7ac      	b.n	8029278 <_printf_i+0xf4>
 802931e:	4827      	ldr	r0, [pc, #156]	@ (80293bc <_printf_i+0x238>)
 8029320:	e7e9      	b.n	80292f6 <_printf_i+0x172>
 8029322:	6823      	ldr	r3, [r4, #0]
 8029324:	f023 0320 	bic.w	r3, r3, #32
 8029328:	6023      	str	r3, [r4, #0]
 802932a:	e7f6      	b.n	802931a <_printf_i+0x196>
 802932c:	4616      	mov	r6, r2
 802932e:	e7bd      	b.n	80292ac <_printf_i+0x128>
 8029330:	6833      	ldr	r3, [r6, #0]
 8029332:	6825      	ldr	r5, [r4, #0]
 8029334:	6961      	ldr	r1, [r4, #20]
 8029336:	1d18      	adds	r0, r3, #4
 8029338:	6030      	str	r0, [r6, #0]
 802933a:	062e      	lsls	r6, r5, #24
 802933c:	681b      	ldr	r3, [r3, #0]
 802933e:	d501      	bpl.n	8029344 <_printf_i+0x1c0>
 8029340:	6019      	str	r1, [r3, #0]
 8029342:	e002      	b.n	802934a <_printf_i+0x1c6>
 8029344:	0668      	lsls	r0, r5, #25
 8029346:	d5fb      	bpl.n	8029340 <_printf_i+0x1bc>
 8029348:	8019      	strh	r1, [r3, #0]
 802934a:	2300      	movs	r3, #0
 802934c:	6123      	str	r3, [r4, #16]
 802934e:	4616      	mov	r6, r2
 8029350:	e7bc      	b.n	80292cc <_printf_i+0x148>
 8029352:	6833      	ldr	r3, [r6, #0]
 8029354:	1d1a      	adds	r2, r3, #4
 8029356:	6032      	str	r2, [r6, #0]
 8029358:	681e      	ldr	r6, [r3, #0]
 802935a:	6862      	ldr	r2, [r4, #4]
 802935c:	2100      	movs	r1, #0
 802935e:	4630      	mov	r0, r6
 8029360:	f7d6 ffbe 	bl	80002e0 <memchr>
 8029364:	b108      	cbz	r0, 802936a <_printf_i+0x1e6>
 8029366:	1b80      	subs	r0, r0, r6
 8029368:	6060      	str	r0, [r4, #4]
 802936a:	6863      	ldr	r3, [r4, #4]
 802936c:	6123      	str	r3, [r4, #16]
 802936e:	2300      	movs	r3, #0
 8029370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029374:	e7aa      	b.n	80292cc <_printf_i+0x148>
 8029376:	6923      	ldr	r3, [r4, #16]
 8029378:	4632      	mov	r2, r6
 802937a:	4649      	mov	r1, r9
 802937c:	4640      	mov	r0, r8
 802937e:	47d0      	blx	sl
 8029380:	3001      	adds	r0, #1
 8029382:	d0ad      	beq.n	80292e0 <_printf_i+0x15c>
 8029384:	6823      	ldr	r3, [r4, #0]
 8029386:	079b      	lsls	r3, r3, #30
 8029388:	d413      	bmi.n	80293b2 <_printf_i+0x22e>
 802938a:	68e0      	ldr	r0, [r4, #12]
 802938c:	9b03      	ldr	r3, [sp, #12]
 802938e:	4298      	cmp	r0, r3
 8029390:	bfb8      	it	lt
 8029392:	4618      	movlt	r0, r3
 8029394:	e7a6      	b.n	80292e4 <_printf_i+0x160>
 8029396:	2301      	movs	r3, #1
 8029398:	4632      	mov	r2, r6
 802939a:	4649      	mov	r1, r9
 802939c:	4640      	mov	r0, r8
 802939e:	47d0      	blx	sl
 80293a0:	3001      	adds	r0, #1
 80293a2:	d09d      	beq.n	80292e0 <_printf_i+0x15c>
 80293a4:	3501      	adds	r5, #1
 80293a6:	68e3      	ldr	r3, [r4, #12]
 80293a8:	9903      	ldr	r1, [sp, #12]
 80293aa:	1a5b      	subs	r3, r3, r1
 80293ac:	42ab      	cmp	r3, r5
 80293ae:	dcf2      	bgt.n	8029396 <_printf_i+0x212>
 80293b0:	e7eb      	b.n	802938a <_printf_i+0x206>
 80293b2:	2500      	movs	r5, #0
 80293b4:	f104 0619 	add.w	r6, r4, #25
 80293b8:	e7f5      	b.n	80293a6 <_printf_i+0x222>
 80293ba:	bf00      	nop
 80293bc:	0802d781 	.word	0x0802d781
 80293c0:	0802d792 	.word	0x0802d792

080293c4 <__sflush_r>:
 80293c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80293c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80293cc:	0716      	lsls	r6, r2, #28
 80293ce:	4605      	mov	r5, r0
 80293d0:	460c      	mov	r4, r1
 80293d2:	d454      	bmi.n	802947e <__sflush_r+0xba>
 80293d4:	684b      	ldr	r3, [r1, #4]
 80293d6:	2b00      	cmp	r3, #0
 80293d8:	dc02      	bgt.n	80293e0 <__sflush_r+0x1c>
 80293da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80293dc:	2b00      	cmp	r3, #0
 80293de:	dd48      	ble.n	8029472 <__sflush_r+0xae>
 80293e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80293e2:	2e00      	cmp	r6, #0
 80293e4:	d045      	beq.n	8029472 <__sflush_r+0xae>
 80293e6:	2300      	movs	r3, #0
 80293e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80293ec:	682f      	ldr	r7, [r5, #0]
 80293ee:	6a21      	ldr	r1, [r4, #32]
 80293f0:	602b      	str	r3, [r5, #0]
 80293f2:	d030      	beq.n	8029456 <__sflush_r+0x92>
 80293f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80293f6:	89a3      	ldrh	r3, [r4, #12]
 80293f8:	0759      	lsls	r1, r3, #29
 80293fa:	d505      	bpl.n	8029408 <__sflush_r+0x44>
 80293fc:	6863      	ldr	r3, [r4, #4]
 80293fe:	1ad2      	subs	r2, r2, r3
 8029400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029402:	b10b      	cbz	r3, 8029408 <__sflush_r+0x44>
 8029404:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8029406:	1ad2      	subs	r2, r2, r3
 8029408:	2300      	movs	r3, #0
 802940a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802940c:	6a21      	ldr	r1, [r4, #32]
 802940e:	4628      	mov	r0, r5
 8029410:	47b0      	blx	r6
 8029412:	1c43      	adds	r3, r0, #1
 8029414:	89a3      	ldrh	r3, [r4, #12]
 8029416:	d106      	bne.n	8029426 <__sflush_r+0x62>
 8029418:	6829      	ldr	r1, [r5, #0]
 802941a:	291d      	cmp	r1, #29
 802941c:	d82b      	bhi.n	8029476 <__sflush_r+0xb2>
 802941e:	4a2a      	ldr	r2, [pc, #168]	@ (80294c8 <__sflush_r+0x104>)
 8029420:	410a      	asrs	r2, r1
 8029422:	07d6      	lsls	r6, r2, #31
 8029424:	d427      	bmi.n	8029476 <__sflush_r+0xb2>
 8029426:	2200      	movs	r2, #0
 8029428:	6062      	str	r2, [r4, #4]
 802942a:	04d9      	lsls	r1, r3, #19
 802942c:	6922      	ldr	r2, [r4, #16]
 802942e:	6022      	str	r2, [r4, #0]
 8029430:	d504      	bpl.n	802943c <__sflush_r+0x78>
 8029432:	1c42      	adds	r2, r0, #1
 8029434:	d101      	bne.n	802943a <__sflush_r+0x76>
 8029436:	682b      	ldr	r3, [r5, #0]
 8029438:	b903      	cbnz	r3, 802943c <__sflush_r+0x78>
 802943a:	6560      	str	r0, [r4, #84]	@ 0x54
 802943c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802943e:	602f      	str	r7, [r5, #0]
 8029440:	b1b9      	cbz	r1, 8029472 <__sflush_r+0xae>
 8029442:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029446:	4299      	cmp	r1, r3
 8029448:	d002      	beq.n	8029450 <__sflush_r+0x8c>
 802944a:	4628      	mov	r0, r5
 802944c:	f7ff fca0 	bl	8028d90 <_free_r>
 8029450:	2300      	movs	r3, #0
 8029452:	6363      	str	r3, [r4, #52]	@ 0x34
 8029454:	e00d      	b.n	8029472 <__sflush_r+0xae>
 8029456:	2301      	movs	r3, #1
 8029458:	4628      	mov	r0, r5
 802945a:	47b0      	blx	r6
 802945c:	4602      	mov	r2, r0
 802945e:	1c50      	adds	r0, r2, #1
 8029460:	d1c9      	bne.n	80293f6 <__sflush_r+0x32>
 8029462:	682b      	ldr	r3, [r5, #0]
 8029464:	2b00      	cmp	r3, #0
 8029466:	d0c6      	beq.n	80293f6 <__sflush_r+0x32>
 8029468:	2b1d      	cmp	r3, #29
 802946a:	d001      	beq.n	8029470 <__sflush_r+0xac>
 802946c:	2b16      	cmp	r3, #22
 802946e:	d11e      	bne.n	80294ae <__sflush_r+0xea>
 8029470:	602f      	str	r7, [r5, #0]
 8029472:	2000      	movs	r0, #0
 8029474:	e022      	b.n	80294bc <__sflush_r+0xf8>
 8029476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802947a:	b21b      	sxth	r3, r3
 802947c:	e01b      	b.n	80294b6 <__sflush_r+0xf2>
 802947e:	690f      	ldr	r7, [r1, #16]
 8029480:	2f00      	cmp	r7, #0
 8029482:	d0f6      	beq.n	8029472 <__sflush_r+0xae>
 8029484:	0793      	lsls	r3, r2, #30
 8029486:	680e      	ldr	r6, [r1, #0]
 8029488:	bf08      	it	eq
 802948a:	694b      	ldreq	r3, [r1, #20]
 802948c:	600f      	str	r7, [r1, #0]
 802948e:	bf18      	it	ne
 8029490:	2300      	movne	r3, #0
 8029492:	eba6 0807 	sub.w	r8, r6, r7
 8029496:	608b      	str	r3, [r1, #8]
 8029498:	f1b8 0f00 	cmp.w	r8, #0
 802949c:	dde9      	ble.n	8029472 <__sflush_r+0xae>
 802949e:	6a21      	ldr	r1, [r4, #32]
 80294a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80294a2:	4643      	mov	r3, r8
 80294a4:	463a      	mov	r2, r7
 80294a6:	4628      	mov	r0, r5
 80294a8:	47b0      	blx	r6
 80294aa:	2800      	cmp	r0, #0
 80294ac:	dc08      	bgt.n	80294c0 <__sflush_r+0xfc>
 80294ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80294b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80294b6:	81a3      	strh	r3, [r4, #12]
 80294b8:	f04f 30ff 	mov.w	r0, #4294967295
 80294bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80294c0:	4407      	add	r7, r0
 80294c2:	eba8 0800 	sub.w	r8, r8, r0
 80294c6:	e7e7      	b.n	8029498 <__sflush_r+0xd4>
 80294c8:	dfbffffe 	.word	0xdfbffffe

080294cc <_fflush_r>:
 80294cc:	b538      	push	{r3, r4, r5, lr}
 80294ce:	690b      	ldr	r3, [r1, #16]
 80294d0:	4605      	mov	r5, r0
 80294d2:	460c      	mov	r4, r1
 80294d4:	b913      	cbnz	r3, 80294dc <_fflush_r+0x10>
 80294d6:	2500      	movs	r5, #0
 80294d8:	4628      	mov	r0, r5
 80294da:	bd38      	pop	{r3, r4, r5, pc}
 80294dc:	b118      	cbz	r0, 80294e6 <_fflush_r+0x1a>
 80294de:	6a03      	ldr	r3, [r0, #32]
 80294e0:	b90b      	cbnz	r3, 80294e6 <_fflush_r+0x1a>
 80294e2:	f7ff f9e9 	bl	80288b8 <__sinit>
 80294e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80294ea:	2b00      	cmp	r3, #0
 80294ec:	d0f3      	beq.n	80294d6 <_fflush_r+0xa>
 80294ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80294f0:	07d0      	lsls	r0, r2, #31
 80294f2:	d404      	bmi.n	80294fe <_fflush_r+0x32>
 80294f4:	0599      	lsls	r1, r3, #22
 80294f6:	d402      	bmi.n	80294fe <_fflush_r+0x32>
 80294f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80294fa:	f7ff fbdc 	bl	8028cb6 <__retarget_lock_acquire_recursive>
 80294fe:	4628      	mov	r0, r5
 8029500:	4621      	mov	r1, r4
 8029502:	f7ff ff5f 	bl	80293c4 <__sflush_r>
 8029506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029508:	07da      	lsls	r2, r3, #31
 802950a:	4605      	mov	r5, r0
 802950c:	d4e4      	bmi.n	80294d8 <_fflush_r+0xc>
 802950e:	89a3      	ldrh	r3, [r4, #12]
 8029510:	059b      	lsls	r3, r3, #22
 8029512:	d4e1      	bmi.n	80294d8 <_fflush_r+0xc>
 8029514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029516:	f7ff fbcf 	bl	8028cb8 <__retarget_lock_release_recursive>
 802951a:	e7dd      	b.n	80294d8 <_fflush_r+0xc>

0802951c <__swhatbuf_r>:
 802951c:	b570      	push	{r4, r5, r6, lr}
 802951e:	460c      	mov	r4, r1
 8029520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029524:	2900      	cmp	r1, #0
 8029526:	b096      	sub	sp, #88	@ 0x58
 8029528:	4615      	mov	r5, r2
 802952a:	461e      	mov	r6, r3
 802952c:	da0d      	bge.n	802954a <__swhatbuf_r+0x2e>
 802952e:	89a3      	ldrh	r3, [r4, #12]
 8029530:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8029534:	f04f 0100 	mov.w	r1, #0
 8029538:	bf14      	ite	ne
 802953a:	2340      	movne	r3, #64	@ 0x40
 802953c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029540:	2000      	movs	r0, #0
 8029542:	6031      	str	r1, [r6, #0]
 8029544:	602b      	str	r3, [r5, #0]
 8029546:	b016      	add	sp, #88	@ 0x58
 8029548:	bd70      	pop	{r4, r5, r6, pc}
 802954a:	466a      	mov	r2, sp
 802954c:	f000 f848 	bl	80295e0 <_fstat_r>
 8029550:	2800      	cmp	r0, #0
 8029552:	dbec      	blt.n	802952e <__swhatbuf_r+0x12>
 8029554:	9901      	ldr	r1, [sp, #4]
 8029556:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802955a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802955e:	4259      	negs	r1, r3
 8029560:	4159      	adcs	r1, r3
 8029562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8029566:	e7eb      	b.n	8029540 <__swhatbuf_r+0x24>

08029568 <__smakebuf_r>:
 8029568:	898b      	ldrh	r3, [r1, #12]
 802956a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802956c:	079d      	lsls	r5, r3, #30
 802956e:	4606      	mov	r6, r0
 8029570:	460c      	mov	r4, r1
 8029572:	d507      	bpl.n	8029584 <__smakebuf_r+0x1c>
 8029574:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8029578:	6023      	str	r3, [r4, #0]
 802957a:	6123      	str	r3, [r4, #16]
 802957c:	2301      	movs	r3, #1
 802957e:	6163      	str	r3, [r4, #20]
 8029580:	b003      	add	sp, #12
 8029582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029584:	ab01      	add	r3, sp, #4
 8029586:	466a      	mov	r2, sp
 8029588:	f7ff ffc8 	bl	802951c <__swhatbuf_r>
 802958c:	9f00      	ldr	r7, [sp, #0]
 802958e:	4605      	mov	r5, r0
 8029590:	4639      	mov	r1, r7
 8029592:	4630      	mov	r0, r6
 8029594:	f7ff f86a 	bl	802866c <_malloc_r>
 8029598:	b948      	cbnz	r0, 80295ae <__smakebuf_r+0x46>
 802959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802959e:	059a      	lsls	r2, r3, #22
 80295a0:	d4ee      	bmi.n	8029580 <__smakebuf_r+0x18>
 80295a2:	f023 0303 	bic.w	r3, r3, #3
 80295a6:	f043 0302 	orr.w	r3, r3, #2
 80295aa:	81a3      	strh	r3, [r4, #12]
 80295ac:	e7e2      	b.n	8029574 <__smakebuf_r+0xc>
 80295ae:	89a3      	ldrh	r3, [r4, #12]
 80295b0:	6020      	str	r0, [r4, #0]
 80295b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80295b6:	81a3      	strh	r3, [r4, #12]
 80295b8:	9b01      	ldr	r3, [sp, #4]
 80295ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80295be:	b15b      	cbz	r3, 80295d8 <__smakebuf_r+0x70>
 80295c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80295c4:	4630      	mov	r0, r6
 80295c6:	f000 f81d 	bl	8029604 <_isatty_r>
 80295ca:	b128      	cbz	r0, 80295d8 <__smakebuf_r+0x70>
 80295cc:	89a3      	ldrh	r3, [r4, #12]
 80295ce:	f023 0303 	bic.w	r3, r3, #3
 80295d2:	f043 0301 	orr.w	r3, r3, #1
 80295d6:	81a3      	strh	r3, [r4, #12]
 80295d8:	89a3      	ldrh	r3, [r4, #12]
 80295da:	431d      	orrs	r5, r3
 80295dc:	81a5      	strh	r5, [r4, #12]
 80295de:	e7cf      	b.n	8029580 <__smakebuf_r+0x18>

080295e0 <_fstat_r>:
 80295e0:	b538      	push	{r3, r4, r5, lr}
 80295e2:	4d07      	ldr	r5, [pc, #28]	@ (8029600 <_fstat_r+0x20>)
 80295e4:	2300      	movs	r3, #0
 80295e6:	4604      	mov	r4, r0
 80295e8:	4608      	mov	r0, r1
 80295ea:	4611      	mov	r1, r2
 80295ec:	602b      	str	r3, [r5, #0]
 80295ee:	f7d8 f868 	bl	80016c2 <_fstat>
 80295f2:	1c43      	adds	r3, r0, #1
 80295f4:	d102      	bne.n	80295fc <_fstat_r+0x1c>
 80295f6:	682b      	ldr	r3, [r5, #0]
 80295f8:	b103      	cbz	r3, 80295fc <_fstat_r+0x1c>
 80295fa:	6023      	str	r3, [r4, #0]
 80295fc:	bd38      	pop	{r3, r4, r5, pc}
 80295fe:	bf00      	nop
 8029600:	24029068 	.word	0x24029068

08029604 <_isatty_r>:
 8029604:	b538      	push	{r3, r4, r5, lr}
 8029606:	4d06      	ldr	r5, [pc, #24]	@ (8029620 <_isatty_r+0x1c>)
 8029608:	2300      	movs	r3, #0
 802960a:	4604      	mov	r4, r0
 802960c:	4608      	mov	r0, r1
 802960e:	602b      	str	r3, [r5, #0]
 8029610:	f7d8 f85c 	bl	80016cc <_isatty>
 8029614:	1c43      	adds	r3, r0, #1
 8029616:	d102      	bne.n	802961e <_isatty_r+0x1a>
 8029618:	682b      	ldr	r3, [r5, #0]
 802961a:	b103      	cbz	r3, 802961e <_isatty_r+0x1a>
 802961c:	6023      	str	r3, [r4, #0]
 802961e:	bd38      	pop	{r3, r4, r5, pc}
 8029620:	24029068 	.word	0x24029068

08029624 <_init>:
 8029624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029626:	bf00      	nop
 8029628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802962a:	bc08      	pop	{r3}
 802962c:	469e      	mov	lr, r3
 802962e:	4770      	bx	lr

08029630 <_fini>:
 8029630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029632:	bf00      	nop
 8029634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029636:	bc08      	pop	{r3}
 8029638:	469e      	mov	lr, r3
 802963a:	4770      	bx	lr
