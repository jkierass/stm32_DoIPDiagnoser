
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a53c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000422c  0802a7e0  0802a7e0  0002b7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0001aaea  0802ea0c  0802ea0c  0002fa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000008dc  080494f8  080494f8  0004a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0071c300  90000000  90000000  0004c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000017c  9071c300  9071c300  00768300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08049dd4  08049dd4  0076847c  2**0
                  CONTENTS
  8 .ARM          00000008  08049dd4  08049dd4  0004add4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08049ddc  08049ddc  0076847c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08049ddc  08049ddc  0004addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08049df8  08049df8  0004adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08049e00  0004b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08049f3c  0004b140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  0804a03c  0004b240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00028f94  24000340  0804a13c  0004b340  2**2
                  ALLOC
 16 ._user_heap_stack 00002004  240292d4  0804a13c  0004c2d4  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0076847c  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00769000  2**2
                  ALLOC
 19 .debug_info   00129a6b  00000000  00000000  007684aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001c157  00000000  00000000  00891f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004508  00000000  00000000  008ae070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00006751  00000000  00000000  008b2578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00054850  00000000  00000000  008b8cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00080cc7  00000000  00000000  0090d519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001ef55a  00000000  00000000  0098e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  00b7d73a  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000bd20  00000000  00000000  00b7d7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0002fa76  00000000  00000000  00b8951c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000008d  00000000  00000000  00bb8f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a7c4 	.word	0x0802a7c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	0802a7c4 	.word	0x0802a7c4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80009e8:	4901      	ldr	r1, [pc, #4]	@ (80009f0 <vApplicationIdleHook+0x8>)
 80009ea:	2000      	movs	r0, #0
 80009ec:	f011 bad4 	b.w	8011f98 <vTaskSetApplicationTaskTag>
 80009f0:	08002439 	.word	0x08002439

080009f4 <StartTask_ASHandler>:
* @brief Function implementing the Task_ASHandler thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ASHandler */
__weak void StartTask_ASHandler(void *argument)
 80009f4:	b508      	push	{r3, lr}
 80009f6:	2001      	movs	r0, #1
 80009f8:	f00f fdb7 	bl	801056a <osDelay>
 80009fc:	e7fb      	b.n	80009f6 <StartTask_ASHandler+0x2>
	...

08000a00 <SystemClock_Config>:
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a04:	224c      	movs	r2, #76	@ 0x4c
 8000a06:	2100      	movs	r1, #0
 8000a08:	a809      	add	r0, sp, #36	@ 0x24
 8000a0a:	f029 f9f1 	bl	8029df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0e:	2220      	movs	r2, #32
 8000a10:	2100      	movs	r1, #0
 8000a12:	a801      	add	r0, sp, #4
 8000a14:	f029 f9ec 	bl	8029df0 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a18:	2004      	movs	r0, #4
 8000a1a:	f00c ff11 	bl	800d840 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <SystemClock_Config+0xbc>)
 8000a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a26:	f022 0201 	bic.w	r2, r2, #1
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <SystemClock_Config+0xc0>)
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000a3c:	619a      	str	r2, [r3, #24]
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a44:	9200      	str	r2, [sp, #0]
 8000a46:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a48:	699a      	ldr	r2, [r3, #24]
 8000a4a:	0491      	lsls	r1, r2, #18
 8000a4c:	d5fc      	bpl.n	8000a48 <SystemClock_Config+0x48>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a52:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a56:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5a:	2608      	movs	r6, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5e:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a6a:	23a0      	movs	r3, #160	@ 0xa0
 8000a6c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a70:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a76:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a7a:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7e:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f00d f9dc 	bl	800de3c <HAL_RCC_OscConfig>
 8000a84:	b108      	cbz	r0, 8000a8a <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a86:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a96:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a9c:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aa0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa4:	f00d fd66 	bl	800e574 <HAL_RCC_ClockConfig>
 8000aa8:	4601      	mov	r1, r0
 8000aaa:	b108      	cbz	r0, 8000ab0 <SystemClock_Config+0xb0>
 8000aac:	b672      	cpsid	i
  while (1)
 8000aae:	e7fe      	b.n	8000aae <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ab0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ab4:	f00d fc6e 	bl	800e394 <HAL_RCC_MCOConfig>
}
 8000ab8:	b01d      	add	sp, #116	@ 0x74
 8000aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abc:	58000400 	.word	0x58000400
 8000ac0:	58024800 	.word	0x58024800

08000ac4 <main>:
{
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000aca:	2210      	movs	r2, #16
 8000acc:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ace:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad0:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ad2:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad4:	f029 f98c 	bl	8029df0 <memset>
  HAL_MPU_Disable();
 8000ad8:	f00a f882 	bl	800abe0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000adc:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000ae0:	4bbe      	ldr	r3, [pc, #760]	@ (8000ddc <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae2:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ae4:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ae8:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000aea:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aee:	f00a f895 	bl	800ac1c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000af2:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000af6:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000afa:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000afe:	f00a f88d 	bl	800ac1c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b02:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b04:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b06:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b0a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b0e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000b12:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000b14:	2318      	movs	r3, #24
 8000b16:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b1a:	f00a f87f 	bl	800ac1c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b1e:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b20:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b22:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000b26:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000b2a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b38:	f00a f870 	bl	800ac1c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b3c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b40:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b42:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b46:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000b48:	2311      	movs	r3, #17
 8000b4a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b4e:	f00a f865 	bl	800ac1c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b52:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b54:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b56:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b5a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000b5e:	4ba0      	ldr	r3, [pc, #640]	@ (8000de0 <main+0x31c>)
 8000b60:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000b62:	230e      	movs	r3, #14
 8000b64:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b68:	f00a f858 	bl	800ac1c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f00a f845 	bl	800abfc <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b72:	4b9c      	ldr	r3, [pc, #624]	@ (8000de4 <main+0x320>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000b7a:	d111      	bne.n	8000ba0 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b80:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b84:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b8c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000b96:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b9c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ba0:	4a90      	ldr	r2, [pc, #576]	@ (8000de4 <main+0x320>)
 8000ba2:	6953      	ldr	r3, [r2, #20]
 8000ba4:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000ba8:	d123      	bne.n	8000bf2 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000baa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bae:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bb6:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bba:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bbe:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000bc2:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bc4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bc8:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bca:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bce:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd0:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000bd4:	d2f9      	bcs.n	8000bca <main+0x106>
    } while(sets-- != 0U);
 8000bd6:	3b20      	subs	r3, #32
 8000bd8:	f113 0f20 	cmn.w	r3, #32
 8000bdc:	d1f2      	bne.n	8000bc4 <main+0x100>
 8000bde:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000be2:	6953      	ldr	r3, [r2, #20]
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000be8:	6153      	str	r3, [r2, #20]
 8000bea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bee:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bf6:	4d7c      	ldr	r5, [pc, #496]	@ (8000de8 <main+0x324>)
 8000bf8:	682c      	ldr	r4, [r5, #0]
 8000bfa:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000bfe:	f000 831f 	beq.w	8001240 <main+0x77c>
 8000c02:	3b01      	subs	r3, #1
 8000c04:	d2f8      	bcs.n	8000bf8 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c06:	b672      	cpsid	i
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <main+0x144>
 8000c0a:	b672      	cpsid	i
 8000c0c:	e7fe      	b.n	8000c0c <main+0x148>
  hqspi.Instance = QUADSPI;
 8000c0e:	4877      	ldr	r0, [pc, #476]	@ (8000dec <main+0x328>)
 8000c10:	4a77      	ldr	r2, [pc, #476]	@ (8000df0 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c12:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c14:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000c16:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c1a:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c1e:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c22:	f00c ff2b 	bl	800da7c <HAL_QSPI_Init>
 8000c26:	b108      	cbz	r0, 8000c2c <main+0x168>
 8000c28:	b672      	cpsid	i
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c2c:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c30:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000c32:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c36:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c3a:	f009 fab1 	bl	800a1a0 <BSP_QSPI_Init>
 8000c3e:	b108      	cbz	r0, 8000c44 <main+0x180>
 8000c40:	b672      	cpsid	i
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c44:	f009 fa58 	bl	800a0f8 <BSP_QSPI_EnableMemoryMappedMode>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b108      	cbz	r0, 8000c50 <main+0x18c>
 8000c4c:	b672      	cpsid	i
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000c50:	4868      	ldr	r0, [pc, #416]	@ (8000df4 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c56:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000e00 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 8000c5a:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c5e:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c62:	f00a f868 	bl	800ad36 <HAL_DMA2D_Init>
 8000c66:	4604      	mov	r4, r0
 8000c68:	b108      	cbz	r0, 8000c6e <main+0x1aa>
 8000c6a:	b672      	cpsid	i
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4639      	mov	r1, r7
 8000c72:	4861      	ldr	r0, [pc, #388]	@ (8000df8 <main+0x334>)
 8000c74:	f00a ff42 	bl	800bafc <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000c78:	2014      	movs	r0, #20
 8000c7a:	f009 ff35 	bl	800aae8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000c7e:	4639      	mov	r1, r7
 8000c80:	462a      	mov	r2, r5
 8000c82:	485d      	ldr	r0, [pc, #372]	@ (8000df8 <main+0x334>)
 8000c84:	f00a ff3a 	bl	800bafc <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f009 ff2d 	bl	800aae8 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c8e:	2224      	movs	r2, #36	@ 0x24
 8000c90:	4621      	mov	r1, r4
 8000c92:	a817      	add	r0, sp, #92	@ 0x5c
 8000c94:	f029 f8ac 	bl	8029df0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c98:	2218      	movs	r2, #24
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	a811      	add	r0, sp, #68	@ 0x44
 8000c9e:	f029 f8a7 	bl	8029df0 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000ca2:	2234      	movs	r2, #52	@ 0x34
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	a82d      	add	r0, sp, #180	@ 0xb4
 8000ca8:	f029 f8a2 	bl	8029df0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000cac:	4621      	mov	r1, r4
 8000cae:	222c      	movs	r2, #44	@ 0x2c
 8000cb0:	a820      	add	r0, sp, #128	@ 0x80
 8000cb2:	f029 f89d 	bl	8029df0 <memset>
  hdsi.Instance = DSI;
 8000cb6:	4f51      	ldr	r7, [pc, #324]	@ (8000dfc <main+0x338>)
 8000cb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cbc:	a90e      	add	r1, sp, #56	@ 0x38
 8000cbe:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000cc0:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000cc2:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 8000cc6:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000cc8:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000ccc:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cd0:	f00a f97e 	bl	800afd0 <HAL_DSI_Init>
 8000cd4:	b108      	cbz	r0, 8000cda <main+0x216>
 8000cd6:	b672      	cpsid	i
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000cda:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000cde:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ce2:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ce6:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000cea:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000cec:	a917      	add	r1, sp, #92	@ 0x5c
 8000cee:	4638      	mov	r0, r7
 8000cf0:	f00a fbda 	bl	800b4a8 <HAL_DSI_ConfigHostTimeouts>
 8000cf4:	b108      	cbz	r0, 8000cfa <main+0x236>
 8000cf6:	b672      	cpsid	i
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000cfa:	2321      	movs	r3, #33	@ 0x21
 8000cfc:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000cfe:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d00:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d02:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d06:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000d08:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d0c:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d0e:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d12:	f00a fb8c 	bl	800b42e <HAL_DSI_ConfigPhyTimer>
 8000d16:	b108      	cbz	r0, 8000d1c <main+0x258>
 8000d18:	b672      	cpsid	i
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	4837      	ldr	r0, [pc, #220]	@ (8000dfc <main+0x338>)
 8000d20:	f00a fb74 	bl	800b40c <HAL_DSI_ConfigFlowControl>
 8000d24:	b108      	cbz	r0, 8000d2a <main+0x266>
 8000d26:	b672      	cpsid	i
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d2a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d2e:	4833      	ldr	r0, [pc, #204]	@ (8000dfc <main+0x338>)
 8000d30:	f00a fd43 	bl	800b7ba <HAL_DSI_SetLowPowerRXFilter>
 8000d34:	4601      	mov	r1, r0
 8000d36:	b108      	cbz	r0, 8000d3c <main+0x278>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d3c:	482f      	ldr	r0, [pc, #188]	@ (8000dfc <main+0x338>)
 8000d3e:	f00a f8e4 	bl	800af0a <HAL_DSI_ConfigErrorMonitor>
 8000d42:	b108      	cbz	r0, 8000d48 <main+0x284>
 8000d44:	b672      	cpsid	i
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d4c:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d50:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d5c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d60:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000d64:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d68:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000d70:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d74:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7c:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d84:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d8c:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d8e:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d96:	4819      	ldr	r0, [pc, #100]	@ (8000dfc <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d98:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d9c:	f00a fb02 	bl	800b3a4 <HAL_DSI_ConfigCommand>
 8000da0:	b108      	cbz	r0, 8000da6 <main+0x2e2>
 8000da2:	b672      	cpsid	i
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000da6:	2305      	movs	r3, #5
 8000da8:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000dac:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000dae:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000db0:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000db2:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000db4:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000db8:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000dba:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000dbe:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000dc0:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dc4:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000dc8:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dcc:	480b      	ldr	r0, [pc, #44]	@ (8000dfc <main+0x338>)
 8000dce:	f00a fa77 	bl	800b2c0 <HAL_DSI_ConfigAdaptedCommandMode>
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	b1b0      	cbz	r0, 8000e04 <main+0x340>
 8000dd6:	b672      	cpsid	i
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x314>
 8000dda:	bf00      	nop
 8000ddc:	0300001b 	.word	0x0300001b
 8000de0:	10040000 	.word	0x10040000
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	58024400 	.word	0x58024400
 8000dec:	24000460 	.word	0x24000460
 8000df0:	52005000 	.word	0x52005000
 8000df4:	240006a0 	.word	0x240006a0
 8000df8:	58021800 	.word	0x58021800
 8000dfc:	24000684 	.word	0x24000684
 8000e00:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e04:	4874      	ldr	r0, [pc, #464]	@ (8000fd8 <main+0x514>)
 8000e06:	f00a fa4a 	bl	800b29e <HAL_DSI_SetGenericVCID>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b108      	cbz	r0, 8000e12 <main+0x34e>
 8000e0e:	b672      	cpsid	i
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e12:	2234      	movs	r2, #52	@ 0x34
 8000e14:	4601      	mov	r1, r0
 8000e16:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000e18:	4d70      	ldr	r5, [pc, #448]	@ (8000fdc <main+0x518>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e1a:	f028 ffe9 	bl	8029df0 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e1e:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8001030 <main+0x56c>
 8000e22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000e26:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000e2a:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e2e:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000e30:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000e32:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e36:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000e3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e3e:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e42:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000e46:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e4a:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000e4e:	f240 1893 	movw	r8, #403	@ 0x193
 8000e52:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000e56:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000e5a:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e5e:	f00c f9bf 	bl	800d1e0 <HAL_LTDC_Init>
 8000e62:	4602      	mov	r2, r0
 8000e64:	b108      	cbz	r0, 8000e6a <main+0x3a6>
 8000e66:	b672      	cpsid	i
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000e6a:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000e6c:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000e6e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000e72:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000e76:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000e7a:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000e7c:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000e80:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e84:	2107      	movs	r1, #7
 8000e86:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000e8a:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e8e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e92:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000e94:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e98:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000e9a:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e9e:	f00c fa6b 	bl	800d378 <HAL_LTDC_ConfigLayer>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	b108      	cbz	r0, 8000eaa <main+0x3e6>
 8000ea6:	b672      	cpsid	i
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000eaa:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000eac:	484a      	ldr	r0, [pc, #296]	@ (8000fd8 <main+0x514>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000eae:	6993      	ldr	r3, [r2, #24]
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000eb6:	f00a fb5d 	bl	800b574 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000eba:	4949      	ldr	r1, [pc, #292]	@ (8000fe0 <main+0x51c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000ebc:	4b49      	ldr	r3, [pc, #292]	@ (8000fe4 <main+0x520>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000ebe:	484a      	ldr	r0, [pc, #296]	@ (8000fe8 <main+0x524>)
  IOCtx.GetTick     = BSP_GetTick;
 8000ec0:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <main+0x528>)
  IOCtx.Address     = 0;
 8000ec4:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000ec6:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000ec8:	4b49      	ldr	r3, [pc, #292]	@ (8000ff0 <main+0x52c>)
 8000eca:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000ecc:	f008 ff0c 	bl	8009ce8 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000ed0:	4632      	mov	r2, r6
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	4844      	ldr	r0, [pc, #272]	@ (8000fe8 <main+0x524>)
 8000ed6:	f008 fb77 	bl	80095c8 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000eda:	2328      	movs	r3, #40	@ 0x28
 8000edc:	2215      	movs	r2, #21
 8000ede:	4621      	mov	r1, r4
 8000ee0:	483d      	ldr	r0, [pc, #244]	@ (8000fd8 <main+0x514>)
 8000ee2:	9400      	str	r4, [sp, #0]
 8000ee4:	f00a fb79 	bl	800b5da <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000ee8:	a92d      	add	r1, sp, #180	@ 0xb4
 8000eea:	483b      	ldr	r0, [pc, #236]	@ (8000fd8 <main+0x514>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000eec:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000eee:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000ef2:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000ef6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000efa:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000efe:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f02:	f00a fa4f 	bl	800b3a4 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000f06:	4622      	mov	r2, r4
 8000f08:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f00c fa61 	bl	800d3d4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000f12:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000f14:	4837      	ldr	r0, [pc, #220]	@ (8000ff4 <main+0x530>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000f16:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f18:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000f20:	4b35      	ldr	r3, [pc, #212]	@ (8000ff8 <main+0x534>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f22:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000f24:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f26:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f2a:	f009 fea3 	bl	800ac74 <HAL_CRC_Init>
 8000f2e:	b108      	cbz	r0, 8000f34 <main+0x470>
 8000f30:	b672      	cpsid	i
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000f34:	4831      	ldr	r0, [pc, #196]	@ (8000ffc <main+0x538>)
 8000f36:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <main+0x53c>)
 8000f38:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000f3a:	f00b fb39 	bl	800c5b0 <HAL_JPEG_Init>
 8000f3e:	b108      	cbz	r0, 8000f44 <main+0x480>
 8000f40:	b672      	cpsid	i
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <main+0x47e>
  huart1.Instance = USART1;
 8000f44:	4c2f      	ldr	r4, [pc, #188]	@ (8001004 <main+0x540>)
  huart1.Init.BaudRate = 115200;
 8000f46:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f4a:	492f      	ldr	r1, [pc, #188]	@ (8001008 <main+0x544>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f4e:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8000f50:	e9c4 1300 	strd	r1, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f54:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f56:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5c:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f60:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f64:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f68:	f00f f937 	bl	80101da <HAL_UART_Init>
 8000f6c:	4601      	mov	r1, r0
 8000f6e:	b108      	cbz	r0, 8000f74 <main+0x4b0>
 8000f70:	b672      	cpsid	i
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f74:	4620      	mov	r0, r4
 8000f76:	f00f f99e 	bl	80102b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	b108      	cbz	r0, 8000f82 <main+0x4be>
 8000f7e:	b672      	cpsid	i
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f82:	4620      	mov	r0, r4
 8000f84:	f00f f9b7 	bl	80102f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f88:	b108      	cbz	r0, 8000f8e <main+0x4ca>
 8000f8a:	b672      	cpsid	i
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f00f f976 	bl	8010280 <HAL_UARTEx_DisableFifoMode>
 8000f94:	4604      	mov	r4, r0
 8000f96:	b108      	cbz	r0, 8000f9c <main+0x4d8>
 8000f98:	b672      	cpsid	i
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <main+0x4d6>
  MX_TouchGFX_Init();
 8000f9c:	f000 fdf8 	bl	8001b90 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000fa0:	f000 fdf5 	bl	8001b8e <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000fa4:	f00f fa6e 	bl	8010484 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fa8:	4a18      	ldr	r2, [pc, #96]	@ (800100c <main+0x548>)
 8000faa:	4621      	mov	r1, r4
 8000fac:	4818      	ldr	r0, [pc, #96]	@ (8001010 <main+0x54c>)
 8000fae:	f00f fa95 	bl	80104dc <osThreadNew>
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <main+0x550>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fb4:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <main+0x554>)
 8000fb6:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fb8:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fba:	4818      	ldr	r0, [pc, #96]	@ (800101c <main+0x558>)
 8000fbc:	f00f fa8e 	bl	80104dc <osThreadNew>
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <main+0x55c>)
  Task_ASHandlerHandle = osThreadNew(StartTask_ASHandler, NULL, &Task_ASHandler_attributes);
 8000fc2:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <main+0x560>)
 8000fc4:	4621      	mov	r1, r4
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fc6:	6018      	str	r0, [r3, #0]
  Task_ASHandlerHandle = osThreadNew(StartTask_ASHandler, NULL, &Task_ASHandler_attributes);
 8000fc8:	4817      	ldr	r0, [pc, #92]	@ (8001028 <main+0x564>)
 8000fca:	f00f fa87 	bl	80104dc <osThreadNew>
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <main+0x568>)
 8000fd0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000fd2:	f00f fa69 	bl	80104a8 <osKernelStart>
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <main+0x512>
 8000fd8:	24000684 	.word	0x24000684
 8000fdc:	240004ac 	.word	0x240004ac
 8000fe0:	2400035c 	.word	0x2400035c
 8000fe4:	0800a0c9 	.word	0x0800a0c9
 8000fe8:	2400036c 	.word	0x2400036c
 8000fec:	08002139 	.word	0x08002139
 8000ff0:	08002171 	.word	0x08002171
 8000ff4:	24000708 	.word	0x24000708
 8000ff8:	58024c00 	.word	0x58024c00
 8000ffc:	2400062c 	.word	0x2400062c
 8001000:	52003000 	.word	0x52003000
 8001004:	240003cc 	.word	0x240003cc
 8001008:	40011000 	.word	0x40011000
 800100c:	0802a890 	.word	0x0802a890
 8001010:	08001b9f 	.word	0x08001b9f
 8001014:	24000394 	.word	0x24000394
 8001018:	0802a86c 	.word	0x0802a86c
 800101c:	08003cdd 	.word	0x08003cdd
 8001020:	24000390 	.word	0x24000390
 8001024:	0802a848 	.word	0x0802a848
 8001028:	080009f5 	.word	0x080009f5
 800102c:	2400038c 	.word	0x2400038c
 8001030:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	2214      	movs	r2, #20
 8001036:	2100      	movs	r1, #0
 8001038:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f028 fed8 	bl	8029df0 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001040:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800104a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	488d      	ldr	r0, [pc, #564]	@ (8001284 <main+0x7c0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	f04f 0900 	mov.w	r9, #0
 8001054:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001056:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800105e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001066:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800106c:	9304      	str	r3, [sp, #16]
 800106e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800107c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	9305      	str	r3, [sp, #20]
 8001086:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800108c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001090:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001094:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800109c:	9306      	str	r3, [sp, #24]
 800109e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	9307      	str	r3, [sp, #28]
 80010b6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010cc:	9308      	str	r3, [sp, #32]
 80010ce:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80010e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010f0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010f4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80010fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001100:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800110c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001124:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	930c      	str	r3, [sp, #48]	@ 0x30
 800112e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001130:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001134:	f043 0320 	orr.w	r3, r3, #32
 8001138:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800113c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	930d      	str	r3, [sp, #52]	@ 0x34
 8001146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001148:	f00a fcd8 	bl	800bafc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2108      	movs	r1, #8
 8001150:	484d      	ldr	r0, [pc, #308]	@ (8001288 <main+0x7c4>)
 8001152:	f00a fcd3 	bl	800bafc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800115c:	484b      	ldr	r0, [pc, #300]	@ (800128c <main+0x7c8>)
 800115e:	f00a fccd 	bl	800bafc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001166:	a92d      	add	r1, sp, #180	@ 0xb4
 8001168:	4846      	ldr	r0, [pc, #280]	@ (8001284 <main+0x7c0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001172:	f00a fb39 	bl	800b7e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	a92d      	add	r1, sp, #180	@ 0xb4
 8001178:	4845      	ldr	r0, [pc, #276]	@ (8001290 <main+0x7cc>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800117a:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f00a fb2f 	bl	800b7e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800118a:	a92d      	add	r1, sp, #180	@ 0xb4
 800118c:	483e      	ldr	r0, [pc, #248]	@ (8001288 <main+0x7c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001196:	f00a fb27 	bl	800b7e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800119a:	a92d      	add	r1, sp, #180	@ 0xb4
 800119c:	483b      	ldr	r0, [pc, #236]	@ (800128c <main+0x7c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f00a fb1f 	bl	800b7e8 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011aa:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011ae:	464a      	mov	r2, r9
 80011b0:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011b2:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011b4:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80011b6:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011ba:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80011be:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011c2:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011c4:	402b      	ands	r3, r5
 80011c6:	9303      	str	r3, [sp, #12]
 80011c8:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011ca:	f009 fcb7 	bl	800ab3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80011ce:	207a      	movs	r0, #122	@ 0x7a
 80011d0:	f009 fce6 	bl	800aba0 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80011d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001294 <main+0x7d0>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011d6:	4830      	ldr	r0, [pc, #192]	@ (8001298 <main+0x7d4>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011d8:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <main+0x7d8>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011e8:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011ec:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80011f0:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 80011f2:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80011f6:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80011fa:	2320      	movs	r3, #32
 80011fc:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001200:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001204:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001210:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8001212:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8001216:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 800121a:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800121e:	f00e faa3 	bl	800f768 <HAL_SDRAM_Init>
 8001222:	4681      	mov	r9, r0
 8001224:	2800      	cmp	r0, #0
 8001226:	f47f acf0 	bne.w	8000c0a <main+0x146>
  BSP_SDRAM_DeInit(0);
 800122a:	f009 f973 	bl	800a514 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800122e:	4648      	mov	r0, r9
 8001230:	f009 f9be 	bl	800a5b0 <BSP_SDRAM_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2800      	cmp	r0, #0
 8001238:	f43f ace9 	beq.w	8000c0e <main+0x14a>
 800123c:	b672      	cpsid	i
  while (1)
 800123e:	e7fe      	b.n	800123e <main+0x77a>
  HAL_Init();
 8001240:	f009 fc12 	bl	800aa68 <HAL_Init>
  SystemClock_Config();
 8001244:	f7ff fbdc 	bl	8000a00 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8001248:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 800124c:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 800124e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001252:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001256:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800125a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001262:	f00a fc59 	bl	800bb18 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8001266:	4621      	mov	r1, r4
 8001268:	4620      	mov	r0, r4
 800126a:	f00a fc63 	bl	800bb34 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800126e:	4c0c      	ldr	r4, [pc, #48]	@ (80012a0 <main+0x7dc>)
timeout = 0xFFFF;
 8001270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	0412      	lsls	r2, r2, #16
 8001278:	f53f aedc 	bmi.w	8001034 <main+0x570>
 800127c:	3b01      	subs	r3, #1
 800127e:	d2f9      	bcs.n	8001274 <main+0x7b0>
 8001280:	b672      	cpsid	i
  while (1)
 8001282:	e7fe      	b.n	8001282 <main+0x7be>
 8001284:	58022400 	.word	0x58022400
 8001288:	58021800 	.word	0x58021800
 800128c:	58021400 	.word	0x58021400
 8001290:	58020000 	.word	0x58020000
 8001294:	52004000 	.word	0x52004000
 8001298:	24000398 	.word	0x24000398
 800129c:	52004140 	.word	0x52004140
 80012a0:	58024400 	.word	0x58024400

080012a4 <__io_putchar>:
{
 80012a4:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80012a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
{
 80012aa:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80012ac:	2201      	movs	r2, #1
 80012ae:	a901      	add	r1, sp, #4
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <__io_putchar+0x1c>)
 80012b2:	f00e fee2 	bl	801007a <HAL_UART_Transmit>
}
 80012b6:	9801      	ldr	r0, [sp, #4]
 80012b8:	b003      	add	sp, #12
 80012ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80012be:	bf00      	nop
 80012c0:	240003cc 	.word	0x240003cc

080012c4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80012c4:	6802      	ldr	r2, [r0, #0]
 80012c6:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d101      	bne.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80012cc:	f009 bbfa 	b.w	800aac4 <HAL_IncTick>
}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40001000 	.word	0x40001000

080012d8 <Error_Handler>:
 80012d8:	b672      	cpsid	i
  while (1)
 80012da:	e7fe      	b.n	80012da <Error_Handler+0x2>

080012dc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_MspInit+0x2c>)
{
 80012de:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012e0:	210f      	movs	r1, #15
 80012e2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80012ea:	f042 0202 	orr.w	r2, r2, #2
 80012ee:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012f2:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001300:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001302:	f009 bc1b 	b.w	800ab3c <HAL_NVIC_SetPriority>
 8001306:	bf00      	nop
 8001308:	58024400 	.word	0x58024400

0800130c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800130c:	6802      	ldr	r2, [r0, #0]
{
 800130e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_CRC_MspInit+0x2c>)
 8001312:	429a      	cmp	r2, r3
 8001314:	d10d      	bne.n	8001332 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001316:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800131a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800131e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001322:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001332:	b002      	add	sp, #8
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	58024c00 	.word	0x58024c00

0800133c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_DMA2D_MspInit+0x40>)
{
 800133e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001340:	6802      	ldr	r2, [r0, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d117      	bne.n	8001376 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001348:	2107      	movs	r1, #7
 800134a:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800134c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001350:	f042 0210 	orr.w	r2, r2, #16
 8001354:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001358:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800135a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001366:	f009 fbe9 	bl	800ab3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800136a:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800136c:	b003      	add	sp, #12
 800136e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001372:	f009 bc15 	b.w	800aba0 <HAL_NVIC_EnableIRQ>
}
 8001376:	b003      	add	sp, #12
 8001378:	f85d fb04 	ldr.w	pc, [sp], #4
 800137c:	52001000 	.word	0x52001000
 8001380:	58024400 	.word	0x58024400

08001384 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001384:	b510      	push	{r4, lr}
 8001386:	b0ba      	sub	sp, #232	@ 0xe8
 8001388:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	2214      	movs	r2, #20
 800138c:	2100      	movs	r1, #0
 800138e:	a803      	add	r0, sp, #12
 8001390:	f028 fd2e 	bl	8029df0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	22c8      	movs	r2, #200	@ 0xc8
 8001396:	2100      	movs	r1, #0
 8001398:	a808      	add	r0, sp, #32
 800139a:	f028 fd29 	bl	8029df0 <memset>
  if(hdsi->Instance==DSI)
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a4:	d138      	bne.n	8001418 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013aa:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ac:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b2:	f00d fb65 	bl	800ea80 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	b108      	cbz	r0, 80013bc <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80013b8:	f7ff ff8e 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013c0:	a903      	add	r1, sp, #12
 80013c2:	4817      	ldr	r0, [pc, #92]	@ (8001420 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80013c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013c8:	f042 0210 	orr.w	r2, r2, #16
 80013cc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80013d0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013d4:	f002 0210 	and.w	r2, r2, #16
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80013fc:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001402:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001404:	f00a f9f0 	bl	800b7e8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001408:	207b      	movs	r0, #123	@ 0x7b
 800140a:	4622      	mov	r2, r4
 800140c:	2107      	movs	r1, #7
 800140e:	f009 fb95 	bl	800ab3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001412:	207b      	movs	r0, #123	@ 0x7b
 8001414:	f009 fbc4 	bl	800aba0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001418:	b03a      	add	sp, #232	@ 0xe8
 800141a:	bd10      	pop	{r4, pc}
 800141c:	58024400 	.word	0x58024400
 8001420:	58022400 	.word	0x58022400

08001424 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001424:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <HAL_JPEG_MspInit+0xf4>)
{
 8001428:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 800142a:	6802      	ldr	r2, [r0, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d170      	bne.n	8001512 <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001430:	4b3a      	ldr	r3, [pc, #232]	@ (800151c <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001432:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001434:	4c3a      	ldr	r4, [pc, #232]	@ (8001520 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001436:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 800143a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800143e:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 800152c <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001442:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800144c:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800144e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800145a:	2311      	movs	r3, #17
 800145c:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001466:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800146a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800146c:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800146e:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001472:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001476:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800147a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800147e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001482:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001486:	f00c f810 	bl	800d4aa <HAL_MDMA_Init>
 800148a:	b108      	cbz	r0, 8001490 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 800148c:	f7ff ff24 	bl	80012d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001490:	2200      	movs	r2, #0
 8001492:	4823      	ldr	r0, [pc, #140]	@ (8001520 <HAL_JPEG_MspInit+0xfc>)
 8001494:	4611      	mov	r1, r2
 8001496:	f00c f896 	bl	800d5c6 <HAL_MDMA_ConfigPostRequestMask>
 800149a:	b108      	cbz	r0, 80014a0 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 800149c:	f7ff ff1c 	bl	80012d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014a0:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014a2:	2313      	movs	r3, #19
 80014a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001524 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014a6:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014a8:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014aa:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80014ae:	4c1e      	ldr	r4, [pc, #120]	@ (8001528 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014b0:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80014b4:	2300      	movs	r3, #0
 80014b6:	22c0      	movs	r2, #192	@ 0xc0
 80014b8:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014bc:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014be:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014c0:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80014c8:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014cc:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80014d0:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014d4:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80014d6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80014da:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014de:	f00b ffe4 	bl	800d4aa <HAL_MDMA_Init>
 80014e2:	b108      	cbz	r0, 80014e8 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80014e4:	f7ff fef8 	bl	80012d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80014e8:	2200      	movs	r2, #0
 80014ea:	480f      	ldr	r0, [pc, #60]	@ (8001528 <HAL_JPEG_MspInit+0x104>)
 80014ec:	4611      	mov	r1, r2
 80014ee:	f00c f86a 	bl	800d5c6 <HAL_MDMA_ConfigPostRequestMask>
 80014f2:	b108      	cbz	r0, 80014f8 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80014f4:	f7ff fef0 	bl	80012d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80014f8:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2105      	movs	r1, #5
 80014fe:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001500:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001502:	f009 fb1b 	bl	800ab3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001506:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001508:	b003      	add	sp, #12
 800150a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800150e:	f009 bb47 	b.w	800aba0 <HAL_NVIC_EnableIRQ>
}
 8001512:	b003      	add	sp, #12
 8001514:	bd30      	pop	{r4, r5, pc}
 8001516:	bf00      	nop
 8001518:	52003000 	.word	0x52003000
 800151c:	58024400 	.word	0x58024400
 8001520:	240005c0 	.word	0x240005c0
 8001524:	520001c0 	.word	0x520001c0
 8001528:	24000554 	.word	0x24000554
 800152c:	52000200 	.word	0x52000200

08001530 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001530:	b510      	push	{r4, lr}
 8001532:	b0b4      	sub	sp, #208	@ 0xd0
 8001534:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001536:	22c8      	movs	r2, #200	@ 0xc8
 8001538:	2100      	movs	r1, #0
 800153a:	a802      	add	r0, sp, #8
 800153c:	f028 fc58 	bl	8029df0 <memset>
  if(hltdc->Instance==LTDC)
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_LTDC_MspInit+0x74>)
 8001544:	429a      	cmp	r2, r3
 8001546:	d12b      	bne.n	80015a0 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001548:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800154c:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800154e:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001550:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001552:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001556:	23a1      	movs	r3, #161	@ 0xa1
 8001558:	2205      	movs	r2, #5
 800155a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800155e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001560:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001564:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001568:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156c:	f00d fa88 	bl	800ea80 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	b108      	cbz	r0, 8001576 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001572:	f7ff feb1 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001578:	2058      	movs	r0, #88	@ 0x58
 800157a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 800157c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001580:	f042 0208 	orr.w	r2, r2, #8
 8001584:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001588:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 800158a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001596:	f009 fad1 	bl	800ab3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800159a:	2058      	movs	r0, #88	@ 0x58
 800159c:	f009 fb00 	bl	800aba0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015a0:	b034      	add	sp, #208	@ 0xd0
 80015a2:	bd10      	pop	{r4, pc}
 80015a4:	50001000 	.word	0x50001000
 80015a8:	58024400 	.word	0x58024400

080015ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	b0bf      	sub	sp, #252	@ 0xfc
 80015b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	2214      	movs	r2, #20
 80015b4:	2100      	movs	r1, #0
 80015b6:	a807      	add	r0, sp, #28
 80015b8:	f028 fc1a 	bl	8029df0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015bc:	22c8      	movs	r2, #200	@ 0xc8
 80015be:	2100      	movs	r1, #0
 80015c0:	a80c      	add	r0, sp, #48	@ 0x30
 80015c2:	f028 fc15 	bl	8029df0 <memset>
  if(hqspi->Instance==QUADSPI)
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_QSPI_MspInit+0x16c>)
 80015ca:	429a      	cmp	r2, r3
 80015cc:	f040 80a1 	bne.w	8001712 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015d4:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f00d fa50 	bl	800ea80 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	b108      	cbz	r0, 80015e6 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80015e2:	f7ff fe79 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015e6:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015ec:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f2:	a907      	add	r1, sp, #28
 80015f4:	484a      	ldr	r0, [pc, #296]	@ (8001720 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015f6:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015fc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001600:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001604:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001608:	9201      	str	r2, [sp, #4]
 800160a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800160c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001614:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001618:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800161c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001620:	9202      	str	r2, [sp, #8]
 8001622:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001624:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001630:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001634:	f002 0220 	and.w	r2, r2, #32
 8001638:	9203      	str	r2, [sp, #12]
 800163a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800163c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001640:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001644:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001648:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800164c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001650:	9204      	str	r2, [sp, #16]
 8001652:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001658:	f042 0202 	orr.w	r2, r2, #2
 800165c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001660:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001664:	f002 0202 	and.w	r2, r2, #2
 8001668:	9205      	str	r2, [sp, #20]
 800166a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001670:	f042 0208 	orr.w	r2, r2, #8
 8001674:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	9306      	str	r3, [sp, #24]
 8001682:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001688:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001690:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	f00a f8a9 	bl	800b7e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001696:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001698:	a907      	add	r1, sp, #28
 800169a:	4821      	ldr	r0, [pc, #132]	@ (8001720 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800169c:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a6:	f00a f89f 	bl	800b7e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016aa:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ac:	a907      	add	r1, sp, #28
 80016ae:	481d      	ldr	r0, [pc, #116]	@ (8001724 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b0:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ba:	f00a f895 	bl	800b7e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016be:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c2:	a907      	add	r1, sp, #28
 80016c4:	4817      	ldr	r0, [pc, #92]	@ (8001724 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016c6:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	f00a f88a 	bl	800b7e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016d6:	a907      	add	r1, sp, #28
 80016d8:	4813      	ldr	r0, [pc, #76]	@ (8001728 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016da:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e4:	f00a f880 	bl	800b7e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016e8:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	a907      	add	r1, sp, #28
 80016ec:	480f      	ldr	r0, [pc, #60]	@ (800172c <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ee:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f00a f876 	bl	800b7e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001700:	a907      	add	r1, sp, #28
 8001702:	480b      	ldr	r0, [pc, #44]	@ (8001730 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001704:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170e:	f00a f86b 	bl	800b7e8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001712:	b03f      	add	sp, #252	@ 0xfc
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	bf00      	nop
 8001718:	52005000 	.word	0x52005000
 800171c:	58024400 	.word	0x58024400
 8001720:	58021800 	.word	0x58021800
 8001724:	58021400 	.word	0x58021400
 8001728:	58021c00 	.word	0x58021c00
 800172c:	58020400 	.word	0x58020400
 8001730:	58020c00 	.word	0x58020c00

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b510      	push	{r4, lr}
 8001736:	b0ba      	sub	sp, #232	@ 0xe8
 8001738:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	2214      	movs	r2, #20
 800173c:	2100      	movs	r1, #0
 800173e:	a803      	add	r0, sp, #12
 8001740:	f028 fb56 	bl	8029df0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	22c8      	movs	r2, #200	@ 0xc8
 8001746:	2100      	movs	r1, #0
 8001748:	a808      	add	r0, sp, #32
 800174a:	f028 fb51 	bl	8029df0 <memset>
  if(huart->Instance==USART1)
 800174e:	6822      	ldr	r2, [r4, #0]
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_UART_MspInit+0x88>)
 8001752:	429a      	cmp	r2, r3
 8001754:	d130      	bne.n	80017b8 <HAL_UART_MspInit+0x84>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001756:	2201      	movs	r2, #1
 8001758:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800175c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001760:	f00d f98e 	bl	800ea80 <HAL_RCCEx_PeriphCLKConfig>
 8001764:	b108      	cbz	r0, 800176a <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001766:	f7ff fdb7 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	a903      	add	r1, sp, #12
 800176e:	4815      	ldr	r0, [pc, #84]	@ (80017c4 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001770:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001774:	f042 0210 	orr.w	r2, r2, #16
 8001778:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800177c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001780:	f002 0210 	and.w	r2, r2, #16
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b0:	2307      	movs	r3, #7
 80017b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f00a f818 	bl	800b7e8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017b8:	b03a      	add	sp, #232	@ 0xe8
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	40011000 	.word	0x40011000
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58020000 	.word	0x58020000

080017c8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017cc:	2100      	movs	r1, #0
 80017ce:	2214      	movs	r2, #20
 80017d0:	a801      	add	r0, sp, #4
 80017d2:	f028 fb0d 	bl	8029df0 <memset>
  if (FMC_Initialized) {
 80017d6:	4b3f      	ldr	r3, [pc, #252]	@ (80018d4 <HAL_SDRAM_MspInit+0x10c>)
 80017d8:	6819      	ldr	r1, [r3, #0]
 80017da:	2900      	cmp	r1, #0
 80017dc:	d177      	bne.n	80018ce <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80017de:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80017e2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	22c0      	movs	r2, #192	@ 0xc0
 80017e6:	f028 fb03 	bl	8029df0 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80017ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017ee:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f0:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80017f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f6:	f00d f943 	bl	800ea80 <HAL_RCCEx_PeriphCLKConfig>
 80017fa:	b108      	cbz	r0, 8001800 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80017fc:	f7ff fd6c 	bl	80012d8 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001800:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2600      	movs	r6, #0
 8001806:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001808:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800180c:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800180e:	a901      	add	r1, sp, #4
 8001810:	4832      	ldr	r0, [pc, #200]	@ (80018dc <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001812:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001816:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800181a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800181e:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001834:	f009 ffd8 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001838:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	a901      	add	r1, sp, #4
 800183c:	4828      	ldr	r0, [pc, #160]	@ (80018e0 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800183e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f009 ffce 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800184c:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001850:	a901      	add	r1, sp, #4
 8001852:	4824      	ldr	r0, [pc, #144]	@ (80018e4 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001854:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185e:	f009 ffc3 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001862:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001866:	a901      	add	r1, sp, #4
 8001868:	481f      	ldr	r0, [pc, #124]	@ (80018e8 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001874:	f009 ffb8 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001878:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800187c:	a901      	add	r1, sp, #4
 800187e:	481b      	ldr	r0, [pc, #108]	@ (80018ec <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001880:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188a:	f009 ffad 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800188e:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001892:	a901      	add	r1, sp, #4
 8001894:	4816      	ldr	r0, [pc, #88]	@ (80018f0 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001896:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f009 ffa2 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80018a4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a8:	a901      	add	r1, sp, #4
 80018aa:	4812      	ldr	r0, [pc, #72]	@ (80018f4 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	f009 ff97 	bl	800b7e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ba:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	a901      	add	r1, sp, #4
 80018be:	480e      	ldr	r0, [pc, #56]	@ (80018f8 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f009 ff8d 	bl	800b7e8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018ce:	b039      	add	sp, #228	@ 0xe4
 80018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	24000730 	.word	0x24000730
 80018d8:	58024400 	.word	0x58024400
 80018dc:	58022000 	.word	0x58022000
 80018e0:	58020400 	.word	0x58020400
 80018e4:	58021000 	.word	0x58021000
 80018e8:	58021c00 	.word	0x58021c00
 80018ec:	58021800 	.word	0x58021800
 80018f0:	58020c00 	.word	0x58020c00
 80018f4:	58021400 	.word	0x58021400
 80018f8:	58020800 	.word	0x58020800

080018fc <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80018fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <HAL_SDRAM_MspDeInit+0x6c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001900:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 8001902:	bb82      	cbnz	r2, 8001966 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001906:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001908:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 800190c:	4818      	ldr	r0, [pc, #96]	@ (8001970 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 800190e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001910:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001918:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 800191c:	f00a f84c 	bl	800b9b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001920:	2160      	movs	r1, #96	@ 0x60
 8001922:	4814      	ldr	r0, [pc, #80]	@ (8001974 <HAL_SDRAM_MspDeInit+0x78>)
 8001924:	f00a f848 	bl	800b9b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001928:	f64f 7183 	movw	r1, #65411	@ 0xff83
 800192c:	4812      	ldr	r0, [pc, #72]	@ (8001978 <HAL_SDRAM_MspDeInit+0x7c>)
 800192e:	f00a f843 	bl	800b9b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001932:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001936:	4811      	ldr	r0, [pc, #68]	@ (800197c <HAL_SDRAM_MspDeInit+0x80>)
 8001938:	f00a f83e 	bl	800b9b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800193c:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001940:	480f      	ldr	r0, [pc, #60]	@ (8001980 <HAL_SDRAM_MspDeInit+0x84>)
 8001942:	f00a f839 	bl	800b9b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001946:	f24c 7103 	movw	r1, #50947	@ 0xc703
 800194a:	480e      	ldr	r0, [pc, #56]	@ (8001984 <HAL_SDRAM_MspDeInit+0x88>)
 800194c:	f00a f834 	bl	800b9b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001950:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <HAL_SDRAM_MspDeInit+0x8c>)
 8001956:	f00a f82f 	bl	800b9b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800195a:	4621      	mov	r1, r4
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800195e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001962:	f00a b829 	b.w	800b9b8 <HAL_GPIO_DeInit>
}
 8001966:	bd10      	pop	{r4, pc}
 8001968:	2400072c 	.word	0x2400072c
 800196c:	58024400 	.word	0x58024400
 8001970:	58022000 	.word	0x58022000
 8001974:	58020400 	.word	0x58020400
 8001978:	58021000 	.word	0x58021000
 800197c:	58021c00 	.word	0x58021c00
 8001980:	58021800 	.word	0x58021800
 8001984:	58020c00 	.word	0x58020c00
 8001988:	58021400 	.word	0x58021400
 800198c:	58020800 	.word	0x58020800

08001990 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001990:	280f      	cmp	r0, #15
{
 8001992:	b510      	push	{r4, lr}
 8001994:	4604      	mov	r4, r0
 8001996:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001998:	d902      	bls.n	80019a0 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800199a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800199c:	b00a      	add	sp, #40	@ 0x28
 800199e:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80019a0:	4601      	mov	r1, r0
 80019a2:	2200      	movs	r2, #0
 80019a4:	2036      	movs	r0, #54	@ 0x36
 80019a6:	f009 f8c9 	bl	800ab3c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019aa:	2036      	movs	r0, #54	@ 0x36
 80019ac:	f009 f8f8 	bl	800aba0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80019b0:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b2:	4669      	mov	r1, sp
 80019b4:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80019b6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <HAL_InitTick+0x88>)
 80019ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80019be:	f042 0210 	orr.w	r2, r2, #16
 80019c2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80019c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d2:	f00c ff3b 	bl	800e84c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019d6:	9b07      	ldr	r3, [sp, #28]
 80019d8:	b9c3      	cbnz	r3, 8001a0c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019da:	f00c ff13 	bl	800e804 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80019de:	4c0f      	ldr	r4, [pc, #60]	@ (8001a1c <HAL_InitTick+0x8c>)
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_InitTick+0x90>)
 80019e2:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019e4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80019e8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_InitTick+0x94>)
 80019ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80019f0:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80019f2:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80019f4:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019f6:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80019f8:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019fc:	f00e f8aa 	bl	800fb54 <HAL_TIM_Base_Init>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d1ca      	bne.n	800199a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a04:	4620      	mov	r0, r4
 8001a06:	f00d ff57 	bl	800f8b8 <HAL_TIM_Base_Start_IT>
 8001a0a:	e7c7      	b.n	800199c <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a0c:	f00c fefa 	bl	800e804 <HAL_RCC_GetPCLK1Freq>
 8001a10:	0040      	lsls	r0, r0, #1
 8001a12:	e7e4      	b.n	80019de <HAL_InitTick+0x4e>
 8001a14:	24000074 	.word	0x24000074
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	24000734 	.word	0x24000734
 8001a20:	40001000 	.word	0x40001000
 8001a24:	000f4240 	.word	0x000f4240

08001a28 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler>

08001a2a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler>

08001a2c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler>

08001a2e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler>

08001a30 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler>

08001a32 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a32:	4770      	bx	lr

08001a34 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a34:	4801      	ldr	r0, [pc, #4]	@ (8001a3c <TIM6_DAC_IRQHandler+0x8>)
 8001a36:	f00d bf81 	b.w	800f93c <HAL_TIM_IRQHandler>
 8001a3a:	bf00      	nop
 8001a3c:	24000734 	.word	0x24000734

08001a40 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a40:	4801      	ldr	r0, [pc, #4]	@ (8001a48 <LTDC_IRQHandler+0x8>)
 8001a42:	f00b bc3c 	b.w	800d2be <HAL_LTDC_IRQHandler>
 8001a46:	bf00      	nop
 8001a48:	240004ac 	.word	0x240004ac

08001a4c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a4c:	4801      	ldr	r0, [pc, #4]	@ (8001a54 <DMA2D_IRQHandler+0x8>)
 8001a4e:	f009 b9b1 	b.w	800adb4 <HAL_DMA2D_IRQHandler>
 8001a52:	bf00      	nop
 8001a54:	240006a0 	.word	0x240006a0

08001a58 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001a58:	4801      	ldr	r0, [pc, #4]	@ (8001a60 <JPEG_IRQHandler+0x8>)
 8001a5a:	f00b bae1 	b.w	800d020 <HAL_JPEG_IRQHandler>
 8001a5e:	bf00      	nop
 8001a60:	2400062c 	.word	0x2400062c

08001a64 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a64:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <MDMA_IRQHandler+0x14>)
{
 8001a66:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a68:	f00b fe32 	bl	800d6d0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a6c:	4803      	ldr	r0, [pc, #12]	@ (8001a7c <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a72:	f00b be2d 	b.w	800d6d0 <HAL_MDMA_IRQHandler>
 8001a76:	bf00      	nop
 8001a78:	24000554 	.word	0x24000554
 8001a7c:	240005c0 	.word	0x240005c0

08001a80 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001a80:	4801      	ldr	r0, [pc, #4]	@ (8001a88 <DSI_IRQHandler+0x8>)
 8001a82:	f009 bb9a 	b.w	800b1ba <HAL_DSI_IRQHandler>
 8001a86:	bf00      	nop
 8001a88:	24000684 	.word	0x24000684

08001a8c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	4770      	bx	lr

08001a90 <_kill>:

int _kill(int pid, int sig)
{
 8001a90:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a92:	f028 fa61 	bl	8029f58 <__errno>
 8001a96:	2316      	movs	r3, #22
 8001a98:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9e:	bd08      	pop	{r3, pc}

08001aa0 <_exit>:

void _exit (int status)
{
 8001aa0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001aa2:	f028 fa59 	bl	8029f58 <__errno>
 8001aa6:	2316      	movs	r3, #22
 8001aa8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001aaa:	e7fe      	b.n	8001aaa <_exit+0xa>

08001aac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	460d      	mov	r5, r1
 8001ab0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	460e      	mov	r6, r1
 8001ab4:	1b73      	subs	r3, r6, r5
 8001ab6:	429c      	cmp	r4, r3
 8001ab8:	dc01      	bgt.n	8001abe <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001aba:	4620      	mov	r0, r4
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001abe:	f3af 8000 	nop.w
 8001ac2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	e7f5      	b.n	8001ab4 <_read+0x8>

08001ac8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	460d      	mov	r5, r1
 8001acc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	460e      	mov	r6, r1
 8001ad0:	1b73      	subs	r3, r6, r5
 8001ad2:	429c      	cmp	r4, r3
 8001ad4:	dc01      	bgt.n	8001ada <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001ada:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001ade:	f7ff fbe1 	bl	80012a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	e7f5      	b.n	8001ad0 <_write+0x8>

08001ae4 <_close>:

int _close(int file)
{
	return -1;
}
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001aea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001aee:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001af0:	604b      	str	r3, [r1, #4]
}
 8001af2:	4770      	bx	lr

08001af4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001af4:	2001      	movs	r0, #1
 8001af6:	4770      	bx	lr

08001af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001af8:	2000      	movs	r0, #0
 8001afa:	4770      	bx	lr

08001afc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4a0b      	ldr	r2, [pc, #44]	@ (8001b2c <_sbrk+0x30>)
{
 8001afe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b00:	6811      	ldr	r1, [r2, #0]
{
 8001b02:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b04:	b909      	cbnz	r1, 8001b0a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b06:	490a      	ldr	r1, [pc, #40]	@ (8001b30 <_sbrk+0x34>)
 8001b08:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	6810      	ldr	r0, [r2, #0]
 8001b0c:	4909      	ldr	r1, [pc, #36]	@ (8001b34 <_sbrk+0x38>)
 8001b0e:	4c0a      	ldr	r4, [pc, #40]	@ (8001b38 <_sbrk+0x3c>)
 8001b10:	4403      	add	r3, r0
 8001b12:	1b09      	subs	r1, r1, r4
 8001b14:	428b      	cmp	r3, r1
 8001b16:	d906      	bls.n	8001b26 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b18:	f028 fa1e 	bl	8029f58 <__errno>
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b24:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b26:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b28:	e7fc      	b.n	8001b24 <_sbrk+0x28>
 8001b2a:	bf00      	nop
 8001b2c:	24000780 	.word	0x24000780
 8001b30:	240292d8 	.word	0x240292d8
 8001b34:	24080000 	.word	0x24080000
 8001b38:	00001000 	.word	0x00001000

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b40:	f008 ff22 	bl	800a988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b46:	490d      	ldr	r1, [pc, #52]	@ (8001b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f028 f9fb 	bl	8029f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7fe ffa9 	bl	8000ac4 <main>
  bx  lr
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b7c:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001b80:	08049e00 	.word	0x08049e00
  ldr r2, =_sbss
 8001b84:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001b88:	240292d4 	.word	0x240292d4

08001b8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC3_IRQHandler>

08001b8e <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001b8e:	4770      	bx	lr

08001b90 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001b90:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001b92:	f001 fd19 	bl	80035c8 <touchgfx_components_init>
    touchgfx_init();
}
 8001b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001b9a:	f001 bc9b 	b.w	80034d4 <touchgfx_init>

08001b9e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001b9e:	f001 bd15 	b.w	80035cc <touchgfx_taskEntry>

08001ba2 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001ba2:	6840      	ldr	r0, [r0, #4]
    }
 8001ba4:	4770      	bx	lr

08001ba6 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001ba6:	6041      	str	r1, [r0, #4]
    }
 8001ba8:	4770      	bx	lr

08001baa <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001baa:	1a52      	subs	r2, r2, r1
 8001bac:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001bb0:	fbb2 f0f3 	udiv	r0, r2, r3
 8001bb4:	4770      	bx	lr
	...

08001bb8 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	@ (8001bc4 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001bba:	68c0      	ldr	r0, [r0, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001bc0:	4358      	muls	r0, r3
 8001bc2:	4770      	bx	lr
 8001bc4:	24000784 	.word	0x24000784

08001bc8 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001bc8:	4770      	bx	lr
	...

08001bcc <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bce:	4a1e      	ldr	r2, [pc, #120]	@ (8001c48 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001bd0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001bd4:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001bd6:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bda:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001be6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001bf4:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001bf8:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001bfe:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001c00:	2101      	movs	r1, #1
 8001c02:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001c04:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	2210      	movs	r2, #16
 8001c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c0c:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001c10:	fab2 f282 	clz	r2, r2
 8001c14:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	b983      	cbnz	r3, 8001c3e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001c1c:	f00c fdd0 	bl	800e7c0 <HAL_RCC_GetHCLKFreq>
 8001c20:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001c22:	f00c fc05 	bl	800e430 <HAL_RCC_GetSysClockFreq>
 8001c26:	fbb0 f0f4 	udiv	r0, r0, r4
 8001c2a:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001c2e:	f00d ff91 	bl	800fb54 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001c32:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001c34:	b003      	add	sp, #12
 8001c36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001c3a:	f00d be03 	b.w	800f844 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001c3e:	f00c fde1 	bl	800e804 <HAL_RCC_GetPCLK1Freq>
 8001c42:	0044      	lsls	r4, r0, #1
 8001c44:	e7ed      	b.n	8001c22 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001c46:	bf00      	nop
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	24000784 	.word	0x24000784
 8001c50:	0802d758 	.word	0x0802d758

08001c54 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001c54:	b510      	push	{r4, lr}
 8001c56:	4604      	mov	r4, r0
 8001c58:	2110      	movs	r1, #16
 8001c5a:	f027 f99d 	bl	8028f98 <_ZdlPvj>
 8001c5e:	4620      	mov	r0, r4
 8001c60:	bd10      	pop	{r4, pc}

08001c62 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001c62:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001c64:	6803      	ldr	r3, [r0, #0]
{
 8001c66:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001c68:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001c6a:	b131      	cbz	r1, 8001c7a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001c6c:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001c6e:	4798      	blx	r3
 8001c70:	6863      	ldr	r3, [r4, #4]
 8001c72:	1b5b      	subs	r3, r3, r5
 8001c74:	4403      	add	r3, r0
 8001c76:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001c78:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001c7a:	4798      	blx	r3
 8001c7c:	60a0      	str	r0, [r4, #8]
}
 8001c7e:	e7fb      	b.n	8001c78 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001c80 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001c80:	4770      	bx	lr
	...

08001c84 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001c88:	460f      	mov	r7, r1
 8001c8a:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001c8c:	781d      	ldrb	r5, [r3, #0]
 8001c8e:	b915      	cbnz	r5, 8001c96 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001c90:	2500      	movs	r5, #0
}
 8001c92:	4628      	mov	r0, r5
 8001c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001c96:	4c07      	ldr	r4, [pc, #28]	@ (8001cb4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001c98:	2000      	movs	r0, #0
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	f008 fe18 	bl	800a8d0 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f4      	beq.n	8001c90 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001caa:	68a3      	ldr	r3, [r4, #8]
 8001cac:	6033      	str	r3, [r6, #0]
            return true;
 8001cae:	e7f0      	b.n	8001c92 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001cb0:	240007e0 	.word	0x240007e0
 8001cb4:	240007d0 	.word	0x240007d0

08001cb8 <_ZN20STM32TouchControllerD0Ev>:
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	4604      	mov	r4, r0
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	f027 f96b 	bl	8028f98 <_ZdlPvj>
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	bd10      	pop	{r4, pc}
	...

08001cc8 <_ZN20STM32TouchController4initEv>:
{
 8001cc8:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001ccc:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001cd0:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001cd2:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001cd4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001cd8:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001ce2:	f008 fd65 	bl	800a7b0 <BSP_TS_Init>
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <_ZN20STM32TouchController4initEv+0x40>)
 8001ce8:	b910      	cbnz	r0, 8001cf0 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
}
 8001cee:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1fb      	bne.n	8001cee <_ZN20STM32TouchController4initEv+0x26>
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <_ZN20STM32TouchController4initEv+0x44>)
 8001cf8:	212e      	movs	r1, #46	@ 0x2e
 8001cfa:	4a05      	ldr	r2, [pc, #20]	@ (8001d10 <_ZN20STM32TouchController4initEv+0x48>)
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <_ZN20STM32TouchController4initEv+0x4c>)
 8001cfe:	f027 fcc3 	bl	8029688 <__assert_func>
 8001d02:	bf00      	nop
 8001d04:	240007dc 	.word	0x240007dc
 8001d08:	240007e0 	.word	0x240007e0
 8001d0c:	0802a8dc 	.word	0x0802a8dc
 8001d10:	0802a8ef 	.word	0x0802a8ef
 8001d14:	0802a919 	.word	0x0802a919

08001d18 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001d18:	2803      	cmp	r0, #3
 8001d1a:	d825      	bhi.n	8001d68 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001d1c:	e8df f000 	tbb	[pc, r0]
 8001d20:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d26:	2108      	movs	r1, #8
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	fab2 f282 	clz	r2, r2
 8001d2e:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d30:	480f      	ldr	r0, [pc, #60]	@ (8001d70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d32:	f009 bee3 	b.w	800bafc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	fab2 f282 	clz	r2, r2
 8001d42:	0952      	lsrs	r2, r2, #5
 8001d44:	e7f4      	b.n	8001d30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	fab2 f282 	clz	r2, r2
 8001d52:	0952      	lsrs	r2, r2, #5
 8001d54:	e7ec      	b.n	8001d30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d5c:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	0952      	lsrs	r2, r2, #5
 8001d66:	e7e4      	b.n	8001d32 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	240007e4 	.word	0x240007e4
 8001d70:	58022400 	.word	0x58022400
 8001d74:	58021400 	.word	0x58021400

08001d78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001d78:	2803      	cmp	r0, #3
 8001d7a:	d825      	bhi.n	8001dc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001d7c:	e8df f000 	tbb	[pc, r0]
 8001d80:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001d86:	2108      	movs	r1, #8
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	3a00      	subs	r2, #0
 8001d8c:	bf18      	it	ne
 8001d8e:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001d90:	480f      	ldr	r0, [pc, #60]	@ (8001dd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001d92:	f009 beb3 	b.w	800bafc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001d98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	3a00      	subs	r2, #0
 8001da0:	bf18      	it	ne
 8001da2:	2201      	movne	r2, #1
 8001da4:	e7f4      	b.n	8001d90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	3a00      	subs	r2, #0
 8001db0:	bf18      	it	ne
 8001db2:	2201      	movne	r2, #1
 8001db4:	e7ec      	b.n	8001d90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001db8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	3a00      	subs	r2, #0
 8001dc2:	bf18      	it	ne
 8001dc4:	2201      	movne	r2, #1
 8001dc6:	e7e4      	b.n	8001d92 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	240007e4 	.word	0x240007e4
 8001dd0:	58022400 	.word	0x58022400
 8001dd4:	58021400 	.word	0x58021400

08001dd8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001dd8:	2803      	cmp	r0, #3
 8001dda:	d811      	bhi.n	8001e00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001ddc:	e8df f000 	tbb	[pc, r0]
 8001de0:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001de4:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001de6:	4807      	ldr	r0, [pc, #28]	@ (8001e04 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001de8:	f009 be8d 	b.w	800bb06 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001dec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001df0:	e7f9      	b.n	8001de6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001df2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001df6:	e7f6      	b.n	8001de6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001df8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001dfe:	e7f3      	b.n	8001de8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	58022400 	.word	0x58022400
 8001e08:	58021400 	.word	0x58021400

08001e0c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001e0c:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001e0e:	2803      	cmp	r0, #3
 8001e10:	d815      	bhi.n	8001e3e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001e12:	e8df f000 	tbb	[pc, r0]
 8001e16:	0a02      	.short	0x0a02
 8001e18:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e1a:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e1c:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e1e:	f009 fe67 	bl	800baf0 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001e22:	1e43      	subs	r3, r0, #1
 8001e24:	4258      	negs	r0, r3
 8001e26:	4158      	adcs	r0, r3
 8001e28:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e2e:	e7f5      	b.n	8001e1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e34:	e7f2      	b.n	8001e1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3a:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001e3c:	e7ef      	b.n	8001e1e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e7ef      	b.n	8001e22 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001e42:	bf00      	nop
 8001e44:	58022400 	.word	0x58022400
 8001e48:	58021400 	.word	0x58021400

08001e4c <_ZN8touchgfx4GPIO4initEv>:
{
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4d08      	ldr	r5, [pc, #32]	@ (8001e70 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001e50:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001e52:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001e54:	b2e0      	uxtb	r0, r4
 8001e56:	f7ff ffd9 	bl	8001e0c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001e5a:	b118      	cbz	r0, 8001e64 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001e60:	bf18      	it	ne
 8001e62:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001e64:	3401      	adds	r4, #1
 8001e66:	3504      	adds	r5, #4
 8001e68:	2c05      	cmp	r4, #5
 8001e6a:	d1f3      	bne.n	8001e54 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
 8001e6e:	bf00      	nop
 8001e70:	240007e4 	.word	0x240007e4

08001e74 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001e74:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001e76:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001e7a:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001e7e:	4770      	bx	lr

08001e80 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001e80:	2000      	movs	r0, #0
 8001e82:	4770      	bx	lr

08001e84 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001e84:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001e86:	3900      	subs	r1, #0
 8001e88:	4b02      	ldr	r3, [pc, #8]	@ (8001e94 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001e8a:	bf18      	it	ne
 8001e8c:	2101      	movne	r1, #1
 8001e8e:	7019      	strb	r1, [r3, #0]
    }
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	240285b3 	.word	0x240285b3

08001e98 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001e98:	2000      	movs	r0, #0
 8001e9a:	4770      	bx	lr

08001e9c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001e9c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001e9e:	b10b      	cbz	r3, 8001ea4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4718      	bx	r3
        }
    }
 8001ea4:	4770      	bx	lr

08001ea6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ea6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001eaa:	4770      	bx	lr

08001eac <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001eac:	6840      	ldr	r0, [r0, #4]
 8001eae:	6803      	ldr	r3, [r0, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4718      	bx	r3

08001eb4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001eb4:	4b01      	ldr	r3, [pc, #4]	@ (8001ebc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	24000808 	.word	0x24000808

08001ec0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ec0:	4770      	bx	lr

08001ec2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ec2:	f001 bc80 	b.w	80037c6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001ec6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001ec6:	f001 bc0f 	b.w	80036e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001eca <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001eca:	f001 bde1 	b.w	8003a90 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001ece <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001ece:	f001 bdd3 	b.w	8003a78 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001ed4 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ed8:	f001 fd96 	bl	8003a08 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001edc:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ee0:	b113      	cbz	r3, 8001ee8 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001ee2:	4b02      	ldr	r3, [pc, #8]	@ (8001eec <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
    }
}
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	bf00      	nop
 8001eec:	2400000c 	.word	0x2400000c

08001ef0 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ef0:	f001 bc02 	b.w	80036f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001ef4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001ef4:	b510      	push	{r4, lr}
 8001ef6:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ef8:	f012 fd2c 	bl	8014954 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	4620      	mov	r0, r4
 8001f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001f08:	4718      	bx	r3

08001f0a <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001f0e:	f012 f8b7 	bl	8014080 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001f12:	6860      	ldr	r0, [r4, #4]
 8001f14:	6803      	ldr	r3, [r0, #0]
    }
 8001f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	4718      	bx	r3

08001f1e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001f1e:	f011 bf84 	b.w	8013e2a <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001f22 <_ZN11TouchGFXHALD0Ev>:
 8001f22:	b510      	push	{r4, lr}
 8001f24:	4604      	mov	r4, r0
 8001f26:	217c      	movs	r1, #124	@ 0x7c
 8001f28:	f027 f836 	bl	8028f98 <_ZdlPvj>
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	bd10      	pop	{r4, pc}

08001f30 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001f30:	4b02      	ldr	r3, [pc, #8]	@ (8001f3c <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001f36:	f011 bfb5 	b.w	8013ea4 <_ZN8touchgfx3HAL10beginFrameEv>
 8001f3a:	bf00      	nop
 8001f3c:	2400000c 	.word	0x2400000c

08001f40 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001f40:	b538      	push	{r3, r4, r5, lr}
 8001f42:	4604      	mov	r4, r0
    mcuInstr.init();
 8001f44:	4d06      	ldr	r5, [pc, #24]	@ (8001f60 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001f46:	f001 fbff 	bl	8003748 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001f4a:	2300      	movs	r3, #0
    mcuInstr.init();
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001f52:	f7ff fe3b 	bl	8001bcc <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001f56:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f58:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f5a:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001f5e:	bd38      	pop	{r3, r4, r5, pc}
 8001f60:	240007f8 	.word	0x240007f8

08001f64 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001f64:	6803      	ldr	r3, [r0, #0]
{
 8001f66:	4604      	mov	r4, r0
 8001f68:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6e:	4798      	blx	r3
    enableInterrupts();
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	4620      	mov	r0, r4
 8001f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f76:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001f78:	f000 ff5c 	bl	8002e34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	4620      	mov	r0, r4
 8001f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f82:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001f84:	2100      	movs	r1, #0
 8001f86:	2329      	movs	r3, #41	@ 0x29
 8001f88:	2215      	movs	r2, #21
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001f8c:	9100      	str	r1, [sp, #0]
 8001f8e:	f009 fb24 	bl	800b5da <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001f92:	f000 ff4f 	bl	8002e34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	4620      	mov	r0, r4
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9c:	4798      	blx	r3
    for (;;)
 8001f9e:	e7f8      	b.n	8001f92 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001fa0:	24000684 	.word	0x24000684

08001fa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001fa4:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001faa:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001fac:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001fb0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001fb2:	428c      	cmp	r4, r1
 8001fb4:	d009      	beq.n	8001fca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001fb6:	b93a      	cbnz	r2, 8001fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001fb8:	490a      	ldr	r1, [pc, #40]	@ (8001fe4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fba:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001fbc:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fbe:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001fc0:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001fc2:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fc4:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001fc6:	701a      	strb	r2, [r3, #0]
        }
    }
 8001fc8:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d0fc      	beq.n	8001fc8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fce:	4a06      	ldr	r2, [pc, #24]	@ (8001fe8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001fd0:	4904      	ldr	r1, [pc, #16]	@ (8001fe4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fd2:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001fd4:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fd6:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001fd8:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001fda:	2200      	movs	r2, #0
 8001fdc:	e7f3      	b.n	8001fc6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001fde:	bf00      	nop
 8001fe0:	240285ac 	.word	0x240285ac
 8001fe4:	240285aa 	.word	0x240285aa
 8001fe8:	240285a8 	.word	0x240285a8

08001fec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001fec:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	428b      	cmp	r3, r1
 8001ff4:	d803      	bhi.n	8001ffe <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001ff6:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d905      	bls.n	800200a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002000:	219e      	movs	r1, #158	@ 0x9e
 8002002:	4a07      	ldr	r2, [pc, #28]	@ (8002020 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002004:	4807      	ldr	r0, [pc, #28]	@ (8002024 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002006:	f027 fb3f 	bl	8029688 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 800200c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002010:	801a      	strh	r2, [r3, #0]
    }
 8002012:	bd08      	pop	{r3, pc}
 8002014:	240285a8 	.word	0x240285a8
 8002018:	240285aa 	.word	0x240285aa
 800201c:	0802a9a0 	.word	0x0802a9a0
 8002020:	0802aa03 	.word	0x0802aa03
 8002024:	0802aa46 	.word	0x0802aa46
 8002028:	240285ae 	.word	0x240285ae
 800202c:	240285b0 	.word	0x240285b0

08002030 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002030:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8002032:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8002036:	b118      	cbz	r0, 8002040 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002038:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 800203a:	6803      	ldr	r3, [r0, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4718      	bx	r3
    }
 8002040:	4770      	bx	lr
	...

08002044 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	460d      	mov	r5, r1
 8002048:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 800204c:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800204e:	b935      	cbnz	r5, 800205e <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8002052:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8002058:	480a      	ldr	r0, [pc, #40]	@ (8002084 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 800205a:	f027 fb15 	bl	8029688 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800205e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002062:	3a00      	subs	r2, #0
 8002064:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8002066:	bf18      	it	ne
 8002068:	2201      	movne	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800206c:	6803      	ldr	r3, [r0, #0]
}
 800206e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002076:	4718      	bx	r3
 8002078:	24000808 	.word	0x24000808
 800207c:	0802aa99 	.word	0x0802aa99
 8002080:	0802aad1 	.word	0x0802aad1
 8002084:	0802aa46 	.word	0x0802aa46
 8002088:	240285b2 	.word	0x240285b2

0800208c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 800208c:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8002090:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002092:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8002096:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8002098:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 800209e:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80020a0:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80020a4:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80020a6:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 80020a8:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80020ac:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 80020ae:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 80020b2:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80020b4:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 80020b6:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 80020ba:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80020be:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80020c0:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80020c4:	3520      	adds	r5, #32
          buttonController(0),
 80020c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 80020ca:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 80020ce:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 80020d2:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 80020d6:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80020da:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 80020de:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80020e2:	6782      	str	r2, [r0, #120]	@ 0x78
 80020e4:	b2ad      	uxth	r5, r5
        instance = this;
 80020e6:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80020e8:	42b5      	cmp	r5, r6
        instance = this;
 80020ea:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80020ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 80020ee:	8015      	strh	r5, [r2, #0]
 80020f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 80020f2:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80020f4:	bf28      	it	cs
 80020f6:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80020f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002128 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80020fa:	bf38      	it	cc
 80020fc:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80020fe:	8016      	strh	r6, [r2, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002102:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002106:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002108:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 800210a:	7013      	strb	r3, [r2, #0]
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 800210e:	6003      	str	r3, [r0, #0]
}
 8002110:	bd70      	pop	{r4, r5, r6, pc}
 8002112:	bf00      	nop
 8002114:	01000001 	.word	0x01000001
 8002118:	01010000 	.word	0x01010000
 800211c:	240285b4 	.word	0x240285b4
 8002120:	240285a8 	.word	0x240285a8
 8002124:	240285ae 	.word	0x240285ae
 8002128:	240285aa 	.word	0x240285aa
 800212c:	240285b0 	.word	0x240285b0
 8002130:	240285ac 	.word	0x240285ac
 8002134:	0802ab28 	.word	0x0802ab28

08002138 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002138:	2b01      	cmp	r3, #1
    {
 800213a:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 800213c:	d80e      	bhi.n	800215c <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	2215      	movs	r2, #21
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	460b      	mov	r3, r1
 8002146:	4601      	mov	r1, r0
 8002148:	4808      	ldr	r0, [pc, #32]	@ (800216c <DSI_IO_Write+0x34>)
 800214a:	f009 fa46 	bl	800b5da <HAL_DSI_ShortWrite>
 800214e:	b118      	cbz	r0, 8002158 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002150:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8002154:	b002      	add	sp, #8
 8002156:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8002158:	2000      	movs	r0, #0
 800215a:	e7fb      	b.n	8002154 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800215c:	e9cd 1200 	strd	r1, r2, [sp]
 8002160:	4601      	mov	r1, r0
 8002162:	2239      	movs	r2, #57	@ 0x39
 8002164:	4801      	ldr	r0, [pc, #4]	@ (800216c <DSI_IO_Write+0x34>)
 8002166:	f009 fa49 	bl	800b5fc <HAL_DSI_LongWrite>
 800216a:	e7f0      	b.n	800214e <DSI_IO_Write+0x16>
 800216c:	24000684 	.word	0x24000684

08002170 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8002170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8002172:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8002176:	2106      	movs	r1, #6
 8002178:	9100      	str	r1, [sp, #0]
 800217a:	4601      	mov	r1, r0
 800217c:	4805      	ldr	r0, [pc, #20]	@ (8002194 <DSI_IO_Read+0x24>)
 800217e:	f009 fa9d 	bl	800b6bc <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8002182:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8002184:	bf14      	ite	ne
 8002186:	f06f 0007 	mvnne.w	r0, #7
 800218a:	2000      	moveq	r0, #0
 800218c:	b005      	add	sp, #20
 800218e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002192:	bf00      	nop
 8002194:	24000684 	.word	0x24000684

08002198 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8002198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 800219a:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 800219e:	4c0b      	ldr	r4, [pc, #44]	@ (80021cc <LCD_ReqTear+0x34>)
 80021a0:	2239      	movs	r2, #57	@ 0x39
 80021a2:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80021a4:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80021a8:	ab03      	add	r3, sp, #12
 80021aa:	4620      	mov	r0, r4
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2344      	movs	r3, #68	@ 0x44
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2302      	movs	r3, #2
 80021b4:	f009 fa22 	bl	800b5fc <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80021b8:	2100      	movs	r1, #0
 80021ba:	2335      	movs	r3, #53	@ 0x35
 80021bc:	2215      	movs	r2, #21
 80021be:	4620      	mov	r0, r4
 80021c0:	9100      	str	r1, [sp, #0]
 80021c2:	f009 fa0a 	bl	800b5da <HAL_DSI_ShortWrite>
    }
 80021c6:	b004      	add	sp, #16
 80021c8:	bd10      	pop	{r4, pc}
 80021ca:	bf00      	nop
 80021cc:	24000684 	.word	0x24000684

080021d0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80021d0:	b508      	push	{r3, lr}
    LCD_ReqTear();
 80021d2:	f7ff ffe1 	bl	8002198 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 80021d8:	2202      	movs	r2, #2
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80021e0:	2201      	movs	r2, #1
 80021e2:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80021e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80021f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80021f6:	f042 0202 	orr.w	r2, r2, #2
 80021fa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 80021fe:	2203      	movs	r2, #3
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8002202:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002204:	bd08      	pop	{r3, pc}
 8002206:	bf00      	nop
 8002208:	24000684 	.word	0x24000684
 800220c:	50001000 	.word	0x50001000

08002210 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <LCD_ReqEnable+0x20>)
    {
 8002212:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8002214:	7819      	ldrb	r1, [r3, #0]
 8002216:	b939      	cbnz	r1, 8002228 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002218:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 800221a:	4806      	ldr	r0, [pc, #24]	@ (8002234 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 800221c:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 800221e:	2329      	movs	r3, #41	@ 0x29
 8002220:	2215      	movs	r2, #21
 8002222:	9100      	str	r1, [sp, #0]
 8002224:	f009 f9d9 	bl	800b5da <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002228:	b003      	add	sp, #12
 800222a:	f85d fb04 	ldr.w	pc, [sp], #4
 800222e:	bf00      	nop
 8002230:	240007f4 	.word	0x240007f4
 8002234:	24000684 	.word	0x24000684

08002238 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 800223a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	232a      	movs	r3, #42	@ 0x2a
 8002240:	2239      	movs	r2, #57	@ 0x39
 8002242:	2100      	movs	r1, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2304      	movs	r3, #4
 8002248:	4803      	ldr	r0, [pc, #12]	@ (8002258 <LCD_SetUpdateRegionLeft+0x20>)
 800224a:	f009 f9d7 	bl	800b5fc <HAL_DSI_LongWrite>
    }
 800224e:	b003      	add	sp, #12
 8002250:	f85d fb04 	ldr.w	pc, [sp], #4
 8002254:	24000008 	.word	0x24000008
 8002258:	24000684 	.word	0x24000684

0800225c <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <LCD_SetUpdateRegionRight+0x1c>)
    {
 800225e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	232a      	movs	r3, #42	@ 0x2a
 8002264:	2239      	movs	r2, #57	@ 0x39
 8002266:	2100      	movs	r1, #0
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2304      	movs	r3, #4
 800226c:	4803      	ldr	r0, [pc, #12]	@ (800227c <LCD_SetUpdateRegionRight+0x20>)
 800226e:	f009 f9c5 	bl	800b5fc <HAL_DSI_LongWrite>
    }
 8002272:	b003      	add	sp, #12
 8002274:	f85d fb04 	ldr.w	pc, [sp], #4
 8002278:	24000004 	.word	0x24000004
 800227c:	24000684 	.word	0x24000684

08002280 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8002280:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8002282:	4d14      	ldr	r5, [pc, #80]	@ (80022d4 <HAL_DSI_TearingEffectCallback+0x54>)
 8002284:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff fd46 	bl	8001d18 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800228c:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 800228e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002292:	3301      	adds	r3, #1
 8002294:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8002298:	f000 fdc0 	bl	8002e1c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 800229c:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 800229e:	682a      	ldr	r2, [r5, #0]
 80022a0:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80022a8:	b173      	cbz	r3, 80022c8 <HAL_DSI_TearingEffectCallback+0x48>
 80022aa:	4d0c      	ldr	r5, [pc, #48]	@ (80022dc <HAL_DSI_TearingEffectCallback+0x5c>)
 80022ac:	782b      	ldrb	r3, [r5, #0]
 80022ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022b2:	b94b      	cbnz	r3, 80022c8 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_DSI_TearingEffectCallback+0x60>)
 80022b6:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80022b8:	f7ff ffbe 	bl	8002238 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80022bc:	4620      	mov	r0, r4
 80022be:	f009 f97c 	bl	800b5ba <HAL_DSI_Refresh>
            displayRefreshing = true;
 80022c2:	2301      	movs	r3, #1
 80022c4:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80022c6:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80022c8:	2000      	movs	r0, #0
    }
 80022ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80022ce:	f7ff bd53 	b.w	8001d78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80022d2:	bf00      	nop
 80022d4:	240285b4 	.word	0x240285b4
 80022d8:	2400000c 	.word	0x2400000c
 80022dc:	24000810 	.word	0x24000810
 80022e0:	2400080c 	.word	0x2400080c

080022e4 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 80022e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 80022e8:	4e48      	ldr	r6, [pc, #288]	@ (800240c <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 80022ea:	b085      	sub	sp, #20
 80022ec:	4604      	mov	r4, r0
        if (displayRefreshing)
 80022ee:	7833      	ldrb	r3, [r6, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8088 	beq.w	8002406 <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 80022f6:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002430 <HAL_DSI_EndOfRefreshCallback+0x14c>
 80022fa:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002434 <HAL_DSI_EndOfRefreshCallback+0x150>
 80022fe:	f8d9 5000 	ldr.w	r5, [r9]
 8002302:	4f43      	ldr	r7, [pc, #268]	@ (8002410 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8002304:	2d00      	cmp	r5, #0
 8002306:	d13e      	bne.n	8002386 <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002308:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800230a:	4e42      	ldr	r6, [pc, #264]	@ (8002414 <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 800230c:	f008 fbec 	bl	800aae8 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	9500      	str	r5, [sp, #0]
 8002314:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002318:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800231a:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800231e:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002322:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002326:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800232a:	f002 0208 	and.w	r2, r2, #8
 800232e:	9200      	str	r2, [sp, #0]
 8002330:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002332:	f8d8 2000 	ldr.w	r2, [r8]
 8002336:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800233a:	4837      	ldr	r0, [pc, #220]	@ (8002418 <HAL_DSI_EndOfRefreshCallback+0x134>)
 800233c:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 800233e:	4e37      	ldr	r6, [pc, #220]	@ (800241c <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002340:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8002342:	4837      	ldr	r0, [pc, #220]	@ (8002420 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002344:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002348:	4836      	ldr	r0, [pc, #216]	@ (8002424 <HAL_DSI_EndOfRefreshCallback+0x140>)
 800234a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800234e:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002350:	f041 0101 	orr.w	r1, r1, #1
 8002354:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002356:	9501      	str	r5, [sp, #4]
 8002358:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800235c:	f042 0208 	orr.w	r2, r2, #8
 8002360:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002364:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002370:	f7ff ff74 	bl	800225c <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8002374:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8002376:	4620      	mov	r0, r4
                updateRegion = 1;
 8002378:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 800237c:	b005      	add	sp, #20
 800237e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8002382:	f009 b91a 	b.w	800b5ba <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002386:	6803      	ldr	r3, [r0, #0]
 8002388:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 800238a:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800238c:	9502      	str	r5, [sp, #8]
 800238e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002392:	4c25      	ldr	r4, [pc, #148]	@ (8002428 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002394:	f022 0208 	bic.w	r2, r2, #8
 8002398:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800239c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80023a0:	f002 0208 	and.w	r2, r2, #8
 80023a4:	9202      	str	r2, [sp, #8]
 80023a6:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80023a8:	f8d8 2000 	ldr.w	r2, [r8]
 80023ac:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80023b0:	4819      	ldr	r0, [pc, #100]	@ (8002418 <HAL_DSI_EndOfRefreshCallback+0x134>)
 80023b2:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80023b4:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80023b8:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80023ba:	4819      	ldr	r0, [pc, #100]	@ (8002420 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80023bc:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80023c0:	4818      	ldr	r0, [pc, #96]	@ (8002424 <HAL_DSI_EndOfRefreshCallback+0x140>)
 80023c2:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 80023c6:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80023c8:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80023ca:	f041 0101 	orr.w	r1, r1, #1
 80023ce:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80023d0:	9503      	str	r5, [sp, #12]
 80023d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80023d6:	f042 0208 	orr.w	r2, r2, #8
 80023da:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80023de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	9303      	str	r3, [sp, #12]
 80023e8:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 80023ea:	f7ff fcc5 	bl	8001d78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 80023ee:	f7ff ff0f 	bl	8002210 <LCD_ReqEnable>
        return instance;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 80023f4:	7035      	strb	r5, [r6, #0]
 80023f6:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 80023f8:	b128      	cbz	r0, 8002406 <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 80023fa:	6803      	ldr	r3, [r0, #0]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
    }
 80023fe:	b005      	add	sp, #20
 8002400:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002404:	4718      	bx	r3
 8002406:	b005      	add	sp, #20
 8002408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800240c:	24000810 	.word	0x24000810
 8002410:	24000808 	.word	0x24000808
 8002414:	01b201e2 	.word	0x01b201e2
 8002418:	50001000 	.word	0x50001000
 800241c:	019201e3 	.word	0x019201e3
 8002420:	01920003 	.word	0x01920003
 8002424:	09c004b3 	.word	0x09c004b3
 8002428:	019201e2 	.word	0x019201e2
 800242c:	240285b4 	.word	0x240285b4
 8002430:	2400080c 	.word	0x2400080c
 8002434:	240004ac 	.word	0x240004ac

08002438 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002438:	4601      	mov	r1, r0
 800243a:	b508      	push	{r3, lr}
        return instance;
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <IdleTaskHook+0x14>)
 800243e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002440:	b101      	cbz	r1, 8002444 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002442:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002444:	f012 faa0 	bl	8014988 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002448:	2001      	movs	r0, #1
 800244a:	bd08      	pop	{r3, pc}
 800244c:	240285b4 	.word	0x240285b4

08002450 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002450:	4b03      	ldr	r3, [pc, #12]	@ (8002460 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8002452:	2200      	movs	r2, #0
 8002454:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	4a02      	ldr	r2, [pc, #8]	@ (8002464 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 800245a:	601a      	str	r2, [r3, #0]

}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	240007f8 	.word	0x240007f8
 8002464:	0802a8bc 	.word	0x0802a8bc

08002468 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002468:	6940      	ldr	r0, [r0, #20]
 800246a:	4770      	bx	lr

0800246c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 800246c:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002470:	4770      	bx	lr

08002472 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002472:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002474:	b923      	cbnz	r3, 8002480 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002476:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002478:	3800      	subs	r0, #0
 800247a:	bf18      	it	ne
 800247c:	2001      	movne	r0, #1
 800247e:	4770      	bx	lr
 8002480:	2001      	movs	r0, #1
}
 8002482:	4770      	bx	lr

08002484 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002484:	6880      	ldr	r0, [r0, #8]
 8002486:	4770      	bx	lr

08002488 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002488:	4770      	bx	lr

0800248a <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800248a:	3004      	adds	r0, #4
{
 800248c:	b510      	push	{r4, lr}
 800248e:	460c      	mov	r4, r1
    *data = videoInfo;
 8002490:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002496:	bd10      	pop	{r4, pc}

08002498 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002498:	4770      	bx	lr
	...

0800249c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 800249c:	b508      	push	{r3, lr}
    assert(0);
 800249e:	4a03      	ldr	r2, [pc, #12]	@ (80024ac <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80024a0:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80024a4:	4b02      	ldr	r3, [pc, #8]	@ (80024b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80024a6:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80024a8:	f027 f8ee 	bl	8029688 <__assert_func>
 80024ac:	0802abf8 	.word	0x0802abf8
 80024b0:	0802d24b 	.word	0x0802d24b
 80024b4:	0802ac53 	.word	0x0802ac53

080024b8 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4604      	mov	r4, r0
 80024bc:	2148      	movs	r1, #72	@ 0x48
 80024be:	f026 fd6b 	bl	8028f98 <_ZdlPvj>
 80024c2:	4620      	mov	r0, r4
 80024c4:	bd10      	pop	{r4, pc}
	...

080024c8 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80024c8:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80024cc:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80024ce:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80024d0:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80024d2:	6003      	str	r3, [r0, #0]
 80024d4:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80024d6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80024da:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80024de:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80024e2:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80024e6:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80024ea:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80024ee:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80024f2:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80024f6:	2001      	movs	r0, #1
 80024f8:	f00e f8ba 	bl	8010670 <osSemaphoreNew>
 80024fc:	4b02      	ldr	r3, [pc, #8]	@ (8002508 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80024fe:	6018      	str	r0, [r3, #0]
}
 8002500:	4620      	mov	r0, r4
 8002502:	bd10      	pop	{r4, pc}
 8002504:	0802aea4 	.word	0x0802aea4
 8002508:	24000830 	.word	0x24000830

0800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 800250c:	b410      	push	{r4}
 800250e:	460c      	mov	r4, r1
 8002510:	4611      	mov	r1, r2
 8002512:	461a      	mov	r2, r3
    if (reader != 0)
 8002514:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002516:	b13b      	cbz	r3, 8002528 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002518:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800251a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800251c:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800251e:	4420      	add	r0, r4
}
 8002520:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002524:	f027 bc6c 	b.w	8029e00 <strncmp>
        src = (const char*)movieData + offset;
 8002528:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800252a:	e7f8      	b.n	800251e <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

0800252c <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800252c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800252e:	b510      	push	{r4, lr}
    if (reader != 0)
 8002530:	b173      	cbz	r3, 8002550 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002532:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002534:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002536:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002538:	1853      	adds	r3, r2, r1
 800253a:	5c52      	ldrb	r2, [r2, r1]
 800253c:	7898      	ldrb	r0, [r3, #2]
 800253e:	785c      	ldrb	r4, [r3, #1]
 8002540:	0400      	lsls	r0, r0, #16
 8002542:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002546:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002548:	78db      	ldrb	r3, [r3, #3]
 800254a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800254e:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002550:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002552:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002554:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002556:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002558:	7898      	ldrb	r0, [r3, #2]
 800255a:	0400      	lsls	r0, r0, #16
 800255c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002560:	e7f1      	b.n	8002546 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

08002562 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002562:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002564:	b143      	cbz	r3, 8002578 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002566:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002568:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800256a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800256c:	185a      	adds	r2, r3, r1
 800256e:	5c58      	ldrb	r0, [r3, r1]
 8002570:	7852      	ldrb	r2, [r2, #1]
 8002572:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002576:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002578:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800257a:	185a      	adds	r2, r3, r1
        val |= d[0];
 800257c:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800257e:	7853      	ldrb	r3, [r2, #1]
 8002580:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002584:	4770      	bx	lr
	...

08002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	4604      	mov	r4, r0
    if (reader != 0)
 800258c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800258e:	460d      	mov	r5, r1
 8002590:	4616      	mov	r6, r2
    if (reader != 0)
 8002592:	b1d8      	cbz	r0, 80025cc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002594:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002596:	4293      	cmp	r3, r2
 8002598:	d208      	bcs.n	80025ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800259a:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 800259c:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800259e:	219e      	movs	r1, #158	@ 0x9e
 80025a0:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80025a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80025a8:	f027 f86e 	bl	8029688 <__assert_func>
        reader->seek(offset);
 80025ac:	6803      	ldr	r3, [r0, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80025b2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80025b4:	4632      	mov	r2, r6
 80025b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025b8:	6803      	ldr	r3, [r0, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4798      	blx	r3
 80025be:	b910      	cbnz	r0, 80025c6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80025c0:	230d      	movs	r3, #13
 80025c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80025c6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80025c8:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80025cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80025ce:	4408      	add	r0, r1
 80025d0:	e7fb      	b.n	80025ca <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80025d2:	bf00      	nop
 80025d4:	0802acdf 	.word	0x0802acdf
 80025d8:	0802ac53 	.word	0x0802ac53
 80025dc:	0802accc 	.word	0x0802accc

080025e0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80025e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80025e4:	6943      	ldr	r3, [r0, #20]
{
 80025e6:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80025e8:	b92b      	cbnz	r3, 80025f6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80025ea:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80025ec:	21e4      	movs	r1, #228	@ 0xe4
 80025ee:	4a22      	ldr	r2, [pc, #136]	@ (8002678 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80025f0:	4822      	ldr	r0, [pc, #136]	@ (800267c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80025f2:	f027 f849 	bl	8029688 <__assert_func>
    readData(currentMovieOffset, 8);
 80025f6:	2208      	movs	r2, #8
 80025f8:	6981      	ldr	r1, [r0, #24]
 80025fa:	f7ff ffc5 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80025fe:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002600:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002604:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002608:	3104      	adds	r1, #4
 800260a:	4620      	mov	r0, r4
 800260c:	f7ff ff8e 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002610:	69a3      	ldr	r3, [r4, #24]
 8002612:	4418      	add	r0, r3
 8002614:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002616:	f100 0208 	add.w	r2, r0, #8
 800261a:	429a      	cmp	r2, r3
 800261c:	d306      	bcc.n	800262c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800261e:	2301      	movs	r3, #1
    return false;
 8002620:	2000      	movs	r0, #0
    frameNumber = 1;
 8002622:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002624:	6a23      	ldr	r3, [r4, #32]
 8002626:	61a3      	str	r3, [r4, #24]
}
 8002628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 800262c:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800262e:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 8002632:	2208      	movs	r2, #8
 8002634:	4620      	mov	r0, r4
        frameNumber++;
 8002636:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002638:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 800263c:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800263e:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002640:	f7ff ffa2 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002644:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002648:	4620      	mov	r0, r4
 800264a:	4649      	mov	r1, r9
 800264c:	f7ff ff89 	bl	8002562 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002650:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002654:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff ff83 	bl	8002562 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 800265c:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002660:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff ff62 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002668:	45b0      	cmp	r8, r6
 800266a:	d1d1      	bne.n	8002610 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 800266c:	42bd      	cmp	r5, r7
 800266e:	d1cf      	bne.n	8002610 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002670:	2001      	movs	r0, #1
 8002672:	e7d9      	b.n	8002628 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002674:	0802ad21 	.word	0x0802ad21
 8002678:	0802ad6a 	.word	0x0802ad6a
 800267c:	0802ac53 	.word	0x0802ac53

08002680 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002680:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002682:	6803      	ldr	r3, [r0, #0]
 8002684:	bf38      	it	cc
 8002686:	2101      	movcc	r1, #1
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 800268a:	b570      	push	{r4, r5, r6, lr}
 800268c:	460d      	mov	r5, r1
 800268e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002690:	4798      	blx	r3
 8002692:	42a8      	cmp	r0, r5
 8002694:	d204      	bcs.n	80026a0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	4620      	mov	r0, r4
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	4798      	blx	r3
 800269e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026a0:	1e6b      	subs	r3, r5, #1
 80026a2:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80026a4:	2210      	movs	r2, #16
 80026a6:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026a8:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80026ac:	f106 0108 	add.w	r1, r6, #8
 80026b0:	f7ff ff6a 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80026b4:	f106 0110 	add.w	r1, r6, #16
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ff37 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
 80026be:	6a23      	ldr	r3, [r4, #32]
 80026c0:	3b04      	subs	r3, #4
 80026c2:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80026c4:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80026c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80026cc:	2100      	movs	r1, #0
    readData(0, 72);
 80026ce:	2248      	movs	r2, #72	@ 0x48
{
 80026d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026d4:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80026d6:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80026d8:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80026dc:	f7ff ff54 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80026e0:	69a6      	ldr	r6, [r4, #24]
 80026e2:	2304      	movs	r3, #4
 80026e4:	4a63      	ldr	r2, [pc, #396]	@ (8002874 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80026e6:	4631      	mov	r1, r6
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff ff0f 	bl	800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026ee:	b148      	cbz	r0, 8002704 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80026f0:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80026f2:	4a61      	ldr	r2, [pc, #388]	@ (8002878 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026f4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80026f8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80026fc:	4b5f      	ldr	r3, [pc, #380]	@ (800287c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80026fe:	4860      	ldr	r0, [pc, #384]	@ (8002880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002700:	f026 ffc2 	bl	8029688 <__assert_func>
    currentMovieOffset += 8;
 8002704:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002708:	2304      	movs	r3, #4
 800270a:	4a5e      	ldr	r2, [pc, #376]	@ (8002884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 800270c:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800270e:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002710:	f7ff fefc 	bl	800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002714:	b138      	cbz	r0, 8002726 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002716:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002718:	4a57      	ldr	r2, [pc, #348]	@ (8002878 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800271a:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800271e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 8002722:	4b59      	ldr	r3, [pc, #356]	@ (8002888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002724:	e7eb      	b.n	80026fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002726:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800272a:	2304      	movs	r3, #4
 800272c:	4a57      	ldr	r2, [pc, #348]	@ (800288c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800272e:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002730:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002732:	f7ff feeb 	bl	800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002736:	4607      	mov	r7, r0
 8002738:	b138      	cbz	r0, 800274a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800273a:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 800273c:	4a4e      	ldr	r2, [pc, #312]	@ (8002878 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800273e:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002742:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002746:	4b52      	ldr	r3, [pc, #328]	@ (8002890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002748:	e7d9      	b.n	80026fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800274a:	f106 0110 	add.w	r1, r6, #16
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff feec 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002754:	4605      	mov	r5, r0
 8002756:	b920      	cbnz	r0, 8002762 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002758:	4b4e      	ldr	r3, [pc, #312]	@ (8002894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 800275a:	f240 1141 	movw	r1, #321	@ 0x141
 800275e:	4a46      	ldr	r2, [pc, #280]	@ (8002878 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002760:	e7cd      	b.n	80026fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 8002762:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002766:	2304      	movs	r3, #4
 8002768:	4a4b      	ldr	r2, [pc, #300]	@ (8002898 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 800276a:	4620      	mov	r0, r4
 800276c:	4641      	mov	r1, r8
 800276e:	f7ff fecd 	bl	800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002772:	2800      	cmp	r0, #0
 8002774:	d049      	beq.n	800280a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002776:	2306      	movs	r3, #6
 8002778:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 800277c:	2304      	movs	r3, #4
 800277e:	4a47      	ldr	r2, [pc, #284]	@ (800289c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002780:	f106 0118 	add.w	r1, r6, #24
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff fec1 	bl	800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800278a:	2800      	cmp	r0, #0
 800278c:	d03f      	beq.n	800280e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800278e:	2307      	movs	r3, #7
 8002790:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002794:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002796:	4f42      	ldr	r7, [pc, #264]	@ (80028a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002798:	220c      	movs	r2, #12
 800279a:	4620      	mov	r0, r4
 800279c:	4629      	mov	r1, r5
 800279e:	f7ff fef3 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027a2:	f105 0608 	add.w	r6, r5, #8
 80027a6:	2304      	movs	r3, #4
 80027a8:	463a      	mov	r2, r7
 80027aa:	4620      	mov	r0, r4
 80027ac:	4631      	mov	r1, r6
 80027ae:	f7ff fead 	bl	800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027b2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d048      	beq.n	800284c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d148      	bne.n	8002850 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80027be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027c0:	42ab      	cmp	r3, r5
 80027c2:	d849      	bhi.n	8002858 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80027c4:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027c8:	3504      	adds	r5, #4
 80027ca:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80027cc:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027ce:	4629      	mov	r1, r5
 80027d0:	f7ff feac 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d4:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027d6:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027d8:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fea6 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80027e0:	4406      	add	r6, r0
    readData(listOffset, 4);
 80027e2:	2204      	movs	r2, #4
 80027e4:	4620      	mov	r0, r4
 80027e6:	4631      	mov	r1, r6
 80027e8:	f7ff fece 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80027ec:	2304      	movs	r3, #4
 80027ee:	4a2d      	ldr	r2, [pc, #180]	@ (80028a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80027f0:	4631      	mov	r1, r6
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fe8a 	bl	800250c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d138      	bne.n	800286e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80027fc:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80027fe:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002800:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002802:	69a3      	ldr	r3, [r4, #24]
 8002804:	6223      	str	r3, [r4, #32]
}
 8002806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800280a:	2701      	movs	r7, #1
 800280c:	e7b6      	b.n	800277c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800280e:	2f00      	cmp	r7, #0
 8002810:	d0c0      	beq.n	8002794 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002812:	f106 0120 	add.w	r1, r6, #32
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff fe88 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
 800281c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002820:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002824:	fbb0 f0f3 	udiv	r0, r0, r3
 8002828:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fe7e 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002830:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002834:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff fe78 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800283c:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002840:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff fe72 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002848:	6120      	str	r0, [r4, #16]
 800284a:	e7a3      	b.n	8002794 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0b9      	beq.n	80027c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002850:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002852:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002856:	e7d6      	b.n	8002806 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002858:	1d29      	adds	r1, r5, #4
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff fe66 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002860:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 8002862:	220c      	movs	r2, #12
 8002864:	4620      	mov	r0, r4
 8002866:	4629      	mov	r1, r5
 8002868:	f7ff fe8e 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800286c:	e799      	b.n	80027a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800286e:	230b      	movs	r3, #11
 8002870:	e7ef      	b.n	8002852 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002872:	bf00      	nop
 8002874:	0802ad9d 	.word	0x0802ad9d
 8002878:	0802adbb 	.word	0x0802adbb
 800287c:	0802ada2 	.word	0x0802ada2
 8002880:	0802ac53 	.word	0x0802ac53
 8002884:	0802ade8 	.word	0x0802ade8
 8002888:	0802aded 	.word	0x0802aded
 800288c:	0802ae05 	.word	0x0802ae05
 8002890:	0802ae0a 	.word	0x0802ae0a
 8002894:	0802ae20 	.word	0x0802ae20
 8002898:	0802ae2c 	.word	0x0802ae2c
 800289c:	0802ae31 	.word	0x0802ae31
 80028a0:	0802ae36 	.word	0x0802ae36
 80028a4:	0802ae3b 	.word	0x0802ae3b

080028a8 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80028a8:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80028ac:	2200      	movs	r2, #0
 80028ae:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80028b0:	f7ff bf0c 	b.w	80026cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080028b4 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80028b4:	b510      	push	{r4, lr}
    movieData = 0;
 80028b6:	2300      	movs	r3, #0
{
 80028b8:	4604      	mov	r4, r0
 80028ba:	4608      	mov	r0, r1
    movieData = 0;
 80028bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80028be:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80028c0:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4798      	blx	r3
 80028c6:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80028c8:	4620      	mov	r0, r4
}
 80028ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80028ce:	f7ff befd 	b.w	80026cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080028d4 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80028d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80028d6:	4c14      	ldr	r4, [pc, #80]	@ (8002928 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80028d8:	4d14      	ldr	r5, [pc, #80]	@ (800292c <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80028da:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80028dc:	2400      	movs	r4, #0
 80028de:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <JPEG_Decode_DMA+0x5c>)
 80028e0:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80028e2:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <JPEG_Decode_DMA+0x60>)
 80028e4:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80028e8:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80028ea:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <JPEG_Decode_DMA+0x68>)
 80028ee:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80028f0:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <JPEG_Decode_DMA+0x6c>)
 80028f2:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <JPEG_Decode_DMA+0x70>)
 80028f6:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80028fa:	682a      	ldr	r2, [r5, #0]
 80028fc:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002900:	701c      	strb	r4, [r3, #0]
 8002902:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002904:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002908:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800290c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002910:	4a0e      	ldr	r2, [pc, #56]	@ (800294c <JPEG_Decode_DMA+0x78>)
 8002912:	68d2      	ldr	r2, [r2, #12]
 8002914:	436a      	muls	r2, r5
 8002916:	9200      	str	r2, [sp, #0]
 8002918:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f009 fff5 	bl	800c90c <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002922:	4620      	mov	r0, r4
 8002924:	b003      	add	sp, #12
 8002926:	bd30      	pop	{r4, r5, pc}
 8002928:	24009e5c 	.word	0x24009e5c
 800292c:	24009e38 	.word	0x24009e38
 8002930:	24009e48 	.word	0x24009e48
 8002934:	2400082c 	.word	0x2400082c
 8002938:	24009e58 	.word	0x24009e58
 800293c:	24009e50 	.word	0x24009e50
 8002940:	24009e54 	.word	0x24009e54
 8002944:	24000834 	.word	0x24000834
 8002948:	24000010 	.word	0x24000010
 800294c:	24000814 	.word	0x24000814

08002950 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002950:	684b      	ldr	r3, [r1, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d115      	bne.n	8002982 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002956:	68cb      	ldr	r3, [r1, #12]
 8002958:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800295a:	bf1e      	ittt	ne
 800295c:	f023 030f 	bicne.w	r3, r3, #15
 8002960:	3310      	addne	r3, #16
 8002962:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002964:	688b      	ldr	r3, [r1, #8]
 8002966:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002968:	bf1e      	ittt	ne
 800296a:	f023 030f 	bicne.w	r3, r3, #15
 800296e:	3310      	addne	r3, #16
 8002970:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002972:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002974:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002976:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002978:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 800297a:	4353      	muls	r3, r2
 800297c:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <HAL_JPEG_InfoReadyCallback+0x68>)
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002982:	2b02      	cmp	r3, #2
 8002984:	d10e      	bne.n	80029a4 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8002986:	68cb      	ldr	r3, [r1, #12]
 8002988:	071a      	lsls	r2, r3, #28
 800298a:	d003      	beq.n	8002994 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800298c:	f023 030f 	bic.w	r3, r3, #15
 8002990:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002992:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002994:	688b      	ldr	r3, [r1, #8]
 8002996:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002998:	bf1e      	ittt	ne
 800299a:	f023 0307 	bicne.w	r3, r3, #7
 800299e:	3308      	addne	r3, #8
 80029a0:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80029a2:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1fc      	bne.n	80029a2 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80029a8:	68cb      	ldr	r3, [r1, #12]
 80029aa:	0758      	lsls	r0, r3, #29
 80029ac:	d0f2      	beq.n	8002994 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80029ae:	f023 0307 	bic.w	r3, r3, #7
 80029b2:	3308      	adds	r3, #8
 80029b4:	e7ed      	b.n	8002992 <HAL_JPEG_InfoReadyCallback+0x42>
 80029b6:	bf00      	nop
 80029b8:	24009e40 	.word	0x24009e40

080029bc <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <HAL_JPEG_GetDataCallback+0x30>)
 80029be:	6813      	ldr	r3, [r2, #0]
 80029c0:	440b      	add	r3, r1
    {
 80029c2:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80029c4:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80029c6:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <HAL_JPEG_GetDataCallback+0x34>)
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d20c      	bcs.n	80029e8 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80029ce:	4c09      	ldr	r4, [pc, #36]	@ (80029f4 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80029d0:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80029d2:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80029d4:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80029d8:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80029da:	bf28      	it	cs
 80029dc:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80029e0:	6021      	str	r1, [r4, #0]
        }
    }
 80029e2:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80029e4:	f009 bff4 	b.w	800c9d0 <HAL_JPEG_ConfigInputBuffer>
    }
 80029e8:	bc30      	pop	{r4, r5}
 80029ea:	4770      	bx	lr
 80029ec:	24009e58 	.word	0x24009e58
 80029f0:	24009e54 	.word	0x24009e54
 80029f4:	24009e50 	.word	0x24009e50

080029f8 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80029fa:	4c20      	ldr	r4, [pc, #128]	@ (8002a7c <HAL_JPEG_DataReadyCallback+0x84>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	4d20      	ldr	r5, [pc, #128]	@ (8002a80 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002a00:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a02:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a04:	4f1f      	ldr	r7, [pc, #124]	@ (8002a84 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002a10:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002a12:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <HAL_JPEG_DataReadyCallback+0x90>)
 8002a14:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002a1c:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	440a      	add	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d901      	bls.n	8002a36 <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	5ceb      	ldrb	r3, [r5, r3]
 8002a3c:	b133      	cbz	r3, 8002a4c <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4630      	mov	r0, r6
 8002a42:	f009 ff97 	bl	800c974 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_JPEG_DataReadyCallback+0x94>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a4c:	6822      	ldr	r2, [r4, #0]
 8002a4e:	4630      	mov	r0, r6
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002a56:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a5a:	6869      	ldr	r1, [r5, #4]
 8002a5c:	435a      	muls	r2, r3
 8002a5e:	f009 ffba 	bl	800c9d6 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002a62:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_JPEG_DataReadyCallback+0x98>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	7a1a      	ldrb	r2, [r3, #8]
 8002a68:	b93a      	cbnz	r2, 8002a7a <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002a6a:	7a9b      	ldrb	r3, [r3, #10]
 8002a6c:	b92b      	cbnz	r3, 8002a7a <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002a70:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002a76:	f00d be71 	b.w	801075c <osSemaphoreRelease>
    }
 8002a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7c:	24009e38 	.word	0x24009e38
 8002a80:	24000010 	.word	0x24000010
 8002a84:	24000814 	.word	0x24000814
 8002a88:	24000834 	.word	0x24000834
 8002a8c:	24009e48 	.word	0x24009e48
 8002a90:	24009e3c 	.word	0x24009e3c
 8002a94:	24000830 	.word	0x24000830

08002a98 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002a98:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002a9a:	e7fe      	b.n	8002a9a <HAL_JPEG_ErrorCallback+0x2>

08002a9c <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002a9c:	4b01      	ldr	r3, [pc, #4]	@ (8002aa4 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    }
 8002aa2:	4770      	bx	lr
 8002aa4:	24009e4c 	.word	0x24009e4c

08002aa8 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002aa8:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002aaa:	4d16      	ldr	r5, [pc, #88]	@ (8002b04 <JPEG_OutputHandler+0x5c>)
{
 8002aac:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002aae:	682b      	ldr	r3, [r5, #0]
 8002ab0:	b113      	cbz	r3, 8002ab8 <JPEG_OutputHandler+0x10>
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <JPEG_OutputHandler+0x60>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	bb1b      	cbnz	r3, 8002b00 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002ab8:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <JPEG_OutputHandler+0x64>)
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	7a03      	ldrb	r3, [r0, #8]
 8002abe:	b963      	cbnz	r3, 8002ada <JPEG_OutputHandler+0x32>
 8002ac0:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <JPEG_OutputHandler+0x68>)
 8002ac2:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <JPEG_OutputHandler+0x6c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d105      	bne.n	8002ada <JPEG_OutputHandler+0x32>
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <JPEG_OutputHandler+0x60>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b913      	cbnz	r3, 8002ada <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002ada:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <JPEG_OutputHandler+0x70>)
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10c      	bne.n	8002afc <JPEG_OutputHandler+0x54>
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <JPEG_OutputHandler+0x74>)
 8002ae4:	490b      	ldr	r1, [pc, #44]	@ (8002b14 <JPEG_OutputHandler+0x6c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	b933      	cbnz	r3, 8002afc <JPEG_OutputHandler+0x54>
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	b923      	cbnz	r3, 8002afc <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002af2:	2102      	movs	r1, #2
 8002af4:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002af6:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002af8:	f00a f99b 	bl	800ce32 <HAL_JPEG_Resume>
        return 1;
 8002afc:	2002      	movs	r0, #2
    }

    return 2;
}
 8002afe:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002b00:	2001      	movs	r0, #1
 8002b02:	e7fc      	b.n	8002afe <JPEG_OutputHandler+0x56>
 8002b04:	24009e4c 	.word	0x24009e4c
 8002b08:	24000828 	.word	0x24000828
 8002b0c:	24009e3c 	.word	0x24009e3c
 8002b10:	2400082c 	.word	0x2400082c
 8002b14:	24000010 	.word	0x24000010
 8002b18:	24009e48 	.word	0x24009e48
 8002b1c:	24009e38 	.word	0x24009e38

08002b20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	4605      	mov	r5, r0
    if (length == 0)
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d035      	beq.n	8002b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d033      	beq.n	8002b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002b2c:	481a      	ldr	r0, [pc, #104]	@ (8002b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002b2e:	2403      	movs	r4, #3
 8002b30:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b32:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002b34:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b36:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b3a:	bf18      	it	ne
 8002b3c:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b40:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b42:	bf18      	it	ne
 8002b44:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b46:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002b48:	0924      	lsrs	r4, r4, #4
 8002b4a:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002b4c:	692c      	ldr	r4, [r5, #16]
 8002b4e:	f014 040f 	ands.w	r4, r4, #15
 8002b52:	bf18      	it	ne
 8002b54:	f1c4 0410 	rsbne	r4, r4, #16
 8002b58:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002b5a:	4810      	ldr	r0, [pc, #64]	@ (8002b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002b5c:	f7ff feba 	bl	80028d4 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b60:	4c0f      	ldr	r4, [pc, #60]	@ (8002ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002b62:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002b64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b66:	4d0d      	ldr	r5, [pc, #52]	@ (8002b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002b68:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f7ff ff9c 	bl	8002aa8 <JPEG_OutputHandler>
 8002b70:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d105      	bne.n	8002b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	f00d fdc0 	bl	8010704 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d1ef      	bne.n	8002b6a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002b8e:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002b90:	4a07      	ldr	r2, [pc, #28]	@ (8002bb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
 8002b96:	bf00      	nop
 8002b98:	24000814 	.word	0x24000814
 8002b9c:	2400062c 	.word	0x2400062c
 8002ba0:	24009e44 	.word	0x24009e44
 8002ba4:	24009e3c 	.word	0x24009e3c
 8002ba8:	24000830 	.word	0x24000830
 8002bac:	24009e4c 	.word	0x24009e4c
 8002bb0:	24000828 	.word	0x24000828

08002bb4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb8:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002bba:	6943      	ldr	r3, [r0, #20]
{
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	460f      	mov	r7, r1
 8002bc2:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002bc4:	b92b      	cbnz	r3, 8002bd2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002bc6:	4b29      	ldr	r3, [pc, #164]	@ (8002c6c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002bc8:	21b0      	movs	r1, #176	@ 0xb0
 8002bca:	4a29      	ldr	r2, [pc, #164]	@ (8002c70 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002bcc:	4829      	ldr	r0, [pc, #164]	@ (8002c74 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002bce:	f026 fd5b 	bl	8029688 <__assert_func>
    readData(currentMovieOffset, 8);
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	6981      	ldr	r1, [r0, #24]
 8002bd6:	f7ff fcd7 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002bda:	69a6      	ldr	r6, [r4, #24]
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4631      	mov	r1, r6
 8002be0:	f7ff fcbf 	bl	8002562 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002be4:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002be6:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002be8:	4620      	mov	r0, r4
 8002bea:	f7ff fcba 	bl	8002562 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002bee:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002bf0:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff fc9a 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002bf8:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002bfc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002bfe:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c00:	1842      	adds	r2, r0, r1
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d226      	bcs.n	8002c54 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002c06:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002c0a:	459b      	cmp	fp, r3
 8002c0c:	d117      	bne.n	8002c3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c0e:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002c12:	459a      	cmp	sl, r3
 8002c14:	d113      	bne.n	8002c3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c16:	b190      	cbz	r0, 8002c3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c18:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002c1a:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff fcb3 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c24:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c26:	462a      	mov	r2, r5
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f8cd 8000 	str.w	r8, [sp]
 8002c2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002c32:	463b      	mov	r3, r7
 8002c34:	f7ff ff74 	bl	8002b20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002c38:	6963      	ldr	r3, [r4, #20]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002c3e:	69a3      	ldr	r3, [r4, #24]
 8002c40:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002c42:	b905      	cbnz	r5, 8002c46 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002c44:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c46:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c48:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c4e:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c50:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002c52:	d109      	bne.n	8002c68 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002c54:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002c56:	2001      	movs	r0, #1
        frameNumber = 1;
 8002c58:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002c5a:	6a23      	ldr	r3, [r4, #32]
 8002c5c:	61a3      	str	r3, [r4, #24]
}
 8002c5e:	f080 0001 	eor.w	r0, r0, #1
 8002c62:	b005      	add	sp, #20
 8002c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002c68:	2000      	movs	r0, #0
 8002c6a:	e7f8      	b.n	8002c5e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002c6c:	0802ad21 	.word	0x0802ad21
 8002c70:	0802ae40 	.word	0x0802ae40
 8002c74:	0802ac53 	.word	0x0802ac53

08002c78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002c7c:	6981      	ldr	r1, [r0, #24]
{
 8002c7e:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002c80:	2208      	movs	r2, #8
 8002c82:	f7ff fc81 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002c86:	69a7      	ldr	r7, [r4, #24]
 8002c88:	4620      	mov	r0, r4
 8002c8a:	1d39      	adds	r1, r7, #4
 8002c8c:	f7ff fc4e 	bl	800252c <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002c90:	f107 0108 	add.w	r1, r7, #8
 8002c94:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002c96:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f7ff fc75 	bl	8002588 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002c9e:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002ca0:	b16e      	cbz	r6, 8002cbe <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002ca2:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ca4:	4c07      	ldr	r4, [pc, #28]	@ (8002cc4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002ca6:	4d08      	ldr	r5, [pc, #32]	@ (8002cc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002ca8:	4633      	mov	r3, r6
 8002caa:	4807      	ldr	r0, [pc, #28]	@ (8002cc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002cac:	f7ff fe12 	bl	80028d4 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f7ff fef9 	bl	8002aa8 <JPEG_OutputHandler>
 8002cb6:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f8      	beq.n	8002cb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	24009e44 	.word	0x24009e44
 8002cc8:	2400062c 	.word	0x2400062c

08002ccc <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <DMA2D_CopyBuffer+0x70>)
 8002cce:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002cd4:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002cd8:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002cda:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002cdc:	4e18      	ldr	r6, [pc, #96]	@ (8002d40 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002cde:	4f19      	ldr	r7, [pc, #100]	@ (8002d44 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002ce0:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002ce4:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002ce8:	434d      	muls	r5, r1
 8002cea:	6911      	ldr	r1, [r2, #16]
 8002cec:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002cf0:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002cf2:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002cf4:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002cf6:	683f      	ldr	r7, [r7, #0]
 8002cf8:	68d3      	ldr	r3, [r2, #12]
 8002cfa:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002cfc:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002cfe:	45bc      	cmp	ip, r7
 8002d00:	d317      	bcc.n	8002d32 <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d02:	6892      	ldr	r2, [r2, #8]
 8002d04:	f1c2 0210 	rsb	r2, r2, #16
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d48 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d0e:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d12:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d14:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <DMA2D_CopyBuffer+0x74>)
 8002d18:	4421      	add	r1, r4
 8002d1a:	4429      	add	r1, r5
 8002d1c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d1e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002d20:	2300      	movs	r3, #0
 8002d22:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002d24:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <DMA2D_CopyBuffer+0x80>)
 8002d26:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002d28:	6843      	ldr	r3, [r0, #4]
 8002d2a:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d2c:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <DMA2D_CopyBuffer+0x84>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d32:	f041 0110 	orr.w	r1, r1, #16
 8002d36:	6471      	str	r1, [r6, #68]	@ 0x44
 8002d38:	e7e8      	b.n	8002d0c <DMA2D_CopyBuffer+0x40>
 8002d3a:	bf00      	nop
 8002d3c:	24000814 	.word	0x24000814
 8002d40:	52001000 	.word	0x52001000
 8002d44:	24009e40 	.word	0x24009e40
 8002d48:	24009e5c 	.word	0x24009e5c
 8002d4c:	ff09000b 	.word	0xff09000b
 8002d50:	00012301 	.word	0x00012301

08002d54 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002d54:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002d56:	2200      	movs	r2, #0
 8002d58:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002d5a:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002d5c:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002d5e:	3101      	adds	r1, #1
 8002d60:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	2901      	cmp	r1, #1
 8002d66:	d900      	bls.n	8002d6a <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002d68:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <DMA2D_ExternalJobCompleted+0x38>)
 8002d6c:	4a08      	ldr	r2, [pc, #32]	@ (8002d90 <DMA2D_ExternalJobCompleted+0x3c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68d2      	ldr	r2, [r2, #12]
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	68c2      	ldr	r2, [r0, #12]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <DMA2D_ExternalJobCompleted+0x40>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <DMA2D_ExternalJobCompleted+0x44>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	f00d bcea 	b.w	801075c <osSemaphoreRelease>
 8002d88:	2400082c 	.word	0x2400082c
 8002d8c:	24009e40 	.word	0x24009e40
 8002d90:	24000814 	.word	0x24000814
 8002d94:	24000828 	.word	0x24000828
 8002d98:	24000830 	.word	0x24000830

08002d9c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	2200      	movs	r2, #0
{
 8002da0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002da2:	4608      	mov	r0, r1
 8002da4:	f00d fc64 	bl	8010670 <osSemaphoreNew>
 8002da8:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002daa:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002dac:	b928      	cbnz	r0, 8002dba <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002db0:	2128      	movs	r1, #40	@ 0x28
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002db4:	480a      	ldr	r0, [pc, #40]	@ (8002de0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002db6:	f026 fc67 	bl	8029688 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f00d fcf5 	bl	80107ae <osMessageQueueNew>
 8002dc4:	4b07      	ldr	r3, [pc, #28]	@ (8002de4 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002dc6:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002dc8:	b918      	cbnz	r0, 8002dd2 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002dcc:	212c      	movs	r1, #44	@ 0x2c
 8002dce:	4a03      	ldr	r2, [pc, #12]	@ (8002ddc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002dd0:	e7f0      	b.n	8002db4 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002dd2:	bd08      	pop	{r3, pc}
 8002dd4:	24009e64 	.word	0x24009e64
 8002dd8:	0802aee0 	.word	0x0802aee0
 8002ddc:	0802af29 	.word	0x0802af29
 8002de0:	0802af58 	.word	0x0802af58
 8002de4:	24009e60 	.word	0x24009e60
 8002de8:	0802afc7 	.word	0x0802afc7

08002dec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002dec:	4b02      	ldr	r3, [pc, #8]	@ (8002df8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002dee:	f04f 31ff 	mov.w	r1, #4294967295
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	f00d bc86 	b.w	8010704 <osSemaphoreAcquire>
 8002df8:	24009e64 	.word	0x24009e64

08002dfc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002dfc:	4b01      	ldr	r3, [pc, #4]	@ (8002e04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	f00d bcac 	b.w	801075c <osSemaphoreRelease>
 8002e04:	24009e64 	.word	0x24009e64

08002e08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002e08:	4b02      	ldr	r3, [pc, #8]	@ (8002e14 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	f00d bc79 	b.w	8010704 <osSemaphoreAcquire>
 8002e12:	bf00      	nop
 8002e14:	24009e64 	.word	0x24009e64

08002e18 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002e18:	f7ff bff0 	b.w	8002dfc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002e1c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002e20:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002e22:	461a      	mov	r2, r3
 8002e24:	6800      	ldr	r0, [r0, #0]
 8002e26:	f00d bcfd 	b.w	8010824 <osMessageQueuePut>
 8002e2a:	bf00      	nop
 8002e2c:	24009e60 	.word	0x24009e60
 8002e30:	24000030 	.word	0x24000030

08002e34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002e34:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002e36:	2300      	movs	r3, #0
 8002e38:	4c07      	ldr	r4, [pc, #28]	@ (8002e58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002e3a:	a901      	add	r1, sp, #4
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	f00d fd21 	bl	8010886 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
 8002e48:	2200      	movs	r2, #0
 8002e4a:	a901      	add	r1, sp, #4
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	f00d fd1a 	bl	8010886 <osMessageQueueGet>
}
 8002e52:	b002      	add	sp, #8
 8002e54:	bd10      	pop	{r4, pc}
 8002e56:	bf00      	nop
 8002e58:	24009e60 	.word	0x24009e60

08002e5c <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002e5c:	6803      	ldr	r3, [r0, #0]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e60:	4718      	bx	r3

08002e62 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002e62:	2001      	movs	r0, #1
 8002e64:	4770      	bx	lr

08002e66 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002e66:	e7fe      	b.n	8002e66 <DMA2D_XferErrorCallback>

08002e68 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002e68:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002e6c:	4770      	bx	lr
	...

08002e70 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002e70:	b510      	push	{r4, lr}
 8002e72:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002e7c:	f00d fbb6 	bl	80105ec <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002e80:	6860      	ldr	r0, [r4, #4]
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4798      	blx	r3
 8002e88:	b978      	cbnz	r0, 8002eaa <_ZN8STM32DMA5startEv+0x3a>
 8002e8a:	7a63      	ldrb	r3, [r4, #9]
 8002e8c:	b16b      	cbz	r3, 8002eaa <_ZN8STM32DMA5startEv+0x3a>
 8002e8e:	7a23      	ldrb	r3, [r4, #8]
 8002e90:	b95b      	cbnz	r3, 8002eaa <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002e92:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002e96:	4620      	mov	r0, r4
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002e9e:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002ea6:	f00d bbc4 	b.w	8010632 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002eaa:	490b      	ldr	r1, [pc, #44]	@ (8002ed8 <_ZN8STM32DMA5startEv+0x68>)
 8002eac:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <_ZN8STM32DMA5startEv+0x6c>)
 8002eae:	680b      	ldr	r3, [r1, #0]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d1f2      	bne.n	8002e9e <_ZN8STM32DMA5startEv+0x2e>
 8002eb8:	7a20      	ldrb	r0, [r4, #8]
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d1ef      	bne.n	8002e9e <_ZN8STM32DMA5startEv+0x2e>
 8002ebe:	7aa0      	ldrb	r0, [r4, #10]
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d1ec      	bne.n	8002e9e <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ec4:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002ec6:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002eca:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002ece:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ed0:	f7ff fefc 	bl	8002ccc <DMA2D_CopyBuffer>
    }
 8002ed4:	e7e3      	b.n	8002e9e <_ZN8STM32DMA5startEv+0x2e>
 8002ed6:	bf00      	nop
 8002ed8:	2400082c 	.word	0x2400082c
 8002edc:	24000010 	.word	0x24000010

08002ee0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ee6:	6003      	str	r3, [r0, #0]
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <_ZN8STM32DMAD1Ev+0x1c>)
 8002eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ef2:	f3bf 8f6f 	isb	sy
}
 8002ef6:	4770      	bx	lr
 8002ef8:	0802b188 	.word	0x0802b188
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
}
 8002f04:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002f08:	f7ff ffea 	bl	8002ee0 <_ZN8STM32DMAD1Ev>
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f026 f843 	bl	8028f98 <_ZdlPvj>
 8002f12:	4620      	mov	r0, r4
 8002f14:	bd10      	pop	{r4, pc}
	...

08002f18 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002f1a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f1c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f20:	f042 0210 	orr.w	r2, r2, #16
 8002f24:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002f28:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f2c:	f002 0210 	and.w	r2, r2, #16
 8002f30:	9201      	str	r2, [sp, #4]
 8002f32:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002f34:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f36:	f042 0210 	orr.w	r2, r2, #16
 8002f3a:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002f3c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f3e:	f022 0210 	bic.w	r2, r2, #16
 8002f42:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <_ZN8STM32DMA10initializeEv+0x48>)
 8002f46:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002f48:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002f4a:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <_ZN8STM32DMA10initializeEv+0x50>)
 8002f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <_ZN8STM32DMA10initializeEv+0x54>)
 8002f50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	b002      	add	sp, #8
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	240006a0 	.word	0x240006a0
 8002f64:	080031b5 	.word	0x080031b5
 8002f68:	08002e67 	.word	0x08002e67
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002f70:	b508      	push	{r3, lr}
    switch (format)
 8002f72:	280a      	cmp	r0, #10
 8002f74:	d809      	bhi.n	8002f8a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002f76:	e8df f000 	tbb	[pc, r0]
 8002f7a:	1006      	.short	0x1006
 8002f7c:	0808080e 	.word	0x0808080e
 8002f80:	10101008 	.word	0x10101008
 8002f84:	10          	.byte	0x10
 8002f85:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002f86:	2002      	movs	r0, #2
}
 8002f88:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002f8c:	2191      	movs	r1, #145	@ 0x91
 8002f8e:	4a05      	ldr	r2, [pc, #20]	@ (8002fa4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002f90:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002f92:	f026 fb79 	bl	8029688 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002f96:	2000      	movs	r0, #0
 8002f98:	e7f6      	b.n	8002f88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002f9a:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002f9c:	e7f4      	b.n	8002f88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002f9e:	bf00      	nop
 8002fa0:	0802b009 	.word	0x0802b009
 8002fa4:	0802b024 	.word	0x0802b024
 8002fa8:	0802b06f 	.word	0x0802b06f

08002fac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fb0:	7f88      	ldrb	r0, [r1, #30]
 8002fb2:	f7ff ffdd 	bl	8002f70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fb6:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fb8:	8aa5      	ldrh	r5, [r4, #20]
 8002fba:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fbc:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fbe:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fc2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fc6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fc8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fca:	1b52      	subs	r2, r2, r5
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002fce:	6825      	ldr	r5, [r4, #0]
 8002fd0:	2d08      	cmp	r5, #8
 8002fd2:	d10e      	bne.n	8002ff2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fd4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fd6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002fd8:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002fda:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002fdc:	7f20      	ldrb	r0, [r4, #28]
 8002fde:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002fe2:	61da      	str	r2, [r3, #28]
        return color;
 8002fe4:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002fe6:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002fe8:	4a07      	ldr	r2, [pc, #28]	@ (8003008 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fea:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fec:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002fee:	601a      	str	r2, [r3, #0]
    }
}
 8002ff0:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002ff2:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ff4:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002ff6:	611a      	str	r2, [r3, #16]
 8002ff8:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002ffc:	4a03      	ldr	r2, [pc, #12]	@ (800300c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002ffe:	e7f6      	b.n	8002fee <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8003000:	52001000 	.word	0x52001000
 8003004:	00010009 	.word	0x00010009
 8003008:	00022301 	.word	0x00022301
 800300c:	00032301 	.word	0x00032301

08003010 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8003010:	b508      	push	{r3, lr}
    switch (format)
 8003012:	280b      	cmp	r0, #11
 8003014:	d80b      	bhi.n	800302e <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8003016:	e8df f000 	tbb	[pc, r0]
 800301a:	1206      	.short	0x1206
 800301c:	0a0a0a10 	.word	0x0a0a0a10
 8003020:	0808080a 	.word	0x0808080a
 8003024:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003026:	2002      	movs	r0, #2
}
 8003028:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800302a:	2005      	movs	r0, #5
        break;
 800302c:	e7fc      	b.n	8003028 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003030:	2170      	movs	r1, #112	@ 0x70
 8003032:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8003034:	4805      	ldr	r0, [pc, #20]	@ (800304c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8003036:	f026 fb27 	bl	8029688 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800303a:	2000      	movs	r0, #0
 800303c:	e7f4      	b.n	8003028 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 800303e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003040:	e7f2      	b.n	8003028 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8003042:	bf00      	nop
 8003044:	0802b009 	.word	0x0802b009
 8003048:	0802b0dc 	.word	0x0802b0dc
 800304c:	0802b06f 	.word	0x0802b06f

08003050 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003054:	7f4f      	ldrb	r7, [r1, #29]
{
 8003056:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003058:	4638      	mov	r0, r7
 800305a:	f7ff ffd9 	bl	8003010 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800305e:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003062:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003064:	4628      	mov	r0, r5
 8003066:	f7ff ffd3 	bl	8003010 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 800306a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800306c:	4628      	mov	r0, r5
 800306e:	f7ff ff7f 	bl	8002f70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003072:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8003076:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800307a:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800307e:	4b45      	ldr	r3, [pc, #276]	@ (8003194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003080:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003082:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003084:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003086:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003088:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800308a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800308e:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003090:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003094:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800309a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800309e:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80030a0:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80030a2:	f8d9 4000 	ldr.w	r4, [r9]
 80030a6:	f899 201c 	ldrb.w	r2, [r9, #28]
 80030aa:	2c80      	cmp	r4, #128	@ 0x80
 80030ac:	d022      	beq.n	80030f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80030ae:	d80f      	bhi.n	80030d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80030b0:	2c20      	cmp	r4, #32
 80030b2:	d066      	beq.n	8003182 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030b4:	2c40      	cmp	r4, #64	@ 0x40
 80030b6:	d064      	beq.n	8003182 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030b8:	2c04      	cmp	r4, #4
 80030ba:	d05c      	beq.n	8003176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030bc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80030c0:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80030c2:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030c4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80030c8:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80030ca:	d060      	beq.n	800318e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80030cc:	4a32      	ldr	r2, [pc, #200]	@ (8003198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80030ce:	e03f      	b.n	8003150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80030d0:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80030d4:	d004      	beq.n	80030e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80030d6:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80030da:	d1ef      	bne.n	80030bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030dc:	482f      	ldr	r0, [pc, #188]	@ (800319c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80030de:	e000      	b.n	80030e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030e0:	482f      	ldr	r0, [pc, #188]	@ (80031a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030e2:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 80030e6:	61da      	str	r2, [r3, #28]
 80030e8:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80030ec:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80030ee:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030f0:	6159      	str	r1, [r3, #20]
 80030f2:	e02c      	b.n	800314e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030f4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80030f8:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030fc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003100:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003102:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003104:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003106:	1d21      	adds	r1, r4, #4
 8003108:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800310a:	7821      	ldrb	r1, [r4, #0]
 800310c:	b141      	cbz	r1, 8003120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800310e:	2901      	cmp	r1, #1
 8003110:	d021      	beq.n	8003156 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8003112:	4b24      	ldr	r3, [pc, #144]	@ (80031a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8003114:	f240 110b 	movw	r1, #267	@ 0x10b
 8003118:	4a23      	ldr	r2, [pc, #140]	@ (80031a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 800311a:	4824      	ldr	r0, [pc, #144]	@ (80031ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 800311c:	f026 fab4 	bl	8029688 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	8861      	ldrh	r1, [r4, #2]
 8003124:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003128:	3901      	subs	r1, #1
 800312a:	f022 0210 	bic.w	r2, r2, #16
 800312e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003132:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8003134:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003136:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003138:	69d9      	ldr	r1, [r3, #28]
 800313a:	f041 0120 	orr.w	r1, r1, #32
 800313e:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003140:	69d9      	ldr	r1, [r3, #28]
 8003142:	0689      	lsls	r1, r1, #26
 8003144:	d4fc      	bmi.n	8003140 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003146:	2110      	movs	r1, #16
 8003148:	6099      	str	r1, [r3, #8]
            if (blend)
 800314a:	2a00      	cmp	r2, #0
 800314c:	d0be      	beq.n	80030cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800314e:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003156:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003158:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800315a:	8860      	ldrh	r0, [r4, #2]
 800315c:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003160:	bf18      	it	ne
 8003162:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003164:	3801      	subs	r0, #1
 8003166:	f021 0110 	bic.w	r1, r1, #16
 800316a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800316e:	f041 0110 	orr.w	r1, r1, #16
 8003172:	61d9      	str	r1, [r3, #28]
                break;
 8003174:	e7df      	b.n	8003136 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003176:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 800317a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800317e:	61da      	str	r2, [r3, #28]
 8003180:	e7b5      	b.n	80030ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8003182:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8003186:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003188:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800318c:	e7f7      	b.n	800317e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800318e:	f242 3201 	movw	r2, #8961	@ 0x2301
 8003192:	e7dd      	b.n	8003150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8003194:	52001000 	.word	0x52001000
 8003198:	00012301 	.word	0x00012301
 800319c:	00020009 	.word	0x00020009
 80031a0:	0002000a 	.word	0x0002000a
 80031a4:	0802b126 	.word	0x0802b126
 80031a8:	0802b140 	.word	0x0802b140
 80031ac:	0802b06f 	.word	0x0802b06f
 80031b0:	00022301 	.word	0x00022301

080031b4 <DMA2D_XferCpltCallback>:
 80031b4:	4b02      	ldr	r3, [pc, #8]	@ (80031c0 <DMA2D_XferCpltCallback+0xc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80031ba:	6803      	ldr	r3, [r0, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4718      	bx	r3
 80031c0:	240285b4 	.word	0x240285b4

080031c4 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 80031c4:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4604      	mov	r4, r0
        if (!started_by_external_job)
 80031cc:	b9d3      	cbnz	r3, 8003204 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 80031ce:	6803      	ldr	r3, [r0, #0]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d2:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80031d4:	4919      	ldr	r1, [pc, #100]	@ (800323c <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 80031d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003240 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 80031d8:	680b      	ldr	r3, [r1, #0]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d12a      	bne.n	8003238 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80031e2:	4818      	ldr	r0, [pc, #96]	@ (8003244 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 80031e4:	6800      	ldr	r0, [r0, #0]
 80031e6:	bb38      	cbnz	r0, 8003238 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80031e8:	7a20      	ldrb	r0, [r4, #8]
 80031ea:	bb28      	cbnz	r0, 8003238 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80031ec:	7aa0      	ldrb	r0, [r4, #10]
 80031ee:	bb18      	cbnz	r0, 8003238 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80031f0:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 80031f2:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 80031f6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80031f8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 80031fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003200:	f7ff bd64 	b.w	8002ccc <DMA2D_CopyBuffer>
        if (isRunning)
 8003204:	7a03      	ldrb	r3, [r0, #8]
 8003206:	b143      	cbz	r3, 800321a <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003208:	2300      	movs	r3, #0
 800320a:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003212:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8003216:	f7ff fd9d 	bl	8002d54 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 800321a:	6860      	ldr	r0, [r4, #4]
 800321c:	6803      	ldr	r3, [r0, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4798      	blx	r3
 8003222:	b948      	cbnz	r0, 8003238 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003224:	7a63      	ldrb	r3, [r4, #9]
 8003226:	b13b      	cbz	r3, 8003238 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003228:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 800322a:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 800322e:	4620      	mov	r0, r4
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8003232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8003236:	4718      	bx	r3
    }
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	2400082c 	.word	0x2400082c
 8003240:	24000010 	.word	0x24000010
 8003244:	24000828 	.word	0x24000828

08003248 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 800324c:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <_ZN8STM32DMAC1Ev+0x40>)
 800324e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003250:	2600      	movs	r6, #0
 8003252:	4625      	mov	r5, r4
 8003254:	2260      	movs	r2, #96	@ 0x60
 8003256:	6060      	str	r0, [r4, #4]
 8003258:	7226      	strb	r6, [r4, #8]
 800325a:	7266      	strb	r6, [r4, #9]
 800325c:	f845 3b20 	str.w	r3, [r5], #32
 8003260:	4629      	mov	r1, r5
 8003262:	f011 fcd5 	bl	8014c10 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003266:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 800326a:	60ee      	str	r6, [r5, #12]
 800326c:	3524      	adds	r5, #36	@ 0x24
 800326e:	429d      	cmp	r5, r3
 8003270:	d1fb      	bne.n	800326a <_ZN8STM32DMAC1Ev+0x22>
 8003272:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8003276:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003278:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 800327c:	f00d f981 	bl	8010582 <osMutexNew>
 8003280:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8003284:	4620      	mov	r0, r4
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	0802b188 	.word	0x0802b188

0800328c <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800328c:	4b03      	ldr	r3, [pc, #12]	@ (800329c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	07d2      	lsls	r2, r2, #31
 8003292:	d4fc      	bmi.n	800328e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003294:	2223      	movs	r2, #35	@ 0x23
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	52001000 	.word	0x52001000

080032a0 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032a0:	4a0b      	ldr	r2, [pc, #44]	@ (80032d0 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80032a2:	6953      	ldr	r3, [r2, #20]
 80032a4:	03db      	lsls	r3, r3, #15
 80032a6:	d511      	bpl.n	80032cc <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80032a8:	2900      	cmp	r1, #0
 80032aa:	dd0f      	ble.n	80032cc <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80032ac:	f000 031f 	and.w	r3, r0, #31
 80032b0:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80032b2:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80032b6:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80032b8:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80032bc:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80032be:	1a0b      	subs	r3, r1, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	dcf9      	bgt.n	80032b8 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 80032c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032c8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80032d4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032d6:	4c10      	ldr	r4, [pc, #64]	@ (8003318 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 80032d8:	6825      	ldr	r5, [r4, #0]
 80032da:	07ed      	lsls	r5, r5, #31
 80032dc:	d4fc      	bmi.n	80032d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032de:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032e0:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 80032e2:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032e4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80032e6:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032ea:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80032ee:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032f0:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80032f2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 80032f4:	d00c      	beq.n	8003310 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032f6:	4909      	ldr	r1, [pc, #36]	@ (800331c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80032f8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80032fc:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032fe:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8003302:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003304:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003306:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003308:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800330a:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800330c:	6023      	str	r3, [r4, #0]
    }
}
 800330e:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003310:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003312:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003314:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003316:	e7f9      	b.n	800330c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003318:	52001000 	.word	0x52001000
 800331c:	00010009 	.word	0x00010009
 8003320:	00020001 	.word	0x00020001
 8003324:	00030001 	.word	0x00030001

08003328 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003328:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800332a:	4c0e      	ldr	r4, [pc, #56]	@ (8003364 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 800332c:	6825      	ldr	r5, [r4, #0]
 800332e:	07ed      	lsls	r5, r5, #31
 8003330:	d4fc      	bmi.n	800332c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003332:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003334:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8003336:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003338:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800333a:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800333e:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003342:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003344:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003346:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003348:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 800334a:	d007      	beq.n	800335c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800334c:	4a06      	ldr	r2, [pc, #24]	@ (8003368 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 800334e:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8003352:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003354:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003356:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003358:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 800335a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800335c:	4b03      	ldr	r3, [pc, #12]	@ (800336c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 800335e:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003360:	6025      	str	r5, [r4, #0]
}
 8003362:	e7fa      	b.n	800335a <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8003364:	52001000 	.word	0x52001000
 8003368:	00020001 	.word	0x00020001
 800336c:	ff020001 	.word	0xff020001

08003370 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003370:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003372:	4c0b      	ldr	r4, [pc, #44]	@ (80033a0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8003374:	6825      	ldr	r5, [r4, #0]
 8003376:	07ed      	lsls	r5, r5, #31
 8003378:	d4fc      	bmi.n	8003374 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800337a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800337c:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800337e:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003380:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003382:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003388:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800338a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800338c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800338e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003390:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003392:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003394:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003396:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003398:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800339a:	6023      	str	r3, [r4, #0]
}
 800339c:	bd30      	pop	{r4, r5, pc}
 800339e:	bf00      	nop
 80033a0:	52001000 	.word	0x52001000
 80033a4:	00020001 	.word	0x00020001

080033a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80033a8:	2001      	movs	r0, #1
 80033aa:	4770      	bx	lr

080033ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80033ac:	200c      	movs	r0, #12
 80033ae:	4770      	bx	lr

080033b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80033b0:	230c      	movs	r3, #12
 80033b2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033b6:	3008      	adds	r0, #8
 80033b8:	4770      	bx	lr

080033ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80033ba:	230c      	movs	r3, #12
 80033bc:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033c0:	3008      	adds	r0, #8
 80033c2:	4770      	bx	lr

080033c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80033c4:	2001      	movs	r0, #1
 80033c6:	4770      	bx	lr

080033c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80033c8:	f243 407c 	movw	r0, #13436	@ 0x347c
 80033cc:	4770      	bx	lr

080033ce <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80033ce:	f243 437c 	movw	r3, #13436	@ 0x347c
 80033d2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033d6:	3008      	adds	r0, #8
 80033d8:	4770      	bx	lr

080033da <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80033da:	f243 437c 	movw	r3, #13436	@ 0x347c
 80033de:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033e2:	3008      	adds	r0, #8
 80033e4:	4770      	bx	lr

080033e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80033e6:	2001      	movs	r0, #1
 80033e8:	4770      	bx	lr

080033ea <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80033ea:	2010      	movs	r0, #16
 80033ec:	4770      	bx	lr

080033ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80033ee:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80033f2:	3008      	adds	r0, #8
 80033f4:	4770      	bx	lr

080033f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80033f6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80033fa:	3008      	adds	r0, #8
 80033fc:	4770      	bx	lr

080033fe <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenScreenNoTransition();
 80033fe:	4608      	mov	r0, r1
 8003400:	f004 bc1c 	b.w	8007c3c <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>

08003404 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003404:	4b03      	ldr	r3, [pc, #12]	@ (8003414 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003406:	b510      	push	{r4, lr}
 8003408:	4604      	mov	r4, r0
 800340a:	6003      	str	r3, [r0, #0]
 800340c:	f00f fa33 	bl	8012876 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003410:	4620      	mov	r0, r4
 8003412:	bd10      	pop	{r4, pc}
 8003414:	0802b240 	.word	0x0802b240

08003418 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
 800341c:	f7ff fff2 	bl	8003404 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003420:	2114      	movs	r1, #20
 8003422:	4620      	mov	r0, r4
 8003424:	f025 fdb8 	bl	8028f98 <_ZdlPvj>
 8003428:	4620      	mov	r0, r4
 800342a:	bd10      	pop	{r4, pc}

0800342c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800342e:	b510      	push	{r4, lr}
 8003430:	4604      	mov	r4, r0
 8003432:	6003      	str	r3, [r0, #0]
 8003434:	f00f fa1f 	bl	8012876 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003438:	4620      	mov	r0, r4
 800343a:	bd10      	pop	{r4, pc}
 800343c:	0802b20c 	.word	0x0802b20c

08003440 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003440:	b510      	push	{r4, lr}
 8003442:	4604      	mov	r4, r0
 8003444:	f7ff fff2 	bl	800342c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003448:	f243 4184 	movw	r1, #13444	@ 0x3484
 800344c:	4620      	mov	r0, r4
 800344e:	f025 fda3 	bl	8028f98 <_ZdlPvj>
 8003452:	4620      	mov	r0, r4
 8003454:	bd10      	pop	{r4, pc}
	...

08003458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800345a:	b510      	push	{r4, lr}
 800345c:	4604      	mov	r4, r0
 800345e:	6003      	str	r3, [r0, #0]
 8003460:	f00f fa09 	bl	8012876 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003464:	4620      	mov	r0, r4
 8003466:	bd10      	pop	{r4, pc}
 8003468:	0802b1d8 	.word	0x0802b1d8

0800346c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800346c:	b510      	push	{r4, lr}
 800346e:	4604      	mov	r4, r0
 8003470:	f7ff fff2 	bl	8003458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003474:	2118      	movs	r1, #24
 8003476:	4620      	mov	r0, r4
 8003478:	f025 fd8e 	bl	8028f98 <_ZdlPvj>
 800347c:	4620      	mov	r0, r4
 800347e:	bd10      	pop	{r4, pc}

08003480 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003480:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <_ZN12FrontendHeapD1Ev+0x28>)
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	6003      	str	r3, [r0, #0]
 8003488:	f500 5052 	add.w	r0, r0, #13440	@ 0x3480
 800348c:	3030      	adds	r0, #48	@ 0x30
 800348e:	f7ff ffb9 	bl	8003404 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003492:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003496:	f7ff ffc9 	bl	800342c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12DiagnoseViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800349a:	f104 0014 	add.w	r0, r4, #20
 800349e:	f7ff ffdb 	bl	8003458 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19CalculatorPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034a2:	4620      	mov	r0, r4
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	bf00      	nop
 80034a8:	0802b274 	.word	0x0802b274

080034ac <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034ac:	b508      	push	{r3, lr}
 80034ae:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <__tcf_0+0xc>)
 80034b0:	f7ff ffe6 	bl	8003480 <_ZN12FrontendHeapD1Ev>
 80034b4:	bd08      	pop	{r3, pc}
 80034b6:	bf00      	nop
 80034b8:	2400ad20 	.word	0x2400ad20

080034bc <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
 80034c0:	f7ff ffde 	bl	8003480 <_ZN12FrontendHeapD1Ev>
 80034c4:	f243 6124 	movw	r1, #13860	@ 0x3624
 80034c8:	4620      	mov	r0, r4
 80034ca:	f025 fd65 	bl	8028f98 <_ZdlPvj>
 80034ce:	4620      	mov	r0, r4
 80034d0:	bd10      	pop	{r4, pc}
	...

080034d4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80034d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80034d8:	f000 fc5c 	bl	8003d94 <_ZN14BitmapDatabase11getInstanceEv>
 80034dc:	2400      	movs	r4, #0
 80034de:	4605      	mov	r5, r0
 80034e0:	f000 fc5c 	bl	8003d9c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80034e4:	4623      	mov	r3, r4
 80034e6:	4601      	mov	r1, r0
 80034e8:	4622      	mov	r2, r4
 80034ea:	4628      	mov	r0, r5
 80034ec:	9400      	str	r4, [sp, #0]
 80034ee:	f01a ff25 	bl	801e33c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80034f2:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <touchgfx_init+0xbc>)
 80034f4:	4a27      	ldr	r2, [pc, #156]	@ (8003594 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80034f6:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80034f8:	4d27      	ldr	r5, [pc, #156]	@ (8003598 <touchgfx_init+0xc4>)
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	f005 fa46 	bl	800898c <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003500:	4b26      	ldr	r3, [pc, #152]	@ (800359c <touchgfx_init+0xc8>)
 8003502:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003504:	4827      	ldr	r0, [pc, #156]	@ (80035a4 <touchgfx_init+0xd0>)
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	f01a fdc4 	bl	801e094 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	f3bf 8f5b 	dmb	ish
 8003512:	07db      	lsls	r3, r3, #31
 8003514:	d436      	bmi.n	8003584 <touchgfx_init+0xb0>
 8003516:	4628      	mov	r0, r5
 8003518:	f025 fd40 	bl	8028f9c <__cxa_guard_acquire>
 800351c:	b390      	cbz	r0, 8003584 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800351e:	4c22      	ldr	r4, [pc, #136]	@ (80035a8 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 8003520:	4f22      	ldr	r7, [pc, #136]	@ (80035ac <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003522:	4b23      	ldr	r3, [pc, #140]	@ (80035b0 <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 8003524:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003528:	f107 0618 	add.w	r6, r7, #24
          screenStorage(scr),
 800352c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003530:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003532:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003534:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003538:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 800353a:	6126      	str	r6, [r4, #16]
 800353c:	f00f f99c 	bl	8012878 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003540:	4b1c      	ldr	r3, [pc, #112]	@ (80035b4 <touchgfx_init+0xe0>)
 8003542:	4640      	mov	r0, r8
 8003544:	6163      	str	r3, [r4, #20]
 8003546:	f00f f997 	bl	8012878 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800354a:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <touchgfx_init+0xe4>)
 800354c:	4638      	mov	r0, r7
 800354e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003550:	f00f f992 	bl	8012878 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003554:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8003558:	4a18      	ldr	r2, [pc, #96]	@ (80035bc <touchgfx_init+0xe8>)
 800355a:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
 800355e:	f8c3 24b0 	str.w	r2, [r3, #1200]	@ 0x4b0
 8003562:	f005 fc33 	bl	8008dcc <_ZN5ModelC1Ev>
 8003566:	4622      	mov	r2, r4
 8003568:	f107 0114 	add.w	r1, r7, #20
 800356c:	4630      	mov	r0, r6
 800356e:	f005 fbe7 	bl	8008d40 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003572:	4630      	mov	r0, r6
 8003574:	f004 fb62 	bl	8007c3c <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8003578:	4811      	ldr	r0, [pc, #68]	@ (80035c0 <touchgfx_init+0xec>)
 800357a:	f026 f8a3 	bl	80296c4 <atexit>
 800357e:	4628      	mov	r0, r5
 8003580:	f025 fd18 	bl	8028fb4 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003584:	480f      	ldr	r0, [pc, #60]	@ (80035c4 <touchgfx_init+0xf0>)
}
 8003586:	b002      	add	sp, #8
 8003588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800358c:	f7fe bcd8 	b.w	8001f40 <_ZN11TouchGFXHAL10initializeEv>
 8003590:	24028618 	.word	0x24028618
 8003594:	24009ee4 	.word	0x24009ee4
 8003598:	2400ad1c 	.word	0x2400ad1c
 800359c:	24009f04 	.word	0x24009f04
 80035a0:	24009ee8 	.word	0x24009ee8
 80035a4:	24000034 	.word	0x24000034
 80035a8:	2400ad20 	.word	0x2400ad20
 80035ac:	2400e1d0 	.word	0x2400e1d0
 80035b0:	0802b274 	.word	0x0802b274
 80035b4:	0802b1d8 	.word	0x0802b1d8
 80035b8:	0802b20c 	.word	0x0802b20c
 80035bc:	0802b240 	.word	0x0802b240
 80035c0:	080034ad 	.word	0x080034ad
 80035c4:	24009e68 	.word	0x24009e68

080035c8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80035c8:	4770      	bx	lr
	...

080035cc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80035cc:	4801      	ldr	r0, [pc, #4]	@ (80035d4 <touchgfx_taskEntry+0x8>)
 80035ce:	f7fe bcc9 	b.w	8001f64 <_ZN11TouchGFXHAL9taskEntryEv>
 80035d2:	bf00      	nop
 80035d4:	24009e68 	.word	0x24009e68

080035d8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80035d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80035da:	4c0e      	ldr	r4, [pc, #56]	@ (8003614 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80035dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80035de:	4e0f      	ldr	r6, [pc, #60]	@ (800361c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80035e0:	4620      	mov	r0, r4
static LCD24bpp display;
 80035e2:	4d0f      	ldr	r5, [pc, #60]	@ (8003620 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80035e4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80035e6:	f7ff fe2f 	bl	8003248 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80035ea:	4628      	mov	r0, r5
 80035ec:	f01e fd48 	bl	8022080 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80035f0:	480c      	ldr	r0, [pc, #48]	@ (8003624 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80035f2:	f018 fa85 	bl	801bb00 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80035f6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80035fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80035fe:	4621      	mov	r1, r4
 8003600:	4809      	ldr	r0, [pc, #36]	@ (8003628 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003602:	e9cd 3200 	strd	r3, r2, [sp]
 8003606:	4633      	mov	r3, r6
 8003608:	462a      	mov	r2, r5
 800360a:	f7fe fd3f 	bl	800208c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800360e:	b002      	add	sp, #8
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	bf00      	nop
 8003614:	24009f70 	.word	0x24009f70
 8003618:	0802a990 	.word	0x0802a990
 800361c:	2400ad18 	.word	0x2400ad18
 8003620:	24009f04 	.word	0x24009f04
 8003624:	24009ee8 	.word	0x24009ee8
 8003628:	24009e68 	.word	0x24009e68

0800362c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800362c:	4801      	ldr	r0, [pc, #4]	@ (8003634 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800362e:	f7ff bc57 	b.w	8002ee0 <_ZN8STM32DMAD1Ev>
 8003632:	bf00      	nop
 8003634:	24009f70 	.word	0x24009f70

08003638 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003638:	2000      	movs	r0, #0
 800363a:	4770      	bx	lr

0800363c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800363c:	8081      	strh	r1, [r0, #4]
    }
 800363e:	4770      	bx	lr

08003640 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003640:	80c1      	strh	r1, [r0, #6]
    }
 8003642:	4770      	bx	lr

08003644 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003644:	8101      	strh	r1, [r0, #8]
    }
 8003646:	4770      	bx	lr

08003648 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003648:	8141      	strh	r1, [r0, #10]
    }
 800364a:	4770      	bx	lr

0800364c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800364c:	4770      	bx	lr

0800364e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800364e:	4770      	bx	lr

08003650 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003650:	4770      	bx	lr

08003652 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003652:	4770      	bx	lr

08003654 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003654:	4770      	bx	lr

08003656 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003656:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003658:	88c4      	ldrh	r4, [r0, #6]
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	1b12      	subs	r2, r2, r4
 800365e:	8884      	ldrh	r4, [r0, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	1b09      	subs	r1, r1, r4
 8003664:	b212      	sxth	r2, r2
    }
 8003666:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800366a:	b209      	sxth	r1, r1
 800366c:	4718      	bx	r3

0800366e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800366e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003672:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800367e:	6010      	str	r0, [r2, #0]
    }
 8003680:	4770      	bx	lr

08003682 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003682:	2000      	movs	r0, #0
 8003684:	4770      	bx	lr

08003686 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003686:	888b      	ldrh	r3, [r1, #4]
 8003688:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800368a:	2001      	movs	r0, #1
 800368c:	4770      	bx	lr

0800368e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800368e:	4770      	bx	lr

08003690 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003690:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003694:	4770      	bx	lr

08003696 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003696:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800369a:	4770      	bx	lr

0800369c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800369c:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800369e:	b510      	push	{r4, lr}
        return rect.width;
 80036a0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80036a4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80036a8:	8002      	strh	r2, [r0, #0]
 80036aa:	8042      	strh	r2, [r0, #2]
 80036ac:	8084      	strh	r4, [r0, #4]
 80036ae:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80036b0:	bd10      	pop	{r4, pc}

080036b2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80036b2:	2200      	movs	r2, #0
 80036b4:	8002      	strh	r2, [r0, #0]
 80036b6:	8042      	strh	r2, [r0, #2]
 80036b8:	8082      	strh	r2, [r0, #4]
 80036ba:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80036bc:	4770      	bx	lr

080036be <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80036be:	7701      	strb	r1, [r0, #28]
    }
 80036c0:	4770      	bx	lr

080036c2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80036c2:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80036c6:	4770      	bx	lr

080036c8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80036c8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80036cc:	4770      	bx	lr

080036ce <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80036ce:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80036d2:	4770      	bx	lr

080036d4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80036d4:	2001      	movs	r0, #1
 80036d6:	4770      	bx	lr

080036d8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80036d8:	3098      	adds	r0, #152	@ 0x98
 80036da:	4770      	bx	lr

080036dc <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80036dc:	308c      	adds	r0, #140	@ 0x8c
 80036de:	4770      	bx	lr

080036e0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80036e0:	3084      	adds	r0, #132	@ 0x84
 80036e2:	4770      	bx	lr

080036e4 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80036e4:	4770      	bx	lr
	...

080036e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	4b02      	ldr	r3, [pc, #8]	@ (80036f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80036ea:	2290      	movs	r2, #144	@ 0x90
 80036ec:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80036f8:	4770      	bx	lr

080036fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80036fa:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80036fc:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003700:	4770      	bx	lr

08003702 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003702:	4770      	bx	lr

08003704 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003704:	4770      	bx	lr

08003706 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003706:	4770      	bx	lr

08003708 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003708:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800370c:	4611      	mov	r1, r2
 800370e:	6840      	ldr	r0, [r0, #4]
 8003710:	6803      	ldr	r3, [r0, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4718      	bx	r3

08003716 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003716:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800371a:	4770      	bx	lr

0800371c <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800371c:	b510      	push	{r4, lr}
 800371e:	4604      	mov	r4, r0
 8003720:	212c      	movs	r1, #44	@ 0x2c
 8003722:	f025 fc39 	bl	8028f98 <_ZdlPvj>
 8003726:	4620      	mov	r0, r4
 8003728:	bd10      	pop	{r4, pc}

0800372a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800372a:	b510      	push	{r4, lr}
 800372c:	4604      	mov	r4, r0
 800372e:	2148      	movs	r1, #72	@ 0x48
 8003730:	f025 fc32 	bl	8028f98 <_ZdlPvj>
 8003734:	4620      	mov	r0, r4
 8003736:	bd10      	pop	{r4, pc}

08003738 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003738:	b510      	push	{r4, lr}
 800373a:	4604      	mov	r4, r0
 800373c:	21bc      	movs	r1, #188	@ 0xbc
 800373e:	f025 fc2b 	bl	8028f98 <_ZdlPvj>
 8003742:	4620      	mov	r0, r4
 8003744:	bd10      	pop	{r4, pc}
	...

08003748 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4604      	mov	r4, r0
    HAL::initialize();
 800374c:	f010 fbc3 	bl	8013ed6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003754:	f017 f85c 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8003758:	4601      	mov	r1, r0
 800375a:	4620      	mov	r0, r4
 800375c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	4908      	ldr	r1, [pc, #32]	@ (8003784 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003762:	4620      	mov	r0, r4
 8003764:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003768:	2300      	movs	r3, #0
 800376a:	461a      	mov	r2, r3
 800376c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800376e:	6863      	ldr	r3, [r4, #4]
 8003770:	4a05      	ldr	r2, [pc, #20]	@ (8003788 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003772:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003776:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003778:	4a05      	ldr	r2, [pc, #20]	@ (8003790 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800377c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800377e:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003780:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003782:	bd38      	pop	{r3, r4, r5, pc}
 8003784:	d0119400 	.word	0xd0119400
 8003788:	2400e44c 	.word	0x2400e44c
 800378c:	2400e404 	.word	0x2400e404
 8003790:	d0000000 	.word	0xd0000000
 8003794:	00119400 	.word	0x00119400

08003798 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4604      	mov	r4, r0
 800379c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800379e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	f00c ff22 	bl	80105ec <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80037a8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80037aa:	f00c ff42 	bl	8010632 <osMutexRelease>
        streams[handle].isActive = false;
 80037ae:	2324      	movs	r3, #36	@ 0x24
 80037b0:	fb03 4505 	mla	r5, r3, r5, r4
 80037b4:	2300      	movs	r3, #0
 80037b6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80037ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80037be:	b90b      	cbnz	r3, 80037c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80037c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80037c2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80037c4:	bd38      	pop	{r3, r4, r5, pc}

080037c6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80037c6:	f010 bb36 	b.w	8013e36 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080037ca <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80037ca:	f010 bc98 	b.w	80140fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80037ce:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80037d2:	b112      	cbz	r2, 80037da <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80037d4:	6803      	ldr	r3, [r0, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	4718      	bx	r3
    }
 80037da:	4770      	bx	lr

080037dc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037dc:	4a12      	ldr	r2, [pc, #72]	@ (8003828 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80037de:	6953      	ldr	r3, [r2, #20]
 80037e0:	03db      	lsls	r3, r3, #15
{
 80037e2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037e4:	d51e      	bpl.n	8003824 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80037ec:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80037f0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80037f4:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80037f8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80037fc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003800:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003802:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003806:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003808:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800380c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800380e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003812:	d2f9      	bcs.n	8003808 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003814:	3b20      	subs	r3, #32
 8003816:	f113 0f20 	cmn.w	r3, #32
 800381a:	d1f2      	bne.n	8003802 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800381c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003820:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003824:	bd70      	pop	{r4, r5, r6, pc}
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800382c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800382e:	b131      	cbz	r1, 800383e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003832:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003836:	4a04      	ldr	r2, [pc, #16]	@ (8003848 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003838:	4804      	ldr	r0, [pc, #16]	@ (800384c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800383a:	f025 ff25 	bl	8029688 <__assert_func>
    }
 800383e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003842:	bd08      	pop	{r3, pc}
 8003844:	0802b280 	.word	0x0802b280
 8003848:	0802b294 	.word	0x0802b294
 800384c:	0802b41e 	.word	0x0802b41e

08003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003850:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003852:	b131      	cbz	r1, 8003862 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003856:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800385a:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800385c:	4806      	ldr	r0, [pc, #24]	@ (8003878 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800385e:	f025 ff13 	bl	8029688 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003862:	6840      	ldr	r0, [r0, #4]
 8003864:	4611      	mov	r1, r2
 8003866:	6803      	ldr	r3, [r0, #0]
    }
 8003868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	4718      	bx	r3
 8003870:	0802b280 	.word	0x0802b280
 8003874:	0802b468 	.word	0x0802b468
 8003878:	0802b41e 	.word	0x0802b41e

0800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800387c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800387e:	b129      	cbz	r1, 800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003880:	4b03      	ldr	r3, [pc, #12]	@ (8003890 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003882:	2179      	movs	r1, #121	@ 0x79
 8003884:	4a03      	ldr	r2, [pc, #12]	@ (8003894 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003886:	4804      	ldr	r0, [pc, #16]	@ (8003898 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003888:	f025 fefe 	bl	8029688 <__assert_func>
    }
 800388c:	68c0      	ldr	r0, [r0, #12]
 800388e:	bd08      	pop	{r3, pc}
 8003890:	0802b280 	.word	0x0802b280
 8003894:	0802b616 	.word	0x0802b616
 8003898:	0802b41e 	.word	0x0802b41e

0800389c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 800389c:	b510      	push	{r4, lr}
 800389e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80038a0:	b129      	cbz	r1, 80038ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80038a2:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80038a4:	21a2      	movs	r1, #162	@ 0xa2
 80038a6:	4a19      	ldr	r2, [pc, #100]	@ (800390c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80038a8:	4819      	ldr	r0, [pc, #100]	@ (8003910 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80038aa:	f025 feed 	bl	8029688 <__assert_func>
        switch (cmd)
 80038ae:	2a05      	cmp	r2, #5
 80038b0:	d815      	bhi.n	80038de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80038b2:	e8df f002 	tbb	[pc, r2]
 80038b6:	1103      	.short	0x1103
 80038b8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80038bc:	6840      	ldr	r0, [r0, #4]
 80038be:	6803      	ldr	r3, [r0, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	4798      	blx	r3
 80038c4:	b158      	cbz	r0, 80038de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80038cc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80038d0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80038d2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80038d6:	e002      	b.n	80038de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80038d8:	2300      	movs	r3, #0
 80038da:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80038de:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80038e0:	6203      	str	r3, [r0, #32]
 80038e2:	e7f5      	b.n	80038d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80038e4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80038ec:	e7f0      	b.n	80038d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	6203      	str	r3, [r0, #32]
            break;
 80038f8:	e7f1      	b.n	80038de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80038fa:	3b00      	subs	r3, #0
 80038fc:	bf18      	it	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003904:	e7eb      	b.n	80038de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003906:	bf00      	nop
 8003908:	0802b280 	.word	0x0802b280
 800390c:	0802b7cb 	.word	0x0802b7cb
 8003910:	0802b41e 	.word	0x0802b41e

08003914 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003914:	b510      	push	{r4, lr}
 8003916:	460c      	mov	r4, r1
 8003918:	4611      	mov	r1, r2
 800391a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800391c:	b12c      	cbz	r4, 800392a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003920:	2190      	movs	r1, #144	@ 0x90
 8003922:	4a06      	ldr	r2, [pc, #24]	@ (800393c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003924:	4806      	ldr	r0, [pc, #24]	@ (8003940 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003926:	f025 feaf 	bl	8029688 <__assert_func>
        stream.frameNumber = 0;
 800392a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800392c:	6840      	ldr	r0, [r0, #4]
 800392e:	6803      	ldr	r3, [r0, #0]
    }
 8003930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4718      	bx	r3
 8003938:	0802b280 	.word	0x0802b280
 800393c:	0802b99f 	.word	0x0802b99f
 8003940:	0802b41e 	.word	0x0802b41e

08003944 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003944:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003946:	b129      	cbz	r1, 8003954 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003948:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800394a:	2182      	movs	r1, #130	@ 0x82
 800394c:	4a05      	ldr	r2, [pc, #20]	@ (8003964 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800394e:	4806      	ldr	r0, [pc, #24]	@ (8003968 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003950:	f025 fe9a 	bl	8029688 <__assert_func>
        stream.tickCount = 0;
 8003954:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003958:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800395c:	bd08      	pop	{r3, pc}
 800395e:	bf00      	nop
 8003960:	0802b280 	.word	0x0802b280
 8003964:	0802bb7a 	.word	0x0802bb7a
 8003968:	0802b41e 	.word	0x0802b41e

0800396c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800396c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003970:	b510      	push	{r4, lr}
 8003972:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003974:	b153      	cbz	r3, 800398c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003976:	f04f 31ff 	mov.w	r1, #4294967295
 800397a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800397c:	f00c fe36 	bl	80105ec <osMutexAcquire>
            firstDrawThisFrame = false;
 8003980:	2300      	movs	r3, #0
 8003982:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003986:	2301      	movs	r3, #1
 8003988:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800398c:	bd10      	pop	{r4, pc}

0800398e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800398e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003992:	b11a      	cbz	r2, 800399c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003994:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003998:	b102      	cbz	r2, 800399c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800399a:	6018      	str	r0, [r3, #0]
        }
    }
 800399c:	4770      	bx	lr
	...

080039a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80039a0:	b510      	push	{r4, lr}
 80039a2:	4604      	mov	r4, r0
 80039a4:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80039a6:	b129      	cbz	r1, 80039b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80039aa:	21d0      	movs	r1, #208	@ 0xd0
 80039ac:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80039ae:	4814      	ldr	r0, [pc, #80]	@ (8003a00 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80039b0:	f025 fe6a 	bl	8029688 <__assert_func>
        if (stream.isPlaying)
 80039b4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80039b8:	b133      	cbz	r3, 80039c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80039ba:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80039c2:	6963      	ldr	r3, [r4, #20]
 80039c4:	4413      	add	r3, r2
 80039c6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80039c8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80039cc:	b90b      	cbnz	r3, 80039d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80039ce:	2001      	movs	r0, #1
    }
 80039d0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80039d2:	68a3      	ldr	r3, [r4, #8]
 80039d4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80039d6:	6803      	ldr	r3, [r0, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80039dc:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80039de:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80039e2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d1f1      	bne.n	80039ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80039ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1ee      	bne.n	80039d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80039f2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80039f6:	e7eb      	b.n	80039d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80039f8:	0802b280 	.word	0x0802b280
 80039fc:	0802bd36 	.word	0x0802bd36
 8003a00:	0802b41e 	.word	0x0802b41e
 8003a04:	240285b4 	.word	0x240285b4

08003a08 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003a08:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003a0a:	4c1a      	ldr	r4, [pc, #104]	@ (8003a74 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003a0c:	4605      	mov	r5, r0
    HAL::endFrame();
 8003a0e:	f010 fa55 	bl	8013ebc <_ZN8touchgfx3HAL8endFrameEv>
 8003a12:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003a16:	b913      	cbnz	r3, 8003a1e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003a18:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003a1c:	b1ab      	cbz	r3, 8003a4a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003a1e:	69e1      	ldr	r1, [r4, #28]
 8003a20:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003a24:	4353      	muls	r3, r2
 8003a26:	6922      	ldr	r2, [r4, #16]
 8003a28:	434a      	muls	r2, r1
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d30d      	bcc.n	8003a4a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003a2e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003a32:	b138      	cbz	r0, 8003a44 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003a3a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003a3c:	bf98      	it	ls
 8003a3e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003a42:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003a4a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003a4c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003a4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003a52:	f00c fe83 	bl	801075c <osSemaphoreRelease>
        if (uiHasMutex)
 8003a56:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003a5a:	b12b      	cbz	r3, 8003a68 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003a5c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003a5e:	f00c fde8 	bl	8010632 <osMutexRelease>
            uiHasMutex = false;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003a68:	6868      	ldr	r0, [r5, #4]
 8003a6a:	6803      	ldr	r3, [r0, #0]
}
 8003a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	4718      	bx	r3
 8003a74:	2400e404 	.word	0x2400e404

08003a78 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003a7a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003a82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a86:	f3bf 8f6f 	isb	sy
}
 8003a8a:	4770      	bx	lr
 8003a8c:	e000e100 	.word	0xe000e100

08003a90 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a90:	4b02      	ldr	r3, [pc, #8]	@ (8003a9c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003a92:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000e100 	.word	0xe000e100

08003aa0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003aa4:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003aa8:	b9d8      	cbnz	r0, 8003ae2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003aaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003aae:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003ab0:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003ab2:	60d8      	str	r0, [r3, #12]
 8003ab4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ab6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003aba:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003abc:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003ac0:	6158      	str	r0, [r3, #20]
 8003ac2:	6198      	str	r0, [r3, #24]
 8003ac4:	61d8      	str	r0, [r3, #28]
 8003ac6:	6218      	str	r0, [r3, #32]
 8003ac8:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003aca:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003acc:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ad0:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003ad4:	443c      	add	r4, r7
 8003ad6:	42a2      	cmp	r2, r4
 8003ad8:	d90a      	bls.n	8003af0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003ada:	4b0b      	ldr	r3, [pc, #44]	@ (8003b08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003adc:	2152      	movs	r1, #82	@ 0x52
 8003ade:	4a0b      	ldr	r2, [pc, #44]	@ (8003b0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003ae0:	e003      	b.n	8003aea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003ae4:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003aea:	480b      	ldr	r0, [pc, #44]	@ (8003b18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003aec:	f025 fdcc 	bl	8029688 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003af0:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003af2:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003af4:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003af8:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003afc:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003afe:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003b02:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003b04:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b08:	0802c08e 	.word	0x0802c08e
 8003b0c:	0802c0c9 	.word	0x0802c0c9
 8003b10:	0802bed7 	.word	0x0802bed7
 8003b14:	0802bf07 	.word	0x0802bf07
 8003b18:	0802b41e 	.word	0x0802b41e

08003b1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003b1c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003b1e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b20:	4e12      	ldr	r6, [pc, #72]	@ (8003b6c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003b22:	4604      	mov	r4, r0
 8003b24:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003b26:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003b28:	6003      	str	r3, [r0, #0]
 8003b2a:	6833      	ldr	r3, [r6, #0]
 8003b2c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b30:	b10a      	cbz	r2, 8003b36 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003b32:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b34:	b900      	cbnz	r0, 8003b38 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003b36:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003b38:	6803      	ldr	r3, [r0, #0]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	4798      	blx	r3
 8003b3e:	1e43      	subs	r3, r0, #1
 8003b40:	425d      	negs	r5, r3
 8003b42:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003b48:	b130      	cbz	r0, 8003b58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003b4a:	6803      	ldr	r3, [r0, #0]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	4798      	blx	r3
 8003b50:	2801      	cmp	r0, #1
 8003b52:	bf08      	it	eq
 8003b54:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003b58:	b92d      	cbnz	r5, 8003b66 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003b5c:	2127      	movs	r1, #39	@ 0x27
 8003b5e:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003b60:	4806      	ldr	r0, [pc, #24]	@ (8003b7c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003b62:	f025 fd91 	bl	8029688 <__assert_func>
    }
 8003b66:	4620      	mov	r0, r4
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	bf00      	nop
 8003b6c:	240285b4 	.word	0x240285b4
 8003b70:	0802c37c 	.word	0x0802c37c
 8003b74:	0802c26c 	.word	0x0802c26c
 8003b78:	0802c2ca 	.word	0x0802c2ca
 8003b7c:	0802c303 	.word	0x0802c303

08003b80 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003b80:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003b82:	4e24      	ldr	r6, [pc, #144]	@ (8003c14 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003b84:	6835      	ldr	r5, [r6, #0]
 8003b86:	f3bf 8f5b 	dmb	ish
 8003b8a:	f015 0501 	ands.w	r5, r5, #1
 8003b8e:	d13f      	bne.n	8003c10 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003b90:	4630      	mov	r0, r6
 8003b92:	f025 fa03 	bl	8028f9c <__cxa_guard_acquire>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d03a      	beq.n	8003c10 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003b9a:	4c1f      	ldr	r4, [pc, #124]	@ (8003c18 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c1c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003b9e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003ba2:	6125      	str	r5, [r4, #16]
 8003ba4:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003ba6:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003ba8:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003baa:	e9c4 3500 	strd	r3, r5, [r4]
 8003bae:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003bb2:	f018 fa04 	bl	801bfbe <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003bb6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bba:	f012 fbaf 	bl	801631c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003bbe:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003bc0:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003bc2:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003bc4:	4b17      	ldr	r3, [pc, #92]	@ (8003c24 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003bc6:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003bca:	f7ff ffa7 	bl	8003b1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003bce:	4b16      	ldr	r3, [pc, #88]	@ (8003c28 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003bd0:	4816      	ldr	r0, [pc, #88]	@ (8003c2c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003bd2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003bd6:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003bd8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003bdc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003be0:	2364      	movs	r3, #100	@ 0x64
 8003be2:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003be6:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003bea:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003bf4:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003bf8:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003bfc:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003c02:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003c06:	f025 fd5d 	bl	80296c4 <atexit>
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f025 f9d2 	bl	8028fb4 <__cxa_guard_release>
}
 8003c10:	4801      	ldr	r0, [pc, #4]	@ (8003c18 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	2400e344 	.word	0x2400e344
 8003c18:	2400e348 	.word	0x2400e348
 8003c1c:	0802dd84 	.word	0x0802dd84
 8003c20:	0802c39c 	.word	0x0802c39c
 8003c24:	0802c414 	.word	0x0802c414
 8003c28:	0802ddd0 	.word	0x0802ddd0
 8003c2c:	080036e5 	.word	0x080036e5
 8003c30:	0802de08 	.word	0x0802de08

08003c34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c38:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003c3a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003c3c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003c46:	f00c fd5d 	bl	8010704 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c50:	f00c fccc 	bl	80105ec <osMutexAcquire>
                if (stream.doDecode)
 8003c54:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003c58:	b343      	cbz	r3, 8003cac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003c5a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003c5c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003c60:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003c62:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003c66:	f1b8 0f00 	cmp.w	r8, #0
 8003c6a:	d023      	beq.n	8003cb4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	4641      	mov	r1, r8
 8003c70:	4628      	mov	r0, r5
 8003c72:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c7e:	9700      	str	r7, [sp, #0]
 8003c80:	4628      	mov	r0, r5
 8003c82:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003c86:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003c8a:	68a1      	ldr	r1, [r4, #8]
 8003c8c:	47c0      	blx	r8
                    stream.frameCount++;
 8003c8e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003c90:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003c94:	3301      	adds	r3, #1
 8003c96:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003c98:	b1f0      	cbz	r0, 8003cd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	4798      	blx	r3
 8003ca2:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003ca4:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003ca6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003ca8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003cac:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003cae:	f00c fcc0 	bl	8010632 <osMutexRelease>
        while (1)
 8003cb2:	e7c5      	b.n	8003c40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003cb4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d0de      	beq.n	8003c78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003cba:	4628      	mov	r0, r5
 8003cbc:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003cc0:	4798      	blx	r3
 8003cc2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003cc4:	4401      	add	r1, r0
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003cce:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003cd2:	4413      	add	r3, r2
 8003cd4:	6123      	str	r3, [r4, #16]
 8003cd6:	e7cf      	b.n	8003c78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003cd8:	2001      	movs	r0, #1
 8003cda:	e7e3      	b.n	8003ca4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003cdc <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003cdc:	4801      	ldr	r0, [pc, #4]	@ (8003ce4 <videoTaskFunc+0x8>)
{
 8003cde:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003ce0:	f7ff ffa8 	bl	8003c34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003ce4:	2400e404 	.word	0x2400e404

08003ce8 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003ce8:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003cea:	4814      	ldr	r0, [pc, #80]	@ (8003d3c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003cec:	2500      	movs	r5, #0
 8003cee:	f7fe fbeb 	bl	80024c8 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003cf2:	4c13      	ldr	r4, [pc, #76]	@ (8003d40 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003cf4:	4b13      	ldr	r3, [pc, #76]	@ (8003d44 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d02:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d04:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d06:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d08:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003d0c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d10:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d14:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003d18:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d1c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003d20:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003d24:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d28:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d2c:	f00c fca0 	bl	8010670 <osSemaphoreNew>
 8003d30:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003d32:	4628      	mov	r0, r5
 8003d34:	f00c fc25 	bl	8010582 <osMutexNew>
 8003d38:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	2400e44c 	.word	0x2400e44c
 8003d40:	2400e404 	.word	0x2400e404
 8003d44:	0802c460 	.word	0x0802c460

08003d48 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_21_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 4; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d48:	4770      	bx	lr

08003d4a <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003d4a:	b508      	push	{r3, lr}
    switch (typography)
 8003d4c:	2904      	cmp	r1, #4
 8003d4e:	d818      	bhi.n	8003d82 <_ZN23ApplicationFontProvider7getFontEt+0x38>
 8003d50:	e8df f001 	tbb	[pc, r1]
 8003d54:	0f0b0703 	.word	0x0f0b0703
 8003d58:	13          	.byte	0x13
 8003d59:	00          	.byte	0x00
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003d5a:	f004 fe63 	bl	8008a24 <_ZN17TypedTextDatabase8getFontsEv>
 8003d5e:	6800      	ldr	r0, [r0, #0]
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
    default:
        return 0;
    }
}
 8003d60:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d62:	f004 fe5f 	bl	8008a24 <_ZN17TypedTextDatabase8getFontsEv>
 8003d66:	6840      	ldr	r0, [r0, #4]
 8003d68:	e7fa      	b.n	8003d60 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003d6a:	f004 fe5b 	bl	8008a24 <_ZN17TypedTextDatabase8getFontsEv>
 8003d6e:	6880      	ldr	r0, [r0, #8]
 8003d70:	e7f6      	b.n	8003d60 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003d72:	f004 fe57 	bl	8008a24 <_ZN17TypedTextDatabase8getFontsEv>
 8003d76:	68c0      	ldr	r0, [r0, #12]
 8003d78:	e7f2      	b.n	8003d60 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003d7a:	f004 fe53 	bl	8008a24 <_ZN17TypedTextDatabase8getFontsEv>
 8003d7e:	6900      	ldr	r0, [r0, #16]
 8003d80:	e7ee      	b.n	8003d60 <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 8003d82:	2000      	movs	r0, #0
 8003d84:	e7ec      	b.n	8003d60 <_ZN23ApplicationFontProvider7getFontEt+0x16>

08003d86 <_ZN23ApplicationFontProviderD0Ev>:
 8003d86:	b510      	push	{r4, lr}
 8003d88:	4604      	mov	r4, r0
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	f025 f904 	bl	8028f98 <_ZdlPvj>
 8003d90:	4620      	mov	r0, r4
 8003d92:	bd10      	pop	{r4, pc}

08003d94 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003d94:	4800      	ldr	r0, [pc, #0]	@ (8003d98 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003d96:	4770      	bx	lr
 8003d98:	0802c4b0 	.word	0x0802c4b0

08003d9c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003d9c:	200e      	movs	r0, #14
 8003d9e:	4770      	bx	lr

08003da0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003da0:	b513      	push	{r0, r1, r4, lr}
 8003da2:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003da4:	b151      	cbz	r1, 8003dbc <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003da6:	6803      	ldr	r3, [r0, #0]
 8003da8:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003daa:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003dac:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003db0:	689c      	ldr	r4, [r3, #8]
 8003db2:	f10d 0303 	add.w	r3, sp, #3
 8003db6:	47a0      	blx	r4
        return glyph;
    }
 8003db8:	b002      	add	sp, #8
 8003dba:	bd10      	pop	{r4, pc}
            return 0;
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	e7fb      	b.n	8003db8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003dc0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003dc0:	89c0      	ldrh	r0, [r0, #14]
 8003dc2:	4770      	bx	lr

08003dc4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003dc4:	8a00      	ldrh	r0, [r0, #16]
 8003dc6:	4770      	bx	lr

08003dc8 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003dc8:	88c0      	ldrh	r0, [r0, #6]
 8003dca:	4770      	bx	lr

08003dcc <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003dcc:	8880      	ldrh	r0, [r0, #4]
 8003dce:	4770      	bx	lr

08003dd0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003dd0:	7a80      	ldrb	r0, [r0, #10]
    }
 8003dd2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003dd6:	4770      	bx	lr

08003dd8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003dd8:	7a80      	ldrb	r0, [r0, #10]
    }
 8003dda:	09c0      	lsrs	r0, r0, #7
 8003ddc:	4770      	bx	lr

08003dde <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003dde:	2000      	movs	r0, #0
 8003de0:	4770      	bx	lr
	...

08003de4 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003de4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003dec <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	00000000 	.word	0x00000000

08003df0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003df0:	4770      	bx	lr

08003df2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003df2:	4770      	bx	lr

08003df4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003df4:	4770      	bx	lr

08003df6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003df6:	4770      	bx	lr

08003df8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003df8:	4770      	bx	lr

08003dfa <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003dfa:	4770      	bx	lr

08003dfc <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8003dfc:	b530      	push	{r4, r5, lr}
 8003dfe:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8003e00:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003e02:	4604      	mov	r4, r0
        rect.width = width;
 8003e04:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003e06:	466d      	mov	r5, sp
 8003e08:	4601      	mov	r1, r0
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e0e:	343c      	adds	r4, #60	@ 0x3c
 8003e10:	4628      	mov	r0, r5
 8003e12:	4798      	blx	r3
 8003e14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003e1c:	b005      	add	sp, #20
 8003e1e:	bd30      	pop	{r4, r5, pc}

08003e20 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003e20:	b530      	push	{r4, r5, lr}
 8003e22:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003e24:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003e26:	4604      	mov	r4, r0
        rect.height = height;
 8003e28:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8003e2a:	466d      	mov	r5, sp
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e32:	343c      	adds	r4, #60	@ 0x3c
 8003e34:	4628      	mov	r0, r5
 8003e36:	4798      	blx	r3
 8003e38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003e40:	b005      	add	sp, #20
 8003e42:	bd30      	pop	{r4, r5, pc}

08003e44 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8003e44:	2200      	movs	r2, #0
 8003e46:	8002      	strh	r2, [r0, #0]
 8003e48:	8042      	strh	r2, [r0, #2]
 8003e4a:	8082      	strh	r2, [r0, #4]
 8003e4c:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003e4e:	4770      	bx	lr

08003e50 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003e50:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003e54:	4770      	bx	lr

08003e56 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003e56:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	4604      	mov	r4, r0
        setX(x);
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003e5e:	4615      	mov	r5, r2
        setX(x);
 8003e60:	4798      	blx	r3
        setBaselineY(baselineY);
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	4620      	mov	r0, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8003e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003e6e:	4718      	bx	r3

08003e70 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003e70:	2000      	movs	r0, #0
 8003e72:	4770      	bx	lr

08003e74 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003e7a:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003e7c:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 8003e80:	4770      	bx	lr

08003e82 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003e82:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003e84:	4770      	bx	lr

08003e86 <_ZN18CalculatorViewBase18sendToCalculator_0Ev>:
     * Virtual Action Handlers
     */
    virtual void sendToCalculator_0()
    {
        // Override and implement this function in Calculator
    }
 8003e86:	4770      	bx	lr

08003e88 <_ZN18CalculatorViewBase18sendToCalculator_1Ev>:
    virtual void sendToCalculator_1()
    {
        // Override and implement this function in Calculator
    }
 8003e88:	4770      	bx	lr

08003e8a <_ZN18CalculatorViewBase18sendToCalculator_2Ev>:
    virtual void sendToCalculator_2()
    {
        // Override and implement this function in Calculator
    }
 8003e8a:	4770      	bx	lr

08003e8c <_ZN18CalculatorViewBase18sendToCalculator_3Ev>:
    virtual void sendToCalculator_3()
    {
        // Override and implement this function in Calculator
    }
 8003e8c:	4770      	bx	lr

08003e8e <_ZN18CalculatorViewBase18sendToCalculator_4Ev>:
    virtual void sendToCalculator_4()
    {
        // Override and implement this function in Calculator
    }
 8003e8e:	4770      	bx	lr

08003e90 <_ZN18CalculatorViewBase18sendToCalculator_5Ev>:
    virtual void sendToCalculator_5()
    {
        // Override and implement this function in Calculator
    }
 8003e90:	4770      	bx	lr

08003e92 <_ZN18CalculatorViewBase18sendToCalculator_6Ev>:
    virtual void sendToCalculator_6()
    {
        // Override and implement this function in Calculator
    }
 8003e92:	4770      	bx	lr

08003e94 <_ZN18CalculatorViewBase18sendToCalculator_7Ev>:
    virtual void sendToCalculator_7()
    {
        // Override and implement this function in Calculator
    }
 8003e94:	4770      	bx	lr

08003e96 <_ZN18CalculatorViewBase18sendToCalculator_8Ev>:
    virtual void sendToCalculator_8()
    {
        // Override and implement this function in Calculator
    }
 8003e96:	4770      	bx	lr

08003e98 <_ZN18CalculatorViewBase18sendToCalculator_9Ev>:
    virtual void sendToCalculator_9()
    {
        // Override and implement this function in Calculator
    }
 8003e98:	4770      	bx	lr

08003e9a <_ZN18CalculatorViewBase20sendToCalculator_AddEv>:
    virtual void sendToCalculator_Add()
    {
        // Override and implement this function in Calculator
    }
 8003e9a:	4770      	bx	lr

08003e9c <_ZN18CalculatorViewBase23sendToCalculator_EqualsEv>:
    virtual void sendToCalculator_Equals()
    {
        // Override and implement this function in Calculator
    }
 8003e9c:	4770      	bx	lr

08003e9e <_ZN18CalculatorViewBase23sendToCalculator_DeleteEv>:
    virtual void sendToCalculator_Delete()
    {
        // Override and implement this function in Calculator
    }
 8003e9e:	4770      	bx	lr

08003ea0 <_ZN18CalculatorViewBase32sendToCalculator_OpenParenthesisEv>:
    virtual void sendToCalculator_OpenParenthesis()
    {
        // Override and implement this function in Calculator
    }
 8003ea0:	4770      	bx	lr

08003ea2 <_ZN18CalculatorViewBase33sendToCalculator_CloseParenthesisEv>:
    virtual void sendToCalculator_CloseParenthesis()
    {
        // Override and implement this function in Calculator
    }
 8003ea2:	4770      	bx	lr

08003ea4 <_ZN18CalculatorViewBase25sendToCalculator_SubtractEv>:
    virtual void sendToCalculator_Subtract()
    {
        // Override and implement this function in Calculator
    }
 8003ea4:	4770      	bx	lr

08003ea6 <_ZN18CalculatorViewBase25sendToCalculator_MultiplyEv>:
    virtual void sendToCalculator_Multiply()
    {
        // Override and implement this function in Calculator
    }
 8003ea6:	4770      	bx	lr

08003ea8 <_ZN18CalculatorViewBase23sendToCalculator_DivideEv>:
    virtual void sendToCalculator_Divide()
    {
        // Override and implement this function in Calculator
    }
 8003ea8:	4770      	bx	lr

08003eaa <_ZN18CalculatorViewBase22sendToCalculator_CommaEv>:
    virtual void sendToCalculator_Comma()
    {
        // Override and implement this function in Calculator
    }
 8003eaa:	4770      	bx	lr

08003eac <_ZN18CalculatorViewBase22sendToCalculator_ClearEv>:
    virtual void sendToCalculator_Clear()
    {
        // Override and implement this function in Calculator
    }
 8003eac:	4770      	bx	lr

08003eae <_ZN18CalculatorViewBaseD1Ev>:
}

CalculatorViewBase::~CalculatorViewBase()
{

}
 8003eae:	4770      	bx	lr

08003eb0 <_ZN18CalculatorViewBase11setupScreenEv>:

void CalculatorViewBase::setupScreen()
{

}
 8003eb0:	4770      	bx	lr

08003eb2 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type, typename T1>
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003eb2:	4770      	bx	lr

08003eb4 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED1Ev>:
 * receives a click event.
 *
 * @tparam T specifies the type to extend with the ClickListener behavior.
 */
template <class T>
class ClickListener : public T
 8003eb4:	4770      	bx	lr

08003eb6 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003eb6:	4770      	bx	lr

08003eb8 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
     *
     * @param  t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid
     */
    virtual void execute(T1 t1)
 8003eb8:	b430      	push	{r4, r5}
    {
        (pobject->*pmemfun)(t1);
 8003eba:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003ebc:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003ebe:	68c2      	ldr	r2, [r0, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	1055      	asrs	r5, r2, #1
 8003ec4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003ec8:	07d2      	lsls	r2, r2, #31
 8003eca:	bf48      	it	mi
 8003ecc:	5962      	ldrmi	r2, [r4, r5]
    }
 8003ece:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003ed0:	bf48      	it	mi
 8003ed2:	58d3      	ldrmi	r3, [r2, r3]
 8003ed4:	4718      	bx	r3

08003ed6 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    /**
     * Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 8003ed6:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003ed8:	6840      	ldr	r0, [r0, #4]
 8003eda:	b130      	cbz	r0, 8003eea <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	b91a      	cbnz	r2, 8003ee8 <_ZNK8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003ee0:	68d8      	ldr	r0, [r3, #12]
 8003ee2:	f000 0001 	and.w	r0, r0, #1
 8003ee6:	4770      	bx	lr
 8003ee8:	2001      	movs	r0, #1
    }
 8003eea:	4770      	bx	lr

08003eec <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003eec:	b510      	push	{r4, lr}
 8003eee:	4604      	mov	r4, r0
    }
 8003ef0:	2108      	movs	r1, #8
 8003ef2:	f025 f851 	bl	8028f98 <_ZdlPvj>
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003efa:	b510      	push	{r4, lr}
 8003efc:	4604      	mov	r4, r0
 8003efe:	214c      	movs	r1, #76	@ 0x4c
 8003f00:	f025 f84a 	bl	8028f98 <_ZdlPvj>
 8003f04:	4620      	mov	r0, r4
 8003f06:	bd10      	pop	{r4, pc}

08003f08 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEED0Ev>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	2130      	movs	r1, #48	@ 0x30
 8003f0e:	f025 f843 	bl	8028f98 <_ZdlPvj>
 8003f12:	4620      	mov	r0, r4
 8003f14:	bd10      	pop	{r4, pc}

08003f16 <_ZN8touchgfx8CallbackI18CalculatorViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003f16:	b510      	push	{r4, lr}
 8003f18:	4604      	mov	r4, r0
 8003f1a:	2110      	movs	r1, #16
 8003f1c:	f025 f83c 	bl	8028f98 <_ZdlPvj>
 8003f20:	4620      	mov	r0, r4
 8003f22:	bd10      	pop	{r4, pc}

08003f24 <_ZN18CalculatorViewBaseD0Ev>:
CalculatorViewBase::~CalculatorViewBase()
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4604      	mov	r4, r0
}
 8003f28:	f44f 61de 	mov.w	r1, #1776	@ 0x6f0
 8003f2c:	f025 f834 	bl	8028f98 <_ZdlPvj>
 8003f30:	4620      	mov	r0, r4
 8003f32:	bd10      	pop	{r4, pc}

08003f34 <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void CalculatorViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8003f34:	f500 7349 	add.w	r3, r0, #804	@ 0x324
 8003f38:	4299      	cmp	r1, r3
{
 8003f3a:	b570      	push	{r4, r5, r6, lr}
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	460d      	mov	r5, r1
    if (&src == &HomeButton)
 8003f40:	d103      	bne.n	8003f4a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003f42:	f016 fc65 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
 8003f46:	f003 fe79 	bl	8007c3c <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
    }
    if (&src == &CalculatorButton_0)
 8003f4a:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 8003f4e:	429d      	cmp	r5, r3
 8003f50:	d103      	bne.n	8003f5a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //CalculatorButtonClicked_0
        //When CalculatorButton_0 clicked call virtual function
        //Call sendToCalculator_0
        sendToCalculator_0();
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	4620      	mov	r0, r4
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_1)
 8003f5a:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 8003f5e:	429d      	cmp	r5, r3
 8003f60:	d103      	bne.n	8003f6a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
    {
        //CalculatorButtonClicked_1
        //When CalculatorButton_1 clicked call virtual function
        //Call sendToCalculator_1
        sendToCalculator_1();
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	4620      	mov	r0, r4
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_2)
 8003f6a:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 8003f6e:	429d      	cmp	r5, r3
 8003f70:	d103      	bne.n	8003f7a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
    {
        //CalculatorButtonClicked_2
        //When CalculatorButton_2 clicked call virtual function
        //Call sendToCalculator_2
        sendToCalculator_2();
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	4620      	mov	r0, r4
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f78:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_3)
 8003f7a:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8003f7e:	429d      	cmp	r5, r3
 8003f80:	d103      	bne.n	8003f8a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x56>
    {
        //CalculatorButtonClicked_3
        //When CalculatorButton_3 clicked call virtual function
        //Call sendToCalculator_3
        sendToCalculator_3();
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	4620      	mov	r0, r4
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_4)
 8003f8a:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 8003f8e:	429d      	cmp	r5, r3
 8003f90:	d103      	bne.n	8003f9a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x66>
    {
        //CalculatorButtonClicked_4
        //When CalculatorButton_4 clicked call virtual function
        //Call sendToCalculator_4
        sendToCalculator_4();
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4620      	mov	r0, r4
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_5)
 8003f9a:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8003f9e:	429d      	cmp	r5, r3
 8003fa0:	d103      	bne.n	8003faa <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x76>
    {
        //CalculatorButtonClicked_5
        //When CalculatorButton_5 clicked call virtual function
        //Call sendToCalculator_5
        sendToCalculator_5();
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_6)
 8003faa:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 8003fae:	429d      	cmp	r5, r3
 8003fb0:	d103      	bne.n	8003fba <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
    {
        //CalculatorButtonClicked_6
        //When CalculatorButton_6 clicked call virtual function
        //Call sendToCalculator_6
        sendToCalculator_6();
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_7)
 8003fba:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 8003fbe:	429d      	cmp	r5, r3
 8003fc0:	d103      	bne.n	8003fca <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x96>
    {
        //CalculatorButtonClicked_7
        //When CalculatorButton_7 clicked call virtual function
        //Call sendToCalculator_7
        sendToCalculator_7();
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_8)
 8003fca:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 8003fce:	429d      	cmp	r5, r3
 8003fd0:	d103      	bne.n	8003fda <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa6>
    {
        //CalculatorButtonClicked_8
        //When CalculatorButton_8 clicked call virtual function
        //Call sendToCalculator_8
        sendToCalculator_8();
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_9)
 8003fda:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8003fde:	429d      	cmp	r5, r3
 8003fe0:	d103      	bne.n	8003fea <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb6>
    {
        //CalculatorButtonClicked_9
        //When CalculatorButton_9 clicked call virtual function
        //Call sendToCalculator_9
        sendToCalculator_9();
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Add)
 8003fea:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 8003fee:	429d      	cmp	r5, r3
 8003ff0:	d103      	bne.n	8003ffa <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc6>
    {
        //CalculatorButtonClicked_Add
        //When CalculatorButton_Add clicked call virtual function
        //Call sendToCalculator_Add
        sendToCalculator_Add();
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff8:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Equals)
 8003ffa:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 8003ffe:	429d      	cmp	r5, r3
 8004000:	d103      	bne.n	800400a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd6>
    {
        //CalculatorButtonClicked_Equals
        //When CalculatorButton_Equals clicked call virtual function
        //Call sendToCalculator_Equals
        sendToCalculator_Equals();
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	4620      	mov	r0, r4
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Delete)
 800400a:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 800400e:	429d      	cmp	r5, r3
 8004010:	d103      	bne.n	800401a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe6>
    {
        //CalculatorButtonClicked_Delete
        //When CalculatorButton_Delete clicked call virtual function
        //Call sendToCalculator_Delete
        sendToCalculator_Delete();
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	4620      	mov	r0, r4
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_OpenParenthesis)
 800401a:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
 800401e:	429d      	cmp	r5, r3
 8004020:	d103      	bne.n	800402a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf6>
    {
        //CalculatorButtonClicked_OpenParenthesis
        //When CalculatorButton_OpenParenthesis clicked call virtual function
        //Call sendToCalculator_OpenParenthesis
        sendToCalculator_OpenParenthesis();
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	4620      	mov	r0, r4
 8004026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004028:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_CloseParenthesis)
 800402a:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 800402e:	429d      	cmp	r5, r3
 8004030:	d103      	bne.n	800403a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x106>
    {
        //CalculatorButtonClicked_CloseParenthesis
        //When CalculatorButton_CloseParenthesis clicked call virtual function
        //Call sendToCalculator_CloseParenthesis
        sendToCalculator_CloseParenthesis();
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	4620      	mov	r0, r4
 8004036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004038:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Subtract)
 800403a:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 800403e:	429d      	cmp	r5, r3
 8004040:	d103      	bne.n	800404a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x116>
    {
        //CalculatorButtonClicked_Subtract
        //When CalculatorButton_Subtract clicked call virtual function
        //Call sendToCalculator_Subtract
        sendToCalculator_Subtract();
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	4620      	mov	r0, r4
 8004046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004048:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Multiply)
 800404a:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 800404e:	429d      	cmp	r5, r3
 8004050:	d103      	bne.n	800405a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x126>
    {
        //CalculatorButtonClicked_Multiply
        //When CalculatorButton_Multiply clicked call virtual function
        //Call sendToCalculator_Multiply
        sendToCalculator_Multiply();
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	4620      	mov	r0, r4
 8004056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004058:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Divide)
 800405a:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 800405e:	429d      	cmp	r5, r3
 8004060:	d103      	bne.n	800406a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x136>
    {
        //CalculatorButtonClicked_Divide
        //When CalculatorButton_Divide clicked call virtual function
        //Call sendToCalculator_Divide
        sendToCalculator_Divide();
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	4620      	mov	r0, r4
 8004066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004068:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Comma)
 800406a:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 800406e:	429d      	cmp	r5, r3
 8004070:	d103      	bne.n	800407a <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x146>
    {
        //CalculatorButtonClicked_Comma
        //When CalculatorButton_Comma clicked call virtual function
        //Call sendToCalculator_Comma
        sendToCalculator_Comma();
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	4620      	mov	r0, r4
 8004076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004078:	4798      	blx	r3
    }
    if (&src == &CalculatorButton_Clear)
 800407a:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
 800407e:	429d      	cmp	r5, r3
 8004080:	d105      	bne.n	800408e <_ZN18CalculatorViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x15a>
    {
        //CalculatorButtonClicked_Clear
        //When CalculatorButton_Clear clicked call virtual function
        //Call sendToCalculator_Clear
        sendToCalculator_Clear();
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	4620      	mov	r0, r4
 8004086:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    }
}
 8004088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        sendToCalculator_Clear();
 800408c:	4718      	bx	r3
}
 800408e:	bd70      	pop	{r4, r5, r6, pc}

08004090 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 8004090:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8004092:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8004096:	b10b      	cbz	r3, 800409c <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8004098:	f7ff fb99 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 800409c:	bd08      	pop	{r3, pc}

0800409e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 800409e:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80040a0:	f7ff fb95 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80040a4:	bd08      	pop	{r3, pc}

080040a6 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80040a6:	b570      	push	{r4, r5, r6, lr}
 80040a8:	4604      	mov	r4, r0
    {
        T::handleClickEvent(event);
        if (clickAction && clickAction->isValid())
 80040aa:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
 80040ac:	460d      	mov	r5, r1
        if (clickAction && clickAction->isValid())
 80040ae:	b158      	cbz	r0, 80040c8 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
 80040b0:	6803      	ldr	r3, [r0, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4798      	blx	r3
 80040b6:	b138      	cbz	r0, 80040c8 <_ZN8touchgfx13ClickListenerINS_13ScalableImageEE16handleClickEventERKNS_10ClickEventE+0x22>
        {
            clickAction->execute(*this, event);
 80040b8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80040ba:	462a      	mov	r2, r5
 80040bc:	4621      	mov	r1, r4
 80040be:	6803      	ldr	r3, [r0, #0]
        }
    }
 80040c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            clickAction->execute(*this, event);
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4718      	bx	r3
    }
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080040cc <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80040cc:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80040ce:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80040d0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 80040d2:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80040d6:	b28d      	uxth	r5, r1
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b92b      	cbnz	r3, 80040e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80040dc:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80040de:	216c      	movs	r1, #108	@ 0x6c
 80040e0:	4a10      	ldr	r2, [pc, #64]	@ (8004124 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80040e2:	4811      	ldr	r0, [pc, #68]	@ (8004128 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80040e4:	f025 fad0 	bl	8029688 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80040e8:	4910      	ldr	r1, [pc, #64]	@ (800412c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80040ea:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80040ec:	8809      	ldrh	r1, [r1, #0]
 80040ee:	4291      	cmp	r1, r2
 80040f0:	d803      	bhi.n	80040fa <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80040f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80040f4:	216d      	movs	r1, #109	@ 0x6d
 80040f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80040f8:	e7f3      	b.n	80040e2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80040fa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80040fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004106:	6803      	ldr	r3, [r0, #0]
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	4798      	blx	r3
 800410c:	1a29      	subs	r1, r5, r0
 800410e:	4633      	mov	r3, r6
 8004110:	4620      	mov	r0, r4
 8004112:	b209      	sxth	r1, r1
    }
 8004114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004118:	4718      	bx	r3
 800411a:	bf00      	nop
 800411c:	2402860c 	.word	0x2402860c
 8004120:	0802c5c8 	.word	0x0802c5c8
 8004124:	0802c60a 	.word	0x0802c60a
 8004128:	0802c645 	.word	0x0802c645
 800412c:	24028610 	.word	0x24028610
 8004130:	0802c69a 	.word	0x0802c69a
 8004134:	24028614 	.word	0x24028614

08004138 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8004138:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800413a:	b570      	push	{r4, r5, r6, lr}
 800413c:	4604      	mov	r4, r0
        setX(x);
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8004140:	4615      	mov	r5, r2
        setX(x);
 8004142:	4798      	blx	r3
        setY(y);
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800414c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004150:	4718      	bx	r3

08004152 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004152:	b570      	push	{r4, r5, r6, lr}
 8004154:	4604      	mov	r4, r0
 8004156:	461d      	mov	r5, r3
 8004158:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800415c:	f7ff ffec 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	4629      	mov	r1, r5
 8004164:	4620      	mov	r0, r4
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	4798      	blx	r3
        setHeight(height);
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	4631      	mov	r1, r6
 800416e:	4620      	mov	r0, r4
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8004172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8004176:	4718      	bx	r3

08004178 <_ZN8touchgfx6WidgetC1Ev>:
 8004178:	2200      	movs	r2, #0
 800417a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800417e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8004182:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8004186:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 800418a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800418e:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8004190:	4a01      	ldr	r2, [pc, #4]	@ (8004198 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004192:	6002      	str	r2, [r0, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	0802c730 	.word	0x0802c730

0800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 800419e:	4b19      	ldr	r3, [pc, #100]	@ (8004204 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 80041a0:	4606      	mov	r6, r0
 80041a2:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	428b      	cmp	r3, r1
 80041a8:	d92a      	bls.n	8004200 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80041aa:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b92b      	cbnz	r3, 80041bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80041b0:	4b16      	ldr	r3, [pc, #88]	@ (800420c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 80041b2:	216c      	movs	r1, #108	@ 0x6c
 80041b4:	4a16      	ldr	r2, [pc, #88]	@ (8004210 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 80041b6:	4817      	ldr	r0, [pc, #92]	@ (8004214 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 80041b8:	f025 fa66 	bl	8029688 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80041bc:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80041c0:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80041c8:	4b14      	ldr	r3, [pc, #80]	@ (800421c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	f004 fc1a 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	4607      	mov	r7, r0
 80041d4:	4628      	mov	r0, r5
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	4798      	blx	r3
 80041da:	682b      	ldr	r3, [r5, #0]
 80041dc:	4604      	mov	r4, r0
 80041de:	4639      	mov	r1, r7
 80041e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e2:	4628      	mov	r0, r5
 80041e4:	4798      	blx	r3
 80041e6:	fb14 f400 	smulbb	r4, r4, r0
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	4639      	mov	r1, r7
 80041ee:	b2a4      	uxth	r4, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	4798      	blx	r3
 80041f6:	1823      	adds	r3, r4, r0
 80041f8:	b21b      	sxth	r3, r3
 80041fa:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80041fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004200:	2300      	movs	r3, #0
 8004202:	e7fa      	b.n	80041fa <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8004204:	24028610 	.word	0x24028610
 8004208:	2402860c 	.word	0x2402860c
 800420c:	0802c5c8 	.word	0x0802c5c8
 8004210:	0802c60a 	.word	0x0802c60a
 8004214:	0802c645 	.word	0x0802c645
 8004218:	24028614 	.word	0x24028614
 800421c:	24028618 	.word	0x24028618

08004220 <_ZN18CalculatorViewBaseC1Ev>:
CalculatorViewBase::CalculatorViewBase() :
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	4604      	mov	r4, r0
 8004226:	b09d      	sub	sp, #116	@ 0x74
template <class T>
class View : public Screen
{
public:
    View()
        : presenter(0)
 8004228:	f04f 0900 	mov.w	r9, #0
 800422c:	f018 fa5a 	bl	801c6e4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 8004230:	4626      	mov	r6, r4
 8004232:	4bdf      	ldr	r3, [pc, #892]	@ (80045b0 <_ZN18CalculatorViewBaseC1Ev+0x390>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004234:	2226      	movs	r2, #38	@ 0x26
 8004236:	4649      	mov	r1, r9
 8004238:	f8c4 903c 	str.w	r9, [r4, #60]	@ 0x3c
 800423c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8004240:	f846 3b40 	str.w	r3, [r6], #64
 8004244:	4630      	mov	r0, r6
 8004246:	f025 fdd3 	bl	8029df0 <memset>
 800424a:	4630      	mov	r0, r6
 800424c:	f7ff ff94 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 8004250:	4bd8      	ldr	r3, [pc, #864]	@ (80045b4 <_ZN18CalculatorViewBaseC1Ev+0x394>)
 8004252:	f104 0ab4 	add.w	sl, r4, #180	@ 0xb4
 8004256:	4658      	mov	r0, fp
 8004258:	6423      	str	r3, [r4, #64]	@ 0x40
 800425a:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 800425c:	f8c4 9068 	str.w	r9, [r4, #104]	@ 0x68
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004260:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8004264:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        touchable = touch;
 8004268:	f04f 0701 	mov.w	r7, #1
 800426c:	f013 ff4c 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004270:	4650      	mov	r0, sl
 8004272:	f013 ff49 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004276:	f104 03fc 	add.w	r3, r4, #252	@ 0xfc
    CalculatorButton_0.setAction(buttonCallback);
 800427a:	f504 68dc 	add.w	r8, r4, #1760	@ 0x6e0
    buttonCallback(this, &CalculatorViewBase::buttonCallbackHandler)
 800427e:	4618      	mov	r0, r3
 8004280:	9303      	str	r3, [sp, #12]
 8004282:	f013 ff41 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004286:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 800428a:	4618      	mov	r0, r3
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	f013 ff3b 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004292:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8004296:	4618      	mov	r0, r3
 8004298:	9305      	str	r3, [sp, #20]
 800429a:	f013 ff35 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800429e:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 80042a2:	4618      	mov	r0, r3
 80042a4:	9306      	str	r3, [sp, #24]
 80042a6:	f013 ff2f 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80042aa:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 80042ae:	4618      	mov	r0, r3
 80042b0:	9307      	str	r3, [sp, #28]
 80042b2:	f013 ff29 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80042b6:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 80042ba:	4618      	mov	r0, r3
 80042bc:	9308      	str	r3, [sp, #32]
 80042be:	f013 ff23 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80042c2:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 80042c6:	4618      	mov	r0, r3
 80042c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ca:	f013 ff1d 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80042ce:	f504 733d 	add.w	r3, r4, #756	@ 0x2f4
        : T(), clickAction(0)
 80042d2:	a91a      	add	r1, sp, #104	@ 0x68
 80042d4:	f8ad 5068 	strh.w	r5, [sp, #104]	@ 0x68
 80042d8:	4618      	mov	r0, r3
 80042da:	930a      	str	r3, [sp, #40]	@ 0x28
 80042dc:	f012 ff02 	bl	80170e4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80042e0:	4bb5      	ldr	r3, [pc, #724]	@ (80045b8 <_ZN18CalculatorViewBaseC1Ev+0x398>)
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80042e2:	2226      	movs	r2, #38	@ 0x26
 80042e4:	4649      	mov	r1, r9
 80042e6:	f8c4 32f4 	str.w	r3, [r4, #756]	@ 0x2f4
 80042ea:	f504 7349 	add.w	r3, r4, #804	@ 0x324
 80042ee:	f884 7318 	strb.w	r7, [r4, #792]	@ 0x318
 80042f2:	4618      	mov	r0, r3
 80042f4:	f8c4 9320 	str.w	r9, [r4, #800]	@ 0x320
 80042f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042fa:	f025 fd79 	bl	8029df0 <memset>
 80042fe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004300:	f7ff ff3a 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8004304:	4bad      	ldr	r3, [pc, #692]	@ (80045bc <_ZN18CalculatorViewBaseC1Ev+0x39c>)
 8004306:	f884 7348 	strb.w	r7, [r4, #840]	@ 0x348
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800430a:	1d27      	adds	r7, r4, #4
 800430c:	f8c4 3324 	str.w	r3, [r4, #804]	@ 0x324
 8004310:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8004314:	f8a4 5352 	strh.w	r5, [r4, #850]	@ 0x352
 8004318:	4618      	mov	r0, r3
 800431a:	f8a4 5354 	strh.w	r5, [r4, #852]	@ 0x354
 800431e:	f884 5356 	strb.w	r5, [r4, #854]	@ 0x356
 8004322:	f8c4 934c 	str.w	r9, [r4, #844]	@ 0x34c
 8004326:	f884 9350 	strb.w	r9, [r4, #848]	@ 0x350
 800432a:	930c      	str	r3, [sp, #48]	@ 0x30
 800432c:	f013 feec 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004330:	f504 7368 	add.w	r3, r4, #928	@ 0x3a0
 8004334:	4618      	mov	r0, r3
 8004336:	930d      	str	r3, [sp, #52]	@ 0x34
 8004338:	f013 fee6 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800433c:	f504 737a 	add.w	r3, r4, #1000	@ 0x3e8
 8004340:	4618      	mov	r0, r3
 8004342:	930e      	str	r3, [sp, #56]	@ 0x38
 8004344:	f013 fee0 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004348:	f504 6386 	add.w	r3, r4, #1072	@ 0x430
 800434c:	4618      	mov	r0, r3
 800434e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004350:	f013 feda 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004354:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 8004358:	4618      	mov	r0, r3
 800435a:	9310      	str	r3, [sp, #64]	@ 0x40
 800435c:	f013 fed4 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004360:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 8004364:	4618      	mov	r0, r3
 8004366:	9311      	str	r3, [sp, #68]	@ 0x44
 8004368:	f013 fece 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800436c:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8004370:	4618      	mov	r0, r3
 8004372:	9312      	str	r3, [sp, #72]	@ 0x48
 8004374:	f013 fec8 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004378:	f504 63aa 	add.w	r3, r4, #1360	@ 0x550
 800437c:	4618      	mov	r0, r3
 800437e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004380:	f013 fec2 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004384:	f504 63b3 	add.w	r3, r4, #1432	@ 0x598
 8004388:	4618      	mov	r0, r3
 800438a:	9314      	str	r3, [sp, #80]	@ 0x50
 800438c:	f013 febc 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004390:	f504 63bc 	add.w	r3, r4, #1504	@ 0x5e0
 8004394:	4618      	mov	r0, r3
 8004396:	9315      	str	r3, [sp, #84]	@ 0x54
 8004398:	f013 feb6 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800439c:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 80043a0:	4618      	mov	r0, r3
 80043a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80043a4:	f013 feb0 	bl	8018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80043a8:	f504 63ce 	add.w	r3, r4, #1648	@ 0x670
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80043ac:	2226      	movs	r2, #38	@ 0x26
 80043ae:	4649      	mov	r1, r9
 80043b0:	4618      	mov	r0, r3
 80043b2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80043b4:	f025 fd1c 	bl	8029df0 <memset>
 80043b8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80043ba:	f7ff fedd 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
        : typedTextId(id)
 80043be:	4b80      	ldr	r3, [pc, #512]	@ (80045c0 <_ZN18CalculatorViewBaseC1Ev+0x3a0>)
 80043c0:	f8a4 569c 	strh.w	r5, [r4, #1692]	@ 0x69c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80043c4:	f04f 35ff 	mov.w	r5, #4294967295
 80043c8:	f8c4 3698 	str.w	r3, [r4, #1688]	@ 0x698
 80043cc:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
    __background.setPosition(0, 0, 800, 480);
 80043d0:	464a      	mov	r2, r9
 80043d2:	4630      	mov	r0, r6
 80043d4:	f8c4 36a4 	str.w	r3, [r4, #1700]	@ 0x6a4
 80043d8:	4649      	mov	r1, r9
        : TextAreaWithWildcardBase(), wc1(0)
 80043da:	4b7a      	ldr	r3, [pc, #488]	@ (80045c4 <_ZN18CalculatorViewBaseC1Ev+0x3a4>)
 80043dc:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
 80043e0:	f8c4 3670 	str.w	r3, [r4, #1648]	@ 0x670
        : pobject(pObject), pmemfun(pmemfun_1)
 80043e4:	4b78      	ldr	r3, [pc, #480]	@ (80045c8 <_ZN18CalculatorViewBaseC1Ev+0x3a8>)
        : color(col)
 80043e6:	f8c4 96a0 	str.w	r9, [r4, #1696]	@ 0x6a0
 80043ea:	f8c4 36e0 	str.w	r3, [r4, #1760]	@ 0x6e0
 80043ee:	4b77      	ldr	r3, [pc, #476]	@ (80045cc <_ZN18CalculatorViewBaseC1Ev+0x3ac>)
 80043f0:	f8a4 96a8 	strh.w	r9, [r4, #1704]	@ 0x6a8
 80043f4:	f8c4 36e8 	str.w	r3, [r4, #1768]	@ 0x6e8
 80043f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80043fc:	f8c4 96ac 	str.w	r9, [r4, #1708]	@ 0x6ac
              text(0)
 8004400:	f8c4 96b4 	str.w	r9, [r4, #1716]	@ 0x6b4
 8004404:	f8c4 96b8 	str.w	r9, [r4, #1720]	@ 0x6b8
 8004408:	f8c4 46e4 	str.w	r4, [r4, #1764]	@ 0x6e4
 800440c:	f8c4 96ec 	str.w	r9, [r4, #1772]	@ 0x6ec
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004416:	f7ff fe9c 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800441a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800441e:	4631      	mov	r1, r6
 8004420:	4638      	mov	r0, r7
 8004422:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004424:	2603      	movs	r6, #3
 8004426:	f00e fc03 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_0.setXY(541, 247);
 800442a:	4658      	mov	r0, fp
 800442c:	22f7      	movs	r2, #247	@ 0xf7
 800442e:	f240 211d 	movw	r1, #541	@ 0x21d
 8004432:	f7ff fe81 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_0.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004436:	aa1a      	add	r2, sp, #104	@ 0x68
 8004438:	a919      	add	r1, sp, #100	@ 0x64
 800443a:	4658      	mov	r0, fp
 800443c:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004440:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004444:	f013 fbf0 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004448:	f04f 0308 	mov.w	r3, #8
        updateTextPosition();
 800444c:	4658      	mov	r0, fp
 800444e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8004452:	f7ff fea3 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004456:	4659      	mov	r1, fp
 8004458:	4638      	mov	r0, r7
        rotation = textRotation;
 800445a:	f884 60b0 	strb.w	r6, [r4, #176]	@ 0xb0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800445e:	f8c4 8094 	str.w	r8, [r4, #148]	@ 0x94
 8004462:	f04f 0b04 	mov.w	fp, #4
        colorPressed = col;
 8004466:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 800446a:	f00e fbe1 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_OpenParenthesis.setXY(651, 356);
 800446e:	4650      	mov	r0, sl
 8004470:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004474:	f240 218b 	movw	r1, #651	@ 0x28b
 8004478:	f7ff fe5e 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
 800447c:	f04f 0302 	mov.w	r3, #2
    CalculatorButton_OpenParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004480:	aa1a      	add	r2, sp, #104	@ 0x68
 8004482:	a919      	add	r1, sp, #100	@ 0x64
 8004484:	4650      	mov	r0, sl
 8004486:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 800448a:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 800448e:	f013 fbcb 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004492:	2309      	movs	r3, #9
        updateTextPosition();
 8004494:	4650      	mov	r0, sl
 8004496:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
 800449a:	f7ff fe7f 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800449e:	4651      	mov	r1, sl
 80044a0:	4638      	mov	r0, r7
        rotation = textRotation;
 80044a2:	f884 60f8 	strb.w	r6, [r4, #248]	@ 0xf8
 80044a6:	f8c4 80dc 	str.w	r8, [r4, #220]	@ 0xdc
 80044aa:	f04f 0a01 	mov.w	sl, #1
        colorPressed = col;
 80044ae:	e9c4 553c 	strd	r5, r5, [r4, #240]	@ 0xf0
 80044b2:	f00e fbbd 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Clear.setXY(319, 25);
 80044b6:	2219      	movs	r2, #25
 80044b8:	f240 113f 	movw	r1, #319	@ 0x13f
 80044bc:	9803      	ldr	r0, [sp, #12]
 80044be:	f7ff fe3b 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Clear.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80044c2:	aa1a      	add	r2, sp, #104	@ 0x68
 80044c4:	a919      	add	r1, sp, #100	@ 0x64
 80044c6:	9803      	ldr	r0, [sp, #12]
 80044c8:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80044cc:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 80044d0:	f013 fbaa 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80044d4:	f04f 0107 	mov.w	r1, #7
        updateTextPosition();
 80044d8:	9803      	ldr	r0, [sp, #12]
 80044da:	f8a4 1134 	strh.w	r1, [r4, #308]	@ 0x134
 80044de:	f7ff fe5d 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80044e2:	9903      	ldr	r1, [sp, #12]
 80044e4:	4638      	mov	r0, r7
        rotation = textRotation;
 80044e6:	f884 6140 	strb.w	r6, [r4, #320]	@ 0x140
 80044ea:	f8c4 8124 	str.w	r8, [r4, #292]	@ 0x124
        colorPressed = col;
 80044ee:	e9c4 554e 	strd	r5, r5, [r4, #312]	@ 0x138
 80044f2:	f00e fb9d 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Delete.setXY(208, 25);
 80044f6:	2219      	movs	r2, #25
 80044f8:	21d0      	movs	r1, #208	@ 0xd0
 80044fa:	9804      	ldr	r0, [sp, #16]
 80044fc:	f7ff fe1c 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Delete.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004500:	a819      	add	r0, sp, #100	@ 0x64
 8004502:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 8004506:	f04f 0a05 	mov.w	sl, #5
 800450a:	aa1a      	add	r2, sp, #104	@ 0x68
 800450c:	4601      	mov	r1, r0
 800450e:	9804      	ldr	r0, [sp, #16]
 8004510:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004514:	f013 fb88 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004518:	9804      	ldr	r0, [sp, #16]
 800451a:	f8a4 a17c 	strh.w	sl, [r4, #380]	@ 0x17c
 800451e:	f7ff fe3d 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004522:	9904      	ldr	r1, [sp, #16]
 8004524:	4638      	mov	r0, r7
        rotation = textRotation;
 8004526:	f884 6188 	strb.w	r6, [r4, #392]	@ 0x188
 800452a:	f8c4 816c 	str.w	r8, [r4, #364]	@ 0x16c
        colorPressed = col;
 800452e:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
 8004532:	f00e fb7d 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_CloseParenthesis.setXY(651, 247);
 8004536:	22f7      	movs	r2, #247	@ 0xf7
 8004538:	f240 218b 	movw	r1, #651	@ 0x28b
 800453c:	9805      	ldr	r0, [sp, #20]
 800453e:	f7ff fdfb 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_CloseParenthesis.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004542:	a819      	add	r0, sp, #100	@ 0x64
 8004544:	f04f 0302 	mov.w	r3, #2
 8004548:	aa1a      	add	r2, sp, #104	@ 0x68
 800454a:	4601      	mov	r1, r0
 800454c:	9805      	ldr	r0, [sp, #20]
 800454e:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004552:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004556:	f013 fb67 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800455a:	2306      	movs	r3, #6
        updateTextPosition();
 800455c:	9805      	ldr	r0, [sp, #20]
 800455e:	f8a4 31c4 	strh.w	r3, [r4, #452]	@ 0x1c4
 8004562:	f7ff fe1b 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004566:	9905      	ldr	r1, [sp, #20]
 8004568:	4638      	mov	r0, r7
        rotation = textRotation;
 800456a:	f884 61d0 	strb.w	r6, [r4, #464]	@ 0x1d0
 800456e:	f8c4 81b4 	str.w	r8, [r4, #436]	@ 0x1b4
        colorPressed = col;
 8004572:	e9c4 5572 	strd	r5, r5, [r4, #456]	@ 0x1c8
 8004576:	f00e fb5b 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Subtract.setXY(541, 25);
 800457a:	2219      	movs	r2, #25
 800457c:	f240 211d 	movw	r1, #541	@ 0x21d
 8004580:	9806      	ldr	r0, [sp, #24]
 8004582:	f7ff fdd9 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Subtract.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004586:	a819      	add	r0, sp, #100	@ 0x64
 8004588:	f04f 0302 	mov.w	r3, #2
 800458c:	aa1a      	add	r2, sp, #104	@ 0x68
 800458e:	4601      	mov	r1, r0
 8004590:	9806      	ldr	r0, [sp, #24]
 8004592:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004596:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 800459a:	f013 fb45 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800459e:	230a      	movs	r3, #10
        updateTextPosition();
 80045a0:	9806      	ldr	r0, [sp, #24]
 80045a2:	f8a4 320c 	strh.w	r3, [r4, #524]	@ 0x20c
 80045a6:	f7ff fdf9 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80045aa:	9906      	ldr	r1, [sp, #24]
 80045ac:	e010      	b.n	80045d0 <_ZN18CalculatorViewBaseC1Ev+0x3b0>
 80045ae:	bf00      	nop
 80045b0:	0802c8c4 	.word	0x0802c8c4
 80045b4:	0802e2e8 	.word	0x0802e2e8
 80045b8:	0802c838 	.word	0x0802c838
 80045bc:	0802e350 	.word	0x0802e350
 80045c0:	0802c798 	.word	0x0802c798
 80045c4:	0802c7a8 	.word	0x0802c7a8
 80045c8:	0802c8ac 	.word	0x0802c8ac
 80045cc:	08003f35 	.word	0x08003f35
 80045d0:	4638      	mov	r0, r7
        rotation = textRotation;
 80045d2:	f884 6218 	strb.w	r6, [r4, #536]	@ 0x218
 80045d6:	f8c4 81fc 	str.w	r8, [r4, #508]	@ 0x1fc
        colorPressed = col;
 80045da:	e9c4 5584 	strd	r5, r5, [r4, #528]	@ 0x210
 80045de:	f00e fb27 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Add.setXY(430, 25);
 80045e2:	2219      	movs	r2, #25
 80045e4:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80045e8:	9807      	ldr	r0, [sp, #28]
 80045ea:	f7ff fda5 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Add.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80045ee:	a819      	add	r0, sp, #100	@ 0x64
 80045f0:	f04f 0302 	mov.w	r3, #2
 80045f4:	aa1a      	add	r2, sp, #104	@ 0x68
 80045f6:	4601      	mov	r1, r0
 80045f8:	9807      	ldr	r0, [sp, #28]
 80045fa:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80045fe:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004602:	f013 fb11 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004606:	220b      	movs	r2, #11
        updateTextPosition();
 8004608:	9807      	ldr	r0, [sp, #28]
 800460a:	f8a4 2254 	strh.w	r2, [r4, #596]	@ 0x254
 800460e:	f7ff fdc5 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004612:	9907      	ldr	r1, [sp, #28]
 8004614:	4638      	mov	r0, r7
 8004616:	f8c4 8244 	str.w	r8, [r4, #580]	@ 0x244
        colorPressed = col;
 800461a:	e9c4 5596 	strd	r5, r5, [r4, #600]	@ 0x258
 800461e:	f00e fb07 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Divide.setXY(651, 25);
 8004622:	2219      	movs	r2, #25
 8004624:	f240 218b 	movw	r1, #651	@ 0x28b
 8004628:	9808      	ldr	r0, [sp, #32]
 800462a:	f7ff fd85 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Divide.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 800462e:	a819      	add	r0, sp, #100	@ 0x64
 8004630:	f04f 0302 	mov.w	r3, #2
 8004634:	aa1a      	add	r2, sp, #104	@ 0x68
 8004636:	4601      	mov	r1, r0
 8004638:	9808      	ldr	r0, [sp, #32]
 800463a:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 800463e:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004642:	f013 faf1 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004646:	220c      	movs	r2, #12
        updateTextPosition();
 8004648:	9808      	ldr	r0, [sp, #32]
 800464a:	f8a4 229c 	strh.w	r2, [r4, #668]	@ 0x29c
 800464e:	f7ff fda5 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004652:	9908      	ldr	r1, [sp, #32]
 8004654:	4638      	mov	r0, r7
        rotation = textRotation;
 8004656:	f884 62a8 	strb.w	r6, [r4, #680]	@ 0x2a8
 800465a:	f8c4 828c 	str.w	r8, [r4, #652]	@ 0x28c
        colorPressed = col;
 800465e:	e9c4 55a8 	strd	r5, r5, [r4, #672]	@ 0x2a0
 8004662:	f00e fae5 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Multiply.setXY(651, 140);
 8004666:	228c      	movs	r2, #140	@ 0x8c
 8004668:	f240 218b 	movw	r1, #651	@ 0x28b
 800466c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800466e:	f7ff fd63 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_Multiply.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004672:	a819      	add	r0, sp, #100	@ 0x64
 8004674:	f04f 0302 	mov.w	r3, #2
 8004678:	aa1a      	add	r2, sp, #104	@ 0x68
 800467a:	4601      	mov	r1, r0
 800467c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800467e:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8004682:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 8004686:	f013 facf 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800468a:	220d      	movs	r2, #13
        updateTextPosition();
 800468c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800468e:	f8a4 22e4 	strh.w	r2, [r4, #740]	@ 0x2e4
 8004692:	f7ff fd83 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004698:	4638      	mov	r0, r7
        rotation = textRotation;
 800469a:	f884 62f0 	strb.w	r6, [r4, #752]	@ 0x2f0
 800469e:	f8c4 82d4 	str.w	r8, [r4, #724]	@ 0x2d4
        colorPressed = col;
 80046a2:	e9c4 55ba 	strd	r5, r5, [r4, #744]	@ 0x2e8
 80046a6:	f00e fac3 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ROATATED_ID));
 80046aa:	a81a      	add	r0, sp, #104	@ 0x68
 80046ac:	230a      	movs	r3, #10
 80046ae:	4601      	mov	r1, r0
 80046b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80046b2:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 80046b6:	f013 fbf0 	bl	8017e9a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 80046ba:	2337      	movs	r3, #55	@ 0x37
 80046bc:	2210      	movs	r2, #16
 80046be:	2117      	movs	r1, #23
 80046c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	f7ff fd45 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80046c8:	4649      	mov	r1, r9
 80046ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80046cc:	f012 fcc5 	bl	801705a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80046d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80046d2:	4638      	mov	r0, r7
 80046d4:	f00e faac 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 80046d8:	220e      	movs	r2, #14
 80046da:	2114      	movs	r1, #20
 80046dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80046de:	f7ff fd2b 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 80046e2:	a819      	add	r0, sp, #100	@ 0x64
 80046e4:	aa1a      	add	r2, sp, #104	@ 0x68
 80046e6:	f8ad a064 	strh.w	sl, [sp, #100]	@ 0x64
 80046ea:	4601      	mov	r1, r0
 80046ec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80046ee:	f8ad a068 	strh.w	sl, [sp, #104]	@ 0x68
 80046f2:	f013 fa99 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80046f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80046f8:	4638      	mov	r0, r7
 80046fa:	f8c4 834c 	str.w	r8, [r4, #844]	@ 0x34c
 80046fe:	f04f 0a11 	mov.w	sl, #17
 8004702:	f00e fa95 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_9.setXY(208, 137);
 8004706:	2289      	movs	r2, #137	@ 0x89
 8004708:	21d0      	movs	r1, #208	@ 0xd0
 800470a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800470c:	f7ff fd14 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004710:	a819      	add	r0, sp, #100	@ 0x64
 8004712:	aa1a      	add	r2, sp, #104	@ 0x68
 8004714:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004718:	4601      	mov	r1, r0
 800471a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800471c:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004720:	f013 fa82 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004724:	2318      	movs	r3, #24
        updateTextPosition();
 8004726:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004728:	f8a4 3390 	strh.w	r3, [r4, #912]	@ 0x390
 800472c:	f7ff fd36 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004730:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004732:	4638      	mov	r0, r7
        rotation = textRotation;
 8004734:	f884 639c 	strb.w	r6, [r4, #924]	@ 0x39c
 8004738:	f8c4 8380 	str.w	r8, [r4, #896]	@ 0x380
        colorPressed = col;
 800473c:	e9c4 55e5 	strd	r5, r5, [r4, #916]	@ 0x394
 8004740:	f00e fa76 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_8.setXY(208, 247);
 8004744:	22f7      	movs	r2, #247	@ 0xf7
 8004746:	21d0      	movs	r1, #208	@ 0xd0
 8004748:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800474a:	f7ff fcf5 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800474e:	a819      	add	r0, sp, #100	@ 0x64
 8004750:	aa1a      	add	r2, sp, #104	@ 0x68
 8004752:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004756:	4601      	mov	r1, r0
 8004758:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800475a:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 800475e:	f013 fa63 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004762:	2317      	movs	r3, #23
        updateTextPosition();
 8004764:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004766:	f8a4 33d8 	strh.w	r3, [r4, #984]	@ 0x3d8
 800476a:	f7ff fd17 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800476e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004770:	4638      	mov	r0, r7
        rotation = textRotation;
 8004772:	f884 63e4 	strb.w	r6, [r4, #996]	@ 0x3e4
 8004776:	f8c4 83c8 	str.w	r8, [r4, #968]	@ 0x3c8
        colorPressed = col;
 800477a:	e9c4 55f7 	strd	r5, r5, [r4, #988]	@ 0x3dc
 800477e:	f00e fa57 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_7.setXY(208, 356);
 8004782:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004786:	21d0      	movs	r1, #208	@ 0xd0
 8004788:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800478a:	f7ff fcd5 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800478e:	a819      	add	r0, sp, #100	@ 0x64
 8004790:	aa1a      	add	r2, sp, #104	@ 0x68
 8004792:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004796:	4601      	mov	r1, r0
 8004798:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800479a:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 800479e:	f013 fa43 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80047a2:	2316      	movs	r3, #22
        updateTextPosition();
 80047a4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80047a6:	f8a4 3420 	strh.w	r3, [r4, #1056]	@ 0x420
 80047aa:	f7ff fcf7 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80047ae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80047b0:	4638      	mov	r0, r7
        color = col;
 80047b2:	f8c4 5424 	str.w	r5, [r4, #1060]	@ 0x424
        colorPressed = col;
 80047b6:	f8c4 5428 	str.w	r5, [r4, #1064]	@ 0x428
        rotation = textRotation;
 80047ba:	f884 642c 	strb.w	r6, [r4, #1068]	@ 0x42c
 80047be:	f8c4 8410 	str.w	r8, [r4, #1040]	@ 0x410
 80047c2:	f00e fa35 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_6.setXY(319, 137);
 80047c6:	2289      	movs	r2, #137	@ 0x89
 80047c8:	f240 113f 	movw	r1, #319	@ 0x13f
 80047cc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80047ce:	f7ff fcb3 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80047d2:	a819      	add	r0, sp, #100	@ 0x64
 80047d4:	aa1a      	add	r2, sp, #104	@ 0x68
 80047d6:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 80047da:	4601      	mov	r1, r0
 80047dc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80047de:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80047e2:	f013 fa21 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80047e6:	2315      	movs	r3, #21
        updateTextPosition();
 80047e8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80047ea:	f8a4 3468 	strh.w	r3, [r4, #1128]	@ 0x468
 80047ee:	f7ff fcd5 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80047f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80047f4:	4638      	mov	r0, r7
        color = col;
 80047f6:	f8c4 546c 	str.w	r5, [r4, #1132]	@ 0x46c
        colorPressed = col;
 80047fa:	f8c4 5470 	str.w	r5, [r4, #1136]	@ 0x470
        rotation = textRotation;
 80047fe:	f884 6474 	strb.w	r6, [r4, #1140]	@ 0x474
 8004802:	f8c4 8458 	str.w	r8, [r4, #1112]	@ 0x458
 8004806:	f00e fa13 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_5.setXY(319, 247);
 800480a:	22f7      	movs	r2, #247	@ 0xf7
 800480c:	f240 113f 	movw	r1, #319	@ 0x13f
 8004810:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004812:	f7ff fc91 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004816:	a819      	add	r0, sp, #100	@ 0x64
 8004818:	aa1a      	add	r2, sp, #104	@ 0x68
 800481a:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 800481e:	4601      	mov	r1, r0
 8004820:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004822:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004826:	f013 f9ff 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800482a:	2314      	movs	r3, #20
        updateTextPosition();
 800482c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800482e:	f8a4 34b0 	strh.w	r3, [r4, #1200]	@ 0x4b0
 8004832:	f7ff fcb3 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004836:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004838:	4638      	mov	r0, r7
        color = col;
 800483a:	f8c4 54b4 	str.w	r5, [r4, #1204]	@ 0x4b4
        colorPressed = col;
 800483e:	f8c4 54b8 	str.w	r5, [r4, #1208]	@ 0x4b8
        rotation = textRotation;
 8004842:	f884 64bc 	strb.w	r6, [r4, #1212]	@ 0x4bc
 8004846:	f8c4 84a0 	str.w	r8, [r4, #1184]	@ 0x4a0
 800484a:	f00e f9f1 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_4.setXY(319, 356);
 800484e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004852:	f240 113f 	movw	r1, #319	@ 0x13f
 8004856:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004858:	f7ff fc6e 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 800485c:	a819      	add	r0, sp, #100	@ 0x64
 800485e:	aa1a      	add	r2, sp, #104	@ 0x68
 8004860:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004864:	4601      	mov	r1, r0
 8004866:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004868:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 800486c:	f013 f9dc 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004870:	2313      	movs	r3, #19
        updateTextPosition();
 8004872:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8004874:	f8a4 34f8 	strh.w	r3, [r4, #1272]	@ 0x4f8
 8004878:	f7ff fc90 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800487c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800487e:	4638      	mov	r0, r7
        color = col;
 8004880:	f8c4 54fc 	str.w	r5, [r4, #1276]	@ 0x4fc
        colorPressed = col;
 8004884:	f8c4 5500 	str.w	r5, [r4, #1280]	@ 0x500
        rotation = textRotation;
 8004888:	f884 6504 	strb.w	r6, [r4, #1284]	@ 0x504
 800488c:	f8c4 84e8 	str.w	r8, [r4, #1256]	@ 0x4e8
 8004890:	f00e f9ce 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_3.setXY(430, 356);
 8004894:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004898:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800489c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800489e:	f7ff fc4b 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80048a2:	a819      	add	r0, sp, #100	@ 0x64
 80048a4:	aa1a      	add	r2, sp, #104	@ 0x68
 80048a6:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 80048aa:	4601      	mov	r1, r0
 80048ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80048ae:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80048b2:	f013 f9b9 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80048b6:	2312      	movs	r3, #18
        updateTextPosition();
 80048b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80048ba:	f8a4 3540 	strh.w	r3, [r4, #1344]	@ 0x540
 80048be:	f7ff fc6d 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80048c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80048c4:	4638      	mov	r0, r7
        color = col;
 80048c6:	f8c4 5544 	str.w	r5, [r4, #1348]	@ 0x544
        colorPressed = col;
 80048ca:	f8c4 5548 	str.w	r5, [r4, #1352]	@ 0x548
        rotation = textRotation;
 80048ce:	f884 654c 	strb.w	r6, [r4, #1356]	@ 0x54c
 80048d2:	f8c4 8530 	str.w	r8, [r4, #1328]	@ 0x530
 80048d6:	f00e f9ab 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_2.setXY(430, 247);
 80048da:	22f7      	movs	r2, #247	@ 0xf7
 80048dc:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80048e0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80048e2:	f7ff fc29 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 80048e6:	a819      	add	r0, sp, #100	@ 0x64
 80048e8:	aa1a      	add	r2, sp, #104	@ 0x68
 80048ea:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 80048ee:	4601      	mov	r1, r0
 80048f0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80048f2:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 80048f6:	f013 f997 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 80048fa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80048fc:	f8a4 a588 	strh.w	sl, [r4, #1416]	@ 0x588
 8004900:	f7ff fc4c 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004904:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8004906:	4638      	mov	r0, r7
        color = col;
 8004908:	f8c4 558c 	str.w	r5, [r4, #1420]	@ 0x58c
        colorPressed = col;
 800490c:	f8c4 5590 	str.w	r5, [r4, #1424]	@ 0x590
        rotation = textRotation;
 8004910:	f884 6594 	strb.w	r6, [r4, #1428]	@ 0x594
 8004914:	f8c4 8578 	str.w	r8, [r4, #1400]	@ 0x578
 8004918:	f00e f98a 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_1.setXY(430, 140);
 800491c:	228c      	movs	r2, #140	@ 0x8c
 800491e:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004922:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004924:	f7ff fc08 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    CalculatorButton_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_DISABLED_ID));
 8004928:	a819      	add	r0, sp, #100	@ 0x64
 800492a:	aa1a      	add	r2, sp, #104	@ 0x68
 800492c:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 8004930:	4601      	mov	r1, r0
 8004932:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004934:	f8ad 6068 	strh.w	r6, [sp, #104]	@ 0x68
 8004938:	f013 f976 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800493c:	2310      	movs	r3, #16
        updateTextPosition();
 800493e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004940:	f8a4 35d0 	strh.w	r3, [r4, #1488]	@ 0x5d0
 8004944:	f7ff fc2a 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004948:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800494a:	4638      	mov	r0, r7
        color = col;
 800494c:	f8c4 55d4 	str.w	r5, [r4, #1492]	@ 0x5d4
        colorPressed = col;
 8004950:	f8c4 55d8 	str.w	r5, [r4, #1496]	@ 0x5d8
        rotation = textRotation;
 8004954:	f884 65dc 	strb.w	r6, [r4, #1500]	@ 0x5dc
 8004958:	f8c4 85c0 	str.w	r8, [r4, #1472]	@ 0x5c0
 800495c:	f00e f968 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Equals.setXY(541, 140);
 8004960:	228c      	movs	r2, #140	@ 0x8c
 8004962:	f240 211d 	movw	r1, #541	@ 0x21d
 8004966:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004968:	f7ff fbe6 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
 800496c:	f04f 0107 	mov.w	r1, #7
 8004970:	f04f 0208 	mov.w	r2, #8
    CalculatorButton_Equals.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTION_ID), touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 8004974:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004976:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
 800497a:	a919      	add	r1, sp, #100	@ 0x64
 800497c:	f8ad 2068 	strh.w	r2, [sp, #104]	@ 0x68
 8004980:	aa1a      	add	r2, sp, #104	@ 0x68
 8004982:	f013 f951 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004986:	230f      	movs	r3, #15
        updateTextPosition();
 8004988:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800498a:	f8a4 3618 	strh.w	r3, [r4, #1560]	@ 0x618
 800498e:	f7ff fc05 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004992:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8004994:	4638      	mov	r0, r7
        color = col;
 8004996:	f8c4 561c 	str.w	r5, [r4, #1564]	@ 0x61c
        colorPressed = col;
 800499a:	f8c4 5620 	str.w	r5, [r4, #1568]	@ 0x620
        rotation = textRotation;
 800499e:	f884 6624 	strb.w	r6, [r4, #1572]	@ 0x624
 80049a2:	f8c4 8608 	str.w	r8, [r4, #1544]	@ 0x608
 80049a6:	f00e f943 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CalculatorButton_Comma.setXY(541, 356);
 80049aa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80049ae:	f240 211d 	movw	r1, #541	@ 0x21d
 80049b2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80049b4:	f7ff fbc0 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
 80049b8:	f04f 0302 	mov.w	r3, #2
    CalculatorButton_Comma.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_OUTLINE_PRESSED_ID));
 80049bc:	aa1a      	add	r2, sp, #104	@ 0x68
 80049be:	a919      	add	r1, sp, #100	@ 0x64
 80049c0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80049c2:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 80049c6:	f8ad b068 	strh.w	fp, [sp, #104]	@ 0x68
 80049ca:	f013 f92d 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80049ce:	230e      	movs	r3, #14
        updateTextPosition();
 80049d0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80049d2:	f8a4 3660 	strh.w	r3, [r4, #1632]	@ 0x660
 80049d6:	f7ff fbe1 	bl	800419c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80049da:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80049dc:	4638      	mov	r0, r7
        color = col;
 80049de:	f8c4 5664 	str.w	r5, [r4, #1636]	@ 0x664
        colorPressed = col;
 80049e2:	f8c4 5668 	str.w	r5, [r4, #1640]	@ 0x668
        rotation = textRotation;
 80049e6:	f884 666c 	strb.w	r6, [r4, #1644]	@ 0x66c
 80049ea:	f8c4 8650 	str.w	r8, [r4, #1616]	@ 0x650
 80049ee:	f00e f91f 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    TextResult.setPosition(109, 25, 89, 431);
 80049f2:	f240 13af 	movw	r3, #431	@ 0x1af
 80049f6:	2219      	movs	r2, #25
 80049f8:	216d      	movs	r1, #109	@ 0x6d
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2359      	movs	r3, #89	@ 0x59
 80049fe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004a00:	f7ff fba7 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004a04:	4b1d      	ldr	r3, [pc, #116]	@ (8004a7c <_ZN18CalculatorViewBaseC1Ev+0x85c>)
        color = newColor;
 8004a06:	f8c4 56a0 	str.w	r5, [r4, #1696]	@ 0x6a0
 8004a0a:	681b      	ldr	r3, [r3, #0]
        boundingArea = calculateBoundingArea();
 8004a0c:	f8c4 56b0 	str.w	r5, [r4, #1712]	@ 0x6b0
    Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YKNQ).getText());
 8004a10:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
        linespace = space;
 8004a14:	f8a4 96a4 	strh.w	r9, [r4, #1700]	@ 0x6a4
        rotation = textRotation;
 8004a18:	f884 66a8 	strb.w	r6, [r4, #1704]	@ 0x6a8
        boundingArea = calculateBoundingArea();
 8004a1c:	f8c4 96ac 	str.w	r9, [r4, #1708]	@ 0x6ac
 8004a20:	f8c4 96b4 	str.w	r9, [r4, #1716]	@ 0x6b4
 8004a24:	b92b      	cbnz	r3, 8004a32 <_ZN18CalculatorViewBaseC1Ev+0x812>
 8004a26:	4b16      	ldr	r3, [pc, #88]	@ (8004a80 <_ZN18CalculatorViewBaseC1Ev+0x860>)
 8004a28:	2160      	movs	r1, #96	@ 0x60
 8004a2a:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <_ZN18CalculatorViewBaseC1Ev+0x864>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004a2c:	4816      	ldr	r0, [pc, #88]	@ (8004a88 <_ZN18CalculatorViewBaseC1Ev+0x868>)
 8004a2e:	f024 fe2b 	bl	8029688 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <_ZN18CalculatorViewBaseC1Ev+0x86c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d803      	bhi.n	8004a42 <_ZN18CalculatorViewBaseC1Ev+0x822>
 8004a3a:	4b15      	ldr	r3, [pc, #84]	@ (8004a90 <_ZN18CalculatorViewBaseC1Ev+0x870>)
 8004a3c:	2161      	movs	r1, #97	@ 0x61
 8004a3e:	4a11      	ldr	r2, [pc, #68]	@ (8004a84 <_ZN18CalculatorViewBaseC1Ev+0x864>)
 8004a40:	e7f4      	b.n	8004a2c <_ZN18CalculatorViewBaseC1Ev+0x80c>
        return texts->getText(typedTextId);
 8004a42:	4b14      	ldr	r3, [pc, #80]	@ (8004a94 <_ZN18CalculatorViewBaseC1Ev+0x874>)
 8004a44:	2102      	movs	r1, #2
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	f003 ffdc 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 8004a4c:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <_ZN18CalculatorViewBaseC1Ev+0x878>)
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4651      	mov	r1, sl
 8004a52:	4628      	mov	r0, r5
 8004a54:	f019 fb10 	bl	801e078 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8004a58:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <_ZN18CalculatorViewBaseC1Ev+0x87c>)
    TextResult.setTypedText(touchgfx::TypedText(T_TEXTRESULT));
 8004a5a:	a91a      	add	r1, sp, #104	@ 0x68
 8004a5c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
        wc1 = value;
 8004a5e:	f8c4 56b8 	str.w	r5, [r4, #1720]	@ 0x6b8
 8004a62:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a64:	f8ad 606c 	strh.w	r6, [sp, #108]	@ 0x6c
 8004a68:	f013 f880 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8004a70:	f00e f8de 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004a74:	4620      	mov	r0, r4
 8004a76:	b01d      	add	sp, #116	@ 0x74
 8004a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7c:	2402860c 	.word	0x2402860c
 8004a80:	0802c5c8 	.word	0x0802c5c8
 8004a84:	0802c6d8 	.word	0x0802c6d8
 8004a88:	0802c645 	.word	0x0802c645
 8004a8c:	24028610 	.word	0x24028610
 8004a90:	0802c69a 	.word	0x0802c69a
 8004a94:	24028618 	.word	0x24028618
 8004a98:	0802c723 	.word	0x0802c723
 8004a9c:	0802c798 	.word	0x0802c798

08004aa0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8004aa0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004aa2:	4770      	bx	lr

08004aa4 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004aa4:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 8004aa8:	4770      	bx	lr

08004aaa <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8004aaa:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004aac:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8004aae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ab4:	4362      	muls	r2, r4
 8004ab6:	4361      	muls	r1, r4
    }
 8004ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004abc:	4718      	bx	r3

08004abe <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8004abe:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004ac2:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 8004ac8:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004aca:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004ace:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 8004ad2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	db1a      	blt.n	8004b12 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 8004adc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ae0:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004ae4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004ae8:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8004aec:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8004af0:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	db1e      	blt.n	8004b38 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 8004afa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004afe:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8004b02:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004b06:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004b0a:	4623      	mov	r3, r4
    }
 8004b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004b10:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004b12:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004b16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004b1a:	ee17 3a10 	vmov	r3, s14
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004b24:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8004b28:	ee30 0a26 	vadd.f32	s0, s0, s13
 8004b2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b30:	ee10 1a10 	vmov	r1, s0
 8004b34:	4419      	add	r1, r3
 8004b36:	e7d9      	b.n	8004aec <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8004b38:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b40:	ee17 3a90 	vmov	r3, s15
 8004b44:	3b01      	subs	r3, #1
 8004b46:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8004b4a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004b4e:	ee70 0a87 	vadd.f32	s1, s1, s14
 8004b52:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8004b56:	ee10 2a90 	vmov	r2, s1
 8004b5a:	441a      	add	r2, r3
 8004b5c:	e7d5      	b.n	8004b0a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

08004b5e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8004b5e:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004b60:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8004b62:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004b64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b68:	4362      	muls	r2, r4
    }
 8004b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004b6e:	4718      	bx	r3

08004b70 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8004b70:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004b74:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8004b7a:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004b7c:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004b80:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 8004b84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	db0b      	blt.n	8004ba6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8004b8e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004b92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004b96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004b9a:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004b9e:	4623      	mov	r3, r4
    }
 8004ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004ba4:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004ba6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bae:	ee17 3a90 	vmov	r3, s15
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004bb8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004bbc:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004bc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bc4:	ee10 2a10 	vmov	r2, s0
 8004bc8:	441a      	add	r2, r3
 8004bca:	e7e8      	b.n	8004b9e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

08004bcc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8004bcc:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004bce:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8004bd0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004bd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bd6:	4362      	muls	r2, r4
 8004bd8:	4361      	muls	r1, r4
    }
 8004bda:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004bde:	4718      	bx	r3

08004be0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8004be0:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004be4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 8004bea:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004bec:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004bf0:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 8004bf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	db1a      	blt.n	8004c34 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 8004bfe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c02:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004c06:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004c0a:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8004c0e:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8004c12:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8004c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1a:	db1e      	blt.n	8004c5a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8004c1c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004c20:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8004c24:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004c28:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004c2c:	4623      	mov	r3, r4
    }
 8004c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004c32:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004c34:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004c38:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004c3c:	ee17 3a10 	vmov	r3, s14
 8004c40:	3b01      	subs	r3, #1
 8004c42:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004c46:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8004c4a:	ee30 0a26 	vadd.f32	s0, s0, s13
 8004c4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004c52:	ee10 1a10 	vmov	r1, s0
 8004c56:	4419      	add	r1, r3
 8004c58:	e7d9      	b.n	8004c0e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8004c5a:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c62:	ee17 3a90 	vmov	r3, s15
 8004c66:	3b01      	subs	r3, #1
 8004c68:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8004c6c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004c70:	ee70 0a87 	vadd.f32	s1, s1, s14
 8004c74:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8004c78:	ee10 2a90 	vmov	r2, s1
 8004c7c:	441a      	add	r2, r3
 8004c7e:	e7d5      	b.n	8004c2c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

08004c80 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8004c80:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8004c82:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8004c84:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8004c86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c8a:	4362      	muls	r2, r4
    }
 8004c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8004c90:	4718      	bx	r3

08004c92 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8004c92:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004c96:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 8004c9c:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004c9e:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004ca2:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 8004ca6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	db0b      	blt.n	8004cc8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8004cb0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004cb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004cb8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cbc:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004cc0:	4623      	mov	r3, r4
    }
 8004cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004cc6:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004cc8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cd0:	ee17 3a90 	vmov	r3, s15
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004cda:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004cde:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004ce2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ce6:	ee10 2a10 	vmov	r2, s0
 8004cea:	441a      	add	r2, r3
 8004cec:	e7e8      	b.n	8004cc0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

08004cee <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8004cee:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8004cf2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	db07      	blt.n	8004d08 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004cf8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004cfc:	fb90 f0f2 	sdiv	r0, r0, r2
 8004d00:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004d04:	1040      	asrs	r0, r0, #1
 8004d06:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004d08:	f06f 0101 	mvn.w	r1, #1
 8004d0c:	fb01 2003 	mla	r0, r1, r3, r2
 8004d10:	3801      	subs	r0, #1
 8004d12:	fb90 f0f2 	sdiv	r0, r0, r2
 8004d16:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004d1a:	1040      	asrs	r0, r0, #1
 8004d1c:	4240      	negs	r0, r0
    }
 8004d1e:	4770      	bx	lr

08004d20 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8004d20:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 8004d24:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8004d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d2c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004d30:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004d34:	4770      	bx	lr

08004d36 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8004d36:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8004d3a:	4770      	bx	lr

08004d3c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8004d3c:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 8004d40:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	db07      	blt.n	8004d56 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004d46:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004d4a:	fb90 f0f2 	sdiv	r0, r0, r2
 8004d4e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004d52:	1040      	asrs	r0, r0, #1
 8004d54:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004d56:	f06f 0101 	mvn.w	r1, #1
 8004d5a:	fb01 2003 	mla	r0, r1, r3, r2
 8004d5e:	3801      	subs	r0, #1
 8004d60:	fb90 f0f2 	sdiv	r0, r0, r2
 8004d64:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004d68:	1040      	asrs	r0, r0, #1
 8004d6a:	4240      	negs	r0, r0
    }
 8004d6c:	4770      	bx	lr

08004d6e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8004d6e:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 8004d72:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8004d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004d7e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004d82:	4770      	bx	lr

08004d84 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8004d84:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 8004d88:	4770      	bx	lr

08004d8a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8004d8a:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 8004d8e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	db07      	blt.n	8004da4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004d94:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004d98:	fb90 f0f2 	sdiv	r0, r0, r2
 8004d9c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004da0:	1040      	asrs	r0, r0, #1
 8004da2:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004da4:	f06f 0101 	mvn.w	r1, #1
 8004da8:	fb01 2003 	mla	r0, r1, r3, r2
 8004dac:	3801      	subs	r0, #1
 8004dae:	fb90 f0f2 	sdiv	r0, r0, r2
 8004db2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004db6:	1040      	asrs	r0, r0, #1
 8004db8:	4240      	negs	r0, r0
    }
 8004dba:	4770      	bx	lr

08004dbc <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8004dbc:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 8004dc0:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8004dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004dcc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004dd0:	4770      	bx	lr

08004dd2 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8004dd2:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8004dd6:	4770      	bx	lr

08004dd8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8004dd8:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 8004ddc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db07      	blt.n	8004df2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8004de2:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8004de6:	fb90 f0f2 	sdiv	r0, r0, r2
 8004dea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004dee:	1040      	asrs	r0, r0, #1
 8004df0:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004df2:	f06f 0101 	mvn.w	r1, #1
 8004df6:	fb01 2003 	mla	r0, r1, r3, r2
 8004dfa:	3801      	subs	r0, #1
 8004dfc:	fb90 f0f2 	sdiv	r0, r0, r2
 8004e00:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004e04:	1040      	asrs	r0, r0, #1
 8004e06:	4240      	negs	r0, r0
    }
 8004e08:	4770      	bx	lr

08004e0a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8004e0a:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 8004e0e:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8004e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e16:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004e1a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004e1e:	4770      	bx	lr

08004e20 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8004e20:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 8004e24:	4770      	bx	lr

08004e26 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8004e26:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 8004e30:	460d      	mov	r5, r1
 8004e32:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8004e34:	4798      	blx	r3
        setScaleY(scale, updateData);
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	4632      	mov	r2, r6
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 8004e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8004e46:	4718      	bx	r3

08004e48 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8004e48:	6803      	ldr	r3, [r0, #0]
 8004e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e4e:	4718      	bx	r3

08004e50 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8004e50:	6803      	ldr	r3, [r0, #0]
 8004e52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004e56:	4718      	bx	r3

08004e58 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8004e58:	6803      	ldr	r3, [r0, #0]
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e5e:	4718      	bx	r3

08004e60 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004e60:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8004e62:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8004e64:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 8004e6a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 8004e6c:	db0e      	blt.n	8004e8c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8004e6e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004e72:	fb92 f1f4 	sdiv	r1, r2, r4
 8004e76:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004e7a:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004e7c:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 8004e80:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8004e84:	3a01      	subs	r2, #1
 8004e86:	440a      	add	r2, r1
 8004e88:	4249      	negs	r1, r1
 8004e8a:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004e8c:	f06f 0101 	mvn.w	r1, #1
 8004e90:	fb01 4102 	mla	r1, r1, r2, r4
 8004e94:	3901      	subs	r1, #1
 8004e96:	fb91 f1f4 	sdiv	r1, r1, r4
 8004e9a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8004e9e:	1049      	asrs	r1, r1, #1
 8004ea0:	4249      	negs	r1, r1
 8004ea2:	e7eb      	b.n	8004e7c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08004ea4 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8004ea4:	6803      	ldr	r3, [r0, #0]
 8004ea6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004eaa:	4718      	bx	r3

08004eac <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8004eac:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8004eae:	6803      	ldr	r3, [r0, #0]
 8004eb0:	4351      	muls	r1, r2
 8004eb2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004eb6:	4718      	bx	r3

08004eb8 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 8004eb8:	6803      	ldr	r3, [r0, #0]
 8004eba:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8004ebe:	4718      	bx	r3

08004ec0 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8004ec0:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8004ec4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8004eca:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 8004ece:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8004ed2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	db08      	blt.n	8004eee <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8004edc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004ee0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004ee4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ee8:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8004eec:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004eee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ef6:	ee17 3a90 	vmov	r3, s15
 8004efa:	3b01      	subs	r3, #1
 8004efc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004f00:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004f04:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004f08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004f0c:	ee10 1a10 	vmov	r1, s0
 8004f10:	4419      	add	r1, r3
 8004f12:	e7eb      	b.n	8004eec <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08004f14 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8004f14:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 8004f18:	4770      	bx	lr

08004f1a <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8004f1a:	6803      	ldr	r3, [r0, #0]
 8004f1c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004f20:	4718      	bx	r3

08004f22 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8004f22:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8004f24:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8004f26:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 8004f2a:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8004f2c:	4798      	blx	r3
        if (i >= 0)
 8004f2e:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8004f30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8004f32:	db07      	blt.n	8004f44 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8004f34:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004f38:	fb90 f0f3 	sdiv	r0, r0, r3
 8004f3c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004f40:	1040      	asrs	r0, r0, #1
    }
 8004f42:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004f44:	f06f 0201 	mvn.w	r2, #1
 8004f48:	fb02 3000 	mla	r0, r2, r0, r3
 8004f4c:	3801      	subs	r0, #1
 8004f4e:	fb90 f0f3 	sdiv	r0, r0, r3
 8004f52:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004f56:	1040      	asrs	r0, r0, #1
 8004f58:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8004f5a:	e7f2      	b.n	8004f42 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08004f5c <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8004f5c:	6803      	ldr	r3, [r0, #0]
 8004f5e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8004f62:	4718      	bx	r3

08004f64 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8004f64:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8004f66:	b510      	push	{r4, lr}
 8004f68:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8004f6a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8004f6e:	4798      	blx	r3
 8004f70:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8004f74:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8004f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8004f80:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004f84:	bd10      	pop	{r4, pc}

08004f86 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8004f86:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 8004f8a:	4770      	bx	lr

08004f8c <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8004f8c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8004f8e:	6803      	ldr	r3, [r0, #0]
 8004f90:	4351      	muls	r1, r2
 8004f92:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8004f96:	4718      	bx	r3

08004f98 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 8004f98:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8004f9c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8004fa2:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 8004fa6:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8004faa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	db08      	blt.n	8004fc6 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8004fb4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004fb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004fbc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004fc0:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8004fc4:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004fc6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fce:	ee17 3a90 	vmov	r3, s15
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004fd8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004fdc:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004fe0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004fe4:	ee10 1a10 	vmov	r1, s0
 8004fe8:	4419      	add	r1, r3
 8004fea:	e7eb      	b.n	8004fc4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08004fec <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8004fec:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 8004ff0:	4770      	bx	lr

08004ff2 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8004ff2:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8004ff4:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8004ff6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 8004ffa:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8004ffc:	4798      	blx	r3
        if (i >= 0)
 8004ffe:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8005000:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8005002:	db07      	blt.n	8005014 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8005004:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005008:	fb90 f0f3 	sdiv	r0, r0, r3
 800500c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005010:	1040      	asrs	r0, r0, #1
    }
 8005012:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005014:	f06f 0201 	mvn.w	r2, #1
 8005018:	fb02 3000 	mla	r0, r2, r0, r3
 800501c:	3801      	subs	r0, #1
 800501e:	fb90 f0f3 	sdiv	r0, r0, r3
 8005022:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005026:	1040      	asrs	r0, r0, #1
 8005028:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 800502a:	e7f2      	b.n	8005012 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

0800502c <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800502c:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8005032:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8005036:	4798      	blx	r3
 8005038:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 800503c:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8005040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005044:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005048:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800504c:	bd10      	pop	{r4, pc}

0800504e <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 800504e:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8005052:	4770      	bx	lr

08005054 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return screenIndex;
    }
 8005054:	4608      	mov	r0, r1
 8005056:	4770      	bx	lr

08005058 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8005058:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 800505a:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 800505c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800505e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8005062:	b510      	push	{r4, lr}
 8005064:	4604      	mov	r4, r0
        if (i >= 0)
 8005066:	db0e      	blt.n	8005086 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 8005068:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800506c:	fb91 f1f2 	sdiv	r1, r1, r2
 8005070:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005074:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8005076:	b209      	sxth	r1, r1
 8005078:	4620      	mov	r0, r4
 800507a:	4798      	blx	r3
 800507c:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8005080:	fb02 3000 	mla	r0, r2, r0, r3
 8005084:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005086:	f06f 0001 	mvn.w	r0, #1
 800508a:	fb00 2101 	mla	r1, r0, r1, r2
 800508e:	3901      	subs	r1, #1
 8005090:	fb91 f1f2 	sdiv	r1, r1, r2
 8005094:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005098:	1049      	asrs	r1, r1, #1
 800509a:	4249      	negs	r1, r1
 800509c:	e7eb      	b.n	8005076 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

0800509e <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 800509e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80050a0:	4770      	bx	lr

080050a2 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80050a2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80050a4:	4770      	bx	lr

080050a6 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80050a6:	6803      	ldr	r3, [r0, #0]
 80050a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80050ac:	4718      	bx	r3

080050ae <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80050ae:	6803      	ldr	r3, [r0, #0]
 80050b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80050b4:	4718      	bx	r3

080050b6 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80050b6:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80050b8:	6803      	ldr	r3, [r0, #0]
 80050ba:	4351      	muls	r1, r2
 80050bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80050c0:	4718      	bx	r3

080050c2 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80050c2:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80050c4:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80050c6:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80050ca:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80050cc:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 80050d0:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80050d4:	4798      	blx	r3
 80050d6:	462b      	mov	r3, r5
 80050d8:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80050dc:	4620      	mov	r0, r4
    }
 80050de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80050e2:	4718      	bx	r3

080050e4 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 80050e4:	f8d0 3148 	ldr.w	r3, [r0, #328]	@ 0x148
 80050e8:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 80050ec:	4419      	add	r1, r3
    }
 80050ee:	1a08      	subs	r0, r1, r0
 80050f0:	4770      	bx	lr

080050f2 <_ZN16DiagnoseViewBase11setupScreenEv>:
}

void DiagnoseViewBase::setupScreen()
{

}
 80050f2:	4770      	bx	lr

080050f4 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80050f4:	4770      	bx	lr

080050f6 <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 80050f6:	4770      	bx	lr

080050f8 <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80050f8:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80050fa:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80050fc:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80050fe:	68c2      	ldr	r2, [r0, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	1055      	asrs	r5, r2, #1
 8005104:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005108:	07d2      	lsls	r2, r2, #31
 800510a:	bf48      	it	mi
 800510c:	5962      	ldrmi	r2, [r4, r5]
    }
 800510e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8005110:	bf48      	it	mi
 8005112:	58d3      	ldrmi	r3, [r2, r3]
 8005114:	4718      	bx	r3

08005116 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8005116:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8005118:	6840      	ldr	r0, [r0, #4]
 800511a:	b130      	cbz	r0, 800512a <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	b91a      	cbnz	r2, 8005128 <_ZNK8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8005120:	68d8      	ldr	r0, [r3, #12]
 8005122:	f000 0001 	and.w	r0, r0, #1
 8005126:	4770      	bx	lr
 8005128:	2001      	movs	r0, #1
    }
 800512a:	4770      	bx	lr

0800512c <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 800512c:	b510      	push	{r4, lr}
 800512e:	4604      	mov	r4, r0
 8005130:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8005134:	f023 ff30 	bl	8028f98 <_ZdlPvj>
 8005138:	4620      	mov	r0, r4
 800513a:	bd10      	pop	{r4, pc}

0800513c <_ZN8touchgfx8CallbackI16DiagnoseViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800513c:	b510      	push	{r4, lr}
 800513e:	4604      	mov	r4, r0
 8005140:	2110      	movs	r1, #16
 8005142:	f023 ff29 	bl	8028f98 <_ZdlPvj>
 8005146:	4620      	mov	r0, r4
 8005148:	bd10      	pop	{r4, pc}
	...

0800514c <_ZN16DiagnoseViewBaseD1Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 800514c:	4b03      	ldr	r3, [pc, #12]	@ (800515c <_ZN16DiagnoseViewBaseD1Ev+0x10>)
 800514e:	b510      	push	{r4, lr}
 8005150:	4604      	mov	r4, r0
 8005152:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8005154:	f013 fe8e 	bl	8018e74 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8005158:	4620      	mov	r0, r4
 800515a:	bd10      	pop	{r4, pc}
 800515c:	0802cc24 	.word	0x0802cc24

08005160 <_ZN16DiagnoseViewBaseD0Ev>:
DiagnoseViewBase::~DiagnoseViewBase()
 8005160:	4b06      	ldr	r3, [pc, #24]	@ (800517c <_ZN16DiagnoseViewBaseD0Ev+0x1c>)
 8005162:	b510      	push	{r4, lr}
 8005164:	4604      	mov	r4, r0
 8005166:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8005168:	f013 fe84 	bl	8018e74 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 800516c:	f243 417c 	movw	r1, #13436	@ 0x347c
 8005170:	4620      	mov	r0, r4
 8005172:	f023 ff11 	bl	8028f98 <_ZdlPvj>
 8005176:	4620      	mov	r0, r4
 8005178:	bd10      	pop	{r4, pc}
 800517a:	bf00      	nop
 800517c:	0802cc24 	.word	0x0802cc24

08005180 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8005180:	b508      	push	{r3, lr}
        if (alpha > 0)
 8005182:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005186:	b10b      	cbz	r3, 800518c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 8005188:	f7fe fb21 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800518c:	bd08      	pop	{r3, pc}
	...

08005190 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8005190:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8005192:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8005194:	db03      	blt.n	800519e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 8005196:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 800519a:	4294      	cmp	r4, r2
 800519c:	dc06      	bgt.n	80051ac <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 800519e:	4b08      	ldr	r3, [pc, #32]	@ (80051c0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 80051a0:	f240 6139 	movw	r1, #1593	@ 0x639
 80051a4:	4a07      	ldr	r2, [pc, #28]	@ (80051c4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 80051a6:	4808      	ldr	r0, [pc, #32]	@ (80051c8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 80051a8:	f024 fa6e 	bl	8029688 <__assert_func>
        return yValues[dataIndex(index)];
 80051ac:	6803      	ldr	r3, [r0, #0]
 80051ae:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 80051b2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80051b6:	4798      	blx	r3
    }
 80051b8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	0802c940 	.word	0x0802c940
 80051c4:	0802c963 	.word	0x0802c963
 80051c8:	0802c9b2 	.word	0x0802c9b2

080051cc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80051cc:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 80051ce:	b510      	push	{r4, lr}
 80051d0:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 80051d2:	db03      	blt.n	80051dc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 80051d4:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 80051d8:	429a      	cmp	r2, r3
 80051da:	dc06      	bgt.n	80051ea <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 80051dc:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 80051de:	f240 6133 	movw	r1, #1587	@ 0x633
 80051e2:	4a07      	ldr	r2, [pc, #28]	@ (8005200 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 80051e4:	4807      	ldr	r0, [pc, #28]	@ (8005204 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 80051e6:	f024 fa4f 	bl	8029688 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 80051ea:	6803      	ldr	r3, [r0, #0]
 80051ec:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80051f0:	4798      	blx	r3
 80051f2:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 80051f6:	fb02 3000 	mla	r0, r2, r0, r3
 80051fa:	bd10      	pop	{r4, pc}
 80051fc:	0802c940 	.word	0x0802c940
 8005200:	0802ca1d 	.word	0x0802ca1d
 8005204:	0802c9b2 	.word	0x0802c9b2

08005208 <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void DiagnoseViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &HomeButton)
 8005208:	f200 409c 	addw	r0, r0, #1180	@ 0x49c
 800520c:	4288      	cmp	r0, r1
{
 800520e:	b508      	push	{r3, lr}
    if (&src == &HomeButton)
 8005210:	d105      	bne.n	800521e <_ZN16DiagnoseViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~DiagnoseViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005212:	f015 fafd 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When HomeButton clicked change screen to MainScreen
        //Go to MainScreen with no screen transition
        application().gotoMainScreenScreenNoTransition();
    }
}
 8005216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoMainScreenScreenNoTransition();
 800521a:	f002 bd0f 	b.w	8007c3c <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>
}
 800521e:	bd08      	pop	{r3, pc}

08005220 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8005220:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8005222:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8005224:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8005226:	f017 f8a7 	bl	801c378 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 800522a:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800522c:	462a      	mov	r2, r5
 800522e:	9901      	ldr	r1, [sp, #4]
 8005230:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8005234:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8005238:	db04      	blt.n	8005244 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800523a:	f017 f8bc 	bl	801c3b6 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 800523e:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8005240:	b003      	add	sp, #12
 8005242:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8005244:	f017 f8b7 	bl	801c3b6 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8005248:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 800524a:	e7f9      	b.n	8005240 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

0800524c <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800524c:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800524e:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8005252:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8005254:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 8005258:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 800525c:	4423      	add	r3, r4
 800525e:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8005260:	b22d      	sxth	r5, r5
 8005262:	442c      	add	r4, r5
 8005264:	1e69      	subs	r1, r5, #1
 8005266:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 800526a:	3c01      	subs	r4, #1
 800526c:	1ad2      	subs	r2, r2, r3
 800526e:	1af0      	subs	r0, r6, r3
 8005270:	f7ff ffd6 	bl	8005220 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8005274:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8005278:	bd70      	pop	{r4, r5, r6, pc}

0800527a <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800527a:	b538      	push	{r3, r4, r5, lr}
 800527c:	4604      	mov	r4, r0
 800527e:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8005280:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 8005284:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 8005288:	440b      	add	r3, r1
 800528a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800528e:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8005290:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 8005294:	b209      	sxth	r1, r1
 8005296:	1a12      	subs	r2, r2, r0
 8005298:	1a28      	subs	r0, r5, r0
 800529a:	3901      	subs	r1, #1
 800529c:	f7ff ffc0 	bl	8005220 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 80052a0:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 80052a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080052ac <_ZN16DiagnoseViewBaseC1Ev>:
DiagnoseViewBase::DiagnoseViewBase() :
 80052ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	4604      	mov	r4, r0
 80052b2:	b091      	sub	sp, #68	@ 0x44
 80052b4:	2600      	movs	r6, #0
 80052b6:	f017 fa15 	bl	801c6e4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &DiagnoseViewBase::buttonCallbackHandler)
 80052ba:	46a2      	mov	sl, r4
 80052bc:	4be5      	ldr	r3, [pc, #916]	@ (8005654 <_ZN16DiagnoseViewBaseC1Ev+0x3a8>)
        : Widget(), alpha(255), color(0)
 80052be:	2226      	movs	r2, #38	@ 0x26
 80052c0:	4631      	mov	r1, r6
 80052c2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80052c4:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 80052c8:	f84a 3b40 	str.w	r3, [sl], #64
 80052cc:	4650      	mov	r0, sl
 80052ce:	f024 fd8f 	bl	8029df0 <memset>
 80052d2:	4650      	mov	r0, sl
 80052d4:	f7fe ff50 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 80052d8:	4bdf      	ldr	r3, [pc, #892]	@ (8005658 <_ZN16DiagnoseViewBaseC1Ev+0x3ac>)
 80052da:	f504 7982 	add.w	r9, r4, #260	@ 0x104
 80052de:	4640      	mov	r0, r8
 80052e0:	6423      	str	r3, [r4, #64]	@ 0x40
 80052e2:	23ff      	movs	r3, #255	@ 0xff
        : color(col)
 80052e4:	66a6      	str	r6, [r4, #104]	@ 0x68
 80052e6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80052ea:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80052ee:	f504 75be 	add.w	r5, r4, #380	@ 0x17c
 80052f2:	f00d fbdb 	bl	8012aac <_ZN8touchgfx12DigitalClockC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80052f6:	2226      	movs	r2, #38	@ 0x26
 80052f8:	4631      	mov	r1, r6
 80052fa:	4648      	mov	r0, r9
 80052fc:	f024 fd78 	bl	8029df0 <memset>
 8005300:	4648      	mov	r0, r9
 8005302:	f7fe ff39 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 8005306:	4bd5      	ldr	r3, [pc, #852]	@ (800565c <_ZN16DiagnoseViewBaseC1Ev+0x3b0>)
 8005308:	f504 72a6 	add.w	r2, r4, #332	@ 0x14c
 800530c:	a90e      	add	r1, sp, #56	@ 0x38
 800530e:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
 8005312:	f04f 0b01 	mov.w	fp, #1
 8005316:	4bd2      	ldr	r3, [pc, #840]	@ (8005660 <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
 8005318:	4610      	mov	r0, r2
 800531a:	f8a4 7130 	strh.w	r7, [r4, #304]	@ 0x130
 800531e:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
 8005322:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8005326:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
 800532a:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	f8a4 613c 	strh.w	r6, [r4, #316]	@ 0x13c
 8005336:	f8c4 6140 	str.w	r6, [r4, #320]	@ 0x140
 800533a:	9203      	str	r2, [sp, #12]
 800533c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
              text(0)
 8005340:	e9c4 3651 	strd	r3, r6, [r4, #324]	@ 0x144
 8005344:	f011 fece 	bl	80170e4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8005348:	4bc6      	ldr	r3, [pc, #792]	@ (8005664 <_ZN16DiagnoseViewBaseC1Ev+0x3b8>)
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800534a:	2164      	movs	r1, #100	@ 0x64
 800534c:	4628      	mov	r0, r5
 800534e:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8005352:	f8c4 6178 	str.w	r6, [r4, #376]	@ 0x178
 8005356:	f884 b170 	strb.w	fp, [r4, #368]	@ 0x170
 800535a:	f011 fb7f 	bl	8016a5c <_ZN8touchgfx17AbstractDataGraphC1Es>
 800535e:	4bc2      	ldr	r3, [pc, #776]	@ (8005668 <_ZN16DiagnoseViewBaseC1Ev+0x3bc>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8005360:	4631      	mov	r1, r6
 8005362:	2263      	movs	r2, #99	@ 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8005364:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
{
public:
    GraphWrapAndClear()
        : GraphWrapAndClearData(CAPACITY, y)
 8005368:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800536c:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800536e:	e9c4 36b0 	strd	r3, r6, [r4, #704]	@ 0x2c0
 8005372:	e9c4 b6ae 	strd	fp, r6, [r4, #696]	@ 0x2b8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8005376:	f7ff fb98 	bl	8004aaa <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 800537a:	f504 628b 	add.w	r2, r4, #1112	@ 0x458
 800537e:	4bbb      	ldr	r3, [pc, #748]	@ (800566c <_ZN16DiagnoseViewBaseC1Ev+0x3c0>)
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
 8005380:	4610      	mov	r0, r2
 8005382:	9206      	str	r2, [sp, #24]
 8005384:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
 8005388:	f010 ffc8 	bl	801631c <_ZN8touchgfx12CanvasWidgetC1Ev>
 800538c:	f504 6191 	add.w	r1, r4, #1160	@ 0x488
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8005390:	4bb7      	ldr	r3, [pc, #732]	@ (8005670 <_ZN16DiagnoseViewBaseC1Ev+0x3c4>)
 8005392:	f04f 0202 	mov.w	r2, #2
 8005396:	4608      	mov	r0, r1
 8005398:	9107      	str	r1, [sp, #28]
 800539a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
 800539e:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 80053a2:	f7fe fbbb 	bl	8003b1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80053a6:	4bb3      	ldr	r3, [pc, #716]	@ (8005674 <_ZN16DiagnoseViewBaseC1Ev+0x3c8>)
 80053a8:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
        : Widget(), action(), pressed(false)
 80053ac:	2226      	movs	r2, #38	@ 0x26
 80053ae:	f8c4 3488 	str.w	r3, [r4, #1160]	@ 0x488
 80053b2:	3324      	adds	r3, #36	@ 0x24
 80053b4:	9104      	str	r1, [sp, #16]
 80053b6:	4631      	mov	r1, r6
 80053b8:	f8c4 3490 	str.w	r3, [r4, #1168]	@ 0x490
 80053bc:	9804      	ldr	r0, [sp, #16]
 80053be:	f8c4 6494 	str.w	r6, [r4, #1172]	@ 0x494
 80053c2:	f024 fd15 	bl	8029df0 <memset>
 80053c6:	9804      	ldr	r0, [sp, #16]
 80053c8:	f7fe fed6 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 80053cc:	f504 619a 	add.w	r1, r4, #1232	@ 0x4d0
 80053d0:	4ba9      	ldr	r3, [pc, #676]	@ (8005678 <_ZN16DiagnoseViewBaseC1Ev+0x3cc>)
 80053d2:	4608      	mov	r0, r1
 80053d4:	f8a4 74ca 	strh.w	r7, [r4, #1226]	@ 0x4ca
 80053d8:	f8c4 349c 	str.w	r3, [r4, #1180]	@ 0x49c
 80053dc:	f8a4 74cc 	strh.w	r7, [r4, #1228]	@ 0x4cc
 80053e0:	f884 74ce 	strb.w	r7, [r4, #1230]	@ 0x4ce
 80053e4:	1d27      	adds	r7, r4, #4
 80053e6:	f8c4 64c4 	str.w	r6, [r4, #1220]	@ 0x4c4
 80053ea:	f884 64c8 	strb.w	r6, [r4, #1224]	@ 0x4c8
 80053ee:	f884 b4c0 	strb.w	fp, [r4, #1216]	@ 0x4c0
 80053f2:	9105      	str	r1, [sp, #20]
 80053f4:	f00e f9c6 	bl	8013784 <_ZN8touchgfx19ScrollableContainerC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80053f8:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 80053fc:	4a9f      	ldr	r2, [pc, #636]	@ (800567c <_ZN16DiagnoseViewBaseC1Ev+0x3d0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80053fe:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 8005402:	f204 508c 	addw	r0, r4, #1420	@ 0x58c
 8005406:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
 800540a:	4a9d      	ldr	r2, [pc, #628]	@ (8005680 <_ZN16DiagnoseViewBaseC1Ev+0x3d4>)
 800540c:	f8c3 4470 	str.w	r4, [r3, #1136]	@ 0x470
 8005410:	f8c3 2474 	str.w	r2, [r3, #1140]	@ 0x474
 8005414:	f8c3 6478 	str.w	r6, [r3, #1144]	@ 0x478
 8005418:	f013 fd22 	bl	8018e60 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 800541c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005420:	4632      	mov	r2, r6
 8005422:	4650      	mov	r0, sl
 8005424:	4631      	mov	r1, r6
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800542c:	f7fe fe91 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8005430:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8005434:	4651      	mov	r1, sl
 8005436:	4638      	mov	r0, r7
 8005438:	66a3      	str	r3, [r4, #104]	@ 0x68
 800543a:	f00d fbf9 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseClock.setPosition(529, 12, 256, 72);
 800543e:	2348      	movs	r3, #72	@ 0x48
 8005440:	f8df a258 	ldr.w	sl, [pc, #600]	@ 800569c <_ZN16DiagnoseViewBaseC1Ev+0x3f0>
 8005444:	220c      	movs	r2, #12
 8005446:	4640      	mov	r0, r8
 8005448:	f240 2111 	movw	r1, #529	@ 0x211
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005452:	f7fe fe7e 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8005456:	4640      	mov	r0, r8
 8005458:	4651      	mov	r1, sl
 800545a:	f00d fa65 	bl	8012928 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 800545e:	4b80      	ldr	r3, [pc, #512]	@ (8005660 <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RGBC));
 8005460:	4640      	mov	r0, r8
 8005462:	a90e      	add	r1, sp, #56	@ 0x38
 8005464:	930e      	str	r3, [sp, #56]	@ 0x38
 8005466:	231b      	movs	r3, #27
 8005468:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 800546c:	f00d fa6f 	bl	801294e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    DiagnoseClock.displayLeadingZeroForHourIndicator(true);
 8005470:	4640      	mov	r0, r8
 8005472:	4659      	mov	r1, fp
 8005474:	f00d fb68 	bl	8012b48 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    DiagnoseClock.setTime24Hour(10, 10, 0);
 8005478:	220a      	movs	r2, #10
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 800547a:	2303      	movs	r3, #3
 800547c:	4640      	mov	r0, r8
 800547e:	4611      	mov	r1, r2
 8005480:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 8005484:	4633      	mov	r3, r6
 8005486:	f00d fb62 	bl	8012b4e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 800548a:	4641      	mov	r1, r8
 800548c:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 800548e:	f10d 0820 	add.w	r8, sp, #32
 8005492:	f00d fbcd 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    DiagnoseTitile.setPosition(0, 12, 800, 62);
 8005496:	233e      	movs	r3, #62	@ 0x3e
 8005498:	220c      	movs	r2, #12
 800549a:	4631      	mov	r1, r6
 800549c:	4648      	mov	r0, r9
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80054a4:	f7fe fe55 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 80054a8:	4649      	mov	r1, r9
 80054aa:	4640      	mov	r0, r8
        color = newColor;
 80054ac:	f8c4 a134 	str.w	sl, [r4, #308]	@ 0x134
        linespace = space;
 80054b0:	f8a4 6138 	strh.w	r6, [r4, #312]	@ 0x138
        boundingArea = calculateBoundingArea();
 80054b4:	f012 f8c0 	bl	8017638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80054b8:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 80054bc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80054c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80054c4:	4b66      	ldr	r3, [pc, #408]	@ (8005660 <_ZN16DiagnoseViewBaseC1Ev+0x3b4>)
    DiagnoseTitile.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HCE1));
 80054c6:	a90e      	add	r1, sp, #56	@ 0x38
 80054c8:	4648      	mov	r0, r9
 80054ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80054cc:	231c      	movs	r3, #28
 80054ce:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 80054d2:	f012 fb4b 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80054d6:	4649      	mov	r1, r9
 80054d8:	4638      	mov	r0, r7
 80054da:	f00d fba9 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80054de:	2309      	movs	r3, #9
    HomeIcon.setBitmap(touchgfx::Bitmap(BITMAP_HOME_ICON_ID));
 80054e0:	a90e      	add	r1, sp, #56	@ 0x38
 80054e2:	9803      	ldr	r0, [sp, #12]
 80054e4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80054e8:	f012 fcd7 	bl	8017e9a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    HomeIcon.setPosition(23, 16, 55, 55);
 80054ec:	2337      	movs	r3, #55	@ 0x37
 80054ee:	2210      	movs	r2, #16
 80054f0:	2117      	movs	r1, #23
 80054f2:	9803      	ldr	r0, [sp, #12]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	f7fe fe2c 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    HomeIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80054fa:	4631      	mov	r1, r6
 80054fc:	9803      	ldr	r0, [sp, #12]
 80054fe:	f011 fdac 	bl	801705a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005502:	9903      	ldr	r1, [sp, #12]
 8005504:	4638      	mov	r0, r7
 8005506:	f00d fb93 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(391, 133, 322, 264);
 800550a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800550e:	2285      	movs	r2, #133	@ 0x85
 8005510:	f240 1187 	movw	r1, #391	@ 0x187
 8005514:	4628      	mov	r0, r5
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 800551c:	f7fe fe19 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8005520:	4632      	mov	r2, r6
 8005522:	4659      	mov	r1, fp
 8005524:	4628      	mov	r0, r5
 8005526:	f7ff fc7e 	bl	8004e26 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 800552a:	4633      	mov	r3, r6
 800552c:	4632      	mov	r2, r6
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	9600      	str	r6, [sp, #0]
 8005534:	f011 fa43 	bl	80169be <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8005538:	4633      	mov	r3, r6
 800553a:	4632      	mov	r2, r6
 800553c:	4631      	mov	r1, r6
 800553e:	4628      	mov	r0, r5
 8005540:	9600      	str	r6, [sp, #0]
 8005542:	f011 f963 	bl	801680c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8005546:	2264      	movs	r2, #100	@ 0x64
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	f7ff fb3e 	bl	8004bcc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8005550:	4b4c      	ldr	r3, [pc, #304]	@ (8005684 <_ZN16DiagnoseViewBaseC1Ev+0x3d8>)
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8005552:	f04f 0202 	mov.w	r2, #2
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8005556:	9906      	ldr	r1, [sp, #24]
 8005558:	f8c4 3494 	str.w	r3, [r4, #1172]	@ 0x494
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 800555c:	f249 7314 	movw	r3, #38676	@ 0x9714
 8005560:	4628      	mov	r0, r5
 8005562:	f884 2484 	strb.w	r2, [r4, #1156]	@ 0x484
 8005566:	f8a4 3498 	strh.w	r3, [r4, #1176]	@ 0x498
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 800556a:	23c5      	movs	r3, #197	@ 0xc5
 800556c:	f884 349a 	strb.w	r3, [r4, #1178]	@ 0x49a
        canvasPainter = &painter;
 8005570:	9b07      	ldr	r3, [sp, #28]
 8005572:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
 8005576:	f011 f954 	bl	8016822 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 800557a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800557e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005688 <_ZN16DiagnoseViewBaseC1Ev+0x3dc>
 8005582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005586:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800558a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800558e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005592:	f2c1 82d4 	blt.w	8006b3e <_ZN16DiagnoseViewBaseC1Ev+0x1892>
            return (int)(fs + 0.5f);
 8005596:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800559a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800559e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055a6:	4628      	mov	r0, r5
 80055a8:	f011 fb15 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055ac:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80055b0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800568c <_ZN16DiagnoseViewBaseC1Ev+0x3e0>
 80055b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c4:	f2c1 82cf 	blt.w	8006b66 <_ZN16DiagnoseViewBaseC1Ev+0x18ba>
            return (int)(fs + 0.5f);
 80055c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80055cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055d8:	4628      	mov	r0, r5
 80055da:	f011 fafc 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055de:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80055e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005690 <_ZN16DiagnoseViewBaseC1Ev+0x3e4>
 80055e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	f2c1 82ca 	blt.w	8006b8e <_ZN16DiagnoseViewBaseC1Ev+0x18e2>
            return (int)(fs + 0.5f);
 80055fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80055fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005606:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800560a:	4628      	mov	r0, r5
 800560c:	f011 fae3 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005610:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005614:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005694 <_ZN16DiagnoseViewBaseC1Ev+0x3e8>
 8005618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800561c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	f2c1 82c5 	blt.w	8006bb6 <_ZN16DiagnoseViewBaseC1Ev+0x190a>
            return (int)(fs + 0.5f);
 800562c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005638:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800563c:	4628      	mov	r0, r5
 800563e:	f011 faca 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005642:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005646:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005698 <_ZN16DiagnoseViewBaseC1Ev+0x3ec>
 800564a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005652:	e04b      	b.n	80056ec <_ZN16DiagnoseViewBaseC1Ev+0x440>
 8005654:	0802cc24 	.word	0x0802cc24
 8005658:	0802e2e8 	.word	0x0802e2e8
 800565c:	0802e258 	.word	0x0802e258
 8005660:	0802c798 	.word	0x0802c798
 8005664:	0802c838 	.word	0x0802c838
 8005668:	0802dea0 	.word	0x0802dea0
 800566c:	0802ca74 	.word	0x0802ca74
 8005670:	0802e168 	.word	0x0802e168
 8005674:	0802ddd0 	.word	0x0802ddd0
 8005678:	0802e350 	.word	0x0802e350
 800567c:	0802cc0c 	.word	0x0802cc0c
 8005680:	08005209 	.word	0x08005209
 8005684:	ff1497c5 	.word	0xff1497c5
 8005688:	42977c6e 	.word	0x42977c6e
 800568c:	42896904 	.word	0x42896904
 8005690:	4260f242 	.word	0x4260f242
 8005694:	42219ceb 	.word	0x42219ceb
 8005698:	41c1580b 	.word	0x41c1580b
 800569c:	ffa3baff 	.word	0xffa3baff
 80056a0:	412b3abd 	.word	0x412b3abd
 80056a4:	4028ee39 	.word	0x4028ee39
 80056a8:	3fbb0111 	.word	0x3fbb0111
 80056ac:	40e4c02f 	.word	0x40e4c02f
 80056b0:	4191a071 	.word	0x4191a071
 80056b4:	42001183 	.word	0x42001183
 80056b8:	4236064a 	.word	0x4236064a
 80056bc:	425f6b59 	.word	0x425f6b59
 80056c0:	4274bdec 	.word	0x4274bdec
 80056c4:	4273f7a5 	.word	0x4273f7a5
 80056c8:	4260ece7 	.word	0x4260ece7
 80056cc:	42443795 	.word	0x42443795
 80056d0:	4228f3d0 	.word	0x4228f3d0
 80056d4:	4219ddfc 	.word	0x4219ddfc
 80056d8:	421e8856 	.word	0x421e8856
 80056dc:	423958f2 	.word	0x423958f2
 80056e0:	4266cf1d 	.word	0x4266cf1d
 80056e4:	428f1fe1 	.word	0x428f1fe1
 80056e8:	42a9edc2 	.word	0x42a9edc2
        if (fs >= 0)
 80056ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f4:	f2c1 8273 	blt.w	8006bde <_ZN16DiagnoseViewBaseC1Ev+0x1932>
            return (int)(fs + 0.5f);
 80056f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80056fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005704:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005708:	4628      	mov	r0, r5
 800570a:	f011 fa64 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800570e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005712:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 80056a0 <_ZN16DiagnoseViewBaseC1Ev+0x3f4>
 8005716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800571a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800571e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	f2c1 826e 	blt.w	8006c06 <_ZN16DiagnoseViewBaseC1Ev+0x195a>
            return (int)(fs + 0.5f);
 800572a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800572e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005736:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800573a:	4628      	mov	r0, r5
 800573c:	f011 fa4b 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005740:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005744:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 80056a4 <_ZN16DiagnoseViewBaseC1Ev+0x3f8>
 8005748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800574c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005758:	f2c1 8269 	blt.w	8006c2e <_ZN16DiagnoseViewBaseC1Ev+0x1982>
            return (int)(fs + 0.5f);
 800575c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005768:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800576c:	4628      	mov	r0, r5
 800576e:	f011 fa32 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005772:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005776:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 80056a8 <_ZN16DiagnoseViewBaseC1Ev+0x3fc>
 800577a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800577e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578a:	f2c1 8264 	blt.w	8006c56 <_ZN16DiagnoseViewBaseC1Ev+0x19aa>
            return (int)(fs + 0.5f);
 800578e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800579a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800579e:	4628      	mov	r0, r5
 80057a0:	f011 fa19 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80057a4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80057a8:	ed1f 7a40 	vldr	s14, [pc, #-256]	@ 80056ac <_ZN16DiagnoseViewBaseC1Ev+0x400>
 80057ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80057b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	f2c1 825f 	blt.w	8006c7e <_ZN16DiagnoseViewBaseC1Ev+0x19d2>
            return (int)(fs + 0.5f);
 80057c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80057d0:	4628      	mov	r0, r5
 80057d2:	f011 fa00 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80057d6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80057da:	ed1f 7a4b 	vldr	s14, [pc, #-300]	@ 80056b0 <_ZN16DiagnoseViewBaseC1Ev+0x404>
 80057de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80057e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ee:	f2c1 825a 	blt.w	8006ca6 <_ZN16DiagnoseViewBaseC1Ev+0x19fa>
            return (int)(fs + 0.5f);
 80057f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057fe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005802:	4628      	mov	r0, r5
 8005804:	f011 f9e7 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005808:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800580c:	ed1f 7a57 	vldr	s14, [pc, #-348]	@ 80056b4 <_ZN16DiagnoseViewBaseC1Ev+0x408>
 8005810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005814:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	f2c1 8255 	blt.w	8006cce <_ZN16DiagnoseViewBaseC1Ev+0x1a22>
            return (int)(fs + 0.5f);
 8005824:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005828:	ee77 7a87 	vadd.f32	s15, s15, s14
 800582c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005830:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005834:	4628      	mov	r0, r5
 8005836:	f011 f9ce 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800583a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800583e:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 80056b8 <_ZN16DiagnoseViewBaseC1Ev+0x40c>
 8005842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005846:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800584a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005852:	f2c1 8250 	blt.w	8006cf6 <_ZN16DiagnoseViewBaseC1Ev+0x1a4a>
            return (int)(fs + 0.5f);
 8005856:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800585a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800585e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005862:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005866:	4628      	mov	r0, r5
 8005868:	f011 f9b5 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800586c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005870:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 80056bc <_ZN16DiagnoseViewBaseC1Ev+0x410>
 8005874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005878:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800587c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005884:	f2c1 824b 	blt.w	8006d1e <_ZN16DiagnoseViewBaseC1Ev+0x1a72>
            return (int)(fs + 0.5f);
 8005888:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800588c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005894:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005898:	4628      	mov	r0, r5
 800589a:	f011 f99c 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800589e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80058a2:	ed1f 7a79 	vldr	s14, [pc, #-484]	@ 80056c0 <_ZN16DiagnoseViewBaseC1Ev+0x414>
 80058a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058aa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80058ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b6:	f2c1 8246 	blt.w	8006d46 <_ZN16DiagnoseViewBaseC1Ev+0x1a9a>
            return (int)(fs + 0.5f);
 80058ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058c6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80058ca:	4628      	mov	r0, r5
 80058cc:	f011 f983 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80058d0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80058d4:	ed1f 7a85 	vldr	s14, [pc, #-532]	@ 80056c4 <_ZN16DiagnoseViewBaseC1Ev+0x418>
 80058d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058dc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80058e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	f2c1 8241 	blt.w	8006d6e <_ZN16DiagnoseViewBaseC1Ev+0x1ac2>
            return (int)(fs + 0.5f);
 80058ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058f8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80058fc:	4628      	mov	r0, r5
 80058fe:	f011 f96a 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005902:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005906:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 80056c8 <_ZN16DiagnoseViewBaseC1Ev+0x41c>
 800590a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800590e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591a:	f2c1 823c 	blt.w	8006d96 <_ZN16DiagnoseViewBaseC1Ev+0x1aea>
            return (int)(fs + 0.5f);
 800591e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800592a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800592e:	4628      	mov	r0, r5
 8005930:	f011 f951 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005934:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005938:	ed1f 7a9c 	vldr	s14, [pc, #-624]	@ 80056cc <_ZN16DiagnoseViewBaseC1Ev+0x420>
 800593c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005940:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594c:	f2c1 8237 	blt.w	8006dbe <_ZN16DiagnoseViewBaseC1Ev+0x1b12>
            return (int)(fs + 0.5f);
 8005950:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800595c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005960:	4628      	mov	r0, r5
 8005962:	f011 f938 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005966:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800596a:	ed1f 7aa7 	vldr	s14, [pc, #-668]	@ 80056d0 <_ZN16DiagnoseViewBaseC1Ev+0x424>
 800596e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005972:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	f2c1 8232 	blt.w	8006de6 <_ZN16DiagnoseViewBaseC1Ev+0x1b3a>
            return (int)(fs + 0.5f);
 8005982:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005986:	ee77 7a87 	vadd.f32	s15, s15, s14
 800598a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800598e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005992:	4628      	mov	r0, r5
 8005994:	f011 f91f 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005998:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800599c:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 80056d4 <_ZN16DiagnoseViewBaseC1Ev+0x428>
 80059a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80059a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b0:	f2c1 822d 	blt.w	8006e0e <_ZN16DiagnoseViewBaseC1Ev+0x1b62>
            return (int)(fs + 0.5f);
 80059b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80059b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80059c4:	4628      	mov	r0, r5
 80059c6:	f011 f906 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80059ca:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80059ce:	ed1f 7abe 	vldr	s14, [pc, #-760]	@ 80056d8 <_ZN16DiagnoseViewBaseC1Ev+0x42c>
 80059d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80059da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e2:	f2c1 8228 	blt.w	8006e36 <_ZN16DiagnoseViewBaseC1Ev+0x1b8a>
            return (int)(fs + 0.5f);
 80059e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80059ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059f2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80059f6:	4628      	mov	r0, r5
 80059f8:	f011 f8ed 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80059fc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a00:	ed1f 7aca 	vldr	s14, [pc, #-808]	@ 80056dc <_ZN16DiagnoseViewBaseC1Ev+0x430>
 8005a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a14:	f2c1 8223 	blt.w	8006e5e <_ZN16DiagnoseViewBaseC1Ev+0x1bb2>
            return (int)(fs + 0.5f);
 8005a18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f011 f8d4 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a2e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a32:	ed1f 7ad5 	vldr	s14, [pc, #-852]	@ 80056e0 <_ZN16DiagnoseViewBaseC1Ev+0x434>
 8005a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a46:	f2c1 821e 	blt.w	8006e86 <_ZN16DiagnoseViewBaseC1Ev+0x1bda>
            return (int)(fs + 0.5f);
 8005a4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a56:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f011 f8bb 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a60:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a64:	ed1f 7ae1 	vldr	s14, [pc, #-900]	@ 80056e4 <_ZN16DiagnoseViewBaseC1Ev+0x438>
 8005a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a78:	f2c1 8219 	blt.w	8006eae <_ZN16DiagnoseViewBaseC1Ev+0x1c02>
            return (int)(fs + 0.5f);
 8005a7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a88:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f011 f8a2 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005a92:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005a96:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 80056e8 <_ZN16DiagnoseViewBaseC1Ev+0x43c>
 8005a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aaa:	f2c1 8214 	blt.w	8006ed6 <_ZN16DiagnoseViewBaseC1Ev+0x1c2a>
            return (int)(fs + 0.5f);
 8005aae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f011 f889 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ac4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005ac8:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 8005e98 <_ZN16DiagnoseViewBaseC1Ev+0xbec>
 8005acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005adc:	f2c1 820f 	blt.w	8006efe <_ZN16DiagnoseViewBaseC1Ev+0x1c52>
            return (int)(fs + 0.5f);
 8005ae0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ae4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005af0:	4628      	mov	r0, r5
 8005af2:	f011 f870 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005af6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005afa:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 8005e9c <_ZN16DiagnoseViewBaseC1Ev+0xbf0>
 8005afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b02:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0e:	f2c1 820a 	blt.w	8006f26 <_ZN16DiagnoseViewBaseC1Ev+0x1c7a>
            return (int)(fs + 0.5f);
 8005b12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b1e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b22:	4628      	mov	r0, r5
 8005b24:	f011 f857 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b28:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b2c:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8005ea0 <_ZN16DiagnoseViewBaseC1Ev+0xbf4>
 8005b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b34:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b40:	f2c1 8205 	blt.w	8006f4e <_ZN16DiagnoseViewBaseC1Ev+0x1ca2>
            return (int)(fs + 0.5f);
 8005b44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b50:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b54:	4628      	mov	r0, r5
 8005b56:	f011 f83e 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b5a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b5e:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8005ea4 <_ZN16DiagnoseViewBaseC1Ev+0xbf8>
 8005b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b66:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	f2c1 8200 	blt.w	8006f76 <_ZN16DiagnoseViewBaseC1Ev+0x1cca>
            return (int)(fs + 0.5f);
 8005b76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b82:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b86:	4628      	mov	r0, r5
 8005b88:	f011 f825 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b8c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005b90:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8005ea8 <_ZN16DiagnoseViewBaseC1Ev+0xbfc>
 8005b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b98:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba4:	f2c1 81fb 	blt.w	8006f9e <_ZN16DiagnoseViewBaseC1Ev+0x1cf2>
            return (int)(fs + 0.5f);
 8005ba8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bb4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f011 f80c 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005bbe:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005bc2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005eac <_ZN16DiagnoseViewBaseC1Ev+0xc00>
 8005bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd6:	f2c1 81f6 	blt.w	8006fc6 <_ZN16DiagnoseViewBaseC1Ev+0x1d1a>
            return (int)(fs + 0.5f);
 8005bda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005be6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005bea:	4628      	mov	r0, r5
 8005bec:	f010 fff3 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005bf0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005bf4:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8005eb0 <_ZN16DiagnoseViewBaseC1Ev+0xc04>
 8005bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	f2c1 81f1 	blt.w	8006fee <_ZN16DiagnoseViewBaseC1Ev+0x1d42>
            return (int)(fs + 0.5f);
 8005c0c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c18:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f010 ffda 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c22:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c26:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8005eb4 <_ZN16DiagnoseViewBaseC1Ev+0xc08>
 8005c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c3a:	f2c1 81ec 	blt.w	8007016 <_ZN16DiagnoseViewBaseC1Ev+0x1d6a>
            return (int)(fs + 0.5f);
 8005c3e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c4a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f010 ffc1 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c54:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c58:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005eb8 <_ZN16DiagnoseViewBaseC1Ev+0xc0c>
 8005c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c60:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6c:	f2c1 81e7 	blt.w	800703e <_ZN16DiagnoseViewBaseC1Ev+0x1d92>
            return (int)(fs + 0.5f);
 8005c70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c7c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c80:	4628      	mov	r0, r5
 8005c82:	f010 ffa8 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c86:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005c8a:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8005ebc <_ZN16DiagnoseViewBaseC1Ev+0xc10>
 8005c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c92:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	f2c1 81e2 	blt.w	8007066 <_ZN16DiagnoseViewBaseC1Ev+0x1dba>
            return (int)(fs + 0.5f);
 8005ca2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cae:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f010 ff8f 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005cb8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005cbc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005ec0 <_ZN16DiagnoseViewBaseC1Ev+0xc14>
 8005cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd0:	f2c1 81dd 	blt.w	800708e <_ZN16DiagnoseViewBaseC1Ev+0x1de2>
            return (int)(fs + 0.5f);
 8005cd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ce0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f010 ff76 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005cea:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005cee:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8005ec4 <_ZN16DiagnoseViewBaseC1Ev+0xc18>
 8005cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d02:	f2c1 81d8 	blt.w	80070b6 <_ZN16DiagnoseViewBaseC1Ev+0x1e0a>
            return (int)(fs + 0.5f);
 8005d06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d12:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d16:	4628      	mov	r0, r5
 8005d18:	f010 ff5d 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d1c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d20:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8005ec8 <_ZN16DiagnoseViewBaseC1Ev+0xc1c>
 8005d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d28:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d34:	f2c1 81d3 	blt.w	80070de <_ZN16DiagnoseViewBaseC1Ev+0x1e32>
            return (int)(fs + 0.5f);
 8005d38:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d44:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f010 ff44 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d4e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d52:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8005ecc <_ZN16DiagnoseViewBaseC1Ev+0xc20>
 8005d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d66:	f2c1 81ce 	blt.w	8007106 <_ZN16DiagnoseViewBaseC1Ev+0x1e5a>
            return (int)(fs + 0.5f);
 8005d6a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d76:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f010 ff2b 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d80:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005d84:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005ed0 <_ZN16DiagnoseViewBaseC1Ev+0xc24>
 8005d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d98:	f2c1 81c9 	blt.w	800712e <_ZN16DiagnoseViewBaseC1Ev+0x1e82>
            return (int)(fs + 0.5f);
 8005d9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005da8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005dac:	4628      	mov	r0, r5
 8005dae:	f010 ff12 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005db2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005db6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8005ed4 <_ZN16DiagnoseViewBaseC1Ev+0xc28>
 8005dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dca:	f2c1 81c4 	blt.w	8007156 <_ZN16DiagnoseViewBaseC1Ev+0x1eaa>
            return (int)(fs + 0.5f);
 8005dce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005dd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dda:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005dde:	4628      	mov	r0, r5
 8005de0:	f010 fef9 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005de4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005de8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005ed8 <_ZN16DiagnoseViewBaseC1Ev+0xc2c>
 8005dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfc:	f2c1 81bf 	blt.w	800717e <_ZN16DiagnoseViewBaseC1Ev+0x1ed2>
            return (int)(fs + 0.5f);
 8005e00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e0c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e10:	4628      	mov	r0, r5
 8005e12:	f010 fee0 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e16:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e1a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005edc <_ZN16DiagnoseViewBaseC1Ev+0xc30>
 8005e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e22:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2e:	f2c1 81ba 	blt.w	80071a6 <_ZN16DiagnoseViewBaseC1Ev+0x1efa>
            return (int)(fs + 0.5f);
 8005e32:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e3e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e42:	4628      	mov	r0, r5
 8005e44:	f010 fec7 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e48:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e4c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005ee0 <_ZN16DiagnoseViewBaseC1Ev+0xc34>
 8005e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	f2c1 81b5 	blt.w	80071ce <_ZN16DiagnoseViewBaseC1Ev+0x1f22>
            return (int)(fs + 0.5f);
 8005e64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e70:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e74:	4628      	mov	r0, r5
 8005e76:	f010 feae 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e7a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005e7e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005ee4 <_ZN16DiagnoseViewBaseC1Ev+0xc38>
 8005e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e86:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e92:	f2c1 81b0 	blt.w	80071f6 <_ZN16DiagnoseViewBaseC1Ev+0x1f4a>
 8005e96:	e04d      	b.n	8005f34 <_ZN16DiagnoseViewBaseC1Ev+0xc88>
 8005e98:	42bdc083 	.word	0x42bdc083
 8005e9c:	42c5d585 	.word	0x42c5d585
 8005ea0:	42bfe1a1 	.word	0x42bfe1a1
 8005ea4:	42aca41f 	.word	0x42aca41f
 8005ea8:	428fbf28 	.word	0x428fbf28
 8005eac:	425dbdf6 	.word	0x425dbdf6
 8005eb0:	4220c971 	.word	0x4220c971
 8005eb4:	41e79e30 	.word	0x41e79e30
 8005eb8:	41bba58a 	.word	0x41bba58a
 8005ebc:	41c03ddf 	.word	0x41c03ddf
 8005ec0:	41ec3b01 	.word	0x41ec3b01
 8005ec4:	4216a066 	.word	0x4216a066
 8005ec8:	423647a4 	.word	0x423647a4
 8005ecc:	424a6d26 	.word	0x424a6d26
 8005ed0:	424bddc7 	.word	0x424bddc7
 8005ed4:	4238b3be 	.word	0x4238b3be
 8005ed8:	4214dd41 	.word	0x4214dd41
 8005edc:	41d25c19 	.word	0x41d25c19
 8005ee0:	41826af2 	.word	0x41826af2
 8005ee4:	412184c0 	.word	0x412184c0
 8005ee8:	411c803f 	.word	0x411c803f
 8005eec:	4181733e 	.word	0x4181733e
 8005ef0:	41e4c438 	.word	0x41e4c438
 8005ef4:	4233c65c 	.word	0x4233c65c
 8005ef8:	4278ee70 	.word	0x4278ee70
 8005efc:	429a8141 	.word	0x429a8141
 8005f00:	42aea312 	.word	0x42aea312
 8005f04:	42b5c855 	.word	0x42b5c855
 8005f08:	42afd4b1 	.word	0x42afd4b1
 8005f0c:	429f9a06 	.word	0x429f9a06
 8005f10:	428a19ce 	.word	0x428a19ce
 8005f14:	426a8187 	.word	0x426a8187
 8005f18:	424cd9b6 	.word	0x424cd9b6
 8005f1c:	4242344c 	.word	0x4242344c
 8005f20:	424c13d3 	.word	0x424c13d3
 8005f24:	426631d4 	.word	0x426631d4
 8005f28:	4283ced6 	.word	0x4283ced6
 8005f2c:	4292837e 	.word	0x4292837e
 8005f30:	4299d153 	.word	0x4299d153
            return (int)(fs + 0.5f);
 8005f34:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f40:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f44:	4628      	mov	r0, r5
 8005f46:	f010 fe46 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f4a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f4e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8005ee8 <_ZN16DiagnoseViewBaseC1Ev+0xc3c>
 8005f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f56:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f62:	f2c1 815c 	blt.w	800721e <_ZN16DiagnoseViewBaseC1Ev+0x1f72>
            return (int)(fs + 0.5f);
 8005f66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f72:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f76:	4628      	mov	r0, r5
 8005f78:	f010 fe2d 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f7c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005f80:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8005eec <_ZN16DiagnoseViewBaseC1Ev+0xc40>
 8005f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f88:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f94:	f2c1 8157 	blt.w	8007246 <_ZN16DiagnoseViewBaseC1Ev+0x1f9a>
            return (int)(fs + 0.5f);
 8005f98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fa4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f010 fe14 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005fae:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005fb2:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 8005ef0 <_ZN16DiagnoseViewBaseC1Ev+0xc44>
 8005fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc6:	f2c1 8152 	blt.w	800726e <_ZN16DiagnoseViewBaseC1Ev+0x1fc2>
            return (int)(fs + 0.5f);
 8005fca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fd6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f010 fdfb 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005fe0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8005fe4:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8005ef4 <_ZN16DiagnoseViewBaseC1Ev+0xc48>
 8005fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ff0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff8:	f2c1 814d 	blt.w	8007296 <_ZN16DiagnoseViewBaseC1Ev+0x1fea>
            return (int)(fs + 0.5f);
 8005ffc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006008:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800600c:	4628      	mov	r0, r5
 800600e:	f010 fde2 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006012:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006016:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 8005ef8 <_ZN16DiagnoseViewBaseC1Ev+0xc4c>
 800601a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800601e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602a:	f2c1 8148 	blt.w	80072be <_ZN16DiagnoseViewBaseC1Ev+0x2012>
            return (int)(fs + 0.5f);
 800602e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800603a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800603e:	4628      	mov	r0, r5
 8006040:	f010 fdc9 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006044:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006048:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 8005efc <_ZN16DiagnoseViewBaseC1Ev+0xc50>
 800604c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006050:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800605c:	f2c1 8143 	blt.w	80072e6 <_ZN16DiagnoseViewBaseC1Ev+0x203a>
            return (int)(fs + 0.5f);
 8006060:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006064:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800606c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006070:	4628      	mov	r0, r5
 8006072:	f010 fdb0 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006076:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800607a:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8005f00 <_ZN16DiagnoseViewBaseC1Ev+0xc54>
 800607e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006082:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608e:	f2c1 813e 	blt.w	800730e <_ZN16DiagnoseViewBaseC1Ev+0x2062>
            return (int)(fs + 0.5f);
 8006092:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800609a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800609e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060a2:	4628      	mov	r0, r5
 80060a4:	f010 fd97 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060a8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060ac:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 8005f04 <_ZN16DiagnoseViewBaseC1Ev+0xc58>
 80060b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c0:	f2c1 8139 	blt.w	8007336 <_ZN16DiagnoseViewBaseC1Ev+0x208a>
            return (int)(fs + 0.5f);
 80060c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060d4:	4628      	mov	r0, r5
 80060d6:	f010 fd7e 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060da:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80060de:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8005f08 <_ZN16DiagnoseViewBaseC1Ev+0xc5c>
 80060e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f2:	f2c1 8134 	blt.w	800735e <_ZN16DiagnoseViewBaseC1Ev+0x20b2>
            return (int)(fs + 0.5f);
 80060f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006102:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006106:	4628      	mov	r0, r5
 8006108:	f010 fd65 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800610c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006110:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8005f0c <_ZN16DiagnoseViewBaseC1Ev+0xc60>
 8006114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006118:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800611c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006124:	f2c1 812f 	blt.w	8007386 <_ZN16DiagnoseViewBaseC1Ev+0x20da>
            return (int)(fs + 0.5f);
 8006128:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800612c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006134:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006138:	4628      	mov	r0, r5
 800613a:	f010 fd4c 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800613e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006142:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8005f10 <_ZN16DiagnoseViewBaseC1Ev+0xc64>
 8006146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800614a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800614e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006156:	f2c1 812a 	blt.w	80073ae <_ZN16DiagnoseViewBaseC1Ev+0x2102>
            return (int)(fs + 0.5f);
 800615a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800615e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006166:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800616a:	4628      	mov	r0, r5
 800616c:	f010 fd33 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006170:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006174:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 8005f14 <_ZN16DiagnoseViewBaseC1Ev+0xc68>
 8006178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800617c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	f2c1 8125 	blt.w	80073d6 <_ZN16DiagnoseViewBaseC1Ev+0x212a>
            return (int)(fs + 0.5f);
 800618c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006198:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800619c:	4628      	mov	r0, r5
 800619e:	f010 fd1a 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061a2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061a6:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 8005f18 <_ZN16DiagnoseViewBaseC1Ev+0xc6c>
 80061aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ba:	f2c1 8120 	blt.w	80073fe <_ZN16DiagnoseViewBaseC1Ev+0x2152>
            return (int)(fs + 0.5f);
 80061be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061ce:	4628      	mov	r0, r5
 80061d0:	f010 fd01 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061d4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80061d8:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 8005f1c <_ZN16DiagnoseViewBaseC1Ev+0xc70>
 80061dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	f2c1 811b 	blt.w	8007426 <_ZN16DiagnoseViewBaseC1Ev+0x217a>
            return (int)(fs + 0.5f);
 80061f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006200:	4628      	mov	r0, r5
 8006202:	f010 fce8 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006206:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800620a:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 8005f20 <_ZN16DiagnoseViewBaseC1Ev+0xc74>
 800620e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006212:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621e:	f2c1 8116 	blt.w	800744e <_ZN16DiagnoseViewBaseC1Ev+0x21a2>
            return (int)(fs + 0.5f);
 8006222:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800622a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800622e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006232:	4628      	mov	r0, r5
 8006234:	f010 fccf 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006238:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800623c:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 8005f24 <_ZN16DiagnoseViewBaseC1Ev+0xc78>
 8006240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006244:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800624c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006250:	f2c1 8111 	blt.w	8007476 <_ZN16DiagnoseViewBaseC1Ev+0x21ca>
            return (int)(fs + 0.5f);
 8006254:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800625c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006260:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006264:	4628      	mov	r0, r5
 8006266:	f010 fcb6 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800626a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800626e:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8005f28 <_ZN16DiagnoseViewBaseC1Ev+0xc7c>
 8006272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006276:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800627a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800627e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006282:	f2c1 810c 	blt.w	800749e <_ZN16DiagnoseViewBaseC1Ev+0x21f2>
            return (int)(fs + 0.5f);
 8006286:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800628a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800628e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006292:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006296:	4628      	mov	r0, r5
 8006298:	f010 fc9d 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800629c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80062a0:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 8005f2c <_ZN16DiagnoseViewBaseC1Ev+0xc80>
 80062a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062a8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80062ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b4:	f2c1 8107 	blt.w	80074c6 <_ZN16DiagnoseViewBaseC1Ev+0x221a>
            return (int)(fs + 0.5f);
 80062b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80062c8:	4628      	mov	r0, r5
 80062ca:	f010 fc84 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80062ce:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80062d2:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 8005f30 <_ZN16DiagnoseViewBaseC1Ev+0xc84>
 80062d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80062de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	f2c1 8102 	blt.w	80074ee <_ZN16DiagnoseViewBaseC1Ev+0x2242>
            return (int)(fs + 0.5f);
 80062ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80062fa:	4628      	mov	r0, r5
 80062fc:	f010 fc6b 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006300:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006304:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 80066d4 <_ZN16DiagnoseViewBaseC1Ev+0x1428>
 8006308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800630c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006318:	f2c1 80fd 	blt.w	8007516 <_ZN16DiagnoseViewBaseC1Ev+0x226a>
            return (int)(fs + 0.5f);
 800631c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006320:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006328:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800632c:	4628      	mov	r0, r5
 800632e:	f010 fc52 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006332:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006336:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 80066d8 <_ZN16DiagnoseViewBaseC1Ev+0x142c>
 800633a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800633e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634a:	f2c1 80f8 	blt.w	800753e <_ZN16DiagnoseViewBaseC1Ev+0x2292>
            return (int)(fs + 0.5f);
 800634e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006352:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800635a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800635e:	4628      	mov	r0, r5
 8006360:	f010 fc39 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006364:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006368:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80066dc <_ZN16DiagnoseViewBaseC1Ev+0x1430>
 800636c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006370:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637c:	f2c1 80f3 	blt.w	8007566 <_ZN16DiagnoseViewBaseC1Ev+0x22ba>
            return (int)(fs + 0.5f);
 8006380:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006384:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800638c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006390:	4628      	mov	r0, r5
 8006392:	f010 fc20 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006396:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800639a:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80066e0 <_ZN16DiagnoseViewBaseC1Ev+0x1434>
 800639e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ae:	f2c1 80ee 	blt.w	800758e <_ZN16DiagnoseViewBaseC1Ev+0x22e2>
            return (int)(fs + 0.5f);
 80063b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063be:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063c2:	4628      	mov	r0, r5
 80063c4:	f010 fc07 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063c8:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063cc:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 80066e4 <_ZN16DiagnoseViewBaseC1Ev+0x1438>
 80063d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e0:	f2c1 80e9 	blt.w	80075b6 <_ZN16DiagnoseViewBaseC1Ev+0x230a>
            return (int)(fs + 0.5f);
 80063e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063f4:	4628      	mov	r0, r5
 80063f6:	f010 fbee 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063fa:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80063fe:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80066e8 <_ZN16DiagnoseViewBaseC1Ev+0x143c>
 8006402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006406:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800640a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800640e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006412:	f2c1 80e4 	blt.w	80075de <_ZN16DiagnoseViewBaseC1Ev+0x2332>
            return (int)(fs + 0.5f);
 8006416:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800641a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800641e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006422:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006426:	4628      	mov	r0, r5
 8006428:	f010 fbd5 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800642c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006430:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80066ec <_ZN16DiagnoseViewBaseC1Ev+0x1440>
 8006434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006438:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800643c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006444:	f2c1 80df 	blt.w	8007606 <_ZN16DiagnoseViewBaseC1Ev+0x235a>
            return (int)(fs + 0.5f);
 8006448:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800644c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006454:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006458:	4628      	mov	r0, r5
 800645a:	f010 fbbc 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800645e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006462:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 80066f0 <_ZN16DiagnoseViewBaseC1Ev+0x1444>
 8006466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800646a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800646e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006476:	f2c1 80da 	blt.w	800762e <_ZN16DiagnoseViewBaseC1Ev+0x2382>
            return (int)(fs + 0.5f);
 800647a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800647e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006486:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800648a:	4628      	mov	r0, r5
 800648c:	f010 fba3 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006490:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006494:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80066f4 <_ZN16DiagnoseViewBaseC1Ev+0x1448>
 8006498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800649c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a8:	f2c1 80d5 	blt.w	8007656 <_ZN16DiagnoseViewBaseC1Ev+0x23aa>
            return (int)(fs + 0.5f);
 80064ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064bc:	4628      	mov	r0, r5
 80064be:	f010 fb8a 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80064c2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064c6:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80066f8 <_ZN16DiagnoseViewBaseC1Ev+0x144c>
 80064ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80064d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064da:	f2c1 80d0 	blt.w	800767e <_ZN16DiagnoseViewBaseC1Ev+0x23d2>
            return (int)(fs + 0.5f);
 80064de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80064ee:	4628      	mov	r0, r5
 80064f0:	f010 fb71 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80064f4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80064f8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80066fc <_ZN16DiagnoseViewBaseC1Ev+0x1450>
 80064fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006500:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800650c:	f2c1 80cb 	blt.w	80076a6 <_ZN16DiagnoseViewBaseC1Ev+0x23fa>
            return (int)(fs + 0.5f);
 8006510:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006514:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800651c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006520:	4628      	mov	r0, r5
 8006522:	f010 fb58 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006526:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800652a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8006700 <_ZN16DiagnoseViewBaseC1Ev+0x1454>
 800652e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006532:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800653a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653e:	f2c1 80c6 	blt.w	80076ce <_ZN16DiagnoseViewBaseC1Ev+0x2422>
            return (int)(fs + 0.5f);
 8006542:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800654a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800654e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006552:	4628      	mov	r0, r5
 8006554:	f010 fb3f 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006558:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800655c:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8006704 <_ZN16DiagnoseViewBaseC1Ev+0x1458>
 8006560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006564:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006568:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006570:	f2c1 80c1 	blt.w	80076f6 <_ZN16DiagnoseViewBaseC1Ev+0x244a>
            return (int)(fs + 0.5f);
 8006574:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800657c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006580:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006584:	4628      	mov	r0, r5
 8006586:	f010 fb26 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800658a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800658e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006708 <_ZN16DiagnoseViewBaseC1Ev+0x145c>
 8006592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006596:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800659a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800659e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a2:	f2c1 80bc 	blt.w	800771e <_ZN16DiagnoseViewBaseC1Ev+0x2472>
            return (int)(fs + 0.5f);
 80065a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80065b6:	4628      	mov	r0, r5
 80065b8:	f010 fb0d 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065bc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80065c0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800670c <_ZN16DiagnoseViewBaseC1Ev+0x1460>
 80065c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065c8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	f2c1 80b7 	blt.w	8007746 <_ZN16DiagnoseViewBaseC1Ev+0x249a>
            return (int)(fs + 0.5f);
 80065d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065e4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80065e8:	4628      	mov	r0, r5
 80065ea:	f010 faf4 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065ee:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80065f2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8006710 <_ZN16DiagnoseViewBaseC1Ev+0x1464>
 80065f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065fa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006606:	f2c1 80b2 	blt.w	800776e <_ZN16DiagnoseViewBaseC1Ev+0x24c2>
            return (int)(fs + 0.5f);
 800660a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800660e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006616:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800661a:	4628      	mov	r0, r5
 800661c:	f010 fadb 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006620:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006624:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006714 <_ZN16DiagnoseViewBaseC1Ev+0x1468>
 8006628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800662c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006638:	f2c1 80ad 	blt.w	8007796 <_ZN16DiagnoseViewBaseC1Ev+0x24ea>
            return (int)(fs + 0.5f);
 800663c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006640:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006648:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800664c:	4628      	mov	r0, r5
 800664e:	f010 fac2 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006652:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006656:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006718 <_ZN16DiagnoseViewBaseC1Ev+0x146c>
 800665a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800665e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666a:	f2c1 80a8 	blt.w	80077be <_ZN16DiagnoseViewBaseC1Ev+0x2512>
            return (int)(fs + 0.5f);
 800666e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800667a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800667e:	4628      	mov	r0, r5
 8006680:	f010 faa9 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006684:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006688:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800671c <_ZN16DiagnoseViewBaseC1Ev+0x1470>
 800668c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006690:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669c:	f2c1 80a3 	blt.w	80077e6 <_ZN16DiagnoseViewBaseC1Ev+0x253a>
            return (int)(fs + 0.5f);
 80066a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80066b0:	4628      	mov	r0, r5
 80066b2:	f010 fa90 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80066b6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80066ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006720 <_ZN16DiagnoseViewBaseC1Ev+0x1474>
 80066be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80066c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ce:	f2c1 809e 	blt.w	800780e <_ZN16DiagnoseViewBaseC1Ev+0x2562>
 80066d2:	e049      	b.n	8006768 <_ZN16DiagnoseViewBaseC1Ev+0x14bc>
 80066d4:	4295fa02 	.word	0x4295fa02
 80066d8:	4285e50c 	.word	0x4285e50c
 80066dc:	4256f26f 	.word	0x4256f26f
 80066e0:	42167451 	.word	0x42167451
 80066e4:	41ad0597 	.word	0x41ad0597
 80066e8:	410e92d7 	.word	0x410e92d7
 80066ec:	3ff86e6e 	.word	0x3ff86e6e
 80066f0:	3ffaf599 	.word	0x3ffaf599
 80066f4:	410b128e 	.word	0x410b128e
 80066f8:	41a35230 	.word	0x41a35230
 80066fc:	42099166 	.word	0x42099166
 8006700:	423e2093 	.word	0x423e2093
 8006704:	426489ab 	.word	0x426489ab
 8006708:	42761f9c 	.word	0x42761f9c
 800670c:	4271dbd0 	.word	0x4271dbd0
 8006710:	425c7cf8 	.word	0x425c7cf8
 8006714:	423f37ee 	.word	0x423f37ee
 8006718:	42254e0a 	.word	0x42254e0a
 800671c:	42192202 	.word	0x42192202
 8006720:	422183b0 	.word	0x422183b0
 8006724:	423fde06 	.word	0x423fde06
 8006728:	426fbac7 	.word	0x426fbac7
 800672c:	4293ddf2 	.word	0x4293ddf2
 8006730:	42ade74e 	.word	0x42ade74e
 8006734:	42c007bb 	.word	0x42c007bb
 8006738:	42c5d556 	.word	0x42c5d556
 800673c:	42bd8271 	.word	0x42bd8271
 8006740:	42a8528b 	.word	0x42a8528b
 8006744:	428a52fd 	.word	0x428a52fd
 8006748:	4252d134 	.word	0x4252d134
 800674c:	4217da1a 	.word	0x4217da1a
 8006750:	41dcc932 	.word	0x41dcc932
 8006754:	41b921ff 	.word	0x41b921ff
 8006758:	41c54a38 	.word	0x41c54a38
 800675c:	41f649c0 	.word	0x41f649c0
 8006760:	421c52f7 	.word	0x421c52f7
 8006764:	423ab963 	.word	0x423ab963
            return (int)(fs + 0.5f);
 8006768:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800676c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006774:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006778:	4628      	mov	r0, r5
 800677a:	f010 fa2c 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800677e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006782:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 8006724 <_ZN16DiagnoseViewBaseC1Ev+0x1478>
 8006786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800678a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800678e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006796:	f2c1 804e 	blt.w	8007836 <_ZN16DiagnoseViewBaseC1Ev+0x258a>
            return (int)(fs + 0.5f);
 800679a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800679e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80067aa:	4628      	mov	r0, r5
 80067ac:	f010 fa13 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80067b0:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80067b4:	ed1f 7a24 	vldr	s14, [pc, #-144]	@ 8006728 <_ZN16DiagnoseViewBaseC1Ev+0x147c>
 80067b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80067c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c8:	f2c1 8049 	blt.w	800785e <_ZN16DiagnoseViewBaseC1Ev+0x25b2>
            return (int)(fs + 0.5f);
 80067cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80067d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067d8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80067dc:	4628      	mov	r0, r5
 80067de:	f010 f9fa 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80067e2:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80067e6:	ed1f 7a2f 	vldr	s14, [pc, #-188]	@ 800672c <_ZN16DiagnoseViewBaseC1Ev+0x1480>
 80067ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067ee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80067f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fa:	f2c1 8044 	blt.w	8007886 <_ZN16DiagnoseViewBaseC1Ev+0x25da>
            return (int)(fs + 0.5f);
 80067fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800680a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800680e:	4628      	mov	r0, r5
 8006810:	f010 f9e1 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006814:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006818:	ed1f 7a3b 	vldr	s14, [pc, #-236]	@ 8006730 <_ZN16DiagnoseViewBaseC1Ev+0x1484>
 800681c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006820:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682c:	f2c1 803f 	blt.w	80078ae <_ZN16DiagnoseViewBaseC1Ev+0x2602>
            return (int)(fs + 0.5f);
 8006830:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800683c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006840:	4628      	mov	r0, r5
 8006842:	f010 f9c8 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006846:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800684a:	ed1f 7a46 	vldr	s14, [pc, #-280]	@ 8006734 <_ZN16DiagnoseViewBaseC1Ev+0x1488>
 800684e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006852:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800685a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685e:	f2c1 803a 	blt.w	80078d6 <_ZN16DiagnoseViewBaseC1Ev+0x262a>
            return (int)(fs + 0.5f);
 8006862:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800686a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800686e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006872:	4628      	mov	r0, r5
 8006874:	f010 f9af 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006878:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 800687c:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 8006738 <_ZN16DiagnoseViewBaseC1Ev+0x148c>
 8006880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006884:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006890:	f2c1 8035 	blt.w	80078fe <_ZN16DiagnoseViewBaseC1Ev+0x2652>
            return (int)(fs + 0.5f);
 8006894:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800689c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80068a4:	4628      	mov	r0, r5
 80068a6:	f010 f996 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80068aa:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80068ae:	ed1f 7a5d 	vldr	s14, [pc, #-372]	@ 800673c <_ZN16DiagnoseViewBaseC1Ev+0x1490>
 80068b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068b6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80068ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c2:	f2c1 8030 	blt.w	8007926 <_ZN16DiagnoseViewBaseC1Ev+0x267a>
            return (int)(fs + 0.5f);
 80068c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068d2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80068d6:	4628      	mov	r0, r5
 80068d8:	f010 f97d 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80068dc:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80068e0:	ed1f 7a69 	vldr	s14, [pc, #-420]	@ 8006740 <_ZN16DiagnoseViewBaseC1Ev+0x1494>
 80068e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80068ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f4:	f2c1 802b 	blt.w	800794e <_ZN16DiagnoseViewBaseC1Ev+0x26a2>
            return (int)(fs + 0.5f);
 80068f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006904:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006908:	4628      	mov	r0, r5
 800690a:	f010 f964 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800690e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006912:	ed1f 7a74 	vldr	s14, [pc, #-464]	@ 8006744 <_ZN16DiagnoseViewBaseC1Ev+0x1498>
 8006916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800691a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800691e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006926:	f2c1 8026 	blt.w	8007976 <_ZN16DiagnoseViewBaseC1Ev+0x26ca>
            return (int)(fs + 0.5f);
 800692a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800692e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006936:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800693a:	4628      	mov	r0, r5
 800693c:	f010 f94b 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006940:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006944:	ed1f 7a80 	vldr	s14, [pc, #-512]	@ 8006748 <_ZN16DiagnoseViewBaseC1Ev+0x149c>
 8006948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800694c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006958:	f2c1 8021 	blt.w	800799e <_ZN16DiagnoseViewBaseC1Ev+0x26f2>
            return (int)(fs + 0.5f);
 800695c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006968:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800696c:	4628      	mov	r0, r5
 800696e:	f010 f932 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006972:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006976:	ed1f 7a8b 	vldr	s14, [pc, #-556]	@ 800674c <_ZN16DiagnoseViewBaseC1Ev+0x14a0>
 800697a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800697e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698a:	f2c1 801c 	blt.w	80079c6 <_ZN16DiagnoseViewBaseC1Ev+0x271a>
            return (int)(fs + 0.5f);
 800698e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800699a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800699e:	4628      	mov	r0, r5
 80069a0:	f010 f919 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80069a4:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80069a8:	ed1f 7a97 	vldr	s14, [pc, #-604]	@ 8006750 <_ZN16DiagnoseViewBaseC1Ev+0x14a4>
 80069ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80069b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069bc:	f2c1 8017 	blt.w	80079ee <_ZN16DiagnoseViewBaseC1Ev+0x2742>
            return (int)(fs + 0.5f);
 80069c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80069d0:	4628      	mov	r0, r5
 80069d2:	f010 f900 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80069d6:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 80069da:	ed1f 7aa2 	vldr	s14, [pc, #-648]	@ 8006754 <_ZN16DiagnoseViewBaseC1Ev+0x14a8>
 80069de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069e2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80069e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ee:	f2c1 8012 	blt.w	8007a16 <_ZN16DiagnoseViewBaseC1Ev+0x276a>
            return (int)(fs + 0.5f);
 80069f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069fe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a02:	4628      	mov	r0, r5
 8006a04:	f010 f8e7 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a08:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006a0c:	ed1f 7aae 	vldr	s14, [pc, #-696]	@ 8006758 <_ZN16DiagnoseViewBaseC1Ev+0x14ac>
 8006a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a14:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a20:	f2c1 800d 	blt.w	8007a3e <_ZN16DiagnoseViewBaseC1Ev+0x2792>
            return (int)(fs + 0.5f);
 8006a24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a30:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a34:	4628      	mov	r0, r5
 8006a36:	f010 f8ce 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a3a:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006a3e:	ed1f 7ab9 	vldr	s14, [pc, #-740]	@ 800675c <_ZN16DiagnoseViewBaseC1Ev+0x14b0>
 8006a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a46:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a52:	f2c1 8008 	blt.w	8007a66 <_ZN16DiagnoseViewBaseC1Ev+0x27ba>
            return (int)(fs + 0.5f);
 8006a56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a62:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a66:	4628      	mov	r0, r5
 8006a68:	f010 f8b5 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a6c:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006a70:	ed1f 7ac5 	vldr	s14, [pc, #-788]	@ 8006760 <_ZN16DiagnoseViewBaseC1Ev+0x14b4>
 8006a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a78:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a84:	f2c1 8003 	blt.w	8007a8e <_ZN16DiagnoseViewBaseC1Ev+0x27e2>
            return (int)(fs + 0.5f);
 8006a88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a94:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f010 f89c 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a9e:	edd4 7a6c 	vldr	s15, [r4, #432]	@ 0x1b0
 8006aa2:	ed1f 7ad0 	vldr	s14, [pc, #-832]	@ 8006764 <_ZN16DiagnoseViewBaseC1Ev+0x14b8>
 8006aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	f2c0 87fe 	blt.w	8007ab6 <_ZN16DiagnoseViewBaseC1Ev+0x280a>
            return (int)(fs + 0.5f);
 8006aba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006aca:	4628      	mov	r0, r5
 8006acc:	f010 f883 	bl	8016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f00c f8ac 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HomeButton.setXY(20, 14);
 8006ad8:	9804      	ldr	r0, [sp, #16]
 8006ada:	220e      	movs	r2, #14
 8006adc:	2114      	movs	r1, #20
 8006ade:	f7fd fb2b 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
 8006ae2:	2305      	movs	r3, #5
    HomeButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_TINY_OUTLINE_DISABLED_ID));
 8006ae4:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ae6:	a90d      	add	r1, sp, #52	@ 0x34
 8006ae8:	9804      	ldr	r0, [sp, #16]
 8006aea:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8006aee:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8006af2:	f011 f899 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    HomeButton.setAction(buttonCallback);
 8006af6:	f504 5351 	add.w	r3, r4, #13376	@ 0x3440
 8006afa:	9904      	ldr	r1, [sp, #16]
 8006afc:	4638      	mov	r0, r7
 8006afe:	332c      	adds	r3, #44	@ 0x2c
        action = &callback;
 8006b00:	f8c4 34c4 	str.w	r3, [r4, #1220]	@ 0x4c4
 8006b04:	f00c f894 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scrollableContainer1.setPosition(0, 94, 307, 386);
 8006b08:	f44f 73c1 	mov.w	r3, #386	@ 0x182
 8006b0c:	225e      	movs	r2, #94	@ 0x5e
 8006b0e:	9805      	ldr	r0, [sp, #20]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	2100      	movs	r1, #0
 8006b14:	f240 1333 	movw	r3, #307	@ 0x133
 8006b18:	f7fd fb1b 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006b1c:	9805      	ldr	r0, [sp, #20]
 8006b1e:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 8006b22:	f00d f96b 	bl	8013dfc <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    scrollableContainer1.setScrollbarsAlpha(255);
 8006b26:	9805      	ldr	r0, [sp, #20]
 8006b28:	21ff      	movs	r1, #255	@ 0xff
 8006b2a:	f00d f96c 	bl	8013e06 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
 8006b2e:	4638      	mov	r0, r7
 8006b30:	9905      	ldr	r1, [sp, #20]
 8006b32:	f00c f87d 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006b36:	4620      	mov	r0, r4
 8006b38:	b011      	add	sp, #68	@ 0x44
 8006b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006b3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b46:	ee17 3a10 	vmov	r3, s14
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b50:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b5c:	ee17 1a90 	vmov	r1, s15
 8006b60:	4419      	add	r1, r3
 8006b62:	f7fe bd20 	b.w	80055a6 <_ZN16DiagnoseViewBaseC1Ev+0x2fa>
 8006b66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b6a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b6e:	ee17 3a10 	vmov	r3, s14
 8006b72:	3b01      	subs	r3, #1
 8006b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b78:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b84:	ee17 1a90 	vmov	r1, s15
 8006b88:	4419      	add	r1, r3
 8006b8a:	f7fe bd25 	b.w	80055d8 <_ZN16DiagnoseViewBaseC1Ev+0x32c>
 8006b8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b92:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b96:	ee17 3a10 	vmov	r3, s14
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ba0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bac:	ee17 1a90 	vmov	r1, s15
 8006bb0:	4419      	add	r1, r3
 8006bb2:	f7fe bd2a 	b.w	800560a <_ZN16DiagnoseViewBaseC1Ev+0x35e>
 8006bb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006bba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bbe:	ee17 3a10 	vmov	r3, s14
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bc8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bd4:	ee17 1a90 	vmov	r1, s15
 8006bd8:	4419      	add	r1, r3
 8006bda:	f7fe bd2f 	b.w	800563c <_ZN16DiagnoseViewBaseC1Ev+0x390>
 8006bde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006be2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006be6:	ee17 3a10 	vmov	r3, s14
 8006bea:	3b01      	subs	r3, #1
 8006bec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bf0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bfc:	ee17 1a90 	vmov	r1, s15
 8006c00:	4419      	add	r1, r3
 8006c02:	f7fe bd81 	b.w	8005708 <_ZN16DiagnoseViewBaseC1Ev+0x45c>
 8006c06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c0a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c0e:	ee17 3a10 	vmov	r3, s14
 8006c12:	3b01      	subs	r3, #1
 8006c14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c18:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c24:	ee17 1a90 	vmov	r1, s15
 8006c28:	4419      	add	r1, r3
 8006c2a:	f7fe bd86 	b.w	800573a <_ZN16DiagnoseViewBaseC1Ev+0x48e>
 8006c2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c32:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c36:	ee17 3a10 	vmov	r3, s14
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c40:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c4c:	ee17 1a90 	vmov	r1, s15
 8006c50:	4419      	add	r1, r3
 8006c52:	f7fe bd8b 	b.w	800576c <_ZN16DiagnoseViewBaseC1Ev+0x4c0>
 8006c56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c5a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c5e:	ee17 3a10 	vmov	r3, s14
 8006c62:	3b01      	subs	r3, #1
 8006c64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c68:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c74:	ee17 1a90 	vmov	r1, s15
 8006c78:	4419      	add	r1, r3
 8006c7a:	f7fe bd90 	b.w	800579e <_ZN16DiagnoseViewBaseC1Ev+0x4f2>
 8006c7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c82:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c86:	ee17 3a10 	vmov	r3, s14
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c90:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c9c:	ee17 1a90 	vmov	r1, s15
 8006ca0:	4419      	add	r1, r3
 8006ca2:	f7fe bd95 	b.w	80057d0 <_ZN16DiagnoseViewBaseC1Ev+0x524>
 8006ca6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006caa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cae:	ee17 3a10 	vmov	r3, s14
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cb8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cc4:	ee17 1a90 	vmov	r1, s15
 8006cc8:	4419      	add	r1, r3
 8006cca:	f7fe bd9a 	b.w	8005802 <_ZN16DiagnoseViewBaseC1Ev+0x556>
 8006cce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cd2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cd6:	ee17 3a10 	vmov	r3, s14
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ce0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cec:	ee17 1a90 	vmov	r1, s15
 8006cf0:	4419      	add	r1, r3
 8006cf2:	f7fe bd9f 	b.w	8005834 <_ZN16DiagnoseViewBaseC1Ev+0x588>
 8006cf6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cfa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cfe:	ee17 3a10 	vmov	r3, s14
 8006d02:	3b01      	subs	r3, #1
 8006d04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d08:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d14:	ee17 1a90 	vmov	r1, s15
 8006d18:	4419      	add	r1, r3
 8006d1a:	f7fe bda4 	b.w	8005866 <_ZN16DiagnoseViewBaseC1Ev+0x5ba>
 8006d1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d22:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d26:	ee17 3a10 	vmov	r3, s14
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d30:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d3c:	ee17 1a90 	vmov	r1, s15
 8006d40:	4419      	add	r1, r3
 8006d42:	f7fe bda9 	b.w	8005898 <_ZN16DiagnoseViewBaseC1Ev+0x5ec>
 8006d46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d4a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d4e:	ee17 3a10 	vmov	r3, s14
 8006d52:	3b01      	subs	r3, #1
 8006d54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d58:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d64:	ee17 1a90 	vmov	r1, s15
 8006d68:	4419      	add	r1, r3
 8006d6a:	f7fe bdae 	b.w	80058ca <_ZN16DiagnoseViewBaseC1Ev+0x61e>
 8006d6e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d72:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d76:	ee17 3a10 	vmov	r3, s14
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d80:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d8c:	ee17 1a90 	vmov	r1, s15
 8006d90:	4419      	add	r1, r3
 8006d92:	f7fe bdb3 	b.w	80058fc <_ZN16DiagnoseViewBaseC1Ev+0x650>
 8006d96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d9a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d9e:	ee17 3a10 	vmov	r3, s14
 8006da2:	3b01      	subs	r3, #1
 8006da4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006da8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db4:	ee17 1a90 	vmov	r1, s15
 8006db8:	4419      	add	r1, r3
 8006dba:	f7fe bdb8 	b.w	800592e <_ZN16DiagnoseViewBaseC1Ev+0x682>
 8006dbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dc2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006dc6:	ee17 3a10 	vmov	r3, s14
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dd0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ddc:	ee17 1a90 	vmov	r1, s15
 8006de0:	4419      	add	r1, r3
 8006de2:	f7fe bdbd 	b.w	8005960 <_ZN16DiagnoseViewBaseC1Ev+0x6b4>
 8006de6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006dee:	ee17 3a10 	vmov	r3, s14
 8006df2:	3b01      	subs	r3, #1
 8006df4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006df8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e04:	ee17 1a90 	vmov	r1, s15
 8006e08:	4419      	add	r1, r3
 8006e0a:	f7fe bdc2 	b.w	8005992 <_ZN16DiagnoseViewBaseC1Ev+0x6e6>
 8006e0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e12:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e16:	ee17 3a10 	vmov	r3, s14
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e20:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e2c:	ee17 1a90 	vmov	r1, s15
 8006e30:	4419      	add	r1, r3
 8006e32:	f7fe bdc7 	b.w	80059c4 <_ZN16DiagnoseViewBaseC1Ev+0x718>
 8006e36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e3a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e3e:	ee17 3a10 	vmov	r3, s14
 8006e42:	3b01      	subs	r3, #1
 8006e44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e48:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e54:	ee17 1a90 	vmov	r1, s15
 8006e58:	4419      	add	r1, r3
 8006e5a:	f7fe bdcc 	b.w	80059f6 <_ZN16DiagnoseViewBaseC1Ev+0x74a>
 8006e5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e62:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e66:	ee17 3a10 	vmov	r3, s14
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e70:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e7c:	ee17 1a90 	vmov	r1, s15
 8006e80:	4419      	add	r1, r3
 8006e82:	f7fe bdd1 	b.w	8005a28 <_ZN16DiagnoseViewBaseC1Ev+0x77c>
 8006e86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e8a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e8e:	ee17 3a10 	vmov	r3, s14
 8006e92:	3b01      	subs	r3, #1
 8006e94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e98:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ea4:	ee17 1a90 	vmov	r1, s15
 8006ea8:	4419      	add	r1, r3
 8006eaa:	f7fe bdd6 	b.w	8005a5a <_ZN16DiagnoseViewBaseC1Ev+0x7ae>
 8006eae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006eb2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006eb6:	ee17 3a10 	vmov	r3, s14
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ec0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ecc:	ee17 1a90 	vmov	r1, s15
 8006ed0:	4419      	add	r1, r3
 8006ed2:	f7fe bddb 	b.w	8005a8c <_ZN16DiagnoseViewBaseC1Ev+0x7e0>
 8006ed6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006eda:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ede:	ee17 3a10 	vmov	r3, s14
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ee8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef4:	ee17 1a90 	vmov	r1, s15
 8006ef8:	4419      	add	r1, r3
 8006efa:	f7fe bde0 	b.w	8005abe <_ZN16DiagnoseViewBaseC1Ev+0x812>
 8006efe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f02:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f06:	ee17 3a10 	vmov	r3, s14
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f10:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f1c:	ee17 1a90 	vmov	r1, s15
 8006f20:	4419      	add	r1, r3
 8006f22:	f7fe bde5 	b.w	8005af0 <_ZN16DiagnoseViewBaseC1Ev+0x844>
 8006f26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f2a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f2e:	ee17 3a10 	vmov	r3, s14
 8006f32:	3b01      	subs	r3, #1
 8006f34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f38:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f44:	ee17 1a90 	vmov	r1, s15
 8006f48:	4419      	add	r1, r3
 8006f4a:	f7fe bdea 	b.w	8005b22 <_ZN16DiagnoseViewBaseC1Ev+0x876>
 8006f4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f52:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f56:	ee17 3a10 	vmov	r3, s14
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f60:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f6c:	ee17 1a90 	vmov	r1, s15
 8006f70:	4419      	add	r1, r3
 8006f72:	f7fe bdef 	b.w	8005b54 <_ZN16DiagnoseViewBaseC1Ev+0x8a8>
 8006f76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f7a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f7e:	ee17 3a10 	vmov	r3, s14
 8006f82:	3b01      	subs	r3, #1
 8006f84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f88:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f94:	ee17 1a90 	vmov	r1, s15
 8006f98:	4419      	add	r1, r3
 8006f9a:	f7fe bdf4 	b.w	8005b86 <_ZN16DiagnoseViewBaseC1Ev+0x8da>
 8006f9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fa2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fa6:	ee17 3a10 	vmov	r3, s14
 8006faa:	3b01      	subs	r3, #1
 8006fac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fb0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fbc:	ee17 1a90 	vmov	r1, s15
 8006fc0:	4419      	add	r1, r3
 8006fc2:	f7fe bdf9 	b.w	8005bb8 <_ZN16DiagnoseViewBaseC1Ev+0x90c>
 8006fc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fce:	ee17 3a10 	vmov	r3, s14
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fd8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8006fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fe4:	ee17 1a90 	vmov	r1, s15
 8006fe8:	4419      	add	r1, r3
 8006fea:	f7fe bdfe 	b.w	8005bea <_ZN16DiagnoseViewBaseC1Ev+0x93e>
 8006fee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ff2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ff6:	ee17 3a10 	vmov	r3, s14
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007000:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800700c:	ee17 1a90 	vmov	r1, s15
 8007010:	4419      	add	r1, r3
 8007012:	f7fe be03 	b.w	8005c1c <_ZN16DiagnoseViewBaseC1Ev+0x970>
 8007016:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800701a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800701e:	ee17 3a10 	vmov	r3, s14
 8007022:	3b01      	subs	r3, #1
 8007024:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007028:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800702c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007034:	ee17 1a90 	vmov	r1, s15
 8007038:	4419      	add	r1, r3
 800703a:	f7fe be08 	b.w	8005c4e <_ZN16DiagnoseViewBaseC1Ev+0x9a2>
 800703e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007042:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007046:	ee17 3a10 	vmov	r3, s14
 800704a:	3b01      	subs	r3, #1
 800704c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007050:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800705c:	ee17 1a90 	vmov	r1, s15
 8007060:	4419      	add	r1, r3
 8007062:	f7fe be0d 	b.w	8005c80 <_ZN16DiagnoseViewBaseC1Ev+0x9d4>
 8007066:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800706a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800706e:	ee17 3a10 	vmov	r3, s14
 8007072:	3b01      	subs	r3, #1
 8007074:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007078:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800707c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007084:	ee17 1a90 	vmov	r1, s15
 8007088:	4419      	add	r1, r3
 800708a:	f7fe be12 	b.w	8005cb2 <_ZN16DiagnoseViewBaseC1Ev+0xa06>
 800708e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007092:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007096:	ee17 3a10 	vmov	r3, s14
 800709a:	3b01      	subs	r3, #1
 800709c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070a0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ac:	ee17 1a90 	vmov	r1, s15
 80070b0:	4419      	add	r1, r3
 80070b2:	f7fe be17 	b.w	8005ce4 <_ZN16DiagnoseViewBaseC1Ev+0xa38>
 80070b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070ba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070be:	ee17 3a10 	vmov	r3, s14
 80070c2:	3b01      	subs	r3, #1
 80070c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070c8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070d4:	ee17 1a90 	vmov	r1, s15
 80070d8:	4419      	add	r1, r3
 80070da:	f7fe be1c 	b.w	8005d16 <_ZN16DiagnoseViewBaseC1Ev+0xa6a>
 80070de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070e6:	ee17 3a10 	vmov	r3, s14
 80070ea:	3b01      	subs	r3, #1
 80070ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070f0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80070f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070fc:	ee17 1a90 	vmov	r1, s15
 8007100:	4419      	add	r1, r3
 8007102:	f7fe be21 	b.w	8005d48 <_ZN16DiagnoseViewBaseC1Ev+0xa9c>
 8007106:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800710a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800710e:	ee17 3a10 	vmov	r3, s14
 8007112:	3b01      	subs	r3, #1
 8007114:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007118:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800711c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007124:	ee17 1a90 	vmov	r1, s15
 8007128:	4419      	add	r1, r3
 800712a:	f7fe be26 	b.w	8005d7a <_ZN16DiagnoseViewBaseC1Ev+0xace>
 800712e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007132:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007136:	ee17 3a10 	vmov	r3, s14
 800713a:	3b01      	subs	r3, #1
 800713c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007140:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800714c:	ee17 1a90 	vmov	r1, s15
 8007150:	4419      	add	r1, r3
 8007152:	f7fe be2b 	b.w	8005dac <_ZN16DiagnoseViewBaseC1Ev+0xb00>
 8007156:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800715a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800715e:	ee17 3a10 	vmov	r3, s14
 8007162:	3b01      	subs	r3, #1
 8007164:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007168:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800716c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007174:	ee17 1a90 	vmov	r1, s15
 8007178:	4419      	add	r1, r3
 800717a:	f7fe be30 	b.w	8005dde <_ZN16DiagnoseViewBaseC1Ev+0xb32>
 800717e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007182:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007186:	ee17 3a10 	vmov	r3, s14
 800718a:	3b01      	subs	r3, #1
 800718c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007190:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800719c:	ee17 1a90 	vmov	r1, s15
 80071a0:	4419      	add	r1, r3
 80071a2:	f7fe be35 	b.w	8005e10 <_ZN16DiagnoseViewBaseC1Ev+0xb64>
 80071a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071aa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80071ae:	ee17 3a10 	vmov	r3, s14
 80071b2:	3b01      	subs	r3, #1
 80071b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071b8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80071bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071c4:	ee17 1a90 	vmov	r1, s15
 80071c8:	4419      	add	r1, r3
 80071ca:	f7fe be3a 	b.w	8005e42 <_ZN16DiagnoseViewBaseC1Ev+0xb96>
 80071ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80071d6:	ee17 3a10 	vmov	r3, s14
 80071da:	3b01      	subs	r3, #1
 80071dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071e0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80071e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071ec:	ee17 1a90 	vmov	r1, s15
 80071f0:	4419      	add	r1, r3
 80071f2:	f7fe be3f 	b.w	8005e74 <_ZN16DiagnoseViewBaseC1Ev+0xbc8>
 80071f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80071fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80071fe:	ee17 3a10 	vmov	r3, s14
 8007202:	3b01      	subs	r3, #1
 8007204:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007208:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800720c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007214:	ee17 1a90 	vmov	r1, s15
 8007218:	4419      	add	r1, r3
 800721a:	f7fe be93 	b.w	8005f44 <_ZN16DiagnoseViewBaseC1Ev+0xc98>
 800721e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007222:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007226:	ee17 3a10 	vmov	r3, s14
 800722a:	3b01      	subs	r3, #1
 800722c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007230:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800723c:	ee17 1a90 	vmov	r1, s15
 8007240:	4419      	add	r1, r3
 8007242:	f7fe be98 	b.w	8005f76 <_ZN16DiagnoseViewBaseC1Ev+0xcca>
 8007246:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800724a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800724e:	ee17 3a10 	vmov	r3, s14
 8007252:	3b01      	subs	r3, #1
 8007254:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007258:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800725c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007264:	ee17 1a90 	vmov	r1, s15
 8007268:	4419      	add	r1, r3
 800726a:	f7fe be9d 	b.w	8005fa8 <_ZN16DiagnoseViewBaseC1Ev+0xcfc>
 800726e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007272:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007276:	ee17 3a10 	vmov	r3, s14
 800727a:	3b01      	subs	r3, #1
 800727c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007280:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800728c:	ee17 1a90 	vmov	r1, s15
 8007290:	4419      	add	r1, r3
 8007292:	f7fe bea2 	b.w	8005fda <_ZN16DiagnoseViewBaseC1Ev+0xd2e>
 8007296:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800729a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800729e:	ee17 3a10 	vmov	r3, s14
 80072a2:	3b01      	subs	r3, #1
 80072a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072a8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072b4:	ee17 1a90 	vmov	r1, s15
 80072b8:	4419      	add	r1, r3
 80072ba:	f7fe bea7 	b.w	800600c <_ZN16DiagnoseViewBaseC1Ev+0xd60>
 80072be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072c6:	ee17 3a10 	vmov	r3, s14
 80072ca:	3b01      	subs	r3, #1
 80072cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072d0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072dc:	ee17 1a90 	vmov	r1, s15
 80072e0:	4419      	add	r1, r3
 80072e2:	f7fe beac 	b.w	800603e <_ZN16DiagnoseViewBaseC1Ev+0xd92>
 80072e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80072ea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80072ee:	ee17 3a10 	vmov	r3, s14
 80072f2:	3b01      	subs	r3, #1
 80072f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072f8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80072fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007304:	ee17 1a90 	vmov	r1, s15
 8007308:	4419      	add	r1, r3
 800730a:	f7fe beb1 	b.w	8006070 <_ZN16DiagnoseViewBaseC1Ev+0xdc4>
 800730e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007312:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007316:	ee17 3a10 	vmov	r3, s14
 800731a:	3b01      	subs	r3, #1
 800731c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007320:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800732c:	ee17 1a90 	vmov	r1, s15
 8007330:	4419      	add	r1, r3
 8007332:	f7fe beb6 	b.w	80060a2 <_ZN16DiagnoseViewBaseC1Ev+0xdf6>
 8007336:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800733a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800733e:	ee17 3a10 	vmov	r3, s14
 8007342:	3b01      	subs	r3, #1
 8007344:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007348:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800734c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007354:	ee17 1a90 	vmov	r1, s15
 8007358:	4419      	add	r1, r3
 800735a:	f7fe bebb 	b.w	80060d4 <_ZN16DiagnoseViewBaseC1Ev+0xe28>
 800735e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007362:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007366:	ee17 3a10 	vmov	r3, s14
 800736a:	3b01      	subs	r3, #1
 800736c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007370:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800737c:	ee17 1a90 	vmov	r1, s15
 8007380:	4419      	add	r1, r3
 8007382:	f7fe bec0 	b.w	8006106 <_ZN16DiagnoseViewBaseC1Ev+0xe5a>
 8007386:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800738a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800738e:	ee17 3a10 	vmov	r3, s14
 8007392:	3b01      	subs	r3, #1
 8007394:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007398:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800739c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073a4:	ee17 1a90 	vmov	r1, s15
 80073a8:	4419      	add	r1, r3
 80073aa:	f7fe bec5 	b.w	8006138 <_ZN16DiagnoseViewBaseC1Ev+0xe8c>
 80073ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073b6:	ee17 3a10 	vmov	r3, s14
 80073ba:	3b01      	subs	r3, #1
 80073bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073c0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073cc:	ee17 1a90 	vmov	r1, s15
 80073d0:	4419      	add	r1, r3
 80073d2:	f7fe beca 	b.w	800616a <_ZN16DiagnoseViewBaseC1Ev+0xebe>
 80073d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80073da:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80073de:	ee17 3a10 	vmov	r3, s14
 80073e2:	3b01      	subs	r3, #1
 80073e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073e8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80073ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073f4:	ee17 1a90 	vmov	r1, s15
 80073f8:	4419      	add	r1, r3
 80073fa:	f7fe becf 	b.w	800619c <_ZN16DiagnoseViewBaseC1Ev+0xef0>
 80073fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007402:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007406:	ee17 3a10 	vmov	r3, s14
 800740a:	3b01      	subs	r3, #1
 800740c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007410:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800741c:	ee17 1a90 	vmov	r1, s15
 8007420:	4419      	add	r1, r3
 8007422:	f7fe bed4 	b.w	80061ce <_ZN16DiagnoseViewBaseC1Ev+0xf22>
 8007426:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800742a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800742e:	ee17 3a10 	vmov	r3, s14
 8007432:	3b01      	subs	r3, #1
 8007434:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007438:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800743c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007444:	ee17 1a90 	vmov	r1, s15
 8007448:	4419      	add	r1, r3
 800744a:	f7fe bed9 	b.w	8006200 <_ZN16DiagnoseViewBaseC1Ev+0xf54>
 800744e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007452:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007456:	ee17 3a10 	vmov	r3, s14
 800745a:	3b01      	subs	r3, #1
 800745c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007460:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800746c:	ee17 1a90 	vmov	r1, s15
 8007470:	4419      	add	r1, r3
 8007472:	f7fe bede 	b.w	8006232 <_ZN16DiagnoseViewBaseC1Ev+0xf86>
 8007476:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800747a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800747e:	ee17 3a10 	vmov	r3, s14
 8007482:	3b01      	subs	r3, #1
 8007484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007488:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800748c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007494:	ee17 1a90 	vmov	r1, s15
 8007498:	4419      	add	r1, r3
 800749a:	f7fe bee3 	b.w	8006264 <_ZN16DiagnoseViewBaseC1Ev+0xfb8>
 800749e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074a6:	ee17 3a10 	vmov	r3, s14
 80074aa:	3b01      	subs	r3, #1
 80074ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074b0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074bc:	ee17 1a90 	vmov	r1, s15
 80074c0:	4419      	add	r1, r3
 80074c2:	f7fe bee8 	b.w	8006296 <_ZN16DiagnoseViewBaseC1Ev+0xfea>
 80074c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074ce:	ee17 3a10 	vmov	r3, s14
 80074d2:	3b01      	subs	r3, #1
 80074d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074d8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80074dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074e4:	ee17 1a90 	vmov	r1, s15
 80074e8:	4419      	add	r1, r3
 80074ea:	f7fe beed 	b.w	80062c8 <_ZN16DiagnoseViewBaseC1Ev+0x101c>
 80074ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80074f2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80074f6:	ee17 3a10 	vmov	r3, s14
 80074fa:	3b01      	subs	r3, #1
 80074fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007500:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800750c:	ee17 1a90 	vmov	r1, s15
 8007510:	4419      	add	r1, r3
 8007512:	f7fe bef2 	b.w	80062fa <_ZN16DiagnoseViewBaseC1Ev+0x104e>
 8007516:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800751a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800751e:	ee17 3a10 	vmov	r3, s14
 8007522:	3b01      	subs	r3, #1
 8007524:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007528:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800752c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007534:	ee17 1a90 	vmov	r1, s15
 8007538:	4419      	add	r1, r3
 800753a:	f7fe bef7 	b.w	800632c <_ZN16DiagnoseViewBaseC1Ev+0x1080>
 800753e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007542:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007546:	ee17 3a10 	vmov	r3, s14
 800754a:	3b01      	subs	r3, #1
 800754c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007550:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800755c:	ee17 1a90 	vmov	r1, s15
 8007560:	4419      	add	r1, r3
 8007562:	f7fe befc 	b.w	800635e <_ZN16DiagnoseViewBaseC1Ev+0x10b2>
 8007566:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800756a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800756e:	ee17 3a10 	vmov	r3, s14
 8007572:	3b01      	subs	r3, #1
 8007574:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007578:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800757c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007584:	ee17 1a90 	vmov	r1, s15
 8007588:	4419      	add	r1, r3
 800758a:	f7fe bf01 	b.w	8006390 <_ZN16DiagnoseViewBaseC1Ev+0x10e4>
 800758e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007592:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007596:	ee17 3a10 	vmov	r3, s14
 800759a:	3b01      	subs	r3, #1
 800759c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075a0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075ac:	ee17 1a90 	vmov	r1, s15
 80075b0:	4419      	add	r1, r3
 80075b2:	f7fe bf06 	b.w	80063c2 <_ZN16DiagnoseViewBaseC1Ev+0x1116>
 80075b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075ba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075be:	ee17 3a10 	vmov	r3, s14
 80075c2:	3b01      	subs	r3, #1
 80075c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075c8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075d4:	ee17 1a90 	vmov	r1, s15
 80075d8:	4419      	add	r1, r3
 80075da:	f7fe bf0b 	b.w	80063f4 <_ZN16DiagnoseViewBaseC1Ev+0x1148>
 80075de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80075e6:	ee17 3a10 	vmov	r3, s14
 80075ea:	3b01      	subs	r3, #1
 80075ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075f0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80075f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075fc:	ee17 1a90 	vmov	r1, s15
 8007600:	4419      	add	r1, r3
 8007602:	f7fe bf10 	b.w	8006426 <_ZN16DiagnoseViewBaseC1Ev+0x117a>
 8007606:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800760a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800760e:	ee17 3a10 	vmov	r3, s14
 8007612:	3b01      	subs	r3, #1
 8007614:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007618:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800761c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007624:	ee17 1a90 	vmov	r1, s15
 8007628:	4419      	add	r1, r3
 800762a:	f7fe bf15 	b.w	8006458 <_ZN16DiagnoseViewBaseC1Ev+0x11ac>
 800762e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007632:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007636:	ee17 3a10 	vmov	r3, s14
 800763a:	3b01      	subs	r3, #1
 800763c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007640:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800764c:	ee17 1a90 	vmov	r1, s15
 8007650:	4419      	add	r1, r3
 8007652:	f7fe bf1a 	b.w	800648a <_ZN16DiagnoseViewBaseC1Ev+0x11de>
 8007656:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800765a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800765e:	ee17 3a10 	vmov	r3, s14
 8007662:	3b01      	subs	r3, #1
 8007664:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007668:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800766c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007674:	ee17 1a90 	vmov	r1, s15
 8007678:	4419      	add	r1, r3
 800767a:	f7fe bf1f 	b.w	80064bc <_ZN16DiagnoseViewBaseC1Ev+0x1210>
 800767e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007682:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007686:	ee17 3a10 	vmov	r3, s14
 800768a:	3b01      	subs	r3, #1
 800768c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007690:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800769c:	ee17 1a90 	vmov	r1, s15
 80076a0:	4419      	add	r1, r3
 80076a2:	f7fe bf24 	b.w	80064ee <_ZN16DiagnoseViewBaseC1Ev+0x1242>
 80076a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80076aa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80076ae:	ee17 3a10 	vmov	r3, s14
 80076b2:	3b01      	subs	r3, #1
 80076b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076b8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80076bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076c4:	ee17 1a90 	vmov	r1, s15
 80076c8:	4419      	add	r1, r3
 80076ca:	f7fe bf29 	b.w	8006520 <_ZN16DiagnoseViewBaseC1Ev+0x1274>
 80076ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80076d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80076d6:	ee17 3a10 	vmov	r3, s14
 80076da:	3b01      	subs	r3, #1
 80076dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076e0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80076e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076ec:	ee17 1a90 	vmov	r1, s15
 80076f0:	4419      	add	r1, r3
 80076f2:	f7fe bf2e 	b.w	8006552 <_ZN16DiagnoseViewBaseC1Ev+0x12a6>
 80076f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80076fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80076fe:	ee17 3a10 	vmov	r3, s14
 8007702:	3b01      	subs	r3, #1
 8007704:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007708:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800770c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007714:	ee17 1a90 	vmov	r1, s15
 8007718:	4419      	add	r1, r3
 800771a:	f7fe bf33 	b.w	8006584 <_ZN16DiagnoseViewBaseC1Ev+0x12d8>
 800771e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007722:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007726:	ee17 3a10 	vmov	r3, s14
 800772a:	3b01      	subs	r3, #1
 800772c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007730:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800773c:	ee17 1a90 	vmov	r1, s15
 8007740:	4419      	add	r1, r3
 8007742:	f7fe bf38 	b.w	80065b6 <_ZN16DiagnoseViewBaseC1Ev+0x130a>
 8007746:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800774a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800774e:	ee17 3a10 	vmov	r3, s14
 8007752:	3b01      	subs	r3, #1
 8007754:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007758:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800775c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007764:	ee17 1a90 	vmov	r1, s15
 8007768:	4419      	add	r1, r3
 800776a:	f7fe bf3d 	b.w	80065e8 <_ZN16DiagnoseViewBaseC1Ev+0x133c>
 800776e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007772:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007776:	ee17 3a10 	vmov	r3, s14
 800777a:	3b01      	subs	r3, #1
 800777c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007780:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800778c:	ee17 1a90 	vmov	r1, s15
 8007790:	4419      	add	r1, r3
 8007792:	f7fe bf42 	b.w	800661a <_ZN16DiagnoseViewBaseC1Ev+0x136e>
 8007796:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800779a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800779e:	ee17 3a10 	vmov	r3, s14
 80077a2:	3b01      	subs	r3, #1
 80077a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077a8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80077ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077b4:	ee17 1a90 	vmov	r1, s15
 80077b8:	4419      	add	r1, r3
 80077ba:	f7fe bf47 	b.w	800664c <_ZN16DiagnoseViewBaseC1Ev+0x13a0>
 80077be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80077c6:	ee17 3a10 	vmov	r3, s14
 80077ca:	3b01      	subs	r3, #1
 80077cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077d0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80077d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077dc:	ee17 1a90 	vmov	r1, s15
 80077e0:	4419      	add	r1, r3
 80077e2:	f7fe bf4c 	b.w	800667e <_ZN16DiagnoseViewBaseC1Ev+0x13d2>
 80077e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077ea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80077ee:	ee17 3a10 	vmov	r3, s14
 80077f2:	3b01      	subs	r3, #1
 80077f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077f8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80077fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007804:	ee17 1a90 	vmov	r1, s15
 8007808:	4419      	add	r1, r3
 800780a:	f7fe bf51 	b.w	80066b0 <_ZN16DiagnoseViewBaseC1Ev+0x1404>
 800780e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007812:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007816:	ee17 3a10 	vmov	r3, s14
 800781a:	3b01      	subs	r3, #1
 800781c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007820:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800782c:	ee17 1a90 	vmov	r1, s15
 8007830:	4419      	add	r1, r3
 8007832:	f7fe bfa1 	b.w	8006778 <_ZN16DiagnoseViewBaseC1Ev+0x14cc>
 8007836:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800783a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800783e:	ee17 3a10 	vmov	r3, s14
 8007842:	3b01      	subs	r3, #1
 8007844:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007848:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800784c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007854:	ee17 1a90 	vmov	r1, s15
 8007858:	4419      	add	r1, r3
 800785a:	f7fe bfa6 	b.w	80067aa <_ZN16DiagnoseViewBaseC1Ev+0x14fe>
 800785e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007862:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007866:	ee17 3a10 	vmov	r3, s14
 800786a:	3b01      	subs	r3, #1
 800786c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007870:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800787c:	ee17 1a90 	vmov	r1, s15
 8007880:	4419      	add	r1, r3
 8007882:	f7fe bfab 	b.w	80067dc <_ZN16DiagnoseViewBaseC1Ev+0x1530>
 8007886:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800788a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800788e:	ee17 3a10 	vmov	r3, s14
 8007892:	3b01      	subs	r3, #1
 8007894:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007898:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800789c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078a4:	ee17 1a90 	vmov	r1, s15
 80078a8:	4419      	add	r1, r3
 80078aa:	f7fe bfb0 	b.w	800680e <_ZN16DiagnoseViewBaseC1Ev+0x1562>
 80078ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80078b6:	ee17 3a10 	vmov	r3, s14
 80078ba:	3b01      	subs	r3, #1
 80078bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80078c0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80078c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078cc:	ee17 1a90 	vmov	r1, s15
 80078d0:	4419      	add	r1, r3
 80078d2:	f7fe bfb5 	b.w	8006840 <_ZN16DiagnoseViewBaseC1Ev+0x1594>
 80078d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80078da:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80078de:	ee17 3a10 	vmov	r3, s14
 80078e2:	3b01      	subs	r3, #1
 80078e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80078e8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80078ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f4:	ee17 1a90 	vmov	r1, s15
 80078f8:	4419      	add	r1, r3
 80078fa:	f7fe bfba 	b.w	8006872 <_ZN16DiagnoseViewBaseC1Ev+0x15c6>
 80078fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007902:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007906:	ee17 3a10 	vmov	r3, s14
 800790a:	3b01      	subs	r3, #1
 800790c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007910:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800791c:	ee17 1a90 	vmov	r1, s15
 8007920:	4419      	add	r1, r3
 8007922:	f7fe bfbf 	b.w	80068a4 <_ZN16DiagnoseViewBaseC1Ev+0x15f8>
 8007926:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800792a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800792e:	ee17 3a10 	vmov	r3, s14
 8007932:	3b01      	subs	r3, #1
 8007934:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007938:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800793c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007944:	ee17 1a90 	vmov	r1, s15
 8007948:	4419      	add	r1, r3
 800794a:	f7fe bfc4 	b.w	80068d6 <_ZN16DiagnoseViewBaseC1Ev+0x162a>
 800794e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007952:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007956:	ee17 3a10 	vmov	r3, s14
 800795a:	3b01      	subs	r3, #1
 800795c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007960:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800796c:	ee17 1a90 	vmov	r1, s15
 8007970:	4419      	add	r1, r3
 8007972:	f7fe bfc9 	b.w	8006908 <_ZN16DiagnoseViewBaseC1Ev+0x165c>
 8007976:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800797a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800797e:	ee17 3a10 	vmov	r3, s14
 8007982:	3b01      	subs	r3, #1
 8007984:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007988:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800798c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007994:	ee17 1a90 	vmov	r1, s15
 8007998:	4419      	add	r1, r3
 800799a:	f7fe bfce 	b.w	800693a <_ZN16DiagnoseViewBaseC1Ev+0x168e>
 800799e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80079a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80079a6:	ee17 3a10 	vmov	r3, s14
 80079aa:	3b01      	subs	r3, #1
 80079ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079b0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80079b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079bc:	ee17 1a90 	vmov	r1, s15
 80079c0:	4419      	add	r1, r3
 80079c2:	f7fe bfd3 	b.w	800696c <_ZN16DiagnoseViewBaseC1Ev+0x16c0>
 80079c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80079ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80079ce:	ee17 3a10 	vmov	r3, s14
 80079d2:	3b01      	subs	r3, #1
 80079d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079d8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80079dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079e4:	ee17 1a90 	vmov	r1, s15
 80079e8:	4419      	add	r1, r3
 80079ea:	f7fe bfd8 	b.w	800699e <_ZN16DiagnoseViewBaseC1Ev+0x16f2>
 80079ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80079f2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80079f6:	ee17 3a10 	vmov	r3, s14
 80079fa:	3b01      	subs	r3, #1
 80079fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a00:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a0c:	ee17 1a90 	vmov	r1, s15
 8007a10:	4419      	add	r1, r3
 8007a12:	f7fe bfdd 	b.w	80069d0 <_ZN16DiagnoseViewBaseC1Ev+0x1724>
 8007a16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a1a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a1e:	ee17 3a10 	vmov	r3, s14
 8007a22:	3b01      	subs	r3, #1
 8007a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a28:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a34:	ee17 1a90 	vmov	r1, s15
 8007a38:	4419      	add	r1, r3
 8007a3a:	f7fe bfe2 	b.w	8006a02 <_ZN16DiagnoseViewBaseC1Ev+0x1756>
 8007a3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a46:	ee17 3a10 	vmov	r3, s14
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a50:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a5c:	ee17 1a90 	vmov	r1, s15
 8007a60:	4419      	add	r1, r3
 8007a62:	f7fe bfe7 	b.w	8006a34 <_ZN16DiagnoseViewBaseC1Ev+0x1788>
 8007a66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a6a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a6e:	ee17 3a10 	vmov	r3, s14
 8007a72:	3b01      	subs	r3, #1
 8007a74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a78:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a84:	ee17 1a90 	vmov	r1, s15
 8007a88:	4419      	add	r1, r3
 8007a8a:	f7fe bfec 	b.w	8006a66 <_ZN16DiagnoseViewBaseC1Ev+0x17ba>
 8007a8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a92:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007a96:	ee17 3a10 	vmov	r3, s14
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007aa0:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aac:	ee17 1a90 	vmov	r1, s15
 8007ab0:	4419      	add	r1, r3
 8007ab2:	f7fe bff1 	b.w	8006a98 <_ZN16DiagnoseViewBaseC1Ev+0x17ec>
 8007ab6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007aba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007abe:	ee17 3a10 	vmov	r3, s14
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ac8:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ad4:	ee17 1a90 	vmov	r1, s15
 8007ad8:	4419      	add	r1, r3
 8007ada:	f7fe bff6 	b.w	8006aca <_ZN16DiagnoseViewBaseC1Ev+0x181e>
 8007ade:	bf00      	nop

08007ae0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8007ae0:	4770      	bx	lr

08007ae2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8007ae2:	4770      	bx	lr

08007ae4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8007ae4:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8007ae8:	6808      	ldr	r0, [r1, #0]
 8007aea:	6849      	ldr	r1, [r1, #4]
 8007aec:	c303      	stmia	r3!, {r0, r1}
    }
 8007aee:	4770      	bx	lr

08007af0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8007af0:	4770      	bx	lr

08007af2 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8007af2:	4770      	bx	lr

08007af4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8007af4:	6041      	str	r1, [r0, #4]
    }
 8007af6:	4770      	bx	lr

08007af8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8007af8:	4770      	bx	lr
	...

08007afc <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8007afe:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8007b02:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007b06:	2300      	movs	r3, #0
 8007b08:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// MainScreen

void FrontendApplicationBase::gotoMainScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007b0c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8007b10:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoMainScreenScreenNoTransition();
    }
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	08007f3d 	.word	0x08007f3d

08007b1c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	7203      	strb	r3, [r0, #8]
    }
 8007b20:	4770      	bx	lr

08007b22 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8007b22:	4770      	bx	lr

08007b24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8007b24:	4770      	bx	lr

08007b26 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8007b26:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8007b28:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8007b2a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8007b2c:	68c2      	ldr	r2, [r0, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	1054      	asrs	r4, r2, #1
 8007b32:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8007b36:	07d2      	lsls	r2, r2, #31
 8007b38:	bf48      	it	mi
 8007b3a:	590a      	ldrmi	r2, [r1, r4]
    }
 8007b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8007b40:	bf48      	it	mi
 8007b42:	58d3      	ldrmi	r3, [r2, r3]
 8007b44:	4718      	bx	r3

08007b46 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8007b46:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8007b48:	6840      	ldr	r0, [r0, #4]
 8007b4a:	b130      	cbz	r0, 8007b5a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	b91a      	cbnz	r2, 8007b58 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8007b50:	68d8      	ldr	r0, [r3, #12]
 8007b52:	f000 0001 	and.w	r0, r0, #1
 8007b56:	4770      	bx	lr
 8007b58:	2001      	movs	r0, #1
    }
 8007b5a:	4770      	bx	lr

08007b5c <_ZN8touchgfx12NoTransitionD0Ev>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	4604      	mov	r4, r0
 8007b60:	210c      	movs	r1, #12
 8007b62:	f021 fa19 	bl	8028f98 <_ZdlPvj>
 8007b66:	4620      	mov	r0, r4
 8007b68:	bd10      	pop	{r4, pc}

08007b6a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	2110      	movs	r1, #16
 8007b70:	f021 fa12 	bl	8028f98 <_ZdlPvj>
 8007b74:	4620      	mov	r0, r4
 8007b76:	bd10      	pop	{r4, pc}

08007b78 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8007b80:	f021 fa0a 	bl	8028f98 <_ZdlPvj>
 8007b84:	4620      	mov	r0, r4
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8007b88:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8007b8a:	f012 fe41 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8007b8e:	6803      	ldr	r3, [r0, #0]
    }
 8007b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8007b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b96:	4718      	bx	r3

08007b98 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8007b9c:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8007ba0:	b158      	cbz	r0, 8007bba <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8007ba2:	6803      	ldr	r3, [r0, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	4798      	blx	r3
 8007ba8:	b138      	cbz	r0, 8007bba <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8007baa:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8007bae:	6803      	ldr	r3, [r0, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8007bba:	bd10      	pop	{r4, pc}

08007bbc <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8007bbc:	4b04      	ldr	r3, [pc, #16]	@ (8007bd0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007bc4:	b10a      	cbz	r2, 8007bca <_ZN8touchgfx3HAL3lcdEv+0xe>
 8007bc6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007bc8:	b900      	cbnz	r0, 8007bcc <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8007bca:	6898      	ldr	r0, [r3, #8]
    }
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	240285b4 	.word	0x240285b4

08007bd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd6:	4617      	mov	r7, r2
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8007bdc:	f012 ff28 	bl	801aa30 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8007be0:	4b12      	ldr	r3, [pc, #72]	@ (8007c2c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8007be2:	2500      	movs	r5, #0
        instance = this;
 8007be4:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8007be6:	4629      	mov	r1, r5
      model(m)
 8007be8:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8007bea:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8007bec:	4b11      	ldr	r3, [pc, #68]	@ (8007c34 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8007bee:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8007bf2:	4b11      	ldr	r3, [pc, #68]	@ (8007c38 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8007bfa:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8007bfc:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8007c00:	689b      	ldr	r3, [r3, #8]
      model(m)
 8007c02:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8007c06:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 febf 	bl	800898c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8007c0e:	f7ff ffd5 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8007c12:	f01b fb36 	bl	8023282 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8007c16:	f7ff ffd1 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8007c1a:	f01b fba9 	bl	8023370 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8007c1e:	f7ff ffcd 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8007c22:	f01b fbb1 	bl	8023388 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8007c26:	4620      	mov	r0, r4
 8007c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	24028608 	.word	0x24028608
 8007c30:	0802d120 	.word	0x0802d120
 8007c34:	0802d108 	.word	0x0802d108
 8007c38:	240285b4 	.word	0x240285b4

08007c3c <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007c3c:	4b06      	ldr	r3, [pc, #24]	@ (8007c58 <_ZN23FrontendApplicationBase32gotoMainScreenScreenNoTransitionEv+0x1c>)
 8007c3e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8007c42:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8007c4c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8007c50:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	08007f3d 	.word	0x08007f3d

08007c5c <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>:
 8007c5c:	4b06      	ldr	r3, [pc, #24]	@ (8007c78 <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv+0x1c>)
 8007c5e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8007c62:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007c66:	2300      	movs	r3, #0
 8007c68:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Diagnose

void FrontendApplicationBase::gotoDiagnoseScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoDiagnoseScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007c6c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8007c70:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	08007df1 	.word	0x08007df1

08007c7c <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>:
 8007c7c:	4b06      	ldr	r3, [pc, #24]	@ (8007c98 <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv+0x1c>)
 8007c7e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8007c82:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8007c86:	2300      	movs	r3, #0
 8007c88:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Calculator

void FrontendApplicationBase::gotoCalculatorScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8007c8c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8007c90:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	08007ca5 	.word	0x08007ca5

08007c9c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8007c9c:	6803      	ldr	r3, [r0, #0]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca0:	4718      	bx	r3
	...

08007ca4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoCalculatorScreenNoTransitionImpl()
{
 8007ca4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<CalculatorView, CalculatorPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007ca8:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8007cac:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007cae:	68b0      	ldr	r0, [r6, #8]
 8007cb0:	6803      	ldr	r3, [r0, #0]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	4798      	blx	r3
 8007cb6:	f240 63f3 	movw	r3, #1779	@ 0x6f3
 8007cba:	4298      	cmp	r0, r3
 8007cbc:	d805      	bhi.n	8007cca <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x26>
 8007cbe:	4b44      	ldr	r3, [pc, #272]	@ (8007dd0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x12c>)
 8007cc0:	21a3      	movs	r1, #163	@ 0xa3
 8007cc2:	4a44      	ldr	r2, [pc, #272]	@ (8007dd4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007cc4:	4844      	ldr	r0, [pc, #272]	@ (8007dd8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x134>)
 8007cc6:	f021 fcdf 	bl	8029688 <__assert_func>
 8007cca:	6870      	ldr	r0, [r6, #4]
 8007ccc:	6803      	ldr	r3, [r0, #0]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	4798      	blx	r3
 8007cd2:	280f      	cmp	r0, #15
 8007cd4:	d803      	bhi.n	8007cde <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x3a>
 8007cd6:	4b41      	ldr	r3, [pc, #260]	@ (8007ddc <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x138>)
 8007cd8:	21a4      	movs	r1, #164	@ 0xa4
 8007cda:	4a3e      	ldr	r2, [pc, #248]	@ (8007dd4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
 8007cdc:	e7f2      	b.n	8007cc4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007cde:	68f0      	ldr	r0, [r6, #12]
 8007ce0:	6803      	ldr	r3, [r0, #0]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	4798      	blx	r3
 8007ce6:	280b      	cmp	r0, #11
 8007ce8:	d803      	bhi.n	8007cf2 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x4e>
 8007cea:	4b3d      	ldr	r3, [pc, #244]	@ (8007de0 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x13c>)
 8007cec:	21a5      	movs	r1, #165	@ 0xa5
 8007cee:	4a39      	ldr	r2, [pc, #228]	@ (8007dd4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x130>)
 8007cf0:	e7e8      	b.n	8007cc4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8007cf2:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8007de8 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8007cf6:	f012 fd8b 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8007cfa:	3004      	adds	r0, #4
 8007cfc:	f012 fdc6 	bl	801a88c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8007d00:	f8d9 0000 	ldr.w	r0, [r9]
 8007d04:	b110      	cbz	r0, 8007d0c <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8007d06:	6803      	ldr	r3, [r0, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	4798      	blx	r3
    if (*currentTrans)
 8007d0c:	f8d9 0000 	ldr.w	r0, [r9]
 8007d10:	b110      	cbz	r0, 8007d18 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8007d12:	6803      	ldr	r3, [r0, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4798      	blx	r3
    if (*currentScreen)
 8007d18:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8007dec <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x148>
 8007d1c:	f8d8 0000 	ldr.w	r0, [r8]
 8007d20:	b110      	cbz	r0, 8007d28 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8007d22:	6803      	ldr	r3, [r0, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	4798      	blx	r3
    if (*currentPresenter)
 8007d28:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007d2c:	b110      	cbz	r0, 8007d34 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8007d2e:	6803      	ldr	r3, [r0, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	4798      	blx	r3
    if (*currentScreen)
 8007d34:	f8d8 0000 	ldr.w	r0, [r8]
 8007d38:	b110      	cbz	r0, 8007d40 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8007d3a:	6803      	ldr	r3, [r0, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4798      	blx	r3
    if (*currentPresenter)
 8007d40:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007d44:	b110      	cbz	r0, 8007d4c <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8007d46:	6803      	ldr	r3, [r0, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f0      	ldr	r0, [r6, #12]
 8007d50:	f7ff ffa4 	bl	8007c9c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 8007d54:	f04f 0b00 	mov.w	fp, #0
 8007d58:	4b22      	ldr	r3, [pc, #136]	@ (8007de4 <_ZN23FrontendApplicationBase36gotoCalculatorScreenNoTransitionImplEv+0x140>)
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	f8c0 b004 	str.w	fp, [r0, #4]
 8007d60:	4659      	mov	r1, fp
 8007d62:	f880 b008 	strb.w	fp, [r0, #8]
 8007d66:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007d68:	68b0      	ldr	r0, [r6, #8]
 8007d6a:	6803      	ldr	r3, [r0, #0]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6e:	4798      	blx	r3
 8007d70:	4605      	mov	r5, r0
 8007d72:	f000 fea7 	bl	8008ac4 <_ZN14CalculatorViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007d76:	6870      	ldr	r0, [r6, #4]
 8007d78:	4659      	mov	r1, fp
 8007d7a:	6803      	ldr	r3, [r0, #0]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7e:	4798      	blx	r3
 8007d80:	4606      	mov	r6, r0
 8007d82:	4629      	mov	r1, r5
 8007d84:	f000 fe7c 	bl	8008a80 <_ZN19CalculatorPresenterC1ER14CalculatorView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8007d88:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007d8a:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8007d8e:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8007d90:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007d94:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8007d98:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007d9c:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8007d9e:	f8c6 a008 	str.w	sl, [r6, #8]
 8007da2:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8007da4:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8007da6:	4798      	blx	r3
    newPresenter->activate();
 8007da8:	6833      	ldr	r3, [r6, #0]
 8007daa:	4630      	mov	r0, r6
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007db0:	4621      	mov	r1, r4
 8007db2:	4628      	mov	r0, r5
 8007db4:	f014 fe42 	bl	801ca3c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	4620      	mov	r0, r4
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	4798      	blx	r3
    newTransition->invalidate();
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	695b      	ldr	r3, [r3, #20]
}
 8007dc6:	b001      	add	sp, #4
 8007dc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4718      	bx	r3
 8007dce:	bf00      	nop
 8007dd0:	0802cc50 	.word	0x0802cc50
 8007dd4:	0802ccde 	.word	0x0802ccde
 8007dd8:	0802cdb6 	.word	0x0802cdb6
 8007ddc:	0802ce0b 	.word	0x0802ce0b
 8007de0:	0802ceae 	.word	0x0802ceae
 8007de4:	0802d174 	.word	0x0802d174
 8007de8:	240285fc 	.word	0x240285fc
 8007dec:	240285f8 	.word	0x240285f8

08007df0 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv>:
{
 8007df0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<DiagnoseView, DiagnosePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007df4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8007df8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007dfa:	68b0      	ldr	r0, [r6, #8]
 8007dfc:	6803      	ldr	r3, [r0, #0]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	4798      	blx	r3
 8007e02:	f243 437b 	movw	r3, #13435	@ 0x347b
 8007e06:	4298      	cmp	r0, r3
 8007e08:	d805      	bhi.n	8007e16 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x26>
 8007e0a:	4b44      	ldr	r3, [pc, #272]	@ (8007f1c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x12c>)
 8007e0c:	21a3      	movs	r1, #163	@ 0xa3
 8007e0e:	4a44      	ldr	r2, [pc, #272]	@ (8007f20 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007e10:	4844      	ldr	r0, [pc, #272]	@ (8007f24 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x134>)
 8007e12:	f021 fc39 	bl	8029688 <__assert_func>
 8007e16:	6870      	ldr	r0, [r6, #4]
 8007e18:	6803      	ldr	r3, [r0, #0]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	4798      	blx	r3
 8007e1e:	280f      	cmp	r0, #15
 8007e20:	d803      	bhi.n	8007e2a <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x3a>
 8007e22:	4b41      	ldr	r3, [pc, #260]	@ (8007f28 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x138>)
 8007e24:	21a4      	movs	r1, #164	@ 0xa4
 8007e26:	4a3e      	ldr	r2, [pc, #248]	@ (8007f20 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 8007e28:	e7f2      	b.n	8007e10 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007e2a:	68f0      	ldr	r0, [r6, #12]
 8007e2c:	6803      	ldr	r3, [r0, #0]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	4798      	blx	r3
 8007e32:	280b      	cmp	r0, #11
 8007e34:	d803      	bhi.n	8007e3e <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x4e>
 8007e36:	4b3d      	ldr	r3, [pc, #244]	@ (8007f2c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x13c>)
 8007e38:	21a5      	movs	r1, #165	@ 0xa5
 8007e3a:	4a39      	ldr	r2, [pc, #228]	@ (8007f20 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x130>)
 8007e3c:	e7e8      	b.n	8007e10 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8007e3e:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8007f34 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8007e42:	f012 fce5 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8007e46:	3004      	adds	r0, #4
 8007e48:	f012 fd20 	bl	801a88c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8007e4c:	f8d9 0000 	ldr.w	r0, [r9]
 8007e50:	b110      	cbz	r0, 8007e58 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8007e52:	6803      	ldr	r3, [r0, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	4798      	blx	r3
    if (*currentTrans)
 8007e58:	f8d9 0000 	ldr.w	r0, [r9]
 8007e5c:	b110      	cbz	r0, 8007e64 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8007e5e:	6803      	ldr	r3, [r0, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4798      	blx	r3
    if (*currentScreen)
 8007e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8007f38 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x148>
 8007e68:	f8d8 0000 	ldr.w	r0, [r8]
 8007e6c:	b110      	cbz	r0, 8007e74 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8007e6e:	6803      	ldr	r3, [r0, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	4798      	blx	r3
    if (*currentPresenter)
 8007e74:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007e78:	b110      	cbz	r0, 8007e80 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8007e7a:	6803      	ldr	r3, [r0, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4798      	blx	r3
    if (*currentScreen)
 8007e80:	f8d8 0000 	ldr.w	r0, [r8]
 8007e84:	b110      	cbz	r0, 8007e8c <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8007e86:	6803      	ldr	r3, [r0, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4798      	blx	r3
    if (*currentPresenter)
 8007e8c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007e90:	b110      	cbz	r0, 8007e98 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8007e92:	6803      	ldr	r3, [r0, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f0      	ldr	r0, [r6, #12]
 8007e9c:	f7ff fefe 	bl	8007c9c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007ea0:	f04f 0b00 	mov.w	fp, #0
 8007ea4:	4b22      	ldr	r3, [pc, #136]	@ (8007f30 <_ZN23FrontendApplicationBase34gotoDiagnoseScreenNoTransitionImplEv+0x140>)
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	f8c0 b004 	str.w	fp, [r0, #4]
 8007eac:	4659      	mov	r1, fp
 8007eae:	f880 b008 	strb.w	fp, [r0, #8]
 8007eb2:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007eb4:	68b0      	ldr	r0, [r6, #8]
 8007eb6:	6803      	ldr	r3, [r0, #0]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eba:	4798      	blx	r3
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	f000 ff1f 	bl	8008d00 <_ZN12DiagnoseViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8007ec2:	6870      	ldr	r0, [r6, #4]
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	6803      	ldr	r3, [r0, #0]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	4798      	blx	r3
 8007ecc:	4606      	mov	r6, r0
 8007ece:	4629      	mov	r1, r5
 8007ed0:	f000 fef4 	bl	8008cbc <_ZN17DiagnosePresenterC1ER12DiagnoseView>
    model->bind(newPresenter);
 8007ed4:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8007ed6:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8007eda:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8007edc:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8007ee0:	f8c8 5000 	str.w	r5, [r8]
 8007ee4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	f8c6 a008 	str.w	sl, [r6, #8]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8007ef2:	4798      	blx	r3
    newPresenter->activate();
 8007ef4:	6833      	ldr	r3, [r6, #0]
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	f014 fd9c 	bl	801ca3c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	4620      	mov	r0, r4
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	4798      	blx	r3
    newTransition->invalidate();
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	695b      	ldr	r3, [r3, #20]
}
 8007f12:	b001      	add	sp, #4
 8007f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	4718      	bx	r3
 8007f1a:	bf00      	nop
 8007f1c:	0802cc50 	.word	0x0802cc50
 8007f20:	0802cf51 	.word	0x0802cf51
 8007f24:	0802cdb6 	.word	0x0802cdb6
 8007f28:	0802ce0b 	.word	0x0802ce0b
 8007f2c:	0802ceae 	.word	0x0802ceae
 8007f30:	0802d174 	.word	0x0802d174
 8007f34:	240285fc 	.word	0x240285fc
 8007f38:	240285f8 	.word	0x240285f8

08007f3c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv>:
{
 8007f3c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MainScreenView, MainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8007f40:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8007f44:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8007f46:	68b0      	ldr	r0, [r6, #8]
 8007f48:	6803      	ldr	r3, [r0, #0]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	4798      	blx	r3
 8007f4e:	f5b0 7f67 	cmp.w	r0, #924	@ 0x39c
 8007f52:	d205      	bcs.n	8007f60 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x24>
 8007f54:	4b43      	ldr	r3, [pc, #268]	@ (8008064 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x128>)
 8007f56:	21a3      	movs	r1, #163	@ 0xa3
 8007f58:	4a43      	ldr	r2, [pc, #268]	@ (8008068 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8007f5a:	4844      	ldr	r0, [pc, #272]	@ (800806c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x130>)
 8007f5c:	f021 fb94 	bl	8029688 <__assert_func>
 8007f60:	6870      	ldr	r0, [r6, #4]
 8007f62:	6803      	ldr	r3, [r0, #0]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	4798      	blx	r3
 8007f68:	280f      	cmp	r0, #15
 8007f6a:	d803      	bhi.n	8007f74 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x38>
 8007f6c:	4b40      	ldr	r3, [pc, #256]	@ (8008070 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x134>)
 8007f6e:	21a4      	movs	r1, #164	@ 0xa4
 8007f70:	4a3d      	ldr	r2, [pc, #244]	@ (8008068 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 8007f72:	e7f2      	b.n	8007f5a <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8007f74:	68f0      	ldr	r0, [r6, #12]
 8007f76:	6803      	ldr	r3, [r0, #0]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	4798      	blx	r3
 8007f7c:	280b      	cmp	r0, #11
 8007f7e:	d803      	bhi.n	8007f88 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x4c>
 8007f80:	4b3c      	ldr	r3, [pc, #240]	@ (8008074 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x138>)
 8007f82:	21a5      	movs	r1, #165	@ 0xa5
 8007f84:	4a38      	ldr	r2, [pc, #224]	@ (8008068 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x12c>)
 8007f86:	e7e8      	b.n	8007f5a <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8007f88:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800807c <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8007f8c:	f012 fc40 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8007f90:	3004      	adds	r0, #4
 8007f92:	f012 fc7b 	bl	801a88c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8007f96:	f8d9 0000 	ldr.w	r0, [r9]
 8007f9a:	b110      	cbz	r0, 8007fa2 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8007f9c:	6803      	ldr	r3, [r0, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	4798      	blx	r3
    if (*currentTrans)
 8007fa2:	f8d9 0000 	ldr.w	r0, [r9]
 8007fa6:	b110      	cbz	r0, 8007fae <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8007fa8:	6803      	ldr	r3, [r0, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4798      	blx	r3
    if (*currentScreen)
 8007fae:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8008080 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x144>
 8007fb2:	f8d8 0000 	ldr.w	r0, [r8]
 8007fb6:	b110      	cbz	r0, 8007fbe <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8007fb8:	6803      	ldr	r3, [r0, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	4798      	blx	r3
    if (*currentPresenter)
 8007fbe:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007fc2:	b110      	cbz	r0, 8007fca <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8007fc4:	6803      	ldr	r3, [r0, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	4798      	blx	r3
    if (*currentScreen)
 8007fca:	f8d8 0000 	ldr.w	r0, [r8]
 8007fce:	b110      	cbz	r0, 8007fd6 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8007fd0:	6803      	ldr	r3, [r0, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4798      	blx	r3
    if (*currentPresenter)
 8007fd6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007fda:	b110      	cbz	r0, 8007fe2 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8007fdc:	6803      	ldr	r3, [r0, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f0      	ldr	r0, [r6, #12]
 8007fe6:	f7ff fe59 	bl	8007c9c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8007fea:	f04f 0b00 	mov.w	fp, #0
 8007fee:	4b22      	ldr	r3, [pc, #136]	@ (8008078 <_ZN23FrontendApplicationBase36gotoMainScreenScreenNoTransitionImplEv+0x13c>)
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	f8c0 b004 	str.w	fp, [r0, #4]
 8007ff6:	4659      	mov	r1, fp
 8007ff8:	f880 b008 	strb.w	fp, [r0, #8]
 8007ffc:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8007ffe:	68b0      	ldr	r0, [r6, #8]
 8008000:	6803      	ldr	r3, [r0, #0]
 8008002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008004:	4798      	blx	r3
 8008006:	4605      	mov	r5, r0
 8008008:	f000 fed4 	bl	8008db4 <_ZN14MainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800800c:	6870      	ldr	r0, [r6, #4]
 800800e:	4659      	mov	r1, fp
 8008010:	6803      	ldr	r3, [r0, #0]
 8008012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008014:	4798      	blx	r3
 8008016:	4606      	mov	r6, r0
 8008018:	4629      	mov	r1, r5
 800801a:	f000 fea9 	bl	8008d70 <_ZN19MainScreenPresenterC1ER14MainScreenView>
    model->bind(newPresenter);
 800801e:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8008020:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8008024:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8008026:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800802a:	f8c8 5000 	str.w	r5, [r8]
 800802e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	f8c6 a008 	str.w	sl, [r6, #8]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800803c:	4798      	blx	r3
    newPresenter->activate();
 800803e:	6833      	ldr	r3, [r6, #0]
 8008040:	4630      	mov	r0, r6
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f014 fcf7 	bl	801ca3c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	4620      	mov	r0, r4
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	4798      	blx	r3
    newTransition->invalidate();
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	4620      	mov	r0, r4
 800805a:	695b      	ldr	r3, [r3, #20]
}
 800805c:	b001      	add	sp, #4
 800805e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008062:	4718      	bx	r3
 8008064:	0802cc50 	.word	0x0802cc50
 8008068:	0802d025 	.word	0x0802d025
 800806c:	0802cdb6 	.word	0x0802cdb6
 8008070:	0802ce0b 	.word	0x0802ce0b
 8008074:	0802ceae 	.word	0x0802ceae
 8008078:	0802d174 	.word	0x0802d174
 800807c:	240285fc 	.word	0x240285fc
 8008080:	240285f8 	.word	0x240285f8

08008084 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8008084:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8008086:	4770      	bx	lr

08008088 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8008088:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800808a:	4770      	bx	lr

0800808c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800808c:	4770      	bx	lr

0800808e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800808e:	888b      	ldrh	r3, [r1, #4]
 8008090:	69c0      	ldr	r0, [r0, #28]
 8008092:	0adb      	lsrs	r3, r3, #11
 8008094:	680a      	ldr	r2, [r1, #0]
 8008096:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800809a:	4410      	add	r0, r2
 800809c:	4770      	bx	lr

0800809e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800809e:	b510      	push	{r4, lr}
 80080a0:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80080a2:	b1ba      	cbz	r2, 80080d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80080a4:	7b10      	ldrb	r0, [r2, #12]
 80080a6:	b168      	cbz	r0, 80080c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80080a8:	7b53      	ldrb	r3, [r2, #13]
 80080aa:	7ad2      	ldrb	r2, [r2, #11]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80080b2:	431a      	orrs	r2, r3
 80080b4:	6a23      	ldr	r3, [r4, #32]
 80080b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80080ba:	881a      	ldrh	r2, [r3, #0]
 80080bc:	428a      	cmp	r2, r1
 80080be:	d102      	bne.n	80080c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80080c0:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80080c4:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80080c6:	d805      	bhi.n	80080d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80080c8:	3801      	subs	r0, #1
 80080ca:	3304      	adds	r3, #4
 80080cc:	b280      	uxth	r0, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d1f3      	bne.n	80080ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80080d2:	e7f7      	b.n	80080c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80080d4:	2000      	movs	r0, #0
 80080d6:	e7f5      	b.n	80080c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080080d8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	4604      	mov	r4, r0
 80080dc:	212c      	movs	r1, #44	@ 0x2c
 80080de:	f020 ff5b 	bl	8028f98 <_ZdlPvj>
 80080e2:	4620      	mov	r0, r4
 80080e4:	bd10      	pop	{r4, pc}
	...

080080e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80080e8:	b530      	push	{r4, r5, lr}
 80080ea:	b08b      	sub	sp, #44	@ 0x2c
 80080ec:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80080ee:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 80080f2:	9508      	str	r5, [sp, #32]
 80080f4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80080f8:	9507      	str	r5, [sp, #28]
 80080fa:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80080fe:	9506      	str	r5, [sp, #24]
 8008100:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8008104:	9505      	str	r5, [sp, #20]
 8008106:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800810a:	9504      	str	r5, [sp, #16]
 800810c:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8008110:	9503      	str	r5, [sp, #12]
 8008112:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8008116:	9502      	str	r5, [sp, #8]
 8008118:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800811c:	9501      	str	r5, [sp, #4]
 800811e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8008122:	9500      	str	r5, [sp, #0]
 8008124:	f014 f808 	bl	801c138 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008128:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800812a:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800812c:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800812e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008130:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8008132:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008134:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8008136:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008138:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800813a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800813c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800813e:	b00b      	add	sp, #44	@ 0x2c
 8008140:	bd30      	pop	{r4, r5, pc}
 8008142:	bf00      	nop
 8008144:	0802d198 	.word	0x0802d198

08008148 <_ZN18MainScreenViewBaseD1Ev>:
}

MainScreenViewBase::~MainScreenViewBase()
{

}
 8008148:	4770      	bx	lr

0800814a <_ZN18MainScreenViewBase11setupScreenEv>:

void MainScreenViewBase::setupScreen()
{

}
 800814a:	4770      	bx	lr

0800814c <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800814c:	4770      	bx	lr

0800814e <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800814e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8008150:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008152:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8008154:	68c2      	ldr	r2, [r0, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	1055      	asrs	r5, r2, #1
 800815a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800815e:	07d2      	lsls	r2, r2, #31
 8008160:	bf48      	it	mi
 8008162:	5962      	ldrmi	r2, [r4, r5]
    }
 8008164:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8008166:	bf48      	it	mi
 8008168:	58d3      	ldrmi	r3, [r2, r3]
 800816a:	4718      	bx	r3

0800816c <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800816c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800816e:	6840      	ldr	r0, [r0, #4]
 8008170:	b130      	cbz	r0, 8008180 <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	b91a      	cbnz	r2, 800817e <_ZNK8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8008176:	68d8      	ldr	r0, [r3, #12]
 8008178:	f000 0001 	and.w	r0, r0, #1
 800817c:	4770      	bx	lr
 800817e:	2001      	movs	r0, #1
    }
 8008180:	4770      	bx	lr

08008182 <_ZN8touchgfx8CallbackI18MainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008182:	b510      	push	{r4, lr}
 8008184:	4604      	mov	r4, r0
 8008186:	2110      	movs	r1, #16
 8008188:	f020 ff06 	bl	8028f98 <_ZdlPvj>
 800818c:	4620      	mov	r0, r4
 800818e:	bd10      	pop	{r4, pc}

08008190 <_ZN18MainScreenViewBaseD0Ev>:
MainScreenViewBase::~MainScreenViewBase()
 8008190:	b510      	push	{r4, lr}
 8008192:	4604      	mov	r4, r0
}
 8008194:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8008198:	f020 fefe 	bl	8028f98 <_ZdlPvj>
 800819c:	4620      	mov	r0, r4
 800819e:	bd10      	pop	{r4, pc}

080081a0 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80081a0:	b538      	push	{r3, r4, r5, lr}
    if (&src == &SwitchToDiagnose)
 80081a2:	f500 7314 	add.w	r3, r0, #592	@ 0x250
{
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
    if (&src == &SwitchToDiagnose)
 80081aa:	4299      	cmp	r1, r3
 80081ac:	d103      	bne.n	80081b6 <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~MainScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80081ae:	f012 fb2f 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //SwitchToDiagnose
        //When SwitchToDiagnose clicked change screen to Diagnose
        //Go to Diagnose with no screen transition
        application().gotoDiagnoseScreenNoTransition();
 80081b2:	f7ff fd53 	bl	8007c5c <_ZN23FrontendApplicationBase30gotoDiagnoseScreenNoTransitionEv>
    }
    if (&src == &SwitchToCalculator)
 80081b6:	f504 742c 	add.w	r4, r4, #688	@ 0x2b0
 80081ba:	42a5      	cmp	r5, r4
 80081bc:	d105      	bne.n	80081ca <_ZN18MainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>
 80081be:	f012 fb27 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When SwitchToCalculator clicked change screen to Calculator
        //Go to Calculator with no screen transition
        application().gotoCalculatorScreenNoTransition();
    }
}
 80081c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotoCalculatorScreenNoTransition();
 80081c6:	f7ff bd59 	b.w	8007c7c <_ZN23FrontendApplicationBase32gotoCalculatorScreenNoTransitionEv>
}
 80081ca:	bd38      	pop	{r3, r4, r5, pc}

080081cc <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80081cc:	b510      	push	{r4, lr}
 80081ce:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80081d0:	2226      	movs	r2, #38	@ 0x26
 80081d2:	2100      	movs	r1, #0
 80081d4:	f021 fe0c 	bl	8029df0 <memset>
 80081d8:	4620      	mov	r0, r4
 80081da:	f7fb ffcd 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 80081de:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 80081e0:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 80081e4:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	4b08      	ldr	r3, [pc, #32]	@ (800820c <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 80081ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081f0:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80081f2:	2300      	movs	r3, #0
 80081f4:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 80081f8:	f04f 32ff 	mov.w	r2, #4294967295
 80081fc:	8723      	strh	r3, [r4, #56]	@ 0x38
 80081fe:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8008200:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 8008204:	bd10      	pop	{r4, pc}
 8008206:	bf00      	nop
 8008208:	0802e258 	.word	0x0802e258
 800820c:	0802c798 	.word	0x0802c798

08008210 <_ZN8touchgfx6ButtonC1Ev>:
    Button()
 8008210:	b510      	push	{r4, lr}
 8008212:	4604      	mov	r4, r0
        : Widget(), action(), pressed(false)
 8008214:	2226      	movs	r2, #38	@ 0x26
 8008216:	2100      	movs	r1, #0
 8008218:	f021 fdea 	bl	8029df0 <memset>
 800821c:	4620      	mov	r0, r4
 800821e:	f7fb ffab 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 8008222:	2300      	movs	r3, #0
    {
    }
 8008224:	4620      	mov	r0, r4
 8008226:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008228:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800822c:	2301      	movs	r3, #1
 800822e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        : AbstractButton(), up(), down(), alpha(255)
 8008232:	4b04      	ldr	r3, [pc, #16]	@ (8008244 <_ZN8touchgfx6ButtonC1Ev+0x34>)
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800823a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800823c:	8623      	strh	r3, [r4, #48]	@ 0x30
 800823e:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
    }
 8008242:	bd10      	pop	{r4, pc}
 8008244:	0802e350 	.word	0x0802e350

08008248 <_ZN18MainScreenViewBaseC1Ev>:
MainScreenViewBase::MainScreenViewBase() :
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	4604      	mov	r4, r0
 800824e:	b093      	sub	sp, #76	@ 0x4c
        : presenter(0)
 8008250:	2500      	movs	r5, #0
 8008252:	f014 fa47 	bl	801c6e4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler)
 8008256:	46a0      	mov	r8, r4
 8008258:	4bde      	ldr	r3, [pc, #888]	@ (80085d4 <_ZN18MainScreenViewBaseC1Ev+0x38c>)
        : Widget(), alpha(255), color(0)
 800825a:	2226      	movs	r2, #38	@ 0x26
 800825c:	4629      	mov	r1, r5
 800825e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8008260:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8008264:	f848 3b40 	str.w	r3, [r8], #64
 8008268:	4640      	mov	r0, r8
 800826a:	f021 fdc1 	bl	8029df0 <memset>
 800826e:	4640      	mov	r0, r8
 8008270:	f7fb ff82 	bl	8004178 <_ZN8touchgfx6WidgetC1Ev>
 8008274:	4bd8      	ldr	r3, [pc, #864]	@ (80085d8 <_ZN18MainScreenViewBaseC1Ev+0x390>)
 8008276:	f104 0698 	add.w	r6, r4, #152	@ 0x98
 800827a:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800827e:	6423      	str	r3, [r4, #64]	@ 0x40
 8008280:	23ff      	movs	r3, #255	@ 0xff
 8008282:	a910      	add	r1, sp, #64	@ 0x40
 8008284:	f504 7b98 	add.w	fp, r4, #304	@ 0x130
 8008288:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 800828c:	4648      	mov	r0, r9
        : color(col)
 800828e:	66a5      	str	r5, [r4, #104]	@ 0x68
 8008290:	f504 7abc 	add.w	sl, r4, #376	@ 0x178
 8008294:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8008298:	f00e ff24 	bl	80170e4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 800829c:	4630      	mov	r0, r6
 800829e:	f00a fc05 	bl	8012aac <_ZN8touchgfx12DigitalClockC1Ev>
 80082a2:	4658      	mov	r0, fp
 80082a4:	f7ff ff92 	bl	80081cc <_ZN8touchgfx8TextAreaC1Ev>
 80082a8:	4650      	mov	r0, sl
 80082aa:	f7ff ff8f 	bl	80081cc <_ZN8touchgfx8TextAreaC1Ev>
 80082ae:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 80082b2:	4618      	mov	r0, r3
 80082b4:	9302      	str	r3, [sp, #8]
 80082b6:	f7ff ff89 	bl	80081cc <_ZN8touchgfx8TextAreaC1Ev>
 80082ba:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 80082be:	4618      	mov	r0, r3
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	f7ff ff83 	bl	80081cc <_ZN8touchgfx8TextAreaC1Ev>
 80082c6:	f504 7314 	add.w	r3, r4, #592	@ 0x250
 80082ca:	4618      	mov	r0, r3
 80082cc:	9307      	str	r3, [sp, #28]
 80082ce:	f7ff ff9f 	bl	8008210 <_ZN8touchgfx6ButtonC1Ev>
 80082d2:	f504 7321 	add.w	r3, r4, #644	@ 0x284
 80082d6:	a910      	add	r1, sp, #64	@ 0x40
 80082d8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80082dc:	4618      	mov	r0, r3
 80082de:	9304      	str	r3, [sp, #16]
 80082e0:	f00e ff00 	bl	80170e4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80082e4:	f504 732c 	add.w	r3, r4, #688	@ 0x2b0
 80082e8:	4618      	mov	r0, r3
 80082ea:	9308      	str	r3, [sp, #32]
 80082ec:	f7ff ff90 	bl	8008210 <_ZN8touchgfx6ButtonC1Ev>
 80082f0:	f504 7339 	add.w	r3, r4, #740	@ 0x2e4
 80082f4:	4618      	mov	r0, r3
 80082f6:	9305      	str	r3, [sp, #20]
 80082f8:	f7ff ff68 	bl	80081cc <_ZN8touchgfx8TextAreaC1Ev>
 80082fc:	f504 734b 	add.w	r3, r4, #812	@ 0x32c
 8008300:	a910      	add	r1, sp, #64	@ 0x40
 8008302:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8008306:	4618      	mov	r0, r3
 8008308:	9306      	str	r3, [sp, #24]
 800830a:	f00e feeb 	bl	80170e4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 800830e:	f504 7356 	add.w	r3, r4, #856	@ 0x358
 8008312:	1d27      	adds	r7, r4, #4
 8008314:	4618      	mov	r0, r3
 8008316:	9309      	str	r3, [sp, #36]	@ 0x24
 8008318:	f7ff ff7a 	bl	8008210 <_ZN8touchgfx6ButtonC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 800831c:	4baf      	ldr	r3, [pc, #700]	@ (80085dc <_ZN18MainScreenViewBaseC1Ev+0x394>)
    __background.setPosition(0, 0, 800, 480);
 800831e:	462a      	mov	r2, r5
 8008320:	4629      	mov	r1, r5
 8008322:	4640      	mov	r0, r8
 8008324:	e9c4 34e3 	strd	r3, r4, [r4, #908]	@ 0x38c
 8008328:	4bad      	ldr	r3, [pc, #692]	@ (80085e0 <_ZN18MainScreenViewBaseC1Ev+0x398>)
 800832a:	e9c4 35e5 	strd	r3, r5, [r4, #916]	@ 0x394
 800832e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8008338:	f7fb ff0b 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800833c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8008340:	4641      	mov	r1, r8
 8008342:	4638      	mov	r0, r7
 8008344:	66a3      	str	r3, [r4, #104]	@ 0x68
 8008346:	f00a fc73 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800834a:	230c      	movs	r3, #12
    DiagnoseIcon.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_CROPPED_ID));
 800834c:	a910      	add	r1, sp, #64	@ 0x40
 800834e:	4648      	mov	r0, r9
 8008350:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008354:	f00f fda1 	bl	8017e9a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    DiagnoseIcon.setPosition(56, 112, 164, 164);
 8008358:	23a4      	movs	r3, #164	@ 0xa4
 800835a:	2270      	movs	r2, #112	@ 0x70
 800835c:	4648      	mov	r0, r9
 800835e:	2138      	movs	r1, #56	@ 0x38
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	f7fb fef6 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    DiagnoseIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8008366:	4629      	mov	r1, r5
 8008368:	4648      	mov	r0, r9
 800836a:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 80085e4 <_ZN18MainScreenViewBaseC1Ev+0x39c>
 800836e:	f00e fe74 	bl	801705a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008372:	4649      	mov	r1, r9
 8008374:	4638      	mov	r0, r7
 8008376:	f8df 9270 	ldr.w	r9, [pc, #624]	@ 80085e8 <_ZN18MainScreenViewBaseC1Ev+0x3a0>
 800837a:	f00a fc59 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainScreenClock.setPosition(597, 18, 187, 51);
 800837e:	2333      	movs	r3, #51	@ 0x33
 8008380:	2212      	movs	r2, #18
 8008382:	4630      	mov	r0, r6
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	f240 2155 	movw	r1, #597	@ 0x255
 800838a:	23bb      	movs	r3, #187	@ 0xbb
 800838c:	f7fb fee1 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    MainScreenClock.setColor(touchgfx::Color::getColorFromRGB(163, 186, 255));
 8008390:	4649      	mov	r1, r9
 8008392:	4630      	mov	r0, r6
 8008394:	f00a fac8 	bl	8012928 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
 8008398:	231d      	movs	r3, #29
    MainScreenClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NI1A));
 800839a:	a910      	add	r1, sp, #64	@ 0x40
 800839c:	4630      	mov	r0, r6
 800839e:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80083a2:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80083a6:	f00a fad2 	bl	801294e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    MainScreenClock.displayLeadingZeroForHourIndicator(true);
 80083aa:	4630      	mov	r0, r6
 80083ac:	2101      	movs	r1, #1
 80083ae:	f00a fbcb 	bl	8012b48 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    MainScreenClock.setTime24Hour(10, 10, 0);
 80083b2:	220a      	movs	r2, #10
 80083b4:	2303      	movs	r3, #3
 80083b6:	4630      	mov	r0, r6
 80083b8:	4611      	mov	r1, r2
 80083ba:	f884 30c7 	strb.w	r3, [r4, #199]	@ 0xc7
 80083be:	462b      	mov	r3, r5
 80083c0:	f00a fbc5 	bl	8012b4e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
 80083c4:	4631      	mov	r1, r6
 80083c6:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 80083c8:	ae0a      	add	r6, sp, #40	@ 0x28
 80083ca:	f00a fc31 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Diagnose.setPosition(81, 286, 114, 33);
 80083ce:	2321      	movs	r3, #33	@ 0x21
 80083d0:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 80083d4:	4658      	mov	r0, fp
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	2151      	movs	r1, #81	@ 0x51
 80083da:	2372      	movs	r3, #114	@ 0x72
 80083dc:	f7fb feb9 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 80083e0:	4659      	mov	r1, fp
 80083e2:	4630      	mov	r0, r6
        color = newColor;
 80083e4:	f8c4 9160 	str.w	r9, [r4, #352]	@ 0x160
        linespace = space;
 80083e8:	f8a4 5164 	strh.w	r5, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 80083ec:	f00f f924 	bl	8017638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80083f0:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 80083f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80083f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083fc:	2319      	movs	r3, #25
    Text_Diagnose.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6UML));
 80083fe:	a910      	add	r1, sp, #64	@ 0x40
 8008400:	4658      	mov	r0, fp
 8008402:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008406:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800840a:	f00f fbaf 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800840e:	4659      	mov	r1, fp
    Text_Calculator.setPosition(317, 289, 114, 26);
 8008410:	f04f 0b1a 	mov.w	fp, #26
 8008414:	4638      	mov	r0, r7
 8008416:	f00a fc0b 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800841a:	2372      	movs	r3, #114	@ 0x72
 800841c:	f240 1221 	movw	r2, #289	@ 0x121
 8008420:	4650      	mov	r0, sl
 8008422:	f240 113d 	movw	r1, #317	@ 0x13d
 8008426:	f8cd b000 	str.w	fp, [sp]
 800842a:	f7fb fe92 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 800842e:	4651      	mov	r1, sl
 8008430:	4630      	mov	r0, r6
        color = newColor;
 8008432:	f8c4 91a8 	str.w	r9, [r4, #424]	@ 0x1a8
        linespace = space;
 8008436:	f8a4 51ac 	strh.w	r5, [r4, #428]	@ 0x1ac
        boundingArea = calculateBoundingArea();
 800843a:	f00f f8fd 	bl	8017638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800843e:	f504 73da 	add.w	r3, r4, #436	@ 0x1b4
 8008442:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008446:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800844a:	2304      	movs	r3, #4
    Text_Calculator.setTypedText(touchgfx::TypedText(T___SINGLEUSE_10PZ));
 800844c:	a910      	add	r1, sp, #64	@ 0x40
 800844e:	4650      	mov	r0, sl
 8008450:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8008454:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008458:	f00f fb88 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800845c:	4651      	mov	r1, sl
 800845e:	4638      	mov	r0, r7
 8008460:	f00a fbe6 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Manipulator.setPosition(530, 289, 134, 26);
 8008464:	2386      	movs	r3, #134	@ 0x86
 8008466:	f240 1221 	movw	r2, #289	@ 0x121
 800846a:	9802      	ldr	r0, [sp, #8]
 800846c:	f240 2112 	movw	r1, #530	@ 0x212
 8008470:	f8cd b000 	str.w	fp, [sp]
 8008474:	f7fb fe6d 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8008478:	9902      	ldr	r1, [sp, #8]
 800847a:	4630      	mov	r0, r6
        color = newColor;
 800847c:	f8c4 91f0 	str.w	r9, [r4, #496]	@ 0x1f0
        linespace = space;
 8008480:	f8a4 51f4 	strh.w	r5, [r4, #500]	@ 0x1f4
    SwitchToDiagnose.setAction(buttonCallback);
 8008484:	f504 7a63 	add.w	sl, r4, #908	@ 0x38c
        boundingArea = calculateBoundingArea();
 8008488:	f00f f8d6 	bl	8017638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800848c:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
 8008490:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008494:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Text_Manipulator.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CDWB));
 8008498:	a910      	add	r1, sp, #64	@ 0x40
 800849a:	9802      	ldr	r0, [sp, #8]
 800849c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80084a0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80084a4:	f00f fb62 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80084a8:	9902      	ldr	r1, [sp, #8]
 80084aa:	4638      	mov	r0, r7
 80084ac:	f00a fbc0 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MainTitle.setPosition(47, 18, 384, 51);
 80084b0:	2333      	movs	r3, #51	@ 0x33
 80084b2:	2212      	movs	r2, #18
 80084b4:	9803      	ldr	r0, [sp, #12]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	212f      	movs	r1, #47	@ 0x2f
 80084ba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80084be:	f7fb fe48 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 80084c2:	9903      	ldr	r1, [sp, #12]
 80084c4:	4630      	mov	r0, r6
        color = newColor;
 80084c6:	f8c4 9238 	str.w	r9, [r4, #568]	@ 0x238
        linespace = space;
 80084ca:	f8a4 523c 	strh.w	r5, [r4, #572]	@ 0x23c
        boundingArea = calculateBoundingArea();
 80084ce:	f00f f8b3 	bl	8017638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80084d2:	f504 7311 	add.w	r3, r4, #580	@ 0x244
 80084d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80084da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    MainTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HFBR));
 80084de:	a910      	add	r1, sp, #64	@ 0x40
 80084e0:	9803      	ldr	r0, [sp, #12]
 80084e2:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80084e6:	f8ad b044 	strh.w	fp, [sp, #68]	@ 0x44
 80084ea:	f00f fb3f 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80084ee:	9903      	ldr	r1, [sp, #12]
 80084f0:	4638      	mov	r0, r7
 80084f2:	f00a fb9d 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToDiagnose.setXY(50, 107);
 80084f6:	9807      	ldr	r0, [sp, #28]
 80084f8:	226b      	movs	r2, #107	@ 0x6b
 80084fa:	2132      	movs	r1, #50	@ 0x32
 80084fc:	f7fb fe1c 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToDiagnose.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008500:	aa10      	add	r2, sp, #64	@ 0x40
 8008502:	a90f      	add	r1, sp, #60	@ 0x3c
 8008504:	9807      	ldr	r0, [sp, #28]
 8008506:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 800850a:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 800850e:	f00f fb8b 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008512:	9907      	ldr	r1, [sp, #28]
 8008514:	4638      	mov	r0, r7
        action = &callback;
 8008516:	f8c4 a278 	str.w	sl, [r4, #632]	@ 0x278
 800851a:	f00a fb89 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800851e:	2306      	movs	r3, #6
    CalculatorIcon.setBitmap(touchgfx::Bitmap(BITMAP_CALCULATOR_LOGO_ID));
 8008520:	a910      	add	r1, sp, #64	@ 0x40
 8008522:	9804      	ldr	r0, [sp, #16]
 8008524:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8008528:	f00f fcb7 	bl	8017e9a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    CalculatorIcon.setPosition(289, 112, 164, 164);
 800852c:	23a4      	movs	r3, #164	@ 0xa4
 800852e:	2270      	movs	r2, #112	@ 0x70
 8008530:	9804      	ldr	r0, [sp, #16]
 8008532:	f240 1121 	movw	r1, #289	@ 0x121
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	f7fb fe0b 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    CalculatorIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800853c:	4629      	mov	r1, r5
 800853e:	9804      	ldr	r0, [sp, #16]
 8008540:	f00e fd8b 	bl	801705a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008544:	9904      	ldr	r1, [sp, #16]
 8008546:	4638      	mov	r0, r7
 8008548:	f00a fb72 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToCalculator.setXY(283, 107);
 800854c:	9808      	ldr	r0, [sp, #32]
 800854e:	226b      	movs	r2, #107	@ 0x6b
 8008550:	f240 111b 	movw	r1, #283	@ 0x11b
 8008554:	f7fb fdf0 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToCalculator.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008558:	aa10      	add	r2, sp, #64	@ 0x40
 800855a:	a90f      	add	r1, sp, #60	@ 0x3c
 800855c:	9808      	ldr	r0, [sp, #32]
 800855e:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 8008562:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8008566:	f00f fb5f 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800856a:	9908      	ldr	r1, [sp, #32]
 800856c:	4638      	mov	r0, r7
 800856e:	f8c4 a2d8 	str.w	sl, [r4, #728]	@ 0x2d8
 8008572:	f00a fb5d 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Text_Temperature.setPosition(463, 18, 101, 51);
 8008576:	2333      	movs	r3, #51	@ 0x33
 8008578:	2212      	movs	r2, #18
 800857a:	9805      	ldr	r0, [sp, #20]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8008582:	2365      	movs	r3, #101	@ 0x65
 8008584:	f7fb fde5 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8008588:	9905      	ldr	r1, [sp, #20]
 800858a:	4630      	mov	r0, r6
        color = newColor;
 800858c:	f8c4 9314 	str.w	r9, [r4, #788]	@ 0x314
        linespace = space;
 8008590:	f8a4 5318 	strh.w	r5, [r4, #792]	@ 0x318
        boundingArea = calculateBoundingArea();
 8008594:	f00f f850 	bl	8017638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008598:	f504 7348 	add.w	r3, r4, #800	@ 0x320
 800859c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80085a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80085a4:	2301      	movs	r3, #1
    Text_Temperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EH0R));
 80085a6:	a910      	add	r1, sp, #64	@ 0x40
 80085a8:	9805      	ldr	r0, [sp, #20]
 80085aa:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80085ae:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 80085b2:	f00f fadb 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80085b6:	9905      	ldr	r1, [sp, #20]
 80085b8:	4638      	mov	r0, r7
 80085ba:	f00a fb39 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80085be:	230d      	movs	r3, #13
    ManipulatorIcon.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_MANIPULATOR_ID));
 80085c0:	a910      	add	r1, sp, #64	@ 0x40
 80085c2:	9806      	ldr	r0, [sp, #24]
 80085c4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80085c8:	f00f fc67 	bl	8017e9a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    ManipulatorIcon.setPosition(513, 112, 169, 164);
 80085cc:	23a4      	movs	r3, #164	@ 0xa4
 80085ce:	2270      	movs	r2, #112	@ 0x70
 80085d0:	e00c      	b.n	80085ec <_ZN18MainScreenViewBaseC1Ev+0x3a4>
 80085d2:	bf00      	nop
 80085d4:	0802d218 	.word	0x0802d218
 80085d8:	0802e2e8 	.word	0x0802e2e8
 80085dc:	0802d200 	.word	0x0802d200
 80085e0:	080081a1 	.word	0x080081a1
 80085e4:	0802c798 	.word	0x0802c798
 80085e8:	ffa3baff 	.word	0xffa3baff
 80085ec:	9806      	ldr	r0, [sp, #24]
 80085ee:	f240 2101 	movw	r1, #513	@ 0x201
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	23a9      	movs	r3, #169	@ 0xa9
 80085f6:	f7fb fdac 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
    ManipulatorIcon.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80085fa:	4629      	mov	r1, r5
 80085fc:	9806      	ldr	r0, [sp, #24]
 80085fe:	f00e fd2c 	bl	801705a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8008602:	9906      	ldr	r1, [sp, #24]
 8008604:	4638      	mov	r0, r7
 8008606:	f00a fb13 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    SwitchToManipulator.setXY(509, 107);
 800860a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800860c:	226b      	movs	r2, #107	@ 0x6b
 800860e:	f240 11fd 	movw	r1, #509	@ 0x1fd
 8008612:	f7fb fd91 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
    SwitchToManipulator.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_LARGE_OUTLINE_DISABLED_ID));
 8008616:	aa10      	add	r2, sp, #64	@ 0x40
 8008618:	a90f      	add	r1, sp, #60	@ 0x3c
 800861a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800861c:	f8ad 503c 	strh.w	r5, [sp, #60]	@ 0x3c
 8008620:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8008624:	f00f fb00 	bl	8017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008628:	4638      	mov	r0, r7
 800862a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800862c:	f00a fb00 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008630:	4620      	mov	r0, r4
 8008632:	b013      	add	sp, #76	@ 0x4c
 8008634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008638 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008638:	4770      	bx	lr
	...

0800863c <_Z23getFont_verdana_10_4bppv>:
{
 800863c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800863e:	4d17      	ldr	r5, [pc, #92]	@ (800869c <_Z23getFont_verdana_10_4bppv+0x60>)
{
 8008640:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 191, 12, 10, 1, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8008642:	682c      	ldr	r4, [r5, #0]
 8008644:	f3bf 8f5b 	dmb	ish
 8008648:	f014 0401 	ands.w	r4, r4, #1
 800864c:	d122      	bne.n	8008694 <_Z23getFont_verdana_10_4bppv+0x58>
 800864e:	4628      	mov	r0, r5
 8008650:	f020 fca4 	bl	8028f9c <__cxa_guard_acquire>
 8008654:	b1f0      	cbz	r0, 8008694 <_Z23getFont_verdana_10_4bppv+0x58>
 8008656:	233f      	movs	r3, #63	@ 0x3f
 8008658:	2204      	movs	r2, #4
 800865a:	4911      	ldr	r1, [pc, #68]	@ (80086a0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800865c:	9309      	str	r3, [sp, #36]	@ 0x24
 800865e:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8008660:	4811      	ldr	r0, [pc, #68]	@ (80086a8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8008662:	9308      	str	r3, [sp, #32]
 8008664:	4b11      	ldr	r3, [pc, #68]	@ (80086ac <_Z23getFont_verdana_10_4bppv+0x70>)
 8008666:	940a      	str	r4, [sp, #40]	@ 0x28
 8008668:	9307      	str	r3, [sp, #28]
 800866a:	2301      	movs	r3, #1
 800866c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	230a      	movs	r3, #10
 8008676:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	22bf      	movs	r2, #191	@ 0xbf
 800867e:	230c      	movs	r3, #12
 8008680:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008684:	f7ff fd30 	bl	80080e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008688:	4809      	ldr	r0, [pc, #36]	@ (80086b0 <_Z23getFont_verdana_10_4bppv+0x74>)
 800868a:	f021 f81b 	bl	80296c4 <atexit>
 800868e:	4628      	mov	r0, r5
 8008690:	f020 fc90 	bl	8028fb4 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8008694:	4804      	ldr	r0, [pc, #16]	@ (80086a8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8008696:	b00f      	add	sp, #60	@ 0x3c
 8008698:	bd30      	pop	{r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	2400e494 	.word	0x2400e494
 80086a0:	08046b18 	.word	0x08046b18
 80086a4:	080494f8 	.word	0x080494f8
 80086a8:	2400e498 	.word	0x2400e498
 80086ac:	08049dc0 	.word	0x08049dc0
 80086b0:	08008639 	.word	0x08008639

080086b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80086b4:	4770      	bx	lr
	...

080086b8 <_Z23getFont_verdana_20_4bppv>:
{
 80086b8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80086ba:	4d17      	ldr	r5, [pc, #92]	@ (8008718 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 80086bc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 191, 25, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80086be:	682c      	ldr	r4, [r5, #0]
 80086c0:	f3bf 8f5b 	dmb	ish
 80086c4:	f014 0401 	ands.w	r4, r4, #1
 80086c8:	d122      	bne.n	8008710 <_Z23getFont_verdana_20_4bppv+0x58>
 80086ca:	4628      	mov	r0, r5
 80086cc:	f020 fc66 	bl	8028f9c <__cxa_guard_acquire>
 80086d0:	b1f0      	cbz	r0, 8008710 <_Z23getFont_verdana_20_4bppv+0x58>
 80086d2:	233f      	movs	r3, #63	@ 0x3f
 80086d4:	22bf      	movs	r2, #191	@ 0xbf
 80086d6:	4911      	ldr	r1, [pc, #68]	@ (800871c <_Z23getFont_verdana_20_4bppv+0x64>)
 80086d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086da:	4b11      	ldr	r3, [pc, #68]	@ (8008720 <_Z23getFont_verdana_20_4bppv+0x68>)
 80086dc:	4811      	ldr	r0, [pc, #68]	@ (8008724 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80086de:	9308      	str	r3, [sp, #32]
 80086e0:	4b11      	ldr	r3, [pc, #68]	@ (8008728 <_Z23getFont_verdana_20_4bppv+0x70>)
 80086e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80086e4:	9307      	str	r3, [sp, #28]
 80086e6:	2301      	movs	r3, #1
 80086e8:	9401      	str	r4, [sp, #4]
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80086f0:	2304      	movs	r3, #4
 80086f2:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80086f6:	2314      	movs	r3, #20
 80086f8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	2319      	movs	r3, #25
 8008700:	f7ff fcf2 	bl	80080e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008704:	4809      	ldr	r0, [pc, #36]	@ (800872c <_Z23getFont_verdana_20_4bppv+0x74>)
 8008706:	f020 ffdd 	bl	80296c4 <atexit>
 800870a:	4628      	mov	r0, r5
 800870c:	f020 fc52 	bl	8028fb4 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8008710:	4804      	ldr	r0, [pc, #16]	@ (8008724 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8008712:	b00f      	add	sp, #60	@ 0x3c
 8008714:	bd30      	pop	{r4, r5, pc}
 8008716:	bf00      	nop
 8008718:	2400e4c4 	.word	0x2400e4c4
 800871c:	0804758c 	.word	0x0804758c
 8008720:	0804952c 	.word	0x0804952c
 8008724:	2400e4c8 	.word	0x2400e4c8
 8008728:	08049dc4 	.word	0x08049dc4
 800872c:	080086b5 	.word	0x080086b5

08008730 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_21_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_21_4bpp();

touchgfx::GeneratedFont& getFont_verdana_21_4bpp()
{
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 8008730:	4770      	bx	lr
	...

08008734 <_Z23getFont_verdana_21_4bppv>:
{
 8008734:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 8008736:	4d17      	ldr	r5, [pc, #92]	@ (8008794 <_Z23getFont_verdana_21_4bppv+0x60>)
{
 8008738:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_21_4bpp(glyphs_verdana_21_4bpp, 191, 25, 21, 1, 0, 4, 1, 1, 2, unicodes_verdana_21_4bpp, kerning_verdana_21_4bpp, 63, 0, 0, 0);
 800873a:	682c      	ldr	r4, [r5, #0]
 800873c:	f3bf 8f5b 	dmb	ish
 8008740:	f014 0401 	ands.w	r4, r4, #1
 8008744:	d123      	bne.n	800878e <_Z23getFont_verdana_21_4bppv+0x5a>
 8008746:	4628      	mov	r0, r5
 8008748:	f020 fc28 	bl	8028f9c <__cxa_guard_acquire>
 800874c:	b1f8      	cbz	r0, 800878e <_Z23getFont_verdana_21_4bppv+0x5a>
 800874e:	233f      	movs	r3, #63	@ 0x3f
 8008750:	2202      	movs	r2, #2
 8008752:	4911      	ldr	r1, [pc, #68]	@ (8008798 <_Z23getFont_verdana_21_4bppv+0x64>)
 8008754:	9309      	str	r3, [sp, #36]	@ 0x24
 8008756:	4b11      	ldr	r3, [pc, #68]	@ (800879c <_Z23getFont_verdana_21_4bppv+0x68>)
 8008758:	4811      	ldr	r0, [pc, #68]	@ (80087a0 <_Z23getFont_verdana_21_4bppv+0x6c>)
 800875a:	9308      	str	r3, [sp, #32]
 800875c:	4b11      	ldr	r3, [pc, #68]	@ (80087a4 <_Z23getFont_verdana_21_4bppv+0x70>)
 800875e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008760:	9307      	str	r3, [sp, #28]
 8008762:	2301      	movs	r3, #1
 8008764:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	2204      	movs	r2, #4
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	2315      	movs	r3, #21
 8008770:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	22bf      	movs	r2, #191	@ 0xbf
 8008778:	2319      	movs	r3, #25
 800877a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800877e:	f7ff fcb3 	bl	80080e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008782:	4809      	ldr	r0, [pc, #36]	@ (80087a8 <_Z23getFont_verdana_21_4bppv+0x74>)
 8008784:	f020 ff9e 	bl	80296c4 <atexit>
 8008788:	4628      	mov	r0, r5
 800878a:	f020 fc13 	bl	8028fb4 <__cxa_guard_release>
    return verdana_21_4bpp;
}
 800878e:	4804      	ldr	r0, [pc, #16]	@ (80087a0 <_Z23getFont_verdana_21_4bppv+0x6c>)
 8008790:	b00f      	add	sp, #60	@ 0x3c
 8008792:	bd30      	pop	{r4, r5, pc}
 8008794:	2400e4f4 	.word	0x2400e4f4
 8008798:	08048000 	.word	0x08048000
 800879c:	08049740 	.word	0x08049740
 80087a0:	2400e4f8 	.word	0x2400e4f8
 80087a4:	08049dc8 	.word	0x08049dc8
 80087a8:	08008731 	.word	0x08008731

080087ac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80087ac:	4770      	bx	lr
	...

080087b0 <_Z23getFont_verdana_30_4bppv>:
{
 80087b0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80087b2:	4d16      	ldr	r5, [pc, #88]	@ (800880c <_Z23getFont_verdana_30_4bppv+0x5c>)
{
 80087b4:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 1, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 63, 0, 0, 0);
 80087b6:	682c      	ldr	r4, [r5, #0]
 80087b8:	f3bf 8f5b 	dmb	ish
 80087bc:	f014 0401 	ands.w	r4, r4, #1
 80087c0:	d120      	bne.n	8008804 <_Z23getFont_verdana_30_4bppv+0x54>
 80087c2:	4628      	mov	r0, r5
 80087c4:	f020 fbea 	bl	8028f9c <__cxa_guard_acquire>
 80087c8:	b1e0      	cbz	r0, 8008804 <_Z23getFont_verdana_30_4bppv+0x54>
 80087ca:	233f      	movs	r3, #63	@ 0x3f
 80087cc:	2201      	movs	r2, #1
 80087ce:	4910      	ldr	r1, [pc, #64]	@ (8008810 <_Z23getFont_verdana_30_4bppv+0x60>)
 80087d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d2:	4b10      	ldr	r3, [pc, #64]	@ (8008814 <_Z23getFont_verdana_30_4bppv+0x64>)
 80087d4:	4810      	ldr	r0, [pc, #64]	@ (8008818 <_Z23getFont_verdana_30_4bppv+0x68>)
 80087d6:	9308      	str	r3, [sp, #32]
 80087d8:	4b10      	ldr	r3, [pc, #64]	@ (800881c <_Z23getFont_verdana_30_4bppv+0x6c>)
 80087da:	940a      	str	r4, [sp, #40]	@ 0x28
 80087dc:	9405      	str	r4, [sp, #20]
 80087de:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80087e2:	2304      	movs	r3, #4
 80087e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80087e8:	231e      	movs	r3, #30
 80087ea:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80087f4:	f7ff fc78 	bl	80080e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80087f8:	4809      	ldr	r0, [pc, #36]	@ (8008820 <_Z23getFont_verdana_30_4bppv+0x70>)
 80087fa:	f020 ff63 	bl	80296c4 <atexit>
 80087fe:	4628      	mov	r0, r5
 8008800:	f020 fbd8 	bl	8028fb4 <__cxa_guard_release>
    return verdana_30_4bpp;
}
 8008804:	4804      	ldr	r0, [pc, #16]	@ (8008818 <_Z23getFont_verdana_30_4bppv+0x68>)
 8008806:	b00f      	add	sp, #60	@ 0x3c
 8008808:	bd30      	pop	{r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	2400e524 	.word	0x2400e524
 8008810:	08048a74 	.word	0x08048a74
 8008814:	080499b8 	.word	0x080499b8
 8008818:	2400e528 	.word	0x2400e528
 800881c:	08049dcc 	.word	0x08049dcc
 8008820:	080087ad 	.word	0x080087ad

08008824 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8008824:	4770      	bx	lr
	...

08008828 <_Z23getFont_verdana_40_4bppv>:
{
 8008828:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800882a:	4d17      	ldr	r5, [pc, #92]	@ (8008888 <_Z23getFont_verdana_40_4bppv+0x60>)
{
 800882c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 191, 48, 40, 1, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800882e:	682c      	ldr	r4, [r5, #0]
 8008830:	f3bf 8f5b 	dmb	ish
 8008834:	f014 0401 	ands.w	r4, r4, #1
 8008838:	d123      	bne.n	8008882 <_Z23getFont_verdana_40_4bppv+0x5a>
 800883a:	4628      	mov	r0, r5
 800883c:	f020 fbae 	bl	8028f9c <__cxa_guard_acquire>
 8008840:	b1f8      	cbz	r0, 8008882 <_Z23getFont_verdana_40_4bppv+0x5a>
 8008842:	233f      	movs	r3, #63	@ 0x3f
 8008844:	2204      	movs	r2, #4
 8008846:	4911      	ldr	r1, [pc, #68]	@ (800888c <_Z23getFont_verdana_40_4bppv+0x64>)
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	4b11      	ldr	r3, [pc, #68]	@ (8008890 <_Z23getFont_verdana_40_4bppv+0x68>)
 800884c:	4811      	ldr	r0, [pc, #68]	@ (8008894 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800884e:	9308      	str	r3, [sp, #32]
 8008850:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <_Z23getFont_verdana_40_4bppv+0x70>)
 8008852:	940a      	str	r4, [sp, #40]	@ 0x28
 8008854:	9307      	str	r3, [sp, #28]
 8008856:	2302      	movs	r3, #2
 8008858:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800885c:	2301      	movs	r3, #1
 800885e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8008862:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008866:	2328      	movs	r3, #40	@ 0x28
 8008868:	22bf      	movs	r2, #191	@ 0xbf
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2330      	movs	r3, #48	@ 0x30
 800886e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8008872:	f7ff fc39 	bl	80080e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008876:	4809      	ldr	r0, [pc, #36]	@ (800889c <_Z23getFont_verdana_40_4bppv+0x74>)
 8008878:	f020 ff24 	bl	80296c4 <atexit>
 800887c:	4628      	mov	r0, r5
 800887e:	f020 fb99 	bl	8028fb4 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8008882:	4804      	ldr	r0, [pc, #16]	@ (8008894 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8008884:	b00f      	add	sp, #60	@ 0x3c
 8008886:	bd30      	pop	{r4, r5, pc}
 8008888:	2400e554 	.word	0x2400e554
 800888c:	08048a84 	.word	0x08048a84
 8008890:	080499bc 	.word	0x080499bc
 8008894:	2400e558 	.word	0x2400e558
 8008898:	08049dd0 	.word	0x08049dd0
 800889c:	08008825 	.word	0x08008825

080088a0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80088a0:	2000      	movs	r0, #0
 80088a2:	4770      	bx	lr

080088a4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80088a4:	2000      	movs	r0, #0
 80088a6:	4770      	bx	lr

080088a8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80088a8:	b40e      	push	{r1, r2, r3}
 80088aa:	b503      	push	{r0, r1, lr}
 80088ac:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80088ae:	2100      	movs	r1, #0
{
 80088b0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80088b4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80088b6:	f012 ff43 	bl	801b740 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80088ba:	b002      	add	sp, #8
 80088bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c0:	b003      	add	sp, #12
 80088c2:	4770      	bx	lr

080088c4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80088c4:	b40c      	push	{r2, r3}
 80088c6:	b507      	push	{r0, r1, r2, lr}
 80088c8:	ab04      	add	r3, sp, #16
 80088ca:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80088ce:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80088d0:	f012 ff36 	bl	801b740 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80088d4:	b003      	add	sp, #12
 80088d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80088da:	b002      	add	sp, #8
 80088dc:	4770      	bx	lr
	...

080088e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80088e0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80088e2:	b510      	push	{r4, lr}
 80088e4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80088e6:	b373      	cbz	r3, 8008946 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80088e8:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80088ea:	b92b      	cbnz	r3, 80088f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80088ec:	4b18      	ldr	r3, [pc, #96]	@ (8008950 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80088ee:	21c5      	movs	r1, #197	@ 0xc5
 80088f0:	4a18      	ldr	r2, [pc, #96]	@ (8008954 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80088f2:	4819      	ldr	r0, [pc, #100]	@ (8008958 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80088f4:	f020 fec8 	bl	8029688 <__assert_func>
            return buffer[pos];
 80088f8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80088fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80088fe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8008900:	b30b      	cbz	r3, 8008946 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8008902:	f014 fdff 	bl	801d504 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8008906:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8008908:	2b01      	cmp	r3, #1
 800890a:	d803      	bhi.n	8008914 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800890c:	4b13      	ldr	r3, [pc, #76]	@ (800895c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800890e:	21cb      	movs	r1, #203	@ 0xcb
 8008910:	4a13      	ldr	r2, [pc, #76]	@ (8008960 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8008912:	e7ee      	b.n	80088f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8008914:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008916:	f640 103f 	movw	r0, #2367	@ 0x93f
 800891a:	1c53      	adds	r3, r2, #1
 800891c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800891e:	2b09      	cmp	r3, #9
 8008920:	4619      	mov	r1, r3
 8008922:	bf88      	it	hi
 8008924:	f1a3 010a 	subhi.w	r1, r3, #10
 8008928:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800892c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800892e:	4281      	cmp	r1, r0
 8008930:	d109      	bne.n	8008946 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8008932:	2b0a      	cmp	r3, #10
 8008934:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008938:	bf28      	it	cs
 800893a:	2300      	movcs	r3, #0
            return buffer[pos];
 800893c:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800893e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8008942:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8008944:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8008946:	4620      	mov	r0, r4
}
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800894c:	f014 bcdc 	b.w	801d308 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8008950:	0802d244 	.word	0x0802d244
 8008954:	0802d24d 	.word	0x0802d24d
 8008958:	0802d2f8 	.word	0x0802d2f8
 800895c:	0802d350 	.word	0x0802d350
 8008960:	0802d35e 	.word	0x0802d35e

08008964 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8008964:	f014 bc99 	b.w	801d29a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08008968 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8008968:	b510      	push	{r4, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	ac02      	add	r4, sp, #8
 800896e:	e884 0006 	stmia.w	r4, {r1, r2}
 8008972:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8008974:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8008976:	4621      	mov	r1, r4
    va_start(pArg, format);
 8008978:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	9b08      	ldr	r3, [sp, #32]
 8008982:	f011 fb0d 	bl	8019fa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008986:	b006      	add	sp, #24
 8008988:	bd10      	pop	{r4, pc}
	...

0800898c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800898c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800898e:	bb18      	cbnz	r0, 80089d8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8008990:	4b12      	ldr	r3, [pc, #72]	@ (80089dc <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8008992:	4813      	ldr	r0, [pc, #76]	@ (80089e0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8008994:	681c      	ldr	r4, [r3, #0]
 8008996:	4913      	ldr	r1, [pc, #76]	@ (80089e4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8008998:	b1b4      	cbz	r4, 80089c8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	4422      	add	r2, r4
 800899e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80089a0:	6862      	ldr	r2, [r4, #4]
 80089a2:	4422      	add	r2, r4
 80089a4:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80089a6:	68a2      	ldr	r2, [r4, #8]
 80089a8:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80089aa:	4b0f      	ldr	r3, [pc, #60]	@ (80089e8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80089b0:	f000 f838 	bl	8008a24 <_ZN17TypedTextDatabase8getFontsEv>
 80089b4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80089b6:	f000 f833 	bl	8008a20 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80089ba:	4b0c      	ldr	r3, [pc, #48]	@ (80089ec <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80089bc:	601c      	str	r4, [r3, #0]
        fonts = f;
 80089be:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80089c0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80089c2:	4b0c      	ldr	r3, [pc, #48]	@ (80089f4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80089c4:	8018      	strh	r0, [r3, #0]
    }
}
 80089c6:	e007      	b.n	80089d8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80089c8:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80089ca:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80089cc:	4b0b      	ldr	r3, [pc, #44]	@ (80089fc <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80089ce:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80089d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008a00 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80089d2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80089d4:	2c00      	cmp	r4, #0
 80089d6:	d1e8      	bne.n	80089aa <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80089d8:	bd38      	pop	{r3, r4, r5, pc}
 80089da:	bf00      	nop
 80089dc:	2400e590 	.word	0x2400e590
 80089e0:	2400e588 	.word	0x2400e588
 80089e4:	2400e584 	.word	0x2400e584
 80089e8:	2400e58c 	.word	0x2400e58c
 80089ec:	2402860c 	.word	0x2402860c
 80089f0:	24028614 	.word	0x24028614
 80089f4:	24028610 	.word	0x24028610
 80089f8:	9071c378 	.word	0x9071c378
 80089fc:	9071c300 	.word	0x9071c300
 8008a00:	9071c43c 	.word	0x9071c43c

08008a04 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8008a04:	4b04      	ldr	r3, [pc, #16]	@ (8008a18 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8008a0c:	4b03      	ldr	r3, [pc, #12]	@ (8008a1c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
}
 8008a10:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	2400e584 	.word	0x2400e584
 8008a1c:	2400e588 	.word	0x2400e588

08008a20 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8008a20:	201e      	movs	r0, #30
 8008a22:	4770      	bx	lr

08008a24 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8008a24:	4800      	ldr	r0, [pc, #0]	@ (8008a28 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8008a26:	4770      	bx	lr
 8008a28:	2400e594 	.word	0x2400e594

08008a2c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8008a2c:	b510      	push	{r4, lr}
};
 8008a2e:	4c08      	ldr	r4, [pc, #32]	@ (8008a50 <_GLOBAL__sub_I_touchgfx_fonts+0x24>)
    &(getFont_verdana_20_4bpp()),
 8008a30:	f7ff fe42 	bl	80086b8 <_Z23getFont_verdana_20_4bppv>
};
 8008a34:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8008a36:	f7ff fef7 	bl	8008828 <_Z23getFont_verdana_40_4bppv>
};
 8008a3a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8008a3c:	f7ff fdfe 	bl	800863c <_Z23getFont_verdana_10_4bppv>
};
 8008a40:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_21_4bpp()),
 8008a42:	f7ff fe77 	bl	8008734 <_Z23getFont_verdana_21_4bppv>
};
 8008a46:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_30_4bpp())
 8008a48:	f7ff feb2 	bl	80087b0 <_Z23getFont_verdana_30_4bppv>
};
 8008a4c:	6120      	str	r0, [r4, #16]
} // namespace TypedTextDatabase
 8008a4e:	bd10      	pop	{r4, pc}
 8008a50:	2400e594 	.word	0x2400e594

08008a54 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8008a54:	b510      	push	{r4, lr}
    pointArray = 0;
 8008a56:	2400      	movs	r4, #0
 8008a58:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8008a5a:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8008a5c:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8008a5e:	601c      	str	r4, [r3, #0]
}
 8008a60:	bd10      	pop	{r4, pc}

08008a62 <_ZN19CalculatorPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~CalculatorPresenter() {}
 8008a62:	4770      	bx	lr

08008a64 <_ZThn4_N19CalculatorPresenterD1Ev>:
 8008a64:	3804      	subs	r0, #4
 8008a66:	4770      	bx	lr

08008a68 <_ZN19CalculatorPresenter10deactivateEv>:
}

void CalculatorPresenter::activate()
{

}
 8008a68:	4770      	bx	lr

08008a6a <_ZN19CalculatorPresenterD0Ev>:
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	2110      	movs	r1, #16
 8008a70:	f020 fa92 	bl	8028f98 <_ZdlPvj>
 8008a74:	4620      	mov	r0, r4
 8008a76:	bd10      	pop	{r4, pc}

08008a78 <_ZThn4_N19CalculatorPresenterD0Ev>:
 8008a78:	f1a0 0004 	sub.w	r0, r0, #4
 8008a7c:	e7f5      	b.n	8008a6a <_ZN19CalculatorPresenterD0Ev>
	...

08008a80 <_ZN19CalculatorPresenterC1ER14CalculatorView>:
    ModelListener() : model(0) {}
 8008a80:	2200      	movs	r2, #0
    : view(v)
 8008a82:	60c1      	str	r1, [r0, #12]
 8008a84:	6082      	str	r2, [r0, #8]
 8008a86:	4a02      	ldr	r2, [pc, #8]	@ (8008a90 <_ZN19CalculatorPresenterC1ER14CalculatorView+0x10>)
 8008a88:	6002      	str	r2, [r0, #0]
 8008a8a:	3218      	adds	r2, #24
 8008a8c:	6042      	str	r2, [r0, #4]
}
 8008a8e:	4770      	bx	lr
 8008a90:	0802d438 	.word	0x0802d438

08008a94 <_ZN14CalculatorView14tearDownScreenEv>:
}

void CalculatorView::tearDownScreen()
{
    CalculatorViewBase::tearDownScreen();
}
 8008a94:	4770      	bx	lr
	...

08008a98 <_ZN14CalculatorViewD1Ev>:

class CalculatorView : public CalculatorViewBase
{
public:
    CalculatorView();
    virtual ~CalculatorView() {}
 8008a98:	4b03      	ldr	r3, [pc, #12]	@ (8008aa8 <_ZN14CalculatorViewD1Ev+0x10>)
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	6003      	str	r3, [r0, #0]
 8008aa0:	f7fb fa05 	bl	8003eae <_ZN18CalculatorViewBaseD1Ev>
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	bd10      	pop	{r4, pc}
 8008aa8:	0802d480 	.word	0x0802d480

08008aac <_ZN14CalculatorViewD0Ev>:
 8008aac:	b510      	push	{r4, lr}
 8008aae:	4604      	mov	r4, r0
 8008ab0:	f7ff fff2 	bl	8008a98 <_ZN14CalculatorViewD1Ev>
 8008ab4:	f240 61f4 	movw	r1, #1780	@ 0x6f4
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f020 fa6d 	bl	8028f98 <_ZdlPvj>
 8008abe:	4620      	mov	r0, r4
 8008ac0:	bd10      	pop	{r4, pc}
	...

08008ac4 <_ZN14CalculatorViewC1Ev>:
CalculatorView::CalculatorView()
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	f7fb fbaa 	bl	8004220 <_ZN18CalculatorViewBaseC1Ev>
 8008acc:	4b03      	ldr	r3, [pc, #12]	@ (8008adc <_ZN14CalculatorViewC1Ev+0x18>)
}
 8008ace:	4620      	mov	r0, r4
CalculatorView::CalculatorView()
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	0802d480 	.word	0x0802d480

08008ae0 <_ZN14CalculatorView11setupScreenEv>:
    CalculatorViewBase::setupScreen();
 8008ae0:	f7fb b9e6 	b.w	8003eb0 <_ZN18CalculatorViewBase11setupScreenEv>

08008ae4 <_ZN14CalculatorView7addCharEc>:

bool CalculatorView::addChar(char character)
{
	if(char_counter > 15)
 8008ae4:	f8d0 36f0 	ldr.w	r3, [r0, #1776]	@ 0x6f0
 8008ae8:	2b0f      	cmp	r3, #15
{
 8008aea:	b570      	push	{r4, r5, r6, lr}
 8008aec:	4604      	mov	r4, r0
 8008aee:	b08a      	sub	sp, #40	@ 0x28
 8008af0:	460d      	mov	r5, r1
	if(char_counter > 15)
 8008af2:	dc33      	bgt.n	8008b5c <_ZN14CalculatorView7addCharEc+0x78>
	{
		return false;
	}
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 8008af4:	f204 66bc 	addw	r6, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 8008af8:	2222      	movs	r2, #34	@ 0x22
 8008afa:	2100      	movs	r1, #0
 8008afc:	a801      	add	r0, sp, #4
 8008afe:	f021 f977 	bl	8029df0 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 8008b02:	2211      	movs	r2, #17
 8008b04:	4631      	mov	r1, r6
 8008b06:	a801      	add	r0, sp, #4
 8008b08:	f014 ff45 	bl	801d996 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter] = character;
 8008b0c:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8008b10:	aa0a      	add	r2, sp, #40	@ 0x28
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008b12:	2111      	movs	r1, #17
 8008b14:	4630      	mov	r0, r6
	new_buf[char_counter] = character;
 8008b16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008b1a:	4a11      	ldr	r2, [pc, #68]	@ (8008b60 <_ZN14CalculatorView7addCharEc+0x7c>)
	new_buf[char_counter] = character;
 8008b1c:	f823 5c24 	strh.w	r5, [r3, #-36]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008b20:	ab01      	add	r3, sp, #4
 8008b22:	f015 faa9 	bl	801e078 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 8008b26:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008b2a:	f012 ff34 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter++;
 8008b2e:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
	LOG_DEBUG("Calculator; char_count: %d", char_counter);
 8008b32:	490c      	ldr	r1, [pc, #48]	@ (8008b64 <_ZN14CalculatorView7addCharEc+0x80>)
	char_counter++;
 8008b34:	3201      	adds	r2, #1
 8008b36:	f8c4 26f0 	str.w	r2, [r4, #1776]	@ 0x6f0
	LOG_DEBUG("Calculator; char_count: %d", char_counter);
 8008b3a:	4c0b      	ldr	r4, [pc, #44]	@ (8008b68 <_ZN14CalculatorView7addCharEc+0x84>)
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	6898      	ldr	r0, [r3, #8]
 8008b40:	f020 fff6 	bl	8029b30 <fiprintf>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	4809      	ldr	r0, [pc, #36]	@ (8008b6c <_ZN14CalculatorView7addCharEc+0x88>)
 8008b48:	6899      	ldr	r1, [r3, #8]
 8008b4a:	f021 f853 	bl	8029bf4 <fputs>
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	6898      	ldr	r0, [r3, #8]
 8008b52:	f020 ff35 	bl	80299c0 <fflush>
	return true;
 8008b56:	2001      	movs	r0, #1
}
 8008b58:	b00a      	add	sp, #40	@ 0x28
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7fb      	b.n	8008b58 <_ZN14CalculatorView7addCharEc+0x74>
 8008b60:	0802c723 	.word	0x0802c723
 8008b64:	0802d458 	.word	0x0802d458
 8008b68:	240000e8 	.word	0x240000e8
 8008b6c:	0802d473 	.word	0x0802d473

08008b70 <_ZN14CalculatorView18sendToCalculator_0Ev>:
	char_counter = 0;
}

void CalculatorView::sendToCalculator_0()
{
	addChar('0');
 8008b70:	2130      	movs	r1, #48	@ 0x30
 8008b72:	f7ff bfb7 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008b76 <_ZN14CalculatorView18sendToCalculator_1Ev>:
}

void CalculatorView::sendToCalculator_1()
{
	addChar('1');
 8008b76:	2131      	movs	r1, #49	@ 0x31
 8008b78:	f7ff bfb4 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008b7c <_ZN14CalculatorView18sendToCalculator_2Ev>:
}

void CalculatorView::sendToCalculator_2()
{
	addChar('2');
 8008b7c:	2132      	movs	r1, #50	@ 0x32
 8008b7e:	f7ff bfb1 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008b82 <_ZN14CalculatorView18sendToCalculator_3Ev>:
}

void CalculatorView::sendToCalculator_3()
{
	addChar('3');
 8008b82:	2133      	movs	r1, #51	@ 0x33
 8008b84:	f7ff bfae 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008b88 <_ZN14CalculatorView18sendToCalculator_4Ev>:
}

void CalculatorView::sendToCalculator_4()
{
	addChar('4');
 8008b88:	2134      	movs	r1, #52	@ 0x34
 8008b8a:	f7ff bfab 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008b8e <_ZN14CalculatorView18sendToCalculator_5Ev>:
}

void CalculatorView::sendToCalculator_5()
{
	addChar('5');
 8008b8e:	2135      	movs	r1, #53	@ 0x35
 8008b90:	f7ff bfa8 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008b94 <_ZN14CalculatorView18sendToCalculator_6Ev>:
}

void CalculatorView::sendToCalculator_6()
{
	addChar('6');
 8008b94:	2136      	movs	r1, #54	@ 0x36
 8008b96:	f7ff bfa5 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008b9a <_ZN14CalculatorView18sendToCalculator_7Ev>:
}

void CalculatorView::sendToCalculator_7()
{
	addChar('7');
 8008b9a:	2137      	movs	r1, #55	@ 0x37
 8008b9c:	f7ff bfa2 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008ba0 <_ZN14CalculatorView18sendToCalculator_8Ev>:
}

void CalculatorView::sendToCalculator_8()
{
	addChar('8');
 8008ba0:	2138      	movs	r1, #56	@ 0x38
 8008ba2:	f7ff bf9f 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008ba6 <_ZN14CalculatorView18sendToCalculator_9Ev>:
}

void CalculatorView::sendToCalculator_9()
{
	addChar('9');
 8008ba6:	2139      	movs	r1, #57	@ 0x39
 8008ba8:	f7ff bf9c 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008bac <_ZN14CalculatorView20sendToCalculator_AddEv>:
}

void CalculatorView::sendToCalculator_Add()
{
	addChar('+');
 8008bac:	212b      	movs	r1, #43	@ 0x2b
 8008bae:	f7ff bf99 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008bb2 <_ZN14CalculatorView32sendToCalculator_OpenParenthesisEv>:
	removeLastChar();
}

void CalculatorView::sendToCalculator_OpenParenthesis()
{
	addChar('(');
 8008bb2:	2128      	movs	r1, #40	@ 0x28
 8008bb4:	f7ff bf96 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008bb8 <_ZN14CalculatorView33sendToCalculator_CloseParenthesisEv>:
}

void CalculatorView::sendToCalculator_CloseParenthesis()
{
	addChar(')');
 8008bb8:	2129      	movs	r1, #41	@ 0x29
 8008bba:	f7ff bf93 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008bbe <_ZN14CalculatorView25sendToCalculator_SubtractEv>:
}

void CalculatorView::sendToCalculator_Subtract()
{
	addChar('-');
 8008bbe:	212d      	movs	r1, #45	@ 0x2d
 8008bc0:	f7ff bf90 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008bc4 <_ZN14CalculatorView25sendToCalculator_MultiplyEv>:
}

void CalculatorView::sendToCalculator_Multiply()
{
	addChar('*');
 8008bc4:	212a      	movs	r1, #42	@ 0x2a
 8008bc6:	f7ff bf8d 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008bca <_ZN14CalculatorView23sendToCalculator_DivideEv>:
}

void CalculatorView::sendToCalculator_Divide()
{
	addChar('/');
 8008bca:	212f      	movs	r1, #47	@ 0x2f
 8008bcc:	f7ff bf8a 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>

08008bd0 <_ZN14CalculatorView22sendToCalculator_CommaEv>:
}

void CalculatorView::sendToCalculator_Comma()
{
	addChar(',');
 8008bd0:	212c      	movs	r1, #44	@ 0x2c
 8008bd2:	f7ff bf87 	b.w	8008ae4 <_ZN14CalculatorView7addCharEc>
	...

08008bd8 <_ZN14CalculatorView14removeLastCharEv>:
	if(char_counter < 1)
 8008bd8:	f8d0 36f0 	ldr.w	r3, [r0, #1776]	@ 0x6f0
 8008bdc:	2b00      	cmp	r3, #0
{
 8008bde:	b530      	push	{r4, r5, lr}
 8008be0:	4604      	mov	r4, r0
 8008be2:	b08b      	sub	sp, #44	@ 0x2c
	if(char_counter < 1)
 8008be4:	dd35      	ble.n	8008c52 <_ZN14CalculatorView14removeLastCharEv+0x7a>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 8008be6:	f204 65bc 	addw	r5, r4, #1724	@ 0x6bc
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 8008bea:	2222      	movs	r2, #34	@ 0x22
 8008bec:	2100      	movs	r1, #0
 8008bee:	a801      	add	r0, sp, #4
 8008bf0:	f021 f8fe 	bl	8029df0 <memset>
	touchgfx::Unicode::strncpy(new_buf, TextResultBuffer, TEXTRESULT_SIZE);
 8008bf4:	2211      	movs	r2, #17
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	a801      	add	r0, sp, #4
 8008bfa:	f014 fecc 	bl	801d996 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	new_buf[char_counter-1] = '\0';
 8008bfe:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8008c02:	aa0a      	add	r2, sp, #40	@ 0x28
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008c04:	2111      	movs	r1, #17
	new_buf[char_counter-1] = '\0';
 8008c06:	3b01      	subs	r3, #1
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008c08:	4628      	mov	r0, r5
	new_buf[char_counter-1] = '\0';
 8008c0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f823 2c24 	strh.w	r2, [r3, #-36]
	touchgfx::Unicode::snprintf(TextResultBuffer, TEXTRESULT_SIZE, "%s", new_buf);
 8008c14:	ab01      	add	r3, sp, #4
 8008c16:	4a10      	ldr	r2, [pc, #64]	@ (8008c58 <_ZN14CalculatorView14removeLastCharEv+0x80>)
 8008c18:	f015 fa2e 	bl	801e078 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	TextResult.invalidate();
 8008c1c:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008c20:	f012 feb9 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter--;
 8008c24:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
	LOG_DEBUG("Calculator; char_count: %d", char_counter);
 8008c28:	490c      	ldr	r1, [pc, #48]	@ (8008c5c <_ZN14CalculatorView14removeLastCharEv+0x84>)
	char_counter--;
 8008c2a:	3a01      	subs	r2, #1
 8008c2c:	f8c4 26f0 	str.w	r2, [r4, #1776]	@ 0x6f0
	LOG_DEBUG("Calculator; char_count: %d", char_counter);
 8008c30:	4c0b      	ldr	r4, [pc, #44]	@ (8008c60 <_ZN14CalculatorView14removeLastCharEv+0x88>)
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	6898      	ldr	r0, [r3, #8]
 8008c36:	f020 ff7b 	bl	8029b30 <fiprintf>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	4809      	ldr	r0, [pc, #36]	@ (8008c64 <_ZN14CalculatorView14removeLastCharEv+0x8c>)
 8008c3e:	6899      	ldr	r1, [r3, #8]
 8008c40:	f020 ffd8 	bl	8029bf4 <fputs>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	6898      	ldr	r0, [r3, #8]
 8008c48:	f020 feba 	bl	80299c0 <fflush>
	return true;
 8008c4c:	2001      	movs	r0, #1
}
 8008c4e:	b00b      	add	sp, #44	@ 0x2c
 8008c50:	bd30      	pop	{r4, r5, pc}
		return false;
 8008c52:	2000      	movs	r0, #0
 8008c54:	e7fb      	b.n	8008c4e <_ZN14CalculatorView14removeLastCharEv+0x76>
 8008c56:	bf00      	nop
 8008c58:	0802c723 	.word	0x0802c723
 8008c5c:	0802d458 	.word	0x0802d458
 8008c60:	240000e8 	.word	0x240000e8
 8008c64:	0802d473 	.word	0x0802d473

08008c68 <_ZN14CalculatorView23sendToCalculator_DeleteEv>:
	removeLastChar();
 8008c68:	f7ff bfb6 	b.w	8008bd8 <_ZN14CalculatorView14removeLastCharEv>

08008c6c <_ZN14CalculatorView9clearTextEv>:
{
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	b08a      	sub	sp, #40	@ 0x28
 8008c70:	4604      	mov	r4, r0
	touchgfx::Unicode::UnicodeChar new_buf[TEXTRESULT_SIZE] = {0};
 8008c72:	2222      	movs	r2, #34	@ 0x22
 8008c74:	2100      	movs	r1, #0
 8008c76:	a801      	add	r0, sp, #4
 8008c78:	f021 f8ba 	bl	8029df0 <memset>
	touchgfx::Unicode::strncpy(TextResultBuffer, new_buf, TEXTRESULT_SIZE);
 8008c7c:	2211      	movs	r2, #17
 8008c7e:	a901      	add	r1, sp, #4
 8008c80:	f204 60bc 	addw	r0, r4, #1724	@ 0x6bc
 8008c84:	f014 fe87 	bl	801d996 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
	TextResult.invalidate();
 8008c88:	f504 60ce 	add.w	r0, r4, #1648	@ 0x670
 8008c8c:	f012 fe83 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
	char_counter = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c4 36f0 	str.w	r3, [r4, #1776]	@ 0x6f0
}
 8008c96:	b00a      	add	sp, #40	@ 0x28
 8008c98:	bd10      	pop	{r4, pc}

08008c9a <_ZN14CalculatorView22sendToCalculator_ClearEv>:
}

void CalculatorView::sendToCalculator_Clear()
{
	clearText();
 8008c9a:	f7ff bfe7 	b.w	8008c6c <_ZN14CalculatorView9clearTextEv>

08008c9e <_ZN17DiagnosePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~DiagnosePresenter() {}
 8008c9e:	4770      	bx	lr

08008ca0 <_ZThn4_N17DiagnosePresenterD1Ev>:
 8008ca0:	3804      	subs	r0, #4
 8008ca2:	4770      	bx	lr

08008ca4 <_ZN17DiagnosePresenter10deactivateEv>:
}

void DiagnosePresenter::activate()
{

}
 8008ca4:	4770      	bx	lr

08008ca6 <_ZN17DiagnosePresenterD0Ev>:
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	2110      	movs	r1, #16
 8008cac:	f020 f974 	bl	8028f98 <_ZdlPvj>
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	bd10      	pop	{r4, pc}

08008cb4 <_ZThn4_N17DiagnosePresenterD0Ev>:
 8008cb4:	f1a0 0004 	sub.w	r0, r0, #4
 8008cb8:	e7f5      	b.n	8008ca6 <_ZN17DiagnosePresenterD0Ev>
	...

08008cbc <_ZN17DiagnosePresenterC1ER12DiagnoseView>:
 8008cbc:	2200      	movs	r2, #0
    : view(v)
 8008cbe:	60c1      	str	r1, [r0, #12]
 8008cc0:	6082      	str	r2, [r0, #8]
 8008cc2:	4a02      	ldr	r2, [pc, #8]	@ (8008ccc <_ZN17DiagnosePresenterC1ER12DiagnoseView+0x10>)
 8008cc4:	6002      	str	r2, [r0, #0]
 8008cc6:	3218      	adds	r2, #24
 8008cc8:	6042      	str	r2, [r0, #4]
}
 8008cca:	4770      	bx	lr
 8008ccc:	0802d504 	.word	0x0802d504

08008cd0 <_ZN12DiagnoseView14tearDownScreenEv>:
}

void DiagnoseView::tearDownScreen()
{
    DiagnoseViewBase::tearDownScreen();
}
 8008cd0:	4770      	bx	lr
	...

08008cd4 <_ZN12DiagnoseViewD1Ev>:

class DiagnoseView : public DiagnoseViewBase
{
public:
    DiagnoseView();
    virtual ~DiagnoseView() {}
 8008cd4:	4b03      	ldr	r3, [pc, #12]	@ (8008ce4 <_ZN12DiagnoseViewD1Ev+0x10>)
 8008cd6:	b510      	push	{r4, lr}
 8008cd8:	4604      	mov	r4, r0
 8008cda:	6003      	str	r3, [r0, #0]
 8008cdc:	f7fc fa36 	bl	800514c <_ZN16DiagnoseViewBaseD1Ev>
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	bd10      	pop	{r4, pc}
 8008ce4:	0802d52c 	.word	0x0802d52c

08008ce8 <_ZN12DiagnoseViewD0Ev>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	4604      	mov	r4, r0
 8008cec:	f7ff fff2 	bl	8008cd4 <_ZN12DiagnoseViewD1Ev>
 8008cf0:	f243 417c 	movw	r1, #13436	@ 0x347c
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f020 f94f 	bl	8028f98 <_ZdlPvj>
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	bd10      	pop	{r4, pc}
	...

08008d00 <_ZN12DiagnoseViewC1Ev>:
DiagnoseView::DiagnoseView()
 8008d00:	b510      	push	{r4, lr}
 8008d02:	4604      	mov	r4, r0
 8008d04:	f7fc fad2 	bl	80052ac <_ZN16DiagnoseViewBaseC1Ev>
 8008d08:	4b01      	ldr	r3, [pc, #4]	@ (8008d10 <_ZN12DiagnoseViewC1Ev+0x10>)
}
 8008d0a:	4620      	mov	r0, r4
DiagnoseView::DiagnoseView()
 8008d0c:	6023      	str	r3, [r4, #0]
}
 8008d0e:	bd10      	pop	{r4, pc}
 8008d10:	0802d52c 	.word	0x0802d52c

08008d14 <_ZN12DiagnoseView11setupScreenEv>:
    DiagnoseViewBase::setupScreen();
 8008d14:	f7fc b9ed 	b.w	80050f2 <_ZN16DiagnoseViewBase11setupScreenEv>

08008d18 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8008d18:	4770      	bx	lr

08008d1a <_ZN19FrontendApplicationD0Ev>:
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8008d22:	f020 f939 	bl	8028f98 <_ZdlPvj>
 8008d26:	4620      	mov	r0, r4
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	4604      	mov	r4, r0
    {
        model.tick();
 8008d2e:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8008d32:	f000 f84e 	bl	8008dd2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8008d36:	4620      	mov	r0, r4
    }
 8008d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8008d3c:	f011 be04 	b.w	801a948 <_ZN8touchgfx11Application15handleTickEventEv>

08008d40 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008d40:	b510      	push	{r4, lr}
 8008d42:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8008d44:	f7fe ff46 	bl	8007bd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008d48:	4b01      	ldr	r3, [pc, #4]	@ (8008d50 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8008d4a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8008d4c:	6023      	str	r3, [r4, #0]
}
 8008d4e:	bd10      	pop	{r4, pc}
 8008d50:	0802d560 	.word	0x0802d560

08008d54 <_ZN19MainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainScreenPresenter() {}
 8008d54:	4770      	bx	lr

08008d56 <_ZThn4_N19MainScreenPresenterD1Ev>:
 8008d56:	3804      	subs	r0, #4
 8008d58:	4770      	bx	lr

08008d5a <_ZN19MainScreenPresenter10deactivateEv>:
}

void MainScreenPresenter::activate()
{

}
 8008d5a:	4770      	bx	lr

08008d5c <_ZN19MainScreenPresenterD0Ev>:
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	4604      	mov	r4, r0
 8008d60:	2110      	movs	r1, #16
 8008d62:	f020 f919 	bl	8028f98 <_ZdlPvj>
 8008d66:	4620      	mov	r0, r4
 8008d68:	bd10      	pop	{r4, pc}

08008d6a <_ZThn4_N19MainScreenPresenterD0Ev>:
 8008d6a:	f1a0 0004 	sub.w	r0, r0, #4
 8008d6e:	e7f5      	b.n	8008d5c <_ZN19MainScreenPresenterD0Ev>

08008d70 <_ZN19MainScreenPresenterC1ER14MainScreenView>:
 8008d70:	2200      	movs	r2, #0
    : view(v)
 8008d72:	60c1      	str	r1, [r0, #12]
 8008d74:	6082      	str	r2, [r0, #8]
 8008d76:	4a02      	ldr	r2, [pc, #8]	@ (8008d80 <_ZN19MainScreenPresenterC1ER14MainScreenView+0x10>)
 8008d78:	6002      	str	r2, [r0, #0]
 8008d7a:	3218      	adds	r2, #24
 8008d7c:	6042      	str	r2, [r0, #4]
}
 8008d7e:	4770      	bx	lr
 8008d80:	0802d5b4 	.word	0x0802d5b4

08008d84 <_ZN14MainScreenView14tearDownScreenEv>:
}

void MainScreenView::tearDownScreen()
{
    MainScreenViewBase::tearDownScreen();
}
 8008d84:	4770      	bx	lr
	...

08008d88 <_ZN14MainScreenViewD1Ev>:

class MainScreenView : public MainScreenViewBase
{
public:
    MainScreenView();
    virtual ~MainScreenView() {}
 8008d88:	4b03      	ldr	r3, [pc, #12]	@ (8008d98 <_ZN14MainScreenViewD1Ev+0x10>)
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	6003      	str	r3, [r0, #0]
 8008d90:	f7ff f9da 	bl	8008148 <_ZN18MainScreenViewBaseD1Ev>
 8008d94:	4620      	mov	r0, r4
 8008d96:	bd10      	pop	{r4, pc}
 8008d98:	0802d5dc 	.word	0x0802d5dc

08008d9c <_ZN14MainScreenViewD0Ev>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	4604      	mov	r4, r0
 8008da0:	f7ff fff2 	bl	8008d88 <_ZN14MainScreenViewD1Ev>
 8008da4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8008da8:	4620      	mov	r0, r4
 8008daa:	f020 f8f5 	bl	8028f98 <_ZdlPvj>
 8008dae:	4620      	mov	r0, r4
 8008db0:	bd10      	pop	{r4, pc}
	...

08008db4 <_ZN14MainScreenViewC1Ev>:
MainScreenView::MainScreenView()
 8008db4:	b510      	push	{r4, lr}
 8008db6:	4604      	mov	r4, r0
 8008db8:	f7ff fa46 	bl	8008248 <_ZN18MainScreenViewBaseC1Ev>
 8008dbc:	4b01      	ldr	r3, [pc, #4]	@ (8008dc4 <_ZN14MainScreenViewC1Ev+0x10>)
}
 8008dbe:	4620      	mov	r0, r4
MainScreenView::MainScreenView()
 8008dc0:	6023      	str	r3, [r4, #0]
}
 8008dc2:	bd10      	pop	{r4, pc}
 8008dc4:	0802d5dc 	.word	0x0802d5dc

08008dc8 <_ZN14MainScreenView11setupScreenEv>:
    MainScreenViewBase::setupScreen();
 8008dc8:	f7ff b9bf 	b.w	800814a <_ZN18MainScreenViewBase11setupScreenEv>

08008dcc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	6002      	str	r2, [r0, #0]
{

}
 8008dd0:	4770      	bx	lr

08008dd2 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8008dd2:	4770      	bx	lr

08008dd4 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8008dd4:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8008dd6:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8008dda:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8008ddc:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8008dde:	2302      	movs	r3, #2
 8008de0:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8008de2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8008de6:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8008dea:	4770      	bx	lr

08008dec <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8008dec:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008df0:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8008df2:	bf04      	itt	eq
 8008df4:	2300      	moveq	r3, #0
 8008df6:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	4770      	bx	lr

08008dfe <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8008dfe:	2000      	movs	r0, #0
 8008e00:	4770      	bx	lr

08008e02 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008e02:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008e04:	6904      	ldr	r4, [r0, #16]
 8008e06:	8900      	ldrh	r0, [r0, #8]
 8008e08:	46a4      	mov	ip, r4
}
 8008e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008e0e:	4760      	bx	ip

08008e10 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008e10:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008e12:	68c4      	ldr	r4, [r0, #12]
 8008e14:	8900      	ldrh	r0, [r0, #8]
 8008e16:	46a4      	mov	ip, r4
}
 8008e18:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008e1c:	4760      	bx	ip

08008e1e <FT6X06_GestureConfig>:
{
 8008e1e:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008e20:	f100 0518 	add.w	r5, r0, #24
{
 8008e24:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008e26:	7809      	ldrb	r1, [r1, #0]
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 f911 	bl	8009050 <ft6x06_radian_value>
 8008e2e:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8008e30:	7931      	ldrb	r1, [r6, #4]
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f918 	bl	8009068 <ft6x06_offset_left_right>
 8008e38:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8008e3a:	7a31      	ldrb	r1, [r6, #8]
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f000 f91f 	bl	8009080 <ft6x06_offset_up_down>
 8008e42:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8008e44:	7b31      	ldrb	r1, [r6, #12]
 8008e46:	4628      	mov	r0, r5
 8008e48:	f000 f926 	bl	8009098 <ft6x06_disatnce_left_right>
 8008e4c:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008e4e:	7c31      	ldrb	r1, [r6, #16]
 8008e50:	4628      	mov	r0, r5
 8008e52:	f000 f92d 	bl	80090b0 <ft6x06_distance_up_down>
 8008e56:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008e58:	7d31      	ldrb	r1, [r6, #20]
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 f934 	bl	80090c8 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8008e60:	42c4      	cmn	r4, r0
}
 8008e62:	bf14      	ite	ne
 8008e64:	f04f 30ff 	movne.w	r0, #4294967295
 8008e68:	2000      	moveq	r0, #0
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}

08008e6c <FT6X06_ReadID>:
{
 8008e6c:	b513      	push	{r0, r1, r4, lr}
 8008e6e:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8008e70:	3018      	adds	r0, #24
 8008e72:	f10d 0107 	add.w	r1, sp, #7
 8008e76:	f000 f93f 	bl	80090f8 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8008e7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e7e:	6023      	str	r3, [r4, #0]
}
 8008e80:	b002      	add	sp, #8
 8008e82:	bd10      	pop	{r4, pc}

08008e84 <FT6X06_GetState>:
{
 8008e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008e86:	f100 0518 	add.w	r5, r0, #24
{
 8008e8a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008e8c:	a901      	add	r1, sp, #4
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 f8d1 	bl	8009036 <ft6x06_td_status>
 8008e94:	bb08      	cbnz	r0, 8008eda <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8008e96:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	bf98      	it	ls
 8008e9e:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008ea0:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8008ea2:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008ea4:	2103      	movs	r1, #3
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	eb0d 0203 	add.w	r2, sp, r3
 8008eac:	f000 f8b0 	bl	8009010 <ft6x06_read_reg>
 8008eb0:	b9b0      	cbnz	r0, 8008ee0 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008eb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008eb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008eba:	021b      	lsls	r3, r3, #8
 8008ebc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008ec0:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008ec2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008ec6:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008ec8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60a3      	str	r3, [r4, #8]
}
 8008ed6:	b003      	add	sp, #12
 8008ed8:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8008eda:	f04f 30ff 	mov.w	r0, #4294967295
 8008ede:	e7df      	b.n	8008ea0 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008ee4:	e7f7      	b.n	8008ed6 <FT6X06_GetState+0x52>

08008ee6 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8008ee6:	3018      	adds	r0, #24
 8008ee8:	f000 b8a0 	b.w	800902c <ft6x06_gest_id>

08008eec <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8008eec:	2101      	movs	r1, #1
 8008eee:	3018      	adds	r0, #24
 8008ef0:	f000 b8f6 	b.w	80090e0 <ft6x06_g_mode>

08008ef4 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	3018      	adds	r0, #24
 8008ef8:	f000 b8f2 	b.w	80090e0 <ft6x06_g_mode>

08008efc <FT6X06_Init>:
{
 8008efc:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8008efe:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8008f02:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8008f04:	b96b      	cbnz	r3, 8008f22 <FT6X06_Init+0x26>
    pObj->IO.Init();
 8008f06:	6803      	ldr	r3, [r0, #0]
 8008f08:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7ff fff2 	bl	8008ef4 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8008f10:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8008f12:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8008f16:	bf18      	it	ne
 8008f18:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8008f1a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8008f1e:	4240      	negs	r0, r0
}
 8008f20:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8008f22:	2000      	movs	r0, #0
  return ret;
 8008f24:	e7fc      	b.n	8008f20 <FT6X06_Init+0x24>

08008f26 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8008f26:	2000      	movs	r0, #0
 8008f28:	4770      	bx	lr

08008f2a <FT6X06_GetMultiTouchState>:
{
 8008f2a:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008f2c:	f100 0518 	add.w	r5, r0, #24
{
 8008f30:	b085      	sub	sp, #20
 8008f32:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008f34:	4628      	mov	r0, r5
 8008f36:	a901      	add	r1, sp, #4
 8008f38:	f000 f87d 	bl	8009036 <ft6x06_td_status>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d145      	bne.n	8008fcc <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8008f40:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	bf98      	it	ls
 8008f48:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8008f4a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008f4c:	230c      	movs	r3, #12
 8008f4e:	aa01      	add	r2, sp, #4
 8008f50:	2103      	movs	r1, #3
 8008f52:	4628      	mov	r0, r5
 8008f54:	f000 f85c 	bl	8009010 <ft6x06_read_reg>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d13a      	bne.n	8008fd2 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008f5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f60:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008f64:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8008f66:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008f68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8008f6c:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008f6e:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008f70:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008f74:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008f78:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008f7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f84:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008f86:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008f8a:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8008f8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008f90:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8008f92:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8008f96:	091b      	lsrs	r3, r3, #4
 8008f98:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008f9a:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8008f9c:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008f9e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8008fa2:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008fa4:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8008fa6:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008faa:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8008fac:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8008fba:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008fbe:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8008fc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8008fc4:	091b      	lsrs	r3, r3, #4
 8008fc6:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8008fc8:	b005      	add	sp, #20
 8008fca:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	e7bb      	b.n	8008f4a <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8008fd6:	e7f7      	b.n	8008fc8 <FT6X06_GetMultiTouchState+0x9e>

08008fd8 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8008fd8:	b190      	cbz	r0, 8009000 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8008fda:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8008fdc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008fde:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8008fe0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8008fe2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8008fe4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008fe6:	68ca      	ldr	r2, [r1, #12]
 8008fe8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008fea:	690a      	ldr	r2, [r1, #16]
 8008fec:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008fee:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8008ff0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8008ff2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8008ff4:	4a04      	ldr	r2, [pc, #16]	@ (8009008 <FT6X06_RegisterBusIO+0x30>)
 8008ff6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8008ff8:	4a04      	ldr	r2, [pc, #16]	@ (800900c <FT6X06_RegisterBusIO+0x34>)
 8008ffa:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8008ffc:	b103      	cbz	r3, 8009000 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8008ffe:	4718      	bx	r3
}
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	08008e03 	.word	0x08008e03
 800900c:	08008e11 	.word	0x08008e11

08009010 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8009010:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009012:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8009016:	46a4      	mov	ip, r4
}
 8009018:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800901c:	4760      	bx	ip

0800901e <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800901e:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8009020:	6804      	ldr	r4, [r0, #0]
 8009022:	6880      	ldr	r0, [r0, #8]
 8009024:	46a4      	mov	ip, r4
}
 8009026:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800902a:	4760      	bx	ip

0800902c <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800902c:	2301      	movs	r3, #1
{
 800902e:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8009030:	4619      	mov	r1, r3
 8009032:	f7ff bfed 	b.w	8009010 <ft6x06_read_reg>

08009036 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8009036:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8009038:	460a      	mov	r2, r1
{
 800903a:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800903c:	2301      	movs	r3, #1
 800903e:	2102      	movs	r1, #2
 8009040:	f7ff ffe6 	bl	8009010 <ft6x06_read_reg>
  
  if(ret == 0)
 8009044:	b918      	cbnz	r0, 800904e <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8009046:	7823      	ldrb	r3, [r4, #0]
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800904e:	bd10      	pop	{r4, pc}

08009050 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009050:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8009052:	2301      	movs	r3, #1
{
 8009054:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8009058:	f10d 0207 	add.w	r2, sp, #7
 800905c:	2191      	movs	r1, #145	@ 0x91
 800905e:	f7ff ffde 	bl	800901e <ft6x06_write_reg>
}
 8009062:	b003      	add	sp, #12
 8009064:	f85d fb04 	ldr.w	pc, [sp], #4

08009068 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009068:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800906a:	2301      	movs	r3, #1
{
 800906c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8009070:	f10d 0207 	add.w	r2, sp, #7
 8009074:	2192      	movs	r1, #146	@ 0x92
 8009076:	f7ff ffd2 	bl	800901e <ft6x06_write_reg>
}
 800907a:	b003      	add	sp, #12
 800907c:	f85d fb04 	ldr.w	pc, [sp], #4

08009080 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009080:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8009082:	2301      	movs	r3, #1
{
 8009084:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8009088:	f10d 0207 	add.w	r2, sp, #7
 800908c:	2193      	movs	r1, #147	@ 0x93
 800908e:	f7ff ffc6 	bl	800901e <ft6x06_write_reg>
}
 8009092:	b003      	add	sp, #12
 8009094:	f85d fb04 	ldr.w	pc, [sp], #4

08009098 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009098:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800909a:	2301      	movs	r3, #1
{
 800909c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80090a0:	f10d 0207 	add.w	r2, sp, #7
 80090a4:	2194      	movs	r1, #148	@ 0x94
 80090a6:	f7ff ffba 	bl	800901e <ft6x06_write_reg>
}
 80090aa:	b003      	add	sp, #12
 80090ac:	f85d fb04 	ldr.w	pc, [sp], #4

080090b0 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80090b0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80090b2:	2301      	movs	r3, #1
{
 80090b4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80090b8:	f10d 0207 	add.w	r2, sp, #7
 80090bc:	2195      	movs	r1, #149	@ 0x95
 80090be:	f7ff ffae 	bl	800901e <ft6x06_write_reg>
}
 80090c2:	b003      	add	sp, #12
 80090c4:	f85d fb04 	ldr.w	pc, [sp], #4

080090c8 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80090c8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80090ca:	2301      	movs	r3, #1
{
 80090cc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80090d0:	f10d 0207 	add.w	r2, sp, #7
 80090d4:	2196      	movs	r1, #150	@ 0x96
 80090d6:	f7ff ffa2 	bl	800901e <ft6x06_write_reg>
}
 80090da:	b003      	add	sp, #12
 80090dc:	f85d fb04 	ldr.w	pc, [sp], #4

080090e0 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80090e0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80090e2:	2301      	movs	r3, #1
{
 80090e4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80090e8:	f10d 0207 	add.w	r2, sp, #7
 80090ec:	21a4      	movs	r1, #164	@ 0xa4
 80090ee:	f7ff ff96 	bl	800901e <ft6x06_write_reg>
}
 80090f2:	b003      	add	sp, #12
 80090f4:	f85d fb04 	ldr.w	pc, [sp], #4

080090f8 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80090f8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 80090fa:	2301      	movs	r3, #1
 80090fc:	21a8      	movs	r1, #168	@ 0xa8
 80090fe:	f7ff bf87 	b.w	8009010 <ft6x06_read_reg>
	...

08009104 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8009104:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8009106:	2201      	movs	r2, #1
 8009108:	4b07      	ldr	r3, [pc, #28]	@ (8009128 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 800910a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800910e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009110:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009112:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8009114:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800911a:	f006 fb5b 	bl	800f7d4 <HAL_SDRAM_SendCommand>
 800911e:	3800      	subs	r0, #0
 8009120:	bf18      	it	ne
 8009122:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009124:	4240      	negs	r0, r0
 8009126:	bd08      	pop	{r3, pc}
 8009128:	2400e5a8 	.word	0x2400e5a8

0800912c <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800912c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800912e:	2202      	movs	r2, #2
 8009130:	4b08      	ldr	r3, [pc, #32]	@ (8009154 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8009132:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8009136:	2101      	movs	r1, #1
 8009138:	2200      	movs	r2, #0
 800913a:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800913e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009142:	4619      	mov	r1, r3
 8009144:	f006 fb46 	bl	800f7d4 <HAL_SDRAM_SendCommand>
 8009148:	3800      	subs	r0, #0
 800914a:	bf18      	it	ne
 800914c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800914e:	4240      	negs	r0, r0
 8009150:	bd08      	pop	{r3, pc}
 8009152:	bf00      	nop
 8009154:	2400e5a8 	.word	0x2400e5a8

08009158 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8009158:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800915a:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 800915e:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009160:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8009162:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8009164:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8009166:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8009168:	6991      	ldr	r1, [r2, #24]
 800916a:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800916c:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 800916e:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009170:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8009172:	4907      	ldr	r1, [pc, #28]	@ (8009190 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8009174:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8009176:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8009178:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 800917a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800917e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009182:	f006 fb27 	bl	800f7d4 <HAL_SDRAM_SendCommand>
 8009186:	3800      	subs	r0, #0
 8009188:	bf18      	it	ne
 800918a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800918c:	4240      	negs	r0, r0
 800918e:	bd10      	pop	{r4, pc}
 8009190:	2400e5a8 	.word	0x2400e5a8

08009194 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8009194:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8009196:	4b08      	ldr	r3, [pc, #32]	@ (80091b8 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8009198:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 800919c:	2108      	movs	r1, #8
 800919e:	2200      	movs	r2, #0
 80091a0:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80091a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091a8:	4619      	mov	r1, r3
 80091aa:	f006 fb13 	bl	800f7d4 <HAL_SDRAM_SendCommand>
 80091ae:	3800      	subs	r0, #0
 80091b0:	bf18      	it	ne
 80091b2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80091b4:	4240      	negs	r0, r0
 80091b6:	bd08      	pop	{r3, pc}
 80091b8:	2400e5a8 	.word	0x2400e5a8

080091bc <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80091bc:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80091be:	f006 fb28 	bl	800f812 <HAL_SDRAM_ProgramRefreshRate>
 80091c2:	3800      	subs	r0, #0
 80091c4:	bf18      	it	ne
 80091c6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80091c8:	4240      	negs	r0, r0
 80091ca:	bd08      	pop	{r3, pc}

080091cc <IS42S32800J_Init>:
{
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80091d0:	6809      	ldr	r1, [r1, #0]
{
 80091d2:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80091d4:	f7ff ff96 	bl	8009104 <IS42S32800J_ClockEnable>
 80091d8:	b110      	cbz	r0, 80091e0 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80091da:	f04f 30ff 	mov.w	r0, #4294967295
}
 80091de:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80091e0:	f001 fc7c 	bl	800aadc <HAL_GetTick>
 80091e4:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80091e6:	f001 fc79 	bl	800aadc <HAL_GetTick>
 80091ea:	4286      	cmp	r6, r0
 80091ec:	d0fb      	beq.n	80091e6 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80091ee:	6821      	ldr	r1, [r4, #0]
 80091f0:	4628      	mov	r0, r5
 80091f2:	f7ff ff9b 	bl	800912c <IS42S32800J_Precharge>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d1ef      	bne.n	80091da <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80091fa:	4628      	mov	r0, r5
 80091fc:	e9d4 1200 	ldrd	r1, r2, [r4]
 8009200:	f7ff ffc8 	bl	8009194 <IS42S32800J_RefreshMode>
 8009204:	2800      	cmp	r0, #0
 8009206:	d1e8      	bne.n	80091da <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8009208:	4621      	mov	r1, r4
 800920a:	4628      	mov	r0, r5
 800920c:	f7ff ffa4 	bl	8009158 <IS42S32800J_ModeRegConfig>
 8009210:	2800      	cmp	r0, #0
 8009212:	d1e2      	bne.n	80091da <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8009214:	68a1      	ldr	r1, [r4, #8]
 8009216:	4628      	mov	r0, r5
 8009218:	f7ff ffd0 	bl	80091bc <IS42S32800J_RefreshRate>
 800921c:	3800      	subs	r0, #0
 800921e:	bf18      	it	ne
 8009220:	2001      	movne	r0, #1
 8009222:	4240      	negs	r0, r0
  return ret;
 8009224:	e7db      	b.n	80091de <IS42S32800J_Init+0x12>

08009226 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009226:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800922a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800922e:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009232:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009236:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800923a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800923e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009242:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8009244:	2000      	movs	r0, #0
 8009246:	4770      	bx	lr

08009248 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009248:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800924a:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 800924e:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009250:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009254:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009256:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009258:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 800925a:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800925c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800925e:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8009260:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009262:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009264:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8009266:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009268:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 800926a:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800926c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800926e:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009272:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8009276:	2310      	movs	r3, #16
 8009278:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800927a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800927e:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8009280:	f240 1301 	movw	r3, #257	@ 0x101
 8009284:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009286:	f241 3388 	movw	r3, #5000	@ 0x1388
 800928a:	f004 fd44 	bl	800dd16 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800928e:	2800      	cmp	r0, #0

}
 8009290:	bf14      	ite	ne
 8009292:	f06f 0004 	mvnne.w	r0, #4
 8009296:	2000      	moveq	r0, #0
 8009298:	b015      	add	sp, #84	@ 0x54
 800929a:	f85d fb04 	ldr.w	pc, [sp], #4

0800929e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800929e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092a0:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80092a4:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80092a6:	bf08      	it	eq
 80092a8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80092ac:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80092ae:	bf18      	it	ne
 80092b0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80092b4:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092b6:	a906      	add	r1, sp, #24
{
 80092b8:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80092ba:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80092bc:	2306      	movs	r3, #6
 80092be:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80092c0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80092c2:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80092c6:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 80092c8:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80092ca:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80092cc:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092d0:	f004 fc20 	bl	800db14 <HAL_QSPI_Command>
 80092d4:	bb20      	cbnz	r0, 8009320 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80092d6:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80092da:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80092dc:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80092de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80092e2:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092e4:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80092e6:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80092ea:	f04f 0310 	mov.w	r3, #16
 80092ee:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80092f2:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092f6:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80092f8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80092fc:	bf14      	ite	ne
 80092fe:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8009302:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009306:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009308:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800930a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800930e:	f004 fd02 	bl	800dd16 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8009312:	2800      	cmp	r0, #0
 8009314:	bf14      	ite	ne
 8009316:	f06f 0004 	mvnne.w	r0, #4
 800931a:	2000      	moveq	r0, #0
}
 800931c:	b015      	add	sp, #84	@ 0x54
 800931e:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8009320:	f06f 0001 	mvn.w	r0, #1
 8009324:	e7fa      	b.n	800931c <MT25TL01G_WriteEnable+0x7e>

08009326 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009326:	2903      	cmp	r1, #3
{
 8009328:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800932a:	bf08      	it	eq
 800932c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8009330:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009332:	bf18      	it	ne
 8009334:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8009338:	4604      	mov	r4, r0
 800933a:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800933c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800933e:	23b7      	movs	r3, #183	@ 0xb7
 8009340:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009342:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009344:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009348:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800934a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800934c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800934e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8009352:	f7ff ffa4 	bl	800929e <MT25TL01G_WriteEnable>
 8009356:	b118      	cbz	r0, 8009360 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8009358:	f06f 0001 	mvn.w	r0, #1
}
 800935c:	b00f      	add	sp, #60	@ 0x3c
 800935e:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009364:	4669      	mov	r1, sp
 8009366:	4620      	mov	r0, r4
 8009368:	f004 fbd4 	bl	800db14 <HAL_QSPI_Command>
 800936c:	2800      	cmp	r0, #0
 800936e:	d1f3      	bne.n	8009358 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8009370:	4629      	mov	r1, r5
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff ff68 	bl	8009248 <MT25TL01G_AutoPollingMemReady>
 8009378:	2800      	cmp	r0, #0
 800937a:	d0ef      	beq.n	800935c <MT25TL01G_Enter4BytesAddressMode+0x36>
 800937c:	e7ec      	b.n	8009358 <MT25TL01G_Enter4BytesAddressMode+0x32>

0800937e <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800937e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009380:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8009384:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009386:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800938a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800938c:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800938e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009390:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009392:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009394:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009398:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800939a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800939c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800939e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093a2:	f004 fbb7 	bl	800db14 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80093a6:	2800      	cmp	r0, #0
}
 80093a8:	bf14      	ite	ne
 80093aa:	f06f 0001 	mvnne.w	r0, #1
 80093ae:	2000      	moveq	r0, #0
 80093b0:	b00f      	add	sp, #60	@ 0x3c
 80093b2:	f85d fb04 	ldr.w	pc, [sp], #4

080093b6 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80093b6:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80093b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80093bc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093be:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80093c2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80093c4:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093c6:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80093c8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80093ca:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80093cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80093d0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80093d2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80093d4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80093d6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093da:	f004 fb9b 	bl	800db14 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80093de:	2800      	cmp	r0, #0
}
 80093e0:	bf14      	ite	ne
 80093e2:	f06f 0001 	mvnne.w	r0, #1
 80093e6:	2000      	moveq	r0, #0
 80093e8:	b00f      	add	sp, #60	@ 0x3c
 80093ea:	f85d fb04 	ldr.w	pc, [sp], #4

080093ee <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80093ee:	b500      	push	{lr}
 80093f0:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80093f2:	2903      	cmp	r1, #3
 80093f4:	d80e      	bhi.n	8009414 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80093f6:	e8df f001 	tbb	[pc, r1]
 80093fa:	2902      	.short	0x2902
 80093fc:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80093fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009402:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8009404:	230e      	movs	r3, #14
 8009406:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800940c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800940e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009412:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8009414:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009416:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800941a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800941e:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8009420:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009426:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009428:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800942a:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800942e:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009430:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009432:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009434:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009438:	f004 fcbe 	bl	800ddb8 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 800943c:	2800      	cmp	r0, #0
}
 800943e:	bf14      	ite	ne
 8009440:	f06f 0005 	mvnne.w	r0, #5
 8009444:	2000      	moveq	r0, #0
 8009446:	b011      	add	sp, #68	@ 0x44
 8009448:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800944c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009450:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8009452:	233d      	movs	r3, #61	@ 0x3d
 8009454:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800945a:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800945c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009460:	e7d7      	b.n	8009412 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009466:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8009468:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800946a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800946c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009470:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009472:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8009476:	e7cc      	b.n	8009412 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009478:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800947c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800947e:	23ed      	movs	r3, #237	@ 0xed
 8009480:	e7f3      	b.n	800946a <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08009482 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009482:	b500      	push	{lr}
 8009484:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8009486:	2903      	cmp	r1, #3
 8009488:	d80e      	bhi.n	80094a8 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800948a:	e8df f001 	tbb	[pc, r1]
 800948e:	2502      	.short	0x2502
 8009490:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009496:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8009498:	230c      	movs	r3, #12
 800949a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800949c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094a0:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80094a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80094a6:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80094a8:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80094aa:	466a      	mov	r2, sp
 80094ac:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80094ae:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80094b0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80094b4:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80094ba:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80094bc:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80094c0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80094c4:	f004 fc78 	bl	800ddb8 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80094c8:	2800      	cmp	r0, #0
}
 80094ca:	bf14      	ite	ne
 80094cc:	f06f 0005 	mvnne.w	r0, #5
 80094d0:	2000      	moveq	r0, #0
 80094d2:	b011      	add	sp, #68	@ 0x44
 80094d4:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80094d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094dc:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80094de:	23bc      	movs	r3, #188	@ 0xbc
 80094e0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80094e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094e6:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80094e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094ec:	e7db      	b.n	80094a6 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80094ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094f2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80094f4:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80094f6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80094f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80094fc:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80094fe:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8009502:	e7d0      	b.n	80094a6 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009504:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009508:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800950a:	23eb      	movs	r3, #235	@ 0xeb
 800950c:	e7f3      	b.n	80094f6 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

0800950e <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800950e:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009510:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8009514:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009516:	bf18      	it	ne
 8009518:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800951c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800951e:	bf08      	it	eq
 8009520:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009524:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009526:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8009528:	2366      	movs	r3, #102	@ 0x66
 800952a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800952c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800952e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009532:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8009534:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009536:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009538:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800953c:	f004 faea 	bl	800db14 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8009540:	2800      	cmp	r0, #0
}
 8009542:	bf14      	ite	ne
 8009544:	f06f 0001 	mvnne.w	r0, #1
 8009548:	2000      	moveq	r0, #0
 800954a:	b00f      	add	sp, #60	@ 0x3c
 800954c:	f85d fb04 	ldr.w	pc, [sp], #4

08009550 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009550:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009552:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8009556:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009558:	bf18      	it	ne
 800955a:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800955e:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009560:	bf08      	it	eq
 8009562:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009566:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009568:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800956a:	2399      	movs	r3, #153	@ 0x99
 800956c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800956e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009570:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009574:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8009576:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009578:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800957a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800957e:	f004 fac9 	bl	800db14 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8009582:	2800      	cmp	r0, #0
}
 8009584:	bf14      	ite	ne
 8009586:	f06f 0001 	mvnne.w	r0, #1
 800958a:	2000      	moveq	r0, #0
 800958c:	b00f      	add	sp, #60	@ 0x3c
 800958e:	f85d fb04 	ldr.w	pc, [sp], #4

08009592 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8009592:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009594:	6884      	ldr	r4, [r0, #8]
 8009596:	8800      	ldrh	r0, [r0, #0]
 8009598:	46a4      	mov	ip, r4
}
 800959a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800959e:	4760      	bx	ip

080095a0 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80095a0:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80095a2:	6844      	ldr	r4, [r0, #4]
 80095a4:	8800      	ldrh	r0, [r0, #0]
 80095a6:	46a4      	mov	ip, r4
}
 80095a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80095ac:	4760      	bx	ip

080095ae <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80095ae:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80095b0:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80095b2:	4604      	mov	r4, r0
 80095b4:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80095b6:	4798      	blx	r3
 80095b8:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80095ba:	68e3      	ldr	r3, [r4, #12]
 80095bc:	4798      	blx	r3
 80095be:	1b83      	subs	r3, r0, r6
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	d3fa      	bcc.n	80095ba <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 80095c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095c8 <OTM8009A_Init>:
{
 80095c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80095cc:	2300      	movs	r3, #0
 80095ce:	f100 0510 	add.w	r5, r0, #16
{
 80095d2:	4607      	mov	r7, r0
 80095d4:	460e      	mov	r6, r1
 80095d6:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80095d8:	4619      	mov	r1, r3
 80095da:	4ade      	ldr	r2, [pc, #888]	@ (8009954 <OTM8009A_Init+0x38c>)
 80095dc:	4628      	mov	r0, r5
 80095de:	f000 fb99 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80095e2:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80095e4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80095e6:	4adc      	ldr	r2, [pc, #880]	@ (8009958 <OTM8009A_Init+0x390>)
 80095e8:	21ff      	movs	r1, #255	@ 0xff
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 fb92 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80095f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80095f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80095f4:	4ad9      	ldr	r2, [pc, #868]	@ (800995c <OTM8009A_Init+0x394>)
 80095f6:	4619      	mov	r1, r3
 80095f8:	4628      	mov	r0, r5
 80095fa:	f000 fb8b 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80095fe:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009600:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8009602:	4ad7      	ldr	r2, [pc, #860]	@ (8009960 <OTM8009A_Init+0x398>)
 8009604:	21ff      	movs	r1, #255	@ 0xff
 8009606:	4628      	mov	r0, r5
 8009608:	f000 fb84 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800960c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800960e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009610:	4ad2      	ldr	r2, [pc, #840]	@ (800995c <OTM8009A_Init+0x394>)
 8009612:	4619      	mov	r1, r3
 8009614:	4628      	mov	r0, r5
 8009616:	f000 fb7d 	bl	8009d14 <otm8009a_write_reg>
 800961a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800961c:	2300      	movs	r3, #0
 800961e:	4ad1      	ldr	r2, [pc, #836]	@ (8009964 <OTM8009A_Init+0x39c>)
 8009620:	21c4      	movs	r1, #196	@ 0xc4
 8009622:	4628      	mov	r0, r5
 8009624:	f000 fb76 	bl	8009d14 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009628:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800962a:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800962c:	4638      	mov	r0, r7
 800962e:	f7ff ffbe 	bl	80095ae <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8009632:	2300      	movs	r3, #0
 8009634:	4acc      	ldr	r2, [pc, #816]	@ (8009968 <OTM8009A_Init+0x3a0>)
 8009636:	4628      	mov	r0, r5
 8009638:	4619      	mov	r1, r3
 800963a:	f000 fb6b 	bl	8009d14 <otm8009a_write_reg>
 800963e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009640:	2300      	movs	r3, #0
 8009642:	4aca      	ldr	r2, [pc, #808]	@ (800996c <OTM8009A_Init+0x3a4>)
 8009644:	21c4      	movs	r1, #196	@ 0xc4
 8009646:	4628      	mov	r0, r5
 8009648:	f000 fb64 	bl	8009d14 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 800964c:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800964e:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009650:	4638      	mov	r0, r7
 8009652:	f7ff ffac 	bl	80095ae <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009656:	2300      	movs	r3, #0
 8009658:	4ac5      	ldr	r2, [pc, #788]	@ (8009970 <OTM8009A_Init+0x3a8>)
 800965a:	4628      	mov	r0, r5
 800965c:	4619      	mov	r1, r3
 800965e:	f000 fb59 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009662:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009664:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009666:	4ac3      	ldr	r2, [pc, #780]	@ (8009974 <OTM8009A_Init+0x3ac>)
 8009668:	21c5      	movs	r1, #197	@ 0xc5
 800966a:	4628      	mov	r0, r5
 800966c:	f000 fb52 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009670:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009672:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009674:	4ac0      	ldr	r2, [pc, #768]	@ (8009978 <OTM8009A_Init+0x3b0>)
 8009676:	4619      	mov	r1, r3
 8009678:	4628      	mov	r0, r5
 800967a:	f000 fb4b 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800967e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009680:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009682:	4abe      	ldr	r2, [pc, #760]	@ (800997c <OTM8009A_Init+0x3b4>)
 8009684:	21c5      	movs	r1, #197	@ 0xc5
 8009686:	4628      	mov	r0, r5
 8009688:	f000 fb44 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800968c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800968e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009690:	4abb      	ldr	r2, [pc, #748]	@ (8009980 <OTM8009A_Init+0x3b8>)
 8009692:	4619      	mov	r1, r3
 8009694:	4628      	mov	r0, r5
 8009696:	f000 fb3d 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800969a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800969c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800969e:	4ab9      	ldr	r2, [pc, #740]	@ (8009984 <OTM8009A_Init+0x3bc>)
 80096a0:	21c0      	movs	r1, #192	@ 0xc0
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 fb36 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80096aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096ac:	4aa9      	ldr	r2, [pc, #676]	@ (8009954 <OTM8009A_Init+0x38c>)
 80096ae:	4619      	mov	r1, r3
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 fb2f 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80096b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80096b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80096ba:	4ab3      	ldr	r2, [pc, #716]	@ (8009988 <OTM8009A_Init+0x3c0>)
 80096bc:	21d9      	movs	r1, #217	@ 0xd9
 80096be:	4628      	mov	r0, r5
 80096c0:	f000 fb28 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80096c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80096c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80096c8:	4ab0      	ldr	r2, [pc, #704]	@ (800998c <OTM8009A_Init+0x3c4>)
 80096ca:	4619      	mov	r1, r3
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 fb21 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80096d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80096d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80096d6:	4aae      	ldr	r2, [pc, #696]	@ (8009990 <OTM8009A_Init+0x3c8>)
 80096d8:	21c1      	movs	r1, #193	@ 0xc1
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 fb1a 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80096e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80096e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80096e4:	4aab      	ldr	r2, [pc, #684]	@ (8009994 <OTM8009A_Init+0x3cc>)
 80096e6:	4619      	mov	r1, r3
 80096e8:	4628      	mov	r0, r5
 80096ea:	f000 fb13 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80096ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80096f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80096f2:	4aa9      	ldr	r2, [pc, #676]	@ (8009998 <OTM8009A_Init+0x3d0>)
 80096f4:	21c5      	movs	r1, #197	@ 0xc5
 80096f6:	4628      	mov	r0, r5
 80096f8:	f000 fb0c 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80096fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80096fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009700:	4aa6      	ldr	r2, [pc, #664]	@ (800999c <OTM8009A_Init+0x3d4>)
 8009702:	4619      	mov	r1, r3
 8009704:	4628      	mov	r0, r5
 8009706:	f000 fb05 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800970a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800970c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800970e:	4a9b      	ldr	r2, [pc, #620]	@ (800997c <OTM8009A_Init+0x3b4>)
 8009710:	21c5      	movs	r1, #197	@ 0xc5
 8009712:	4628      	mov	r0, r5
 8009714:	f000 fafe 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009718:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800971a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800971c:	4a8d      	ldr	r2, [pc, #564]	@ (8009954 <OTM8009A_Init+0x38c>)
 800971e:	4619      	mov	r1, r3
 8009720:	4628      	mov	r0, r5
 8009722:	f000 faf7 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009726:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009728:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800972a:	4a9d      	ldr	r2, [pc, #628]	@ (80099a0 <OTM8009A_Init+0x3d8>)
 800972c:	21d8      	movs	r1, #216	@ 0xd8
 800972e:	4628      	mov	r0, r5
 8009730:	f000 faf0 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009734:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009736:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009738:	4a9a      	ldr	r2, [pc, #616]	@ (80099a4 <OTM8009A_Init+0x3dc>)
 800973a:	4619      	mov	r1, r3
 800973c:	4628      	mov	r0, r5
 800973e:	f000 fae9 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009742:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009744:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009746:	4a98      	ldr	r2, [pc, #608]	@ (80099a8 <OTM8009A_Init+0x3e0>)
 8009748:	21c5      	movs	r1, #197	@ 0xc5
 800974a:	4628      	mov	r0, r5
 800974c:	f000 fae2 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009750:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009752:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009754:	4a95      	ldr	r2, [pc, #596]	@ (80099ac <OTM8009A_Init+0x3e4>)
 8009756:	4619      	mov	r1, r3
 8009758:	4628      	mov	r0, r5
 800975a:	f000 fadb 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800975e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009760:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009762:	4a93      	ldr	r2, [pc, #588]	@ (80099b0 <OTM8009A_Init+0x3e8>)
 8009764:	21c0      	movs	r1, #192	@ 0xc0
 8009766:	4628      	mov	r0, r5
 8009768:	f000 fad4 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800976c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800976e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009770:	4a90      	ldr	r2, [pc, #576]	@ (80099b4 <OTM8009A_Init+0x3ec>)
 8009772:	4619      	mov	r1, r3
 8009774:	4628      	mov	r0, r5
 8009776:	f000 facd 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800977a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800977c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800977e:	4a8e      	ldr	r2, [pc, #568]	@ (80099b8 <OTM8009A_Init+0x3f0>)
 8009780:	21c5      	movs	r1, #197	@ 0xc5
 8009782:	4628      	mov	r0, r5
 8009784:	f000 fac6 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009788:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800978a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800978c:	4a8b      	ldr	r2, [pc, #556]	@ (80099bc <OTM8009A_Init+0x3f4>)
 800978e:	4619      	mov	r1, r3
 8009790:	4628      	mov	r0, r5
 8009792:	f000 fabf 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009796:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009798:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800979a:	4a89      	ldr	r2, [pc, #548]	@ (80099c0 <OTM8009A_Init+0x3f8>)
 800979c:	21c4      	movs	r1, #196	@ 0xc4
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 fab8 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80097a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80097a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80097a8:	4a78      	ldr	r2, [pc, #480]	@ (800998c <OTM8009A_Init+0x3c4>)
 80097aa:	4619      	mov	r1, r3
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 fab1 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80097b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80097b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80097b6:	4a83      	ldr	r2, [pc, #524]	@ (80099c4 <OTM8009A_Init+0x3fc>)
 80097b8:	21c1      	movs	r1, #193	@ 0xc1
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 faaa 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80097c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80097c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80097c4:	4a80      	ldr	r2, [pc, #512]	@ (80099c8 <OTM8009A_Init+0x400>)
 80097c6:	4619      	mov	r1, r3
 80097c8:	4628      	mov	r0, r5
 80097ca:	f000 faa3 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80097ce:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80097d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80097d2:	4a7e      	ldr	r2, [pc, #504]	@ (80099cc <OTM8009A_Init+0x404>)
 80097d4:	21b3      	movs	r1, #179	@ 0xb3
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 fa9c 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80097dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80097de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80097e0:	4a5e      	ldr	r2, [pc, #376]	@ (800995c <OTM8009A_Init+0x394>)
 80097e2:	4619      	mov	r1, r3
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 fa95 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80097ea:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80097ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80097ee:	4a78      	ldr	r2, [pc, #480]	@ (80099d0 <OTM8009A_Init+0x408>)
 80097f0:	21ce      	movs	r1, #206	@ 0xce
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 fa8e 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80097f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80097fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80097fc:	4a75      	ldr	r2, [pc, #468]	@ (80099d4 <OTM8009A_Init+0x40c>)
 80097fe:	4619      	mov	r1, r3
 8009800:	4628      	mov	r0, r5
 8009802:	f000 fa87 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009806:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009808:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800980a:	4a73      	ldr	r2, [pc, #460]	@ (80099d8 <OTM8009A_Init+0x410>)
 800980c:	21ce      	movs	r1, #206	@ 0xce
 800980e:	4628      	mov	r0, r5
 8009810:	f000 fa80 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009814:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009816:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009818:	4a70      	ldr	r2, [pc, #448]	@ (80099dc <OTM8009A_Init+0x414>)
 800981a:	4619      	mov	r1, r3
 800981c:	4628      	mov	r0, r5
 800981e:	f000 fa79 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009822:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009824:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009826:	4a6e      	ldr	r2, [pc, #440]	@ (80099e0 <OTM8009A_Init+0x418>)
 8009828:	21ce      	movs	r1, #206	@ 0xce
 800982a:	4628      	mov	r0, r5
 800982c:	f000 fa72 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009830:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009832:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009834:	4a6b      	ldr	r2, [pc, #428]	@ (80099e4 <OTM8009A_Init+0x41c>)
 8009836:	4619      	mov	r1, r3
 8009838:	4628      	mov	r0, r5
 800983a:	f000 fa6b 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800983e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009840:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009842:	4a69      	ldr	r2, [pc, #420]	@ (80099e8 <OTM8009A_Init+0x420>)
 8009844:	21cf      	movs	r1, #207	@ 0xcf
 8009846:	4628      	mov	r0, r5
 8009848:	f000 fa64 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800984c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800984e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009850:	4a66      	ldr	r2, [pc, #408]	@ (80099ec <OTM8009A_Init+0x424>)
 8009852:	4619      	mov	r1, r3
 8009854:	4628      	mov	r0, r5
 8009856:	f000 fa5d 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800985a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800985c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800985e:	4a64      	ldr	r2, [pc, #400]	@ (80099f0 <OTM8009A_Init+0x428>)
 8009860:	21cf      	movs	r1, #207	@ 0xcf
 8009862:	4628      	mov	r0, r5
 8009864:	f000 fa56 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009868:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800986a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800986c:	4a3b      	ldr	r2, [pc, #236]	@ (800995c <OTM8009A_Init+0x394>)
 800986e:	4619      	mov	r1, r3
 8009870:	4628      	mov	r0, r5
 8009872:	f000 fa4f 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009876:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009878:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800987a:	4a5e      	ldr	r2, [pc, #376]	@ (80099f4 <OTM8009A_Init+0x42c>)
 800987c:	21cb      	movs	r1, #203	@ 0xcb
 800987e:	4628      	mov	r0, r5
 8009880:	f000 fa48 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009884:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009886:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009888:	4a5b      	ldr	r2, [pc, #364]	@ (80099f8 <OTM8009A_Init+0x430>)
 800988a:	4619      	mov	r1, r3
 800988c:	4628      	mov	r0, r5
 800988e:	f000 fa41 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009892:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009894:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009896:	4a59      	ldr	r2, [pc, #356]	@ (80099fc <OTM8009A_Init+0x434>)
 8009898:	21cb      	movs	r1, #203	@ 0xcb
 800989a:	4628      	mov	r0, r5
 800989c:	f000 fa3a 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80098a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80098a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80098a4:	4a4b      	ldr	r2, [pc, #300]	@ (80099d4 <OTM8009A_Init+0x40c>)
 80098a6:	4619      	mov	r1, r3
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 fa33 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80098ae:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80098b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80098b2:	4a53      	ldr	r2, [pc, #332]	@ (8009a00 <OTM8009A_Init+0x438>)
 80098b4:	21cb      	movs	r1, #203	@ 0xcb
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 fa2c 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80098bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80098be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80098c0:	4a46      	ldr	r2, [pc, #280]	@ (80099dc <OTM8009A_Init+0x414>)
 80098c2:	4619      	mov	r1, r3
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 fa25 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80098ca:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80098cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80098ce:	4a4d      	ldr	r2, [pc, #308]	@ (8009a04 <OTM8009A_Init+0x43c>)
 80098d0:	21cb      	movs	r1, #203	@ 0xcb
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 fa1e 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80098d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80098da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80098dc:	4a41      	ldr	r2, [pc, #260]	@ (80099e4 <OTM8009A_Init+0x41c>)
 80098de:	4619      	mov	r1, r3
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 fa17 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80098e6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80098e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80098ea:	4a47      	ldr	r2, [pc, #284]	@ (8009a08 <OTM8009A_Init+0x440>)
 80098ec:	21cb      	movs	r1, #203	@ 0xcb
 80098ee:	4628      	mov	r0, r5
 80098f0:	f000 fa10 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80098f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80098f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80098f8:	4a3c      	ldr	r2, [pc, #240]	@ (80099ec <OTM8009A_Init+0x424>)
 80098fa:	4619      	mov	r1, r3
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 fa09 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009902:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009904:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009906:	4a41      	ldr	r2, [pc, #260]	@ (8009a0c <OTM8009A_Init+0x444>)
 8009908:	21cb      	movs	r1, #203	@ 0xcb
 800990a:	4628      	mov	r0, r5
 800990c:	f000 fa02 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009910:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009912:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009914:	4a3e      	ldr	r2, [pc, #248]	@ (8009a10 <OTM8009A_Init+0x448>)
 8009916:	4619      	mov	r1, r3
 8009918:	4628      	mov	r0, r5
 800991a:	f000 f9fb 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800991e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009920:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009922:	4a3c      	ldr	r2, [pc, #240]	@ (8009a14 <OTM8009A_Init+0x44c>)
 8009924:	21cb      	movs	r1, #203	@ 0xcb
 8009926:	4628      	mov	r0, r5
 8009928:	f000 f9f4 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800992c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800992e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009930:	4a39      	ldr	r2, [pc, #228]	@ (8009a18 <OTM8009A_Init+0x450>)
 8009932:	4619      	mov	r1, r3
 8009934:	4628      	mov	r0, r5
 8009936:	f000 f9ed 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800993a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800993c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800993e:	4a37      	ldr	r2, [pc, #220]	@ (8009a1c <OTM8009A_Init+0x454>)
 8009940:	21cb      	movs	r1, #203	@ 0xcb
 8009942:	4628      	mov	r0, r5
 8009944:	f000 f9e6 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009948:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800994a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800994c:	4a03      	ldr	r2, [pc, #12]	@ (800995c <OTM8009A_Init+0x394>)
 800994e:	4619      	mov	r1, r3
 8009950:	4628      	mov	r0, r5
 8009952:	e065      	b.n	8009a20 <OTM8009A_Init+0x458>
 8009954:	0802d715 	.word	0x0802d715
 8009958:	0802d711 	.word	0x0802d711
 800995c:	0802d716 	.word	0x0802d716
 8009960:	0802d70f 	.word	0x0802d70f
 8009964:	0802d717 	.word	0x0802d717
 8009968:	0802d718 	.word	0x0802d718
 800996c:	0802d719 	.word	0x0802d719
 8009970:	0802d71a 	.word	0x0802d71a
 8009974:	0802d71b 	.word	0x0802d71b
 8009978:	0802d71c 	.word	0x0802d71c
 800997c:	0802d71d 	.word	0x0802d71d
 8009980:	0802d71e 	.word	0x0802d71e
 8009984:	0802d71f 	.word	0x0802d71f
 8009988:	0802d720 	.word	0x0802d720
 800998c:	0802d723 	.word	0x0802d723
 8009990:	0802d724 	.word	0x0802d724
 8009994:	0802d725 	.word	0x0802d725
 8009998:	0802d726 	.word	0x0802d726
 800999c:	0802d727 	.word	0x0802d727
 80099a0:	0802d70d 	.word	0x0802d70d
 80099a4:	0802d728 	.word	0x0802d728
 80099a8:	0802d729 	.word	0x0802d729
 80099ac:	0802d72a 	.word	0x0802d72a
 80099b0:	0802d72b 	.word	0x0802d72b
 80099b4:	0802d72c 	.word	0x0802d72c
 80099b8:	0802d72d 	.word	0x0802d72d
 80099bc:	0802d721 	.word	0x0802d721
 80099c0:	0802d72e 	.word	0x0802d72e
 80099c4:	0802d72f 	.word	0x0802d72f
 80099c8:	0802d730 	.word	0x0802d730
 80099cc:	0802d70b 	.word	0x0802d70b
 80099d0:	0802d705 	.word	0x0802d705
 80099d4:	0802d731 	.word	0x0802d731
 80099d8:	0802d6f7 	.word	0x0802d6f7
 80099dc:	0802d732 	.word	0x0802d732
 80099e0:	0802d6e9 	.word	0x0802d6e9
 80099e4:	0802d733 	.word	0x0802d733
 80099e8:	0802d6df 	.word	0x0802d6df
 80099ec:	0802d734 	.word	0x0802d734
 80099f0:	0802d741 	.word	0x0802d741
 80099f4:	0802d6d5 	.word	0x0802d6d5
 80099f8:	0802d735 	.word	0x0802d735
 80099fc:	0802d6c6 	.word	0x0802d6c6
 8009a00:	0802d6b7 	.word	0x0802d6b7
 8009a04:	0802d6ad 	.word	0x0802d6ad
 8009a08:	0802d69e 	.word	0x0802d69e
 8009a0c:	0802d68f 	.word	0x0802d68f
 8009a10:	0802d736 	.word	0x0802d736
 8009a14:	0802d685 	.word	0x0802d685
 8009a18:	0802d737 	.word	0x0802d737
 8009a1c:	0802d67b 	.word	0x0802d67b
 8009a20:	f000 f978 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009a24:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009a26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009a28:	4a8e      	ldr	r2, [pc, #568]	@ (8009c64 <OTM8009A_Init+0x69c>)
 8009a2a:	21cc      	movs	r1, #204	@ 0xcc
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f000 f971 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009a32:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009a34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009a36:	4a8c      	ldr	r2, [pc, #560]	@ (8009c68 <OTM8009A_Init+0x6a0>)
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f000 f96a 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009a40:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009a42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009a44:	4a89      	ldr	r2, [pc, #548]	@ (8009c6c <OTM8009A_Init+0x6a4>)
 8009a46:	21cc      	movs	r1, #204	@ 0xcc
 8009a48:	4628      	mov	r0, r5
 8009a4a:	f000 f963 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009a4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009a50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009a52:	4a87      	ldr	r2, [pc, #540]	@ (8009c70 <OTM8009A_Init+0x6a8>)
 8009a54:	4619      	mov	r1, r3
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 f95c 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009a5c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009a5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009a60:	4a84      	ldr	r2, [pc, #528]	@ (8009c74 <OTM8009A_Init+0x6ac>)
 8009a62:	21cc      	movs	r1, #204	@ 0xcc
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 f955 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009a6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009a6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009a6e:	4a82      	ldr	r2, [pc, #520]	@ (8009c78 <OTM8009A_Init+0x6b0>)
 8009a70:	4619      	mov	r1, r3
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 f94e 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009a78:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009a7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009a7c:	4a7f      	ldr	r2, [pc, #508]	@ (8009c7c <OTM8009A_Init+0x6b4>)
 8009a7e:	21cc      	movs	r1, #204	@ 0xcc
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 f947 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009a86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009a88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009a8a:	4a7d      	ldr	r2, [pc, #500]	@ (8009c80 <OTM8009A_Init+0x6b8>)
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f000 f940 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009a94:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009a96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009a98:	4a7a      	ldr	r2, [pc, #488]	@ (8009c84 <OTM8009A_Init+0x6bc>)
 8009a9a:	21cc      	movs	r1, #204	@ 0xcc
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f000 f939 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009aa2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009aa4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009aa6:	4a78      	ldr	r2, [pc, #480]	@ (8009c88 <OTM8009A_Init+0x6c0>)
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f932 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009ab0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009ab2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009ab4:	4a75      	ldr	r2, [pc, #468]	@ (8009c8c <OTM8009A_Init+0x6c4>)
 8009ab6:	21cc      	movs	r1, #204	@ 0xcc
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 f92b 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009abe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009ac0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009ac2:	4a73      	ldr	r2, [pc, #460]	@ (8009c90 <OTM8009A_Init+0x6c8>)
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 f924 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009acc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009ace:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009ad0:	4a70      	ldr	r2, [pc, #448]	@ (8009c94 <OTM8009A_Init+0x6cc>)
 8009ad2:	21c5      	movs	r1, #197	@ 0xc5
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f000 f91d 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009ada:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009adc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009ade:	4a6e      	ldr	r2, [pc, #440]	@ (8009c98 <OTM8009A_Init+0x6d0>)
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f916 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009ae8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009aea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009aec:	4a6b      	ldr	r2, [pc, #428]	@ (8009c9c <OTM8009A_Init+0x6d4>)
 8009aee:	21f5      	movs	r1, #245	@ 0xf5
 8009af0:	4628      	mov	r0, r5
 8009af2:	f000 f90f 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009af6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009af8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009afa:	4a69      	ldr	r2, [pc, #420]	@ (8009ca0 <OTM8009A_Init+0x6d8>)
 8009afc:	4619      	mov	r1, r3
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 f908 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009b04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009b06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009b08:	4a66      	ldr	r2, [pc, #408]	@ (8009ca4 <OTM8009A_Init+0x6dc>)
 8009b0a:	21c6      	movs	r1, #198	@ 0xc6
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f000 f901 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009b14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b16:	4a64      	ldr	r2, [pc, #400]	@ (8009ca8 <OTM8009A_Init+0x6e0>)
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f000 f8fa 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009b20:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009b24:	4a61      	ldr	r2, [pc, #388]	@ (8009cac <OTM8009A_Init+0x6e4>)
 8009b26:	21ff      	movs	r1, #255	@ 0xff
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f000 f8f3 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009b30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b32:	4a5d      	ldr	r2, [pc, #372]	@ (8009ca8 <OTM8009A_Init+0x6e0>)
 8009b34:	4619      	mov	r1, r3
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 f8ec 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b40:	4a59      	ldr	r2, [pc, #356]	@ (8009ca8 <OTM8009A_Init+0x6e0>)
 8009b42:	4619      	mov	r1, r3
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f8e5 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009b4a:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009b4e:	4a58      	ldr	r2, [pc, #352]	@ (8009cb0 <OTM8009A_Init+0x6e8>)
 8009b50:	21e1      	movs	r1, #225	@ 0xe1
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f8de 	bl	8009d14 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009b5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b5c:	4a52      	ldr	r2, [pc, #328]	@ (8009ca8 <OTM8009A_Init+0x6e0>)
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4628      	mov	r0, r5
 8009b62:	f000 f8d7 	bl	8009d14 <otm8009a_write_reg>
 8009b66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8009b68:	2310      	movs	r3, #16
 8009b6a:	4a52      	ldr	r2, [pc, #328]	@ (8009cb4 <OTM8009A_Init+0x6ec>)
 8009b6c:	21e2      	movs	r1, #226	@ 0xe2
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f8d0 	bl	8009d14 <otm8009a_write_reg>
 8009b74:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8009b76:	2300      	movs	r3, #0
 8009b78:	4a4f      	ldr	r2, [pc, #316]	@ (8009cb8 <OTM8009A_Init+0x6f0>)
 8009b7a:	2111      	movs	r1, #17
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f000 f8c9 	bl	8009d14 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8009b82:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8009b84:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8009b86:	4638      	mov	r0, r7
 8009b88:	f7ff fd11 	bl	80095ae <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8009b8c:	4f4b      	ldr	r7, [pc, #300]	@ (8009cbc <OTM8009A_Init+0x6f4>)
 8009b8e:	2e00      	cmp	r6, #0
 8009b90:	d061      	beq.n	8009c56 <OTM8009A_Init+0x68e>
 8009b92:	2e02      	cmp	r6, #2
 8009b94:	d107      	bne.n	8009ba6 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8009b96:	2300      	movs	r3, #0
 8009b98:	4a49      	ldr	r2, [pc, #292]	@ (8009cc0 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8009b9a:	213a      	movs	r1, #58	@ 0x3a
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	f000 f8b9 	bl	8009d14 <otm8009a_write_reg>
 8009ba2:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8009ba4:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8009ba6:	f1b8 0f01 	cmp.w	r8, #1
 8009baa:	d157      	bne.n	8009c5c <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8009bac:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009bae:	f10d 0207 	add.w	r2, sp, #7
 8009bb2:	2136      	movs	r1, #54	@ 0x36
 8009bb4:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8009bb6:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f000 f8aa 	bl	8009d14 <otm8009a_write_reg>
 8009bc0:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8009bc2:	2304      	movs	r3, #4
 8009bc4:	4a3f      	ldr	r2, [pc, #252]	@ (8009cc4 <OTM8009A_Init+0x6fc>)
 8009bc6:	212a      	movs	r1, #42	@ 0x2a
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f000 f8a3 	bl	8009d14 <otm8009a_write_reg>
 8009bce:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8009cc8 <OTM8009A_Init+0x700>)
 8009bd4:	212b      	movs	r1, #43	@ 0x2b
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f000 f89c 	bl	8009d14 <otm8009a_write_reg>
 8009bdc:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8009bde:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8009be2:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8009be4:	2300      	movs	r3, #0
 8009be6:	4a39      	ldr	r2, [pc, #228]	@ (8009ccc <OTM8009A_Init+0x704>)
 8009be8:	2151      	movs	r1, #81	@ 0x51
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f892 	bl	8009d14 <otm8009a_write_reg>
 8009bf0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8009bf2:	4633      	mov	r3, r6
 8009bf4:	4a36      	ldr	r2, [pc, #216]	@ (8009cd0 <OTM8009A_Init+0x708>)
 8009bf6:	2153      	movs	r1, #83	@ 0x53
 8009bf8:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8009bfa:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8009bfc:	f000 f88a 	bl	8009d14 <otm8009a_write_reg>
 8009c00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8009c02:	4633      	mov	r3, r6
 8009c04:	4a33      	ldr	r2, [pc, #204]	@ (8009cd4 <OTM8009A_Init+0x70c>)
 8009c06:	2155      	movs	r1, #85	@ 0x55
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 f883 	bl	8009d14 <otm8009a_write_reg>
 8009c0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8009c10:	4633      	mov	r3, r6
 8009c12:	4a31      	ldr	r2, [pc, #196]	@ (8009cd8 <OTM8009A_Init+0x710>)
 8009c14:	215e      	movs	r1, #94	@ 0x5e
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 f87c 	bl	8009d14 <otm8009a_write_reg>
 8009c1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8009c1e:	4633      	mov	r3, r6
 8009c20:	4a2e      	ldr	r2, [pc, #184]	@ (8009cdc <OTM8009A_Init+0x714>)
 8009c22:	2129      	movs	r1, #41	@ 0x29
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 f875 	bl	8009d14 <otm8009a_write_reg>
 8009c2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009c2c:	4633      	mov	r3, r6
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4a1d      	ldr	r2, [pc, #116]	@ (8009ca8 <OTM8009A_Init+0x6e0>)
 8009c32:	4628      	mov	r0, r5
 8009c34:	f000 f86e 	bl	8009d14 <otm8009a_write_reg>
 8009c38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8009c3a:	4633      	mov	r3, r6
 8009c3c:	4a28      	ldr	r2, [pc, #160]	@ (8009ce0 <OTM8009A_Init+0x718>)
 8009c3e:	212c      	movs	r1, #44	@ 0x2c
 8009c40:	4628      	mov	r0, r5
 8009c42:	f000 f867 	bl	8009d14 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8009c46:	42c4      	cmn	r4, r0
}
 8009c48:	bf14      	ite	ne
 8009c4a:	f04f 30ff 	movne.w	r0, #4294967295
 8009c4e:	4630      	moveq	r0, r6
 8009c50:	b002      	add	sp, #8
 8009c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8009c56:	4633      	mov	r3, r6
 8009c58:	4a22      	ldr	r2, [pc, #136]	@ (8009ce4 <OTM8009A_Init+0x71c>)
 8009c5a:	e79e      	b.n	8009b9a <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	e7bf      	b.n	8009be2 <OTM8009A_Init+0x61a>
 8009c62:	bf00      	nop
 8009c64:	0802d671 	.word	0x0802d671
 8009c68:	0802d735 	.word	0x0802d735
 8009c6c:	0802d662 	.word	0x0802d662
 8009c70:	0802d731 	.word	0x0802d731
 8009c74:	0802d653 	.word	0x0802d653
 8009c78:	0802d732 	.word	0x0802d732
 8009c7c:	0802d649 	.word	0x0802d649
 8009c80:	0802d733 	.word	0x0802d733
 8009c84:	0802d63a 	.word	0x0802d63a
 8009c88:	0802d734 	.word	0x0802d734
 8009c8c:	0802d62b 	.word	0x0802d62b
 8009c90:	0802d721 	.word	0x0802d721
 8009c94:	0802d742 	.word	0x0802d742
 8009c98:	0802d743 	.word	0x0802d743
 8009c9c:	0802d744 	.word	0x0802d744
 8009ca0:	0802d745 	.word	0x0802d745
 8009ca4:	0802d746 	.word	0x0802d746
 8009ca8:	0802d715 	.word	0x0802d715
 8009cac:	0802d628 	.word	0x0802d628
 8009cb0:	0802d618 	.word	0x0802d618
 8009cb4:	0802d608 	.word	0x0802d608
 8009cb8:	0802d738 	.word	0x0802d738
 8009cbc:	2400e5b8 	.word	0x2400e5b8
 8009cc0:	0802d739 	.word	0x0802d739
 8009cc4:	0802d74b 	.word	0x0802d74b
 8009cc8:	0802d747 	.word	0x0802d747
 8009ccc:	0802d73b 	.word	0x0802d73b
 8009cd0:	0802d73c 	.word	0x0802d73c
 8009cd4:	0802d73d 	.word	0x0802d73d
 8009cd8:	0802d73e 	.word	0x0802d73e
 8009cdc:	0802d73f 	.word	0x0802d73f
 8009ce0:	0802d740 	.word	0x0802d740
 8009ce4:	0802d73a 	.word	0x0802d73a

08009ce8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8009ce8:	b160      	cbz	r0, 8009d04 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009cea:	684b      	ldr	r3, [r1, #4]
 8009cec:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009cee:	688b      	ldr	r3, [r1, #8]
 8009cf0:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8009cf2:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8009cf4:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8009cf6:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8009cf8:	4b04      	ldr	r3, [pc, #16]	@ (8009d0c <OTM8009A_RegisterBusIO+0x24>)
 8009cfa:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8009cfc:	4b04      	ldr	r3, [pc, #16]	@ (8009d10 <OTM8009A_RegisterBusIO+0x28>)
 8009cfe:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8009d00:	2000      	movs	r0, #0
 8009d02:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	08009593 	.word	0x08009593
 8009d10:	080095a1 	.word	0x080095a1

08009d14 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8009d14:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8009d16:	6804      	ldr	r4, [r0, #0]
 8009d18:	6880      	ldr	r0, [r0, #8]
 8009d1a:	46a4      	mov	ip, r4
}
 8009d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8009d20:	4760      	bx	ip
	...

08009d24 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8009d24:	4a10      	ldr	r2, [pc, #64]	@ (8009d68 <BSP_I2C4_DeInit+0x44>)
{
 8009d26:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8009d28:	6813      	ldr	r3, [r2, #0]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8009d2e:	b10b      	cbz	r3, 8009d34 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8009d30:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8009d32:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8009d34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009d38:	480c      	ldr	r0, [pc, #48]	@ (8009d6c <BSP_I2C4_DeInit+0x48>)
 8009d3a:	f001 fe3d 	bl	800b9b8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8009d3e:	480b      	ldr	r0, [pc, #44]	@ (8009d6c <BSP_I2C4_DeInit+0x48>)
 8009d40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009d44:	f001 fe38 	bl	800b9b8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8009d48:	4a09      	ldr	r2, [pc, #36]	@ (8009d70 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009d4a:	480a      	ldr	r0, [pc, #40]	@ (8009d74 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8009d4c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8009d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009d58:	f002 f87e 	bl	800be58 <HAL_I2C_DeInit>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d0e7      	beq.n	8009d30 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8009d60:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009d64:	e7e5      	b.n	8009d32 <BSP_I2C4_DeInit+0xe>
 8009d66:	bf00      	nop
 8009d68:	2400f01c 	.word	0x2400f01c
 8009d6c:	58020c00 	.word	0x58020c00
 8009d70:	58024400 	.word	0x58024400
 8009d74:	2400e5c4 	.word	0x2400e5c4

08009d78 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2201      	movs	r2, #1
{
 8009d7c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8009d7e:	6041      	str	r1, [r0, #4]
{
 8009d80:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009d82:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009d84:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8009d88:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009d8c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009d90:	f002 f80c 	bl	800bdac <HAL_I2C_Init>
 8009d94:	4601      	mov	r1, r0
 8009d96:	b108      	cbz	r0, 8009d9c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8009d98:	2001      	movs	r0, #1
}
 8009d9a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f002 fa32 	bl	800c206 <HAL_I2CEx_ConfigAnalogFilter>
 8009da2:	4601      	mov	r1, r0
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d1f7      	bne.n	8009d98 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009da8:	4620      	mov	r0, r4
 8009daa:	f002 fa52 	bl	800c252 <HAL_I2CEx_ConfigDigitalFilter>
 8009dae:	3800      	subs	r0, #0
 8009db0:	bf18      	it	ne
 8009db2:	2001      	movne	r0, #1
 8009db4:	e7f1      	b.n	8009d9a <MX_I2C4_Init+0x22>
	...

08009db8 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8009db8:	4ba1      	ldr	r3, [pc, #644]	@ (800a040 <BSP_I2C4_Init+0x288>)
 8009dba:	48a2      	ldr	r0, [pc, #648]	@ (800a044 <BSP_I2C4_Init+0x28c>)
{
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8009dc0:	6003      	str	r3, [r0, #0]
{
 8009dc2:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8009dc4:	4ba0      	ldr	r3, [pc, #640]	@ (800a048 <BSP_I2C4_Init+0x290>)
 8009dc6:	681c      	ldr	r4, [r3, #0]
 8009dc8:	b11c      	cbz	r4, 8009dd2 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8009dca:	2000      	movs	r0, #0
}
 8009dcc:	b013      	add	sp, #76	@ 0x4c
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8009dd6:	f002 fa11 	bl	800c1fc <HAL_I2C_GetState>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d1f5      	bne.n	8009dca <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009dde:	4d9b      	ldr	r5, [pc, #620]	@ (800a04c <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009de0:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009de4:	2702      	movs	r7, #2
 8009de6:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009de8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009dec:	a90d      	add	r1, sp, #52	@ 0x34
 8009dee:	4898      	ldr	r0, [pc, #608]	@ (800a050 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009df0:	f043 0308 	orr.w	r3, r3, #8
 8009df4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8009df8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8009dfc:	f003 0308 	and.w	r3, r3, #8
 8009e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8009e04:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8009e08:	f043 0308 	orr.w	r3, r3, #8
 8009e0c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8009e10:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009e14:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8009e16:	f003 0308 	and.w	r3, r3, #8
 8009e1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009e22:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009e26:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009e2a:	f001 fcdd 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8009e2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009e32:	a90d      	add	r1, sp, #52	@ 0x34
 8009e34:	4886      	ldr	r0, [pc, #536]	@ (800a050 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8009e36:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009e38:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009e3c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009e40:	f001 fcd2 	bl	800b7e8 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8009e44:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8009e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4c:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8009e50:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8009e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e58:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8009e5c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8009e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e64:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8009e68:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8009e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e70:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009e74:	f004 fcd8 	bl	800e828 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d06f      	beq.n	8009f5c <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009e7c:	4b75      	ldr	r3, [pc, #468]	@ (800a054 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8009e7e:	4622      	mov	r2, r4
 8009e80:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8009e82:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009e86:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009e8a:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 800a05c <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009e8e:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009e92:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009e96:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8009e9a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009e9c:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009ea0:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8009ea4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8009ea8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8009eac:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009eae:	4b6a      	ldr	r3, [pc, #424]	@ (800a058 <BSP_I2C4_Init+0x2a0>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
{
 8009eb2:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009eb4:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8009eb8:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8009ebc:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009ec0:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8009ec4:	d35d      	bcc.n	8009f82 <BSP_I2C4_Init+0x1ca>
 8009ec6:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009ec8:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009eca:	9d00      	ldr	r5, [sp, #0]
 8009ecc:	42bd      	cmp	r5, r7
 8009ece:	d852      	bhi.n	8009f76 <BSP_I2C4_Init+0x1be>
 8009ed0:	42be      	cmp	r6, r7
 8009ed2:	d350      	bcc.n	8009f76 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8009ed4:	4591      	cmp	r9, r2
 8009ed6:	d04e      	beq.n	8009f76 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ed8:	2514      	movs	r5, #20
 8009eda:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8009ede:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009ee0:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ee2:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009ee6:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009ee8:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009eec:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009ef0:	d93e      	bls.n	8009f70 <BSP_I2C4_Init+0x1b8>
 8009ef2:	4a59      	ldr	r2, [pc, #356]	@ (800a058 <BSP_I2C4_Init+0x2a0>)
 8009ef4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009ef6:	4b58      	ldr	r3, [pc, #352]	@ (800a058 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009ef8:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8009efc:	f04f 32ff 	mov.w	r2, #4294967295
 8009f00:	4956      	ldr	r1, [pc, #344]	@ (800a05c <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009f02:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009f04:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009f06:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009f08:	0043      	lsls	r3, r0, #1
 8009f0a:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8009f0e:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8009f12:	f10b 0b01 	add.w	fp, fp, #1
 8009f16:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8009f1a:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8009f1e:	9508      	str	r5, [sp, #32]
 8009f20:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009f22:	9b05      	ldr	r3, [sp, #20]
 8009f24:	429f      	cmp	r7, r3
 8009f26:	d138      	bne.n	8009f9a <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8009f28:	9b01      	ldr	r3, [sp, #4]
 8009f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f2c:	d816      	bhi.n	8009f5c <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f2e:	2114      	movs	r1, #20
 8009f30:	9a01      	ldr	r2, [sp, #4]
 8009f32:	4b4a      	ldr	r3, [pc, #296]	@ (800a05c <BSP_I2C4_Init+0x2a4>)
 8009f34:	434a      	muls	r2, r1
 8009f36:	1899      	adds	r1, r3, r2
 8009f38:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009f3a:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f3c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009f40:	684b      	ldr	r3, [r1, #4]
 8009f42:	051b      	lsls	r3, r3, #20
 8009f44:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f48:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009f4a:	688b      	ldr	r3, [r1, #8]
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f52:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009f54:	68cb      	ldr	r3, [r1, #12]
 8009f56:	021b      	lsls	r3, r3, #8
 8009f58:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009f5a:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4839      	ldr	r0, [pc, #228]	@ (800a044 <BSP_I2C4_Init+0x28c>)
 8009f60:	f7ff ff0a 	bl	8009d78 <MX_I2C4_Init>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f43f af30 	beq.w	8009dca <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8009f6a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009f6e:	e72d      	b.n	8009dcc <BSP_I2C4_Init+0x14>
 8009f70:	4691      	mov	r9, r2
 8009f72:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009f76:	f10e 0e01 	add.w	lr, lr, #1
 8009f7a:	440f      	add	r7, r1
 8009f7c:	f1be 0f10 	cmp.w	lr, #16
 8009f80:	d1a3      	bne.n	8009eca <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009f82:	f1bc 0f10 	cmp.w	ip, #16
 8009f86:	4488      	add	r8, r1
 8009f88:	d196      	bne.n	8009eb8 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009f8a:	3201      	adds	r2, #1
 8009f8c:	4401      	add	r1, r0
 8009f8e:	2a10      	cmp	r2, #16
 8009f90:	d18f      	bne.n	8009eb2 <BSP_I2C4_Init+0xfa>
 8009f92:	f1ba 0f00 	cmp.w	sl, #0
 8009f96:	d1ac      	bne.n	8009ef2 <BSP_I2C4_Init+0x13a>
 8009f98:	e7ad      	b.n	8009ef6 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009f9a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009f9c:	f04f 0c00 	mov.w	ip, #0
 8009fa0:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009fa2:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009fa6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009fa8:	441d      	add	r5, r3
 8009faa:	441e      	add	r6, r3
 8009fac:	9503      	str	r5, [sp, #12]
 8009fae:	ebab 0503 	sub.w	r5, fp, r3
 8009fb2:	9607      	str	r6, [sp, #28]
 8009fb4:	006d      	lsls	r5, r5, #1
 8009fb6:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009fb8:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009fba:	f240 5214 	movw	r2, #1300	@ 0x514
 8009fbe:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009fc2:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009fc6:	4295      	cmp	r5, r2
 8009fc8:	d92f      	bls.n	800a02a <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009fca:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009fce:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8009fd2:	d22a      	bcs.n	800a02a <BSP_I2C4_Init+0x272>
 8009fd4:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009fd6:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009fda:	f8dd 9000 	ldr.w	r9, [sp]
 8009fde:	442e      	add	r6, r5
 8009fe0:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009fe4:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8009fe8:	f240 4212 	movw	r2, #1042	@ 0x412
 8009fec:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009ff0:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009ff4:	4592      	cmp	sl, r2
 8009ff6:	d811      	bhi.n	800a01c <BSP_I2C4_Init+0x264>
 8009ff8:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8009ffc:	d30e      	bcc.n	800a01c <BSP_I2C4_Init+0x264>
 8009ffe:	4580      	cmp	r8, r0
 800a000:	d90c      	bls.n	800a01c <BSP_I2C4_Init+0x264>
              error = -error;
 800a002:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800a006:	bf28      	it	cs
 800a008:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800a00a:	9a02      	ldr	r2, [sp, #8]
 800a00c:	4592      	cmp	sl, r2
 800a00e:	d205      	bcs.n	800a01c <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 800a010:	9a04      	ldr	r2, [sp, #16]
 800a012:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800a014:	9a06      	ldr	r2, [sp, #24]
 800a016:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 800a01a:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a01c:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 800a020:	4498      	add	r8, r3
 800a022:	441e      	add	r6, r3
 800a024:	eba9 0903 	sub.w	r9, r9, r3
 800a028:	d1dc      	bne.n	8009fe4 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a02a:	9a00      	ldr	r2, [sp, #0]
 800a02c:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800a030:	441d      	add	r5, r3
 800a032:	eba2 0203 	sub.w	r2, r2, r3
 800a036:	9200      	str	r2, [sp, #0]
 800a038:	d1bf      	bne.n	8009fba <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a03a:	3701      	adds	r7, #1
 800a03c:	3114      	adds	r1, #20
 800a03e:	e770      	b.n	8009f22 <BSP_I2C4_Init+0x16a>
 800a040:	58001c00 	.word	0x58001c00
 800a044:	2400e5c4 	.word	0x2400e5c4
 800a048:	2400f01c 	.word	0x2400f01c
 800a04c:	58024400 	.word	0x58024400
 800a050:	58020c00 	.word	0x58020c00
 800a054:	3b9aca00 	.word	0x3b9aca00
 800a058:	2400e618 	.word	0x2400e618
 800a05c:	2400e61c 	.word	0x2400e61c

0800a060 <BSP_I2C4_WriteReg>:
{
 800a060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a062:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800a066:	9200      	str	r2, [sp, #0]
 800a068:	460a      	mov	r2, r1
 800a06a:	4601      	mov	r1, r0
 800a06c:	4808      	ldr	r0, [pc, #32]	@ (800a090 <BSP_I2C4_WriteReg+0x30>)
 800a06e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a072:	2301      	movs	r3, #1
 800a074:	f001 ff0a 	bl	800be8c <HAL_I2C_Mem_Write>
 800a078:	b140      	cbz	r0, 800a08c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a07a:	4805      	ldr	r0, [pc, #20]	@ (800a090 <BSP_I2C4_WriteReg+0x30>)
 800a07c:	f002 f8c1 	bl	800c202 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a080:	2804      	cmp	r0, #4
 800a082:	bf14      	ite	ne
 800a084:	f06f 0003 	mvnne.w	r0, #3
 800a088:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800a08c:	b004      	add	sp, #16
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	2400e5c4 	.word	0x2400e5c4

0800a094 <BSP_I2C4_ReadReg>:
{
 800a094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a096:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800a09a:	9200      	str	r2, [sp, #0]
 800a09c:	460a      	mov	r2, r1
 800a09e:	4601      	mov	r1, r0
 800a0a0:	4808      	ldr	r0, [pc, #32]	@ (800a0c4 <BSP_I2C4_ReadReg+0x30>)
 800a0a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f001 ffca 	bl	800c040 <HAL_I2C_Mem_Read>
 800a0ac:	b140      	cbz	r0, 800a0c0 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a0ae:	4805      	ldr	r0, [pc, #20]	@ (800a0c4 <BSP_I2C4_ReadReg+0x30>)
 800a0b0:	f002 f8a7 	bl	800c202 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800a0b4:	2804      	cmp	r0, #4
 800a0b6:	bf14      	ite	ne
 800a0b8:	f06f 0003 	mvnne.w	r0, #3
 800a0bc:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800a0c0:	b004      	add	sp, #16
 800a0c2:	bd10      	pop	{r4, pc}
 800a0c4:	2400e5c4 	.word	0x2400e5c4

0800a0c8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800a0c8:	f000 bd08 	b.w	800aadc <HAL_GetTick>

0800a0cc <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800a0cc:	4a09      	ldr	r2, [pc, #36]	@ (800a0f4 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a0ce:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800a0d2:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a0d4:	684a      	ldr	r2, [r1, #4]
 800a0d6:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800a0d8:	2201      	movs	r2, #1
 800a0da:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800a0dc:	688a      	ldr	r2, [r1, #8]
 800a0de:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800a0e0:	680a      	ldr	r2, [r1, #0]
 800a0e2:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800a0ea:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800a0ec:	68ca      	ldr	r2, [r1, #12]
 800a0ee:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800a0f0:	f003 bcc4 	b.w	800da7c <HAL_QSPI_Init>
 800a0f4:	52005000 	.word	0x52005000

0800a0f8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800a0f8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a0fa:	b988      	cbnz	r0, 800a120 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a0fc:	4c0a      	ldr	r4, [pc, #40]	@ (800a128 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800a0fe:	480b      	ldr	r0, [pc, #44]	@ (800a12c <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a100:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a102:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a104:	b94b      	cbnz	r3, 800a11a <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a106:	f7ff f9bc 	bl	8009482 <MT25TL01G_EnableMemoryMappedModeSTR>
 800a10a:	b110      	cbz	r0, 800a112 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a10c:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800a110:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a112:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800a114:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a116:	7023      	strb	r3, [r4, #0]
 800a118:	e7fa      	b.n	800a110 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a11a:	f7ff f968 	bl	80093ee <MT25TL01G_EnableMemoryMappedModeDTR>
 800a11e:	e7f4      	b.n	800a10a <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 800a120:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a124:	e7f4      	b.n	800a110 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800a126:	bf00      	nop
 800a128:	2400f020 	.word	0x2400f020
 800a12c:	24000460 	.word	0x24000460

0800a130 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	460c      	mov	r4, r1
 800a134:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a136:	bb30      	cbnz	r0, 800a186 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800a138:	4d17      	ldr	r5, [pc, #92]	@ (800a198 <BSP_QSPI_ConfigFlash+0x68>)
 800a13a:	782b      	ldrb	r3, [r5, #0]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d025      	beq.n	800a18c <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a140:	fab2 f382 	clz	r3, r2
 800a144:	4e15      	ldr	r6, [pc, #84]	@ (800a19c <BSP_QSPI_ConfigFlash+0x6c>)
 800a146:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800a148:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800a14e:	f003 fc95 	bl	800da7c <HAL_QSPI_Init>
 800a152:	b9f0      	cbnz	r0, 800a192 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800a154:	786b      	ldrb	r3, [r5, #1]
 800a156:	2b03      	cmp	r3, #3
 800a158:	d10f      	bne.n	800a17a <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800a15a:	2c03      	cmp	r4, #3
 800a15c:	d105      	bne.n	800a16a <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a15e:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800a160:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800a162:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a164:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800a166:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800a168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff f923 	bl	80093b6 <MT25TL01G_ExitQPIMode>
 800a170:	2800      	cmp	r0, #0
 800a172:	d0f4      	beq.n	800a15e <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800a174:	f06f 0004 	mvn.w	r0, #4
 800a178:	e7f6      	b.n	800a168 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 800a17a:	2c03      	cmp	r4, #3
 800a17c:	d1ef      	bne.n	800a15e <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800a17e:	4630      	mov	r0, r6
 800a180:	f7ff f8fd 	bl	800937e <MT25TL01G_EnterQPIMode>
 800a184:	e7f4      	b.n	800a170 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 800a186:	f06f 0001 	mvn.w	r0, #1
 800a18a:	e7ed      	b.n	800a168 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800a18c:	f06f 0019 	mvn.w	r0, #25
 800a190:	e7ea      	b.n	800a168 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a192:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a196:	e7e7      	b.n	800a168 <BSP_QSPI_ConfigFlash+0x38>
 800a198:	2400f020 	.word	0x2400f020
 800a19c:	24000460 	.word	0x24000460

0800a1a0 <BSP_QSPI_Init>:
{
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f040 81ac 	bne.w	800a506 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800a1ae:	4d03      	ldr	r5, [pc, #12]	@ (800a1bc <BSP_QSPI_Init+0x1c>)
 800a1b0:	782f      	ldrb	r7, [r5, #0]
 800a1b2:	b12f      	cbz	r7, 800a1c0 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 800a1b4:	2000      	movs	r0, #0
}
 800a1b6:	b024      	add	sp, #144	@ 0x90
 800a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1bc:	2400f020 	.word	0x2400f020
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800a1c0:	4bc3      	ldr	r3, [pc, #780]	@ (800a4d0 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a1c2:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a1c6:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a1c8:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 800a1ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800a1ce:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a1d2:	48c0      	ldr	r0, [pc, #768]	@ (800a4d4 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a1d4:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800a1d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1dc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800a1e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a1e4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800a1ec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a1ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1f2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800a1f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a1f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a1fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800a1fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a200:	f042 0202 	orr.w	r2, r2, #2
 800a204:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a208:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a20c:	f002 0202 	and.w	r2, r2, #2
 800a210:	9202      	str	r2, [sp, #8]
 800a212:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800a214:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a21c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a220:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a224:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800a228:	9203      	str	r2, [sp, #12]
 800a22a:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800a22c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a230:	f042 0208 	orr.w	r2, r2, #8
 800a234:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a238:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a23c:	f002 0208 	and.w	r2, r2, #8
 800a240:	9204      	str	r2, [sp, #16]
 800a242:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800a244:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a248:	f042 0220 	orr.w	r2, r2, #32
 800a24c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a250:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a254:	f002 0220 	and.w	r2, r2, #32
 800a258:	9205      	str	r2, [sp, #20]
 800a25a:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800a25c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a260:	f042 0220 	orr.w	r2, r2, #32
 800a264:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a268:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a26c:	f002 0220 	and.w	r2, r2, #32
 800a270:	9206      	str	r2, [sp, #24]
 800a272:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800a274:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a278:	f042 0220 	orr.w	r2, r2, #32
 800a27c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a280:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a284:	f002 0220 	and.w	r2, r2, #32
 800a288:	9207      	str	r2, [sp, #28]
 800a28a:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800a28c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a294:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a298:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a29c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800a2a0:	9208      	str	r2, [sp, #32]
 800a2a2:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800a2a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a2a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a2ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a2b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a2b4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800a2b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800a2bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a2c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a2c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a2c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a2cc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800a2d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800a2d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a2d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a2e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a2e4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800a2e8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a2ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800a2ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a2f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a2f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a300:	930c      	str	r3, [sp, #48]	@ 0x30
 800a302:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a304:	2302      	movs	r3, #2
 800a306:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a30a:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a30c:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a30e:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a312:	f001 fa69 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a316:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a318:	a916      	add	r1, sp, #88	@ 0x58
 800a31a:	486f      	ldr	r0, [pc, #444]	@ (800a4d8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a31c:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800a31e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a322:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a326:	f001 fa5f 	bl	800b7e8 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a32a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a32e:	a916      	add	r1, sp, #88	@ 0x58
 800a330:	486a      	ldr	r0, [pc, #424]	@ (800a4dc <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a332:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a334:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a336:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a338:	f001 fa56 	bl	800b7e8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a33c:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800a33e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a342:	4867      	ldr	r0, [pc, #412]	@ (800a4e0 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a344:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a348:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a34a:	f001 fa4d 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a34e:	a916      	add	r1, sp, #88	@ 0x58
 800a350:	4864      	ldr	r0, [pc, #400]	@ (800a4e4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a352:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a356:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a35a:	f001 fa45 	bl	800b7e8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a35e:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a360:	a916      	add	r1, sp, #88	@ 0x58
 800a362:	485f      	ldr	r0, [pc, #380]	@ (800a4e0 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a364:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a366:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a368:	f001 fa3e 	bl	800b7e8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a36c:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a36e:	a916      	add	r1, sp, #88	@ 0x58
 800a370:	485c      	ldr	r0, [pc, #368]	@ (800a4e4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a372:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a374:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a376:	f001 fa37 	bl	800b7e8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a37a:	a916      	add	r1, sp, #88	@ 0x58
 800a37c:	4856      	ldr	r0, [pc, #344]	@ (800a4d8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800a37e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a382:	f001 fa31 	bl	800b7e8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a386:	a916      	add	r1, sp, #88	@ 0x58
 800a388:	4856      	ldr	r0, [pc, #344]	@ (800a4e4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800a38a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a38e:	f001 fa2b 	bl	800b7e8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a392:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a396:	a916      	add	r1, sp, #88	@ 0x58
 800a398:	484f      	ldr	r0, [pc, #316]	@ (800a4d8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a39a:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a39c:	f001 fa24 	bl	800b7e8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800a3a0:	463a      	mov	r2, r7
 800a3a2:	210f      	movs	r1, #15
 800a3a4:	205c      	movs	r0, #92	@ 0x5c
 800a3a6:	f000 fbc9 	bl	800ab3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800a3aa:	205c      	movs	r0, #92	@ 0x5c
 800a3ac:	f000 fbf8 	bl	800aba0 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800a3b0:	a811      	add	r0, sp, #68	@ 0x44
 800a3b2:	f7fe ff38 	bl	8009226 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a3b6:	7863      	ldrb	r3, [r4, #1]
 800a3b8:	4a4b      	ldr	r2, [pc, #300]	@ (800a4e8 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800a3ba:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a3be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a3c2:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a3c6:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a3ca:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 800a3ce:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a3d2:	a90d      	add	r1, sp, #52	@ 0x34
 800a3d4:	4845      	ldr	r0, [pc, #276]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a3d6:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a3d8:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a3da:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a3dc:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a3de:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a3e0:	f7ff fe74 	bl	800a0cc <MX_QSPI_Init>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	f040 8091 	bne.w	800a50c <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a3ea:	2103      	movs	r1, #3
 800a3ec:	483f      	ldr	r0, [pc, #252]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a3ee:	f7ff f88e 	bl	800950e <MT25TL01G_ResetEnable>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f040 8084 	bne.w	800a500 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a3f8:	2103      	movs	r1, #3
 800a3fa:	483c      	ldr	r0, [pc, #240]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a3fc:	f7ff f8a8 	bl	8009550 <MT25TL01G_ResetMemory>
 800a400:	2800      	cmp	r0, #0
 800a402:	d17d      	bne.n	800a500 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a404:	7869      	ldrb	r1, [r5, #1]
 800a406:	4839      	ldr	r0, [pc, #228]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a408:	f7fe ff1e 	bl	8009248 <MT25TL01G_AutoPollingMemReady>
 800a40c:	4601      	mov	r1, r0
 800a40e:	2800      	cmp	r0, #0
 800a410:	d176      	bne.n	800a500 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a412:	4836      	ldr	r0, [pc, #216]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a414:	f7ff f87b 	bl	800950e <MT25TL01G_ResetEnable>
 800a418:	4601      	mov	r1, r0
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d170      	bne.n	800a500 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a41e:	4833      	ldr	r0, [pc, #204]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a420:	f7ff f896 	bl	8009550 <MT25TL01G_ResetMemory>
 800a424:	4601      	mov	r1, r0
 800a426:	2800      	cmp	r0, #0
 800a428:	d16a      	bne.n	800a500 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800a42a:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800a42c:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a42e:	482f      	ldr	r0, [pc, #188]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800a430:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a432:	f7fe ff09 	bl	8009248 <MT25TL01G_AutoPollingMemReady>
 800a436:	2800      	cmp	r0, #0
 800a438:	d162      	bne.n	800a500 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a43a:	7869      	ldrb	r1, [r5, #1]
 800a43c:	482b      	ldr	r0, [pc, #172]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a43e:	f7fe ff72 	bl	8009326 <MT25TL01G_Enter4BytesAddressMode>
 800a442:	2800      	cmp	r0, #0
 800a444:	d15c      	bne.n	800a500 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a446:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 800a44a:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800a44e:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a450:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a454:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a456:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a458:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a45a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800a45c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800a460:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 800a462:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a464:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a468:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a46c:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a470:	481e      	ldr	r0, [pc, #120]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a472:	f003 fb4f 	bl	800db14 <HAL_QSPI_Command>
 800a476:	2800      	cmp	r0, #0
 800a478:	d142      	bne.n	800a500 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a47a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a47e:	f10d 0102 	add.w	r1, sp, #2
 800a482:	481a      	ldr	r0, [pc, #104]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a484:	f003 fbe7 	bl	800dc56 <HAL_QSPI_Receive>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d139      	bne.n	800a500 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a48c:	7869      	ldrb	r1, [r5, #1]
 800a48e:	4817      	ldr	r0, [pc, #92]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a490:	f7fe ff05 	bl	800929e <MT25TL01G_WriteEnable>
 800a494:	bba0      	cbnz	r0, 800a500 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a496:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a49c:	a916      	add	r1, sp, #88	@ 0x58
 800a49e:	4813      	ldr	r0, [pc, #76]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a4a0:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a4a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a4a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a4aa:	051b      	lsls	r3, r3, #20
 800a4ac:	0d1b      	lsrs	r3, r3, #20
 800a4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4b6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a4ba:	f003 fb2b 	bl	800db14 <HAL_QSPI_Command>
 800a4be:	b9f8      	cbnz	r0, 800a500 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a4c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4c4:	f10d 0102 	add.w	r1, sp, #2
 800a4c8:	4808      	ldr	r0, [pc, #32]	@ (800a4ec <BSP_QSPI_Init+0x34c>)
 800a4ca:	f003 fb68 	bl	800db9e <HAL_QSPI_Transmit>
 800a4ce:	e00f      	b.n	800a4f0 <BSP_QSPI_Init+0x350>
 800a4d0:	58024400 	.word	0x58024400
 800a4d4:	58020400 	.word	0x58020400
 800a4d8:	58021800 	.word	0x58021800
 800a4dc:	58020c00 	.word	0x58020c00
 800a4e0:	58021c00 	.word	0x58021c00
 800a4e4:	58021400 	.word	0x58021400
 800a4e8:	0802d750 	.word	0x0802d750
 800a4ec:	24000460 	.word	0x24000460
 800a4f0:	b930      	cbnz	r0, 800a500 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a4f2:	7862      	ldrb	r2, [r4, #1]
 800a4f4:	7821      	ldrb	r1, [r4, #0]
 800a4f6:	f7ff fe1b 	bl	800a130 <BSP_QSPI_ConfigFlash>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	f43f ae5a 	beq.w	800a1b4 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a500:	f06f 0004 	mvn.w	r0, #4
 800a504:	e657      	b.n	800a1b6 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 800a506:	f06f 0001 	mvn.w	r0, #1
 800a50a:	e654      	b.n	800a1b6 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a50c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a510:	e651      	b.n	800a1b6 <BSP_QSPI_Init+0x16>
 800a512:	bf00      	nop

0800a514 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800a514:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800a516:	4604      	mov	r4, r0
 800a518:	b970      	cbnz	r0, 800a538 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800a51a:	4b09      	ldr	r3, [pc, #36]	@ (800a540 <BSP_SDRAM_DeInit+0x2c>)
 800a51c:	4809      	ldr	r0, [pc, #36]	@ (800a544 <BSP_SDRAM_DeInit+0x30>)
 800a51e:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800a520:	f005 f94a 	bl	800f7b8 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800a524:	207a      	movs	r0, #122	@ 0x7a
 800a526:	f000 fb49 	bl	800abbc <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800a52a:	4807      	ldr	r0, [pc, #28]	@ (800a548 <BSP_SDRAM_DeInit+0x34>)
 800a52c:	4b07      	ldr	r3, [pc, #28]	@ (800a54c <BSP_SDRAM_DeInit+0x38>)
 800a52e:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a530:	f003 f82a 	bl	800d588 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800a534:	4620      	mov	r0, r4
}
 800a536:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800a538:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a53c:	e7fb      	b.n	800a536 <BSP_SDRAM_DeInit+0x22>
 800a53e:	bf00      	nop
 800a540:	52004140 	.word	0x52004140
 800a544:	2400f124 	.word	0x2400f124
 800a548:	2400f02c 	.word	0x2400f02c
 800a54c:	52000040 	.word	0x52000040

0800a550 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800a550:	2201      	movs	r2, #1
 800a552:	4915      	ldr	r1, [pc, #84]	@ (800a5a8 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a554:	4b15      	ldr	r3, [pc, #84]	@ (800a5ac <MX_SDRAM_Init+0x5c>)
{
 800a556:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800a558:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a55c:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a55e:	2104      	movs	r1, #4
 800a560:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800a562:	2440      	movs	r4, #64	@ 0x40
{
 800a564:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a566:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800a56a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800a56e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800a572:	2200      	movs	r2, #0
 800a574:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800a578:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800a57c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800a580:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a582:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800a584:	2207      	movs	r2, #7
 800a586:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 800a588:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800a58c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800a58e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800a590:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800a594:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800a598:	f005 f8e6 	bl	800f768 <HAL_SDRAM_Init>
}
 800a59c:	3800      	subs	r0, #0
 800a59e:	bf18      	it	ne
 800a5a0:	2001      	movne	r0, #1
 800a5a2:	b008      	add	sp, #32
 800a5a4:	bd10      	pop	{r4, pc}
 800a5a6:	bf00      	nop
 800a5a8:	52004140 	.word	0x52004140
 800a5ac:	2400f124 	.word	0x2400f124

0800a5b0 <BSP_SDRAM_Init>:
{
 800a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800a5b2:	4605      	mov	r5, r0
{
 800a5b4:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	f040 80dd 	bne.w	800a776 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800a5bc:	4b71      	ldr	r3, [pc, #452]	@ (800a784 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a5be:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a5c0:	a909      	add	r1, sp, #36	@ 0x24
 800a5c2:	4871      	ldr	r0, [pc, #452]	@ (800a788 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a5c4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800a5c8:	4c70      	ldr	r4, [pc, #448]	@ (800a78c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a5ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800a5ce:	4e70      	ldr	r6, [pc, #448]	@ (800a790 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a5d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800a5d4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a5d8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800a5dc:	9201      	str	r2, [sp, #4]
 800a5de:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800a5e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a5e4:	f042 0201 	orr.w	r2, r2, #1
 800a5e8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800a5ec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800a5f0:	f002 0201 	and.w	r2, r2, #1
 800a5f4:	9202      	str	r2, [sp, #8]
 800a5f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a5fc:	f042 0208 	orr.w	r2, r2, #8
 800a600:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a604:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a608:	f002 0208 	and.w	r2, r2, #8
 800a60c:	9203      	str	r2, [sp, #12]
 800a60e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a610:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a614:	f042 0210 	orr.w	r2, r2, #16
 800a618:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a61c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a620:	f002 0210 	and.w	r2, r2, #16
 800a624:	9204      	str	r2, [sp, #16]
 800a626:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a62c:	f042 0220 	orr.w	r2, r2, #32
 800a630:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a638:	f002 0220 	and.w	r2, r2, #32
 800a63c:	9205      	str	r2, [sp, #20]
 800a63e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a640:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a648:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a64c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a650:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800a654:	9206      	str	r2, [sp, #24]
 800a656:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a65c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a660:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800a664:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a668:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800a66c:	9207      	str	r2, [sp, #28]
 800a66e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a670:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800a674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a678:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a67c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a686:	9308      	str	r3, [sp, #32]
 800a688:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a690:	230c      	movs	r3, #12
 800a692:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800a696:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800a69a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a69c:	f001 f8a4 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a6a0:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a6a4:	a909      	add	r1, sp, #36	@ 0x24
 800a6a6:	483b      	ldr	r0, [pc, #236]	@ (800a794 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a6a8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a6aa:	f001 f89d 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a6ae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a6b2:	a909      	add	r1, sp, #36	@ 0x24
 800a6b4:	4838      	ldr	r0, [pc, #224]	@ (800a798 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a6b6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a6b8:	f001 f896 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800a6bc:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a6c0:	a909      	add	r1, sp, #36	@ 0x24
 800a6c2:	4836      	ldr	r0, [pc, #216]	@ (800a79c <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800a6c4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a6c6:	f001 f88f 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800a6ca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800a6ce:	a909      	add	r1, sp, #36	@ 0x24
 800a6d0:	4833      	ldr	r0, [pc, #204]	@ (800a7a0 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800a6d2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800a6d4:	f001 f888 	bl	800b7e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800a6d8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a6dc:	a909      	add	r1, sp, #36	@ 0x24
 800a6de:	4831      	ldr	r0, [pc, #196]	@ (800a7a4 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800a6e0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a6e2:	f001 f881 	bl	800b7e8 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800a6e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a6ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800a6ee:	f240 2002 	movw	r0, #514	@ 0x202
 800a6f2:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800a6f6:	6334      	str	r4, [r6, #48]	@ 0x30
 800a6f8:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800a6fa:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800a6fe:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800a702:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800a704:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a706:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800a708:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800a70a:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800a70e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800a712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800a716:	4b24      	ldr	r3, [pc, #144]	@ (800a7a8 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800a718:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800a71a:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800a71c:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800a720:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a724:	f002 ff30 	bl	800d588 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800a728:	4620      	mov	r0, r4
 800a72a:	f002 febe 	bl	800d4aa <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800a72e:	462a      	mov	r2, r5
 800a730:	210f      	movs	r1, #15
 800a732:	207a      	movs	r0, #122	@ 0x7a
 800a734:	f000 fa02 	bl	800ab3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800a738:	207a      	movs	r0, #122	@ 0x7a
 800a73a:	f000 fa31 	bl	800aba0 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ff06 	bl	800a550 <MX_SDRAM_Init>
 800a744:	b9d0      	cbnz	r0, 800a77c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800a746:	4919      	ldr	r1, [pc, #100]	@ (800a7ac <BSP_SDRAM_Init+0x1fc>)
 800a748:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800a74a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800a74e:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800a752:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800a754:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800a758:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800a75a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800a75e:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800a762:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800a764:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800a766:	f7fe fd31 	bl	80091cc <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800a76a:	2800      	cmp	r0, #0
 800a76c:	bf18      	it	ne
 800a76e:	f06f 0004 	mvnne.w	r0, #4
}
 800a772:	b00f      	add	sp, #60	@ 0x3c
 800a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800a776:	f06f 0001 	mvn.w	r0, #1
 800a77a:	e7fa      	b.n	800a772 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800a780:	e7f7      	b.n	800a772 <BSP_SDRAM_Init+0x1c2>
 800a782:	bf00      	nop
 800a784:	58024400 	.word	0x58024400
 800a788:	58020c00 	.word	0x58020c00
 800a78c:	2400f098 	.word	0x2400f098
 800a790:	2400f124 	.word	0x2400f124
 800a794:	58021000 	.word	0x58021000
 800a798:	58021400 	.word	0x58021400
 800a79c:	58021800 	.word	0x58021800
 800a7a0:	58021c00 	.word	0x58021c00
 800a7a4:	58022000 	.word	0x58022000
 800a7a8:	52000040 	.word	0x52000040
 800a7ac:	2400f104 	.word	0x2400f104

0800a7b0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800a7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d15c      	bne.n	800a878 <BSP_TS_Init+0xc8>
 800a7be:	680b      	ldr	r3, [r1, #0]
 800a7c0:	1e5a      	subs	r2, r3, #1
 800a7c2:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800a7c6:	d257      	bcs.n	800a878 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a7c8:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a7ca:	1e51      	subs	r1, r2, #1
 800a7cc:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800a7d0:	d252      	bcs.n	800a878 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	bf28      	it	cs
 800a7d6:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a7d8:	68e2      	ldr	r2, [r4, #12]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d84c      	bhi.n	800a878 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800a7de:	2370      	movs	r3, #112	@ 0x70
 800a7e0:	2254      	movs	r2, #84	@ 0x54
 800a7e2:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a7e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8bc <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800a7ea:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800a7ee:	4b2e      	ldr	r3, [pc, #184]	@ (800a8a8 <BSP_TS_Init+0xf8>)
 800a7f0:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a7f2:	4b2e      	ldr	r3, [pc, #184]	@ (800a8ac <BSP_TS_Init+0xfc>)
 800a7f4:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a7f6:	4b2e      	ldr	r3, [pc, #184]	@ (800a8b0 <BSP_TS_Init+0x100>)
 800a7f8:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a7fa:	4b2e      	ldr	r3, [pc, #184]	@ (800a8b4 <BSP_TS_Init+0x104>)
 800a7fc:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800a7fe:	4b2e      	ldr	r3, [pc, #184]	@ (800a8b8 <BSP_TS_Init+0x108>)
 800a800:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800a802:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a806:	a906      	add	r1, sp, #24
 800a808:	482c      	ldr	r0, [pc, #176]	@ (800a8bc <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800a80a:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800a80e:	f7fe fbe3 	bl	8008fd8 <FT6X06_RegisterBusIO>
 800a812:	b9c0      	cbnz	r0, 800a846 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800a814:	4669      	mov	r1, sp
 800a816:	4829      	ldr	r0, [pc, #164]	@ (800a8bc <BSP_TS_Init+0x10c>)
 800a818:	f7fe fb28 	bl	8008e6c <FT6X06_ReadID>
 800a81c:	b998      	cbnz	r0, 800a846 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	2b11      	cmp	r3, #17
 800a822:	d110      	bne.n	800a846 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800a824:	a903      	add	r1, sp, #12
 800a826:	4825      	ldr	r0, [pc, #148]	@ (800a8bc <BSP_TS_Init+0x10c>)
 800a828:	f7fe fad4 	bl	8008dd4 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 800a82c:	4f24      	ldr	r7, [pc, #144]	@ (800a8c0 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800a82e:	4b25      	ldr	r3, [pc, #148]	@ (800a8c4 <BSP_TS_Init+0x114>)
 800a830:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800a8cc <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800a834:	4821      	ldr	r0, [pc, #132]	@ (800a8bc <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800a836:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 800a83a:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4798      	blx	r3
 800a842:	4605      	mov	r5, r0
 800a844:	b1d8      	cbz	r0, 800a87e <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 800a846:	b116      	cbz	r6, 800a84e <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 800a848:	f04f 35ff 	mov.w	r5, #4294967295
 800a84c:	e010      	b.n	800a870 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 800a84e:	2601      	movs	r6, #1
 800a850:	e7d7      	b.n	800a802 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a852:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a854:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a856:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a858:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a85a:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a85c:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a85e:	68e3      	ldr	r3, [r4, #12]
 800a860:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a862:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a864:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a866:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a868:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a86a:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a86c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800a870:	4628      	mov	r0, r5
 800a872:	b00c      	add	sp, #48	@ 0x30
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a878:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800a87c:	e7f8      	b.n	800a870 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a87e:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a880:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a882:	4e11      	ldr	r6, [pc, #68]	@ (800a8c8 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a884:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800a886:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800a888:	6863      	ldr	r3, [r4, #4]
 800a88a:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800a88c:	68a3      	ldr	r3, [r4, #8]
 800a88e:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800a890:	68e3      	ldr	r3, [r4, #12]
 800a892:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a894:	f8d8 3000 	ldr.w	r3, [r8]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	4798      	blx	r3
 800a89c:	2800      	cmp	r0, #0
 800a89e:	dad8      	bge.n	800a852 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a8a0:	f06f 0504 	mvn.w	r5, #4
 800a8a4:	e7e4      	b.n	800a870 <BSP_TS_Init+0xc0>
 800a8a6:	bf00      	nop
 800a8a8:	08009db9 	.word	0x08009db9
 800a8ac:	08009d25 	.word	0x08009d25
 800a8b0:	0800a095 	.word	0x0800a095
 800a8b4:	0800a061 	.word	0x0800a061
 800a8b8:	0800a0c9 	.word	0x0800a0c9
 800a8bc:	2400f158 	.word	0x2400f158
 800a8c0:	2400f180 	.word	0x2400f180
 800a8c4:	24000038 	.word	0x24000038
 800a8c8:	2400f184 	.word	0x2400f184
 800a8cc:	2400f1ac 	.word	0x2400f1ac

0800a8d0 <BSP_TS_GetState>:
{
 800a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d14d      	bne.n	800a976 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a8da:	4b28      	ldr	r3, [pc, #160]	@ (800a97c <BSP_TS_GetState+0xac>)
 800a8dc:	a901      	add	r1, sp, #4
 800a8de:	4a28      	ldr	r2, [pc, #160]	@ (800a980 <BSP_TS_GetState+0xb0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6810      	ldr	r0, [r2, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	4798      	blx	r3
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	db41      	blt.n	800a970 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a8ec:	4925      	ldr	r1, [pc, #148]	@ (800a984 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800a8ee:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a8f0:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a8f2:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 800a8f4:	2e00      	cmp	r6, #0
 800a8f6:	d037      	beq.n	800a968 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a8f8:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800a8fa:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a8fe:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800a902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a906:	bf1e      	ittt	ne
 800a908:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 800a90a:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 800a90c:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a90e:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800a912:	bf1c      	itt	ne
 800a914:	f10e 3cff 	addne.w	ip, lr, #4294967295
 800a918:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800a91c:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a920:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800a922:	bf44      	itt	mi
 800a924:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 800a928:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a92a:	680f      	ldr	r7, [r1, #0]
 800a92c:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a92e:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800a930:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a932:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a934:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a936:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a93a:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a93e:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a940:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a942:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a944:	bf8c      	ite	hi
 800a946:	eba2 0c05 	subhi.w	ip, r2, r5
 800a94a:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a94e:	4283      	cmp	r3, r0
 800a950:	bf8c      	ite	hi
 800a952:	1a1e      	subhi	r6, r3, r0
 800a954:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a956:	4567      	cmp	r7, ip
 800a958:	d301      	bcc.n	800a95e <BSP_TS_GetState+0x8e>
 800a95a:	42b7      	cmp	r7, r6
 800a95c:	d205      	bcs.n	800a96a <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a95e:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a960:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800a962:	2000      	movs	r0, #0
}
 800a964:	b005      	add	sp, #20
 800a966:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 800a968:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a96a:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800a96e:	e7f8      	b.n	800a962 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a970:	f06f 0004 	mvn.w	r0, #4
 800a974:	e7f6      	b.n	800a964 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800a976:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a97a:	e7f3      	b.n	800a964 <BSP_TS_GetState+0x94>
 800a97c:	2400f1ac 	.word	0x2400f1ac
 800a980:	2400f180 	.word	0x2400f180
 800a984:	2400f184 	.word	0x2400f184

0800a988 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a988:	4b2d      	ldr	r3, [pc, #180]	@ (800aa40 <SystemInit+0xb8>)
 800a98a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a98e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800a992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a996:	691a      	ldr	r2, [r3, #16]
 800a998:	f042 0210 	orr.w	r2, r2, #16
 800a99c:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a99e:	4a29      	ldr	r2, [pc, #164]	@ (800aa44 <SystemInit+0xbc>)
 800a9a0:	6813      	ldr	r3, [r2, #0]
 800a9a2:	f003 030f 	and.w	r3, r3, #15
 800a9a6:	2b06      	cmp	r3, #6
 800a9a8:	d805      	bhi.n	800a9b6 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	f023 030f 	bic.w	r3, r3, #15
 800a9b0:	f043 0307 	orr.w	r3, r3, #7
 800a9b4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a9b6:	4b24      	ldr	r3, [pc, #144]	@ (800aa48 <SystemInit+0xc0>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	f042 0201 	orr.w	r2, r2, #1
 800a9be:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a9c4:	4a21      	ldr	r2, [pc, #132]	@ (800aa4c <SystemInit+0xc4>)
 800a9c6:	6819      	ldr	r1, [r3, #0]
 800a9c8:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a9ca:	491e      	ldr	r1, [pc, #120]	@ (800aa44 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800a9cc:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a9ce:	680a      	ldr	r2, [r1, #0]
 800a9d0:	0712      	lsls	r2, r2, #28
 800a9d2:	d505      	bpl.n	800a9e0 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a9d4:	680a      	ldr	r2, [r1, #0]
 800a9d6:	f022 020f 	bic.w	r2, r2, #15
 800a9da:	f042 0207 	orr.w	r2, r2, #7
 800a9de:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a9e0:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a9e2:	491b      	ldr	r1, [pc, #108]	@ (800aa50 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800a9e4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800a9e6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800a9e8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800a9ea:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a9ec:	4919      	ldr	r1, [pc, #100]	@ (800aa54 <SystemInit+0xcc>)
 800a9ee:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a9f0:	4919      	ldr	r1, [pc, #100]	@ (800aa58 <SystemInit+0xd0>)
 800a9f2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a9f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a9f6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a9f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a9fa:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a9fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800aa04:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800aa06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800aa08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa0c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800aa10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800aa18:	4b10      	ldr	r3, [pc, #64]	@ (800aa5c <SystemInit+0xd4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	0c1b      	lsrs	r3, r3, #16
 800aa1e:	041b      	lsls	r3, r3, #16
 800aa20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa24:	d203      	bcs.n	800aa2e <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800aa26:	4b0e      	ldr	r3, [pc, #56]	@ (800aa60 <SystemInit+0xd8>)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa64 <SystemInit+0xdc>)
 800aa30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800aa34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800aa36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800aa3a:	4b01      	ldr	r3, [pc, #4]	@ (800aa40 <SystemInit+0xb8>)
 800aa3c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800aa3e:	4770      	bx	lr
 800aa40:	e000ed00 	.word	0xe000ed00
 800aa44:	52002000 	.word	0x52002000
 800aa48:	58024400 	.word	0x58024400
 800aa4c:	eaf6ed7f 	.word	0xeaf6ed7f
 800aa50:	02020200 	.word	0x02020200
 800aa54:	01ff0000 	.word	0x01ff0000
 800aa58:	01010280 	.word	0x01010280
 800aa5c:	5c001000 	.word	0x5c001000
 800aa60:	51008000 	.word	0x51008000
 800aa64:	52004000 	.word	0x52004000

0800aa68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aa68:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa6a:	2003      	movs	r0, #3
 800aa6c:	f000 f854 	bl	800ab18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa70:	f003 fcde 	bl	800e430 <HAL_RCC_GetSysClockFreq>
 800aa74:	490f      	ldr	r1, [pc, #60]	@ (800aab4 <HAL_Init+0x4c>)
 800aa76:	4a10      	ldr	r2, [pc, #64]	@ (800aab8 <HAL_Init+0x50>)
 800aa78:	698b      	ldr	r3, [r1, #24]
 800aa7a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800aa7e:	5cd3      	ldrb	r3, [r2, r3]
 800aa80:	f003 031f 	and.w	r3, r3, #31
 800aa84:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa86:	698b      	ldr	r3, [r1, #24]
 800aa88:	f003 030f 	and.w	r3, r3, #15
 800aa8c:	5cd3      	ldrb	r3, [r2, r3]
 800aa8e:	4a0b      	ldr	r2, [pc, #44]	@ (800aabc <HAL_Init+0x54>)
 800aa90:	f003 031f 	and.w	r3, r3, #31
 800aa94:	fa20 f303 	lsr.w	r3, r0, r3
 800aa98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa9a:	4b09      	ldr	r3, [pc, #36]	@ (800aac0 <HAL_Init+0x58>)
 800aa9c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	f7f6 ff76 	bl	8001990 <HAL_InitTick>
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	b918      	cbnz	r0, 800aab0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800aaa8:	f7f6 fc18 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800aaac:	4620      	mov	r0, r4
 800aaae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aab0:	2401      	movs	r4, #1
 800aab2:	e7fb      	b.n	800aaac <HAL_Init+0x44>
 800aab4:	58024400 	.word	0x58024400
 800aab8:	0802d758 	.word	0x0802d758
 800aabc:	24000068 	.word	0x24000068
 800aac0:	2400006c 	.word	0x2400006c

0800aac4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800aac4:	4a03      	ldr	r2, [pc, #12]	@ (800aad4 <HAL_IncTick+0x10>)
 800aac6:	4b04      	ldr	r3, [pc, #16]	@ (800aad8 <HAL_IncTick+0x14>)
 800aac8:	6811      	ldr	r1, [r2, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	440b      	add	r3, r1
 800aace:	6013      	str	r3, [r2, #0]
}
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	2400f1b0 	.word	0x2400f1b0
 800aad8:	24000070 	.word	0x24000070

0800aadc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800aadc:	4b01      	ldr	r3, [pc, #4]	@ (800aae4 <HAL_GetTick+0x8>)
 800aade:	6818      	ldr	r0, [r3, #0]
}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	2400f1b0 	.word	0x2400f1b0

0800aae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800aaec:	f7ff fff6 	bl	800aadc <HAL_GetTick>
 800aaf0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aaf2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800aaf4:	bf1e      	ittt	ne
 800aaf6:	4b04      	ldrne	r3, [pc, #16]	@ (800ab08 <HAL_Delay+0x20>)
 800aaf8:	781b      	ldrbne	r3, [r3, #0]
 800aafa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aafc:	f7ff ffee 	bl	800aadc <HAL_GetTick>
 800ab00:	1b43      	subs	r3, r0, r5
 800ab02:	42a3      	cmp	r3, r4
 800ab04:	d3fa      	bcc.n	800aafc <HAL_Delay+0x14>
  {
  }
}
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	24000070 	.word	0x24000070

0800ab0c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800ab0c:	4b01      	ldr	r3, [pc, #4]	@ (800ab14 <HAL_GetREVID+0x8>)
 800ab0e:	6818      	ldr	r0, [r3, #0]
}
 800ab10:	0c00      	lsrs	r0, r0, #16
 800ab12:	4770      	bx	lr
 800ab14:	5c001000 	.word	0x5c001000

0800ab18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab18:	4907      	ldr	r1, [pc, #28]	@ (800ab38 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab1a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab1c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ab26:	0412      	lsls	r2, r2, #16
 800ab28:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ab2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ab30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800ab34:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800ab36:	4770      	bx	lr
 800ab38:	e000ed00 	.word	0xe000ed00

0800ab3c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab3c:	4b16      	ldr	r3, [pc, #88]	@ (800ab98 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab3e:	b530      	push	{r4, r5, lr}
 800ab40:	68dc      	ldr	r4, [r3, #12]
 800ab42:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab4c:	2b04      	cmp	r3, #4
 800ab4e:	bf28      	it	cs
 800ab50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab52:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab54:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab58:	bf8c      	ite	hi
 800ab5a:	3c03      	subhi	r4, #3
 800ab5c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab5e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800ab62:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ab64:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab68:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ab6c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab70:	fa03 f304 	lsl.w	r3, r3, r4
 800ab74:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ab7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800ab7e:	db06      	blt.n	800ab8e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800ab84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800ab88:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800ab8c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab8e:	f000 000f 	and.w	r0, r0, #15
 800ab92:	4a02      	ldr	r2, [pc, #8]	@ (800ab9c <HAL_NVIC_SetPriority+0x60>)
 800ab94:	5413      	strb	r3, [r2, r0]
 800ab96:	e7f9      	b.n	800ab8c <HAL_NVIC_SetPriority+0x50>
 800ab98:	e000ed00 	.word	0xe000ed00
 800ab9c:	e000ed14 	.word	0xe000ed14

0800aba0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800aba0:	2800      	cmp	r0, #0
 800aba2:	db07      	blt.n	800abb4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aba4:	2301      	movs	r3, #1
 800aba6:	0941      	lsrs	r1, r0, #5
 800aba8:	f000 001f 	and.w	r0, r0, #31
 800abac:	4a02      	ldr	r2, [pc, #8]	@ (800abb8 <HAL_NVIC_EnableIRQ+0x18>)
 800abae:	4083      	lsls	r3, r0
 800abb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	e000e100 	.word	0xe000e100

0800abbc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800abbc:	2800      	cmp	r0, #0
 800abbe:	db0c      	blt.n	800abda <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abc0:	0943      	lsrs	r3, r0, #5
 800abc2:	2201      	movs	r2, #1
 800abc4:	f000 001f 	and.w	r0, r0, #31
 800abc8:	4904      	ldr	r1, [pc, #16]	@ (800abdc <HAL_NVIC_DisableIRQ+0x20>)
 800abca:	3320      	adds	r3, #32
 800abcc:	4082      	lsls	r2, r0
 800abce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800abd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800abd6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800abda:	4770      	bx	lr
 800abdc:	e000e100 	.word	0xe000e100

0800abe0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800abe0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800abe4:	4b04      	ldr	r3, [pc, #16]	@ (800abf8 <HAL_MPU_Disable+0x18>)
 800abe6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abe8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800abec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800abee:	2200      	movs	r2, #0
 800abf0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	e000ed00 	.word	0xe000ed00

0800abfc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800abfc:	4b06      	ldr	r3, [pc, #24]	@ (800ac18 <HAL_MPU_Enable+0x1c>)
 800abfe:	f040 0001 	orr.w	r0, r0, #1
 800ac02:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800ac06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac08:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ac0c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ac0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac12:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ac16:	4770      	bx	lr
 800ac18:	e000ed00 	.word	0xe000ed00

0800ac1c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ac1c:	7843      	ldrb	r3, [r0, #1]
 800ac1e:	4a14      	ldr	r2, [pc, #80]	@ (800ac70 <HAL_MPU_ConfigRegion+0x54>)
 800ac20:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800ac24:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800ac28:	f023 0301 	bic.w	r3, r3, #1
 800ac2c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800ac30:	6843      	ldr	r3, [r0, #4]
 800ac32:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ac36:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac38:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ac3a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac3c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800ac40:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac42:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ac44:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac46:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ac4a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac4c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ac50:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ac56:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ac5c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ac5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ac62:	7a01      	ldrb	r1, [r0, #8]
 800ac64:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ac68:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	e000ed00 	.word	0xe000ed00

0800ac74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ac74:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ac76:	4604      	mov	r4, r0
 800ac78:	b908      	cbnz	r0, 800ac7e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800ac7a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800ac7c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ac7e:	7f43      	ldrb	r3, [r0, #29]
 800ac80:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ac84:	b913      	cbnz	r3, 800ac8c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800ac86:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ac88:	f7f6 fb40 	bl	800130c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ac90:	7923      	ldrb	r3, [r4, #4]
 800ac92:	b9e3      	cbnz	r3, 800acce <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	4a13      	ldr	r2, [pc, #76]	@ (800ace4 <HAL_CRC_Init+0x70>)
 800ac98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	f022 0218 	bic.w	r2, r2, #24
 800aca0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800aca2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800aca4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800aca6:	b9d2      	cbnz	r2, 800acde <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800aca8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800acac:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800acae:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800acb0:	689a      	ldr	r2, [r3, #8]
 800acb2:	6961      	ldr	r1, [r4, #20]
 800acb4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800acb8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800acba:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800acbc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800acbe:	689a      	ldr	r2, [r3, #8]
 800acc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acc4:	430a      	orrs	r2, r1
 800acc6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800acc8:	2301      	movs	r3, #1
 800acca:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800accc:	e7d6      	b.n	800ac7c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800acce:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 f808 	bl	800ace8 <HAL_CRCEx_Polynomial_Set>
 800acd8:	2800      	cmp	r0, #0
 800acda:	d0e2      	beq.n	800aca2 <HAL_CRC_Init+0x2e>
 800acdc:	e7cd      	b.n	800ac7a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800acde:	6922      	ldr	r2, [r4, #16]
 800ace0:	e7e4      	b.n	800acac <HAL_CRC_Init+0x38>
 800ace2:	bf00      	nop
 800ace4:	04c11db7 	.word	0x04c11db7

0800ace8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800ace8:	07cb      	lsls	r3, r1, #31
{
 800acea:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800acec:	d50d      	bpl.n	800ad0a <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800acee:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800acf0:	3b01      	subs	r3, #1
 800acf2:	d31d      	bcc.n	800ad30 <HAL_CRCEx_Polynomial_Set+0x48>
 800acf4:	fa21 f403 	lsr.w	r4, r1, r3
 800acf8:	07e4      	lsls	r4, r4, #31
 800acfa:	d5f9      	bpl.n	800acf0 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800acfc:	2a10      	cmp	r2, #16
 800acfe:	d013      	beq.n	800ad28 <HAL_CRCEx_Polynomial_Set+0x40>
 800ad00:	2a10      	cmp	r2, #16
 800ad02:	d804      	bhi.n	800ad0e <HAL_CRCEx_Polynomial_Set+0x26>
 800ad04:	b13a      	cbz	r2, 800ad16 <HAL_CRCEx_Polynomial_Set+0x2e>
 800ad06:	2a08      	cmp	r2, #8
 800ad08:	d010      	beq.n	800ad2c <HAL_CRCEx_Polynomial_Set+0x44>
 800ad0a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800ad0c:	e00b      	b.n	800ad26 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800ad0e:	2a18      	cmp	r2, #24
 800ad10:	d1fb      	bne.n	800ad0a <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800ad12:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800ad14:	d8f9      	bhi.n	800ad0a <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ad16:	6800      	ldr	r0, [r0, #0]
 800ad18:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ad1a:	6883      	ldr	r3, [r0, #8]
 800ad1c:	f023 0318 	bic.w	r3, r3, #24
 800ad20:	4313      	orrs	r3, r2
 800ad22:	6083      	str	r3, [r0, #8]
 800ad24:	2000      	movs	r0, #0
}
 800ad26:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800ad28:	2b07      	cmp	r3, #7
 800ad2a:	e7f3      	b.n	800ad14 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 800ad2c:	2b0f      	cmp	r3, #15
 800ad2e:	e7f1      	b.n	800ad14 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 800ad30:	2a10      	cmp	r2, #16
 800ad32:	d1e5      	bne.n	800ad00 <HAL_CRCEx_Polynomial_Set+0x18>
 800ad34:	e7e9      	b.n	800ad0a <HAL_CRCEx_Polynomial_Set+0x22>

0800ad36 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800ad36:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800ad38:	4604      	mov	r4, r0
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d036      	beq.n	800adac <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ad3e:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800ad42:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ad46:	b91b      	cbnz	r3, 800ad50 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800ad48:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800ad4c:	f7f6 faf6 	bl	800133c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ad50:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ad52:	69e0      	ldr	r0, [r4, #28]
 800ad54:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ad56:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800ad5e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ad60:	6819      	ldr	r1, [r3, #0]
 800ad62:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800ad66:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800ad6a:	430a      	orrs	r2, r1
 800ad6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800ad6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ad70:	68a2      	ldr	r2, [r4, #8]
 800ad72:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800ad76:	4302      	orrs	r2, r0
 800ad78:	f021 0101 	bic.w	r1, r1, #1
 800ad7c:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ad7e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800ad80:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ad82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad84:	0c12      	lsrs	r2, r2, #16
 800ad86:	0412      	lsls	r2, r2, #16
 800ad88:	430a      	orrs	r2, r1
 800ad8a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ad8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ad8e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800ad92:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800ad96:	0552      	lsls	r2, r2, #21
 800ad98:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ad9c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ad9e:	430a      	orrs	r2, r1
 800ada0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ada2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ada4:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ada6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800adaa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800adac:	2001      	movs	r0, #1
 800adae:	e7fc      	b.n	800adaa <HAL_DMA2D_Init+0x74>

0800adb0 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800adb0:	4770      	bx	lr

0800adb2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800adb2:	4770      	bx	lr

0800adb4 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800adb4:	6803      	ldr	r3, [r0, #0]
{
 800adb6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800adb8:	685e      	ldr	r6, [r3, #4]
{
 800adba:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800adbc:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800adbe:	07f2      	lsls	r2, r6, #31
 800adc0:	d514      	bpl.n	800adec <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800adc2:	05e9      	lsls	r1, r5, #23
 800adc4:	d512      	bpl.n	800adec <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800adcc:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800adce:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800add0:	f042 0201 	orr.w	r2, r2, #1
 800add4:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800add6:	2201      	movs	r2, #1
 800add8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800adda:	2304      	movs	r3, #4
 800addc:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800ade0:	2300      	movs	r3, #0
 800ade2:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800ade6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ade8:	b103      	cbz	r3, 800adec <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800adea:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800adec:	06b2      	lsls	r2, r6, #26
 800adee:	d516      	bpl.n	800ae1e <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800adf0:	04ab      	lsls	r3, r5, #18
 800adf2:	d514      	bpl.n	800ae1e <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800adfc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800adfe:	2220      	movs	r2, #32
 800ae00:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ae02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae04:	f043 0302 	orr.w	r3, r3, #2
 800ae08:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ae0a:	2304      	movs	r3, #4
 800ae0c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800ae10:	2300      	movs	r3, #0
 800ae12:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800ae16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ae18:	b10b      	cbz	r3, 800ae1e <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ae1e:	0730      	lsls	r0, r6, #28
 800ae20:	d516      	bpl.n	800ae50 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800ae22:	0529      	lsls	r1, r5, #20
 800ae24:	d514      	bpl.n	800ae50 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800ae30:	2208      	movs	r2, #8
 800ae32:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800ae34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae36:	f043 0304 	orr.w	r3, r3, #4
 800ae3a:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ae3c:	2304      	movs	r3, #4
 800ae3e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800ae42:	2300      	movs	r3, #0
 800ae44:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800ae48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ae4a:	b10b      	cbz	r3, 800ae50 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800ae50:	0772      	lsls	r2, r6, #29
 800ae52:	d50b      	bpl.n	800ae6c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800ae54:	056b      	lsls	r3, r5, #21
 800ae56:	d509      	bpl.n	800ae6c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ae58:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ae5a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae62:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800ae64:	2204      	movs	r2, #4
 800ae66:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ae68:	f7ff ffa2 	bl	800adb0 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ae6c:	07b0      	lsls	r0, r6, #30
 800ae6e:	d514      	bpl.n	800ae9a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800ae70:	05a9      	lsls	r1, r5, #22
 800ae72:	d512      	bpl.n	800ae9a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ae7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800ae7e:	2202      	movs	r2, #2
 800ae80:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ae82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae84:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800ae92:	6a23      	ldr	r3, [r4, #32]
 800ae94:	b10b      	cbz	r3, 800ae9a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800ae96:	4620      	mov	r0, r4
 800ae98:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800ae9a:	06f2      	lsls	r2, r6, #27
 800ae9c:	d513      	bpl.n	800aec6 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800ae9e:	04eb      	lsls	r3, r5, #19
 800aea0:	d511      	bpl.n	800aec6 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800aea2:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800aea4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aeac:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800aeae:	2210      	movs	r2, #16
 800aeb0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800aeb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeb4:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800aebc:	2300      	movs	r3, #0
 800aebe:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800aec2:	f7ff ff76 	bl	800adb2 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800aec6:	bd70      	pop	{r4, r5, r6, pc}

0800aec8 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aecc:	4607      	mov	r7, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	4614      	mov	r4, r2
 800aed2:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800aed4:	f7ff fe02 	bl	800aadc <HAL_GetTick>
 800aed8:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800aede:	07d2      	lsls	r2, r2, #31
 800aee0:	d50a      	bpl.n	800aef8 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800aee2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800aee6:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800aee8:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800aeea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aeee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800aef2:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800aef8:	f7ff fdf0 	bl	800aadc <HAL_GetTick>
 800aefc:	eba0 0008 	sub.w	r0, r0, r8
 800af00:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800af04:	d9e9      	bls.n	800aeda <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800af06:	2003      	movs	r0, #3
 800af08:	e7f4      	b.n	800aef4 <DSI_ShortWrite.constprop.0+0x2c>

0800af0a <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800af0a:	7c03      	ldrb	r3, [r0, #16]
{
 800af0c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d05b      	beq.n	800afca <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800af12:	6803      	ldr	r3, [r0, #0]
 800af14:	2000      	movs	r0, #0
 800af16:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800af1a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800af1e:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800af20:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800af22:	d507      	bpl.n	800af34 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800af24:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800af28:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 800af2c:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 800af30:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800af34:	0788      	lsls	r0, r1, #30
 800af36:	d505      	bpl.n	800af44 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800af38:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800af3c:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 800af40:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800af44:	0748      	lsls	r0, r1, #29
 800af46:	d505      	bpl.n	800af54 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800af48:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800af4c:	f040 0001 	orr.w	r0, r0, #1
 800af50:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800af54:	0708      	lsls	r0, r1, #28
 800af56:	d505      	bpl.n	800af64 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800af58:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800af5c:	f040 0002 	orr.w	r0, r0, #2
 800af60:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800af64:	06c8      	lsls	r0, r1, #27
 800af66:	d505      	bpl.n	800af74 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800af68:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800af6c:	f040 000c 	orr.w	r0, r0, #12
 800af70:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800af74:	0688      	lsls	r0, r1, #26
 800af76:	d505      	bpl.n	800af84 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800af78:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800af7c:	f040 0010 	orr.w	r0, r0, #16
 800af80:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800af84:	0648      	lsls	r0, r1, #25
 800af86:	d505      	bpl.n	800af94 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800af88:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800af8c:	f040 0020 	orr.w	r0, r0, #32
 800af90:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800af94:	0608      	lsls	r0, r1, #24
 800af96:	d505      	bpl.n	800afa4 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800af98:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800af9c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800afa0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800afa4:	05c8      	lsls	r0, r1, #23
 800afa6:	d505      	bpl.n	800afb4 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800afa8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800afac:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800afb0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800afb4:	0589      	lsls	r1, r1, #22
 800afb6:	d505      	bpl.n	800afc4 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800afb8:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800afbc:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 800afc0:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800afc4:	2000      	movs	r0, #0
 800afc6:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 800afc8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800afca:	2002      	movs	r0, #2
}
 800afcc:	4770      	bx	lr
	...

0800afd0 <HAL_DSI_Init>:
{
 800afd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800afd2:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800afd4:	4604      	mov	r4, r0
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f000 80ea 	beq.w	800b1b0 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800afdc:	7c43      	ldrb	r3, [r0, #17]
 800afde:	b90b      	cbnz	r3, 800afe4 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800afe0:	f7f6 f9d0 	bl	8001384 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800afe4:	2303      	movs	r3, #3
 800afe6:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800afe8:	2300      	movs	r3, #0
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800aff2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800aff6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800affa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800affe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800b006:	f7ff fd69 	bl	800aadc <HAL_GetTick>
 800b00a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800b012:	04d9      	lsls	r1, r3, #19
 800b014:	d56e      	bpl.n	800b0f4 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b016:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800b01a:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800b01e:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800b022:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b026:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b02a:	e9d5 0300 	ldrd	r0, r3, [r5]
 800b02e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b030:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800b034:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b036:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800b03a:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b03c:	430b      	orrs	r3, r1
 800b03e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800b042:	2300      	movs	r3, #0
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800b04a:	f043 0301 	orr.w	r3, r3, #1
 800b04e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800b052:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800b05e:	f7ff fd43 	bl	800aae8 <HAL_Delay>
  tickstart = HAL_GetTick();
 800b062:	f7ff fd3b 	bl	800aadc <HAL_GetTick>
 800b066:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800b06e:	05d2      	lsls	r2, r2, #23
 800b070:	d548      	bpl.n	800b104 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 800b072:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b074:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800b076:	9202      	str	r2, [sp, #8]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	605a      	str	r2, [r3, #4]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	f002 0201 	and.w	r2, r2, #1
 800b086:	9202      	str	r2, [sp, #8]
 800b088:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b08a:	689a      	ldr	r2, [r3, #8]
 800b08c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b090:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b096:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b098:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800b09a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b09e:	f042 0202 	orr.w	r2, r2, #2
 800b0a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800b0a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b0aa:	f042 0204 	orr.w	r2, r2, #4
 800b0ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800b0b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b0b6:	f022 0203 	bic.w	r2, r2, #3
 800b0ba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b0be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 800b0c8:	f7ff fd08 	bl	800aadc <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800b0cc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b0ce:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800b0d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b0d4:	079b      	lsls	r3, r3, #30
 800b0d6:	d025      	beq.n	800b124 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0de:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800b0e2:	2b94      	cmp	r3, #148	@ 0x94
 800b0e4:	d025      	beq.n	800b132 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b0e6:	f7ff fcf9 	bl	800aadc <HAL_GetTick>
 800b0ea:	1b80      	subs	r0, r0, r6
 800b0ec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b0f0:	d9f2      	bls.n	800b0d8 <HAL_DSI_Init+0x108>
 800b0f2:	e014      	b.n	800b11e <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b0f4:	f7ff fcf2 	bl	800aadc <HAL_GetTick>
 800b0f8:	1b80      	subs	r0, r0, r6
 800b0fa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b0fe:	d985      	bls.n	800b00c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800b100:	2003      	movs	r0, #3
 800b102:	e053      	b.n	800b1ac <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b104:	f7ff fcea 	bl	800aadc <HAL_GetTick>
 800b108:	1b80      	subs	r0, r0, r6
 800b10a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b10e:	d9ab      	bls.n	800b068 <HAL_DSI_Init+0x98>
 800b110:	e7f6      	b.n	800b100 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b112:	f7ff fce3 	bl	800aadc <HAL_GetTick>
 800b116:	1b80      	subs	r0, r0, r6
 800b118:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b11c:	d902      	bls.n	800b124 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 800b11e:	2300      	movs	r3, #0
 800b120:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800b122:	e7ed      	b.n	800b100 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b12a:	f003 0314 	and.w	r3, r3, #20
 800b12e:	2b14      	cmp	r3, #20
 800b130:	d1ef      	bne.n	800b112 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b132:	686b      	ldr	r3, [r5, #4]
 800b134:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800b138:	4a1e      	ldr	r2, [pc, #120]	@ (800b1b4 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800b13a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	bf38      	it	cc
 800b140:	2301      	movcc	r3, #1
 800b142:	435a      	muls	r2, r3
 800b144:	68ab      	ldr	r3, [r5, #8]
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	409a      	lsls	r2, r3
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	434b      	muls	r3, r1
 800b150:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800b15a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800b15e:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800b162:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800b166:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b168:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800b16a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800b16e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b172:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800b176:	9003      	str	r0, [sp, #12]
 800b178:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 800b17a:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 800b17c:	f022 0201 	bic.w	r2, r2, #1
 800b180:	605a      	str	r2, [r3, #4]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	f002 0201 	and.w	r2, r2, #1
 800b188:	9203      	str	r2, [sp, #12]
 800b18a:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800b18c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800b190:	f022 0203 	bic.w	r2, r2, #3
 800b194:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b198:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800b19c:	430a      	orrs	r2, r1
 800b19e:	f042 0201 	orr.w	r2, r2, #1
 800b1a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 800b1a6:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800b1a8:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800b1aa:	7463      	strb	r3, [r4, #17]
}
 800b1ac:	b004      	add	sp, #16
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	e7fb      	b.n	800b1ac <HAL_DSI_Init+0x1dc>
 800b1b4:	003d0900 	.word	0x003d0900

0800b1b8 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 800b1b8:	4770      	bx	lr

0800b1ba <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b1ba:	6803      	ldr	r3, [r0, #0]
 800b1bc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800b1c0:	07d1      	lsls	r1, r2, #31
{
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b1c6:	d508      	bpl.n	800b1da <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800b1c8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800b1cc:	07d2      	lsls	r2, r2, #31
 800b1ce:	d504      	bpl.n	800b1da <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800b1d6:	f7f7 f853 	bl	8002280 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800b1e0:	0791      	lsls	r1, r2, #30
 800b1e2:	d509      	bpl.n	800b1f8 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800b1e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800b1e8:	0792      	lsls	r2, r2, #30
 800b1ea:	d505      	bpl.n	800b1f8 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b1ec:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b1ee:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b1f0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b1f4:	f7f7 f876 	bl	80022e4 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800b1f8:	69a3      	ldr	r3, [r4, #24]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d04e      	beq.n	800b29c <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800b1fe:	6821      	ldr	r1, [r4, #0]
 800b200:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b204:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800b208:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800b20a:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b20e:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800b212:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b214:	b291      	uxth	r1, r2
 800b216:	b119      	cbz	r1, 800b220 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800b218:	6961      	ldr	r1, [r4, #20]
 800b21a:	f041 0101 	orr.w	r1, r1, #1
 800b21e:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800b220:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800b224:	d003      	beq.n	800b22e <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800b226:	6962      	ldr	r2, [r4, #20]
 800b228:	f042 0202 	orr.w	r2, r2, #2
 800b22c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800b22e:	07d8      	lsls	r0, r3, #31
 800b230:	d503      	bpl.n	800b23a <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800b232:	6962      	ldr	r2, [r4, #20]
 800b234:	f042 0204 	orr.w	r2, r2, #4
 800b238:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800b23a:	0799      	lsls	r1, r3, #30
 800b23c:	d503      	bpl.n	800b246 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800b23e:	6962      	ldr	r2, [r4, #20]
 800b240:	f042 0208 	orr.w	r2, r2, #8
 800b244:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800b246:	f013 0f0c 	tst.w	r3, #12
 800b24a:	d003      	beq.n	800b254 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800b24c:	6962      	ldr	r2, [r4, #20]
 800b24e:	f042 0210 	orr.w	r2, r2, #16
 800b252:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800b254:	06da      	lsls	r2, r3, #27
 800b256:	d503      	bpl.n	800b260 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800b258:	6962      	ldr	r2, [r4, #20]
 800b25a:	f042 0220 	orr.w	r2, r2, #32
 800b25e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800b260:	0698      	lsls	r0, r3, #26
 800b262:	d503      	bpl.n	800b26c <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800b264:	6962      	ldr	r2, [r4, #20]
 800b266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b26a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800b26c:	0659      	lsls	r1, r3, #25
 800b26e:	d503      	bpl.n	800b278 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800b270:	6962      	ldr	r2, [r4, #20]
 800b272:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b276:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800b278:	061a      	lsls	r2, r3, #24
 800b27a:	d503      	bpl.n	800b284 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800b27c:	6962      	ldr	r2, [r4, #20]
 800b27e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b282:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800b284:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800b288:	d003      	beq.n	800b292 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800b28a:	6963      	ldr	r3, [r4, #20]
 800b28c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b290:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800b292:	6963      	ldr	r3, [r4, #20]
 800b294:	b113      	cbz	r3, 800b29c <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800b296:	4620      	mov	r0, r4
 800b298:	f7ff ff8e 	bl	800b1b8 <HAL_DSI_ErrorCallback>
}
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b29e:	7c02      	ldrb	r2, [r0, #16]
{
 800b2a0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b2a2:	2a01      	cmp	r2, #1
 800b2a4:	d00a      	beq.n	800b2bc <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800b2a6:	6802      	ldr	r2, [r0, #0]
 800b2a8:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800b2aa:	f020 0003 	bic.w	r0, r0, #3
 800b2ae:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800b2b0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800b2b2:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b2b4:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800b2b6:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 800b2b8:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b2ba:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b2bc:	2002      	movs	r0, #2
}
 800b2be:	4770      	bx	lr

0800b2c0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800b2c0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b2c2:	7c03      	ldrb	r3, [r0, #16]
{
 800b2c4:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d069      	beq.n	800b39e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b2ca:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b2cc:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b2ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2d0:	f042 0201 	orr.w	r2, r2, #1
 800b2d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800b2d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b2da:	f022 0201 	bic.w	r2, r2, #1
 800b2de:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800b2e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b2e6:	f042 0201 	orr.w	r2, r2, #1
 800b2ea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	f022 0203 	bic.w	r2, r2, #3
 800b2f4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	4302      	orrs	r2, r0
 800b2fa:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b2fc:	695a      	ldr	r2, [r3, #20]
 800b2fe:	f022 0207 	bic.w	r2, r2, #7
 800b302:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b304:	6958      	ldr	r0, [r3, #20]
 800b306:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800b30a:	432a      	orrs	r2, r5
 800b30c:	694d      	ldr	r5, [r1, #20]
 800b30e:	432a      	orrs	r2, r5
 800b310:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b312:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b314:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800b316:	691a      	ldr	r2, [r3, #16]
 800b318:	f022 020f 	bic.w	r2, r2, #15
 800b31c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b31e:	691a      	ldr	r2, [r3, #16]
 800b320:	4302      	orrs	r2, r0
 800b322:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800b324:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b328:	f022 020e 	bic.w	r2, r2, #14
 800b32c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b330:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b334:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b338:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b33a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800b33e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b340:	0c12      	lsrs	r2, r2, #16
 800b342:	0412      	lsls	r2, r2, #16
 800b344:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b346:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b348:	4302      	orrs	r2, r0
 800b34a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800b34c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b350:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800b354:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b358:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800b35c:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800b360:	432a      	orrs	r2, r5
 800b362:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b364:	432a      	orrs	r2, r5
 800b366:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b368:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b36a:	432a      	orrs	r2, r5
 800b36c:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b36e:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b370:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800b374:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b376:	f022 0201 	bic.w	r2, r2, #1
 800b37a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b37c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b37e:	430a      	orrs	r2, r1
 800b380:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800b382:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800b386:	f042 0201 	orr.w	r2, r2, #1
 800b38a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800b38e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800b392:	f042 0202 	orr.w	r2, r2, #2
 800b396:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800b39a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b39c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b39e:	2002      	movs	r0, #2
 800b3a0:	e7fc      	b.n	800b39c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800b3a4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800b3a4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b3a6:	7c03      	ldrb	r3, [r0, #16]
{
 800b3a8:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d029      	beq.n	800b402 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800b3ae:	6800      	ldr	r0, [r0, #0]
 800b3b0:	4b15      	ldr	r3, [pc, #84]	@ (800b408 <HAL_DSI_ConfigCommand+0x64>)
 800b3b2:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800b3b4:	4023      	ands	r3, r4
 800b3b6:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b3b8:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800b3ba:	e9d1 3500 	ldrd	r3, r5, [r1]
 800b3be:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800b3c0:	688d      	ldr	r5, [r1, #8]
 800b3c2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800b3c4:	68cd      	ldr	r5, [r1, #12]
 800b3c6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800b3c8:	690d      	ldr	r5, [r1, #16]
 800b3ca:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800b3cc:	694d      	ldr	r5, [r1, #20]
 800b3ce:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800b3d0:	698d      	ldr	r5, [r1, #24]
 800b3d2:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800b3d4:	69cd      	ldr	r5, [r1, #28]
 800b3d6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800b3d8:	6a0d      	ldr	r5, [r1, #32]
 800b3da:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800b3dc:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b3de:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800b3e0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800b3e2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800b3e4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b3e6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 800b3e8:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b3ea:	4323      	orrs	r3, r4
 800b3ec:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800b3ee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800b3f0:	f023 0302 	bic.w	r3, r3, #2
 800b3f4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b3f6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800b400:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b402:	2002      	movs	r0, #2
 800b404:	e7fc      	b.n	800b400 <HAL_DSI_ConfigCommand+0x5c>
 800b406:	bf00      	nop
 800b408:	fef080ff 	.word	0xfef080ff

0800b40c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b40c:	7c02      	ldrb	r2, [r0, #16]
{
 800b40e:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b410:	2a01      	cmp	r2, #1
 800b412:	d00a      	beq.n	800b42a <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b414:	6802      	ldr	r2, [r0, #0]
 800b416:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800b418:	f020 001f 	bic.w	r0, r0, #31
 800b41c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800b41e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800b420:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b422:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800b424:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800b426:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b428:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b42a:	2002      	movs	r0, #2
}
 800b42c:	4770      	bx	lr

0800b42e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800b42e:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b430:	7c03      	ldrb	r3, [r0, #16]
{
 800b432:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b434:	2b01      	cmp	r3, #1
 800b436:	d034      	beq.n	800b4a2 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800b438:	e9d1 0300 	ldrd	r0, r3, [r1]
 800b43c:	4298      	cmp	r0, r3
 800b43e:	bf38      	it	cc
 800b440:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b448:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800b44c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800b450:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b454:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b458:	4302      	orrs	r2, r0
 800b45a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800b45e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800b462:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800b466:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b46a:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800b46e:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b472:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b474:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b478:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b47a:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b47c:	432a      	orrs	r2, r5
 800b47e:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b480:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b482:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800b486:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b48a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800b48e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b492:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b496:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b49a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800b49e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b4a0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b4a2:	2002      	movs	r0, #2
 800b4a4:	e7fc      	b.n	800b4a0 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800b4a8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800b4a8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b4aa:	7c03      	ldrb	r3, [r0, #16]
{
 800b4ac:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d05b      	beq.n	800b56a <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b4b2:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b4b4:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b4b6:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b4b8:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b4ba:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800b4be:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b4c0:	689a      	ldr	r2, [r3, #8]
 800b4c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b4c6:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b4c8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800b4ca:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b4cc:	b292      	uxth	r2, r2
 800b4ce:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b4d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b4d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b4d6:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800b4d8:	4a25      	ldr	r2, [pc, #148]	@ (800b570 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800b4da:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b4dc:	4010      	ands	r0, r2
 800b4de:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b4e0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b4e2:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b4e4:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b4e6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800b4e8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b4ea:	4010      	ands	r0, r2
 800b4ec:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b4ee:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b4f0:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b4f2:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b4f4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800b4f6:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b4fa:	4010      	ands	r0, r2
 800b4fc:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b500:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b504:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b506:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b508:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800b50c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b510:	4010      	ands	r0, r2
 800b512:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b516:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b51a:	4328      	orrs	r0, r5
 800b51c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800b520:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b524:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800b528:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b52c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b530:	698d      	ldr	r5, [r1, #24]
 800b532:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b534:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b536:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b538:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800b53c:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800b540:	4010      	ands	r0, r2
 800b542:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b546:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800b54a:	4328      	orrs	r0, r5
 800b54c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800b550:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800b554:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b556:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800b558:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b55c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b560:	430a      	orrs	r2, r1
 800b562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800b566:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b568:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b56a:	2002      	movs	r0, #2
 800b56c:	e7fc      	b.n	800b568 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800b56e:	bf00      	nop
 800b570:	ffff0000 	.word	0xffff0000

0800b574 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b574:	7c03      	ldrb	r3, [r0, #16]
{
 800b576:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d01c      	beq.n	800b5b6 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800b57c:	6802      	ldr	r2, [r0, #0]
 800b57e:	2300      	movs	r3, #0
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	6851      	ldr	r1, [r2, #4]
 800b584:	f041 0101 	orr.w	r1, r1, #1
 800b588:	6051      	str	r1, [r2, #4]
 800b58a:	6851      	ldr	r1, [r2, #4]
 800b58c:	f001 0101 	and.w	r1, r1, #1
 800b590:	9100      	str	r1, [sp, #0]
 800b592:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800b59a:	f041 0108 	orr.w	r1, r1, #8
 800b59e:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800b5a2:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b5a6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b5a8:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b5aa:	f002 0208 	and.w	r2, r2, #8
 800b5ae:	9201      	str	r2, [sp, #4]
 800b5b0:	9a01      	ldr	r2, [sp, #4]
}
 800b5b2:	b002      	add	sp, #8
 800b5b4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b5b6:	2002      	movs	r0, #2
 800b5b8:	e7fb      	b.n	800b5b2 <HAL_DSI_Start+0x3e>

0800b5ba <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b5ba:	7c02      	ldrb	r2, [r0, #16]
{
 800b5bc:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b5be:	2a01      	cmp	r2, #1
 800b5c0:	d009      	beq.n	800b5d6 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800b5c2:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b5c4:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800b5c6:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800b5ca:	f042 0204 	orr.w	r2, r2, #4
 800b5ce:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800b5d2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b5d4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b5d6:	2002      	movs	r0, #2
}
 800b5d8:	4770      	bx	lr

0800b5da <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800b5da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b5dc:	7c05      	ldrb	r5, [r0, #16]
{
 800b5de:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b5e0:	2d01      	cmp	r5, #1
 800b5e2:	d009      	beq.n	800b5f8 <HAL_DSI_ShortWrite+0x1e>
 800b5e4:	2501      	movs	r5, #1
 800b5e6:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800b5e8:	9d06      	ldr	r5, [sp, #24]
 800b5ea:	9500      	str	r5, [sp, #0]
 800b5ec:	f7ff fc6c 	bl	800aec8 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	7423      	strb	r3, [r4, #16]

  return status;
}
 800b5f4:	b003      	add	sp, #12
 800b5f6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b5f8:	2002      	movs	r0, #2
 800b5fa:	e7fb      	b.n	800b5f4 <HAL_DSI_ShortWrite+0x1a>

0800b5fc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800b5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b600:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b602:	7c03      	ldrb	r3, [r0, #16]
{
 800b604:	4606      	mov	r6, r0
 800b606:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800b608:	2b01      	cmp	r3, #1
{
 800b60a:	4615      	mov	r5, r2
 800b60c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 800b610:	d052      	beq.n	800b6b8 <HAL_DSI_LongWrite+0xbc>
 800b612:	2301      	movs	r3, #1
 800b614:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800b616:	f7ff fa61 	bl	800aadc <HAL_GetTick>
 800b61a:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b61c:	6832      	ldr	r2, [r6, #0]
 800b61e:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800b620:	f013 0a01 	ands.w	sl, r3, #1
 800b624:	d019      	beq.n	800b65a <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b626:	2c03      	cmp	r4, #3
 800b628:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800b62a:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b62e:	bf28      	it	cs
 800b630:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800b632:	4283      	cmp	r3, r0
 800b634:	d11d      	bne.n	800b672 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800b636:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800b638:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800b63a:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800b63e:	bb10      	cbnz	r0, 800b686 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800b640:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b642:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800b646:	0223      	lsls	r3, r4, #8
 800b648:	0224      	lsls	r4, r4, #8
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800b650:	431d      	orrs	r5, r3
 800b652:	4325      	orrs	r5, r4
 800b654:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b656:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 800b658:	e009      	b.n	800b66e <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b65a:	f7ff fa3f 	bl	800aadc <HAL_GetTick>
 800b65e:	eba0 000b 	sub.w	r0, r0, fp
 800b662:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b666:	d9d9      	bls.n	800b61c <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800b668:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b66a:	f886 a010 	strb.w	sl, [r6, #16]
}
 800b66e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b672:	f818 1003 	ldrb.w	r1, [r8, r3]
 800b676:	3301      	adds	r3, #1
 800b678:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800b67c:	fa01 f10c 	lsl.w	r1, r1, ip
 800b680:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800b684:	e7d5      	b.n	800b632 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b686:	2804      	cmp	r0, #4
    fifoword = 0U;
 800b688:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b68c:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800b68e:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b690:	bf28      	it	cs
 800b692:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b696:	f813 8001 	ldrb.w	r8, [r3, r1]
 800b69a:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800b69e:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b6a0:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800b6a4:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b6a6:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800b6aa:	d1f4      	bne.n	800b696 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800b6ac:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800b6b0:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800b6b2:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800b6b6:	e7c2      	b.n	800b63e <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800b6b8:	2002      	movs	r0, #2
 800b6ba:	e7d8      	b.n	800b66e <HAL_DSI_LongWrite+0x72>

0800b6bc <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800b6bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6c0:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b6c2:	7c03      	ldrb	r3, [r0, #16]
{
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800b6c8:	2b01      	cmp	r3, #1
{
 800b6ca:	4617      	mov	r7, r2
 800b6cc:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b6d0:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 800b6d4:	d06f      	beq.n	800b7b6 <HAL_DSI_Read+0xfa>
 800b6d6:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800b6d8:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800b6da:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800b6dc:	d90d      	bls.n	800b6fa <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800b6de:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800b6e2:	2237      	movs	r2, #55	@ 0x37
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	b2f3      	uxtb	r3, r6
 800b6e8:	f7ff fbee 	bl	800aec8 <DSI_ShortWrite.constprop.0>
 800b6ec:	b128      	cbz	r0, 800b6fa <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800b6ee:	2300      	movs	r3, #0

      return HAL_ERROR;
 800b6f0:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800b6f2:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800b6f4:	b003      	add	sp, #12
 800b6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800b6fa:	f1b9 0f06 	cmp.w	r9, #6
 800b6fe:	d10f      	bne.n	800b720 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b700:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800b702:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b704:	021b      	lsls	r3, r3, #8
 800b706:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800b70a:	f043 0306 	orr.w	r3, r3, #6
 800b70e:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800b710:	f7ff f9e4 	bl	800aadc <HAL_GetTick>
 800b714:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800b716:	2e00      	cmp	r6, #0
 800b718:	dc27      	bgt.n	800b76a <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800b71a:	2000      	movs	r0, #0
 800b71c:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800b71e:	e7e9      	b.n	800b6f4 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800b720:	f1b9 0f04 	cmp.w	r9, #4
 800b724:	d105      	bne.n	800b732 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b726:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800b728:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b72a:	f044 0404 	orr.w	r4, r4, #4
 800b72e:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800b730:	e7ee      	b.n	800b710 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800b732:	f1b9 0f14 	cmp.w	r9, #20
 800b736:	d108      	bne.n	800b74a <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b738:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b73c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800b73e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b740:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800b744:	f044 0414 	orr.w	r4, r4, #20
 800b748:	e7f1      	b.n	800b72e <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800b74a:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 800b74e:	d1ce      	bne.n	800b6ee <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b750:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b754:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b756:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800b75c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b760:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800b764:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 800b768:	e7e1      	b.n	800b72e <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800b76a:	682a      	ldr	r2, [r5, #0]
 800b76c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800b76e:	f013 0310 	ands.w	r3, r3, #16
 800b772:	d10d      	bne.n	800b790 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b774:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800b776:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800b778:	4632      	mov	r2, r6
 800b77a:	bf28      	it	cs
 800b77c:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800b77e:	00d9      	lsls	r1, r3, #3
 800b780:	fa20 f101 	lsr.w	r1, r0, r1
 800b784:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800b786:	3301      	adds	r3, #1
 800b788:	429a      	cmp	r2, r3
 800b78a:	d1f8      	bne.n	800b77e <HAL_DSI_Read+0xc2>
        pdata++;
 800b78c:	4417      	add	r7, r2
        datasize--;
 800b78e:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b790:	f7ff f9a4 	bl	800aadc <HAL_GetTick>
 800b794:	1b00      	subs	r0, r0, r4
 800b796:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b79a:	d903      	bls.n	800b7a4 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800b79c:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800b79e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b7a0:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800b7a2:	e7a7      	b.n	800b6f4 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800b7a8:	0652      	lsls	r2, r2, #25
 800b7aa:	d4b4      	bmi.n	800b716 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800b7ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7b0:	069b      	lsls	r3, r3, #26
 800b7b2:	d49c      	bmi.n	800b6ee <HAL_DSI_Read+0x32>
 800b7b4:	e7af      	b.n	800b716 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800b7b6:	2002      	movs	r0, #2
 800b7b8:	e79c      	b.n	800b6f4 <HAL_DSI_Read+0x38>

0800b7ba <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b7ba:	7c02      	ldrb	r2, [r0, #16]
{
 800b7bc:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b7be:	2a01      	cmp	r2, #1
 800b7c0:	d00f      	beq.n	800b7e2 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800b7c2:	6802      	ldr	r2, [r0, #0]
 800b7c4:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b7c8:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800b7cc:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b7d0:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b7d4:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b7d8:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b7da:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800b7de:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b7e0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b7e2:	2002      	movs	r0, #2
}
 800b7e4:	4770      	bx	lr
	...

0800b7e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800b7ec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7ee:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800b9b4 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b7f2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b7f6:	680a      	ldr	r2, [r1, #0]
 800b7f8:	fa32 f503 	lsrs.w	r5, r2, r3
 800b7fc:	d102      	bne.n	800b804 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800b7fe:	b003      	add	sp, #12
 800b800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b804:	2501      	movs	r5, #1
 800b806:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800b80a:	ea18 0202 	ands.w	r2, r8, r2
 800b80e:	f000 80bb 	beq.w	800b988 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b812:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b814:	2703      	movs	r7, #3
 800b816:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b81a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b81e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b822:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b824:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b828:	2f01      	cmp	r7, #1
 800b82a:	d834      	bhi.n	800b896 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800b82c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b82e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b832:	68cf      	ldr	r7, [r1, #12]
 800b834:	fa07 f70e 	lsl.w	r7, r7, lr
 800b838:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800b83c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b83e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b840:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b844:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800b848:	409f      	lsls	r7, r3
 800b84a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800b84e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800b850:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b852:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b854:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b858:	688f      	ldr	r7, [r1, #8]
 800b85a:	fa07 f70e 	lsl.w	r7, r7, lr
 800b85e:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800b862:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b864:	d119      	bne.n	800b89a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800b866:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b86a:	f003 0a07 	and.w	sl, r3, #7
 800b86e:	f04f 0b0f 	mov.w	fp, #15
 800b872:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800b876:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800b87a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b87e:	fa0b fb0a 	lsl.w	fp, fp, sl
 800b882:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b886:	690f      	ldr	r7, [r1, #16]
 800b888:	fa07 f70a 	lsl.w	r7, r7, sl
 800b88c:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 800b890:	f8c8 7020 	str.w	r7, [r8, #32]
 800b894:	e001      	b.n	800b89a <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b896:	2d03      	cmp	r5, #3
 800b898:	d1da      	bne.n	800b850 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 800b89a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b89c:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b8a0:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b8a4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b8a8:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 800b8ac:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b8ae:	d06b      	beq.n	800b988 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8b0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 800b8b4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b8b8:	f003 0c03 	and.w	ip, r3, #3
 800b8bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8c0:	f045 0502 	orr.w	r5, r5, #2
 800b8c4:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b8c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8cc:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 800b8d0:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800b8d4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b8d8:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8dc:	f005 0502 	and.w	r5, r5, #2
 800b8e0:	9501      	str	r5, [sp, #4]
 800b8e2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800b8e4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b8e6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b8ea:	4d31      	ldr	r5, [pc, #196]	@ (800b9b0 <HAL_GPIO_Init+0x1c8>)
 800b8ec:	42a8      	cmp	r0, r5
 800b8ee:	d04d      	beq.n	800b98c <HAL_GPIO_Init+0x1a4>
 800b8f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b8f4:	42a8      	cmp	r0, r5
 800b8f6:	d04b      	beq.n	800b990 <HAL_GPIO_Init+0x1a8>
 800b8f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b8fc:	42a8      	cmp	r0, r5
 800b8fe:	d049      	beq.n	800b994 <HAL_GPIO_Init+0x1ac>
 800b900:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b904:	42a8      	cmp	r0, r5
 800b906:	d047      	beq.n	800b998 <HAL_GPIO_Init+0x1b0>
 800b908:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b90c:	42a8      	cmp	r0, r5
 800b90e:	d045      	beq.n	800b99c <HAL_GPIO_Init+0x1b4>
 800b910:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b914:	42a8      	cmp	r0, r5
 800b916:	d043      	beq.n	800b9a0 <HAL_GPIO_Init+0x1b8>
 800b918:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b91c:	42a8      	cmp	r0, r5
 800b91e:	d041      	beq.n	800b9a4 <HAL_GPIO_Init+0x1bc>
 800b920:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b924:	42a8      	cmp	r0, r5
 800b926:	d03f      	beq.n	800b9a8 <HAL_GPIO_Init+0x1c0>
 800b928:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b92c:	42a8      	cmp	r0, r5
 800b92e:	d03d      	beq.n	800b9ac <HAL_GPIO_Init+0x1c4>
 800b930:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b934:	42a8      	cmp	r0, r5
 800b936:	bf14      	ite	ne
 800b938:	250a      	movne	r5, #10
 800b93a:	2509      	moveq	r5, #9
 800b93c:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b940:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b944:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b948:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800b94a:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800b94e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800b950:	bf0c      	ite	eq
 800b952:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b954:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b956:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 800b95a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800b95c:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800b95e:	bf0c      	ite	eq
 800b960:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b962:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b964:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 800b968:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800b96a:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 800b96e:	bf0c      	ite	eq
 800b970:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800b972:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b974:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800b976:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800b97a:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800b97e:	bf54      	ite	pl
 800b980:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800b982:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800b984:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 800b988:	3301      	adds	r3, #1
 800b98a:	e734      	b.n	800b7f6 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b98c:	2500      	movs	r5, #0
 800b98e:	e7d5      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b990:	2501      	movs	r5, #1
 800b992:	e7d3      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b994:	2502      	movs	r5, #2
 800b996:	e7d1      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b998:	2503      	movs	r5, #3
 800b99a:	e7cf      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b99c:	2504      	movs	r5, #4
 800b99e:	e7cd      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b9a0:	2505      	movs	r5, #5
 800b9a2:	e7cb      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b9a4:	2506      	movs	r5, #6
 800b9a6:	e7c9      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b9a8:	2507      	movs	r5, #7
 800b9aa:	e7c7      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b9ac:	2508      	movs	r5, #8
 800b9ae:	e7c5      	b.n	800b93c <HAL_GPIO_Init+0x154>
 800b9b0:	58020000 	.word	0x58020000
 800b9b4:	58024400 	.word	0x58024400

0800b9b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800b9bc:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b9be:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b9c2:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b9c6:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b9ca:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800b9ce:	fa31 f302 	lsrs.w	r3, r1, r2
 800b9d2:	d101      	bne.n	800b9d8 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800b9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b9d8:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 800b9dc:	ea1c 0601 	ands.w	r6, ip, r1
 800b9e0:	d070      	beq.n	800bac4 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b9e2:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b9e6:	f002 0703 	and.w	r7, r2, #3
 800b9ea:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800b9ee:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b9f0:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b9f4:	fa08 f907 	lsl.w	r9, r8, r7
 800b9f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800b9fc:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ba00:	4b3a      	ldr	r3, [pc, #232]	@ (800baec <HAL_GPIO_DeInit+0x134>)
 800ba02:	4298      	cmp	r0, r3
 800ba04:	d060      	beq.n	800bac8 <HAL_GPIO_DeInit+0x110>
 800ba06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba0a:	4298      	cmp	r0, r3
 800ba0c:	d05e      	beq.n	800bacc <HAL_GPIO_DeInit+0x114>
 800ba0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba12:	4298      	cmp	r0, r3
 800ba14:	d05c      	beq.n	800bad0 <HAL_GPIO_DeInit+0x118>
 800ba16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba1a:	4298      	cmp	r0, r3
 800ba1c:	d05a      	beq.n	800bad4 <HAL_GPIO_DeInit+0x11c>
 800ba1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba22:	4298      	cmp	r0, r3
 800ba24:	d058      	beq.n	800bad8 <HAL_GPIO_DeInit+0x120>
 800ba26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba2a:	4298      	cmp	r0, r3
 800ba2c:	d056      	beq.n	800badc <HAL_GPIO_DeInit+0x124>
 800ba2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba32:	4298      	cmp	r0, r3
 800ba34:	d054      	beq.n	800bae0 <HAL_GPIO_DeInit+0x128>
 800ba36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba3a:	4298      	cmp	r0, r3
 800ba3c:	d052      	beq.n	800bae4 <HAL_GPIO_DeInit+0x12c>
 800ba3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba42:	4298      	cmp	r0, r3
 800ba44:	d050      	beq.n	800bae8 <HAL_GPIO_DeInit+0x130>
 800ba46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba4a:	4298      	cmp	r0, r3
 800ba4c:	bf0c      	ite	eq
 800ba4e:	2309      	moveq	r3, #9
 800ba50:	230a      	movne	r3, #10
 800ba52:	40bb      	lsls	r3, r7
 800ba54:	4573      	cmp	r3, lr
 800ba56:	d117      	bne.n	800ba88 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800ba58:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ba5c:	ea23 0306 	bic.w	r3, r3, r6
 800ba60:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800ba64:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ba68:	ea23 0306 	bic.w	r3, r3, r6
 800ba6c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800ba70:	6863      	ldr	r3, [r4, #4]
 800ba72:	ea23 0306 	bic.w	r3, r3, r6
 800ba76:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	ea23 0306 	bic.w	r3, r3, r6
 800ba7e:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ba80:	68ab      	ldr	r3, [r5, #8]
 800ba82:	ea23 0309 	bic.w	r3, r3, r9
 800ba86:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ba88:	0053      	lsls	r3, r2, #1
 800ba8a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ba8c:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ba8e:	fa0b f303 	lsl.w	r3, fp, r3
 800ba92:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800ba96:	431d      	orrs	r5, r3
 800ba98:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ba9a:	f002 0507 	and.w	r5, r2, #7
 800ba9e:	6a37      	ldr	r7, [r6, #32]
 800baa0:	00ad      	lsls	r5, r5, #2
 800baa2:	fa08 f505 	lsl.w	r5, r8, r5
 800baa6:	ea27 0705 	bic.w	r7, r7, r5
 800baaa:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800baac:	68c5      	ldr	r5, [r0, #12]
 800baae:	ea25 0503 	bic.w	r5, r5, r3
 800bab2:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800bab4:	6845      	ldr	r5, [r0, #4]
 800bab6:	ea25 050c 	bic.w	r5, r5, ip
 800baba:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800babc:	6885      	ldr	r5, [r0, #8]
 800babe:	ea25 0303 	bic.w	r3, r5, r3
 800bac2:	6083      	str	r3, [r0, #8]
    position++;
 800bac4:	3201      	adds	r2, #1
 800bac6:	e782      	b.n	800b9ce <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bac8:	2300      	movs	r3, #0
 800baca:	e7c2      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800bacc:	2301      	movs	r3, #1
 800bace:	e7c0      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e7be      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800bad4:	2303      	movs	r3, #3
 800bad6:	e7bc      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800bad8:	2304      	movs	r3, #4
 800bada:	e7ba      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800badc:	2305      	movs	r3, #5
 800bade:	e7b8      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800bae0:	2306      	movs	r3, #6
 800bae2:	e7b6      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800bae4:	2307      	movs	r3, #7
 800bae6:	e7b4      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800bae8:	2308      	movs	r3, #8
 800baea:	e7b2      	b.n	800ba52 <HAL_GPIO_DeInit+0x9a>
 800baec:	58020000 	.word	0x58020000

0800baf0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800baf0:	6903      	ldr	r3, [r0, #16]
 800baf2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800baf4:	bf14      	ite	ne
 800baf6:	2001      	movne	r0, #1
 800baf8:	2000      	moveq	r0, #0
 800bafa:	4770      	bx	lr

0800bafc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bafc:	b10a      	cbz	r2, 800bb02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bafe:	6181      	str	r1, [r0, #24]
  }
}
 800bb00:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bb02:	0409      	lsls	r1, r1, #16
 800bb04:	e7fb      	b.n	800bafe <HAL_GPIO_WritePin+0x2>

0800bb06 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bb06:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bb08:	ea01 0203 	and.w	r2, r1, r3
 800bb0c:	ea21 0103 	bic.w	r1, r1, r3
 800bb10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb14:	6181      	str	r1, [r0, #24]
}
 800bb16:	4770      	bx	lr

0800bb18 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800bb18:	4b04      	ldr	r3, [pc, #16]	@ (800bb2c <HAL_HSEM_FastTake+0x14>)
 800bb1a:	3020      	adds	r0, #32
 800bb1c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800bb20:	4b03      	ldr	r3, [pc, #12]	@ (800bb30 <HAL_HSEM_FastTake+0x18>)
 800bb22:	1ac0      	subs	r0, r0, r3
 800bb24:	bf18      	it	ne
 800bb26:	2001      	movne	r0, #1
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	58026400 	.word	0x58026400
 800bb30:	80000300 	.word	0x80000300

0800bb34 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800bb34:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800bb38:	4b01      	ldr	r3, [pc, #4]	@ (800bb40 <HAL_HSEM_Release+0xc>)
 800bb3a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800bb3e:	4770      	bx	lr
 800bb40:	58026400 	.word	0x58026400

0800bb44 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bb44:	6803      	ldr	r3, [r0, #0]
 800bb46:	699a      	ldr	r2, [r3, #24]
 800bb48:	0791      	lsls	r1, r2, #30
 800bb4a:	d501      	bpl.n	800bb50 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb50:	699a      	ldr	r2, [r3, #24]
 800bb52:	07d2      	lsls	r2, r2, #31
 800bb54:	d403      	bmi.n	800bb5e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bb56:	699a      	ldr	r2, [r3, #24]
 800bb58:	f042 0201 	orr.w	r2, r2, #1
 800bb5c:	619a      	str	r2, [r3, #24]
  }
}
 800bb5e:	4770      	bx	lr

0800bb60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bb60:	b530      	push	{r4, r5, lr}
 800bb62:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb64:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb68:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb6a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb6c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb72:	4a05      	ldr	r2, [pc, #20]	@ (800bb88 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb74:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb76:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb7e:	ea20 0002 	bic.w	r0, r0, r2
 800bb82:	4303      	orrs	r3, r0
 800bb84:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bb86:	bd30      	pop	{r4, r5, pc}
 800bb88:	03ff63ff 	.word	0x03ff63ff

0800bb8c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800bb8c:	6803      	ldr	r3, [r0, #0]
{
 800bb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800bb92:	699c      	ldr	r4, [r3, #24]
{
 800bb94:	4605      	mov	r5, r0
 800bb96:	460f      	mov	r7, r1
 800bb98:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bb9a:	f014 0410 	ands.w	r4, r4, #16
 800bb9e:	d06f      	beq.n	800bc80 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800bba0:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bba2:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800bba4:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bba6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bba8:	682b      	ldr	r3, [r5, #0]
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	0690      	lsls	r0, r2, #26
 800bbae:	d461      	bmi.n	800bc74 <I2C_IsErrorOccurred+0xe8>
 800bbb0:	f1b8 0f00 	cmp.w	r8, #0
 800bbb4:	d035      	beq.n	800bc22 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800bbb6:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800bbba:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800bbbc:	682e      	ldr	r6, [r5, #0]
 800bbbe:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bbc0:	05d9      	lsls	r1, r3, #23
 800bbc2:	d505      	bpl.n	800bbd0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bbc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800bbc8:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800bbcc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bbce:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bbd0:	055a      	lsls	r2, r3, #21
 800bbd2:	d505      	bpl.n	800bbe0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bbd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800bbd8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800bbdc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bbde:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bbe0:	059b      	lsls	r3, r3, #22
 800bbe2:	d54f      	bpl.n	800bc84 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bbe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800bbe8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bbec:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f7ff ffa8 	bl	800bb44 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800bbf4:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800bbf6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800bbf8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800bbfc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800bc00:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800bc04:	f023 0301 	bic.w	r3, r3, #1
 800bc08:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800bc0a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800bc0c:	4323      	orrs	r3, r4
 800bc0e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bc10:	2320      	movs	r3, #32
 800bc12:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc16:	2300      	movs	r3, #0
 800bc18:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800bc1c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800bc20:	e032      	b.n	800bc88 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800bc22:	1c7a      	adds	r2, r7, #1
 800bc24:	d0c1      	beq.n	800bbaa <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bc26:	f7fe ff59 	bl	800aadc <HAL_GetTick>
 800bc2a:	1b80      	subs	r0, r0, r6
 800bc2c:	42b8      	cmp	r0, r7
 800bc2e:	d801      	bhi.n	800bc34 <I2C_IsErrorOccurred+0xa8>
 800bc30:	2f00      	cmp	r7, #0
 800bc32:	d1b9      	bne.n	800bba8 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800bc38:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bc3c:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800bc3e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bc40:	0400      	lsls	r0, r0, #16
 800bc42:	d50a      	bpl.n	800bc5a <I2C_IsErrorOccurred+0xce>
 800bc44:	0449      	lsls	r1, r1, #17
 800bc46:	d408      	bmi.n	800bc5a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800bc48:	2a20      	cmp	r2, #32
 800bc4a:	d006      	beq.n	800bc5a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc52:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800bc54:	f7fe ff42 	bl	800aadc <HAL_GetTick>
 800bc58:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	069b      	lsls	r3, r3, #26
 800bc60:	d4a2      	bmi.n	800bba8 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bc62:	f7fe ff3b 	bl	800aadc <HAL_GetTick>
 800bc66:	1b80      	subs	r0, r0, r6
 800bc68:	2819      	cmp	r0, #25
 800bc6a:	d9f6      	bls.n	800bc5a <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bc6c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800bc6e:	f04f 0801 	mov.w	r8, #1
 800bc72:	e799      	b.n	800bba8 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800bc74:	f1b8 0f00 	cmp.w	r8, #0
 800bc78:	d19d      	bne.n	800bbb6 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc7a:	2220      	movs	r2, #32
 800bc7c:	61da      	str	r2, [r3, #28]
 800bc7e:	e79a      	b.n	800bbb6 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800bc80:	4620      	mov	r0, r4
 800bc82:	e79b      	b.n	800bbbc <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d1b2      	bne.n	800bbee <I2C_IsErrorOccurred+0x62>
}
 800bc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bc8c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800bc8c:	b570      	push	{r4, r5, r6, lr}
 800bc8e:	4604      	mov	r4, r0
 800bc90:	460d      	mov	r5, r1
 800bc92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bc94:	6823      	ldr	r3, [r4, #0]
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	079b      	lsls	r3, r3, #30
 800bc9a:	d501      	bpl.n	800bca0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e01f      	b.n	800bce0 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bca0:	4632      	mov	r2, r6
 800bca2:	4629      	mov	r1, r5
 800bca4:	4620      	mov	r0, r4
 800bca6:	f7ff ff71 	bl	800bb8c <I2C_IsErrorOccurred>
 800bcaa:	b9c0      	cbnz	r0, 800bcde <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800bcac:	1c6a      	adds	r2, r5, #1
 800bcae:	d0f1      	beq.n	800bc94 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcb0:	f7fe ff14 	bl	800aadc <HAL_GetTick>
 800bcb4:	1b80      	subs	r0, r0, r6
 800bcb6:	42a8      	cmp	r0, r5
 800bcb8:	d801      	bhi.n	800bcbe <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	d1ea      	bne.n	800bc94 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	f013 0302 	ands.w	r3, r3, #2
 800bcc6:	d1e5      	bne.n	800bc94 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcc8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800bcca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcce:	f042 0220 	orr.w	r2, r2, #32
 800bcd2:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcda:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800bcde:	2001      	movs	r0, #1
}
 800bce0:	bd70      	pop	{r4, r5, r6, pc}

0800bce2 <I2C_WaitOnFlagUntilTimeout>:
{
 800bce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bcea:	4604      	mov	r4, r0
 800bcec:	460f      	mov	r7, r1
 800bcee:	4616      	mov	r6, r2
 800bcf0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	ea37 0303 	bics.w	r3, r7, r3
 800bcfa:	bf0c      	ite	eq
 800bcfc:	2301      	moveq	r3, #1
 800bcfe:	2300      	movne	r3, #0
 800bd00:	42b3      	cmp	r3, r6
 800bd02:	d001      	beq.n	800bd08 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800bd04:	2000      	movs	r0, #0
 800bd06:	e025      	b.n	800bd54 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd08:	4642      	mov	r2, r8
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f7ff ff3d 	bl	800bb8c <I2C_IsErrorOccurred>
 800bd12:	b9f0      	cbnz	r0, 800bd52 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 800bd14:	1c6b      	adds	r3, r5, #1
 800bd16:	d0ec      	beq.n	800bcf2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd18:	f7fe fee0 	bl	800aadc <HAL_GetTick>
 800bd1c:	eba0 0008 	sub.w	r0, r0, r8
 800bd20:	42a8      	cmp	r0, r5
 800bd22:	d801      	bhi.n	800bd28 <I2C_WaitOnFlagUntilTimeout+0x46>
 800bd24:	2d00      	cmp	r5, #0
 800bd26:	d1e4      	bne.n	800bcf2 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	ea37 0303 	bics.w	r3, r7, r3
 800bd30:	bf0c      	ite	eq
 800bd32:	2301      	moveq	r3, #1
 800bd34:	2300      	movne	r3, #0
 800bd36:	42b3      	cmp	r3, r6
 800bd38:	d1db      	bne.n	800bcf2 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd3a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bd3c:	f043 0320 	orr.w	r3, r3, #32
 800bd40:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bd42:	2320      	movs	r3, #32
 800bd44:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800bd4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bd52:	2001      	movs	r0, #1
}
 800bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd58 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	069b      	lsls	r3, r3, #26
 800bd66:	d501      	bpl.n	800bd6c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e01d      	b.n	800bda8 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd6c:	4632      	mov	r2, r6
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4620      	mov	r0, r4
 800bd72:	f7ff ff0b 	bl	800bb8c <I2C_IsErrorOccurred>
 800bd76:	b9b0      	cbnz	r0, 800bda6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd78:	f7fe feb0 	bl	800aadc <HAL_GetTick>
 800bd7c:	1b80      	subs	r0, r0, r6
 800bd7e:	42a8      	cmp	r0, r5
 800bd80:	d801      	bhi.n	800bd86 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800bd82:	2d00      	cmp	r5, #0
 800bd84:	d1ec      	bne.n	800bd60 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f013 0320 	ands.w	r3, r3, #32
 800bd8e:	d1e7      	bne.n	800bd60 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd90:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bd92:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd96:	f042 0220 	orr.w	r2, r2, #32
 800bd9a:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd9c:	2220      	movs	r2, #32
 800bd9e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bda2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800bda6:	2001      	movs	r0, #1
}
 800bda8:	bd70      	pop	{r4, r5, r6, pc}

0800bdaa <HAL_I2C_MspInit>:
}
 800bdaa:	4770      	bx	lr

0800bdac <HAL_I2C_Init>:
{
 800bdac:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800bdae:	4604      	mov	r4, r0
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d04e      	beq.n	800be52 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bdb4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800bdb8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bdbc:	b91b      	cbnz	r3, 800bdc6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800bdbe:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800bdc2:	f7ff fff2 	bl	800bdaa <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bdc6:	2324      	movs	r3, #36	@ 0x24
 800bdc8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bdd6:	6862      	ldr	r2, [r4, #4]
 800bdd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bddc:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bdde:	689a      	ldr	r2, [r3, #8]
 800bde0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bde4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bde6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdea:	2901      	cmp	r1, #1
 800bdec:	d106      	bne.n	800bdfc <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bdee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bdf2:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bdf4:	685a      	ldr	r2, [r3, #4]
 800bdf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bdfa:	e007      	b.n	800be0c <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bdfc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be00:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be02:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be04:	d1f6      	bne.n	800bdf4 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800be0c:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be0e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800be16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800be1a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800be22:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be24:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800be28:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800be2a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800be30:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be32:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800be36:	430a      	orrs	r2, r1
 800be38:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	f042 0201 	orr.w	r2, r2, #1
 800be40:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800be42:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be44:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800be46:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be4a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be4c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800be50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800be52:	2001      	movs	r0, #1
 800be54:	e7fc      	b.n	800be50 <HAL_I2C_Init+0xa4>

0800be56 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800be56:	4770      	bx	lr

0800be58 <HAL_I2C_DeInit>:
{
 800be58:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800be5a:	4604      	mov	r4, r0
 800be5c:	b198      	cbz	r0, 800be86 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800be5e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800be60:	2324      	movs	r3, #36	@ 0x24
 800be62:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800be66:	6813      	ldr	r3, [r2, #0]
 800be68:	f023 0301 	bic.w	r3, r3, #1
 800be6c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800be6e:	f7ff fff2 	bl	800be56 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be72:	2000      	movs	r0, #0
 800be74:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800be76:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800be7a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be7e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be80:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800be84:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800be86:	2001      	movs	r0, #1
 800be88:	e7fc      	b.n	800be84 <HAL_I2C_DeInit+0x2c>
	...

0800be8c <HAL_I2C_Mem_Write>:
{
 800be8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800be92:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800be96:	4604      	mov	r4, r0
 800be98:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800be9a:	2b20      	cmp	r3, #32
{
 800be9c:	4616      	mov	r6, r2
 800be9e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800bea2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bea6:	f040 80c6 	bne.w	800c036 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800beaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800beac:	b113      	cbz	r3, 800beb4 <HAL_I2C_Mem_Write+0x28>
 800beae:	f1ba 0f00 	cmp.w	sl, #0
 800beb2:	d106      	bne.n	800bec2 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800beb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800beb8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800beba:	2001      	movs	r0, #1
}
 800bebc:	b003      	add	sp, #12
 800bebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800bec2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	f000 80b5 	beq.w	800c036 <HAL_I2C_Mem_Write+0x1aa>
 800becc:	f04f 0b01 	mov.w	fp, #1
 800bed0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800bed4:	f7fe fe02 	bl	800aadc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bed8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800beda:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bedc:	9000      	str	r0, [sp, #0]
 800bede:	465a      	mov	r2, fp
 800bee0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bee4:	4620      	mov	r0, r4
 800bee6:	f7ff fefc 	bl	800bce2 <I2C_WaitOnFlagUntilTimeout>
 800beea:	2800      	cmp	r0, #0
 800beec:	d1e5      	bne.n	800beba <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800beee:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800bef0:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bef2:	fa5f f289 	uxtb.w	r2, r9
 800bef6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bef8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800befc:	2340      	movs	r3, #64	@ 0x40
 800befe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800bf02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf04:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bf06:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800bf08:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bf0a:	4b4c      	ldr	r3, [pc, #304]	@ (800c03c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800bf0c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bf16:	f7ff fe23 	bl	800bb60 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf1a:	462a      	mov	r2, r5
 800bf1c:	4641      	mov	r1, r8
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7ff feb4 	bl	800bc8c <I2C_WaitOnTXISFlagUntilTimeout>
 800bf24:	bb18      	cbnz	r0, 800bf6e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf26:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf2a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf2c:	d115      	bne.n	800bf5a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf2e:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bf30:	2200      	movs	r2, #0
 800bf32:	2180      	movs	r1, #128	@ 0x80
 800bf34:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf36:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bf38:	4643      	mov	r3, r8
 800bf3a:	9500      	str	r5, [sp, #0]
 800bf3c:	f7ff fed1 	bl	800bce2 <I2C_WaitOnFlagUntilTimeout>
 800bf40:	b9a8      	cbnz	r0, 800bf6e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf42:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	2bff      	cmp	r3, #255	@ 0xff
 800bf48:	d815      	bhi.n	800bf76 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800bf4a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bf4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800bf50:	b292      	uxth	r2, r2
 800bf52:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bf54:	b2d2      	uxtb	r2, r2
 800bf56:	9000      	str	r0, [sp, #0]
 800bf58:	e012      	b.n	800bf80 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bf5a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf5c:	4641      	mov	r1, r8
 800bf5e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bf60:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf62:	462a      	mov	r2, r5
 800bf64:	f7ff fe92 	bl	800bc8c <I2C_WaitOnTXISFlagUntilTimeout>
 800bf68:	b908      	cbnz	r0, 800bf6e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	e7df      	b.n	800bf2e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bf74:	e7a1      	b.n	800beba <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf76:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bf78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf7c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bf7e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bf80:	4639      	mov	r1, r7
 800bf82:	4620      	mov	r0, r4
 800bf84:	f7ff fdec 	bl	800bb60 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf88:	462a      	mov	r2, r5
 800bf8a:	4641      	mov	r1, r8
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f7ff fe7d 	bl	800bc8c <I2C_WaitOnTXISFlagUntilTimeout>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d191      	bne.n	800beba <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bf96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bf98:	6822      	ldr	r2, [r4, #0]
 800bf9a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800bf9e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bfa0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bfa2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bfa4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bfa6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800bfa8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800bfaa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800bfac:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800bfae:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bfb0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bfb2:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	b1b3      	cbz	r3, 800bfe6 <HAL_I2C_Mem_Write+0x15a>
 800bfb8:	b9aa      	cbnz	r2, 800bfe6 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bfba:	4643      	mov	r3, r8
 800bfbc:	2180      	movs	r1, #128	@ 0x80
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	9500      	str	r5, [sp, #0]
 800bfc2:	f7ff fe8e 	bl	800bce2 <I2C_WaitOnFlagUntilTimeout>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	f47f af77 	bne.w	800beba <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfcc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2bff      	cmp	r3, #255	@ 0xff
 800bfd2:	d928      	bls.n	800c026 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfd4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bfd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfda:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bfdc:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bfde:	4639      	mov	r1, r7
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f7ff fdbd 	bl	800bb60 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800bfe6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1cc      	bne.n	800bf88 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfee:	462a      	mov	r2, r5
 800bff0:	4641      	mov	r1, r8
 800bff2:	4620      	mov	r0, r4
 800bff4:	f7ff feb0 	bl	800bd58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	f47f af5e 	bne.w	800beba <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	2120      	movs	r1, #32
 800c002:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800c00a:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800c00e:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800c012:	f022 0201 	bic.w	r2, r2, #1
 800c016:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c018:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c01c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c020:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800c024:	e74a      	b.n	800bebc <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800c026:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c02c:	b292      	uxth	r2, r2
 800c02e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c030:	b2d2      	uxtb	r2, r2
 800c032:	9000      	str	r0, [sp, #0]
 800c034:	e7d3      	b.n	800bfde <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800c036:	2002      	movs	r0, #2
 800c038:	e740      	b.n	800bebc <HAL_I2C_Mem_Write+0x30>
 800c03a:	bf00      	nop
 800c03c:	80002000 	.word	0x80002000

0800c040 <HAL_I2C_Mem_Read>:
{
 800c040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c046:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800c04a:	4604      	mov	r4, r0
 800c04c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c04e:	2b20      	cmp	r3, #32
{
 800c050:	4616      	mov	r6, r2
 800c052:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800c056:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c05a:	f040 80c9 	bne.w	800c1f0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800c05e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c060:	b113      	cbz	r3, 800c068 <HAL_I2C_Mem_Read+0x28>
 800c062:	f1ba 0f00 	cmp.w	sl, #0
 800c066:	d106      	bne.n	800c076 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c06c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800c06e:	2001      	movs	r0, #1
}
 800c070:	b003      	add	sp, #12
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800c076:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	f000 80b8 	beq.w	800c1f0 <HAL_I2C_Mem_Read+0x1b0>
 800c080:	f04f 0b01 	mov.w	fp, #1
 800c084:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800c088:	f7fe fd28 	bl	800aadc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c08c:	2319      	movs	r3, #25
 800c08e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800c090:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c092:	465a      	mov	r2, fp
 800c094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff fe22 	bl	800bce2 <I2C_WaitOnFlagUntilTimeout>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	d1e4      	bne.n	800c06e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0a4:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800c0a6:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c0a8:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0aa:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c0ae:	2240      	movs	r2, #64	@ 0x40
 800c0b0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800c0b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0b6:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c0b8:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800c0ba:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c0bc:	4a4d      	ldr	r2, [pc, #308]	@ (800c1f4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800c0be:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c0c2:	9200      	str	r2, [sp, #0]
 800c0c4:	fa5f f289 	uxtb.w	r2, r9
 800c0c8:	f7ff fd4a 	bl	800bb60 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	4641      	mov	r1, r8
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f7ff fddb 	bl	800bc8c <I2C_WaitOnTXISFlagUntilTimeout>
 800c0d6:	bb20      	cbnz	r0, 800c122 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c0d8:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c0dc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c0de:	d116      	bne.n	800c10e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c0e0:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2140      	movs	r1, #64	@ 0x40
 800c0e6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c0e8:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c0ea:	4643      	mov	r3, r8
 800c0ec:	9500      	str	r5, [sp, #0]
 800c0ee:	f7ff fdf8 	bl	800bce2 <I2C_WaitOnFlagUntilTimeout>
 800c0f2:	b9b0      	cbnz	r0, 800c122 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	2bff      	cmp	r3, #255	@ 0xff
 800c0fa:	4b3f      	ldr	r3, [pc, #252]	@ (800c1f8 <HAL_I2C_Mem_Read+0x1b8>)
 800c0fc:	d815      	bhi.n	800c12a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800c0fe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800c100:	b292      	uxth	r2, r2
 800c102:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c104:	b2d2      	uxtb	r2, r2
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c10c:	e012      	b.n	800c134 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c10e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c110:	4641      	mov	r1, r8
 800c112:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c114:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c116:	462a      	mov	r2, r5
 800c118:	f7ff fdb8 	bl	800bc8c <I2C_WaitOnTXISFlagUntilTimeout>
 800c11c:	b908      	cbnz	r0, 800c122 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	e7de      	b.n	800c0e0 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800c122:	2300      	movs	r3, #0
 800c124:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800c128:	e7a1      	b.n	800c06e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c12a:	22ff      	movs	r2, #255	@ 0xff
 800c12c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c134:	4639      	mov	r1, r7
 800c136:	4620      	mov	r0, r4
 800c138:	f7ff fd12 	bl	800bb60 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c13c:	4643      	mov	r3, r8
 800c13e:	2200      	movs	r2, #0
 800c140:	2104      	movs	r1, #4
 800c142:	4620      	mov	r0, r4
 800c144:	9500      	str	r5, [sp, #0]
 800c146:	f7ff fdcc 	bl	800bce2 <I2C_WaitOnFlagUntilTimeout>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d18f      	bne.n	800c06e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c152:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c154:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800c156:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800c158:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800c15a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800c15c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c15e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800c160:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800c162:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800c164:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800c166:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800c168:	b29b      	uxth	r3, r3
 800c16a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c16c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c16e:	b29b      	uxth	r3, r3
 800c170:	b1b3      	cbz	r3, 800c1a0 <HAL_I2C_Mem_Read+0x160>
 800c172:	b9aa      	cbnz	r2, 800c1a0 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c174:	4643      	mov	r3, r8
 800c176:	2180      	movs	r1, #128	@ 0x80
 800c178:	4620      	mov	r0, r4
 800c17a:	9500      	str	r5, [sp, #0]
 800c17c:	f7ff fdb1 	bl	800bce2 <I2C_WaitOnFlagUntilTimeout>
 800c180:	2800      	cmp	r0, #0
 800c182:	f47f af74 	bne.w	800c06e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c186:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c188:	b29b      	uxth	r3, r3
 800c18a:	2bff      	cmp	r3, #255	@ 0xff
 800c18c:	d928      	bls.n	800c1e0 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c18e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c190:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c194:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c196:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c198:	4639      	mov	r1, r7
 800c19a:	4620      	mov	r0, r4
 800c19c:	f7ff fce0 	bl	800bb60 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c1a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1c9      	bne.n	800c13c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1a8:	462a      	mov	r2, r5
 800c1aa:	4641      	mov	r1, r8
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f7ff fdd3 	bl	800bd58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f47f af5b 	bne.w	800c06e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	2120      	movs	r1, #32
 800c1bc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800c1c4:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800c1c8:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800c1cc:	f022 0201 	bic.w	r2, r2, #1
 800c1d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c1d2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c1d6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c1da:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800c1de:	e747      	b.n	800c070 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800c1e0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c1e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c1e6:	b292      	uxth	r2, r2
 800c1e8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	9000      	str	r0, [sp, #0]
 800c1ee:	e7d3      	b.n	800c198 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800c1f0:	2002      	movs	r0, #2
 800c1f2:	e73d      	b.n	800c070 <HAL_I2C_Mem_Read+0x30>
 800c1f4:	80002000 	.word	0x80002000
 800c1f8:	80002400 	.word	0x80002400

0800c1fc <HAL_I2C_GetState>:
  return hi2c->State;
 800c1fc:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800c200:	4770      	bx	lr

0800c202 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800c202:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800c204:	4770      	bx	lr

0800c206 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c206:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c208:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800c20c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c20e:	2a20      	cmp	r2, #32
 800c210:	b2d4      	uxtb	r4, r2
 800c212:	d11c      	bne.n	800c24e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c214:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800c218:	2a01      	cmp	r2, #1
 800c21a:	d018      	beq.n	800c24e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c21c:	2224      	movs	r2, #36	@ 0x24
 800c21e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c222:	6802      	ldr	r2, [r0, #0]
 800c224:	6810      	ldr	r0, [r2, #0]
 800c226:	f020 0001 	bic.w	r0, r0, #1
 800c22a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c22c:	6810      	ldr	r0, [r2, #0]
 800c22e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800c232:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c234:	6810      	ldr	r0, [r2, #0]
 800c236:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c238:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800c23a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c23c:	6811      	ldr	r1, [r2, #0]
 800c23e:	f041 0101 	orr.w	r1, r1, #1
 800c242:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c244:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c248:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c24c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800c24e:	2002      	movs	r0, #2
 800c250:	e7fc      	b.n	800c24c <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800c252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c252:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c254:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800c258:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c25a:	2a20      	cmp	r2, #32
 800c25c:	b2d4      	uxtb	r4, r2
 800c25e:	d11b      	bne.n	800c298 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c260:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800c264:	2a01      	cmp	r2, #1
 800c266:	d017      	beq.n	800c298 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c268:	2224      	movs	r2, #36	@ 0x24
 800c26a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c26e:	6802      	ldr	r2, [r0, #0]
 800c270:	6810      	ldr	r0, [r2, #0]
 800c272:	f020 0001 	bic.w	r0, r0, #1
 800c276:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c278:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c27a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c27e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c282:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800c284:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800c286:	6811      	ldr	r1, [r2, #0]
 800c288:	f041 0101 	orr.w	r1, r1, #1
 800c28c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c28e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c292:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c296:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800c298:	2002      	movs	r0, #2
 800c29a:	e7fc      	b.n	800c296 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800c29c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800c29c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800c29e:	2401      	movs	r4, #1
 800c2a0:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800c2a2:	2500      	movs	r5, #0
 800c2a4:	194e      	adds	r6, r1, r5
 800c2a6:	443d      	add	r5, r7
 800c2a8:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800c2aa:	42be      	cmp	r6, r7
 800c2ac:	d112      	bne.n	800c2d4 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800c2ae:	2c10      	cmp	r4, #16
 800c2b0:	d108      	bne.n	800c2c4 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800c2b2:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800c2b4:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800c2b6:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800c2b8:	601d      	str	r5, [r3, #0]
  p = 0;
 800c2ba:	4623      	mov	r3, r4
  si = Huffsize[0];
 800c2bc:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800c2be:	5cc8      	ldrb	r0, [r1, r3]
 800c2c0:	b9d8      	cbnz	r0, 800c2fa <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800c2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800c2c4:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800c2c6:	3401      	adds	r4, #1
 800c2c8:	19ee      	adds	r6, r5, r7
 800c2ca:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800c2ce:	d9e9      	bls.n	800c2a4 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	e7f6      	b.n	800c2c2 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800c2d4:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800c2d8:	e7e7      	b.n	800c2aa <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800c2da:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800c2de:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800c2e0:	5cc8      	ldrb	r0, [r1, r3]
 800c2e2:	19dc      	adds	r4, r3, r7
 800c2e4:	42a8      	cmp	r0, r5
 800c2e6:	d0f8      	beq.n	800c2da <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800c2e8:	2d1f      	cmp	r5, #31
 800c2ea:	d8f1      	bhi.n	800c2d0 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800c2ec:	fa06 f005 	lsl.w	r0, r6, r5
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d9ed      	bls.n	800c2d0 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800c2f4:	0064      	lsls	r4, r4, #1
    si++;
 800c2f6:	3501      	adds	r5, #1
 800c2f8:	e7e1      	b.n	800c2be <JPEG_Bits_To_SizeCodes+0x22>
 800c2fa:	1ae7      	subs	r7, r4, r3
 800c2fc:	e7f0      	b.n	800c2e0 <JPEG_Bits_To_SizeCodes+0x44>

0800c2fe <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800c2fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c300:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800c304:	460d      	mov	r5, r1
 800c306:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800c308:	ab01      	add	r3, sp, #4
 800c30a:	aa43      	add	r2, sp, #268	@ 0x10c
 800c30c:	a902      	add	r1, sp, #8
 800c30e:	f7ff ffc5 	bl	800c29c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800c312:	b938      	cbnz	r0, 800c324 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800c314:	9e01      	ldr	r6, [sp, #4]
 800c316:	460b      	mov	r3, r1
 800c318:	f104 010f 	add.w	r1, r4, #15
 800c31c:	360f      	adds	r6, #15
 800c31e:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800c320:	42a1      	cmp	r1, r4
 800c322:	d102      	bne.n	800c32a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c324:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800c328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800c32a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800c32e:	2e0b      	cmp	r6, #11
 800c330:	d80a      	bhi.n	800c348 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c332:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800c336:	f852 cb04 	ldr.w	ip, [r2], #4
 800c33a:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800c33e:	f813 7b01 	ldrb.w	r7, [r3], #1
 800c342:	3f01      	subs	r7, #1
 800c344:	55af      	strb	r7, [r5, r6]
      k++;
 800c346:	e7eb      	b.n	800c320 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800c348:	2001      	movs	r0, #1
 800c34a:	e7eb      	b.n	800c324 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800c34c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800c34c:	4603      	mov	r3, r0
 800c34e:	4608      	mov	r0, r1
 800c350:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800c352:	681c      	ldr	r4, [r3, #0]
{
 800c354:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800c356:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d125      	bne.n	800c3aa <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800c35e:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800c362:	a901      	add	r1, sp, #4
 800c364:	f7ff ffcb 	bl	800c2fe <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800c368:	b9e8      	cbnz	r0, 800c3a6 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800c36a:	aa01      	add	r2, sp, #4
 800c36c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800c370:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800c374:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800c376:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800c378:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c37a:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800c37c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c37e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800c382:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c384:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c386:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c38a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800c38e:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800c390:	7b13      	ldrb	r3, [r2, #12]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c398:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800c39a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c39e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800c3a2:	42b4      	cmp	r4, r6
 800c3a4:	d1e9      	bne.n	800c37a <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c3a6:	b011      	add	sp, #68	@ 0x44
 800c3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800c3aa:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d102      	bne.n	800c3b8 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800c3b2:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800c3b6:	e7d4      	b.n	800c362 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	e7f4      	b.n	800c3a6 <JPEG_Set_HuffDC_Mem+0x5a>

0800c3bc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800c3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800c3c0:	6804      	ldr	r4, [r0, #0]
{
 800c3c2:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800c3c6:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800c3c8:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d149      	bne.n	800c464 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800c3d0:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800c3d4:	466b      	mov	r3, sp
 800c3d6:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800c3da:	a901      	add	r1, sp, #4
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7ff ff5d 	bl	800c29c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d13a      	bne.n	800c45c <JPEG_Set_HuffAC_Mem+0xa0>
 800c3e6:	9b00      	ldr	r3, [sp, #0]
 800c3e8:	460d      	mov	r5, r1
 800c3ea:	f106 0c0f 	add.w	ip, r6, #15
 800c3ee:	4617      	mov	r7, r2
 800c3f0:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800c3f2:	f04f 0e0a 	mov.w	lr, #10
 800c3f6:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c3f8:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800c3fa:	4561      	cmp	r1, ip
 800c3fc:	d139      	bne.n	800c472 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800c3fe:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800c402:	a942      	add	r1, sp, #264	@ 0x108
 800c404:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800c408:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800c40a:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800c40c:	6063      	str	r3, [r4, #4]
 800c40e:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800c410:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800c414:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800c418:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800c41a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800c41e:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800c420:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800c424:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800c426:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800c42a:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c42c:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800c430:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c432:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800c436:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c438:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c43a:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c43e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800c442:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c444:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800c448:	021b      	lsls	r3, r3, #8
 800c44a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c44e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800c450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c454:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800c458:	42b4      	cmp	r4, r6
 800c45a:	d1e7      	bne.n	800c42c <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c45c:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800c460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800c464:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800c468:	429a      	cmp	r2, r3
 800c46a:	d10f      	bne.n	800c48c <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800c46c:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800c470:	e7b0      	b.n	800c3d4 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800c472:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800c476:	b15b      	cbz	r3, 800c490 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800c478:	2bf0      	cmp	r3, #240	@ 0xf0
 800c47a:	d015      	beq.n	800c4a8 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800c47c:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800c47e:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800c482:	3b01      	subs	r3, #1
 800c484:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800c488:	2ba1      	cmp	r3, #161	@ 0xa1
 800c48a:	d902      	bls.n	800c492 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800c48c:	2001      	movs	r0, #1
 800c48e:	e7e5      	b.n	800c45c <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800c490:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c492:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800c496:	f857 8b04 	ldr.w	r8, [r7], #4
 800c49a:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800c49e:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c4a2:	3a01      	subs	r2, #1
 800c4a4:	54f2      	strb	r2, [r6, r3]
      k++;
 800c4a6:	e7a8      	b.n	800c3fa <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800c4a8:	23a1      	movs	r3, #161	@ 0xa1
 800c4aa:	e7f2      	b.n	800c492 <JPEG_Set_HuffAC_Mem+0xd6>

0800c4ac <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800c4ac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c4ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c4b2:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c4b4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c4b6:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c4b8:	f002 0203 	and.w	r2, r2, #3
 800c4bc:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c4be:	685a      	ldr	r2, [r3, #4]
 800c4c0:	bf0c      	ite	eq
 800c4c2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800c4c6:	f022 0208 	bicne.w	r2, r2, #8
 800c4ca:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	f022 0201 	bic.w	r2, r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c4d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4d6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c4da:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c4dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c4e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c4e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4ea:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c4ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4ee:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c4f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	f042 0201 	orr.w	r2, r2, #1
 800c4fa:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c4fc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800c4fe:	f002 020c 	and.w	r2, r2, #12
 800c502:	2a08      	cmp	r2, #8
 800c504:	d104      	bne.n	800c510 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800c506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c508:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c50c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800c50e:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c510:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800c512:	f002 020c 	and.w	r2, r2, #12
 800c516:	2a0c      	cmp	r2, #12
 800c518:	d1f9      	bne.n	800c50e <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c51a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c51c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c520:	e7f4      	b.n	800c50c <JPEG_Init_Process+0x60>
	...

0800c524 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c526:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800c528:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c52a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c52c:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c52e:	42aa      	cmp	r2, r5
 800c530:	d313      	bcc.n	800c55a <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c532:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c534:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c536:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c538:	428b      	cmp	r3, r1
 800c53a:	d30e      	bcc.n	800c55a <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800c53c:	4f18      	ldr	r7, [pc, #96]	@ (800c5a0 <JPEG_DMA_StartProcess+0x7c>)
 800c53e:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c540:	4f18      	ldr	r7, [pc, #96]	@ (800c5a4 <JPEG_DMA_StartProcess+0x80>)
 800c542:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c544:	4e18      	ldr	r6, [pc, #96]	@ (800c5a8 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c546:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c548:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800c54a:	4e18      	ldr	r6, [pc, #96]	@ (800c5ac <JPEG_DMA_StartProcess+0x88>)
 800c54c:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800c54e:	b105      	cbz	r5, 800c552 <JPEG_DMA_StartProcess+0x2e>
 800c550:	b931      	cbnz	r1, 800c560 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c552:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c554:	f043 0304 	orr.w	r3, r3, #4
 800c558:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800c55a:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800c55c:	b003      	add	sp, #12
 800c55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c560:	fbb2 f6f5 	udiv	r6, r2, r5
 800c564:	fb05 2516 	mls	r5, r5, r6, r2
 800c568:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c56a:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c56c:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c56e:	fbb3 f2f1 	udiv	r2, r3, r1
 800c572:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c576:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c578:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c57a:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c57c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c57e:	9500      	str	r5, [sp, #0]
 800c580:	69e2      	ldr	r2, [r4, #28]
 800c582:	f001 f848 	bl	800d616 <HAL_MDMA_Start_IT>
 800c586:	2800      	cmp	r0, #0
 800c588:	d1e3      	bne.n	800c552 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	9500      	str	r5, [sp, #0]
 800c58e:	3240      	adds	r2, #64	@ 0x40
 800c590:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c592:	69a1      	ldr	r1, [r4, #24]
 800c594:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c596:	f001 f83e 	bl	800d616 <HAL_MDMA_Start_IT>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d0de      	beq.n	800c55c <JPEG_DMA_StartProcess+0x38>
 800c59e:	e7d8      	b.n	800c552 <JPEG_DMA_StartProcess+0x2e>
 800c5a0:	0800cae7 	.word	0x0800cae7
 800c5a4:	0800c9df 	.word	0x0800c9df
 800c5a8:	0800cfa5 	.word	0x0800cfa5
 800c5ac:	0800cf97 	.word	0x0800cf97

0800c5b0 <HAL_JPEG_Init>:
{
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	f000 80f2 	beq.w	800c79e <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800c5ba:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800c5be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c5c2:	b91b      	cbnz	r3, 800c5cc <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800c5c4:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800c5c8:	f7f4 ff2c 	bl	8001424 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800c5cc:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800c5ce:	2302      	movs	r3, #2
 800c5d0:	4a86      	ldr	r2, [pc, #536]	@ (800c7ec <HAL_JPEG_Init+0x23c>)
 800c5d2:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800c5d6:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800c5da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c5dc:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800c5e0:	f043 0301 	orr.w	r3, r3, #1
 800c5e4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	f023 0301 	bic.w	r3, r3, #1
 800c5ec:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c5ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c5f0:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800c5f4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c5f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c5f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c5fc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c5fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c604:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c606:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c608:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c60c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800c60e:	4b78      	ldr	r3, [pc, #480]	@ (800c7f0 <HAL_JPEG_Init+0x240>)
 800c610:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800c612:	4b78      	ldr	r3, [pc, #480]	@ (800c7f4 <HAL_JPEG_Init+0x244>)
 800c614:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800c616:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800c618:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c61c:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800c61e:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c620:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c622:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c624:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800c628:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c62a:	4333      	orrs	r3, r6
 800c62c:	7c56      	ldrb	r6, [r2, #17]
 800c62e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c632:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c636:	4281      	cmp	r1, r0
 800c638:	d1f0      	bne.n	800c61c <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c63a:	4b6f      	ldr	r3, [pc, #444]	@ (800c7f8 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c63c:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800c640:	4a6e      	ldr	r2, [pc, #440]	@ (800c7fc <HAL_JPEG_Init+0x24c>)
 800c642:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c646:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800c64a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c64e:	4610      	mov	r0, r2
 800c650:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c652:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800c656:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c65a:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c65e:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800c660:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c662:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c666:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c668:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800c66c:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c670:	ea43 030c 	orr.w	r3, r3, ip
 800c674:	f890 c011 	ldrb.w	ip, [r0, #17]
 800c678:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c67c:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800c680:	42be      	cmp	r6, r7
 800c682:	d1ec      	bne.n	800c65e <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800c684:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800c688:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800c68c:	0c1b      	lsrs	r3, r3, #16
 800c68e:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800c690:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800c694:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800c698:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c69c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800c6a0:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c6a2:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c6a6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c6a8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800c6ac:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c6b0:	4333      	orrs	r3, r6
 800c6b2:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800c6b6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c6ba:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800c6be:	4281      	cmp	r1, r0
 800c6c0:	d1ec      	bne.n	800c69c <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800c6c2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800c6c6:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800c6ca:	4a4d      	ldr	r2, [pc, #308]	@ (800c800 <HAL_JPEG_Init+0x250>)
 800c6cc:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800c6d0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800c6d2:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800c6d6:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800c6da:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c6de:	4013      	ands	r3, r2
  *address = value;
 800c6e0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800c6ea:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800c6ee:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800c6f2:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800c6f6:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c6fa:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800c6fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c700:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800c704:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c708:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800c70a:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800c70e:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800c712:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c716:	4b3b      	ldr	r3, [pc, #236]	@ (800c804 <HAL_JPEG_Init+0x254>)
 800c718:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800c71c:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c720:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800c724:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c728:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800c72a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800c72e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800c732:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c736:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800c738:	4a33      	ldr	r2, [pc, #204]	@ (800c808 <HAL_JPEG_Init+0x258>)
 800c73a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800c73e:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800c742:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c746:	4b31      	ldr	r3, [pc, #196]	@ (800c80c <HAL_JPEG_Init+0x25c>)
 800c748:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800c74c:	4b30      	ldr	r3, [pc, #192]	@ (800c810 <HAL_JPEG_Init+0x260>)
 800c74e:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800c752:	4b30      	ldr	r3, [pc, #192]	@ (800c814 <HAL_JPEG_Init+0x264>)
 800c754:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800c758:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c75c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800c75e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c762:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c766:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800c76a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c76c:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c770:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c772:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800c776:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c77a:	4333      	orrs	r3, r6
 800c77c:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800c780:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c784:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c788:	4281      	cmp	r1, r0
 800c78a:	d1ec      	bne.n	800c766 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800c78c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800c790:	491a      	ldr	r1, [pc, #104]	@ (800c7fc <HAL_JPEG_Init+0x24c>)
 800c792:	4628      	mov	r0, r5
 800c794:	f7ff fe12 	bl	800c3bc <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c798:	b118      	cbz	r0, 800c7a2 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800c79a:	2301      	movs	r3, #1
 800c79c:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800c79e:	2001      	movs	r0, #1
}
 800c7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800c7a2:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800c7a6:	4918      	ldr	r1, [pc, #96]	@ (800c808 <HAL_JPEG_Init+0x258>)
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	f7ff fe07 	bl	800c3bc <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d1f3      	bne.n	800c79a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800c7b2:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800c7b6:	490d      	ldr	r1, [pc, #52]	@ (800c7ec <HAL_JPEG_Init+0x23c>)
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	f7ff fdc7 	bl	800c34c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d1eb      	bne.n	800c79a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800c7c2:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800c7c6:	4914      	ldr	r1, [pc, #80]	@ (800c818 <HAL_JPEG_Init+0x268>)
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f7ff fdbf 	bl	800c34c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d1e3      	bne.n	800c79a <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800c7d2:	6863      	ldr	r3, [r4, #4]
 800c7d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7d8:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c7da:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800c7dc:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800c7de:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c7e0:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800c7e4:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800c7e6:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800c7e8:	e7da      	b.n	800c7a0 <HAL_JPEG_Init+0x1f0>
 800c7ea:	bf00      	nop
 800c7ec:	0802d9a8 	.word	0x0802d9a8
 800c7f0:	0802d7a8 	.word	0x0802d7a8
 800c7f4:	0802d768 	.word	0x0802d768
 800c7f8:	0b0a0908 	.word	0x0b0a0908
 800c7fc:	0802d8da 	.word	0x0802d8da
 800c800:	ffff0000 	.word	0xffff0000
 800c804:	09080706 	.word	0x09080706
 800c808:	0802d828 	.word	0x0802d828
 800c80c:	01000404 	.word	0x01000404
 800c810:	05070403 	.word	0x05070403
 800c814:	04040201 	.word	0x04040201
 800c818:	0802d98c 	.word	0x0802d98c

0800c81c <HAL_JPEG_GetInfo>:
{
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800c820:	2800      	cmp	r0, #0
 800c822:	d06f      	beq.n	800c904 <HAL_JPEG_GetInfo+0xe8>
 800c824:	2900      	cmp	r1, #0
 800c826:	d06d      	beq.n	800c904 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800c828:	6804      	ldr	r4, [r0, #0]
 800c82a:	6863      	ldr	r3, [r4, #4]
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	2b02      	cmp	r3, #2
 800c832:	d047      	beq.n	800c8c4 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	f013 0303 	ands.w	r3, r3, #3
 800c83a:	d005      	beq.n	800c848 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	2b03      	cmp	r3, #3
 800c844:	d15e      	bne.n	800c904 <HAL_JPEG_GetInfo+0xe8>
 800c846:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c848:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800c84a:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c84c:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c850:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c852:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c854:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800c856:	68e2      	ldr	r2, [r4, #12]
 800c858:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c85c:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c85e:	d13c      	bne.n	800c8da <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c860:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c862:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c864:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c868:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c86a:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c86c:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c86e:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c872:	d129      	bne.n	800c8c8 <HAL_JPEG_GetInfo+0xac>
 800c874:	4313      	orrs	r3, r2
 800c876:	f013 0f0f 	tst.w	r3, #15
 800c87a:	bf0c      	ite	eq
 800c87c:	2301      	moveq	r3, #1
 800c87e:	2300      	movne	r3, #0
 800c880:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800c882:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	3450      	adds	r4, #80	@ 0x50
 800c888:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800c908 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800c88c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c88e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800c892:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800c896:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800c89a:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800c89e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800c8a0:	fa29 f206 	lsr.w	r2, r9, r6
 800c8a4:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800c8a6:	2a01      	cmp	r2, #1
 800c8a8:	d119      	bne.n	800c8de <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800c8aa:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800c8ac:	3608      	adds	r6, #8
 800c8ae:	3701      	adds	r7, #1
 800c8b0:	2e20      	cmp	r6, #32
 800c8b2:	d1f5      	bne.n	800c8a0 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800c8b4:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c8b6:	2d40      	cmp	r5, #64	@ 0x40
 800c8b8:	d1ed      	bne.n	800c896 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800c8ba:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800c8bc:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800c8be:	610b      	str	r3, [r1, #16]
}
 800c8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c4:	2310      	movs	r3, #16
 800c8c6:	e7bf      	b.n	800c848 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c8c8:	2d03      	cmp	r5, #3
 800c8ca:	d106      	bne.n	800c8da <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	f013 0f0f 	tst.w	r3, #15
 800c8d2:	bf0c      	ite	eq
 800c8d4:	2301      	moveq	r3, #1
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	e7d3      	b.n	800c882 <HAL_JPEG_GetInfo+0x66>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e7d1      	b.n	800c882 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c8de:	fb0e fb02 	mul.w	fp, lr, r2
 800c8e2:	f897 a000 	ldrb.w	sl, [r7]
 800c8e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8e8:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800c8ec:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800c8f0:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800c8f2:	bf8b      	itete	hi
 800c8f4:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800c8f8:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800c8fc:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800c8fe:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800c902:	e7d3      	b.n	800c8ac <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800c904:	2001      	movs	r0, #1
 800c906:	e7db      	b.n	800c8c0 <HAL_JPEG_GetInfo+0xa4>
 800c908:	0802d7e8 	.word	0x0802d7e8

0800c90c <HAL_JPEG_Decode_DMA>:
{
 800c90c:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800c90e:	4604      	mov	r4, r0
 800c910:	b348      	cbz	r0, 800c966 <HAL_JPEG_Decode_DMA+0x5a>
 800c912:	b341      	cbz	r1, 800c966 <HAL_JPEG_Decode_DMA+0x5a>
 800c914:	b33b      	cbz	r3, 800c966 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800c916:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800c91a:	2d01      	cmp	r5, #1
 800c91c:	d028      	beq.n	800c970 <HAL_JPEG_Decode_DMA+0x64>
 800c91e:	2501      	movs	r5, #1
 800c920:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800c924:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800c928:	2d01      	cmp	r5, #1
 800c92a:	d11e      	bne.n	800c96a <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c92c:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800c92e:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c930:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800c934:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c936:	f025 050f 	bic.w	r5, r5, #15
 800c93a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c93c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c93e:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800c942:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c946:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800c948:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800c94a:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800c94c:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800c94e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800c950:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800c952:	f7ff fdab 	bl	800c4ac <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800c956:	f7ff fde5 	bl	800c524 <JPEG_DMA_StartProcess>
 800c95a:	b128      	cbz	r0, 800c968 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c95c:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800c95e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c962:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800c966:	2001      	movs	r0, #1
}
 800c968:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800c96a:	2300      	movs	r3, #0
 800c96c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800c970:	2002      	movs	r0, #2
 800c972:	e7f9      	b.n	800c968 <HAL_JPEG_Decode_DMA+0x5c>

0800c974 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c974:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c976:	f003 030c 	and.w	r3, r3, #12
 800c97a:	2b0c      	cmp	r3, #12
 800c97c:	d10d      	bne.n	800c99a <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c97e:	07cb      	lsls	r3, r1, #31
 800c980:	d503      	bpl.n	800c98a <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c982:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c984:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c988:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c98a:	0789      	lsls	r1, r1, #30
 800c98c:	d503      	bpl.n	800c996 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c98e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c990:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c994:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800c996:	2000      	movs	r0, #0
 800c998:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c99a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c99c:	f003 030c 	and.w	r3, r3, #12
 800c9a0:	2b08      	cmp	r3, #8
 800c9a2:	d1f8      	bne.n	800c996 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c9a4:	f011 0301 	ands.w	r3, r1, #1
 800c9a8:	d004      	beq.n	800c9b4 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c9aa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c9ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c9b0:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800c9b2:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c9b4:	078a      	lsls	r2, r1, #30
 800c9b6:	d505      	bpl.n	800c9c4 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c9b8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c9ba:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c9be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c9c2:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800c9c4:	6801      	ldr	r1, [r0, #0]
 800c9c6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800c9c8:	ea22 0303 	bic.w	r3, r2, r3
 800c9cc:	630b      	str	r3, [r1, #48]	@ 0x30
 800c9ce:	e7e2      	b.n	800c996 <HAL_JPEG_Pause+0x22>

0800c9d0 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800c9d0:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800c9d2:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800c9d4:	4770      	bx	lr

0800c9d6 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800c9d6:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800c9d8:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800c9da:	4770      	bx	lr

0800c9dc <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800c9dc:	4770      	bx	lr

0800c9de <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c9de:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800c9e0:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c9e2:	6803      	ldr	r3, [r0, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	f022 0201 	bic.w	r2, r2, #1
 800c9ea:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c9ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9ee:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c9f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c9fa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800c9fc:	f043 0304 	orr.w	r3, r3, #4
 800ca00:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800ca02:	f7f6 f849 	bl	8002a98 <HAL_JPEG_ErrorCallback>
}
 800ca06:	bd08      	pop	{r3, pc}

0800ca08 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800ca08:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800ca0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800ca10:	b922      	cbnz	r2, 800ca1c <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800ca12:	2101      	movs	r1, #1
 800ca14:	f7ff ffae 	bl	800c974 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800ca18:	2200      	movs	r2, #0
 800ca1a:	e004      	b.n	800ca26 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800ca1c:	6a03      	ldr	r3, [r0, #32]
 800ca1e:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ca20:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800ca22:	d924      	bls.n	800ca6e <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ca24:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800ca26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ca28:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800ca2c:	d11e      	bne.n	800ca6c <JPEG_ReadInputData+0x64>
 800ca2e:	b1ea      	cbz	r2, 800ca6c <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800ca30:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800ca34:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800ca36:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800ca3a:	d827      	bhi.n	800ca8c <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca3c:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800ca3e:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ca40:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca42:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca44:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800ca46:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ca48:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca4a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ca4e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ca52:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca54:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800ca58:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ca5c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca60:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800ca62:	6a22      	ldr	r2, [r4, #32]
 800ca64:	f102 0204 	add.w	r2, r2, #4
 800ca68:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ca6a:	d1e8      	bne.n	800ca3e <JPEG_ReadInputData+0x36>
}
 800ca6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d1d2      	bne.n	800ca18 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800ca72:	6a01      	ldr	r1, [r0, #32]
 800ca74:	f7f5 ffa2 	bl	80029bc <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800ca78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ca7a:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ca7c:	bf84      	itt	hi
 800ca7e:	f023 0303 	bichi.w	r3, r3, #3
 800ca82:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800ca84:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800ca86:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800ca88:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800ca8a:	e7cc      	b.n	800ca26 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800ca8c:	2a03      	cmp	r2, #3
 800ca8e:	d918      	bls.n	800cac2 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca90:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800ca92:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800ca94:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca96:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ca98:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800ca9a:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ca9c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ca9e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800caa2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800caa6:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800caa8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800caac:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800cab0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800cab4:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800cab6:	6a22      	ldr	r2, [r4, #32]
 800cab8:	f102 0204 	add.w	r2, r2, #4
 800cabc:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800cabe:	d1e8      	bne.n	800ca92 <JPEG_ReadInputData+0x8a>
 800cac0:	e7d4      	b.n	800ca6c <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800cac2:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800cac4:	6a25      	ldr	r5, [r4, #32]
 800cac6:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800cac8:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800caca:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800cacc:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800cace:	fa05 f506 	lsl.w	r5, r5, r6
 800cad2:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800cad6:	6a25      	ldr	r5, [r4, #32]
 800cad8:	f105 0501 	add.w	r5, r5, #1
 800cadc:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800cade:	d1f1      	bne.n	800cac4 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800cae0:	6822      	ldr	r2, [r4, #0]
 800cae2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800cae4:	e7c2      	b.n	800ca6c <JPEG_ReadInputData+0x64>

0800cae6 <JPEG_MDMAInCpltCallback>:
{
 800cae6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cae8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800caea:	6822      	ldr	r2, [r4, #0]
 800caec:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800caee:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800caf2:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800caf4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800caf6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cafa:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800cafe:	041b      	lsls	r3, r3, #16
 800cb00:	0c1b      	lsrs	r3, r3, #16
 800cb02:	2b0c      	cmp	r3, #12
 800cb04:	d11a      	bne.n	800cb3c <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800cb06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb08:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cb0a:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800cb0c:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cb0e:	695a      	ldr	r2, [r3, #20]
 800cb10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cb12:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800cb16:	1a9b      	subs	r3, r3, r2
 800cb18:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800cb1a:	6a21      	ldr	r1, [r4, #32]
 800cb1c:	f7f5 ff4e 	bl	80029bc <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800cb20:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cb22:	42ab      	cmp	r3, r5
 800cb24:	d327      	bcc.n	800cb76 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800cb26:	b95d      	cbnz	r5, 800cb40 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cb28:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800cb2a:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cb2c:	f043 0304 	orr.w	r3, r3, #4
 800cb30:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800cb32:	2306      	movs	r3, #6
 800cb34:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800cb38:	f7f5 ffae 	bl	8002a98 <HAL_JPEG_ErrorCallback>
}
 800cb3c:	b003      	add	sp, #12
 800cb3e:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800cb40:	fbb3 f2f5 	udiv	r2, r3, r5
 800cb44:	fb05 3212 	mls	r2, r5, r2, r3
 800cb48:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800cb4a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800cb4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800cb4e:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800cb50:	04db      	lsls	r3, r3, #19
 800cb52:	d40a      	bmi.n	800cb6a <JPEG_MDMAInCpltCallback+0x84>
 800cb54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cb56:	b143      	cbz	r3, 800cb6a <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800cb58:	2101      	movs	r1, #1
 800cb5a:	3240      	adds	r2, #64	@ 0x40
 800cb5c:	9100      	str	r1, [sp, #0]
 800cb5e:	69a1      	ldr	r1, [r4, #24]
 800cb60:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800cb62:	f000 fd58 	bl	800d616 <HAL_MDMA_Start_IT>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d1de      	bne.n	800cb28 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800cb6a:	6822      	ldr	r2, [r4, #0]
 800cb6c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800cb6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cb72:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb74:	e7e2      	b.n	800cb3c <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0e8      	beq.n	800cb4c <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800cb7a:	079a      	lsls	r2, r3, #30
 800cb7c:	d0e6      	beq.n	800cb4c <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800cb7e:	f023 0303 	bic.w	r3, r3, #3
 800cb82:	3304      	adds	r3, #4
 800cb84:	e7e1      	b.n	800cb4a <JPEG_MDMAInCpltCallback+0x64>

0800cb86 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800cb86:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800cb8a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800cb8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800cb90:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d32a      	bcc.n	800cbec <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800cb96:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800cb98:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800cb9a:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800cb9c:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800cb9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800cba0:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800cba2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cba4:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800cba6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cba8:	69e0      	ldr	r0, [r4, #28]
 800cbaa:	4428      	add	r0, r5
 800cbac:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800cbb0:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800cbb2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cbb4:	69e0      	ldr	r0, [r4, #28]
 800cbb6:	4428      	add	r0, r5
 800cbb8:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800cbbc:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800cbc0:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800cbc2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cbc4:	69e0      	ldr	r0, [r4, #28]
 800cbc6:	4428      	add	r0, r5
 800cbc8:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800cbca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cbcc:	f103 0304 	add.w	r3, r3, #4
 800cbd0:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800cbd2:	d1e1      	bne.n	800cb98 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800cbd4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cbd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d106      	bne.n	800cbea <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cbdc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cbde:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f7f5 ff09 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800cbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800cbec:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d9fb      	bls.n	800cbea <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800cbf2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800cbf4:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800cbfa:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800cbfc:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800cbfe:	d105      	bne.n	800cc0c <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800cc00:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800cc02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cc04:	429f      	cmp	r7, r3
 800cc06:	d119      	bne.n	800cc3c <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cc08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cc0a:	e7e9      	b.n	800cbe0 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800cc0c:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800cc0e:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800cc10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800cc12:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cc14:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800cc16:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cc18:	69e1      	ldr	r1, [r4, #28]
 800cc1a:	4429      	add	r1, r5
 800cc1c:	0a1d      	lsrs	r5, r3, #8
 800cc1e:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800cc20:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cc22:	69e1      	ldr	r1, [r4, #28]
 800cc24:	4429      	add	r1, r5
 800cc26:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800cc28:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800cc2a:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800cc2c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800cc2e:	69e1      	ldr	r1, [r4, #28]
 800cc30:	4429      	add	r1, r5
 800cc32:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800cc34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cc36:	3304      	adds	r3, #4
 800cc38:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800cc3a:	e7de      	b.n	800cbfa <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800cc3c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800cc3e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800cc40:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800cc42:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800cc44:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800cc46:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800cc48:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800cc4a:	d114      	bne.n	800cc76 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cc4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f7f5 fed2 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800cc58:	1d2b      	adds	r3, r5, #4
 800cc5a:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d8c4      	bhi.n	800cbea <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800cc60:	00da      	lsls	r2, r3, #3
 800cc62:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cc64:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800cc66:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800cc68:	fa26 f202 	lsr.w	r2, r6, r2
 800cc6c:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800cc6e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cc70:	3201      	adds	r2, #1
 800cc72:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800cc74:	e7f2      	b.n	800cc5c <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800cc76:	f002 0303 	and.w	r3, r2, #3
 800cc7a:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800cc7e:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	fa26 f303 	lsr.w	r3, r6, r3
 800cc86:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800cc8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800cc90:	e7d9      	b.n	800cc46 <JPEG_StoreOutputData+0xc0>

0800cc92 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cc92:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cc94:	f003 0303 	and.w	r3, r3, #3
 800cc98:	2b02      	cmp	r3, #2
{
 800cc9a:	b510      	push	{r4, lr}
 800cc9c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cc9e:	d114      	bne.n	800ccca <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800cca0:	6803      	ldr	r3, [r0, #0]
 800cca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cca4:	065b      	lsls	r3, r3, #25
 800cca6:	d510      	bpl.n	800ccca <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800cca8:	1d01      	adds	r1, r0, #4
 800ccaa:	f7ff fdb7 	bl	800c81c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ccae:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ccb0:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ccb2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ccb4:	f7f5 fe4c 	bl	8002950 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ccc0:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ccc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ccc8:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800ccca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cccc:	04d9      	lsls	r1, r3, #19
 800ccce:	d407      	bmi.n	800cce0 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccd4:	0792      	lsls	r2, r2, #30
 800ccd6:	d544      	bpl.n	800cd62 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ccd8:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f7ff fe94 	bl	800ca08 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cce0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cce2:	0499      	lsls	r1, r3, #18
 800cce4:	d407      	bmi.n	800ccf6 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccea:	0712      	lsls	r2, r2, #28
 800ccec:	d53e      	bpl.n	800cd6c <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800ccee:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f7ff ff48 	bl	800cb86 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccfa:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800ccfe:	2a20      	cmp	r2, #32
 800cd00:	d13c      	bne.n	800cd7c <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	f022 0201 	bic.w	r2, r2, #1
 800cd08:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800cd0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd0c:	f002 020c 	and.w	r2, r2, #12
 800cd10:	2a08      	cmp	r2, #8
 800cd12:	d103      	bne.n	800cd1c <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cd14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd16:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cd1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cd1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd1e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cd22:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800cd24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd26:	b133      	cbz	r3, 800cd36 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cd28:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	69e1      	ldr	r1, [r4, #28]
 800cd2e:	f7f5 fe63 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800cd36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cd38:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cd3a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cd3c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cd40:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cd44:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cd46:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800cd48:	f04f 0200 	mov.w	r2, #0
 800cd4c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cd50:	f04f 0201 	mov.w	r2, #1
 800cd54:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cd58:	d10d      	bne.n	800cd76 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cd5a:	f7f5 fe9f 	bl	8002a9c <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800cd5e:	2001      	movs	r0, #1
}
 800cd60:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800cd62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd64:	0758      	lsls	r0, r3, #29
 800cd66:	d5bb      	bpl.n	800cce0 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800cd68:	2101      	movs	r1, #1
 800cd6a:	e7b6      	b.n	800ccda <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800cd6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd6e:	06db      	lsls	r3, r3, #27
 800cd70:	d5c1      	bpl.n	800ccf6 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800cd72:	2101      	movs	r1, #1
 800cd74:	e7bc      	b.n	800ccf0 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cd76:	f7ff fe31 	bl	800c9dc <HAL_JPEG_EncodeCpltCallback>
 800cd7a:	e7f0      	b.n	800cd5e <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	e7ef      	b.n	800cd60 <JPEG_Process+0xce>

0800cd80 <JPEG_DMA_PollResidualData>:
{
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	4604      	mov	r4, r0
 800cd84:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cd86:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800cd88:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cd8a:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800cd8e:	d122      	bne.n	800cdd6 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800cd90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd92:	06d0      	lsls	r0, r2, #27
 800cd94:	d51f      	bpl.n	800cdd6 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800cd96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800cd98:	69e1      	ldr	r1, [r4, #28]
 800cd9a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cd9c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800cd9e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cda0:	69e2      	ldr	r2, [r4, #28]
 800cda2:	440a      	add	r2, r1
 800cda4:	0a19      	lsrs	r1, r3, #8
 800cda6:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800cda8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cdaa:	69e2      	ldr	r2, [r4, #28]
 800cdac:	440a      	add	r2, r1
 800cdae:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800cdb0:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800cdb2:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800cdb4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cdb6:	69e2      	ldr	r2, [r4, #28]
 800cdb8:	440a      	add	r2, r1
 800cdba:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800cdbc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800cdc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cdc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d105      	bne.n	800cdd6 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cdca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cdcc:	4620      	mov	r0, r4
 800cdce:	69e1      	ldr	r1, [r4, #28]
 800cdd0:	f7f5 fe12 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800cdd4:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800cdd6:	3e01      	subs	r6, #1
 800cdd8:	d1d5      	bne.n	800cd86 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800cdda:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800cddc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800cdde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cde0:	06c9      	lsls	r1, r1, #27
 800cde2:	d501      	bpl.n	800cde8 <JPEG_DMA_PollResidualData+0x68>
 800cde4:	0492      	lsls	r2, r2, #18
 800cde6:	d420      	bmi.n	800ce2a <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	f022 0201 	bic.w	r2, r2, #1
 800cdee:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800cdf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cdf2:	b133      	cbz	r3, 800ce02 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cdf4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	69e1      	ldr	r1, [r4, #28]
 800cdfa:	f7f5 fdfd 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800ce02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ce04:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ce06:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ce08:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ce0c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ce10:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ce12:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800ce14:	f04f 0200 	mov.w	r2, #0
 800ce18:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ce1c:	f04f 0201 	mov.w	r2, #1
 800ce20:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ce24:	d102      	bne.n	800ce2c <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ce26:	f7f5 fe39 	bl	8002a9c <HAL_JPEG_DecodeCpltCallback>
}
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ce2c:	f7ff fdd6 	bl	800c9dc <HAL_JPEG_EncodeCpltCallback>
}
 800ce30:	e7fb      	b.n	800ce2a <JPEG_DMA_PollResidualData+0xaa>

0800ce32 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ce32:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ce34:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800ce38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ce3e:	d014      	beq.n	800ce6a <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ce40:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ce42:	f003 030c 	and.w	r3, r3, #12
 800ce46:	2b0c      	cmp	r3, #12
 800ce48:	d146      	bne.n	800ced8 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ce4a:	07cb      	lsls	r3, r1, #31
 800ce4c:	d520      	bpl.n	800ce90 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ce4e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ce50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce54:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ce56:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800ce58:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800ce5a:	b941      	cbnz	r1, 800ce6e <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ce5c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ce5e:	f043 0304 	orr.w	r3, r3, #4
 800ce62:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ce64:	2306      	movs	r3, #6
 800ce66:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800ce6a:	2001      	movs	r0, #1
 800ce6c:	e01d      	b.n	800ceaa <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800ce6e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ce70:	fbb3 f2f1 	udiv	r2, r3, r1
 800ce74:	fb01 3212 	mls	r2, r1, r2, r3
 800ce78:	1a9b      	subs	r3, r3, r2
 800ce7a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800ce7c:	b143      	cbz	r3, 800ce90 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ce7e:	6822      	ldr	r2, [r4, #0]
 800ce80:	2101      	movs	r1, #1
 800ce82:	3240      	adds	r2, #64	@ 0x40
 800ce84:	9100      	str	r1, [sp, #0]
 800ce86:	69a1      	ldr	r1, [r4, #24]
 800ce88:	f000 fbc5 	bl	800d616 <HAL_MDMA_Start_IT>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d1e5      	bne.n	800ce5c <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ce90:	07a8      	lsls	r0, r5, #30
 800ce92:	d509      	bpl.n	800cea8 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ce94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ce96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce9a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ce9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ce9e:	0419      	lsls	r1, r3, #16
 800cea0:	d505      	bpl.n	800ceae <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800cea2:	4620      	mov	r0, r4
 800cea4:	f7ff ff6c 	bl	800cd80 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800cea8:	2000      	movs	r0, #0
}
 800ceaa:	b003      	add	sp, #12
 800ceac:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ceae:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ceb0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800ceb2:	2900      	cmp	r1, #0
 800ceb4:	d0d2      	beq.n	800ce5c <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ceb6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ceb8:	fbb3 f2f1 	udiv	r2, r3, r1
 800cebc:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cec0:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800cec2:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cec4:	2201      	movs	r2, #1
 800cec6:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800cec8:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ceca:	9200      	str	r2, [sp, #0]
 800cecc:	69e2      	ldr	r2, [r4, #28]
 800cece:	f000 fba2 	bl	800d616 <HAL_MDMA_Start_IT>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d0e8      	beq.n	800cea8 <HAL_JPEG_Resume+0x76>
 800ced6:	e7c1      	b.n	800ce5c <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ced8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ceda:	f003 030c 	and.w	r3, r3, #12
 800cede:	2b08      	cmp	r3, #8
 800cee0:	d1e2      	bne.n	800cea8 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800cee2:	f011 0301 	ands.w	r3, r1, #1
 800cee6:	d004      	beq.n	800cef2 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800cee8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ceea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ceee:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800cef0:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800cef2:	07aa      	lsls	r2, r5, #30
 800cef4:	d505      	bpl.n	800cf02 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800cef6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800cef8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800cefc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cf00:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800cf02:	6821      	ldr	r1, [r4, #0]
 800cf04:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800cf06:	4313      	orrs	r3, r2
 800cf08:	630b      	str	r3, [r1, #48]	@ 0x30
 800cf0a:	e7cd      	b.n	800cea8 <HAL_JPEG_Resume+0x76>

0800cf0c <JPEG_DMA_EndProcess>:
{
 800cf0c:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cf0e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800cf10:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cf12:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	695b      	ldr	r3, [r3, #20]
 800cf18:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800cf20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d105      	bne.n	800cf32 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cf26:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800cf28:	69c1      	ldr	r1, [r0, #28]
 800cf2a:	f7f5 fd65 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800cf36:	f015 0510 	ands.w	r5, r5, #16
 800cf3a:	d124      	bne.n	800cf86 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800cf3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cf3e:	b12b      	cbz	r3, 800cf4c <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cf40:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cf42:	4620      	mov	r0, r4
 800cf44:	69e1      	ldr	r1, [r4, #28]
 800cf46:	f7f5 fd57 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cf4a:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cf4c:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cf4e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cf50:	6813      	ldr	r3, [r2, #0]
 800cf52:	f023 0301 	bic.w	r3, r3, #1
 800cf56:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800cf58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cf5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cf5c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cf60:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cf64:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cf66:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cf70:	f04f 0201 	mov.w	r2, #1
 800cf74:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cf78:	d102      	bne.n	800cf80 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cf7a:	f7f5 fd8f 	bl	8002a9c <HAL_JPEG_DecodeCpltCallback>
}
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cf80:	f7ff fd2c 	bl	800c9dc <HAL_JPEG_EncodeCpltCallback>
 800cf84:	e7fb      	b.n	800cf7e <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cf86:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cf88:	049b      	lsls	r3, r3, #18
 800cf8a:	d4f8      	bmi.n	800cf7e <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800cf8c:	4620      	mov	r0, r4
}
 800cf8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800cf92:	f7ff bef5 	b.w	800cd80 <JPEG_DMA_PollResidualData>

0800cf96 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cf96:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800cf98:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cf9a:	041b      	lsls	r3, r3, #16
 800cf9c:	d501      	bpl.n	800cfa2 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800cf9e:	f7ff bfb5 	b.w	800cf0c <JPEG_DMA_EndProcess>
}
 800cfa2:	4770      	bx	lr

0800cfa4 <JPEG_MDMAOutCpltCallback>:
{
 800cfa4:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cfa6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cfa8:	6823      	ldr	r3, [r4, #0]
 800cfaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cfac:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cfb0:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800cfb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfb4:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800cfb8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800cfbc:	0412      	lsls	r2, r2, #16
 800cfbe:	0c12      	lsrs	r2, r2, #16
 800cfc0:	2a0c      	cmp	r2, #12
 800cfc2:	d125      	bne.n	800d010 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800cfc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfc6:	069a      	lsls	r2, r3, #26
 800cfc8:	d424      	bmi.n	800d014 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cfca:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cfcc:	4620      	mov	r0, r4
 800cfce:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800cfd0:	695a      	ldr	r2, [r3, #20]
 800cfd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cfd4:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800cfd8:	1a9b      	subs	r3, r3, r2
 800cfda:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cfdc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cfde:	f7f5 fd0b 	bl	80029f8 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cfe2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cfe4:	049b      	lsls	r3, r3, #18
 800cfe6:	d415      	bmi.n	800d014 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cfe8:	6821      	ldr	r1, [r4, #0]
 800cfea:	2301      	movs	r3, #1
 800cfec:	3144      	adds	r1, #68	@ 0x44
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cff2:	69e2      	ldr	r2, [r4, #28]
 800cff4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800cff6:	f000 fb0e 	bl	800d616 <HAL_MDMA_Start_IT>
 800cffa:	b158      	cbz	r0, 800d014 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cffc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800cffe:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800d000:	f043 0304 	orr.w	r3, r3, #4
 800d004:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800d006:	2306      	movs	r3, #6
 800d008:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800d00c:	f7f5 fd44 	bl	8002a98 <HAL_JPEG_ErrorCallback>
}
 800d010:	b002      	add	sp, #8
 800d012:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800d014:	6822      	ldr	r2, [r4, #0]
 800d016:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800d018:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d01c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d01e:	e7f7      	b.n	800d010 <JPEG_MDMAOutCpltCallback+0x6c>

0800d020 <HAL_JPEG_IRQHandler>:
{
 800d020:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800d022:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800d026:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800d028:	3b03      	subs	r3, #3
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d850      	bhi.n	800d0d0 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800d02e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d030:	f003 030c 	and.w	r3, r3, #12
 800d034:	2b08      	cmp	r3, #8
 800d036:	d103      	bne.n	800d040 <HAL_JPEG_IRQHandler+0x20>
}
 800d038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800d03c:	f7ff be29 	b.w	800cc92 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800d040:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d042:	f003 030c 	and.w	r3, r3, #12
 800d046:	2b0c      	cmp	r3, #12
 800d048:	d142      	bne.n	800d0d0 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800d04a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d04c:	f003 0303 	and.w	r3, r3, #3
 800d050:	2b02      	cmp	r3, #2
 800d052:	d114      	bne.n	800d07e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800d054:	6803      	ldr	r3, [r0, #0]
 800d056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d058:	0659      	lsls	r1, r3, #25
 800d05a:	d510      	bpl.n	800d07e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800d05c:	1d01      	adds	r1, r0, #4
 800d05e:	f7ff fbdd 	bl	800c81c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800d062:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800d064:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800d066:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800d068:	f7f5 fc72 	bl	8002950 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800d06c:	6823      	ldr	r3, [r4, #0]
 800d06e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d074:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800d076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d07c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d082:	0692      	lsls	r2, r2, #26
 800d084:	d524      	bpl.n	800d0d0 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800d086:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800d088:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800d08a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d08e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	f022 0201 	bic.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800d098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d09a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800d09e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800d0a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0a2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800d0a6:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800d0a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d101      	bne.n	800d0b4 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800d0b0:	f000 fafa 	bl	800d6a8 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800d0b4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800d0b6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d103      	bne.n	800d0c6 <HAL_JPEG_IRQHandler+0xa6>
}
 800d0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800d0c2:	f000 baf1 	b.w	800d6a8 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800d0c6:	4620      	mov	r0, r4
}
 800d0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800d0cc:	f7ff bf1e 	b.w	800cf0c <JPEG_DMA_EndProcess>
}
 800d0d0:	bd10      	pop	{r4, pc}

0800d0d2 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d0d2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d0d4:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d0d6:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d0da:	3284      	adds	r2, #132	@ 0x84
 800d0dc:	1883      	adds	r3, r0, r2
{
 800d0de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d0e2:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d0e4:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d0e8:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d0ea:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d0ee:	684c      	ldr	r4, [r1, #4]
 800d0f0:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d0f4:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d0f8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d0fc:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d0fe:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d100:	68c5      	ldr	r5, [r0, #12]
 800d102:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800d106:	443d      	add	r5, r7
 800d108:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d10c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d10e:	68c6      	ldr	r6, [r0, #12]
 800d110:	68cd      	ldr	r5, [r1, #12]
 800d112:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800d116:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d118:	689d      	ldr	r5, [r3, #8]
 800d11a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800d11e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d120:	688d      	ldr	r5, [r1, #8]
 800d122:	68c7      	ldr	r7, [r0, #12]
 800d124:	3501      	adds	r5, #1
 800d126:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800d12a:	443d      	add	r5, r7
 800d12c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d130:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d132:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d134:	691d      	ldr	r5, [r3, #16]
 800d136:	f025 0507 	bic.w	r5, r5, #7
 800d13a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d13c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d13e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d140:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d144:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d148:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d14c:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800d150:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800d154:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800d158:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800d15c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d15e:	695d      	ldr	r5, [r3, #20]
 800d160:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800d164:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d166:	694d      	ldr	r5, [r1, #20]
 800d168:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d16a:	69dd      	ldr	r5, [r3, #28]
 800d16c:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800d170:	f025 0507 	bic.w	r5, r5, #7
 800d174:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d176:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800d17a:	433d      	orrs	r5, r7
 800d17c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d17e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d180:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d182:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d186:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d188:	b31e      	cbz	r6, 800d1d2 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d18a:	2e01      	cmp	r6, #1
 800d18c:	d023      	beq.n	800d1d6 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d18e:	1eb5      	subs	r5, r6, #2
 800d190:	2d02      	cmp	r5, #2
 800d192:	d922      	bls.n	800d1da <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800d194:	2e07      	cmp	r6, #7
 800d196:	bf14      	ite	ne
 800d198:	2501      	movne	r5, #1
 800d19a:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d19c:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800d19e:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d1a2:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800d1a6:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d1a8:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800d1aa:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800d1ac:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d1ae:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800d1b0:	436e      	muls	r6, r5
 800d1b2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800d1b6:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d1b8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800d1ba:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800d1be:	f024 0407 	bic.w	r4, r4, #7
 800d1c2:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d1c4:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d1c6:	5883      	ldr	r3, [r0, r2]
 800d1c8:	f043 0301 	orr.w	r3, r3, #1
 800d1cc:	5083      	str	r3, [r0, r2]
}
 800d1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800d1d2:	2504      	movs	r5, #4
 800d1d4:	e7e2      	b.n	800d19c <LTDC_SetConfig+0xca>
    tmp = 3U;
 800d1d6:	2503      	movs	r5, #3
 800d1d8:	e7e0      	b.n	800d19c <LTDC_SetConfig+0xca>
    tmp = 2U;
 800d1da:	2502      	movs	r5, #2
 800d1dc:	e7de      	b.n	800d19c <LTDC_SetConfig+0xca>
	...

0800d1e0 <HAL_LTDC_Init>:
{
 800d1e0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d063      	beq.n	800d2b0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d1e8:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800d1ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d1f0:	b91b      	cbnz	r3, 800d1fa <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800d1f2:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800d1f6:	f7f4 f99b 	bl	8001530 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	699a      	ldr	r2, [r3, #24]
 800d204:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800d208:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d20a:	6999      	ldr	r1, [r3, #24]
 800d20c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800d210:	4302      	orrs	r2, r0
 800d212:	68e0      	ldr	r0, [r4, #12]
 800d214:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d216:	6920      	ldr	r0, [r4, #16]
 800d218:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d21a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d21c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d21e:	4925      	ldr	r1, [pc, #148]	@ (800d2b4 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d220:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d222:	689a      	ldr	r2, [r3, #8]
 800d224:	400a      	ands	r2, r1
 800d226:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d228:	689a      	ldr	r2, [r3, #8]
 800d22a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d22e:	69a0      	ldr	r0, [r4, #24]
 800d230:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d232:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d234:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d236:	68da      	ldr	r2, [r3, #12]
 800d238:	400a      	ands	r2, r1
 800d23a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d242:	6a20      	ldr	r0, [r4, #32]
 800d244:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d246:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d248:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d24a:	691a      	ldr	r2, [r3, #16]
 800d24c:	400a      	ands	r2, r1
 800d24e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d250:	691a      	ldr	r2, [r3, #16]
 800d252:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800d256:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800d258:	4302      	orrs	r2, r0
 800d25a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d25c:	695a      	ldr	r2, [r3, #20]
 800d25e:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d260:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d262:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d264:	695a      	ldr	r2, [r3, #20]
 800d266:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d26a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d26c:	430a      	orrs	r2, r1
 800d26e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d272:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d276:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d27a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d27e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d280:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800d282:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800d286:	432a      	orrs	r2, r5
 800d288:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d28c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d28e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d292:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d296:	f042 0206 	orr.w	r2, r2, #6
 800d29a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800d29c:	699a      	ldr	r2, [r3, #24]
 800d29e:	f042 0201 	orr.w	r2, r2, #1
 800d2a2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800d2a4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d2a6:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800d2aa:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	e7fc      	b.n	800d2ae <HAL_LTDC_Init+0xce>
 800d2b4:	f000f800 	.word	0xf000f800

0800d2b8 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800d2b8:	4770      	bx	lr

0800d2ba <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800d2ba:	4770      	bx	lr

0800d2bc <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800d2bc:	4770      	bx	lr

0800d2be <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d2be:	6803      	ldr	r3, [r0, #0]
{
 800d2c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d2c2:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800d2c4:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d2c6:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d2c8:	0772      	lsls	r2, r6, #29
 800d2ca:	d514      	bpl.n	800d2f6 <HAL_LTDC_IRQHandler+0x38>
 800d2cc:	0769      	lsls	r1, r5, #29
 800d2ce:	d512      	bpl.n	800d2f6 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d2d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2d2:	f022 0204 	bic.w	r2, r2, #4
 800d2d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d2d8:	2204      	movs	r2, #4
 800d2da:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d2dc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800d2e0:	f043 0301 	orr.w	r3, r3, #1
 800d2e4:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800d2e8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d2ea:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800d2ee:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800d2f2:	f7ff ffe1 	bl	800d2b8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d2f6:	07b2      	lsls	r2, r6, #30
 800d2f8:	d516      	bpl.n	800d328 <HAL_LTDC_IRQHandler+0x6a>
 800d2fa:	07ab      	lsls	r3, r5, #30
 800d2fc:	d514      	bpl.n	800d328 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d2fe:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800d300:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d304:	f022 0202 	bic.w	r2, r2, #2
 800d308:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d30a:	2202      	movs	r2, #2
 800d30c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d30e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800d312:	4313      	orrs	r3, r2
 800d314:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d318:	2304      	movs	r3, #4
 800d31a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800d31e:	2300      	movs	r3, #0
 800d320:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800d324:	f7ff ffc8 	bl	800d2b8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d328:	07f0      	lsls	r0, r6, #31
 800d32a:	d510      	bpl.n	800d34e <HAL_LTDC_IRQHandler+0x90>
 800d32c:	07e9      	lsls	r1, r5, #31
 800d32e:	d50e      	bpl.n	800d34e <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d330:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800d332:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d336:	f022 0201 	bic.w	r2, r2, #1
 800d33a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d33c:	2201      	movs	r2, #1
 800d33e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800d340:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800d342:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800d346:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800d34a:	f7ff ffb6 	bl	800d2ba <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d34e:	0732      	lsls	r2, r6, #28
 800d350:	d511      	bpl.n	800d376 <HAL_LTDC_IRQHandler+0xb8>
 800d352:	072b      	lsls	r3, r5, #28
 800d354:	d50f      	bpl.n	800d376 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d356:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d358:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d35a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d35c:	f022 0208 	bic.w	r2, r2, #8
 800d360:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d362:	2208      	movs	r2, #8
 800d364:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800d366:	2301      	movs	r3, #1
 800d368:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800d36c:	2300      	movs	r3, #0
 800d36e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d372:	f7ff ffa3 	bl	800d2bc <HAL_LTDC_ReloadEventCallback>
}
 800d376:	bd70      	pop	{r4, r5, r6, pc}

0800d378 <HAL_LTDC_ConfigLayer>:
{
 800d378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800d37c:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800d380:	4606      	mov	r6, r0
 800d382:	460f      	mov	r7, r1
 800d384:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800d386:	2b01      	cmp	r3, #1
 800d388:	f04f 0002 	mov.w	r0, #2
 800d38c:	d01f      	beq.n	800d3ce <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d38e:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800d390:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d394:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d396:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d39a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800d39e:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d3a2:	3438      	adds	r4, #56	@ 0x38
 800d3a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3b0:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4662      	mov	r2, ip
 800d3b6:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d3b8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d3ba:	f7ff fe8a 	bl	800d0d2 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d3be:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800d3c0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d3c2:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d3c6:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800d3ca:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800d3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d3d4 <HAL_LTDC_SetPitch>:
{
 800d3d4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800d3d6:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	f04f 0302 	mov.w	r3, #2
 800d3e0:	d02c      	beq.n	800d43c <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800d3e2:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d3e4:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800d3e8:	fb04 0402 	mla	r4, r4, r2, r0
 800d3ec:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d3ee:	b33c      	cbz	r4, 800d440 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d3f0:	2c01      	cmp	r4, #1
 800d3f2:	d027      	beq.n	800d444 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d3f4:	1ea5      	subs	r5, r4, #2
 800d3f6:	429d      	cmp	r5, r3
 800d3f8:	d902      	bls.n	800d400 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800d3fa:	2c07      	cmp	r4, #7
 800d3fc:	bf18      	it	ne
 800d3fe:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800d400:	01d2      	lsls	r2, r2, #7
 800d402:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800d404:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800d406:	3284      	adds	r2, #132	@ 0x84
 800d408:	4422      	add	r2, r4
 800d40a:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800d40c:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800d410:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800d414:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800d416:	4c0c      	ldr	r4, [pc, #48]	@ (800d448 <HAL_LTDC_SetPitch+0x74>)
 800d418:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d41a:	f045 0501 	orr.w	r5, r5, #1
 800d41e:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800d420:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800d422:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800d426:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800d428:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d42a:	f043 0301 	orr.w	r3, r3, #1
 800d42e:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800d430:	2301      	movs	r3, #1
 800d432:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800d436:	2300      	movs	r3, #0
 800d438:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800d440:	2304      	movs	r3, #4
 800d442:	e7dd      	b.n	800d400 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800d444:	2303      	movs	r3, #3
 800d446:	e7db      	b.n	800d400 <HAL_LTDC_SetPitch+0x2c>
 800d448:	50001000 	.word	0x50001000

0800d44c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800d44c:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800d44e:	6804      	ldr	r4, [r0, #0]
 800d450:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d454:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800d458:	6965      	ldr	r5, [r4, #20]
 800d45a:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800d45e:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800d462:	ea45 0503 	orr.w	r5, r5, r3
 800d466:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800d468:	9d03      	ldr	r5, [sp, #12]
 800d46a:	6963      	ldr	r3, [r4, #20]
 800d46c:	f105 35ff 	add.w	r5, r5, #4294967295
 800d470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d474:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800d478:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800d47a:	f04f 031f 	mov.w	r3, #31
 800d47e:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800d480:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800d482:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800d484:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d486:	bf0c      	ite	eq
 800d488:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d48c:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d490:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d494:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800d496:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d498:	bf0c      	ite	eq
 800d49a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800d49e:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800d4a2:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800d4a4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800d4a6:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800d4a8:	bd30      	pop	{r4, r5, pc}

0800d4aa <HAL_MDMA_Init>:
{
 800d4aa:	b538      	push	{r3, r4, r5, lr}
 800d4ac:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d4ae:	f7fd fb15 	bl	800aadc <HAL_GetTick>
 800d4b2:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800d4b4:	2c00      	cmp	r4, #0
 800d4b6:	d061      	beq.n	800d57c <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800d4b8:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800d4ba:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800d4bc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800d4c6:	68d3      	ldr	r3, [r2, #12]
 800d4c8:	f023 0301 	bic.w	r3, r3, #1
 800d4cc:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	68da      	ldr	r2, [r3, #12]
 800d4d2:	07d2      	lsls	r2, r2, #31
 800d4d4:	d448      	bmi.n	800d568 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800d4d6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800d4da:	430a      	orrs	r2, r1
 800d4dc:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800d4de:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	69e1      	ldr	r1, [r4, #28]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	6a21      	ldr	r1, [r4, #32]
 800d4ea:	430a      	orrs	r2, r1
 800d4ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d4f2:	430a      	orrs	r2, r1
 800d4f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	68a1      	ldr	r1, [r4, #8]
 800d4fa:	430a      	orrs	r2, r1
 800d4fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d4fe:	3901      	subs	r1, #1
 800d500:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d504:	6861      	ldr	r1, [r4, #4]
 800d506:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d50a:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d50c:	d103      	bne.n	800d516 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800d50e:	691a      	ldr	r2, [r3, #16]
 800d510:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800d514:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800d516:	2200      	movs	r2, #0
 800d518:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800d51a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d51c:	2a00      	cmp	r2, #0
 800d51e:	da04      	bge.n	800d52a <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d520:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800d522:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d524:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800d528:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800d52a:	b292      	uxth	r2, r2
 800d52c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800d52e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d530:	2a00      	cmp	r2, #0
 800d532:	da25      	bge.n	800d580 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800d534:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800d536:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800d538:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800d53c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d53e:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d540:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d544:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d548:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d54a:	f04f 0200 	mov.w	r2, #0
 800d54e:	d019      	beq.n	800d584 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800d550:	b2c9      	uxtb	r1, r1
 800d552:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800d554:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800d556:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d558:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800d55a:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800d55c:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800d55e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800d562:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800d566:	e00a      	b.n	800d57e <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800d568:	f7fd fab8 	bl	800aadc <HAL_GetTick>
 800d56c:	1b40      	subs	r0, r0, r5
 800d56e:	2805      	cmp	r0, #5
 800d570:	d9ad      	bls.n	800d4ce <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800d572:	2340      	movs	r3, #64	@ 0x40
 800d574:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d576:	2303      	movs	r3, #3
 800d578:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800d57c:	2001      	movs	r0, #1
}
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d580:	6a18      	ldr	r0, [r3, #32]
 800d582:	e7dd      	b.n	800d540 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800d584:	629a      	str	r2, [r3, #40]	@ 0x28
 800d586:	e7e5      	b.n	800d554 <HAL_MDMA_Init+0xaa>

0800d588 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800d588:	b1d8      	cbz	r0, 800d5c2 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800d58a:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800d58c:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800d58e:	68d3      	ldr	r3, [r2, #12]
 800d590:	f023 0301 	bic.w	r3, r3, #1
 800d594:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800d596:	2300      	movs	r3, #0
 800d598:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800d59a:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800d59c:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800d59e:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800d5a0:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800d5a2:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800d5a4:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800d5a6:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800d5a8:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800d5aa:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800d5ac:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d5ae:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800d5b0:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800d5b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800d5b6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800d5ba:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800d5be:	4618      	mov	r0, r3
 800d5c0:	4770      	bx	lr
    return HAL_ERROR;
 800d5c2:	2001      	movs	r0, #1
}
 800d5c4:	4770      	bx	lr

0800d5c6 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800d5c6:	4603      	mov	r3, r0
{
 800d5c8:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800d5ca:	b300      	cbz	r0, 800d60e <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800d5cc:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800d5d0:	2801      	cmp	r0, #1
 800d5d2:	d01e      	beq.n	800d612 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800d5d4:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d5d6:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800d5da:	42a5      	cmp	r5, r4
 800d5dc:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800d5de:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d5e2:	d112      	bne.n	800d60a <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800d5e4:	681c      	ldr	r4, [r3, #0]
 800d5e6:	6925      	ldr	r5, [r4, #16]
 800d5e8:	006d      	lsls	r5, r5, #1
 800d5ea:	d407      	bmi.n	800d5fc <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800d5ec:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800d5ee:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d5f0:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800d5f2:	b939      	cbnz	r1, 800d604 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d5f4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800d5f8:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800d5fa:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800d602:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800d604:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d608:	e7f6      	b.n	800d5f8 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800d60a:	4620      	mov	r0, r4
 800d60c:	e7f6      	b.n	800d5fc <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800d60e:	2001      	movs	r0, #1
 800d610:	e7f7      	b.n	800d602 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800d612:	2002      	movs	r0, #2
 800d614:	e7f5      	b.n	800d602 <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800d616 <HAL_MDMA_Start_IT>:
{
 800d616:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800d618:	4604      	mov	r4, r0
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d042      	beq.n	800d6a4 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800d61e:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800d622:	2d01      	cmp	r5, #1
 800d624:	d03c      	beq.n	800d6a0 <HAL_MDMA_Start_IT+0x8a>
 800d626:	2501      	movs	r5, #1
 800d628:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800d62c:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800d630:	2d01      	cmp	r5, #1
 800d632:	f04f 0500 	mov.w	r5, #0
 800d636:	d131      	bne.n	800d69c <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800d638:	2602      	movs	r6, #2
 800d63a:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800d63e:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800d640:	6805      	ldr	r5, [r0, #0]
 800d642:	68ee      	ldr	r6, [r5, #12]
 800d644:	f026 0601 	bic.w	r6, r6, #1
 800d648:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800d64a:	9e06      	ldr	r6, [sp, #24]
 800d64c:	9600      	str	r6, [sp, #0]
 800d64e:	f7ff fefd 	bl	800d44c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800d652:	68eb      	ldr	r3, [r5, #12]
 800d654:	f043 0306 	orr.w	r3, r3, #6
 800d658:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800d65a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d65c:	b11b      	cbz	r3, 800d666 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800d65e:	68eb      	ldr	r3, [r5, #12]
 800d660:	f043 0310 	orr.w	r3, r3, #16
 800d664:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d666:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d668:	b11b      	cbz	r3, 800d672 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800d66a:	68eb      	ldr	r3, [r5, #12]
 800d66c:	f043 0308 	orr.w	r3, r3, #8
 800d670:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800d672:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d674:	b11b      	cbz	r3, 800d67e <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800d676:	68eb      	ldr	r3, [r5, #12]
 800d678:	f043 0320 	orr.w	r3, r3, #32
 800d67c:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800d67e:	68eb      	ldr	r3, [r5, #12]
 800d680:	f043 0301 	orr.w	r3, r3, #1
 800d684:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d686:	6863      	ldr	r3, [r4, #4]
 800d688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d68c:	d103      	bne.n	800d696 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800d68e:	68eb      	ldr	r3, [r5, #12]
 800d690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d694:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800d696:	2000      	movs	r0, #0
}
 800d698:	b002      	add	sp, #8
 800d69a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800d69c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800d6a0:	2002      	movs	r0, #2
 800d6a2:	e7f9      	b.n	800d698 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	e7f7      	b.n	800d698 <HAL_MDMA_Start_IT+0x82>

0800d6a8 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800d6a8:	b128      	cbz	r0, 800d6b6 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800d6aa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d003      	beq.n	800d6ba <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800d6b2:	2380      	movs	r3, #128	@ 0x80
 800d6b4:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800d6b6:	2001      	movs	r0, #1
 800d6b8:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800d6ba:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d6bc:	2304      	movs	r3, #4
 800d6be:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800d6c2:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800d6c4:	68d3      	ldr	r3, [r2, #12]
 800d6c6:	f023 0301 	bic.w	r3, r3, #1
 800d6ca:	60d3      	str	r3, [r2, #12]
}
 800d6cc:	4770      	bx	lr
	...

0800d6d0 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800d6d0:	2300      	movs	r3, #0
{
 800d6d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800d6d4:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d6d6:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800d6da:	4b58      	ldr	r3, [pc, #352]	@ (800d83c <HAL_MDMA_IRQHandler+0x16c>)
{
 800d6dc:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d6de:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800d6e0:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d6e2:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d6e4:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800d6e6:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800d6ea:	3a40      	subs	r2, #64	@ 0x40
 800d6ec:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800d6f0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800d6f4:	4202      	tst	r2, r0
 800d6f6:	f000 809e 	beq.w	800d836 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	07d1      	lsls	r1, r2, #31
 800d6fe:	d529      	bpl.n	800d754 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800d700:	68da      	ldr	r2, [r3, #12]
 800d702:	0792      	lsls	r2, r2, #30
 800d704:	d526      	bpl.n	800d754 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800d706:	68da      	ldr	r2, [r3, #12]
 800d708:	f022 0202 	bic.w	r2, r2, #2
 800d70c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800d70e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d710:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800d712:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800d714:	bf54      	ite	pl
 800d716:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800d71a:	f041 0102 	orrmi.w	r1, r1, #2
 800d71e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800d720:	0591      	lsls	r1, r2, #22
 800d722:	d503      	bpl.n	800d72c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800d724:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d726:	f041 0104 	orr.w	r1, r1, #4
 800d72a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800d72c:	05d0      	lsls	r0, r2, #23
 800d72e:	d503      	bpl.n	800d738 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800d730:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d732:	f041 0108 	orr.w	r1, r1, #8
 800d736:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800d738:	0551      	lsls	r1, r2, #21
 800d73a:	d503      	bpl.n	800d744 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800d73c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800d73e:	f041 0110 	orr.w	r1, r1, #16
 800d742:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800d744:	0512      	lsls	r2, r2, #20
 800d746:	d503      	bpl.n	800d750 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800d748:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800d74a:	f042 0220 	orr.w	r2, r2, #32
 800d74e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800d750:	2201      	movs	r2, #1
 800d752:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	06d0      	lsls	r0, r2, #27
 800d758:	d508      	bpl.n	800d76c <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800d75a:	68da      	ldr	r2, [r3, #12]
 800d75c:	0691      	lsls	r1, r2, #26
 800d75e:	d505      	bpl.n	800d76c <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800d760:	2210      	movs	r2, #16
 800d762:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800d764:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d766:	b10b      	cbz	r3, 800d76c <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800d768:	4620      	mov	r0, r4
 800d76a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	0712      	lsls	r2, r2, #28
 800d772:	d508      	bpl.n	800d786 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800d774:	68da      	ldr	r2, [r3, #12]
 800d776:	06d0      	lsls	r0, r2, #27
 800d778:	d505      	bpl.n	800d786 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800d77a:	2208      	movs	r2, #8
 800d77c:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800d77e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d780:	b10b      	cbz	r3, 800d786 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800d782:	4620      	mov	r0, r4
 800d784:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	0751      	lsls	r1, r2, #29
 800d78c:	d508      	bpl.n	800d7a0 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800d78e:	68da      	ldr	r2, [r3, #12]
 800d790:	0712      	lsls	r2, r2, #28
 800d792:	d505      	bpl.n	800d7a0 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800d794:	2204      	movs	r2, #4
 800d796:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d798:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d79a:	b10b      	cbz	r3, 800d7a0 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800d79c:	4620      	mov	r0, r4
 800d79e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800d7a0:	6823      	ldr	r3, [r4, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	0790      	lsls	r0, r2, #30
 800d7a6:	d524      	bpl.n	800d7f2 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800d7a8:	68da      	ldr	r2, [r3, #12]
 800d7aa:	0751      	lsls	r1, r2, #29
 800d7ac:	d521      	bpl.n	800d7f2 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800d7ae:	68da      	ldr	r2, [r3, #12]
 800d7b0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800d7b4:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800d7b6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800d7ba:	2a04      	cmp	r2, #4
 800d7bc:	f04f 0200 	mov.w	r2, #0
 800d7c0:	d10c      	bne.n	800d7dc <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800d7c2:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800d7c4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800d7c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800d7cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d031      	beq.n	800d836 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800d7d2:	4620      	mov	r0, r4
}
 800d7d4:	b003      	add	sp, #12
 800d7d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800d7da:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800d7dc:	2102      	movs	r1, #2
 800d7de:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800d7e0:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800d7e2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800d7e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800d7ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d7ec:	b10b      	cbz	r3, 800d7f2 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800d7f2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800d7f4:	b1fb      	cbz	r3, 800d836 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800d7f6:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800d7fa:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d7fe:	2304      	movs	r3, #4
 800d800:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	68da      	ldr	r2, [r3, #12]
 800d808:	f022 0201 	bic.w	r2, r2, #1
 800d80c:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800d80e:	9a01      	ldr	r2, [sp, #4]
 800d810:	3201      	adds	r2, #1
 800d812:	42aa      	cmp	r2, r5
 800d814:	9201      	str	r2, [sp, #4]
 800d816:	d802      	bhi.n	800d81e <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800d818:	68da      	ldr	r2, [r3, #12]
 800d81a:	07d2      	lsls	r2, r2, #31
 800d81c:	d4f7      	bmi.n	800d80e <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800d81e:	2200      	movs	r2, #0
 800d820:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d828:	bf4c      	ite	mi
 800d82a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800d82c:	2301      	movpl	r3, #1
 800d82e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800d832:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d834:	e7cb      	b.n	800d7ce <HAL_MDMA_IRQHandler+0xfe>
}
 800d836:	b003      	add	sp, #12
 800d838:	bd30      	pop	{r4, r5, pc}
 800d83a:	bf00      	nop
 800d83c:	2400006c 	.word	0x2400006c

0800d840 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d840:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d842:	4d1c      	ldr	r5, [pc, #112]	@ (800d8b4 <HAL_PWREx_ConfigSupply+0x74>)
{
 800d844:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800d846:	68eb      	ldr	r3, [r5, #12]
 800d848:	f003 0307 	and.w	r3, r3, #7
 800d84c:	2b06      	cmp	r3, #6
 800d84e:	d006      	beq.n	800d85e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d850:	68e8      	ldr	r0, [r5, #12]
 800d852:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800d856:	1b00      	subs	r0, r0, r4
 800d858:	bf18      	it	ne
 800d85a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800d85c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d85e:	68eb      	ldr	r3, [r5, #12]
 800d860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800d864:	4303      	orrs	r3, r0
 800d866:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800d868:	f7fd f938 	bl	800aadc <HAL_GetTick>
 800d86c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d86e:	686b      	ldr	r3, [r5, #4]
 800d870:	049a      	lsls	r2, r3, #18
 800d872:	d508      	bpl.n	800d886 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800d874:	f1a4 031d 	sub.w	r3, r4, #29
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d90c      	bls.n	800d896 <HAL_PWREx_ConfigSupply+0x56>
 800d87c:	3c2d      	subs	r4, #45	@ 0x2d
 800d87e:	2c01      	cmp	r4, #1
 800d880:	d909      	bls.n	800d896 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800d882:	2000      	movs	r0, #0
 800d884:	e7ea      	b.n	800d85c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d886:	f7fd f929 	bl	800aadc <HAL_GetTick>
 800d88a:	1b80      	subs	r0, r0, r6
 800d88c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d890:	d9ed      	bls.n	800d86e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800d892:	2001      	movs	r0, #1
 800d894:	e7e2      	b.n	800d85c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800d896:	f7fd f921 	bl	800aadc <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d89a:	4d06      	ldr	r5, [pc, #24]	@ (800d8b4 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800d89c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800d89e:	68eb      	ldr	r3, [r5, #12]
 800d8a0:	03db      	lsls	r3, r3, #15
 800d8a2:	d4ee      	bmi.n	800d882 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d8a4:	f7fd f91a 	bl	800aadc <HAL_GetTick>
 800d8a8:	1b00      	subs	r0, r0, r4
 800d8aa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d8ae:	d9f6      	bls.n	800d89e <HAL_PWREx_ConfigSupply+0x5e>
 800d8b0:	e7ef      	b.n	800d892 <HAL_PWREx_ConfigSupply+0x52>
 800d8b2:	bf00      	nop
 800d8b4:	58024800 	.word	0x58024800

0800d8b8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d8bc:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800d8be:	b136      	cbz	r6, 800d8ce <QSPI_Config+0x16>
 800d8c0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800d8c4:	d003      	beq.n	800d8ce <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d8c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800d8c8:	6804      	ldr	r4, [r0, #0]
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d8ce:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d8d2:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d8d6:	f1ba 0f00 	cmp.w	sl, #0
 800d8da:	d04c      	beq.n	800d976 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8dc:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d8de:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d8e0:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800d8e4:	ea4a 0406 	orr.w	r4, sl, r6
 800d8e8:	680b      	ldr	r3, [r1, #0]
 800d8ea:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800d8ee:	ea44 0a02 	orr.w	sl, r4, r2
 800d8f2:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d8f6:	f1be 0f00 	cmp.w	lr, #0
 800d8fa:	d024      	beq.n	800d946 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d8fc:	688e      	ldr	r6, [r1, #8]
 800d8fe:	ea4a 040e 	orr.w	r4, sl, lr
 800d902:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d904:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d906:	b19f      	cbz	r7, 800d930 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d908:	433b      	orrs	r3, r7
 800d90a:	4303      	orrs	r3, r0
 800d90c:	68c8      	ldr	r0, [r1, #12]
 800d90e:	ea43 0309 	orr.w	r3, r3, r9
 800d912:	ea43 0308 	orr.w	r3, r3, r8
 800d916:	4333      	orrs	r3, r6
 800d918:	4303      	orrs	r3, r0
 800d91a:	ea43 030c 	orr.w	r3, r3, ip
 800d91e:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d920:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d924:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d926:	d001      	beq.n	800d92c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d928:	684b      	ldr	r3, [r1, #4]
 800d92a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d930:	4303      	orrs	r3, r0
 800d932:	ea43 0309 	orr.w	r3, r3, r9
 800d936:	ea43 0308 	orr.w	r3, r3, r8
 800d93a:	4333      	orrs	r3, r6
 800d93c:	ea43 030c 	orr.w	r3, r3, ip
 800d940:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d942:	616b      	str	r3, [r5, #20]
 800d944:	e7f2      	b.n	800d92c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d946:	b167      	cbz	r7, 800d962 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d948:	433b      	orrs	r3, r7
 800d94a:	4303      	orrs	r3, r0
 800d94c:	68c8      	ldr	r0, [r1, #12]
 800d94e:	ea43 0309 	orr.w	r3, r3, r9
 800d952:	ea43 0308 	orr.w	r3, r3, r8
 800d956:	4303      	orrs	r3, r0
 800d958:	ea43 030c 	orr.w	r3, r3, ip
 800d95c:	ea43 030a 	orr.w	r3, r3, sl
 800d960:	e7de      	b.n	800d920 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d962:	4303      	orrs	r3, r0
 800d964:	ea43 0309 	orr.w	r3, r3, r9
 800d968:	ea43 0408 	orr.w	r4, r3, r8
 800d96c:	ea44 030c 	orr.w	r3, r4, ip
 800d970:	ea43 030a 	orr.w	r3, r3, sl
 800d974:	e7e5      	b.n	800d942 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d976:	f1be 0f00 	cmp.w	lr, #0
 800d97a:	d02c      	beq.n	800d9d6 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d97c:	ea46 050e 	orr.w	r5, r6, lr
 800d980:	688b      	ldr	r3, [r1, #8]
 800d982:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d984:	694e      	ldr	r6, [r1, #20]
 800d986:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d988:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d98a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d98e:	04b6      	lsls	r6, r6, #18
 800d990:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d992:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d996:	b1a7      	cbz	r7, 800d9c2 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d998:	433b      	orrs	r3, r7
 800d99a:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d99c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d9a0:	ea43 0308 	orr.w	r3, r3, r8
 800d9a4:	ea43 030e 	orr.w	r3, r3, lr
 800d9a8:	ea43 030c 	orr.w	r3, r3, ip
 800d9ac:	ea43 0300 	orr.w	r3, r3, r0
 800d9b0:	ea43 0306 	orr.w	r3, r3, r6
 800d9b4:	ea43 0305 	orr.w	r3, r3, r5
 800d9b8:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d9ba:	d0b7      	beq.n	800d92c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d9bc:	684b      	ldr	r3, [r1, #4]
 800d9be:	61a3      	str	r3, [r4, #24]
 800d9c0:	e7b4      	b.n	800d92c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d9c2:	ea43 0308 	orr.w	r3, r3, r8
 800d9c6:	ea43 030e 	orr.w	r3, r3, lr
 800d9ca:	ea43 030c 	orr.w	r3, r3, ip
 800d9ce:	4333      	orrs	r3, r6
 800d9d0:	432b      	orrs	r3, r5
 800d9d2:	6163      	str	r3, [r4, #20]
 800d9d4:	e7aa      	b.n	800d92c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d9d6:	b1d7      	cbz	r7, 800da0e <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d9d8:	ea46 0307 	orr.w	r3, r6, r7
 800d9dc:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800d9de:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d9e0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d9e4:	ea43 0302 	orr.w	r3, r3, r2
 800d9e8:	ea43 0304 	orr.w	r3, r3, r4
 800d9ec:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800d9ee:	ea43 0304 	orr.w	r3, r3, r4
 800d9f2:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800d9f4:	ea43 0304 	orr.w	r3, r3, r4
 800d9f8:	68cc      	ldr	r4, [r1, #12]
 800d9fa:	ea43 0304 	orr.w	r3, r3, r4
 800d9fe:	694c      	ldr	r4, [r1, #20]
 800da00:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800da04:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800da06:	d091      	beq.n	800d92c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800da08:	684b      	ldr	r3, [r1, #4]
 800da0a:	6183      	str	r3, [r0, #24]
 800da0c:	e78e      	b.n	800d92c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800da0e:	2e00      	cmp	r6, #0
 800da10:	d08c      	beq.n	800d92c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800da12:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800da14:	6800      	ldr	r0, [r0, #0]
 800da16:	4333      	orrs	r3, r6
 800da18:	4313      	orrs	r3, r2
 800da1a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800da1c:	4313      	orrs	r3, r2
 800da1e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800da20:	4313      	orrs	r3, r2
 800da22:	694a      	ldr	r2, [r1, #20]
 800da24:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800da28:	6143      	str	r3, [r0, #20]
}
 800da2a:	e77f      	b.n	800d92c <QSPI_Config+0x74>

0800da2c <QSPI_WaitFlagStateUntilTimeout>:
{
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800da34:	4604      	mov	r4, r0
 800da36:	460e      	mov	r6, r1
 800da38:	4615      	mov	r5, r2
 800da3a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800da3c:	6822      	ldr	r2, [r4, #0]
 800da3e:	6893      	ldr	r3, [r2, #8]
 800da40:	4233      	tst	r3, r6
 800da42:	bf14      	ite	ne
 800da44:	2301      	movne	r3, #1
 800da46:	2300      	moveq	r3, #0
 800da48:	42ab      	cmp	r3, r5
 800da4a:	d101      	bne.n	800da50 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800da4c:	2000      	movs	r0, #0
 800da4e:	e012      	b.n	800da76 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800da50:	f1b8 3fff 	cmp.w	r8, #4294967295
 800da54:	d0f3      	beq.n	800da3e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da56:	f7fd f841 	bl	800aadc <HAL_GetTick>
 800da5a:	1bc0      	subs	r0, r0, r7
 800da5c:	4540      	cmp	r0, r8
 800da5e:	d802      	bhi.n	800da66 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800da60:	f1b8 0f00 	cmp.w	r8, #0
 800da64:	d1ea      	bne.n	800da3c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800da66:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800da68:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800da6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800da6e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800da70:	f043 0301 	orr.w	r3, r3, #1
 800da74:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800da76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800da7c <HAL_QSPI_Init>:
{
 800da7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800da80:	f7fd f82c 	bl	800aadc <HAL_GetTick>
 800da84:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800da86:	2c00      	cmp	r4, #0
 800da88:	d03f      	beq.n	800db0a <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800da8a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800da8e:	b92b      	cbnz	r3, 800da9c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800da90:	4620      	mov	r0, r4
 800da92:	f7f3 fd8b 	bl	80015ac <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800da96:	f241 3388 	movw	r3, #5000	@ 0x1388
 800da9a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800da9c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800da9e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800daa0:	68a3      	ldr	r3, [r4, #8]
 800daa2:	680a      	ldr	r2, [r1, #0]
 800daa4:	3b01      	subs	r3, #1
 800daa6:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800daaa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800daae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800dab0:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800dab2:	2200      	movs	r2, #0
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	2120      	movs	r1, #32
 800dab8:	462b      	mov	r3, r5
 800daba:	f7ff ffb7 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800dabe:	bb10      	cbnz	r0, 800db06 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800dac0:	6822      	ldr	r2, [r4, #0]
 800dac2:	69e5      	ldr	r5, [r4, #28]
 800dac4:	68e3      	ldr	r3, [r4, #12]
 800dac6:	6811      	ldr	r1, [r2, #0]
 800dac8:	432b      	orrs	r3, r5
 800daca:	6a25      	ldr	r5, [r4, #32]
 800dacc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800dad0:	432b      	orrs	r3, r5
 800dad2:	6865      	ldr	r5, [r4, #4]
 800dad4:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800dad8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800dadc:	430b      	orrs	r3, r1
 800dade:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800dae0:	6855      	ldr	r5, [r2, #4]
 800dae2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800dae6:	430b      	orrs	r3, r1
 800dae8:	6921      	ldr	r1, [r4, #16]
 800daea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800daee:	4908      	ldr	r1, [pc, #32]	@ (800db10 <HAL_QSPI_Init+0x94>)
 800daf0:	4029      	ands	r1, r5
 800daf2:	430b      	orrs	r3, r1
 800daf4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800daf6:	6813      	ldr	r3, [r2, #0]
 800daf8:	f043 0301 	orr.w	r3, r3, #1
 800dafc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800dafe:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800db00:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800db02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800db06:	b003      	add	sp, #12
 800db08:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800db0a:	2001      	movs	r0, #1
 800db0c:	e7fb      	b.n	800db06 <HAL_QSPI_Init+0x8a>
 800db0e:	bf00      	nop
 800db10:	ffe0f8fe 	.word	0xffe0f8fe

0800db14 <HAL_QSPI_Command>:
{
 800db14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800db18:	4604      	mov	r4, r0
 800db1a:	468a      	mov	sl, r1
 800db1c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800db1e:	f7fc ffdd 	bl	800aadc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800db22:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800db26:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d036      	beq.n	800db9a <HAL_QSPI_Command+0x86>
 800db2c:	2301      	movs	r3, #1
 800db2e:	2602      	movs	r6, #2
 800db30:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800db34:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800db38:	2b01      	cmp	r3, #1
 800db3a:	fa5f f983 	uxtb.w	r9, r3
 800db3e:	d128      	bne.n	800db92 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800db40:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800db42:	4603      	mov	r3, r0
 800db44:	2120      	movs	r1, #32
 800db46:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800db48:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800db4a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800db4e:	f8cd 8000 	str.w	r8, [sp]
 800db52:	f7ff ff6b 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800db56:	4605      	mov	r5, r0
 800db58:	b9a0      	cbnz	r0, 800db84 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800db5a:	4602      	mov	r2, r0
 800db5c:	4651      	mov	r1, sl
 800db5e:	4620      	mov	r0, r4
 800db60:	f7ff feaa 	bl	800d8b8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800db64:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800db68:	b953      	cbnz	r3, 800db80 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800db6a:	463b      	mov	r3, r7
 800db6c:	464a      	mov	r2, r9
 800db6e:	4631      	mov	r1, r6
 800db70:	4620      	mov	r0, r4
 800db72:	f8cd 8000 	str.w	r8, [sp]
 800db76:	f7ff ff59 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800db7a:	b960      	cbnz	r0, 800db96 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800db80:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800db84:	2300      	movs	r3, #0
 800db86:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800db8a:	4628      	mov	r0, r5
 800db8c:	b002      	add	sp, #8
 800db8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800db92:	4635      	mov	r5, r6
 800db94:	e7f6      	b.n	800db84 <HAL_QSPI_Command+0x70>
 800db96:	4605      	mov	r5, r0
 800db98:	e7f4      	b.n	800db84 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800db9a:	2502      	movs	r5, #2
 800db9c:	e7f5      	b.n	800db8a <HAL_QSPI_Command+0x76>

0800db9e <HAL_QSPI_Transmit>:
{
 800db9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dba2:	4604      	mov	r4, r0
 800dba4:	4688      	mov	r8, r1
 800dba6:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800dba8:	f7fc ff98 	bl	800aadc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800dbac:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800dbb0:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800dbb2:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d04c      	beq.n	800dc52 <HAL_QSPI_Transmit+0xb4>
 800dbb8:	2301      	movs	r3, #1
 800dbba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dbbe:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	b2d8      	uxtb	r0, r3
 800dbc6:	d142      	bne.n	800dc4e <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800dbcc:	f1b8 0f00 	cmp.w	r8, #0
 800dbd0:	d038      	beq.n	800dc44 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800dbd2:	2312      	movs	r3, #18
 800dbd4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800dbd8:	692b      	ldr	r3, [r5, #16]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dbde:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800dbe0:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800dbe8:	696b      	ldr	r3, [r5, #20]
 800dbea:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800dbee:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800dbf0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dbf2:	b99b      	cbnz	r3, 800dc1c <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800dbf4:	4633      	mov	r3, r6
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	2102      	movs	r1, #2
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	9700      	str	r7, [sp, #0]
 800dbfe:	f7ff ff15 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800dc02:	b910      	cbnz	r0, 800dc0a <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	2202      	movs	r2, #2
 800dc08:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800dc10:	2300      	movs	r3, #0
 800dc12:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800dc16:	b002      	add	sp, #8
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800dc1c:	4633      	mov	r3, r6
 800dc1e:	2201      	movs	r2, #1
 800dc20:	2104      	movs	r1, #4
 800dc22:	4620      	mov	r0, r4
 800dc24:	9700      	str	r7, [sp, #0]
 800dc26:	f7ff ff01 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d1ed      	bne.n	800dc0a <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800dc2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800dc36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dc38:	3301      	adds	r3, #1
 800dc3a:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800dc3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc42:	e7d5      	b.n	800dbf0 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800dc44:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800dc46:	f043 0308 	orr.w	r3, r3, #8
 800dc4a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800dc4c:	e7e0      	b.n	800dc10 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800dc4e:	2002      	movs	r0, #2
 800dc50:	e7de      	b.n	800dc10 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800dc52:	2002      	movs	r0, #2
 800dc54:	e7df      	b.n	800dc16 <HAL_QSPI_Transmit+0x78>

0800dc56 <HAL_QSPI_Receive>:
{
 800dc56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	4617      	mov	r7, r2
 800dc5e:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800dc60:	f7fc ff3c 	bl	800aadc <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800dc64:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800dc66:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800dc68:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800dc6a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d04f      	beq.n	800dd12 <HAL_QSPI_Receive+0xbc>
 800dc72:	2301      	movs	r3, #1
 800dc74:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dc78:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	b2d8      	uxtb	r0, r3
 800dc80:	d145      	bne.n	800dd0e <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dc82:	2300      	movs	r3, #0
 800dc84:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800dc86:	f1b8 0f00 	cmp.w	r8, #0
 800dc8a:	d03b      	beq.n	800dd04 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800dc8c:	2322      	movs	r3, #34	@ 0x22
 800dc8e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800dc92:	692b      	ldr	r3, [r5, #16]
 800dc94:	3301      	adds	r3, #1
 800dc96:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dc98:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800dc9a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800dc9e:	3301      	adds	r3, #1
 800dca0:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800dca2:	6969      	ldr	r1, [r5, #20]
 800dca4:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800dca8:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800dcac:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800dcae:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800dcb0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800dcb2:	b99b      	cbnz	r3, 800dcdc <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800dcb4:	4633      	mov	r3, r6
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	2102      	movs	r1, #2
 800dcba:	4620      	mov	r0, r4
 800dcbc:	9700      	str	r7, [sp, #0]
 800dcbe:	f7ff feb5 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800dcc2:	b910      	cbnz	r0, 800dcca <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800dcc4:	6823      	ldr	r3, [r4, #0]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800dcca:	2301      	movs	r3, #1
 800dccc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800dcd6:	b002      	add	sp, #8
 800dcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800dcdc:	4633      	mov	r3, r6
 800dcde:	2201      	movs	r2, #1
 800dce0:	2106      	movs	r1, #6
 800dce2:	4620      	mov	r0, r4
 800dce4:	9700      	str	r7, [sp, #0]
 800dce6:	f7ff fea1 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d1ed      	bne.n	800dcca <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800dcee:	f895 2020 	ldrb.w	r2, [r5, #32]
 800dcf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dcf4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800dcf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800dcfc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dd02:	e7d5      	b.n	800dcb0 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800dd04:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800dd06:	f043 0308 	orr.w	r3, r3, #8
 800dd0a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800dd0c:	e7e0      	b.n	800dcd0 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800dd0e:	2002      	movs	r0, #2
 800dd10:	e7de      	b.n	800dcd0 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800dd12:	2002      	movs	r0, #2
 800dd14:	e7df      	b.n	800dcd6 <HAL_QSPI_Receive+0x80>

0800dd16 <HAL_QSPI_AutoPolling>:
{
 800dd16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	461f      	mov	r7, r3
 800dd1e:	4689      	mov	r9, r1
 800dd20:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800dd22:	f7fc fedb 	bl	800aadc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800dd26:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800dd2a:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d041      	beq.n	800ddb4 <HAL_QSPI_AutoPolling+0x9e>
 800dd30:	2301      	movs	r3, #1
 800dd32:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800dd36:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	fa5f f883 	uxtb.w	r8, r3
 800dd40:	d136      	bne.n	800ddb0 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800dd42:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dd44:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800dd46:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dd48:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800dd4a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800dd4e:	4603      	mov	r3, r0
 800dd50:	9700      	str	r7, [sp, #0]
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7ff fe6a 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800dd58:	bb20      	cbnz	r0, 800dda4 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800dd5a:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800dd5c:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800dd5e:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800dd60:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800dd62:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800dd64:	686b      	ldr	r3, [r5, #4]
 800dd66:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800dd68:	68ab      	ldr	r3, [r5, #8]
 800dd6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800dd6c:	6813      	ldr	r3, [r2, #0]
 800dd6e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800dd72:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800dd74:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800dd76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dd7a:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800dd7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800dd80:	68eb      	ldr	r3, [r5, #12]
 800dd82:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800dd86:	f7ff fd97 	bl	800d8b8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800dd8a:	4633      	mov	r3, r6
 800dd8c:	4642      	mov	r2, r8
 800dd8e:	2108      	movs	r1, #8
 800dd90:	4620      	mov	r0, r4
 800dd92:	9700      	str	r7, [sp, #0]
 800dd94:	f7ff fe4a 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800dd98:	b920      	cbnz	r0, 800dda4 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800dd9a:	6823      	ldr	r3, [r4, #0]
 800dd9c:	2208      	movs	r2, #8
 800dd9e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800dda0:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800dda4:	2300      	movs	r3, #0
 800dda6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ddaa:	b003      	add	sp, #12
 800ddac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800ddb0:	2002      	movs	r0, #2
 800ddb2:	e7f7      	b.n	800dda4 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800ddb4:	2002      	movs	r0, #2
 800ddb6:	e7f8      	b.n	800ddaa <HAL_QSPI_AutoPolling+0x94>

0800ddb8 <HAL_QSPI_MemoryMapped>:
{
 800ddb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddba:	4604      	mov	r4, r0
 800ddbc:	4616      	mov	r6, r2
 800ddbe:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800ddc0:	f7fc fe8c 	bl	800aadc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ddc4:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ddc8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800ddca:	2a01      	cmp	r2, #1
 800ddcc:	d033      	beq.n	800de36 <HAL_QSPI_MemoryMapped+0x7e>
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ddd4:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800ddd8:	2a01      	cmp	r2, #1
 800ddda:	d12a      	bne.n	800de32 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dddc:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ddde:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800dde0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800dde2:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800dde4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800dde8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ddea:	9100      	str	r1, [sp, #0]
 800ddec:	2120      	movs	r1, #32
 800ddee:	f7ff fe1d 	bl	800da2c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	b9b8      	cbnz	r0, 800de26 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ddf6:	6823      	ldr	r3, [r4, #0]
 800ddf8:	6872      	ldr	r2, [r6, #4]
 800ddfa:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ddfc:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ddfe:	f020 0008 	bic.w	r0, r0, #8
 800de02:	ea40 0002 	orr.w	r0, r0, r2
 800de06:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800de08:	d107      	bne.n	800de1a <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800de0a:	6832      	ldr	r2, [r6, #0]
 800de0c:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800de0e:	2210      	movs	r2, #16
 800de10:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800de18:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800de1a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800de1e:	4639      	mov	r1, r7
 800de20:	4620      	mov	r0, r4
 800de22:	f7ff fd49 	bl	800d8b8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800de26:	2300      	movs	r3, #0
 800de28:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800de2c:	4628      	mov	r0, r5
 800de2e:	b003      	add	sp, #12
 800de30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800de32:	2502      	movs	r5, #2
 800de34:	e7f7      	b.n	800de26 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800de36:	2502      	movs	r5, #2
 800de38:	e7f8      	b.n	800de2c <HAL_QSPI_MemoryMapped+0x74>
	...

0800de3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800de3e:	4604      	mov	r4, r0
 800de40:	2800      	cmp	r0, #0
 800de42:	d074      	beq.n	800df2e <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de44:	6803      	ldr	r3, [r0, #0]
 800de46:	07d8      	lsls	r0, r3, #31
 800de48:	d45e      	bmi.n	800df08 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800de4a:	6823      	ldr	r3, [r4, #0]
 800de4c:	0799      	lsls	r1, r3, #30
 800de4e:	f100 80ad 	bmi.w	800dfac <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	06da      	lsls	r2, r3, #27
 800de56:	d527      	bpl.n	800dea8 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de58:	4a9c      	ldr	r2, [pc, #624]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800de5a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de5c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800de62:	2b08      	cmp	r3, #8
 800de64:	d007      	beq.n	800de76 <HAL_RCC_OscConfig+0x3a>
 800de66:	2b18      	cmp	r3, #24
 800de68:	f040 8103 	bne.w	800e072 <HAL_RCC_OscConfig+0x236>
 800de6c:	f001 0303 	and.w	r3, r1, #3
 800de70:	2b01      	cmp	r3, #1
 800de72:	f040 80fe 	bne.w	800e072 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de76:	6813      	ldr	r3, [r2, #0]
 800de78:	05db      	lsls	r3, r3, #23
 800de7a:	d502      	bpl.n	800de82 <HAL_RCC_OscConfig+0x46>
 800de7c:	69e3      	ldr	r3, [r4, #28]
 800de7e:	2b80      	cmp	r3, #128	@ 0x80
 800de80:	d155      	bne.n	800df2e <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de82:	f7fc fe43 	bl	800ab0c <HAL_GetREVID>
 800de86:	f241 0303 	movw	r3, #4099	@ 0x1003
 800de8a:	6a21      	ldr	r1, [r4, #32]
 800de8c:	4298      	cmp	r0, r3
 800de8e:	4b8f      	ldr	r3, [pc, #572]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800de90:	f200 80e8 	bhi.w	800e064 <HAL_RCC_OscConfig+0x228>
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	2920      	cmp	r1, #32
 800de98:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800de9c:	bf0c      	ite	eq
 800de9e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800dea2:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800dea6:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dea8:	6823      	ldr	r3, [r4, #0]
 800deaa:	0719      	lsls	r1, r3, #28
 800deac:	f100 8123 	bmi.w	800e0f6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	069a      	lsls	r2, r3, #26
 800deb4:	f100 8144 	bmi.w	800e140 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	075d      	lsls	r5, r3, #29
 800debc:	d51e      	bpl.n	800defc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800debe:	4d84      	ldr	r5, [pc, #528]	@ (800e0d0 <HAL_RCC_OscConfig+0x294>)
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dec6:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dec8:	f7fc fe08 	bl	800aadc <HAL_GetTick>
 800decc:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dece:	682b      	ldr	r3, [r5, #0]
 800ded0:	05da      	lsls	r2, r3, #23
 800ded2:	f140 815a 	bpl.w	800e18a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ded6:	68a3      	ldr	r3, [r4, #8]
 800ded8:	4d7c      	ldr	r5, [pc, #496]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800deda:	2b01      	cmp	r3, #1
 800dedc:	f040 815c 	bne.w	800e198 <HAL_RCC_OscConfig+0x35c>
 800dee0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800dee2:	f043 0301 	orr.w	r3, r3, #1
 800dee6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dee8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800deec:	f7fc fdf6 	bl	800aadc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800def0:	4e76      	ldr	r6, [pc, #472]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800def2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800def4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800def6:	079b      	lsls	r3, r3, #30
 800def8:	f140 8174 	bpl.w	800e1e4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800defc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800defe:	2900      	cmp	r1, #0
 800df00:	f040 8177 	bne.w	800e1f2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800df04:	2000      	movs	r0, #0
 800df06:	e02b      	b.n	800df60 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800df08:	4a70      	ldr	r2, [pc, #448]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800df0a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800df0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800df0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800df12:	2b10      	cmp	r3, #16
 800df14:	d005      	beq.n	800df22 <HAL_RCC_OscConfig+0xe6>
 800df16:	2b18      	cmp	r3, #24
 800df18:	d10b      	bne.n	800df32 <HAL_RCC_OscConfig+0xf6>
 800df1a:	f001 0303 	and.w	r3, r1, #3
 800df1e:	2b02      	cmp	r3, #2
 800df20:	d107      	bne.n	800df32 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df22:	6813      	ldr	r3, [r2, #0]
 800df24:	039a      	lsls	r2, r3, #14
 800df26:	d590      	bpl.n	800de4a <HAL_RCC_OscConfig+0xe>
 800df28:	6863      	ldr	r3, [r4, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d18d      	bne.n	800de4a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800df2e:	2001      	movs	r0, #1
 800df30:	e016      	b.n	800df60 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df32:	6863      	ldr	r3, [r4, #4]
 800df34:	4d65      	ldr	r5, [pc, #404]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800df36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df3a:	d112      	bne.n	800df62 <HAL_RCC_OscConfig+0x126>
 800df3c:	682b      	ldr	r3, [r5, #0]
 800df3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800df44:	f7fc fdca 	bl	800aadc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df48:	4e60      	ldr	r6, [pc, #384]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800df4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df4c:	6833      	ldr	r3, [r6, #0]
 800df4e:	039b      	lsls	r3, r3, #14
 800df50:	f53f af7b 	bmi.w	800de4a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df54:	f7fc fdc2 	bl	800aadc <HAL_GetTick>
 800df58:	1b40      	subs	r0, r0, r5
 800df5a:	2864      	cmp	r0, #100	@ 0x64
 800df5c:	d9f6      	bls.n	800df4c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800df5e:	2003      	movs	r0, #3
}
 800df60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df62:	b9a3      	cbnz	r3, 800df8e <HAL_RCC_OscConfig+0x152>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df6a:	602b      	str	r3, [r5, #0]
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800df72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800df74:	f7fc fdb2 	bl	800aadc <HAL_GetTick>
 800df78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df7a:	682b      	ldr	r3, [r5, #0]
 800df7c:	039f      	lsls	r7, r3, #14
 800df7e:	f57f af64 	bpl.w	800de4a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df82:	f7fc fdab 	bl	800aadc <HAL_GetTick>
 800df86:	1b80      	subs	r0, r0, r6
 800df88:	2864      	cmp	r0, #100	@ 0x64
 800df8a:	d9f6      	bls.n	800df7a <HAL_RCC_OscConfig+0x13e>
 800df8c:	e7e7      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800df92:	682b      	ldr	r3, [r5, #0]
 800df94:	d103      	bne.n	800df9e <HAL_RCC_OscConfig+0x162>
 800df96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800df9a:	602b      	str	r3, [r5, #0]
 800df9c:	e7ce      	b.n	800df3c <HAL_RCC_OscConfig+0x100>
 800df9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dfa2:	602b      	str	r3, [r5, #0]
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dfaa:	e7ca      	b.n	800df42 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfac:	4947      	ldr	r1, [pc, #284]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800dfae:	68e2      	ldr	r2, [r4, #12]
 800dfb0:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dfb2:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dfb4:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800dfb8:	d003      	beq.n	800dfc2 <HAL_RCC_OscConfig+0x186>
 800dfba:	2b18      	cmp	r3, #24
 800dfbc:	d12a      	bne.n	800e014 <HAL_RCC_OscConfig+0x1d8>
 800dfbe:	0780      	lsls	r0, r0, #30
 800dfc0:	d128      	bne.n	800e014 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dfc2:	680b      	ldr	r3, [r1, #0]
 800dfc4:	075b      	lsls	r3, r3, #29
 800dfc6:	d501      	bpl.n	800dfcc <HAL_RCC_OscConfig+0x190>
 800dfc8:	2a00      	cmp	r2, #0
 800dfca:	d0b0      	beq.n	800df2e <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dfcc:	4d3f      	ldr	r5, [pc, #252]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800dfce:	682b      	ldr	r3, [r5, #0]
 800dfd0:	f023 0319 	bic.w	r3, r3, #25
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dfd8:	f7fc fd80 	bl	800aadc <HAL_GetTick>
 800dfdc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	075f      	lsls	r7, r3, #29
 800dfe2:	d511      	bpl.n	800e008 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dfe4:	f7fc fd92 	bl	800ab0c <HAL_GetREVID>
 800dfe8:	f241 0303 	movw	r3, #4099	@ 0x1003
 800dfec:	6922      	ldr	r2, [r4, #16]
 800dfee:	4298      	cmp	r0, r3
 800dff0:	686b      	ldr	r3, [r5, #4]
 800dff2:	d822      	bhi.n	800e03a <HAL_RCC_OscConfig+0x1fe>
 800dff4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800dff8:	2a40      	cmp	r2, #64	@ 0x40
 800dffa:	bf0c      	ite	eq
 800dffc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800e000:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800e004:	606b      	str	r3, [r5, #4]
 800e006:	e724      	b.n	800de52 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e008:	f7fc fd68 	bl	800aadc <HAL_GetTick>
 800e00c:	1b80      	subs	r0, r0, r6
 800e00e:	2802      	cmp	r0, #2
 800e010:	d9e5      	bls.n	800dfde <HAL_RCC_OscConfig+0x1a2>
 800e012:	e7a4      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e014:	4d2d      	ldr	r5, [pc, #180]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e016:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e018:	b1a2      	cbz	r2, 800e044 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e01a:	f023 0319 	bic.w	r3, r3, #25
 800e01e:	4313      	orrs	r3, r2
 800e020:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e022:	f7fc fd5b 	bl	800aadc <HAL_GetTick>
 800e026:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	0758      	lsls	r0, r3, #29
 800e02c:	d4da      	bmi.n	800dfe4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e02e:	f7fc fd55 	bl	800aadc <HAL_GetTick>
 800e032:	1b80      	subs	r0, r0, r6
 800e034:	2802      	cmp	r0, #2
 800e036:	d9f7      	bls.n	800e028 <HAL_RCC_OscConfig+0x1ec>
 800e038:	e791      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e03a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800e03e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e042:	e7df      	b.n	800e004 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800e044:	f023 0301 	bic.w	r3, r3, #1
 800e048:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e04a:	f7fc fd47 	bl	800aadc <HAL_GetTick>
 800e04e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e050:	682b      	ldr	r3, [r5, #0]
 800e052:	0759      	lsls	r1, r3, #29
 800e054:	f57f aefd 	bpl.w	800de52 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e058:	f7fc fd40 	bl	800aadc <HAL_GetTick>
 800e05c:	1b80      	subs	r0, r0, r6
 800e05e:	2802      	cmp	r0, #2
 800e060:	d9f6      	bls.n	800e050 <HAL_RCC_OscConfig+0x214>
 800e062:	e77c      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e064:	68da      	ldr	r2, [r3, #12]
 800e066:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800e06a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e06e:	60da      	str	r2, [r3, #12]
 800e070:	e71a      	b.n	800dea8 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e072:	69e3      	ldr	r3, [r4, #28]
 800e074:	4d15      	ldr	r5, [pc, #84]	@ (800e0cc <HAL_RCC_OscConfig+0x290>)
 800e076:	b36b      	cbz	r3, 800e0d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e07e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e080:	f7fc fd2c 	bl	800aadc <HAL_GetTick>
 800e084:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e086:	682b      	ldr	r3, [r5, #0]
 800e088:	05df      	lsls	r7, r3, #23
 800e08a:	d511      	bpl.n	800e0b0 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e08c:	f7fc fd3e 	bl	800ab0c <HAL_GetREVID>
 800e090:	f241 0303 	movw	r3, #4099	@ 0x1003
 800e094:	6a22      	ldr	r2, [r4, #32]
 800e096:	4298      	cmp	r0, r3
 800e098:	d810      	bhi.n	800e0bc <HAL_RCC_OscConfig+0x280>
 800e09a:	686b      	ldr	r3, [r5, #4]
 800e09c:	2a20      	cmp	r2, #32
 800e09e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800e0a2:	bf0c      	ite	eq
 800e0a4:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800e0a8:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800e0ac:	606b      	str	r3, [r5, #4]
 800e0ae:	e6fb      	b.n	800dea8 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e0b0:	f7fc fd14 	bl	800aadc <HAL_GetTick>
 800e0b4:	1b80      	subs	r0, r0, r6
 800e0b6:	2802      	cmp	r0, #2
 800e0b8:	d9e5      	bls.n	800e086 <HAL_RCC_OscConfig+0x24a>
 800e0ba:	e750      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e0bc:	68eb      	ldr	r3, [r5, #12]
 800e0be:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800e0c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e0c6:	60eb      	str	r3, [r5, #12]
 800e0c8:	e6ee      	b.n	800dea8 <HAL_RCC_OscConfig+0x6c>
 800e0ca:	bf00      	nop
 800e0cc:	58024400 	.word	0x58024400
 800e0d0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800e0d4:	682b      	ldr	r3, [r5, #0]
 800e0d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e0dc:	f7fc fcfe 	bl	800aadc <HAL_GetTick>
 800e0e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e0e2:	682b      	ldr	r3, [r5, #0]
 800e0e4:	05d8      	lsls	r0, r3, #23
 800e0e6:	f57f aedf 	bpl.w	800dea8 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e0ea:	f7fc fcf7 	bl	800aadc <HAL_GetTick>
 800e0ee:	1b80      	subs	r0, r0, r6
 800e0f0:	2802      	cmp	r0, #2
 800e0f2:	d9f6      	bls.n	800e0e2 <HAL_RCC_OscConfig+0x2a6>
 800e0f4:	e733      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e0f6:	6963      	ldr	r3, [r4, #20]
 800e0f8:	4da5      	ldr	r5, [pc, #660]	@ (800e390 <HAL_RCC_OscConfig+0x554>)
 800e0fa:	b183      	cbz	r3, 800e11e <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800e0fc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e0fe:	f043 0301 	orr.w	r3, r3, #1
 800e102:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800e104:	f7fc fcea 	bl	800aadc <HAL_GetTick>
 800e108:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e10a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e10c:	079b      	lsls	r3, r3, #30
 800e10e:	f53f aecf 	bmi.w	800deb0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e112:	f7fc fce3 	bl	800aadc <HAL_GetTick>
 800e116:	1b80      	subs	r0, r0, r6
 800e118:	2802      	cmp	r0, #2
 800e11a:	d9f6      	bls.n	800e10a <HAL_RCC_OscConfig+0x2ce>
 800e11c:	e71f      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800e11e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e120:	f023 0301 	bic.w	r3, r3, #1
 800e124:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800e126:	f7fc fcd9 	bl	800aadc <HAL_GetTick>
 800e12a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e12c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800e12e:	079f      	lsls	r7, r3, #30
 800e130:	f57f aebe 	bpl.w	800deb0 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e134:	f7fc fcd2 	bl	800aadc <HAL_GetTick>
 800e138:	1b80      	subs	r0, r0, r6
 800e13a:	2802      	cmp	r0, #2
 800e13c:	d9f6      	bls.n	800e12c <HAL_RCC_OscConfig+0x2f0>
 800e13e:	e70e      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e140:	69a3      	ldr	r3, [r4, #24]
 800e142:	4d93      	ldr	r5, [pc, #588]	@ (800e390 <HAL_RCC_OscConfig+0x554>)
 800e144:	b183      	cbz	r3, 800e168 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800e146:	682b      	ldr	r3, [r5, #0]
 800e148:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e14c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800e14e:	f7fc fcc5 	bl	800aadc <HAL_GetTick>
 800e152:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	0498      	lsls	r0, r3, #18
 800e158:	f53f aeae 	bmi.w	800deb8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e15c:	f7fc fcbe 	bl	800aadc <HAL_GetTick>
 800e160:	1b80      	subs	r0, r0, r6
 800e162:	2802      	cmp	r0, #2
 800e164:	d9f6      	bls.n	800e154 <HAL_RCC_OscConfig+0x318>
 800e166:	e6fa      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800e168:	682b      	ldr	r3, [r5, #0]
 800e16a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e16e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800e170:	f7fc fcb4 	bl	800aadc <HAL_GetTick>
 800e174:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e176:	682b      	ldr	r3, [r5, #0]
 800e178:	0499      	lsls	r1, r3, #18
 800e17a:	f57f ae9d 	bpl.w	800deb8 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e17e:	f7fc fcad 	bl	800aadc <HAL_GetTick>
 800e182:	1b80      	subs	r0, r0, r6
 800e184:	2802      	cmp	r0, #2
 800e186:	d9f6      	bls.n	800e176 <HAL_RCC_OscConfig+0x33a>
 800e188:	e6e9      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e18a:	f7fc fca7 	bl	800aadc <HAL_GetTick>
 800e18e:	1b80      	subs	r0, r0, r6
 800e190:	2864      	cmp	r0, #100	@ 0x64
 800e192:	f67f ae9c 	bls.w	800dece <HAL_RCC_OscConfig+0x92>
 800e196:	e6e2      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e198:	b9b3      	cbnz	r3, 800e1c8 <HAL_RCC_OscConfig+0x38c>
 800e19a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e19c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1a0:	f023 0301 	bic.w	r3, r3, #1
 800e1a4:	672b      	str	r3, [r5, #112]	@ 0x70
 800e1a6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e1a8:	f023 0304 	bic.w	r3, r3, #4
 800e1ac:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800e1ae:	f7fc fc95 	bl	800aadc <HAL_GetTick>
 800e1b2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e1b4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e1b6:	0798      	lsls	r0, r3, #30
 800e1b8:	f57f aea0 	bpl.w	800defc <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1bc:	f7fc fc8e 	bl	800aadc <HAL_GetTick>
 800e1c0:	1b80      	subs	r0, r0, r6
 800e1c2:	42b8      	cmp	r0, r7
 800e1c4:	d9f6      	bls.n	800e1b4 <HAL_RCC_OscConfig+0x378>
 800e1c6:	e6ca      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1c8:	2b05      	cmp	r3, #5
 800e1ca:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e1cc:	d103      	bne.n	800e1d6 <HAL_RCC_OscConfig+0x39a>
 800e1ce:	f043 0304 	orr.w	r3, r3, #4
 800e1d2:	672b      	str	r3, [r5, #112]	@ 0x70
 800e1d4:	e684      	b.n	800dee0 <HAL_RCC_OscConfig+0xa4>
 800e1d6:	f023 0301 	bic.w	r3, r3, #1
 800e1da:	672b      	str	r3, [r5, #112]	@ 0x70
 800e1dc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e1de:	f023 0304 	bic.w	r3, r3, #4
 800e1e2:	e680      	b.n	800dee6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1e4:	f7fc fc7a 	bl	800aadc <HAL_GetTick>
 800e1e8:	1b40      	subs	r0, r0, r5
 800e1ea:	42b8      	cmp	r0, r7
 800e1ec:	f67f ae82 	bls.w	800def4 <HAL_RCC_OscConfig+0xb8>
 800e1f0:	e6b5      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e1f2:	4d67      	ldr	r5, [pc, #412]	@ (800e390 <HAL_RCC_OscConfig+0x554>)
 800e1f4:	692b      	ldr	r3, [r5, #16]
 800e1f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e1fa:	2b18      	cmp	r3, #24
 800e1fc:	d07a      	beq.n	800e2f4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800e1fe:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e200:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800e202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e206:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e208:	d167      	bne.n	800e2da <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800e20a:	f7fc fc67 	bl	800aadc <HAL_GetTick>
 800e20e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e210:	682b      	ldr	r3, [r5, #0]
 800e212:	0199      	lsls	r1, r3, #6
 800e214:	d45b      	bmi.n	800e2ce <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e216:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800e218:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e21a:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800e21e:	f023 0303 	bic.w	r3, r3, #3
 800e222:	4313      	orrs	r3, r2
 800e224:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e226:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800e22a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800e22c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e22e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e230:	3b01      	subs	r3, #1
 800e232:	3a01      	subs	r2, #1
 800e234:	025b      	lsls	r3, r3, #9
 800e236:	0412      	lsls	r2, r2, #16
 800e238:	b29b      	uxth	r3, r3
 800e23a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e23e:	4313      	orrs	r3, r2
 800e240:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800e242:	3a01      	subs	r2, #1
 800e244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e248:	4313      	orrs	r3, r2
 800e24a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800e24c:	3a01      	subs	r2, #1
 800e24e:	0612      	lsls	r2, r2, #24
 800e250:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e254:	4313      	orrs	r3, r2
 800e256:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800e258:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e25a:	f023 0301 	bic.w	r3, r3, #1
 800e25e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e260:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e262:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800e264:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e268:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e26c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e270:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e272:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e274:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800e276:	f023 030c 	bic.w	r3, r3, #12
 800e27a:	4313      	orrs	r3, r2
 800e27c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e27e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e280:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e282:	f023 0302 	bic.w	r3, r3, #2
 800e286:	4313      	orrs	r3, r2
 800e288:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e28a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e28c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e290:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e292:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e298:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e29a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e29c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e2a0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800e2a2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e2a4:	f043 0301 	orr.w	r3, r3, #1
 800e2a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e2b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e2b2:	f7fc fc13 	bl	800aadc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2b6:	4d36      	ldr	r5, [pc, #216]	@ (800e390 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800e2b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2ba:	682b      	ldr	r3, [r5, #0]
 800e2bc:	019a      	lsls	r2, r3, #6
 800e2be:	f53f ae21 	bmi.w	800df04 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2c2:	f7fc fc0b 	bl	800aadc <HAL_GetTick>
 800e2c6:	1b00      	subs	r0, r0, r4
 800e2c8:	2802      	cmp	r0, #2
 800e2ca:	d9f6      	bls.n	800e2ba <HAL_RCC_OscConfig+0x47e>
 800e2cc:	e647      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2ce:	f7fc fc05 	bl	800aadc <HAL_GetTick>
 800e2d2:	1b80      	subs	r0, r0, r6
 800e2d4:	2802      	cmp	r0, #2
 800e2d6:	d99b      	bls.n	800e210 <HAL_RCC_OscConfig+0x3d4>
 800e2d8:	e641      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800e2da:	f7fc fbff 	bl	800aadc <HAL_GetTick>
 800e2de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	019b      	lsls	r3, r3, #6
 800e2e4:	f57f ae0e 	bpl.w	800df04 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2e8:	f7fc fbf8 	bl	800aadc <HAL_GetTick>
 800e2ec:	1b00      	subs	r0, r0, r4
 800e2ee:	2802      	cmp	r0, #2
 800e2f0:	d9f6      	bls.n	800e2e0 <HAL_RCC_OscConfig+0x4a4>
 800e2f2:	e634      	b.n	800df5e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e2f4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e2f6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e2f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e2fa:	f43f ae18 	beq.w	800df2e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2fe:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e302:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800e304:	4281      	cmp	r1, r0
 800e306:	f47f ae12 	bne.w	800df2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e30a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e30e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e310:	428a      	cmp	r2, r1
 800e312:	f47f ae0c 	bne.w	800df2e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e316:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800e318:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800e31c:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e31e:	4291      	cmp	r1, r2
 800e320:	f47f ae05 	bne.w	800df2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e324:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e326:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800e32a:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e32c:	4291      	cmp	r1, r2
 800e32e:	f47f adfe 	bne.w	800df2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e332:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e334:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800e338:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e33a:	4291      	cmp	r1, r2
 800e33c:	f47f adf7 	bne.w	800df2e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e340:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800e342:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800e346:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e348:	4293      	cmp	r3, r2
 800e34a:	f47f adf0 	bne.w	800df2e <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e34e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e350:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e352:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e356:	429a      	cmp	r2, r3
 800e358:	f43f add4 	beq.w	800df04 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800e35c:	4d0c      	ldr	r5, [pc, #48]	@ (800e390 <HAL_RCC_OscConfig+0x554>)
 800e35e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e360:	f023 0301 	bic.w	r3, r3, #1
 800e364:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800e366:	f7fc fbb9 	bl	800aadc <HAL_GetTick>
 800e36a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e36c:	f7fc fbb6 	bl	800aadc <HAL_GetTick>
 800e370:	42b0      	cmp	r0, r6
 800e372:	d0fb      	beq.n	800e36c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e374:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e376:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800e378:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e37c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e380:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e384:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800e386:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e388:	f043 0301 	orr.w	r3, r3, #1
 800e38c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800e38e:	e5b9      	b.n	800df04 <HAL_RCC_OscConfig+0xc8>
 800e390:	58024400 	.word	0x58024400

0800e394 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800e394:	b570      	push	{r4, r5, r6, lr}
 800e396:	4c23      	ldr	r4, [pc, #140]	@ (800e424 <HAL_RCC_MCOConfig+0x90>)
 800e398:	b088      	sub	sp, #32
 800e39a:	460e      	mov	r6, r1
 800e39c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800e39e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800e3a2:	b9f8      	cbnz	r0, 800e3e4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800e3a4:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3a8:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800e3ac:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800e3ae:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800e3b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800e3b6:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800e3b8:	f003 0301 	and.w	r3, r3, #1
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3c0:	2302      	movs	r3, #2
 800e3c2:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3c6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3c8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800e3cc:	4816      	ldr	r0, [pc, #88]	@ (800e428 <HAL_RCC_MCOConfig+0x94>)
 800e3ce:	f7fd fa0b 	bl	800b7e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800e3d2:	6923      	ldr	r3, [r4, #16]
 800e3d4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800e3d8:	ea43 0106 	orr.w	r1, r3, r6
 800e3dc:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800e3de:	6121      	str	r1, [r4, #16]
  }
}
 800e3e0:	b008      	add	sp, #32
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800e3e4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ec:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800e3ee:	480f      	ldr	r0, [pc, #60]	@ (800e42c <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800e3f0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800e3f4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800e3f8:	f003 0304 	and.w	r3, r3, #4
 800e3fc:	9302      	str	r3, [sp, #8]
 800e3fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e400:	2302      	movs	r3, #2
 800e402:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e406:	2300      	movs	r3, #0
 800e408:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800e40c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800e40e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800e410:	f7fd f9ea 	bl	800b7e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800e414:	6923      	ldr	r3, [r4, #16]
 800e416:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800e41a:	ea43 0106 	orr.w	r1, r3, r6
 800e41e:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800e422:	e7dc      	b.n	800e3de <HAL_RCC_MCOConfig+0x4a>
 800e424:	58024400 	.word	0x58024400
 800e428:	58020000 	.word	0x58020000
 800e42c:	58020800 	.word	0x58020800

0800e430 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e430:	4b49      	ldr	r3, [pc, #292]	@ (800e558 <HAL_RCC_GetSysClockFreq+0x128>)
 800e432:	691a      	ldr	r2, [r3, #16]
 800e434:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800e438:	2a10      	cmp	r2, #16
{
 800e43a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e43c:	f000 8088 	beq.w	800e550 <HAL_RCC_GetSysClockFreq+0x120>
 800e440:	2a18      	cmp	r2, #24
 800e442:	d00c      	beq.n	800e45e <HAL_RCC_GetSysClockFreq+0x2e>
 800e444:	2a00      	cmp	r2, #0
 800e446:	f040 8085 	bne.w	800e554 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	4843      	ldr	r0, [pc, #268]	@ (800e55c <HAL_RCC_GetSysClockFreq+0x12c>)
 800e44e:	f012 0f20 	tst.w	r2, #32
 800e452:	d003      	beq.n	800e45c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e45a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800e45c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e45e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e460:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e462:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800e464:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e468:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e46c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800e46e:	d0f5      	beq.n	800e45c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e470:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e474:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e478:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e47c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e480:	4362      	muls	r2, r4
 800e482:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800e486:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e48c:	ee06 2a90 	vmov	s13, r2
 800e490:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800e494:	d04e      	beq.n	800e534 <HAL_RCC_GetSysClockFreq+0x104>
 800e496:	2902      	cmp	r1, #2
 800e498:	d03e      	beq.n	800e518 <HAL_RCC_GetSysClockFreq+0xe8>
 800e49a:	2900      	cmp	r1, #0
 800e49c:	d14a      	bne.n	800e534 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	0692      	lsls	r2, r2, #26
 800e4a2:	d527      	bpl.n	800e4f4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4a4:	6819      	ldr	r1, [r3, #0]
 800e4a6:	4a2d      	ldr	r2, [pc, #180]	@ (800e55c <HAL_RCC_GetSysClockFreq+0x12c>)
 800e4a8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4ae:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4b4:	ee07 2a90 	vmov	s15, r2
 800e4b8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800e4bc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800e4c0:	ee07 3a10 	vmov	s14, r3
 800e4c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e4c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e4cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e4d0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e4d4:	4b20      	ldr	r3, [pc, #128]	@ (800e558 <HAL_RCC_GetSysClockFreq+0x128>)
 800e4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800e4dc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e4de:	ee07 3a10 	vmov	s14, r3
 800e4e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e4e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e4ea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e4ee:	ee17 0a90 	vmov	r0, s15
 800e4f2:	e7b3      	b.n	800e45c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4fa:	ee07 3a90 	vmov	s15, r3
 800e4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e506:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e50a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e560 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e50e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800e512:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800e516:	e7dd      	b.n	800e4d4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e51e:	ee07 3a90 	vmov	s15, r3
 800e522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e52a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e52e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800e564 <HAL_RCC_GetSysClockFreq+0x134>
 800e532:	e7ec      	b.n	800e50e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e53a:	ee07 3a90 	vmov	s15, r3
 800e53e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e546:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e54a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800e568 <HAL_RCC_GetSysClockFreq+0x138>
 800e54e:	e7de      	b.n	800e50e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e550:	4806      	ldr	r0, [pc, #24]	@ (800e56c <HAL_RCC_GetSysClockFreq+0x13c>)
 800e552:	e783      	b.n	800e45c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800e554:	4806      	ldr	r0, [pc, #24]	@ (800e570 <HAL_RCC_GetSysClockFreq+0x140>)
 800e556:	e781      	b.n	800e45c <HAL_RCC_GetSysClockFreq+0x2c>
 800e558:	58024400 	.word	0x58024400
 800e55c:	03d09000 	.word	0x03d09000
 800e560:	4c742400 	.word	0x4c742400
 800e564:	4bbebc20 	.word	0x4bbebc20
 800e568:	4a742400 	.word	0x4a742400
 800e56c:	017d7840 	.word	0x017d7840
 800e570:	003d0900 	.word	0x003d0900

0800e574 <HAL_RCC_ClockConfig>:
{
 800e574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e578:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800e57a:	4604      	mov	r4, r0
 800e57c:	b910      	cbnz	r0, 800e584 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800e57e:	2001      	movs	r0, #1
}
 800e580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e584:	4a88      	ldr	r2, [pc, #544]	@ (800e7a8 <HAL_RCC_ClockConfig+0x234>)
 800e586:	6813      	ldr	r3, [r2, #0]
 800e588:	f003 030f 	and.w	r3, r3, #15
 800e58c:	428b      	cmp	r3, r1
 800e58e:	f0c0 8093 	bcc.w	800e6b8 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e592:	6823      	ldr	r3, [r4, #0]
 800e594:	075f      	lsls	r7, r3, #29
 800e596:	f100 809b 	bmi.w	800e6d0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e59a:	071e      	lsls	r6, r3, #28
 800e59c:	d50b      	bpl.n	800e5b6 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e59e:	4983      	ldr	r1, [pc, #524]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e5a0:	6960      	ldr	r0, [r4, #20]
 800e5a2:	69ca      	ldr	r2, [r1, #28]
 800e5a4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e5a8:	4290      	cmp	r0, r2
 800e5aa:	d904      	bls.n	800e5b6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e5ac:	69ca      	ldr	r2, [r1, #28]
 800e5ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e5b2:	4302      	orrs	r2, r0
 800e5b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e5b6:	06d8      	lsls	r0, r3, #27
 800e5b8:	d50b      	bpl.n	800e5d2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e5ba:	497c      	ldr	r1, [pc, #496]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e5bc:	69a0      	ldr	r0, [r4, #24]
 800e5be:	69ca      	ldr	r2, [r1, #28]
 800e5c0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e5c4:	4290      	cmp	r0, r2
 800e5c6:	d904      	bls.n	800e5d2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e5c8:	69ca      	ldr	r2, [r1, #28]
 800e5ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e5ce:	4302      	orrs	r2, r0
 800e5d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e5d2:	0699      	lsls	r1, r3, #26
 800e5d4:	d50b      	bpl.n	800e5ee <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e5d6:	4975      	ldr	r1, [pc, #468]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e5d8:	69e0      	ldr	r0, [r4, #28]
 800e5da:	6a0a      	ldr	r2, [r1, #32]
 800e5dc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e5e0:	4290      	cmp	r0, r2
 800e5e2:	d904      	bls.n	800e5ee <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e5e4:	6a0a      	ldr	r2, [r1, #32]
 800e5e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e5ea:	4302      	orrs	r2, r0
 800e5ec:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e5ee:	079a      	lsls	r2, r3, #30
 800e5f0:	d50b      	bpl.n	800e60a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e5f2:	496e      	ldr	r1, [pc, #440]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e5f4:	68e0      	ldr	r0, [r4, #12]
 800e5f6:	698a      	ldr	r2, [r1, #24]
 800e5f8:	f002 020f 	and.w	r2, r2, #15
 800e5fc:	4290      	cmp	r0, r2
 800e5fe:	d904      	bls.n	800e60a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e600:	698a      	ldr	r2, [r1, #24]
 800e602:	f022 020f 	bic.w	r2, r2, #15
 800e606:	4302      	orrs	r2, r0
 800e608:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e60a:	07df      	lsls	r7, r3, #31
 800e60c:	d46e      	bmi.n	800e6ec <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	079e      	lsls	r6, r3, #30
 800e612:	f100 80a1 	bmi.w	800e758 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e616:	4964      	ldr	r1, [pc, #400]	@ (800e7a8 <HAL_RCC_ClockConfig+0x234>)
 800e618:	680a      	ldr	r2, [r1, #0]
 800e61a:	f002 020f 	and.w	r2, r2, #15
 800e61e:	42aa      	cmp	r2, r5
 800e620:	f200 80a8 	bhi.w	800e774 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e624:	0758      	lsls	r0, r3, #29
 800e626:	f100 80b1 	bmi.w	800e78c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e62a:	0719      	lsls	r1, r3, #28
 800e62c:	d50b      	bpl.n	800e646 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e62e:	495f      	ldr	r1, [pc, #380]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e630:	6960      	ldr	r0, [r4, #20]
 800e632:	69ca      	ldr	r2, [r1, #28]
 800e634:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e638:	4290      	cmp	r0, r2
 800e63a:	d204      	bcs.n	800e646 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e63c:	69ca      	ldr	r2, [r1, #28]
 800e63e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e642:	4302      	orrs	r2, r0
 800e644:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e646:	06da      	lsls	r2, r3, #27
 800e648:	d50b      	bpl.n	800e662 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e64a:	4958      	ldr	r1, [pc, #352]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e64c:	69a0      	ldr	r0, [r4, #24]
 800e64e:	69ca      	ldr	r2, [r1, #28]
 800e650:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e654:	4290      	cmp	r0, r2
 800e656:	d204      	bcs.n	800e662 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e658:	69ca      	ldr	r2, [r1, #28]
 800e65a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e65e:	4302      	orrs	r2, r0
 800e660:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e662:	069b      	lsls	r3, r3, #26
 800e664:	d50b      	bpl.n	800e67e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e666:	4a51      	ldr	r2, [pc, #324]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e668:	69e1      	ldr	r1, [r4, #28]
 800e66a:	6a13      	ldr	r3, [r2, #32]
 800e66c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e670:	4299      	cmp	r1, r3
 800e672:	d204      	bcs.n	800e67e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e674:	6a13      	ldr	r3, [r2, #32]
 800e676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e67a:	430b      	orrs	r3, r1
 800e67c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e67e:	f7ff fed7 	bl	800e430 <HAL_RCC_GetSysClockFreq>
 800e682:	494a      	ldr	r1, [pc, #296]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e684:	4a4a      	ldr	r2, [pc, #296]	@ (800e7b0 <HAL_RCC_ClockConfig+0x23c>)
 800e686:	698b      	ldr	r3, [r1, #24]
 800e688:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800e68c:	5cd3      	ldrb	r3, [r2, r3]
 800e68e:	f003 031f 	and.w	r3, r3, #31
 800e692:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e694:	698b      	ldr	r3, [r1, #24]
 800e696:	f003 030f 	and.w	r3, r3, #15
 800e69a:	5cd3      	ldrb	r3, [r2, r3]
 800e69c:	4a45      	ldr	r2, [pc, #276]	@ (800e7b4 <HAL_RCC_ClockConfig+0x240>)
 800e69e:	f003 031f 	and.w	r3, r3, #31
 800e6a2:	fa20 f303 	lsr.w	r3, r0, r3
 800e6a6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800e6a8:	4b43      	ldr	r3, [pc, #268]	@ (800e7b8 <HAL_RCC_ClockConfig+0x244>)
 800e6aa:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800e6ac:	4b43      	ldr	r3, [pc, #268]	@ (800e7bc <HAL_RCC_ClockConfig+0x248>)
}
 800e6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800e6b2:	6818      	ldr	r0, [r3, #0]
 800e6b4:	f7f3 b96c 	b.w	8001990 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6b8:	6813      	ldr	r3, [r2, #0]
 800e6ba:	f023 030f 	bic.w	r3, r3, #15
 800e6be:	430b      	orrs	r3, r1
 800e6c0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6c2:	6813      	ldr	r3, [r2, #0]
 800e6c4:	f003 030f 	and.w	r3, r3, #15
 800e6c8:	428b      	cmp	r3, r1
 800e6ca:	f47f af58 	bne.w	800e57e <HAL_RCC_ClockConfig+0xa>
 800e6ce:	e760      	b.n	800e592 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e6d0:	4936      	ldr	r1, [pc, #216]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e6d2:	6920      	ldr	r0, [r4, #16]
 800e6d4:	698a      	ldr	r2, [r1, #24]
 800e6d6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e6da:	4290      	cmp	r0, r2
 800e6dc:	f67f af5d 	bls.w	800e59a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e6e0:	698a      	ldr	r2, [r1, #24]
 800e6e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e6e6:	4302      	orrs	r2, r0
 800e6e8:	618a      	str	r2, [r1, #24]
 800e6ea:	e756      	b.n	800e59a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e6ec:	4b2f      	ldr	r3, [pc, #188]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e6ee:	68a1      	ldr	r1, [r4, #8]
 800e6f0:	699a      	ldr	r2, [r3, #24]
 800e6f2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800e6f6:	430a      	orrs	r2, r1
 800e6f8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e6fa:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e6fc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e6fe:	2902      	cmp	r1, #2
 800e700:	d11d      	bne.n	800e73e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e702:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e706:	f43f af3a 	beq.w	800e57e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e70a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e70c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e710:	4f26      	ldr	r7, [pc, #152]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e712:	f022 0207 	bic.w	r2, r2, #7
 800e716:	430a      	orrs	r2, r1
 800e718:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800e71a:	f7fc f9df 	bl	800aadc <HAL_GetTick>
 800e71e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	6862      	ldr	r2, [r4, #4]
 800e724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e728:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800e72c:	f43f af6f 	beq.w	800e60e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e730:	f7fc f9d4 	bl	800aadc <HAL_GetTick>
 800e734:	1b80      	subs	r0, r0, r6
 800e736:	4540      	cmp	r0, r8
 800e738:	d9f2      	bls.n	800e720 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800e73a:	2003      	movs	r0, #3
 800e73c:	e720      	b.n	800e580 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e73e:	2903      	cmp	r1, #3
 800e740:	d102      	bne.n	800e748 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e742:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800e746:	e7de      	b.n	800e706 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e748:	2901      	cmp	r1, #1
 800e74a:	d102      	bne.n	800e752 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e74c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800e750:	e7d9      	b.n	800e706 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e752:	f012 0f04 	tst.w	r2, #4
 800e756:	e7d6      	b.n	800e706 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e758:	4914      	ldr	r1, [pc, #80]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e75a:	68e0      	ldr	r0, [r4, #12]
 800e75c:	698a      	ldr	r2, [r1, #24]
 800e75e:	f002 020f 	and.w	r2, r2, #15
 800e762:	4290      	cmp	r0, r2
 800e764:	f4bf af57 	bcs.w	800e616 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e768:	698a      	ldr	r2, [r1, #24]
 800e76a:	f022 020f 	bic.w	r2, r2, #15
 800e76e:	4302      	orrs	r2, r0
 800e770:	618a      	str	r2, [r1, #24]
 800e772:	e750      	b.n	800e616 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e774:	680a      	ldr	r2, [r1, #0]
 800e776:	f022 020f 	bic.w	r2, r2, #15
 800e77a:	432a      	orrs	r2, r5
 800e77c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e77e:	680a      	ldr	r2, [r1, #0]
 800e780:	f002 020f 	and.w	r2, r2, #15
 800e784:	42aa      	cmp	r2, r5
 800e786:	f47f aefa 	bne.w	800e57e <HAL_RCC_ClockConfig+0xa>
 800e78a:	e74b      	b.n	800e624 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e78c:	4907      	ldr	r1, [pc, #28]	@ (800e7ac <HAL_RCC_ClockConfig+0x238>)
 800e78e:	6920      	ldr	r0, [r4, #16]
 800e790:	698a      	ldr	r2, [r1, #24]
 800e792:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e796:	4290      	cmp	r0, r2
 800e798:	f4bf af47 	bcs.w	800e62a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e79c:	698a      	ldr	r2, [r1, #24]
 800e79e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800e7a2:	4302      	orrs	r2, r0
 800e7a4:	618a      	str	r2, [r1, #24]
 800e7a6:	e740      	b.n	800e62a <HAL_RCC_ClockConfig+0xb6>
 800e7a8:	52002000 	.word	0x52002000
 800e7ac:	58024400 	.word	0x58024400
 800e7b0:	0802d758 	.word	0x0802d758
 800e7b4:	24000068 	.word	0x24000068
 800e7b8:	2400006c 	.word	0x2400006c
 800e7bc:	24000074 	.word	0x24000074

0800e7c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e7c0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e7c2:	f7ff fe35 	bl	800e430 <HAL_RCC_GetSysClockFreq>
 800e7c6:	4a0b      	ldr	r2, [pc, #44]	@ (800e7f4 <HAL_RCC_GetHCLKFreq+0x34>)
 800e7c8:	490b      	ldr	r1, [pc, #44]	@ (800e7f8 <HAL_RCC_GetHCLKFreq+0x38>)
 800e7ca:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e7cc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e7ce:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e7d2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e7d6:	5ccb      	ldrb	r3, [r1, r3]
 800e7d8:	f003 031f 	and.w	r3, r3, #31
 800e7dc:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e7e0:	5c88      	ldrb	r0, [r1, r2]
 800e7e2:	4a06      	ldr	r2, [pc, #24]	@ (800e7fc <HAL_RCC_GetHCLKFreq+0x3c>)
 800e7e4:	f000 001f 	and.w	r0, r0, #31
 800e7e8:	fa23 f000 	lsr.w	r0, r3, r0
 800e7ec:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e7ee:	4a04      	ldr	r2, [pc, #16]	@ (800e800 <HAL_RCC_GetHCLKFreq+0x40>)
 800e7f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800e7f2:	bd08      	pop	{r3, pc}
 800e7f4:	58024400 	.word	0x58024400
 800e7f8:	0802d758 	.word	0x0802d758
 800e7fc:	24000068 	.word	0x24000068
 800e800:	2400006c 	.word	0x2400006c

0800e804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e804:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e806:	f7ff ffdb 	bl	800e7c0 <HAL_RCC_GetHCLKFreq>
 800e80a:	4b05      	ldr	r3, [pc, #20]	@ (800e820 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e80c:	4a05      	ldr	r2, [pc, #20]	@ (800e824 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e80e:	69db      	ldr	r3, [r3, #28]
 800e810:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e814:	5cd3      	ldrb	r3, [r2, r3]
 800e816:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e81a:	40d8      	lsrs	r0, r3
 800e81c:	bd08      	pop	{r3, pc}
 800e81e:	bf00      	nop
 800e820:	58024400 	.word	0x58024400
 800e824:	0802d758 	.word	0x0802d758

0800e828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e828:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e82a:	f7ff ffc9 	bl	800e7c0 <HAL_RCC_GetHCLKFreq>
 800e82e:	4b05      	ldr	r3, [pc, #20]	@ (800e844 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800e830:	4a05      	ldr	r2, [pc, #20]	@ (800e848 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800e838:	5cd3      	ldrb	r3, [r2, r3]
 800e83a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e83e:	40d8      	lsrs	r0, r3
 800e840:	bd08      	pop	{r3, pc}
 800e842:	bf00      	nop
 800e844:	58024400 	.word	0x58024400
 800e848:	0802d758 	.word	0x0802d758

0800e84c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e84c:	233f      	movs	r3, #63	@ 0x3f
 800e84e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e850:	4b11      	ldr	r3, [pc, #68]	@ (800e898 <HAL_RCC_GetClockConfig+0x4c>)
 800e852:	691a      	ldr	r2, [r3, #16]
 800e854:	f002 0207 	and.w	r2, r2, #7
 800e858:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e85a:	699a      	ldr	r2, [r3, #24]
 800e85c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800e860:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e862:	699a      	ldr	r2, [r3, #24]
 800e864:	f002 020f 	and.w	r2, r2, #15
 800e868:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e86a:	699a      	ldr	r2, [r3, #24]
 800e86c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e870:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e872:	69da      	ldr	r2, [r3, #28]
 800e874:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800e878:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e87a:	69da      	ldr	r2, [r3, #28]
 800e87c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e880:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e882:	6a1b      	ldr	r3, [r3, #32]
 800e884:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e888:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e88a:	4b04      	ldr	r3, [pc, #16]	@ (800e89c <HAL_RCC_GetClockConfig+0x50>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f003 030f 	and.w	r3, r3, #15
 800e892:	600b      	str	r3, [r1, #0]
}
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	58024400 	.word	0x58024400
 800e89c:	52002000 	.word	0x52002000

0800e8a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e8a2:	4c3a      	ldr	r4, [pc, #232]	@ (800e98c <RCCEx_PLL2_Config+0xec>)
{
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e8a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e8aa:	f003 0303 	and.w	r3, r3, #3
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d069      	beq.n	800e986 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e8b2:	6823      	ldr	r3, [r4, #0]
 800e8b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e8b8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8ba:	f7fc f90f 	bl	800aadc <HAL_GetTick>
 800e8be:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	011a      	lsls	r2, r3, #4
 800e8c4:	d44b      	bmi.n	800e95e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e8c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e8c8:	6832      	ldr	r2, [r6, #0]
 800e8ca:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e8ce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800e8d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8d4:	68b3      	ldr	r3, [r6, #8]
 800e8d6:	68f2      	ldr	r2, [r6, #12]
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	3a01      	subs	r2, #1
 800e8dc:	025b      	lsls	r3, r3, #9
 800e8de:	0412      	lsls	r2, r2, #16
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	6872      	ldr	r2, [r6, #4]
 800e8ea:	3a01      	subs	r2, #1
 800e8ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	6932      	ldr	r2, [r6, #16]
 800e8f4:	3a01      	subs	r2, #1
 800e8f6:	0612      	lsls	r2, r2, #24
 800e8f8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e900:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e902:	6972      	ldr	r2, [r6, #20]
 800e904:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e908:	4313      	orrs	r3, r2
 800e90a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e90c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e90e:	69b2      	ldr	r2, [r6, #24]
 800e910:	f023 0320 	bic.w	r3, r3, #32
 800e914:	4313      	orrs	r3, r2
 800e916:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e918:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e91a:	f023 0310 	bic.w	r3, r3, #16
 800e91e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e920:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e922:	69f2      	ldr	r2, [r6, #28]
 800e924:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e928:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e92c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800e930:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e932:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e934:	f043 0310 	orr.w	r3, r3, #16
 800e938:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e93a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800e93c:	b9b5      	cbnz	r5, 800e96c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e93e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e942:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e944:	4c11      	ldr	r4, [pc, #68]	@ (800e98c <RCCEx_PLL2_Config+0xec>)
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e94c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e94e:	f7fc f8c5 	bl	800aadc <HAL_GetTick>
 800e952:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	011b      	lsls	r3, r3, #4
 800e958:	d50f      	bpl.n	800e97a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800e95a:	2000      	movs	r0, #0
 800e95c:	e005      	b.n	800e96a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e95e:	f7fc f8bd 	bl	800aadc <HAL_GetTick>
 800e962:	1bc0      	subs	r0, r0, r7
 800e964:	2802      	cmp	r0, #2
 800e966:	d9ab      	bls.n	800e8c0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800e968:	2003      	movs	r0, #3
}
 800e96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800e96c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e96e:	bf0c      	ite	eq
 800e970:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e974:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800e978:	e7e3      	b.n	800e942 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e97a:	f7fc f8af 	bl	800aadc <HAL_GetTick>
 800e97e:	1b40      	subs	r0, r0, r5
 800e980:	2802      	cmp	r0, #2
 800e982:	d9e7      	bls.n	800e954 <RCCEx_PLL2_Config+0xb4>
 800e984:	e7f0      	b.n	800e968 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800e986:	2001      	movs	r0, #1
 800e988:	e7ef      	b.n	800e96a <RCCEx_PLL2_Config+0xca>
 800e98a:	bf00      	nop
 800e98c:	58024400 	.word	0x58024400

0800e990 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e992:	4c3a      	ldr	r4, [pc, #232]	@ (800ea7c <RCCEx_PLL3_Config+0xec>)
{
 800e994:	4606      	mov	r6, r0
 800e996:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e998:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e99a:	f003 0303 	and.w	r3, r3, #3
 800e99e:	2b03      	cmp	r3, #3
 800e9a0:	d069      	beq.n	800ea76 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e9a8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9aa:	f7fc f897 	bl	800aadc <HAL_GetTick>
 800e9ae:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e9b0:	6823      	ldr	r3, [r4, #0]
 800e9b2:	009a      	lsls	r2, r3, #2
 800e9b4:	d44b      	bmi.n	800ea4e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e9b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e9b8:	6832      	ldr	r2, [r6, #0]
 800e9ba:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800e9be:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800e9c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e9c4:	68b3      	ldr	r3, [r6, #8]
 800e9c6:	68f2      	ldr	r2, [r6, #12]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	3a01      	subs	r2, #1
 800e9cc:	025b      	lsls	r3, r3, #9
 800e9ce:	0412      	lsls	r2, r2, #16
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	6872      	ldr	r2, [r6, #4]
 800e9da:	3a01      	subs	r2, #1
 800e9dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	6932      	ldr	r2, [r6, #16]
 800e9e4:	3a01      	subs	r2, #1
 800e9e6:	0612      	lsls	r2, r2, #24
 800e9e8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e9f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e9f2:	6972      	ldr	r2, [r6, #20]
 800e9f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e9fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e9fe:	69b2      	ldr	r2, [r6, #24]
 800ea00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea04:	4313      	orrs	r3, r2
 800ea06:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ea08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ea0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea0e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ea10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ea12:	69f2      	ldr	r2, [r6, #28]
 800ea14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea18:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ea1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ea20:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ea22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ea24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea28:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ea2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ea2c:	b9b5      	cbnz	r5, 800ea5c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ea2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ea32:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ea34:	4c11      	ldr	r4, [pc, #68]	@ (800ea7c <RCCEx_PLL3_Config+0xec>)
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea3e:	f7fc f84d 	bl	800aadc <HAL_GetTick>
 800ea42:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	d50f      	bpl.n	800ea6a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	e005      	b.n	800ea5a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ea4e:	f7fc f845 	bl	800aadc <HAL_GetTick>
 800ea52:	1bc0      	subs	r0, r0, r7
 800ea54:	2802      	cmp	r0, #2
 800ea56:	d9ab      	bls.n	800e9b0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800ea58:	2003      	movs	r0, #3
}
 800ea5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ea5c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ea5e:	bf0c      	ite	eq
 800ea60:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ea64:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800ea68:	e7e3      	b.n	800ea32 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ea6a:	f7fc f837 	bl	800aadc <HAL_GetTick>
 800ea6e:	1b40      	subs	r0, r0, r5
 800ea70:	2802      	cmp	r0, #2
 800ea72:	d9e7      	bls.n	800ea44 <RCCEx_PLL3_Config+0xb4>
 800ea74:	e7f0      	b.n	800ea58 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800ea76:	2001      	movs	r0, #1
 800ea78:	e7ef      	b.n	800ea5a <RCCEx_PLL3_Config+0xca>
 800ea7a:	bf00      	nop
 800ea7c:	58024400 	.word	0x58024400

0800ea80 <HAL_RCCEx_PeriphCLKConfig>:
{
 800ea80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ea84:	6803      	ldr	r3, [r0, #0]
{
 800ea86:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ea88:	011c      	lsls	r4, r3, #4
 800ea8a:	d51e      	bpl.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ea8c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ea8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ea92:	d02a      	beq.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ea94:	d80f      	bhi.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800ea96:	b1d3      	cbz	r3, 800eace <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800ea98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea9c:	d01d      	beq.n	800eada <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800ea9e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	05d8      	lsls	r0, r3, #23
 800eaa4:	d54f      	bpl.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800eaa6:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800eaa8:	2b04      	cmp	r3, #4
 800eaaa:	d84b      	bhi.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800eaac:	e8df f003 	tbb	[pc, r3]
 800eab0:	27443d22 	.word	0x27443d22
 800eab4:	27          	.byte	0x27
 800eab5:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800eab6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eaba:	d1f0      	bne.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800eabc:	4a86      	ldr	r2, [pc, #536]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800eabe:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800eac0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800eac2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800eac6:	430b      	orrs	r3, r1
 800eac8:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eaca:	2600      	movs	r6, #0
 800eacc:	e7e8      	b.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eace:	4a82      	ldr	r2, [pc, #520]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ead0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ead2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ead6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ead8:	e7f0      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eada:	2102      	movs	r1, #2
 800eadc:	3008      	adds	r0, #8
 800eade:	f7ff fedf 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eae2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d1db      	bne.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800eae8:	e7e8      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eaea:	2102      	movs	r1, #2
 800eaec:	3028      	adds	r0, #40	@ 0x28
 800eaee:	f7ff ff4f 	bl	800e990 <RCCEx_PLL3_Config>
 800eaf2:	e7f6      	b.n	800eae2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eaf4:	4a78      	ldr	r2, [pc, #480]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800eaf6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800eaf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eafc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800eafe:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800eb00:	bb1c      	cbnz	r4, 800eb4a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800eb02:	4a75      	ldr	r2, [pc, #468]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800eb04:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800eb06:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800eb08:	f023 0307 	bic.w	r3, r3, #7
 800eb0c:	430b      	orrs	r3, r1
 800eb0e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	0599      	lsls	r1, r3, #22
 800eb14:	d528      	bpl.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800eb16:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800eb18:	2b80      	cmp	r3, #128	@ 0x80
 800eb1a:	d043      	beq.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800eb1c:	d817      	bhi.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800eb1e:	b3a3      	cbz	r3, 800eb8a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800eb20:	2b40      	cmp	r3, #64	@ 0x40
 800eb22:	d038      	beq.n	800eb96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800eb24:	2601      	movs	r6, #1
 800eb26:	4634      	mov	r4, r6
 800eb28:	e01e      	b.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	f105 0008 	add.w	r0, r5, #8
 800eb30:	f7ff feb6 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb34:	4604      	mov	r4, r0
        break;
 800eb36:	e7e3      	b.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb38:	2100      	movs	r1, #0
 800eb3a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800eb3e:	f7ff ff27 	bl	800e990 <RCCEx_PLL3_Config>
 800eb42:	e7f7      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800eb44:	2601      	movs	r6, #1
 800eb46:	4634      	mov	r4, r6
 800eb48:	e7e2      	b.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eb4a:	4626      	mov	r6, r4
 800eb4c:	e7e0      	b.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800eb4e:	2bc0      	cmp	r3, #192	@ 0xc0
 800eb50:	d002      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800eb52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb56:	d1e5      	bne.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800eb58:	bb54      	cbnz	r4, 800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800eb5a:	4a5f      	ldr	r2, [pc, #380]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800eb5c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800eb5e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800eb60:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800eb64:	430b      	orrs	r3, r1
 800eb66:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800eb68:	682b      	ldr	r3, [r5, #0]
 800eb6a:	055a      	lsls	r2, r3, #21
 800eb6c:	d531      	bpl.n	800ebd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800eb6e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800eb72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb76:	d049      	beq.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800eb78:	d81c      	bhi.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d039      	beq.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800eb7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb82:	d03c      	beq.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800eb84:	2601      	movs	r6, #1
 800eb86:	4634      	mov	r4, r6
 800eb88:	e023      	b.n	800ebd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb8a:	4a53      	ldr	r2, [pc, #332]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800eb8c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800eb8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb92:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800eb94:	e7e0      	b.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb96:	2100      	movs	r1, #0
 800eb98:	f105 0008 	add.w	r0, r5, #8
 800eb9c:	f7ff fe80 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eba0:	4604      	mov	r4, r0
        break;
 800eba2:	e7d9      	b.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eba4:	2100      	movs	r1, #0
 800eba6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ebaa:	f7ff fef1 	bl	800e990 <RCCEx_PLL3_Config>
 800ebae:	e7f7      	b.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800ebb0:	4626      	mov	r6, r4
 800ebb2:	e7d9      	b.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ebb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ebb8:	d002      	beq.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800ebba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ebbe:	d1e1      	bne.n	800eb84 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800ebc0:	bb54      	cbnz	r4, 800ec18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ebc2:	4a45      	ldr	r2, [pc, #276]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ebc4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800ebc8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ebca:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800ebce:	430b      	orrs	r3, r1
 800ebd0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ebd2:	682b      	ldr	r3, [r5, #0]
 800ebd4:	051b      	lsls	r3, r3, #20
 800ebd6:	d530      	bpl.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800ebd8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800ebdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ebe0:	d045      	beq.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ebe2:	d81b      	bhi.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800ebe4:	b3b3      	cbz	r3, 800ec54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800ebe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ebea:	d039      	beq.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800ebec:	2601      	movs	r6, #1
 800ebee:	4634      	mov	r4, r6
 800ebf0:	e023      	b.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebf2:	4a39      	ldr	r2, [pc, #228]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ebf4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ebf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ebfc:	e7e0      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ebfe:	2100      	movs	r1, #0
 800ec00:	f105 0008 	add.w	r0, r5, #8
 800ec04:	f7ff fe4c 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec08:	4604      	mov	r4, r0
        break;
 800ec0a:	e7d9      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ec12:	f7ff febd 	bl	800e990 <RCCEx_PLL3_Config>
 800ec16:	e7f7      	b.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800ec18:	4626      	mov	r6, r4
 800ec1a:	e7da      	b.n	800ebd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800ec1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ec20:	d002      	beq.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ec22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec26:	d1e1      	bne.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800ec28:	bb3c      	cbnz	r4, 800ec7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ec2a:	4a2b      	ldr	r2, [pc, #172]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ec2c:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800ec30:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ec32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800ec36:	430b      	orrs	r3, r1
 800ec38:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ec3a:	682b      	ldr	r3, [r5, #0]
 800ec3c:	019f      	lsls	r7, r3, #6
 800ec3e:	d528      	bpl.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800ec40:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ec42:	2b20      	cmp	r3, #32
 800ec44:	d03e      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ec46:	d81a      	bhi.n	800ec7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800ec48:	b1db      	cbz	r3, 800ec82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ec4a:	2b10      	cmp	r3, #16
 800ec4c:	d034      	beq.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800ec4e:	2601      	movs	r6, #1
 800ec50:	4634      	mov	r4, r6
 800ec52:	e01e      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec54:	4a20      	ldr	r2, [pc, #128]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ec56:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ec58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ec5e:	e7e3      	b.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec60:	2100      	movs	r1, #0
 800ec62:	f105 0008 	add.w	r0, r5, #8
 800ec66:	f7ff fe1b 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec6a:	4604      	mov	r4, r0
        break;
 800ec6c:	e7dc      	b.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec6e:	2100      	movs	r1, #0
 800ec70:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ec74:	f7ff fe8c 	bl	800e990 <RCCEx_PLL3_Config>
 800ec78:	e7f7      	b.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ec7a:	4626      	mov	r6, r4
 800ec7c:	e7dd      	b.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800ec7e:	2b30      	cmp	r3, #48	@ 0x30
 800ec80:	d1e5      	bne.n	800ec4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800ec82:	bb34      	cbnz	r4, 800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ec84:	4a14      	ldr	r2, [pc, #80]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ec86:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ec88:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ec8a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ec8e:	430b      	orrs	r3, r1
 800ec90:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ec92:	682b      	ldr	r3, [r5, #0]
 800ec94:	04d8      	lsls	r0, r3, #19
 800ec96:	d530      	bpl.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ec98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec9e:	f000 8097 	beq.w	800edd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800eca2:	d81b      	bhi.n	800ecdc <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f000 8086 	beq.w	800edb6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ecaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecae:	f000 8088 	beq.w	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ecb2:	2601      	movs	r6, #1
 800ecb4:	4634      	mov	r4, r6
 800ecb6:	e020      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecb8:	4a07      	ldr	r2, [pc, #28]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ecba:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ecbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ecc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ecc2:	e7de      	b.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ecc4:	2102      	movs	r1, #2
 800ecc6:	f105 0008 	add.w	r0, r5, #8
 800ecca:	f7ff fde9 	bl	800e8a0 <RCCEx_PLL2_Config>
 800ecce:	4604      	mov	r4, r0
        break;
 800ecd0:	e7d7      	b.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ecd2:	4626      	mov	r6, r4
 800ecd4:	e7dd      	b.n	800ec92 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ecd6:	bf00      	nop
 800ecd8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800ecdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ece0:	d002      	beq.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800ece2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ece6:	d1e4      	bne.n	800ecb2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800ece8:	2c00      	cmp	r4, #0
 800ecea:	d177      	bne.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ecec:	4a9e      	ldr	r2, [pc, #632]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ecee:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800ecf0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ecf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ecf6:	430b      	orrs	r3, r1
 800ecf8:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ecfa:	682b      	ldr	r3, [r5, #0]
 800ecfc:	0499      	lsls	r1, r3, #18
 800ecfe:	d50c      	bpl.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ed00:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800ed02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed06:	f000 8083 	beq.w	800ee10 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800ed0a:	d869      	bhi.n	800ede0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d06f      	beq.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800ed10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed14:	d075      	beq.n	800ee02 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ed16:	2601      	movs	r6, #1
 800ed18:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ed1a:	682b      	ldr	r3, [r5, #0]
 800ed1c:	045a      	lsls	r2, r3, #17
 800ed1e:	d50e      	bpl.n	800ed3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800ed20:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800ed24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed28:	f000 8093 	beq.w	800ee52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800ed2c:	d878      	bhi.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d07e      	beq.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800ed32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed36:	f000 8085 	beq.w	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800ed3a:	2601      	movs	r6, #1
 800ed3c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800ed3e:	682b      	ldr	r3, [r5, #0]
 800ed40:	015b      	lsls	r3, r3, #5
 800ed42:	d515      	bpl.n	800ed70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800ed44:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ed46:	b14b      	cbz	r3, 800ed5c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800ed48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed4c:	f040 8089 	bne.w	800ee62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ed50:	2101      	movs	r1, #1
 800ed52:	f105 0008 	add.w	r0, r5, #8
 800ed56:	f7ff fda3 	bl	800e8a0 <RCCEx_PLL2_Config>
 800ed5a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ed5c:	2c00      	cmp	r4, #0
 800ed5e:	f040 8083 	bne.w	800ee68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800ed62:	4a81      	ldr	r2, [pc, #516]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ed64:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800ed66:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ed68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed6c:	430b      	orrs	r3, r1
 800ed6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	041f      	lsls	r7, r3, #16
 800ed74:	d511      	bpl.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800ed76:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ed78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed7c:	d076      	beq.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ed7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed82:	d079      	beq.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d17e      	bne.n	800ee86 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800ed88:	2c00      	cmp	r4, #0
 800ed8a:	d17f      	bne.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ed8c:	4a76      	ldr	r2, [pc, #472]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ed8e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800ed90:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ed92:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800ed96:	430b      	orrs	r3, r1
 800ed98:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ed9a:	682b      	ldr	r3, [r5, #0]
 800ed9c:	01d8      	lsls	r0, r3, #7
 800ed9e:	f140 8085 	bpl.w	800eeac <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800eda2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	f200 80e5 	bhi.w	800ef74 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800edaa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800edae:	0076      	.short	0x0076
 800edb0:	00d50071 	.word	0x00d50071
 800edb4:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edb6:	4a6c      	ldr	r2, [pc, #432]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800edb8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800edba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800edc0:	e792      	b.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edc2:	2100      	movs	r1, #0
 800edc4:	f105 0008 	add.w	r0, r5, #8
 800edc8:	f7ff fd6a 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edcc:	4604      	mov	r4, r0
        break;
 800edce:	e78b      	b.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edd0:	2100      	movs	r1, #0
 800edd2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800edd6:	f7ff fddb 	bl	800e990 <RCCEx_PLL3_Config>
 800edda:	e7f7      	b.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800eddc:	4626      	mov	r6, r4
 800edde:	e78c      	b.n	800ecfa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ede0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ede4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800ede8:	d002      	beq.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800edea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800edee:	d192      	bne.n	800ed16 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800edf0:	b9a4      	cbnz	r4, 800ee1c <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800edf2:	4a5d      	ldr	r2, [pc, #372]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800edf4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800edf6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800edf8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800edfc:	430b      	orrs	r3, r1
 800edfe:	6513      	str	r3, [r2, #80]	@ 0x50
 800ee00:	e78b      	b.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee02:	2101      	movs	r1, #1
 800ee04:	f105 0008 	add.w	r0, r5, #8
 800ee08:	f7ff fd4a 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee0c:	4604      	mov	r4, r0
        break;
 800ee0e:	e7ef      	b.n	800edf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee10:	2101      	movs	r1, #1
 800ee12:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ee16:	f7ff fdbb 	bl	800e990 <RCCEx_PLL3_Config>
 800ee1a:	e7f7      	b.n	800ee0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800ee1c:	4626      	mov	r6, r4
 800ee1e:	e77c      	b.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800ee20:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ee24:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800ee28:	d002      	beq.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800ee2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ee2e:	d184      	bne.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800ee30:	b9ac      	cbnz	r4, 800ee5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ee32:	4a4d      	ldr	r2, [pc, #308]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ee34:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800ee38:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ee3a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800ee3e:	430b      	orrs	r3, r1
 800ee40:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee42:	e77c      	b.n	800ed3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee44:	2101      	movs	r1, #1
 800ee46:	f105 0008 	add.w	r0, r5, #8
 800ee4a:	f7ff fd29 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee4e:	4604      	mov	r4, r0
        break;
 800ee50:	e7ee      	b.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee52:	2101      	movs	r1, #1
 800ee54:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ee58:	f7ff fd9a 	bl	800e990 <RCCEx_PLL3_Config>
 800ee5c:	e7f7      	b.n	800ee4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ee5e:	4626      	mov	r6, r4
 800ee60:	e76d      	b.n	800ed3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800ee62:	2601      	movs	r6, #1
 800ee64:	4634      	mov	r4, r6
 800ee66:	e783      	b.n	800ed70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800ee68:	4626      	mov	r6, r4
 800ee6a:	e781      	b.n	800ed70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee6c:	4a3e      	ldr	r2, [pc, #248]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ee6e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ee70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ee76:	e787      	b.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee78:	2101      	movs	r1, #1
 800ee7a:	f105 0008 	add.w	r0, r5, #8
 800ee7e:	f7ff fd0f 	bl	800e8a0 <RCCEx_PLL2_Config>
 800ee82:	4604      	mov	r4, r0
        break;
 800ee84:	e780      	b.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800ee86:	2601      	movs	r6, #1
 800ee88:	4634      	mov	r4, r6
 800ee8a:	e786      	b.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800ee8c:	4626      	mov	r6, r4
 800ee8e:	e784      	b.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee90:	4a35      	ldr	r2, [pc, #212]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ee92:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ee94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ee98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ee9a:	2c00      	cmp	r4, #0
 800ee9c:	d16d      	bne.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ee9e:	4a32      	ldr	r2, [pc, #200]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800eea0:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800eea2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800eea4:	f023 0303 	bic.w	r3, r3, #3
 800eea8:	430b      	orrs	r3, r1
 800eeaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800eeac:	682b      	ldr	r3, [r5, #0]
 800eeae:	0259      	lsls	r1, r3, #9
 800eeb0:	d539      	bpl.n	800ef26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800eeb2:	4f2e      	ldr	r7, [pc, #184]	@ (800ef6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eeba:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800eebc:	f7fb fe0e 	bl	800aadc <HAL_GetTick>
 800eec0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	05da      	lsls	r2, r3, #23
 800eec6:	d55a      	bpl.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800eec8:	2c00      	cmp	r4, #0
 800eeca:	d176      	bne.n	800efba <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800eecc:	4b26      	ldr	r3, [pc, #152]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800eece:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800eed2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800eed4:	4042      	eors	r2, r0
 800eed6:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800eeda:	d00b      	beq.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eedc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800eede:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800eee0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800eee4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800eee8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800eeea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800eeec:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800eef0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800eef2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800eef4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800eef8:	d04a      	beq.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eefa:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800eefe:	491a      	ldr	r1, [pc, #104]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ef00:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800ef04:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800ef08:	d153      	bne.n	800efb2 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800ef0a:	6908      	ldr	r0, [r1, #16]
 800ef0c:	4a18      	ldr	r2, [pc, #96]	@ (800ef70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800ef0e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800ef12:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ef16:	4302      	orrs	r2, r0
 800ef18:	610a      	str	r2, [r1, #16]
 800ef1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef1e:	4a12      	ldr	r2, [pc, #72]	@ (800ef68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ef20:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800ef22:	430b      	orrs	r3, r1
 800ef24:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ef26:	682b      	ldr	r3, [r5, #0]
 800ef28:	07d8      	lsls	r0, r3, #31
 800ef2a:	d50a      	bpl.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800ef2c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800ef30:	2b10      	cmp	r3, #16
 800ef32:	d05b      	beq.n	800efec <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800ef34:	d843      	bhi.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d047      	beq.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800ef3a:	2b08      	cmp	r3, #8
 800ef3c:	d04f      	beq.n	800efde <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800ef3e:	2601      	movs	r6, #1
 800ef40:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ef42:	682b      	ldr	r3, [r5, #0]
 800ef44:	0799      	lsls	r1, r3, #30
 800ef46:	d567      	bpl.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ef48:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800ef4a:	2b05      	cmp	r3, #5
 800ef4c:	d87a      	bhi.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800ef4e:	e8df f003 	tbb	[pc, r3]
 800ef52:	555b      	.short	0x555b
 800ef54:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef58:	2102      	movs	r1, #2
 800ef5a:	f105 0008 	add.w	r0, r5, #8
 800ef5e:	f7ff fc9f 	bl	800e8a0 <RCCEx_PLL2_Config>
 800ef62:	4604      	mov	r4, r0
        break;
 800ef64:	e799      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ef66:	bf00      	nop
 800ef68:	58024400 	.word	0x58024400
 800ef6c:	58024800 	.word	0x58024800
 800ef70:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800ef74:	2601      	movs	r6, #1
 800ef76:	4634      	mov	r4, r6
 800ef78:	e798      	b.n	800eeac <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800ef7a:	4626      	mov	r6, r4
 800ef7c:	e796      	b.n	800eeac <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ef7e:	f7fb fdad 	bl	800aadc <HAL_GetTick>
 800ef82:	eba0 0008 	sub.w	r0, r0, r8
 800ef86:	2864      	cmp	r0, #100	@ 0x64
 800ef88:	d99b      	bls.n	800eec2 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800ef8a:	2603      	movs	r6, #3
 800ef8c:	4634      	mov	r4, r6
 800ef8e:	e7ca      	b.n	800ef26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800ef90:	f7fb fda4 	bl	800aadc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef94:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800f050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800ef98:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef9a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef9e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800efa2:	079b      	lsls	r3, r3, #30
 800efa4:	d4a9      	bmi.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800efa6:	f7fb fd99 	bl	800aadc <HAL_GetTick>
 800efaa:	1bc0      	subs	r0, r0, r7
 800efac:	4548      	cmp	r0, r9
 800efae:	d9f6      	bls.n	800ef9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800efb0:	e7eb      	b.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800efb2:	690a      	ldr	r2, [r1, #16]
 800efb4:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800efb8:	e7ae      	b.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800efba:	4626      	mov	r6, r4
 800efbc:	e7b3      	b.n	800ef26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800efbe:	f023 0208 	bic.w	r2, r3, #8
 800efc2:	2a20      	cmp	r2, #32
 800efc4:	d001      	beq.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800efc6:	2b18      	cmp	r3, #24
 800efc8:	d1b9      	bne.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800efca:	b9ac      	cbnz	r4, 800eff8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800efcc:	4a20      	ldr	r2, [pc, #128]	@ (800f050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800efce:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800efd2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800efd4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800efd8:	430b      	orrs	r3, r1
 800efda:	6553      	str	r3, [r2, #84]	@ 0x54
 800efdc:	e7b1      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800efde:	2101      	movs	r1, #1
 800efe0:	f105 0008 	add.w	r0, r5, #8
 800efe4:	f7ff fc5c 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800efe8:	4604      	mov	r4, r0
        break;
 800efea:	e7ee      	b.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800efec:	2101      	movs	r1, #1
 800efee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800eff2:	f7ff fccd 	bl	800e990 <RCCEx_PLL3_Config>
 800eff6:	e7f7      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800eff8:	4626      	mov	r6, r4
 800effa:	e7a2      	b.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800effc:	2101      	movs	r1, #1
 800effe:	f105 0008 	add.w	r0, r5, #8
 800f002:	f7ff fc4d 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f006:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f008:	b9fc      	cbnz	r4, 800f04a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f00a:	4a11      	ldr	r2, [pc, #68]	@ (800f050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800f00c:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800f00e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f010:	f023 0307 	bic.w	r3, r3, #7
 800f014:	430b      	orrs	r3, r1
 800f016:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f018:	682b      	ldr	r3, [r5, #0]
 800f01a:	075a      	lsls	r2, r3, #29
 800f01c:	d52b      	bpl.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f01e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800f022:	2b05      	cmp	r3, #5
 800f024:	f200 816e 	bhi.w	800f304 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800f028:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f02c:	0014001a 	.word	0x0014001a
 800f030:	001a0166 	.word	0x001a0166
 800f034:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f038:	2101      	movs	r1, #1
 800f03a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f03e:	f7ff fca7 	bl	800e990 <RCCEx_PLL3_Config>
 800f042:	e7e0      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f044:	2601      	movs	r6, #1
 800f046:	4634      	mov	r4, r6
 800f048:	e7e6      	b.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f04a:	4626      	mov	r6, r4
 800f04c:	e7e4      	b.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f04e:	bf00      	nop
 800f050:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f054:	2101      	movs	r1, #1
 800f056:	f105 0008 	add.w	r0, r5, #8
 800f05a:	f7ff fc21 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f05e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f060:	2c00      	cmp	r4, #0
 800f062:	f040 8152 	bne.w	800f30a <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f066:	4aaa      	ldr	r2, [pc, #680]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f068:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800f06c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f06e:	f023 0307 	bic.w	r3, r3, #7
 800f072:	430b      	orrs	r3, r1
 800f074:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f076:	682b      	ldr	r3, [r5, #0]
 800f078:	069b      	lsls	r3, r3, #26
 800f07a:	d510      	bpl.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f07c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800f080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f084:	f000 8160 	beq.w	800f348 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800f088:	f200 8144 	bhi.w	800f314 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f000 814a 	beq.w	800f326 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800f092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f096:	f000 8150 	beq.w	800f33a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800f09a:	2601      	movs	r6, #1
 800f09c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	065f      	lsls	r7, r3, #25
 800f0a2:	d510      	bpl.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f0a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800f0a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0ac:	f000 816e 	beq.w	800f38c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800f0b0:	f200 8152 	bhi.w	800f358 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 8158 	beq.w	800f36a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800f0ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0be:	f000 815e 	beq.w	800f37e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800f0c2:	2601      	movs	r6, #1
 800f0c4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f0c6:	682b      	ldr	r3, [r5, #0]
 800f0c8:	0618      	lsls	r0, r3, #24
 800f0ca:	d510      	bpl.n	800f0ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f0cc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800f0d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0d4:	f000 817c 	beq.w	800f3d0 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800f0d8:	f200 8160 	bhi.w	800f39c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f000 8166 	beq.w	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800f0e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0e6:	f000 816c 	beq.w	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800f0ea:	2601      	movs	r6, #1
 800f0ec:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f0ee:	682b      	ldr	r3, [r5, #0]
 800f0f0:	0719      	lsls	r1, r3, #28
 800f0f2:	d514      	bpl.n	800f11e <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f0f4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800f0f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0fc:	d107      	bne.n	800f10e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f0fe:	2102      	movs	r1, #2
 800f100:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f104:	f7ff fc44 	bl	800e990 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800f108:	2800      	cmp	r0, #0
 800f10a:	bf18      	it	ne
 800f10c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f10e:	4a80      	ldr	r2, [pc, #512]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f110:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800f114:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f116:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800f11a:	430b      	orrs	r3, r1
 800f11c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f11e:	682b      	ldr	r3, [r5, #0]
 800f120:	06da      	lsls	r2, r3, #27
 800f122:	d514      	bpl.n	800f14e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f124:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800f128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f12c:	d107      	bne.n	800f13e <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f12e:	2102      	movs	r1, #2
 800f130:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f134:	f7ff fc2c 	bl	800e990 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800f138:	2800      	cmp	r0, #0
 800f13a:	bf18      	it	ne
 800f13c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f13e:	4a74      	ldr	r2, [pc, #464]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f140:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800f144:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f14a:	430b      	orrs	r3, r1
 800f14c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f14e:	682b      	ldr	r3, [r5, #0]
 800f150:	031b      	lsls	r3, r3, #12
 800f152:	d51b      	bpl.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800f154:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800f158:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800f15c:	f000 8140 	beq.w	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800f160:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800f164:	d007      	beq.n	800f176 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800f166:	2900      	cmp	r1, #0
 800f168:	f040 8140 	bne.w	800f3ec <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f16c:	f105 0008 	add.w	r0, r5, #8
 800f170:	f7ff fb96 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f174:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f176:	2c00      	cmp	r4, #0
 800f178:	f040 813b 	bne.w	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f17c:	4a64      	ldr	r2, [pc, #400]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f17e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800f182:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f184:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800f188:	430b      	orrs	r3, r1
 800f18a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	035f      	lsls	r7, r3, #13
 800f190:	d50f      	bpl.n	800f1b2 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800f192:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800f196:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f19a:	f000 813b 	beq.w	800f414 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800f19e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f1a2:	f000 812d 	beq.w	800f400 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800f1a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1aa:	f000 8124 	beq.w	800f3f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800f1ae:	2601      	movs	r6, #1
 800f1b0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f1b2:	682b      	ldr	r3, [r5, #0]
 800f1b4:	03d8      	lsls	r0, r3, #15
 800f1b6:	d509      	bpl.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800f1b8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	f000 8133 	beq.w	800f426 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800f1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1c4:	f000 813d 	beq.w	800f442 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800f1c8:	2601      	movs	r6, #1
 800f1ca:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f1cc:	682b      	ldr	r3, [r5, #0]
 800f1ce:	0099      	lsls	r1, r3, #2
 800f1d0:	d507      	bpl.n	800f1e2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f1d2:	2102      	movs	r1, #2
 800f1d4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f1d8:	f7ff fbda 	bl	800e990 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	bf18      	it	ne
 800f1e0:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f1e2:	e9d5 3100 	ldrd	r3, r1, [r5]
 800f1e6:	039a      	lsls	r2, r3, #14
 800f1e8:	f140 8143 	bpl.w	800f472 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800f1ec:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800f1f0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800f1f4:	f000 813f 	beq.w	800f476 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800f1f8:	f200 812c 	bhi.w	800f454 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	f000 812f 	beq.w	800f460 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800f202:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f204:	02df      	lsls	r7, r3, #11
 800f206:	d506      	bpl.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f208:	4841      	ldr	r0, [pc, #260]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f20a:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800f20c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800f20e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800f212:	4332      	orrs	r2, r6
 800f214:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f216:	00de      	lsls	r6, r3, #3
 800f218:	d507      	bpl.n	800f22a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f21a:	483d      	ldr	r0, [pc, #244]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f21c:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800f220:	6902      	ldr	r2, [r0, #16]
 800f222:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f226:	4332      	orrs	r2, r6
 800f228:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f22a:	0298      	lsls	r0, r3, #10
 800f22c:	d506      	bpl.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f22e:	4838      	ldr	r0, [pc, #224]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f230:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800f232:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800f234:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800f238:	4332      	orrs	r2, r6
 800f23a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f23c:	005a      	lsls	r2, r3, #1
 800f23e:	d509      	bpl.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f240:	4a33      	ldr	r2, [pc, #204]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f242:	6910      	ldr	r0, [r2, #16]
 800f244:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800f248:	6110      	str	r0, [r2, #16]
 800f24a:	6910      	ldr	r0, [r2, #16]
 800f24c:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800f250:	4330      	orrs	r0, r6
 800f252:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f254:	2b00      	cmp	r3, #0
 800f256:	da06      	bge.n	800f266 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f258:	482d      	ldr	r0, [pc, #180]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f25a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f25c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800f25e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800f262:	4332      	orrs	r2, r6
 800f264:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f266:	021f      	lsls	r7, r3, #8
 800f268:	d507      	bpl.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f26a:	4a29      	ldr	r2, [pc, #164]	@ (800f310 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800f26c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800f270:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f272:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800f276:	4303      	orrs	r3, r0
 800f278:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f27a:	07ce      	lsls	r6, r1, #31
 800f27c:	d506      	bpl.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f27e:	2100      	movs	r1, #0
 800f280:	f105 0008 	add.w	r0, r5, #8
 800f284:	f7ff fb0c 	bl	800e8a0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800f288:	4607      	mov	r7, r0
 800f28a:	b900      	cbnz	r0, 800f28e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800f28c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f28e:	686b      	ldr	r3, [r5, #4]
 800f290:	079c      	lsls	r4, r3, #30
 800f292:	d506      	bpl.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f294:	2101      	movs	r1, #1
 800f296:	f105 0008 	add.w	r0, r5, #8
 800f29a:	f7ff fb01 	bl	800e8a0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800f29e:	4606      	mov	r6, r0
 800f2a0:	b900      	cbnz	r0, 800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800f2a2:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f2a4:	686b      	ldr	r3, [r5, #4]
 800f2a6:	0758      	lsls	r0, r3, #29
 800f2a8:	d506      	bpl.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f2aa:	2102      	movs	r1, #2
 800f2ac:	f105 0008 	add.w	r0, r5, #8
 800f2b0:	f7ff faf6 	bl	800e8a0 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	b900      	cbnz	r0, 800f2ba <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800f2b8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f2ba:	686b      	ldr	r3, [r5, #4]
 800f2bc:	0719      	lsls	r1, r3, #28
 800f2be:	d506      	bpl.n	800f2ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f2c6:	f7ff fb63 	bl	800e990 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800f2ca:	4606      	mov	r6, r0
 800f2cc:	b900      	cbnz	r0, 800f2d0 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800f2ce:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f2d0:	686b      	ldr	r3, [r5, #4]
 800f2d2:	06da      	lsls	r2, r3, #27
 800f2d4:	d506      	bpl.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f2dc:	f7ff fb58 	bl	800e990 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	b900      	cbnz	r0, 800f2e6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800f2e4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f2e6:	686b      	ldr	r3, [r5, #4]
 800f2e8:	069b      	lsls	r3, r3, #26
 800f2ea:	f100 80ca 	bmi.w	800f482 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800f2ee:	1e20      	subs	r0, r4, #0
 800f2f0:	bf18      	it	ne
 800f2f2:	2001      	movne	r0, #1
}
 800f2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f2fe:	f7ff fb47 	bl	800e990 <RCCEx_PLL3_Config>
 800f302:	e6ac      	b.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f304:	2601      	movs	r6, #1
 800f306:	4634      	mov	r4, r6
 800f308:	e6b5      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800f30a:	4626      	mov	r6, r4
 800f30c:	e6b3      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800f30e:	bf00      	nop
 800f310:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f314:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f318:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800f31c:	d003      	beq.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800f31e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f322:	f47f aeba 	bne.w	800f09a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800f326:	b9ac      	cbnz	r4, 800f354 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f328:	4a5b      	ldr	r2, [pc, #364]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f32a:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800f32e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f330:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800f334:	430b      	orrs	r3, r1
 800f336:	6553      	str	r3, [r2, #84]	@ 0x54
 800f338:	e6b1      	b.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f33a:	2100      	movs	r1, #0
 800f33c:	f105 0008 	add.w	r0, r5, #8
 800f340:	f7ff faae 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f344:	4604      	mov	r4, r0
        break;
 800f346:	e7ee      	b.n	800f326 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f348:	2102      	movs	r1, #2
 800f34a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f34e:	f7ff fb1f 	bl	800e990 <RCCEx_PLL3_Config>
 800f352:	e7f7      	b.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800f354:	4626      	mov	r6, r4
 800f356:	e6a2      	b.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f358:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f35c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800f360:	d003      	beq.n	800f36a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800f362:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f366:	f47f aeac 	bne.w	800f0c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800f36a:	b9ac      	cbnz	r4, 800f398 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f36c:	4a4a      	ldr	r2, [pc, #296]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f36e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800f372:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f374:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800f378:	430b      	orrs	r3, r1
 800f37a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f37c:	e6a3      	b.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f37e:	2100      	movs	r1, #0
 800f380:	f105 0008 	add.w	r0, r5, #8
 800f384:	f7ff fa8c 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f388:	4604      	mov	r4, r0
        break;
 800f38a:	e7ee      	b.n	800f36a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f38c:	2102      	movs	r1, #2
 800f38e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f392:	f7ff fafd 	bl	800e990 <RCCEx_PLL3_Config>
 800f396:	e7f7      	b.n	800f388 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800f398:	4626      	mov	r6, r4
 800f39a:	e694      	b.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f39c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f3a0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800f3a4:	d003      	beq.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800f3a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f3aa:	f47f ae9e 	bne.w	800f0ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800f3ae:	b9ac      	cbnz	r4, 800f3dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f3b0:	4a39      	ldr	r2, [pc, #228]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f3b2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800f3b6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f3b8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800f3bc:	430b      	orrs	r3, r1
 800f3be:	6593      	str	r3, [r2, #88]	@ 0x58
 800f3c0:	e695      	b.n	800f0ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	f105 0008 	add.w	r0, r5, #8
 800f3c8:	f7ff fa6a 	bl	800e8a0 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3cc:	4604      	mov	r4, r0
        break;
 800f3ce:	e7ee      	b.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3d0:	2102      	movs	r1, #2
 800f3d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f3d6:	f7ff fadb 	bl	800e990 <RCCEx_PLL3_Config>
 800f3da:	e7f7      	b.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800f3dc:	4626      	mov	r6, r4
 800f3de:	e686      	b.n	800f0ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f3e0:	2102      	movs	r1, #2
 800f3e2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f3e6:	f7ff fad3 	bl	800e990 <RCCEx_PLL3_Config>
 800f3ea:	e6c3      	b.n	800f174 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800f3ec:	2601      	movs	r6, #1
 800f3ee:	4634      	mov	r4, r6
 800f3f0:	e6cc      	b.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800f3f2:	4626      	mov	r6, r4
 800f3f4:	e6ca      	b.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3f6:	4a28      	ldr	r2, [pc, #160]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f3f8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f3fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f3fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800f400:	b97c      	cbnz	r4, 800f422 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f402:	4a25      	ldr	r2, [pc, #148]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f404:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800f408:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800f40a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f40e:	430b      	orrs	r3, r1
 800f410:	6553      	str	r3, [r2, #84]	@ 0x54
 800f412:	e6ce      	b.n	800f1b2 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f414:	2101      	movs	r1, #1
 800f416:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f41a:	f7ff fab9 	bl	800e990 <RCCEx_PLL3_Config>
 800f41e:	4604      	mov	r4, r0
        break;
 800f420:	e7ee      	b.n	800f400 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800f422:	4626      	mov	r6, r4
 800f424:	e6c5      	b.n	800f1b2 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f426:	4a1c      	ldr	r2, [pc, #112]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f428:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f42a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f42e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800f430:	b974      	cbnz	r4, 800f450 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f432:	4a19      	ldr	r2, [pc, #100]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f434:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800f436:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800f438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f43c:	430b      	orrs	r3, r1
 800f43e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f440:	e6c4      	b.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f442:	2102      	movs	r1, #2
 800f444:	f105 0008 	add.w	r0, r5, #8
 800f448:	f7ff fa2a 	bl	800e8a0 <RCCEx_PLL2_Config>
 800f44c:	4604      	mov	r4, r0
        break;
 800f44e:	e7ef      	b.n	800f430 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800f450:	4626      	mov	r6, r4
 800f452:	e6bb      	b.n	800f1cc <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800f454:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800f458:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800f45c:	f47f aed1 	bne.w	800f202 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800f460:	2c00      	cmp	r4, #0
 800f462:	f47f aecf 	bne.w	800f204 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f466:	4c0c      	ldr	r4, [pc, #48]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f46a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f46e:	4302      	orrs	r2, r0
 800f470:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800f472:	4634      	mov	r4, r6
 800f474:	e6c6      	b.n	800f204 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f476:	4f08      	ldr	r7, [pc, #32]	@ (800f498 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800f478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f47a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f47e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800f480:	e7ee      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f482:	2102      	movs	r1, #2
 800f484:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800f488:	f7ff fa82 	bl	800e990 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800f48c:	2800      	cmp	r0, #0
 800f48e:	f43f af2e 	beq.w	800f2ee <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800f492:	2001      	movs	r0, #1
 800f494:	e72e      	b.n	800f2f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800f496:	bf00      	nop
 800f498:	58024400 	.word	0x58024400

0800f49c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800f49c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f49e:	f7ff f98f 	bl	800e7c0 <HAL_RCC_GetHCLKFreq>
 800f4a2:	4b05      	ldr	r3, [pc, #20]	@ (800f4b8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800f4a4:	4a05      	ldr	r2, [pc, #20]	@ (800f4bc <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800f4a6:	6a1b      	ldr	r3, [r3, #32]
 800f4a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f4ac:	5cd3      	ldrb	r3, [r2, r3]
 800f4ae:	f003 031f 	and.w	r3, r3, #31
}
 800f4b2:	40d8      	lsrs	r0, r3
 800f4b4:	bd08      	pop	{r3, pc}
 800f4b6:	bf00      	nop
 800f4b8:	58024400 	.word	0x58024400
 800f4bc:	0802d758 	.word	0x0802d758

0800f4c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f4c0:	494f      	ldr	r1, [pc, #316]	@ (800f600 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800f4c2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f4c4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f4c6:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f4c8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800f4ca:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f4ce:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f4d2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800f4d4:	f000 8090 	beq.w	800f5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f4d8:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f4dc:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f4e0:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f4e4:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f4e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f4ec:	4353      	muls	r3, r2
    switch (pllsource)
 800f4ee:	2c01      	cmp	r4, #1
 800f4f0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f4f4:	ee06 3a90 	vmov	s13, r3
 800f4f8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800f4fc:	d06e      	beq.n	800f5dc <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800f4fe:	2c02      	cmp	r4, #2
 800f500:	d05e      	beq.n	800f5c0 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800f502:	2c00      	cmp	r4, #0
 800f504:	d16a      	bne.n	800f5dc <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f506:	680b      	ldr	r3, [r1, #0]
 800f508:	069b      	lsls	r3, r3, #26
 800f50a:	d547      	bpl.n	800f59c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f50c:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f50e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f510:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800f514:	4a3b      	ldr	r2, [pc, #236]	@ (800f604 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f516:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f51a:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f51c:	ee07 2a90 	vmov	s15, r2
 800f520:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800f524:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800f528:	ee07 3a10 	vmov	s14, r3
 800f52c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f530:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f534:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f538:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f53c:	4a30      	ldr	r2, [pc, #192]	@ (800f600 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800f53e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f540:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f544:	ee07 3a10 	vmov	s14, r3
 800f548:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f54c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f550:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f554:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f558:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f55c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f55e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800f562:	ee07 3a10 	vmov	s14, r3
 800f566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f56a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f56e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f572:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f576:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f57a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f57c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800f580:	ee06 3a90 	vmov	s13, r3
 800f584:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f588:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f58c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f590:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f594:	ee17 3a90 	vmov	r3, s15
 800f598:	6083      	str	r3, [r0, #8]
}
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f59c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800f59e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800f608 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800f5a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5a6:	ee07 3a90 	vmov	s15, r3
 800f5aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5b2:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f5b6:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800f5ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800f5be:	e7bd      	b.n	800f53c <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f5c0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800f5c2:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800f60c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800f5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ca:	ee07 3a90 	vmov	s15, r3
 800f5ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f5da:	e7ec      	b.n	800f5b6 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f5dc:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800f5de:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800f610 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800f5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e6:	ee07 3a90 	vmov	s15, r3
 800f5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f5f6:	e7de      	b.n	800f5b6 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f5f8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f5fc:	e7cc      	b.n	800f598 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800f5fe:	bf00      	nop
 800f600:	58024400 	.word	0x58024400
 800f604:	03d09000 	.word	0x03d09000
 800f608:	4c742400 	.word	0x4c742400
 800f60c:	4bbebc20 	.word	0x4bbebc20
 800f610:	4a742400 	.word	0x4a742400

0800f614 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f614:	494f      	ldr	r1, [pc, #316]	@ (800f754 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800f616:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f618:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f61a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f61c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800f61e:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f622:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f626:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800f628:	f000 8090 	beq.w	800f74c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f62c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f630:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f634:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f638:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f63c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f640:	4353      	muls	r3, r2
    switch (pllsource)
 800f642:	2c01      	cmp	r4, #1
 800f644:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f648:	ee06 3a90 	vmov	s13, r3
 800f64c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800f650:	d06e      	beq.n	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800f652:	2c02      	cmp	r4, #2
 800f654:	d05e      	beq.n	800f714 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800f656:	2c00      	cmp	r4, #0
 800f658:	d16a      	bne.n	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f65a:	680b      	ldr	r3, [r1, #0]
 800f65c:	069b      	lsls	r3, r3, #26
 800f65e:	d547      	bpl.n	800f6f0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f660:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f662:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f664:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800f668:	4a3b      	ldr	r2, [pc, #236]	@ (800f758 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f66e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f670:	ee07 2a90 	vmov	s15, r2
 800f674:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800f678:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800f67c:	ee07 3a10 	vmov	s14, r3
 800f680:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f684:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f688:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f68c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f690:	4a30      	ldr	r2, [pc, #192]	@ (800f754 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800f692:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f694:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f698:	ee07 3a10 	vmov	s14, r3
 800f69c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f6a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f6a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f6a8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f6ac:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f6b0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f6b2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800f6b6:	ee07 3a10 	vmov	s14, r3
 800f6ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f6be:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f6c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f6c6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800f6ca:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f6ce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800f6d0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800f6d4:	ee06 3a90 	vmov	s13, r3
 800f6d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f6dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f6e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f6e4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800f6e8:	ee17 3a90 	vmov	r3, s15
 800f6ec:	6083      	str	r3, [r0, #8]
}
 800f6ee:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f6f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f6f2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800f75c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800f6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6fa:	ee07 3a90 	vmov	s15, r3
 800f6fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f706:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f70a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800f70e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800f712:	e7bd      	b.n	800f690 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f714:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f716:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800f760 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800f71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f71e:	ee07 3a90 	vmov	s15, r3
 800f722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f72a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f72e:	e7ec      	b.n	800f70a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f730:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f732:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800f764 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800f736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f73a:	ee07 3a90 	vmov	s15, r3
 800f73e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f746:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f74a:	e7de      	b.n	800f70a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f74c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f750:	e7cc      	b.n	800f6ec <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800f752:	bf00      	nop
 800f754:	58024400 	.word	0x58024400
 800f758:	03d09000 	.word	0x03d09000
 800f75c:	4c742400 	.word	0x4c742400
 800f760:	4bbebc20 	.word	0x4bbebc20
 800f764:	4a742400 	.word	0x4a742400

0800f768 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800f76c:	4604      	mov	r4, r0
 800f76e:	b1f0      	cbz	r0, 800f7ae <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f770:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800f774:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800f778:	b91b      	cbnz	r3, 800f782 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f77a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f77e:	f7f2 f823 	bl	80017c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f782:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f784:	1d21      	adds	r1, r4, #4
 800f786:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f788:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f78c:	f000 fdd3 	bl	8010336 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f790:	6862      	ldr	r2, [r4, #4]
 800f792:	4629      	mov	r1, r5
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	f000 fe06 	bl	80103a6 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f79a:	4a06      	ldr	r2, [pc, #24]	@ (800f7b4 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800f79c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800f79e:	6813      	ldr	r3, [r2, #0]
 800f7a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f7a4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800f7ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f7ae:	2001      	movs	r0, #1
 800f7b0:	e7fc      	b.n	800f7ac <HAL_SDRAM_Init+0x44>
 800f7b2:	bf00      	nop
 800f7b4:	52004000 	.word	0x52004000

0800f7b8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800f7b8:	b510      	push	{r4, lr}
 800f7ba:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800f7bc:	f7f2 f89e 	bl	80018fc <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800f7c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f7c4:	f000 fe25 	bl	8010412 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800f7ce:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800f7d2:	bd10      	pop	{r4, pc}

0800f7d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800f7d4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f7d6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800f7da:	4605      	mov	r5, r0
 800f7dc:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800f7de:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f7e0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800f7e2:	d010      	beq.n	800f806 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800f7e4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800f7e8:	2c01      	cmp	r4, #1
 800f7ea:	d110      	bne.n	800f80e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f7ec:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f7ee:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f7f0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f7f4:	f000 fe1c 	bl	8010430 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f7f8:	6833      	ldr	r3, [r6, #0]
 800f7fa:	2b02      	cmp	r3, #2
 800f7fc:	d104      	bne.n	800f808 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f7fe:	2305      	movs	r3, #5
 800f800:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f804:	2000      	movs	r0, #0
}
 800f806:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800f808:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800f80c:	e7fa      	b.n	800f804 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800f80e:	2001      	movs	r0, #1
 800f810:	e7f9      	b.n	800f806 <HAL_SDRAM_SendCommand+0x32>

0800f812 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f812:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f814:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800f818:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f81a:	2b02      	cmp	r3, #2
 800f81c:	b2d8      	uxtb	r0, r3
 800f81e:	d00d      	beq.n	800f83c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800f820:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f824:	2b01      	cmp	r3, #1
 800f826:	b2dd      	uxtb	r5, r3
 800f828:	d109      	bne.n	800f83e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f82a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800f82c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f82e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800f832:	f000 fe0f 	bl	8010454 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f836:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f838:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800f83c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f83e:	2001      	movs	r0, #1
 800f840:	e7fc      	b.n	800f83c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800f842 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f842:	4770      	bx	lr

0800f844 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f844:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d12f      	bne.n	800f8ac <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f84c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f84e:	4a18      	ldr	r2, [pc, #96]	@ (800f8b0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f850:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f854:	6803      	ldr	r3, [r0, #0]
 800f856:	4293      	cmp	r3, r2
 800f858:	d01a      	beq.n	800f890 <HAL_TIM_Base_Start+0x4c>
 800f85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f85e:	d017      	beq.n	800f890 <HAL_TIM_Base_Start+0x4c>
 800f860:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f864:	4293      	cmp	r3, r2
 800f866:	d013      	beq.n	800f890 <HAL_TIM_Base_Start+0x4c>
 800f868:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d00f      	beq.n	800f890 <HAL_TIM_Base_Start+0x4c>
 800f870:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f874:	4293      	cmp	r3, r2
 800f876:	d00b      	beq.n	800f890 <HAL_TIM_Base_Start+0x4c>
 800f878:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d007      	beq.n	800f890 <HAL_TIM_Base_Start+0x4c>
 800f880:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800f884:	4293      	cmp	r3, r2
 800f886:	d003      	beq.n	800f890 <HAL_TIM_Base_Start+0x4c>
 800f888:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d107      	bne.n	800f8a0 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f890:	6899      	ldr	r1, [r3, #8]
 800f892:	4a08      	ldr	r2, [pc, #32]	@ (800f8b4 <HAL_TIM_Base_Start+0x70>)
 800f894:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f896:	2a06      	cmp	r2, #6
 800f898:	d006      	beq.n	800f8a8 <HAL_TIM_Base_Start+0x64>
 800f89a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f89e:	d003      	beq.n	800f8a8 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	f042 0201 	orr.w	r2, r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	4770      	bx	lr
    return HAL_ERROR;
 800f8ac:	2001      	movs	r0, #1
}
 800f8ae:	4770      	bx	lr
 800f8b0:	40010000 	.word	0x40010000
 800f8b4:	00010007 	.word	0x00010007

0800f8b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f8b8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d133      	bne.n	800f928 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8c0:	2302      	movs	r3, #2
 800f8c2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f8c6:	6803      	ldr	r3, [r0, #0]
 800f8c8:	68da      	ldr	r2, [r3, #12]
 800f8ca:	f042 0201 	orr.w	r2, r2, #1
 800f8ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8d0:	4a16      	ldr	r2, [pc, #88]	@ (800f92c <HAL_TIM_Base_Start_IT+0x74>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d01a      	beq.n	800f90c <HAL_TIM_Base_Start_IT+0x54>
 800f8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8da:	d017      	beq.n	800f90c <HAL_TIM_Base_Start_IT+0x54>
 800f8dc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d013      	beq.n	800f90c <HAL_TIM_Base_Start_IT+0x54>
 800f8e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d00f      	beq.n	800f90c <HAL_TIM_Base_Start_IT+0x54>
 800f8ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d00b      	beq.n	800f90c <HAL_TIM_Base_Start_IT+0x54>
 800f8f4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d007      	beq.n	800f90c <HAL_TIM_Base_Start_IT+0x54>
 800f8fc:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800f900:	4293      	cmp	r3, r2
 800f902:	d003      	beq.n	800f90c <HAL_TIM_Base_Start_IT+0x54>
 800f904:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800f908:	4293      	cmp	r3, r2
 800f90a:	d107      	bne.n	800f91c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f90c:	6899      	ldr	r1, [r3, #8]
 800f90e:	4a08      	ldr	r2, [pc, #32]	@ (800f930 <HAL_TIM_Base_Start_IT+0x78>)
 800f910:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f912:	2a06      	cmp	r2, #6
 800f914:	d006      	beq.n	800f924 <HAL_TIM_Base_Start_IT+0x6c>
 800f916:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f91a:	d003      	beq.n	800f924 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	f042 0201 	orr.w	r2, r2, #1
 800f922:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800f924:	2000      	movs	r0, #0
 800f926:	4770      	bx	lr
    return HAL_ERROR;
 800f928:	2001      	movs	r0, #1
}
 800f92a:	4770      	bx	lr
 800f92c:	40010000 	.word	0x40010000
 800f930:	00010007 	.word	0x00010007

0800f934 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800f934:	4770      	bx	lr

0800f936 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800f936:	4770      	bx	lr

0800f938 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800f938:	4770      	bx	lr

0800f93a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800f93c:	6803      	ldr	r3, [r0, #0]
{
 800f93e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800f940:	68dd      	ldr	r5, [r3, #12]
{
 800f942:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800f944:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f946:	07b2      	lsls	r2, r6, #30
 800f948:	d50d      	bpl.n	800f966 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f94a:	07a9      	lsls	r1, r5, #30
 800f94c:	d50b      	bpl.n	800f966 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f94e:	f06f 0202 	mvn.w	r2, #2
 800f952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f954:	2201      	movs	r2, #1
 800f956:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f958:	699b      	ldr	r3, [r3, #24]
 800f95a:	079a      	lsls	r2, r3, #30
 800f95c:	d075      	beq.n	800fa4a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800f95e:	f7ff ffea 	bl	800f936 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f962:	2300      	movs	r3, #0
 800f964:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f966:	0773      	lsls	r3, r6, #29
 800f968:	d510      	bpl.n	800f98c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f96a:	0768      	lsls	r0, r5, #29
 800f96c:	d50e      	bpl.n	800f98c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800f974:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f978:	2202      	movs	r2, #2
 800f97a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f97c:	699b      	ldr	r3, [r3, #24]
 800f97e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f982:	d068      	beq.n	800fa56 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800f984:	f7ff ffd7 	bl	800f936 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f988:	2300      	movs	r3, #0
 800f98a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f98c:	0731      	lsls	r1, r6, #28
 800f98e:	d50f      	bpl.n	800f9b0 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f990:	072a      	lsls	r2, r5, #28
 800f992:	d50d      	bpl.n	800f9b0 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f994:	6823      	ldr	r3, [r4, #0]
 800f996:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800f99a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f99c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f99e:	2204      	movs	r2, #4
 800f9a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f9a2:	69db      	ldr	r3, [r3, #28]
 800f9a4:	079b      	lsls	r3, r3, #30
 800f9a6:	d05c      	beq.n	800fa62 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800f9a8:	f7ff ffc5 	bl	800f936 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f9b0:	06f1      	lsls	r1, r6, #27
 800f9b2:	d510      	bpl.n	800f9d6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f9b4:	06ea      	lsls	r2, r5, #27
 800f9b6:	d50e      	bpl.n	800f9d6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800f9be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f9c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f9c2:	2208      	movs	r2, #8
 800f9c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f9c6:	69db      	ldr	r3, [r3, #28]
 800f9c8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f9cc:	d04f      	beq.n	800fa6e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800f9ce:	f7ff ffb2 	bl	800f936 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f9d6:	07f3      	lsls	r3, r6, #31
 800f9d8:	d508      	bpl.n	800f9ec <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f9da:	07e8      	lsls	r0, r5, #31
 800f9dc:	d506      	bpl.n	800f9ec <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800f9e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f9e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f9e8:	f7f1 fc6c 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f9ec:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800f9f0:	d008      	beq.n	800fa04 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f9f2:	0629      	lsls	r1, r5, #24
 800f9f4:	d506      	bpl.n	800fa04 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800f9fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f9fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800fa00:	f000 f8d9 	bl	800fbb6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800fa04:	05f2      	lsls	r2, r6, #23
 800fa06:	d508      	bpl.n	800fa1a <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fa08:	062b      	lsls	r3, r5, #24
 800fa0a:	d506      	bpl.n	800fa1a <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fa0c:	6823      	ldr	r3, [r4, #0]
 800fa0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800fa12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fa14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800fa16:	f000 f8cf 	bl	800fbb8 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fa1a:	0670      	lsls	r0, r6, #25
 800fa1c:	d508      	bpl.n	800fa30 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fa1e:	0669      	lsls	r1, r5, #25
 800fa20:	d506      	bpl.n	800fa30 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800fa28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fa2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800fa2c:	f7ff ff85 	bl	800f93a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fa30:	06b2      	lsls	r2, r6, #26
 800fa32:	d522      	bpl.n	800fa7a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fa34:	06ab      	lsls	r3, r5, #26
 800fa36:	d520      	bpl.n	800fa7a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fa38:	6823      	ldr	r3, [r4, #0]
 800fa3a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800fa3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fa40:	611a      	str	r2, [r3, #16]
}
 800fa42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800fa46:	f000 b8b5 	b.w	800fbb4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa4a:	f7ff ff73 	bl	800f934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f7ff ff72 	bl	800f938 <HAL_TIM_PWM_PulseFinishedCallback>
 800fa54:	e785      	b.n	800f962 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa56:	f7ff ff6d 	bl	800f934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7ff ff6c 	bl	800f938 <HAL_TIM_PWM_PulseFinishedCallback>
 800fa60:	e792      	b.n	800f988 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa62:	f7ff ff67 	bl	800f934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa66:	4620      	mov	r0, r4
 800fa68:	f7ff ff66 	bl	800f938 <HAL_TIM_PWM_PulseFinishedCallback>
 800fa6c:	e79e      	b.n	800f9ac <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa6e:	f7ff ff61 	bl	800f934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa72:	4620      	mov	r0, r4
 800fa74:	f7ff ff60 	bl	800f938 <HAL_TIM_PWM_PulseFinishedCallback>
 800fa78:	e7ab      	b.n	800f9d2 <HAL_TIM_IRQHandler+0x96>
}
 800fa7a:	bd70      	pop	{r4, r5, r6, pc}

0800fa7c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa7c:	4a33      	ldr	r2, [pc, #204]	@ (800fb4c <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800fa7e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa80:	4290      	cmp	r0, r2
 800fa82:	d012      	beq.n	800faaa <TIM_Base_SetConfig+0x2e>
 800fa84:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800fa88:	d00f      	beq.n	800faaa <TIM_Base_SetConfig+0x2e>
 800fa8a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800fa8e:	4290      	cmp	r0, r2
 800fa90:	d00b      	beq.n	800faaa <TIM_Base_SetConfig+0x2e>
 800fa92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fa96:	4290      	cmp	r0, r2
 800fa98:	d007      	beq.n	800faaa <TIM_Base_SetConfig+0x2e>
 800fa9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fa9e:	4290      	cmp	r0, r2
 800faa0:	d003      	beq.n	800faaa <TIM_Base_SetConfig+0x2e>
 800faa2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800faa6:	4290      	cmp	r0, r2
 800faa8:	d119      	bne.n	800fade <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800faaa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800faac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800fab0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fab2:	4a26      	ldr	r2, [pc, #152]	@ (800fb4c <TIM_Base_SetConfig+0xd0>)
 800fab4:	4290      	cmp	r0, r2
 800fab6:	d01d      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800fab8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800fabc:	d01a      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800fabe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800fac2:	4290      	cmp	r0, r2
 800fac4:	d016      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800fac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800faca:	4290      	cmp	r0, r2
 800facc:	d012      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800face:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fad2:	4290      	cmp	r0, r2
 800fad4:	d00e      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800fad6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800fada:	4290      	cmp	r0, r2
 800fadc:	d00a      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800fade:	4a1c      	ldr	r2, [pc, #112]	@ (800fb50 <TIM_Base_SetConfig+0xd4>)
 800fae0:	4290      	cmp	r0, r2
 800fae2:	d007      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800fae4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800fae8:	4290      	cmp	r0, r2
 800faea:	d003      	beq.n	800faf4 <TIM_Base_SetConfig+0x78>
 800faec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800faf0:	4290      	cmp	r0, r2
 800faf2:	d103      	bne.n	800fafc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800faf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800faf8:	68ca      	ldr	r2, [r1, #12]
 800fafa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fafc:	694a      	ldr	r2, [r1, #20]
 800fafe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb02:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800fb04:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb06:	688b      	ldr	r3, [r1, #8]
 800fb08:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb0a:	680b      	ldr	r3, [r1, #0]
 800fb0c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb0e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb4c <TIM_Base_SetConfig+0xd0>)
 800fb10:	4298      	cmp	r0, r3
 800fb12:	d00f      	beq.n	800fb34 <TIM_Base_SetConfig+0xb8>
 800fb14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fb18:	4298      	cmp	r0, r3
 800fb1a:	d00b      	beq.n	800fb34 <TIM_Base_SetConfig+0xb8>
 800fb1c:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800fb20:	4298      	cmp	r0, r3
 800fb22:	d007      	beq.n	800fb34 <TIM_Base_SetConfig+0xb8>
 800fb24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fb28:	4298      	cmp	r0, r3
 800fb2a:	d003      	beq.n	800fb34 <TIM_Base_SetConfig+0xb8>
 800fb2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fb30:	4298      	cmp	r0, r3
 800fb32:	d101      	bne.n	800fb38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb34:	690b      	ldr	r3, [r1, #16]
 800fb36:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb3c:	6903      	ldr	r3, [r0, #16]
 800fb3e:	07db      	lsls	r3, r3, #31
 800fb40:	d503      	bpl.n	800fb4a <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb42:	6903      	ldr	r3, [r0, #16]
 800fb44:	f023 0301 	bic.w	r3, r3, #1
 800fb48:	6103      	str	r3, [r0, #16]
  }
}
 800fb4a:	4770      	bx	lr
 800fb4c:	40010000 	.word	0x40010000
 800fb50:	40014000 	.word	0x40014000

0800fb54 <HAL_TIM_Base_Init>:
{
 800fb54:	b510      	push	{r4, lr}
  if (htim == NULL)
 800fb56:	4604      	mov	r4, r0
 800fb58:	b350      	cbz	r0, 800fbb0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800fb5a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800fb5e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800fb62:	b91b      	cbnz	r3, 800fb6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800fb64:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800fb68:	f7ff fe6b 	bl	800f842 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800fb6c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb6e:	6820      	ldr	r0, [r4, #0]
 800fb70:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800fb72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb76:	f7ff ff81 	bl	800fa7c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb7a:	2301      	movs	r3, #1
  return HAL_OK;
 800fb7c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb7e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb82:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800fb86:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800fb8a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800fb8e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800fb92:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb9a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800fb9e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800fba2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800fba6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800fbaa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800fbae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800fbb0:	2001      	movs	r0, #1
 800fbb2:	e7fc      	b.n	800fbae <HAL_TIM_Base_Init+0x5a>

0800fbb4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800fbb4:	4770      	bx	lr

0800fbb6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800fbb6:	4770      	bx	lr

0800fbb8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800fbb8:	4770      	bx	lr
	...

0800fbbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbbc:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbbe:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc0:	e852 3f00 	ldrex	r3, [r2]
 800fbc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800fbcc:	6802      	ldr	r2, [r0, #0]
 800fbce:	2900      	cmp	r1, #0
 800fbd0:	d1f5      	bne.n	800fbbe <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fbd2:	4c0f      	ldr	r4, [pc, #60]	@ (800fc10 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd4:	f102 0308 	add.w	r3, r2, #8
 800fbd8:	e853 3f00 	ldrex	r3, [r3]
 800fbdc:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbde:	f102 0c08 	add.w	ip, r2, #8
 800fbe2:	e84c 3100 	strex	r1, r3, [ip]
 800fbe6:	2900      	cmp	r1, #0
 800fbe8:	d1f4      	bne.n	800fbd4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbea:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d107      	bne.n	800fc00 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf0:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbf4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf8:	e842 3100 	strex	r1, r3, [r2]
 800fbfc:	2900      	cmp	r1, #0
 800fbfe:	d1f7      	bne.n	800fbf0 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc00:	2320      	movs	r3, #32
 800fc02:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc06:	2300      	movs	r3, #0
 800fc08:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc0a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800fc0c:	bd10      	pop	{r4, pc}
 800fc0e:	bf00      	nop
 800fc10:	effffffe 	.word	0xeffffffe

0800fc14 <UART_SetConfig>:
{
 800fc14:	b530      	push	{r4, r5, lr}
 800fc16:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc18:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc1a:	69c0      	ldr	r0, [r0, #28]
{
 800fc1c:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc1e:	6921      	ldr	r1, [r4, #16]
 800fc20:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc22:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc24:	430a      	orrs	r2, r1
 800fc26:	6961      	ldr	r1, [r4, #20]
 800fc28:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc2a:	499c      	ldr	r1, [pc, #624]	@ (800fe9c <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc2c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc2e:	4029      	ands	r1, r5
 800fc30:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc32:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc34:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc36:	685a      	ldr	r2, [r3, #4]
 800fc38:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800fc3c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fc3e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc40:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fc42:	4a97      	ldr	r2, [pc, #604]	@ (800fea0 <UART_SetConfig+0x28c>)
 800fc44:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800fc46:	bf1c      	itt	ne
 800fc48:	6a22      	ldrne	r2, [r4, #32]
 800fc4a:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc4c:	689a      	ldr	r2, [r3, #8]
 800fc4e:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800fc52:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800fc56:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fc58:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc5a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fc5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc5e:	f022 020f 	bic.w	r2, r2, #15
 800fc62:	430a      	orrs	r2, r1
 800fc64:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc66:	4a8f      	ldr	r2, [pc, #572]	@ (800fea4 <UART_SetConfig+0x290>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d128      	bne.n	800fcbe <UART_SetConfig+0xaa>
 800fc6c:	4b8e      	ldr	r3, [pc, #568]	@ (800fea8 <UART_SetConfig+0x294>)
 800fc6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fc74:	2b18      	cmp	r3, #24
 800fc76:	f000 812f 	beq.w	800fed8 <UART_SetConfig+0x2c4>
 800fc7a:	d814      	bhi.n	800fca6 <UART_SetConfig+0x92>
 800fc7c:	2b08      	cmp	r3, #8
 800fc7e:	f000 8154 	beq.w	800ff2a <UART_SetConfig+0x316>
 800fc82:	2b10      	cmp	r3, #16
 800fc84:	f000 8102 	beq.w	800fe8c <UART_SetConfig+0x278>
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 80f9 	beq.w	800fe80 <UART_SetConfig+0x26c>
 800fc8e:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc90:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800fc94:	f040 80b4 	bne.w	800fe00 <UART_SetConfig+0x1ec>
    switch (clocksource)
 800fc98:	2b08      	cmp	r3, #8
 800fc9a:	d846      	bhi.n	800fd2a <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc9c:	4668      	mov	r0, sp
 800fc9e:	f7ff fc0f 	bl	800f4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fca2:	9801      	ldr	r0, [sp, #4]
        break;
 800fca4:	e0e9      	b.n	800fe7a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fca6:	2b20      	cmp	r3, #32
 800fca8:	f000 80dd 	beq.w	800fe66 <UART_SetConfig+0x252>
 800fcac:	2b28      	cmp	r3, #40	@ 0x28
 800fcae:	d1ee      	bne.n	800fc8e <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcb0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800fcb4:	f000 811d 	beq.w	800fef2 <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 800fcb8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800fcbc:	e0be      	b.n	800fe3c <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fcbe:	4a7b      	ldr	r2, [pc, #492]	@ (800feac <UART_SetConfig+0x298>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d115      	bne.n	800fcf0 <UART_SetConfig+0xdc>
 800fcc4:	4b78      	ldr	r3, [pc, #480]	@ (800fea8 <UART_SetConfig+0x294>)
 800fcc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcc8:	f003 0307 	and.w	r3, r3, #7
 800fccc:	2b05      	cmp	r3, #5
 800fcce:	d82c      	bhi.n	800fd2a <UART_SetConfig+0x116>
 800fcd0:	a201      	add	r2, pc, #4	@ (adr r2, 800fcd8 <UART_SetConfig+0xc4>)
 800fcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd6:	bf00      	nop
 800fcd8:	0800fe71 	.word	0x0800fe71
 800fcdc:	0800fdfd 	.word	0x0800fdfd
 800fce0:	0800fe8d 	.word	0x0800fe8d
 800fce4:	0800fed9 	.word	0x0800fed9
 800fce8:	0800fe67 	.word	0x0800fe67
 800fcec:	0800fcb1 	.word	0x0800fcb1
 800fcf0:	4a6f      	ldr	r2, [pc, #444]	@ (800feb0 <UART_SetConfig+0x29c>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d0e6      	beq.n	800fcc4 <UART_SetConfig+0xb0>
 800fcf6:	4a6f      	ldr	r2, [pc, #444]	@ (800feb4 <UART_SetConfig+0x2a0>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d0e3      	beq.n	800fcc4 <UART_SetConfig+0xb0>
 800fcfc:	4a6e      	ldr	r2, [pc, #440]	@ (800feb8 <UART_SetConfig+0x2a4>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d0e0      	beq.n	800fcc4 <UART_SetConfig+0xb0>
 800fd02:	4a6e      	ldr	r2, [pc, #440]	@ (800febc <UART_SetConfig+0x2a8>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d118      	bne.n	800fd3a <UART_SetConfig+0x126>
 800fd08:	4b67      	ldr	r3, [pc, #412]	@ (800fea8 <UART_SetConfig+0x294>)
 800fd0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fd10:	2b18      	cmp	r3, #24
 800fd12:	f000 80e1 	beq.w	800fed8 <UART_SetConfig+0x2c4>
 800fd16:	d80a      	bhi.n	800fd2e <UART_SetConfig+0x11a>
 800fd18:	2b08      	cmp	r3, #8
 800fd1a:	f000 8106 	beq.w	800ff2a <UART_SetConfig+0x316>
 800fd1e:	2b10      	cmp	r3, #16
 800fd20:	f000 80b4 	beq.w	800fe8c <UART_SetConfig+0x278>
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 80ab 	beq.w	800fe80 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	e049      	b.n	800fdc2 <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd2e:	2b20      	cmp	r3, #32
 800fd30:	f000 8099 	beq.w	800fe66 <UART_SetConfig+0x252>
 800fd34:	2b28      	cmp	r3, #40	@ 0x28
 800fd36:	d0bb      	beq.n	800fcb0 <UART_SetConfig+0x9c>
 800fd38:	e7f7      	b.n	800fd2a <UART_SetConfig+0x116>
 800fd3a:	4a61      	ldr	r2, [pc, #388]	@ (800fec0 <UART_SetConfig+0x2ac>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d0c1      	beq.n	800fcc4 <UART_SetConfig+0xb0>
 800fd40:	4a60      	ldr	r2, [pc, #384]	@ (800fec4 <UART_SetConfig+0x2b0>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d0be      	beq.n	800fcc4 <UART_SetConfig+0xb0>
 800fd46:	4a56      	ldr	r2, [pc, #344]	@ (800fea0 <UART_SetConfig+0x28c>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d1ee      	bne.n	800fd2a <UART_SetConfig+0x116>
 800fd4c:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 800fd50:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800fd52:	f003 0307 	and.w	r3, r3, #7
 800fd56:	2b05      	cmp	r3, #5
 800fd58:	d8e7      	bhi.n	800fd2a <UART_SetConfig+0x116>
 800fd5a:	e8df f003 	tbb	[pc, r3]
 800fd5e:	2b49      	.short	0x2b49
 800fd60:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 800fd64:	4858      	ldr	r0, [pc, #352]	@ (800fec8 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd66:	4b59      	ldr	r3, [pc, #356]	@ (800fecc <UART_SetConfig+0x2b8>)
 800fd68:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd6a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd6c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd70:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd74:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd78:	4299      	cmp	r1, r3
 800fd7a:	d8d6      	bhi.n	800fd2a <UART_SetConfig+0x116>
 800fd7c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800fd80:	d8d3      	bhi.n	800fd2a <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd82:	2300      	movs	r3, #0
 800fd84:	4619      	mov	r1, r3
 800fd86:	f7f0 fcb7 	bl	80006f8 <__aeabi_uldivmod>
 800fd8a:	462a      	mov	r2, r5
 800fd8c:	0209      	lsls	r1, r1, #8
 800fd8e:	086b      	lsrs	r3, r5, #1
 800fd90:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800fd94:	0200      	lsls	r0, r0, #8
 800fd96:	18c0      	adds	r0, r0, r3
 800fd98:	f04f 0300 	mov.w	r3, #0
 800fd9c:	f141 0100 	adc.w	r1, r1, #0
 800fda0:	f7f0 fcaa 	bl	80006f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fda4:	4b4a      	ldr	r3, [pc, #296]	@ (800fed0 <UART_SetConfig+0x2bc>)
 800fda6:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d8bd      	bhi.n	800fd2a <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 800fdae:	6823      	ldr	r3, [r4, #0]
 800fdb0:	60d8      	str	r0, [r3, #12]
 800fdb2:	e005      	b.n	800fdc0 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdb4:	4668      	mov	r0, sp
 800fdb6:	f7ff fb83 	bl	800f4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fdba:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	d1d2      	bne.n	800fd66 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800fdc0:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800fdc2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800fdc6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800fdc8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800fdca:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800fdce:	b007      	add	sp, #28
 800fdd0:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdd2:	a803      	add	r0, sp, #12
 800fdd4:	f7ff fc1e 	bl	800f614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fdd8:	9804      	ldr	r0, [sp, #16]
        break;
 800fdda:	e7ef      	b.n	800fdbc <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fddc:	6813      	ldr	r3, [r2, #0]
 800fdde:	483d      	ldr	r0, [pc, #244]	@ (800fed4 <UART_SetConfig+0x2c0>)
 800fde0:	f013 0f20 	tst.w	r3, #32
 800fde4:	d0bf      	beq.n	800fd66 <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fde6:	6813      	ldr	r3, [r2, #0]
 800fde8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fdec:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800fdee:	e7ba      	b.n	800fd66 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fdf0:	f7ff fb54 	bl	800f49c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800fdf4:	e7e2      	b.n	800fdbc <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fdf6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800fdfa:	e7b4      	b.n	800fd66 <UART_SetConfig+0x152>
 800fdfc:	2304      	movs	r3, #4
 800fdfe:	e747      	b.n	800fc90 <UART_SetConfig+0x7c>
    switch (clocksource)
 800fe00:	2b08      	cmp	r3, #8
 800fe02:	d892      	bhi.n	800fd2a <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe04:	4668      	mov	r0, sp
 800fe06:	f7ff fb5b 	bl	800f4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe0a:	9801      	ldr	r0, [sp, #4]
        break;
 800fe0c:	e001      	b.n	800fe12 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe0e:	f7fe fcf9 	bl	800e804 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d0d4      	beq.n	800fdc0 <UART_SetConfig+0x1ac>
 800fe16:	e011      	b.n	800fe3c <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe18:	f7fe fd06 	bl	800e828 <HAL_RCC_GetPCLK2Freq>
        break;
 800fe1c:	e7f9      	b.n	800fe12 <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe1e:	a803      	add	r0, sp, #12
 800fe20:	f7ff fbf8 	bl	800f614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe24:	9804      	ldr	r0, [sp, #16]
        break;
 800fe26:	e7f4      	b.n	800fe12 <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe28:	4b1f      	ldr	r3, [pc, #124]	@ (800fea8 <UART_SetConfig+0x294>)
 800fe2a:	482a      	ldr	r0, [pc, #168]	@ (800fed4 <UART_SetConfig+0x2c0>)
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	f012 0f20 	tst.w	r2, #32
 800fe32:	d003      	beq.n	800fe3c <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fe3a:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe3c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800fe3e:	4b23      	ldr	r3, [pc, #140]	@ (800fecc <UART_SetConfig+0x2b8>)
 800fe40:	6862      	ldr	r2, [r4, #4]
 800fe42:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800fe46:	fbb0 f3f3 	udiv	r3, r0, r3
 800fe4a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800fe4e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe52:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800fe56:	f1a3 0110 	sub.w	r1, r3, #16
 800fe5a:	4291      	cmp	r1, r2
 800fe5c:	f63f af65 	bhi.w	800fd2a <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe60:	6822      	ldr	r2, [r4, #0]
 800fe62:	60d3      	str	r3, [r2, #12]
 800fe64:	e7ac      	b.n	800fdc0 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe66:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800fe6a:	4817      	ldr	r0, [pc, #92]	@ (800fec8 <UART_SetConfig+0x2b4>)
 800fe6c:	d1e6      	bne.n	800fe3c <UART_SetConfig+0x228>
 800fe6e:	e040      	b.n	800fef2 <UART_SetConfig+0x2de>
 800fe70:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800fe74:	d1cb      	bne.n	800fe0e <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe76:	f7fe fcc5 	bl	800e804 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d0a0      	beq.n	800fdc0 <UART_SetConfig+0x1ac>
 800fe7e:	e038      	b.n	800fef2 <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe80:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800fe84:	d1c8      	bne.n	800fe18 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe86:	f7fe fccf 	bl	800e828 <HAL_RCC_GetPCLK2Freq>
        break;
 800fe8a:	e7f6      	b.n	800fe7a <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe8c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800fe90:	d1c5      	bne.n	800fe1e <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe92:	a803      	add	r0, sp, #12
 800fe94:	f7ff fbbe 	bl	800f614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe98:	9804      	ldr	r0, [sp, #16]
        break;
 800fe9a:	e7ee      	b.n	800fe7a <UART_SetConfig+0x266>
 800fe9c:	cfff69f3 	.word	0xcfff69f3
 800fea0:	58000c00 	.word	0x58000c00
 800fea4:	40011000 	.word	0x40011000
 800fea8:	58024400 	.word	0x58024400
 800feac:	40004400 	.word	0x40004400
 800feb0:	40004800 	.word	0x40004800
 800feb4:	40004c00 	.word	0x40004c00
 800feb8:	40005000 	.word	0x40005000
 800febc:	40011400 	.word	0x40011400
 800fec0:	40007800 	.word	0x40007800
 800fec4:	40007c00 	.word	0x40007c00
 800fec8:	003d0900 	.word	0x003d0900
 800fecc:	0802d9c4 	.word	0x0802d9c4
 800fed0:	000ffcff 	.word	0x000ffcff
 800fed4:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fed8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800fedc:	d1a4      	bne.n	800fe28 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fede:	4b15      	ldr	r3, [pc, #84]	@ (800ff34 <UART_SetConfig+0x320>)
 800fee0:	4815      	ldr	r0, [pc, #84]	@ (800ff38 <UART_SetConfig+0x324>)
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	f012 0f20 	tst.w	r2, #32
 800fee8:	d003      	beq.n	800fef2 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fef0:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fef2:	4b12      	ldr	r3, [pc, #72]	@ (800ff3c <UART_SetConfig+0x328>)
 800fef4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800fef6:	6861      	ldr	r1, [r4, #4]
 800fef8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800fefc:	084b      	lsrs	r3, r1, #1
 800fefe:	fbb0 f2f2 	udiv	r2, r0, r2
 800ff02:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff06:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff0a:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff0e:	f1a3 0110 	sub.w	r1, r3, #16
 800ff12:	4291      	cmp	r1, r2
 800ff14:	f63f af09 	bhi.w	800fd2a <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff18:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff1c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800ff20:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff22:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800ff24:	4313      	orrs	r3, r2
 800ff26:	60cb      	str	r3, [r1, #12]
 800ff28:	e74a      	b.n	800fdc0 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff2a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800ff2e:	f47f af69 	bne.w	800fe04 <UART_SetConfig+0x1f0>
 800ff32:	e6b3      	b.n	800fc9c <UART_SetConfig+0x88>
 800ff34:	58024400 	.word	0x58024400
 800ff38:	03d09000 	.word	0x03d09000
 800ff3c:	0802d9c4 	.word	0x0802d9c4

0800ff40 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff40:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ff42:	071a      	lsls	r2, r3, #28
{
 800ff44:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff46:	d506      	bpl.n	800ff56 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff48:	6801      	ldr	r1, [r0, #0]
 800ff4a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800ff4c:	684a      	ldr	r2, [r1, #4]
 800ff4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ff52:	4322      	orrs	r2, r4
 800ff54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff56:	07dc      	lsls	r4, r3, #31
 800ff58:	d506      	bpl.n	800ff68 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff5a:	6801      	ldr	r1, [r0, #0]
 800ff5c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800ff5e:	684a      	ldr	r2, [r1, #4]
 800ff60:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ff64:	4322      	orrs	r2, r4
 800ff66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff68:	0799      	lsls	r1, r3, #30
 800ff6a:	d506      	bpl.n	800ff7a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff6c:	6801      	ldr	r1, [r0, #0]
 800ff6e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800ff70:	684a      	ldr	r2, [r1, #4]
 800ff72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ff76:	4322      	orrs	r2, r4
 800ff78:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ff7a:	075a      	lsls	r2, r3, #29
 800ff7c:	d506      	bpl.n	800ff8c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ff7e:	6801      	ldr	r1, [r0, #0]
 800ff80:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800ff82:	684a      	ldr	r2, [r1, #4]
 800ff84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ff88:	4322      	orrs	r2, r4
 800ff8a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff8c:	06dc      	lsls	r4, r3, #27
 800ff8e:	d506      	bpl.n	800ff9e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff90:	6801      	ldr	r1, [r0, #0]
 800ff92:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800ff94:	688a      	ldr	r2, [r1, #8]
 800ff96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ff9a:	4322      	orrs	r2, r4
 800ff9c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff9e:	0699      	lsls	r1, r3, #26
 800ffa0:	d506      	bpl.n	800ffb0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ffa2:	6801      	ldr	r1, [r0, #0]
 800ffa4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800ffa6:	688a      	ldr	r2, [r1, #8]
 800ffa8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ffac:	4322      	orrs	r2, r4
 800ffae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ffb0:	065a      	lsls	r2, r3, #25
 800ffb2:	d510      	bpl.n	800ffd6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffb4:	6801      	ldr	r1, [r0, #0]
 800ffb6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800ffb8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffba:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ffbe:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800ffc2:	ea42 0204 	orr.w	r2, r2, r4
 800ffc6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ffc8:	d105      	bne.n	800ffd6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ffca:	684a      	ldr	r2, [r1, #4]
 800ffcc:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800ffce:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800ffd2:	4322      	orrs	r2, r4
 800ffd4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffd6:	061b      	lsls	r3, r3, #24
 800ffd8:	d506      	bpl.n	800ffe8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffda:	6802      	ldr	r2, [r0, #0]
 800ffdc:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ffde:	6853      	ldr	r3, [r2, #4]
 800ffe0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800ffe4:	430b      	orrs	r3, r1
 800ffe6:	6053      	str	r3, [r2, #4]
}
 800ffe8:	bd10      	pop	{r4, pc}

0800ffea <UART_WaitOnFlagUntilTimeout>:
{
 800ffea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fff2:	4604      	mov	r4, r0
 800fff4:	460d      	mov	r5, r1
 800fff6:	4617      	mov	r7, r2
 800fff8:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fffa:	6822      	ldr	r2, [r4, #0]
 800fffc:	69d3      	ldr	r3, [r2, #28]
 800fffe:	ea35 0303 	bics.w	r3, r5, r3
 8010002:	bf0c      	ite	eq
 8010004:	2301      	moveq	r3, #1
 8010006:	2300      	movne	r3, #0
 8010008:	42bb      	cmp	r3, r7
 801000a:	d001      	beq.n	8010010 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 801000c:	2000      	movs	r0, #0
 801000e:	e022      	b.n	8010056 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8010010:	f1b9 3fff 	cmp.w	r9, #4294967295
 8010014:	d0f2      	beq.n	800fffc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010016:	f7fa fd61 	bl	800aadc <HAL_GetTick>
 801001a:	eba0 0008 	sub.w	r0, r0, r8
 801001e:	4548      	cmp	r0, r9
 8010020:	d829      	bhi.n	8010076 <UART_WaitOnFlagUntilTimeout+0x8c>
 8010022:	f1b9 0f00 	cmp.w	r9, #0
 8010026:	d026      	beq.n	8010076 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010028:	6821      	ldr	r1, [r4, #0]
 801002a:	680b      	ldr	r3, [r1, #0]
 801002c:	075a      	lsls	r2, r3, #29
 801002e:	d5e4      	bpl.n	800fffa <UART_WaitOnFlagUntilTimeout+0x10>
 8010030:	2d80      	cmp	r5, #128	@ 0x80
 8010032:	d0e2      	beq.n	800fffa <UART_WaitOnFlagUntilTimeout+0x10>
 8010034:	2d40      	cmp	r5, #64	@ 0x40
 8010036:	d0e0      	beq.n	800fffa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010038:	69ce      	ldr	r6, [r1, #28]
 801003a:	f016 0608 	ands.w	r6, r6, #8
 801003e:	d00c      	beq.n	801005a <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010040:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8010042:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010044:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8010046:	f7ff fdb9 	bl	800fbbc <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 801004a:	2300      	movs	r3, #0
          return HAL_ERROR;
 801004c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801004e:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8010052:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8010056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801005a:	69cb      	ldr	r3, [r1, #28]
 801005c:	051b      	lsls	r3, r3, #20
 801005e:	d5cc      	bpl.n	800fffa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010060:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 8010064:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010066:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8010068:	f7ff fda8 	bl	800fbbc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801006c:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 801006e:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010072:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 8010076:	2003      	movs	r0, #3
 8010078:	e7ed      	b.n	8010056 <UART_WaitOnFlagUntilTimeout+0x6c>

0801007a <HAL_UART_Transmit>:
{
 801007a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801007e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8010080:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8010084:	4604      	mov	r4, r0
 8010086:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8010088:	2b20      	cmp	r3, #32
{
 801008a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 801008c:	d146      	bne.n	801011c <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 801008e:	2900      	cmp	r1, #0
 8010090:	d046      	beq.n	8010120 <HAL_UART_Transmit+0xa6>
 8010092:	2a00      	cmp	r2, #0
 8010094:	d044      	beq.n	8010120 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010096:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010098:	2500      	movs	r5, #0
 801009a:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801009e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 80100a2:	f7fa fd1b 	bl	800aadc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100a6:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80100a8:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 80100aa:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80100b2:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100b6:	d103      	bne.n	80100c0 <HAL_UART_Transmit+0x46>
 80100b8:	6923      	ldr	r3, [r4, #16]
 80100ba:	b90b      	cbnz	r3, 80100c0 <HAL_UART_Transmit+0x46>
 80100bc:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80100be:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80100c0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80100c4:	464b      	mov	r3, r9
 80100c6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80100ca:	b292      	uxth	r2, r2
 80100cc:	b942      	cbnz	r2, 80100e0 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100ce:	2140      	movs	r1, #64	@ 0x40
 80100d0:	4620      	mov	r0, r4
 80100d2:	f7ff ff8a 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 80100d6:	2320      	movs	r3, #32
 80100d8:	b948      	cbnz	r0, 80100ee <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 80100da:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80100de:	e009      	b.n	80100f4 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80100e0:	2200      	movs	r2, #0
 80100e2:	2180      	movs	r1, #128	@ 0x80
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7ff ff80 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 80100ea:	b130      	cbz	r0, 80100fa <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 80100ec:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80100ee:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80100f0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80100f4:	b003      	add	sp, #12
 80100f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80100fa:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80100fc:	b95e      	cbnz	r6, 8010116 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80100fe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8010102:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010106:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8010108:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 801010c:	3a01      	subs	r2, #1
 801010e:	b292      	uxth	r2, r2
 8010110:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8010114:	e7d4      	b.n	80100c0 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010116:	f816 3b01 	ldrb.w	r3, [r6], #1
 801011a:	e7f4      	b.n	8010106 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 801011c:	2002      	movs	r0, #2
 801011e:	e7e9      	b.n	80100f4 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 8010120:	2001      	movs	r0, #1
 8010122:	e7e7      	b.n	80100f4 <HAL_UART_Transmit+0x7a>

08010124 <UART_CheckIdleState>:
{
 8010124:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010126:	2600      	movs	r6, #0
{
 8010128:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801012a:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 801012e:	f7fa fcd5 	bl	800aadc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010132:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8010134:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	071a      	lsls	r2, r3, #28
 801013a:	d51c      	bpl.n	8010176 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801013c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010140:	4632      	mov	r2, r6
 8010142:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	4603      	mov	r3, r0
 801014a:	4620      	mov	r0, r4
 801014c:	f7ff ff4d 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 8010150:	b188      	cbz	r0, 8010176 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010152:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010154:	e852 3f00 	ldrex	r3, [r2]
 8010158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801015c:	e842 3100 	strex	r1, r3, [r2]
 8010160:	2900      	cmp	r1, #0
 8010162:	d1f6      	bne.n	8010152 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8010164:	2320      	movs	r3, #32
 8010166:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 801016a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 801016c:	2300      	movs	r3, #0
 801016e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8010172:	b002      	add	sp, #8
 8010174:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010176:	6823      	ldr	r3, [r4, #0]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	075b      	lsls	r3, r3, #29
 801017c:	d524      	bpl.n	80101c8 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801017e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010182:	2200      	movs	r2, #0
 8010184:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010188:	4620      	mov	r0, r4
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	462b      	mov	r3, r5
 801018e:	f7ff ff2c 	bl	800ffea <UART_WaitOnFlagUntilTimeout>
 8010192:	b1c8      	cbz	r0, 80101c8 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010194:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010196:	e852 3f00 	ldrex	r3, [r2]
 801019a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801019e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80101a2:	6822      	ldr	r2, [r4, #0]
 80101a4:	2900      	cmp	r1, #0
 80101a6:	d1f5      	bne.n	8010194 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a8:	f102 0308 	add.w	r3, r2, #8
 80101ac:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b4:	f102 0008 	add.w	r0, r2, #8
 80101b8:	e840 3100 	strex	r1, r3, [r0]
 80101bc:	2900      	cmp	r1, #0
 80101be:	d1f3      	bne.n	80101a8 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 80101c0:	2320      	movs	r3, #32
 80101c2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80101c6:	e7d0      	b.n	801016a <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 80101c8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101ca:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80101cc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80101d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101d4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101d6:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 80101d8:	e7c8      	b.n	801016c <UART_CheckIdleState+0x48>

080101da <HAL_UART_Init>:
{
 80101da:	b510      	push	{r4, lr}
  if (huart == NULL)
 80101dc:	4604      	mov	r4, r0
 80101de:	b350      	cbz	r0, 8010236 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80101e0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80101e4:	b91b      	cbnz	r3, 80101ee <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80101e6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80101ea:	f7f1 faa3 	bl	8001734 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80101ee:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80101f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80101f2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80101f6:	6813      	ldr	r3, [r2, #0]
 80101f8:	f023 0301 	bic.w	r3, r3, #1
 80101fc:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010200:	b113      	cbz	r3, 8010208 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8010202:	4620      	mov	r0, r4
 8010204:	f7ff fe9c 	bl	800ff40 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010208:	4620      	mov	r0, r4
 801020a:	f7ff fd03 	bl	800fc14 <UART_SetConfig>
 801020e:	2801      	cmp	r0, #1
 8010210:	d011      	beq.n	8010236 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010212:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8010214:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801021c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801021e:	689a      	ldr	r2, [r3, #8]
 8010220:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010224:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	f042 0201 	orr.w	r2, r2, #1
}
 801022c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8010230:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8010232:	f7ff bf77 	b.w	8010124 <UART_CheckIdleState>
}
 8010236:	2001      	movs	r0, #1
 8010238:	bd10      	pop	{r4, pc}
	...

0801023c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801023c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 801023e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010240:	b92b      	cbnz	r3, 801024e <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8010242:	2301      	movs	r3, #1
 8010244:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010248:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801024c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801024e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010250:	4d09      	ldr	r5, [pc, #36]	@ (8010278 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010252:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010254:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8010256:	4c09      	ldr	r4, [pc, #36]	@ (801027c <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010258:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801025c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801025e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8010260:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010262:	011b      	lsls	r3, r3, #4
 8010264:	fbb3 f3f1 	udiv	r3, r3, r1
 8010268:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801026c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 801026e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010270:	011b      	lsls	r3, r3, #4
 8010272:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8010276:	e7e7      	b.n	8010248 <UARTEx_SetNbDataToProcess+0xc>
 8010278:	0802d9e4 	.word	0x0802d9e4
 801027c:	0802d9dc 	.word	0x0802d9dc

08010280 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8010280:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010284:	2b01      	cmp	r3, #1
 8010286:	d014      	beq.n	80102b2 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010288:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801028a:	2324      	movs	r3, #36	@ 0x24
 801028c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010290:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8010292:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010294:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8010298:	f023 0301 	bic.w	r3, r3, #1
 801029c:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801029e:	2300      	movs	r3, #0
 80102a0:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102a2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80102a4:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80102a6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80102aa:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 80102ae:	4618      	mov	r0, r3
 80102b0:	4770      	bx	lr
  __HAL_LOCK(huart);
 80102b2:	2002      	movs	r0, #2
}
 80102b4:	4770      	bx	lr

080102b6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80102b6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80102b8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80102bc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d017      	beq.n	80102f2 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102c2:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80102c4:	2324      	movs	r3, #36	@ 0x24
 80102c6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102ca:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80102cc:	682b      	ldr	r3, [r5, #0]
 80102ce:	f023 0301 	bic.w	r3, r3, #1
 80102d2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80102d4:	68ab      	ldr	r3, [r5, #8]
 80102d6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80102da:	4319      	orrs	r1, r3
 80102dc:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80102de:	f7ff ffad 	bl	801023c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80102e2:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102e4:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80102e6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80102ea:	2000      	movs	r0, #0
 80102ec:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80102f0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80102f2:	2002      	movs	r0, #2
 80102f4:	e7fc      	b.n	80102f0 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080102f6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80102f6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80102f8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 80102fc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d017      	beq.n	8010332 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010302:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010304:	2324      	movs	r3, #36	@ 0x24
 8010306:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801030a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 801030c:	682b      	ldr	r3, [r5, #0]
 801030e:	f023 0301 	bic.w	r3, r3, #1
 8010312:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010314:	68ab      	ldr	r3, [r5, #8]
 8010316:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 801031a:	4319      	orrs	r1, r3
 801031c:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 801031e:	f7ff ff8d 	bl	801023c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8010322:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010324:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8010326:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 801032a:	2000      	movs	r0, #0
 801032c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8010330:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8010332:	2002      	movs	r0, #2
 8010334:	e7fc      	b.n	8010330 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08010336 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801033a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 801033e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8010342:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8010346:	ea43 0308 	orr.w	r3, r3, r8
 801034a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 801034e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010352:	6809      	ldr	r1, [r1, #0]
 8010354:	b991      	cbnz	r1, 801037c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010356:	ea43 030e 	orr.w	r3, r3, lr
 801035a:	6801      	ldr	r1, [r0, #0]
 801035c:	4313      	orrs	r3, r2
 801035e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8010362:	ea43 030c 	orr.w	r3, r3, ip
 8010366:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 801036a:	433b      	orrs	r3, r7
 801036c:	4333      	orrs	r3, r6
 801036e:	432b      	orrs	r3, r5
 8010370:	4323      	orrs	r3, r4
 8010372:	430b      	orrs	r3, r1
 8010374:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8010376:	2000      	movs	r0, #0
 8010378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801037c:	6801      	ldr	r1, [r0, #0]
 801037e:	ea43 030e 	orr.w	r3, r3, lr
 8010382:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8010386:	430b      	orrs	r3, r1
 8010388:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801038a:	ea42 030c 	orr.w	r3, r2, ip
 801038e:	6841      	ldr	r1, [r0, #4]
 8010390:	433b      	orrs	r3, r7
 8010392:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8010396:	4333      	orrs	r3, r6
 8010398:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 801039c:	432b      	orrs	r3, r5
 801039e:	4323      	orrs	r3, r4
 80103a0:	4313      	orrs	r3, r2
 80103a2:	6043      	str	r3, [r0, #4]
 80103a4:	e7e7      	b.n	8010376 <FMC_SDRAM_Init+0x40>

080103a6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80103a6:	68cb      	ldr	r3, [r1, #12]
 80103a8:	f103 3cff 	add.w	ip, r3, #4294967295
 80103ac:	694b      	ldr	r3, [r1, #20]
{
 80103ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80103b0:	3b01      	subs	r3, #1
 80103b2:	680f      	ldr	r7, [r1, #0]
 80103b4:	684c      	ldr	r4, [r1, #4]
 80103b6:	688e      	ldr	r6, [r1, #8]
 80103b8:	051b      	lsls	r3, r3, #20
 80103ba:	690d      	ldr	r5, [r1, #16]
 80103bc:	3c01      	subs	r4, #1
 80103be:	6989      	ldr	r1, [r1, #24]
 80103c0:	3e01      	subs	r6, #1
 80103c2:	3d01      	subs	r5, #1
 80103c4:	3f01      	subs	r7, #1
 80103c6:	3901      	subs	r1, #1
 80103c8:	0124      	lsls	r4, r4, #4
 80103ca:	0236      	lsls	r6, r6, #8
 80103cc:	042d      	lsls	r5, r5, #16
 80103ce:	0609      	lsls	r1, r1, #24
 80103d0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80103d4:	b95a      	cbnz	r2, 80103ee <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80103d6:	433b      	orrs	r3, r7
 80103d8:	6882      	ldr	r2, [r0, #8]
 80103da:	4323      	orrs	r3, r4
 80103dc:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80103e0:	4333      	orrs	r3, r6
 80103e2:	432b      	orrs	r3, r5
 80103e4:	430b      	orrs	r3, r1
 80103e6:	4313      	orrs	r3, r2
 80103e8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80103ea:	2000      	movs	r0, #0
 80103ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80103ee:	6882      	ldr	r2, [r0, #8]
 80103f0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80103f4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80103f8:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80103fa:	ea44 0306 	orr.w	r3, r4, r6
 80103fe:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010400:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010402:	68c2      	ldr	r2, [r0, #12]
 8010404:	432b      	orrs	r3, r5
 8010406:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 801040a:	430b      	orrs	r3, r1
 801040c:	4313      	orrs	r3, r2
 801040e:	60c3      	str	r3, [r0, #12]
 8010410:	e7eb      	b.n	80103ea <FMC_SDRAM_Timing_Init+0x44>

08010412 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8010412:	4603      	mov	r3, r0
 8010414:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8010418:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 801041c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 8010420:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8010422:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8010426:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 8010428:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 801042a:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 801042c:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 801042e:	4770      	bx	lr

08010430 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010430:	6902      	ldr	r2, [r0, #16]
{
 8010432:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010434:	e9d1 3400 	ldrd	r3, r4, [r1]
 8010438:	0d92      	lsrs	r2, r2, #22
 801043a:	4323      	orrs	r3, r4
 801043c:	68cc      	ldr	r4, [r1, #12]
 801043e:	0592      	lsls	r2, r2, #22
 8010440:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8010444:	4313      	orrs	r3, r2
 8010446:	688a      	ldr	r2, [r1, #8]
 8010448:	3a01      	subs	r2, #1
 801044a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801044e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8010450:	2000      	movs	r0, #0
 8010452:	bd10      	pop	{r4, pc}

08010454 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8010454:	6943      	ldr	r3, [r0, #20]
 8010456:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 801045a:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 801045e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8010462:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8010464:	2000      	movs	r0, #0
 8010466:	4770      	bx	lr

08010468 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010468:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 801046a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801046e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010470:	f001 ff0e 	bl	8012290 <xTaskGetSchedulerState>
 8010474:	2801      	cmp	r0, #1
 8010476:	d003      	beq.n	8010480 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8010478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 801047c:	f000 bc52 	b.w	8010d24 <xPortSysTickHandler>
}
 8010480:	bd08      	pop	{r3, pc}
	...

08010484 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010484:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8010488:	b92b      	cbnz	r3, 8010496 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 801048a:	4b06      	ldr	r3, [pc, #24]	@ (80104a4 <osKernelInitialize+0x20>)
 801048c:	6818      	ldr	r0, [r3, #0]
 801048e:	b928      	cbnz	r0, 801049c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010490:	2201      	movs	r2, #1
 8010492:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010494:	4770      	bx	lr
    stat = osErrorISR;
 8010496:	f06f 0005 	mvn.w	r0, #5
 801049a:	4770      	bx	lr
    } else {
      stat = osError;
 801049c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	2400f874 	.word	0x2400f874

080104a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80104a8:	b510      	push	{r4, lr}
 80104aa:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80104ae:	b95c      	cbnz	r4, 80104c8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80104b0:	4b08      	ldr	r3, [pc, #32]	@ (80104d4 <osKernelStart+0x2c>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	2a01      	cmp	r2, #1
 80104b6:	d10a      	bne.n	80104ce <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80104b8:	4a07      	ldr	r2, [pc, #28]	@ (80104d8 <osKernelStart+0x30>)
 80104ba:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80104bc:	2202      	movs	r2, #2
 80104be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80104c0:	f001 fd86 	bl	8011fd0 <vTaskStartScheduler>
      stat = osOK;
 80104c4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80104c6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80104c8:	f06f 0005 	mvn.w	r0, #5
 80104cc:	e7fb      	b.n	80104c6 <osKernelStart+0x1e>
      stat = osError;
 80104ce:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80104d2:	e7f8      	b.n	80104c6 <osKernelStart+0x1e>
 80104d4:	2400f874 	.word	0x2400f874
 80104d8:	e000ed00 	.word	0xe000ed00

080104dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80104dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104de:	4614      	mov	r4, r2
 80104e0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80104e2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80104e4:	460b      	mov	r3, r1
  hTask = NULL;
 80104e6:	9205      	str	r2, [sp, #20]
 80104e8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80104ec:	b9ca      	cbnz	r2, 8010522 <osThreadNew+0x46>
 80104ee:	b1c0      	cbz	r0, 8010522 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80104f0:	b36c      	cbz	r4, 801054e <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80104f2:	69a5      	ldr	r5, [r4, #24]
 80104f4:	2d00      	cmp	r5, #0
 80104f6:	bf08      	it	eq
 80104f8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80104fa:	1e69      	subs	r1, r5, #1
 80104fc:	46ac      	mov	ip, r5
 80104fe:	2937      	cmp	r1, #55	@ 0x37
 8010500:	d82a      	bhi.n	8010558 <osThreadNew+0x7c>
 8010502:	6861      	ldr	r1, [r4, #4]
 8010504:	07c9      	lsls	r1, r1, #31
 8010506:	d427      	bmi.n	8010558 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8010508:	6966      	ldr	r6, [r4, #20]
 801050a:	b16e      	cbz	r6, 8010528 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801050c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 801050e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010510:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8010514:	b157      	cbz	r7, 801052c <osThreadNew+0x50>
 8010516:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801051a:	d902      	bls.n	8010522 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801051c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801051e:	b104      	cbz	r4, 8010522 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010520:	b9e6      	cbnz	r6, 801055c <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010522:	9805      	ldr	r0, [sp, #20]
}
 8010524:	b007      	add	sp, #28
 8010526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8010528:	2280      	movs	r2, #128	@ 0x80
 801052a:	e7f0      	b.n	801050e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801052c:	f1be 0f00 	cmp.w	lr, #0
 8010530:	d1f7      	bne.n	8010522 <osThreadNew+0x46>
      if (mem == 0) {
 8010532:	6924      	ldr	r4, [r4, #16]
 8010534:	2c00      	cmp	r4, #0
 8010536:	d1f4      	bne.n	8010522 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010538:	ac05      	add	r4, sp, #20
 801053a:	b292      	uxth	r2, r2
 801053c:	e9cd c400 	strd	ip, r4, [sp]
 8010540:	f001 fbbf 	bl	8011cc2 <xTaskCreate>
 8010544:	2801      	cmp	r0, #1
            hTask = NULL;
 8010546:	bf1c      	itt	ne
 8010548:	2300      	movne	r3, #0
 801054a:	9305      	strne	r3, [sp, #20]
 801054c:	e7e9      	b.n	8010522 <osThreadNew+0x46>
    name = NULL;
 801054e:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8010550:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8010554:	2280      	movs	r2, #128	@ 0x80
 8010556:	e7ef      	b.n	8010538 <osThreadNew+0x5c>
        return (NULL);
 8010558:	4610      	mov	r0, r2
 801055a:	e7e3      	b.n	8010524 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801055c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8010560:	9500      	str	r5, [sp, #0]
 8010562:	f001 fb76 	bl	8011c52 <xTaskCreateStatic>
 8010566:	9005      	str	r0, [sp, #20]
 8010568:	e7db      	b.n	8010522 <osThreadNew+0x46>

0801056a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801056a:	b508      	push	{r3, lr}
 801056c:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8010570:	b922      	cbnz	r2, 801057c <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8010572:	b108      	cbz	r0, 8010578 <osDelay+0xe>
      vTaskDelay(ticks);
 8010574:	f001 fcec 	bl	8011f50 <vTaskDelay>
    stat = osOK;
 8010578:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 801057a:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 801057c:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8010580:	e7fb      	b.n	801057a <osDelay+0x10>

08010582 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010582:	b570      	push	{r4, r5, r6, lr}
 8010584:	4605      	mov	r5, r0
 8010586:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 801058a:	b116      	cbz	r6, 8010592 <osMutexNew+0x10>
  hMutex = NULL;
 801058c:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 801058e:	4620      	mov	r0, r4
 8010590:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 8010592:	b110      	cbz	r0, 801059a <osMutexNew+0x18>
      type = attr->attr_bits;
 8010594:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8010596:	0733      	lsls	r3, r6, #28
 8010598:	d4f8      	bmi.n	801058c <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 801059a:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 801059e:	b17d      	cbz	r5, 80105c0 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80105a0:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 80105a4:	b151      	cbz	r1, 80105bc <osMutexNew+0x3a>
 80105a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80105a8:	d9f0      	bls.n	801058c <osMutexNew+0xa>
          if (rmtx != 0U) {
 80105aa:	b1de      	cbz	r6, 80105e4 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80105ac:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80105ae:	f000 fec2 	bl	8011336 <xQueueCreateMutexStatic>
 80105b2:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d0e9      	beq.n	801058c <osMutexNew+0xa>
          name = attr->name;
 80105b8:	682d      	ldr	r5, [r5, #0]
 80105ba:	e00a      	b.n	80105d2 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d1e5      	bne.n	801058c <osMutexNew+0xa>
            if (rmtx != 0U) {
 80105c0:	b196      	cbz	r6, 80105e8 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80105c2:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 80105c4:	f000 feeb 	bl	801139e <xQueueCreateMutex>
 80105c8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d0de      	beq.n	801058c <osMutexNew+0xa>
        if (attr != NULL) {
 80105ce:	2d00      	cmp	r5, #0
 80105d0:	d1f2      	bne.n	80105b8 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 80105d2:	4629      	mov	r1, r5
 80105d4:	4620      	mov	r0, r4
 80105d6:	f001 f977 	bl	80118c8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80105da:	2e00      	cmp	r6, #0
 80105dc:	d0d7      	beq.n	801058e <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80105de:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 80105e2:	e7d4      	b.n	801058e <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80105e4:	2001      	movs	r0, #1
 80105e6:	e7e2      	b.n	80105ae <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 80105e8:	2001      	movs	r0, #1
 80105ea:	e7eb      	b.n	80105c4 <osMutexNew+0x42>

080105ec <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80105ec:	b538      	push	{r3, r4, r5, lr}
 80105ee:	4603      	mov	r3, r0
 80105f0:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80105f2:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80105f6:	f003 0201 	and.w	r2, r3, #1
 80105fa:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80105fe:	b995      	cbnz	r5, 8010626 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8010600:	2b01      	cmp	r3, #1
 8010602:	d913      	bls.n	801062c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8010604:	b162      	cbz	r2, 8010620 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010606:	f001 f8f0 	bl	80117ea <xQueueTakeMutexRecursive>
 801060a:	2801      	cmp	r0, #1
 801060c:	d101      	bne.n	8010612 <osMutexAcquire+0x26>
  stat = osOK;
 801060e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8010610:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 8010612:	2c00      	cmp	r4, #0
 8010614:	bf14      	ite	ne
 8010616:	f06f 0001 	mvnne.w	r0, #1
 801061a:	f06f 0002 	mvneq.w	r0, #2
 801061e:	e7f7      	b.n	8010610 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010620:	f001 f826 	bl	8011670 <xQueueSemaphoreTake>
 8010624:	e7f1      	b.n	801060a <osMutexAcquire+0x1e>
    stat = osErrorISR;
 8010626:	f06f 0005 	mvn.w	r0, #5
 801062a:	e7f1      	b.n	8010610 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 801062c:	f06f 0003 	mvn.w	r0, #3
 8010630:	e7ee      	b.n	8010610 <osMutexAcquire+0x24>

08010632 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010632:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010634:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010638:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 801063a:	f002 0301 	and.w	r3, r2, #1
 801063e:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8010642:	b979      	cbnz	r1, 8010664 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8010644:	2a01      	cmp	r2, #1
 8010646:	d910      	bls.n	801066a <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8010648:	b13b      	cbz	r3, 801065a <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801064a:	f000 fe89 	bl	8011360 <xQueueGiveMutexRecursive>
 801064e:	2801      	cmp	r0, #1
  stat = osOK;
 8010650:	bf0c      	ite	eq
 8010652:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8010654:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8010658:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801065a:	461a      	mov	r2, r3
 801065c:	4619      	mov	r1, r3
 801065e:	f000 fdb8 	bl	80111d2 <xQueueGenericSend>
 8010662:	e7f4      	b.n	801064e <osMutexRelease+0x1c>
    stat = osErrorISR;
 8010664:	f06f 0005 	mvn.w	r0, #5
 8010668:	e7f6      	b.n	8010658 <osMutexRelease+0x26>
    stat = osErrorParameter;
 801066a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801066e:	e7f3      	b.n	8010658 <osMutexRelease+0x26>

08010670 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010672:	4604      	mov	r4, r0
 8010674:	460e      	mov	r6, r1
 8010676:	4615      	mov	r5, r2
 8010678:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801067c:	b942      	cbnz	r2, 8010690 <osSemaphoreNew+0x20>
 801067e:	b138      	cbz	r0, 8010690 <osSemaphoreNew+0x20>
 8010680:	4288      	cmp	r0, r1
 8010682:	d305      	bcc.n	8010690 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8010684:	b155      	cbz	r5, 801069c <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010686:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 801068a:	b12b      	cbz	r3, 8010698 <osSemaphoreNew+0x28>
 801068c:	2f4f      	cmp	r7, #79	@ 0x4f
 801068e:	d822      	bhi.n	80106d6 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8010690:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8010692:	4620      	mov	r0, r4
 8010694:	b003      	add	sp, #12
 8010696:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010698:	2f00      	cmp	r7, #0
 801069a:	d1f9      	bne.n	8010690 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 801069c:	2c01      	cmp	r4, #1
 801069e:	d00c      	beq.n	80106ba <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80106a0:	4620      	mov	r0, r4
 80106a2:	4631      	mov	r1, r6
 80106a4:	f000 fd77 	bl	8011196 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80106a8:	4604      	mov	r4, r0
 80106aa:	2800      	cmp	r0, #0
 80106ac:	d0f0      	beq.n	8010690 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 80106ae:	b985      	cbnz	r5, 80106d2 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 80106b0:	4629      	mov	r1, r5
 80106b2:	4620      	mov	r0, r4
 80106b4:	f001 f908 	bl	80118c8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80106b8:	e7eb      	b.n	8010692 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 80106ba:	2203      	movs	r2, #3
 80106bc:	2100      	movs	r1, #0
 80106be:	2001      	movs	r0, #1
 80106c0:	f000 fd20 	bl	8011104 <xQueueGenericCreate>
 80106c4:	e00e      	b.n	80106e4 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80106c6:	461a      	mov	r2, r3
 80106c8:	f000 fd43 	bl	8011152 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80106cc:	4604      	mov	r4, r0
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d0de      	beq.n	8010690 <osSemaphoreNew+0x20>
          name = attr->name;
 80106d2:	682d      	ldr	r5, [r5, #0]
 80106d4:	e7ec      	b.n	80106b0 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 80106d6:	2801      	cmp	r0, #1
 80106d8:	d1f5      	bne.n	80106c6 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80106da:	2103      	movs	r1, #3
 80106dc:	9100      	str	r1, [sp, #0]
 80106de:	4611      	mov	r1, r2
 80106e0:	f000 fcc2 	bl	8011068 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 80106e4:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80106e6:	2800      	cmp	r0, #0
 80106e8:	d0d2      	beq.n	8010690 <osSemaphoreNew+0x20>
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	d0df      	beq.n	80106ae <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80106ee:	2300      	movs	r3, #0
 80106f0:	461a      	mov	r2, r3
 80106f2:	4619      	mov	r1, r3
 80106f4:	f000 fd6d 	bl	80111d2 <xQueueGenericSend>
 80106f8:	2801      	cmp	r0, #1
 80106fa:	d0d8      	beq.n	80106ae <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 80106fc:	4620      	mov	r0, r4
 80106fe:	f001 f90d 	bl	801191c <vQueueDelete>
      if (hSemaphore != NULL) {
 8010702:	e7c5      	b.n	8010690 <osSemaphoreNew+0x20>

08010704 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010704:	b513      	push	{r0, r1, r4, lr}
 8010706:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8010708:	b328      	cbz	r0, 8010756 <osSemaphoreAcquire+0x52>
 801070a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 801070e:	b1cb      	cbz	r3, 8010744 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8010710:	bb09      	cbnz	r1, 8010756 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010712:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8010714:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010716:	f001 f889 	bl	801182c <xQueueReceiveFromISR>
 801071a:	2801      	cmp	r0, #1
 801071c:	d003      	beq.n	8010726 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 801071e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8010722:	b002      	add	sp, #8
 8010724:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8010726:	9b01      	ldr	r3, [sp, #4]
 8010728:	b90b      	cbnz	r3, 801072e <osSemaphoreAcquire+0x2a>
  stat = osOK;
 801072a:	2000      	movs	r0, #0
 801072c:	e7f9      	b.n	8010722 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 801072e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010736:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	f3bf 8f6f 	isb	sy
 8010742:	e7f2      	b.n	801072a <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010744:	f000 ff94 	bl	8011670 <xQueueSemaphoreTake>
 8010748:	2801      	cmp	r0, #1
 801074a:	d0ee      	beq.n	801072a <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 801074c:	2c00      	cmp	r4, #0
 801074e:	d0e6      	beq.n	801071e <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8010750:	f06f 0001 	mvn.w	r0, #1
 8010754:	e7e5      	b.n	8010722 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8010756:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801075a:	e7e2      	b.n	8010722 <osSemaphoreAcquire+0x1e>

0801075c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801075c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 801075e:	b318      	cbz	r0, 80107a8 <osSemaphoreRelease+0x4c>
 8010760:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8010764:	b1cb      	cbz	r3, 801079a <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8010766:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010768:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 801076a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801076c:	f000 fe91 	bl	8011492 <xQueueGiveFromISR>
 8010770:	2801      	cmp	r0, #1
 8010772:	d004      	beq.n	801077e <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8010774:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8010778:	b003      	add	sp, #12
 801077a:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 801077e:	9b01      	ldr	r3, [sp, #4]
 8010780:	b14b      	cbz	r3, 8010796 <osSemaphoreRelease+0x3a>
 8010782:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801078a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8010796:	2000      	movs	r0, #0
 8010798:	e7ee      	b.n	8010778 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801079a:	461a      	mov	r2, r3
 801079c:	4619      	mov	r1, r3
 801079e:	f000 fd18 	bl	80111d2 <xQueueGenericSend>
 80107a2:	2801      	cmp	r0, #1
 80107a4:	d0f7      	beq.n	8010796 <osSemaphoreRelease+0x3a>
 80107a6:	e7e5      	b.n	8010774 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 80107a8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80107ac:	e7e4      	b.n	8010778 <osSemaphoreRelease+0x1c>

080107ae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80107ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107b0:	4605      	mov	r5, r0
 80107b2:	460e      	mov	r6, r1
 80107b4:	4614      	mov	r4, r2
 80107b6:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80107ba:	b11f      	cbz	r7, 80107c4 <osMessageQueueNew+0x16>
  hQueue = NULL;
 80107bc:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80107be:	4628      	mov	r0, r5
 80107c0:	b003      	add	sp, #12
 80107c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d0f9      	beq.n	80107bc <osMessageQueueNew+0xe>
 80107c8:	2900      	cmp	r1, #0
 80107ca:	d0f7      	beq.n	80107bc <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80107cc:	b1da      	cbz	r2, 8010806 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80107ce:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80107d2:	b183      	cbz	r3, 80107f6 <osMessageQueueNew+0x48>
 80107d4:	2a4f      	cmp	r2, #79	@ 0x4f
 80107d6:	d9f1      	bls.n	80107bc <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107d8:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80107da:	2a00      	cmp	r2, #0
 80107dc:	d0ee      	beq.n	80107bc <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107de:	434d      	muls	r5, r1
 80107e0:	6966      	ldr	r6, [r4, #20]
 80107e2:	42ae      	cmp	r6, r5
 80107e4:	d3ea      	bcc.n	80107bc <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80107e6:	9700      	str	r7, [sp, #0]
 80107e8:	f000 fc3e 	bl	8011068 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80107ec:	4605      	mov	r5, r0
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d0e4      	beq.n	80107bc <osMessageQueueNew+0xe>
        name = attr->name;
 80107f2:	6824      	ldr	r4, [r4, #0]
 80107f4:	e011      	b.n	801081a <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80107f6:	2a00      	cmp	r2, #0
 80107f8:	d1e0      	bne.n	80107bc <osMessageQueueNew+0xe>
 80107fa:	6923      	ldr	r3, [r4, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1dd      	bne.n	80107bc <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010800:	6963      	ldr	r3, [r4, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1da      	bne.n	80107bc <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8010806:	4628      	mov	r0, r5
 8010808:	2200      	movs	r2, #0
 801080a:	4631      	mov	r1, r6
 801080c:	f000 fc7a 	bl	8011104 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8010810:	4605      	mov	r5, r0
 8010812:	2800      	cmp	r0, #0
 8010814:	d0d2      	beq.n	80107bc <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8010816:	2c00      	cmp	r4, #0
 8010818:	d1eb      	bne.n	80107f2 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 801081a:	4621      	mov	r1, r4
 801081c:	4628      	mov	r0, r5
 801081e:	f001 f853 	bl	80118c8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8010822:	e7cc      	b.n	80107be <osMessageQueueNew+0x10>

08010824 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010824:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010826:	461c      	mov	r4, r3
 8010828:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801082c:	b1de      	cbz	r6, 8010866 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801082e:	b338      	cbz	r0, 8010880 <osMessageQueuePut+0x5c>
 8010830:	b331      	cbz	r1, 8010880 <osMessageQueuePut+0x5c>
 8010832:	bb2b      	cbnz	r3, 8010880 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010834:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8010836:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010838:	f000 fdce 	bl	80113d8 <xQueueGenericSendFromISR>
 801083c:	2801      	cmp	r0, #1
 801083e:	d003      	beq.n	8010848 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8010840:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8010844:	b002      	add	sp, #8
 8010846:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8010848:	9b01      	ldr	r3, [sp, #4]
 801084a:	b90b      	cbnz	r3, 8010850 <osMessageQueuePut+0x2c>
  stat = osOK;
 801084c:	2000      	movs	r0, #0
 801084e:	e7f9      	b.n	8010844 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8010850:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010858:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801085c:	f3bf 8f4f 	dsb	sy
 8010860:	f3bf 8f6f 	isb	sy
 8010864:	e7f2      	b.n	801084c <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010866:	b158      	cbz	r0, 8010880 <osMessageQueuePut+0x5c>
 8010868:	b151      	cbz	r1, 8010880 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801086a:	4633      	mov	r3, r6
 801086c:	4622      	mov	r2, r4
 801086e:	f000 fcb0 	bl	80111d2 <xQueueGenericSend>
 8010872:	2801      	cmp	r0, #1
 8010874:	d0ea      	beq.n	801084c <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8010876:	2c00      	cmp	r4, #0
 8010878:	d0e2      	beq.n	8010840 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 801087a:	f06f 0001 	mvn.w	r0, #1
 801087e:	e7e1      	b.n	8010844 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8010880:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8010884:	e7de      	b.n	8010844 <osMessageQueuePut+0x20>

08010886 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010886:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010888:	461c      	mov	r4, r3
 801088a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801088e:	b1db      	cbz	r3, 80108c8 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010890:	b330      	cbz	r0, 80108e0 <osMessageQueueGet+0x5a>
 8010892:	b329      	cbz	r1, 80108e0 <osMessageQueueGet+0x5a>
 8010894:	bb24      	cbnz	r4, 80108e0 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010896:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8010898:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801089a:	f000 ffc7 	bl	801182c <xQueueReceiveFromISR>
 801089e:	2801      	cmp	r0, #1
 80108a0:	d003      	beq.n	80108aa <osMessageQueueGet+0x24>
        stat = osErrorResource;
 80108a2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80108a6:	b003      	add	sp, #12
 80108a8:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 80108aa:	9b01      	ldr	r3, [sp, #4]
 80108ac:	b90b      	cbnz	r3, 80108b2 <osMessageQueueGet+0x2c>
  stat = osOK;
 80108ae:	2000      	movs	r0, #0
 80108b0:	e7f9      	b.n	80108a6 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 80108b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80108b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	f3bf 8f6f 	isb	sy
 80108c6:	e7f2      	b.n	80108ae <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80108c8:	b150      	cbz	r0, 80108e0 <osMessageQueueGet+0x5a>
 80108ca:	b149      	cbz	r1, 80108e0 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80108cc:	4622      	mov	r2, r4
 80108ce:	f000 fe31 	bl	8011534 <xQueueReceive>
 80108d2:	2801      	cmp	r0, #1
 80108d4:	d0eb      	beq.n	80108ae <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 80108d6:	2c00      	cmp	r4, #0
 80108d8:	d0e3      	beq.n	80108a2 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 80108da:	f06f 0001 	mvn.w	r0, #1
 80108de:	e7e2      	b.n	80108a6 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 80108e0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80108e4:	e7df      	b.n	80108a6 <osMessageQueueGet+0x20>
	...

080108e8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80108e8:	4b03      	ldr	r3, [pc, #12]	@ (80108f8 <vApplicationGetIdleTaskMemory+0x10>)
 80108ea:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80108ec:	4b03      	ldr	r3, [pc, #12]	@ (80108fc <vApplicationGetIdleTaskMemory+0x14>)
 80108ee:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80108f0:	2380      	movs	r3, #128	@ 0x80
 80108f2:	6013      	str	r3, [r2, #0]
}
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop
 80108f8:	2400f814 	.word	0x2400f814
 80108fc:	2400f614 	.word	0x2400f614

08010900 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010900:	4b03      	ldr	r3, [pc, #12]	@ (8010910 <vApplicationGetTimerTaskMemory+0x10>)
 8010902:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010904:	4b03      	ldr	r3, [pc, #12]	@ (8010914 <vApplicationGetTimerTaskMemory+0x14>)
 8010906:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801090c:	6013      	str	r3, [r2, #0]
}
 801090e:	4770      	bx	lr
 8010910:	2400f5b4 	.word	0x2400f5b4
 8010914:	2400f1b4 	.word	0x2400f1b4

08010918 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010918:	4b10      	ldr	r3, [pc, #64]	@ (801095c <prvInsertBlockIntoFreeList+0x44>)
{
 801091a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801091c:	461a      	mov	r2, r3
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4283      	cmp	r3, r0
 8010922:	d3fb      	bcc.n	801091c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010924:	6854      	ldr	r4, [r2, #4]
 8010926:	1911      	adds	r1, r2, r4
 8010928:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801092a:	bf01      	itttt	eq
 801092c:	6841      	ldreq	r1, [r0, #4]
 801092e:	4610      	moveq	r0, r2
 8010930:	1909      	addeq	r1, r1, r4
 8010932:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010934:	6844      	ldr	r4, [r0, #4]
 8010936:	1901      	adds	r1, r0, r4
 8010938:	428b      	cmp	r3, r1
 801093a:	d10c      	bne.n	8010956 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801093c:	4908      	ldr	r1, [pc, #32]	@ (8010960 <prvInsertBlockIntoFreeList+0x48>)
 801093e:	6809      	ldr	r1, [r1, #0]
 8010940:	428b      	cmp	r3, r1
 8010942:	d003      	beq.n	801094c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010944:	6859      	ldr	r1, [r3, #4]
 8010946:	4421      	add	r1, r4
 8010948:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801094a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801094c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801094e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010950:	bf18      	it	ne
 8010952:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010954:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010956:	4619      	mov	r1, r3
 8010958:	e7f8      	b.n	801094c <prvInsertBlockIntoFreeList+0x34>
 801095a:	bf00      	nop
 801095c:	2400f890 	.word	0x2400f890
 8010960:	2400f88c 	.word	0x2400f88c

08010964 <pvPortMalloc>:
{
 8010964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010968:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801096a:	f001 f9d9 	bl	8011d20 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801096e:	4940      	ldr	r1, [pc, #256]	@ (8010a70 <pvPortMalloc+0x10c>)
 8010970:	4d40      	ldr	r5, [pc, #256]	@ (8010a74 <pvPortMalloc+0x110>)
 8010972:	680b      	ldr	r3, [r1, #0]
 8010974:	b9f3      	cbnz	r3, 80109b4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8010976:	4a40      	ldr	r2, [pc, #256]	@ (8010a78 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8010978:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801097a:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801097c:	4e3f      	ldr	r6, [pc, #252]	@ (8010a7c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801097e:	bf1b      	ittet	ne
 8010980:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010982:	4b3f      	ldrne	r3, [pc, #252]	@ (8010a80 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010984:	4b3f      	ldreq	r3, [pc, #252]	@ (8010a84 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010986:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 801098a:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801098c:	bf18      	it	ne
 801098e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010990:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010992:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8010994:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010996:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 801099a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801099e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80109a0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80109a2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109a6:	4b38      	ldr	r3, [pc, #224]	@ (8010a88 <pvPortMalloc+0x124>)
 80109a8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109aa:	4b38      	ldr	r3, [pc, #224]	@ (8010a8c <pvPortMalloc+0x128>)
 80109ac:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80109ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80109b2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80109b4:	682e      	ldr	r6, [r5, #0]
 80109b6:	4226      	tst	r6, r4
 80109b8:	d155      	bne.n	8010a66 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 80109ba:	2c00      	cmp	r4, #0
 80109bc:	d046      	beq.n	8010a4c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 80109be:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109c2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80109c4:	bf1c      	itt	ne
 80109c6:	f023 0307 	bicne.w	r3, r3, #7
 80109ca:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d04a      	beq.n	8010a66 <pvPortMalloc+0x102>
 80109d0:	4f2e      	ldr	r7, [pc, #184]	@ (8010a8c <pvPortMalloc+0x128>)
 80109d2:	683c      	ldr	r4, [r7, #0]
 80109d4:	429c      	cmp	r4, r3
 80109d6:	d346      	bcc.n	8010a66 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 80109d8:	4a28      	ldr	r2, [pc, #160]	@ (8010a7c <pvPortMalloc+0x118>)
 80109da:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109dc:	6868      	ldr	r0, [r5, #4]
 80109de:	4298      	cmp	r0, r3
 80109e0:	d204      	bcs.n	80109ec <pvPortMalloc+0x88>
 80109e2:	f8d5 c000 	ldr.w	ip, [r5]
 80109e6:	f1bc 0f00 	cmp.w	ip, #0
 80109ea:	d115      	bne.n	8010a18 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 80109ec:	6809      	ldr	r1, [r1, #0]
 80109ee:	42a9      	cmp	r1, r5
 80109f0:	d039      	beq.n	8010a66 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109f2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80109f4:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109f8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109fa:	1ac2      	subs	r2, r0, r3
 80109fc:	2a10      	cmp	r2, #16
 80109fe:	d912      	bls.n	8010a26 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a00:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a02:	0741      	lsls	r1, r0, #29
 8010a04:	d00b      	beq.n	8010a1e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
 8010a16:	e7fe      	b.n	8010a16 <pvPortMalloc+0xb2>
 8010a18:	462a      	mov	r2, r5
 8010a1a:	4665      	mov	r5, ip
 8010a1c:	e7de      	b.n	80109dc <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a1e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a20:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a22:	f7ff ff79 	bl	8010918 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a26:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a28:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a2a:	4917      	ldr	r1, [pc, #92]	@ (8010a88 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a2c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a2e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a30:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8010a32:	4a17      	ldr	r2, [pc, #92]	@ (8010a90 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a34:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 8010a36:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8010a38:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a3a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 8010a3c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a40:	bf38      	it	cc
 8010a42:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a44:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a48:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8010a4a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8010a4c:	f001 fa0c 	bl	8011e68 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a50:	0763      	lsls	r3, r4, #29
 8010a52:	d00a      	beq.n	8010a6a <pvPortMalloc+0x106>
 8010a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a58:	f383 8811 	msr	BASEPRI, r3
 8010a5c:	f3bf 8f6f 	isb	sy
 8010a60:	f3bf 8f4f 	dsb	sy
 8010a64:	e7fe      	b.n	8010a64 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 8010a66:	2400      	movs	r4, #0
 8010a68:	e7f0      	b.n	8010a4c <pvPortMalloc+0xe8>
}
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a70:	2400f88c 	.word	0x2400f88c
 8010a74:	2400f878 	.word	0x2400f878
 8010a78:	2400f898 	.word	0x2400f898
 8010a7c:	2400f890 	.word	0x2400f890
 8010a80:	24027f38 	.word	0x24027f38
 8010a84:	000186a0 	.word	0x000186a0
 8010a88:	2400f884 	.word	0x2400f884
 8010a8c:	2400f888 	.word	0x2400f888
 8010a90:	2400f880 	.word	0x2400f880

08010a94 <vPortFree>:
{
 8010a94:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010a96:	4604      	mov	r4, r0
 8010a98:	b390      	cbz	r0, 8010b00 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8010b04 <vPortFree+0x70>)
 8010a9c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010aa0:	6812      	ldr	r2, [r2, #0]
 8010aa2:	4213      	tst	r3, r2
 8010aa4:	d108      	bne.n	8010ab8 <vPortFree+0x24>
 8010aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aaa:	f383 8811 	msr	BASEPRI, r3
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	e7fe      	b.n	8010ab6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010ab8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8010abc:	b141      	cbz	r1, 8010ad0 <vPortFree+0x3c>
 8010abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	e7fe      	b.n	8010ace <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ad0:	ea23 0302 	bic.w	r3, r3, r2
 8010ad4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8010ad8:	f001 f922 	bl	8011d20 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010adc:	4a0a      	ldr	r2, [pc, #40]	@ (8010b08 <vPortFree+0x74>)
 8010ade:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ae2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ae6:	6811      	ldr	r1, [r2, #0]
 8010ae8:	440b      	add	r3, r1
 8010aea:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010aec:	f7ff ff14 	bl	8010918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010af0:	4a06      	ldr	r2, [pc, #24]	@ (8010b0c <vPortFree+0x78>)
 8010af2:	6813      	ldr	r3, [r2, #0]
 8010af4:	3301      	adds	r3, #1
}
 8010af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8010afa:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8010afc:	f001 b9b4 	b.w	8011e68 <xTaskResumeAll>
}
 8010b00:	bd10      	pop	{r4, pc}
 8010b02:	bf00      	nop
 8010b04:	2400f878 	.word	0x2400f878
 8010b08:	2400f888 	.word	0x2400f888
 8010b0c:	2400f87c 	.word	0x2400f87c

08010b10 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b10:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010b14:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b18:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b1a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b1c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010b20:	2300      	movs	r3, #0
 8010b22:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010b24:	4770      	bx	lr

08010b26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010b26:	2300      	movs	r3, #0
 8010b28:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010b2a:	4770      	bx	lr

08010b2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010b2c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b2e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8010b30:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b32:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010b34:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010b36:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8010b38:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8010b3a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	6003      	str	r3, [r0, #0]
}
 8010b40:	4770      	bx	lr

08010b42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b42:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010b44:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b46:	1c63      	adds	r3, r4, #1
 8010b48:	d10a      	bne.n	8010b60 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b4a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b4c:	685a      	ldr	r2, [r3, #4]
 8010b4e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b50:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b52:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b54:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8010b56:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8010b58:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	6003      	str	r3, [r0, #0]
}
 8010b5e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b60:	f100 0208 	add.w	r2, r0, #8
 8010b64:	4613      	mov	r3, r2
 8010b66:	6852      	ldr	r2, [r2, #4]
 8010b68:	6815      	ldr	r5, [r2, #0]
 8010b6a:	42a5      	cmp	r5, r4
 8010b6c:	d9fa      	bls.n	8010b64 <vListInsert+0x22>
 8010b6e:	e7ed      	b.n	8010b4c <vListInsert+0xa>

08010b70 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b70:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b72:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8010b76:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b78:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b7a:	6859      	ldr	r1, [r3, #4]
 8010b7c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b7e:	bf08      	it	eq
 8010b80:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b82:	2200      	movs	r2, #0
 8010b84:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	3a01      	subs	r2, #1
 8010b8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b8c:	6818      	ldr	r0, [r3, #0]
}
 8010b8e:	4770      	bx	lr

08010b90 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010b90:	4808      	ldr	r0, [pc, #32]	@ (8010bb4 <prvPortStartFirstTask+0x24>)
 8010b92:	6800      	ldr	r0, [r0, #0]
 8010b94:	6800      	ldr	r0, [r0, #0]
 8010b96:	f380 8808 	msr	MSP, r0
 8010b9a:	f04f 0000 	mov.w	r0, #0
 8010b9e:	f380 8814 	msr	CONTROL, r0
 8010ba2:	b662      	cpsie	i
 8010ba4:	b661      	cpsie	f
 8010ba6:	f3bf 8f4f 	dsb	sy
 8010baa:	f3bf 8f6f 	isb	sy
 8010bae:	df00      	svc	0
 8010bb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bb2:	0000      	.short	0x0000
 8010bb4:	e000ed08 	.word	0xe000ed08

08010bb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010bb8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010bc8 <vPortEnableVFP+0x10>
 8010bbc:	6801      	ldr	r1, [r0, #0]
 8010bbe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010bc2:	6001      	str	r1, [r0, #0]
 8010bc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010bc6:	0000      	.short	0x0000
 8010bc8:	e000ed88 	.word	0xe000ed88

08010bcc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8010bcc:	2300      	movs	r3, #0
{
 8010bce:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8010bd0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8010bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010c08 <prvTaskExitError+0x3c>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	d008      	beq.n	8010bec <prvTaskExitError+0x20>
 8010bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bde:	f383 8811 	msr	BASEPRI, r3
 8010be2:	f3bf 8f6f 	isb	sy
 8010be6:	f3bf 8f4f 	dsb	sy
 8010bea:	e7fe      	b.n	8010bea <prvTaskExitError+0x1e>
 8010bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8010bfc:	9b01      	ldr	r3, [sp, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d0fc      	beq.n	8010bfc <prvTaskExitError+0x30>
}
 8010c02:	b002      	add	sp, #8
 8010c04:	4770      	bx	lr
 8010c06:	bf00      	nop
 8010c08:	24000078 	.word	0x24000078

08010c0c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010c0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010c10:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010c14:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8010c18:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010c1a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010c1c:	4b03      	ldr	r3, [pc, #12]	@ (8010c2c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010c1e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010c20:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010c22:	f06f 0302 	mvn.w	r3, #2
 8010c26:	6203      	str	r3, [r0, #32]
}
 8010c28:	4770      	bx	lr
 8010c2a:	bf00      	nop
 8010c2c:	08010bcd 	.word	0x08010bcd

08010c30 <SVC_Handler>:
	__asm volatile (
 8010c30:	4b07      	ldr	r3, [pc, #28]	@ (8010c50 <pxCurrentTCBConst2>)
 8010c32:	6819      	ldr	r1, [r3, #0]
 8010c34:	6808      	ldr	r0, [r1, #0]
 8010c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3a:	f380 8809 	msr	PSP, r0
 8010c3e:	f3bf 8f6f 	isb	sy
 8010c42:	f04f 0000 	mov.w	r0, #0
 8010c46:	f380 8811 	msr	BASEPRI, r0
 8010c4a:	4770      	bx	lr
 8010c4c:	f3af 8000 	nop.w

08010c50 <pxCurrentTCBConst2>:
 8010c50:	24028478 	.word	0x24028478

08010c54 <vPortEnterCritical>:
 8010c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c58:	f383 8811 	msr	BASEPRI, r3
 8010c5c:	f3bf 8f6f 	isb	sy
 8010c60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8010c64:	4a0a      	ldr	r2, [pc, #40]	@ (8010c90 <vPortEnterCritical+0x3c>)
 8010c66:	6813      	ldr	r3, [r2, #0]
 8010c68:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8010c6a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8010c6c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8010c6e:	d10e      	bne.n	8010c8e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010c70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010c74:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	b143      	cbz	r3, 8010c8e <vPortEnterCritical+0x3a>
 8010c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c80:	f383 8811 	msr	BASEPRI, r3
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	e7fe      	b.n	8010c8c <vPortEnterCritical+0x38>
}
 8010c8e:	4770      	bx	lr
 8010c90:	24000078 	.word	0x24000078

08010c94 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010c94:	4a08      	ldr	r2, [pc, #32]	@ (8010cb8 <vPortExitCritical+0x24>)
 8010c96:	6813      	ldr	r3, [r2, #0]
 8010c98:	b943      	cbnz	r3, 8010cac <vPortExitCritical+0x18>
 8010c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c9e:	f383 8811 	msr	BASEPRI, r3
 8010ca2:	f3bf 8f6f 	isb	sy
 8010ca6:	f3bf 8f4f 	dsb	sy
 8010caa:	e7fe      	b.n	8010caa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8010cac:	3b01      	subs	r3, #1
 8010cae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010cb0:	b90b      	cbnz	r3, 8010cb6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010cb2:	f383 8811 	msr	BASEPRI, r3
}
 8010cb6:	4770      	bx	lr
 8010cb8:	24000078 	.word	0x24000078
 8010cbc:	00000000 	.word	0x00000000

08010cc0 <PendSV_Handler>:
	__asm volatile
 8010cc0:	f3ef 8009 	mrs	r0, PSP
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	4b15      	ldr	r3, [pc, #84]	@ (8010d20 <pxCurrentTCBConst>)
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	f01e 0f10 	tst.w	lr, #16
 8010cd0:	bf08      	it	eq
 8010cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cda:	6010      	str	r0, [r2, #0]
 8010cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010ce4:	f380 8811 	msr	BASEPRI, r0
 8010ce8:	f3bf 8f4f 	dsb	sy
 8010cec:	f3bf 8f6f 	isb	sy
 8010cf0:	f001 f9bc 	bl	801206c <vTaskSwitchContext>
 8010cf4:	f04f 0000 	mov.w	r0, #0
 8010cf8:	f380 8811 	msr	BASEPRI, r0
 8010cfc:	bc09      	pop	{r0, r3}
 8010cfe:	6819      	ldr	r1, [r3, #0]
 8010d00:	6808      	ldr	r0, [r1, #0]
 8010d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d06:	f01e 0f10 	tst.w	lr, #16
 8010d0a:	bf08      	it	eq
 8010d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010d10:	f380 8809 	msr	PSP, r0
 8010d14:	f3bf 8f6f 	isb	sy
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	f3af 8000 	nop.w

08010d20 <pxCurrentTCBConst>:
 8010d20:	24028478 	.word	0x24028478

08010d24 <xPortSysTickHandler>:
{
 8010d24:	b508      	push	{r3, lr}
	__asm volatile
 8010d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d2a:	f383 8811 	msr	BASEPRI, r3
 8010d2e:	f3bf 8f6f 	isb	sy
 8010d32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8010d36:	f001 f801 	bl	8011d3c <xTaskIncrementTick>
 8010d3a:	b128      	cbz	r0, 8010d48 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8010d48:	2300      	movs	r3, #0
 8010d4a:	f383 8811 	msr	BASEPRI, r3
}
 8010d4e:	bd08      	pop	{r3, pc}

08010d50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d50:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8010d54:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d56:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d5a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d5c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d5e:	4b04      	ldr	r3, [pc, #16]	@ (8010d70 <vPortSetupTimerInterrupt+0x20>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d66:	3b01      	subs	r3, #1
 8010d68:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d6a:	2307      	movs	r3, #7
 8010d6c:	6113      	str	r3, [r2, #16]
}
 8010d6e:	4770      	bx	lr
 8010d70:	2400006c 	.word	0x2400006c

08010d74 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010d74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8010d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010d7a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8010d7e:	4a38      	ldr	r2, [pc, #224]	@ (8010e60 <xPortStartScheduler+0xec>)
 8010d80:	4291      	cmp	r1, r2
 8010d82:	d108      	bne.n	8010d96 <xPortStartScheduler+0x22>
	__asm volatile
 8010d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d88:	f383 8811 	msr	BASEPRI, r3
 8010d8c:	f3bf 8f6f 	isb	sy
 8010d90:	f3bf 8f4f 	dsb	sy
 8010d94:	e7fe      	b.n	8010d94 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010d96:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8010d9a:	4b32      	ldr	r3, [pc, #200]	@ (8010e64 <xPortStartScheduler+0xf0>)
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d108      	bne.n	8010db2 <xPortStartScheduler+0x3e>
 8010da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da4:	f383 8811 	msr	BASEPRI, r3
 8010da8:	f3bf 8f6f 	isb	sy
 8010dac:	f3bf 8f4f 	dsb	sy
 8010db0:	e7fe      	b.n	8010db0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010db2:	4b2d      	ldr	r3, [pc, #180]	@ (8010e68 <xPortStartScheduler+0xf4>)
 8010db4:	781a      	ldrb	r2, [r3, #0]
 8010db6:	b2d2      	uxtb	r2, r2
 8010db8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010dba:	22ff      	movs	r2, #255	@ 0xff
 8010dbc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010dbe:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8010e6c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010dc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010dcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010dd0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010dd2:	2307      	movs	r3, #7
 8010dd4:	4a26      	ldr	r2, [pc, #152]	@ (8010e70 <xPortStartScheduler+0xfc>)
 8010dd6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010dd8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8010ddc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010dde:	0609      	lsls	r1, r1, #24
 8010de0:	d40a      	bmi.n	8010df8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010de2:	2b03      	cmp	r3, #3
 8010de4:	d011      	beq.n	8010e0a <xPortStartScheduler+0x96>
 8010de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dea:	f383 8811 	msr	BASEPRI, r3
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f3bf 8f4f 	dsb	sy
 8010df6:	e7fe      	b.n	8010df6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8010df8:	3b01      	subs	r3, #1
 8010dfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010dfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	f88d 3003 	strb.w	r3, [sp, #3]
 8010e08:	e7e6      	b.n	8010dd8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010e0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010e0e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8010e12:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010e14:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010e16:	9b01      	ldr	r3, [sp, #4]
 8010e18:	4a13      	ldr	r2, [pc, #76]	@ (8010e68 <xPortStartScheduler+0xf4>)
 8010e1a:	b2db      	uxtb	r3, r3
 8010e1c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010e1e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8010e22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010e26:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010e2a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8010e2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010e32:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8010e36:	f7ff ff8b 	bl	8010d50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8010e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8010e74 <xPortStartScheduler+0x100>)
 8010e3c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8010e3e:	f7ff febb 	bl	8010bb8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010e42:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8010e46:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010e4a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8010e4e:	f7ff fe9f 	bl	8010b90 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8010e52:	f001 f90b 	bl	801206c <vTaskSwitchContext>
}
 8010e56:	4628      	mov	r0, r5
	prvTaskExitError();
 8010e58:	f7ff feb8 	bl	8010bcc <prvTaskExitError>
}
 8010e5c:	b003      	add	sp, #12
 8010e5e:	bd30      	pop	{r4, r5, pc}
 8010e60:	410fc271 	.word	0x410fc271
 8010e64:	410fc270 	.word	0x410fc270
 8010e68:	e000e400 	.word	0xe000e400
 8010e6c:	24027f3c 	.word	0x24027f3c
 8010e70:	24027f38 	.word	0x24027f38
 8010e74:	24000078 	.word	0x24000078

08010e78 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010e78:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010e7c:	2b0f      	cmp	r3, #15
 8010e7e:	d90e      	bls.n	8010e9e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010e80:	4a11      	ldr	r2, [pc, #68]	@ (8010ec8 <vPortValidateInterruptPriority+0x50>)
 8010e82:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010e84:	4a11      	ldr	r2, [pc, #68]	@ (8010ecc <vPortValidateInterruptPriority+0x54>)
 8010e86:	7812      	ldrb	r2, [r2, #0]
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d908      	bls.n	8010e9e <vPortValidateInterruptPriority+0x26>
 8010e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e90:	f383 8811 	msr	BASEPRI, r3
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	f3bf 8f4f 	dsb	sy
 8010e9c:	e7fe      	b.n	8010e9c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010e9e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8010ed0 <vPortValidateInterruptPriority+0x58>)
 8010ea4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8010ea8:	6812      	ldr	r2, [r2, #0]
 8010eaa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d908      	bls.n	8010ec4 <vPortValidateInterruptPriority+0x4c>
 8010eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eb6:	f383 8811 	msr	BASEPRI, r3
 8010eba:	f3bf 8f6f 	isb	sy
 8010ebe:	f3bf 8f4f 	dsb	sy
 8010ec2:	e7fe      	b.n	8010ec2 <vPortValidateInterruptPriority+0x4a>
	}
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop
 8010ec8:	e000e3f0 	.word	0xe000e3f0
 8010ecc:	24027f3c 	.word	0x24027f3c
 8010ed0:	24027f38 	.word	0x24027f38

08010ed4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ed4:	b510      	push	{r4, lr}
 8010ed6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ed8:	f7ff febc 	bl	8010c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010edc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010ede:	f7ff fed9 	bl	8010c94 <vPortExitCritical>

	return xReturn;
}
 8010ee2:	fab4 f084 	clz	r0, r4
 8010ee6:	0940      	lsrs	r0, r0, #5
 8010ee8:	bd10      	pop	{r4, pc}

08010eea <prvCopyDataToQueue>:
{
 8010eea:	b570      	push	{r4, r5, r6, lr}
 8010eec:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010eee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8010ef0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ef2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ef4:	b942      	cbnz	r2, 8010f08 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ef6:	6806      	ldr	r6, [r0, #0]
 8010ef8:	b99e      	cbnz	r6, 8010f22 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010efa:	6880      	ldr	r0, [r0, #8]
 8010efc:	f001 fa16 	bl	801232c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010f00:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f02:	3501      	adds	r5, #1
 8010f04:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8010f06:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010f08:	b96e      	cbnz	r6, 8010f26 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f0a:	6840      	ldr	r0, [r0, #4]
 8010f0c:	f019 f851 	bl	8029fb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f10:	6863      	ldr	r3, [r4, #4]
 8010f12:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010f14:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f16:	68a2      	ldr	r2, [r4, #8]
 8010f18:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f1a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010f1c:	bf24      	itt	cs
 8010f1e:	6823      	ldrcs	r3, [r4, #0]
 8010f20:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8010f22:	2000      	movs	r0, #0
 8010f24:	e7ed      	b.n	8010f02 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010f26:	68c0      	ldr	r0, [r0, #12]
 8010f28:	f019 f843 	bl	8029fb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010f2c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010f2e:	68e3      	ldr	r3, [r4, #12]
 8010f30:	4251      	negs	r1, r2
 8010f32:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010f38:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010f3a:	bf3e      	ittt	cc
 8010f3c:	68a3      	ldrcc	r3, [r4, #8]
 8010f3e:	185b      	addcc	r3, r3, r1
 8010f40:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8010f42:	2e02      	cmp	r6, #2
 8010f44:	d1ed      	bne.n	8010f22 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f46:	b10d      	cbz	r5, 8010f4c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8010f48:	3d01      	subs	r5, #1
 8010f4a:	e7ea      	b.n	8010f22 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	e7d8      	b.n	8010f02 <prvCopyDataToQueue+0x18>

08010f50 <prvCopyDataFromQueue>:
{
 8010f50:	4603      	mov	r3, r0
 8010f52:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8010f56:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010f58:	b162      	cbz	r2, 8010f74 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f5a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f5c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f5e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f60:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f62:	60dc      	str	r4, [r3, #12]
}
 8010f64:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010f68:	bf24      	itt	cs
 8010f6a:	6819      	ldrcs	r1, [r3, #0]
 8010f6c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f6e:	68d9      	ldr	r1, [r3, #12]
 8010f70:	f019 b81f 	b.w	8029fb2 <memcpy>
}
 8010f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f78:	4770      	bx	lr

08010f7a <prvUnlockQueue>:
{
 8010f7a:	b570      	push	{r4, r5, r6, lr}
 8010f7c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010f7e:	f7ff fe69 	bl	8010c54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010f82:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f86:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8010f8a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f8c:	2d00      	cmp	r5, #0
 8010f8e:	dc14      	bgt.n	8010fba <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8010f90:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f92:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8010f96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8010f9a:	f7ff fe7b 	bl	8010c94 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010f9e:	f7ff fe59 	bl	8010c54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010fa2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 8010fa6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010fa8:	2d00      	cmp	r5, #0
 8010faa:	dc12      	bgt.n	8010fd2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8010fac:	23ff      	movs	r3, #255	@ 0xff
 8010fae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8010fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8010fb6:	f7ff be6d 	b.w	8010c94 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010fba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d0e7      	beq.n	8010f90 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f001 f8cf 	bl	8012164 <xTaskRemoveFromEventList>
 8010fc6:	b108      	cbz	r0, 8010fcc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8010fc8:	f001 f956 	bl	8012278 <vTaskMissedYield>
			--cTxLock;
 8010fcc:	3d01      	subs	r5, #1
 8010fce:	b26d      	sxtb	r5, r5
 8010fd0:	e7dc      	b.n	8010f8c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fd2:	6923      	ldr	r3, [r4, #16]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d0e9      	beq.n	8010fac <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f001 f8c3 	bl	8012164 <xTaskRemoveFromEventList>
 8010fde:	b108      	cbz	r0, 8010fe4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010fe0:	f001 f94a 	bl	8012278 <vTaskMissedYield>
				--cRxLock;
 8010fe4:	3d01      	subs	r5, #1
 8010fe6:	b26d      	sxtb	r5, r5
 8010fe8:	e7de      	b.n	8010fa8 <prvUnlockQueue+0x2e>

08010fea <xQueueGenericReset>:
{
 8010fea:	b538      	push	{r3, r4, r5, lr}
 8010fec:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010fee:	4604      	mov	r4, r0
 8010ff0:	b940      	cbnz	r0, 8011004 <xQueueGenericReset+0x1a>
 8010ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ff6:	f383 8811 	msr	BASEPRI, r3
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	e7fe      	b.n	8011002 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8011004:	f7ff fe26 	bl	8010c54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011008:	6822      	ldr	r2, [r4, #0]
 801100a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801100e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011010:	434b      	muls	r3, r1
 8011012:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011014:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011016:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011018:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801101a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 801101c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801101e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011020:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8011022:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011026:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 801102a:	b9a5      	cbnz	r5, 8011056 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801102c:	6923      	ldr	r3, [r4, #16]
 801102e:	b173      	cbz	r3, 801104e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011030:	f104 0010 	add.w	r0, r4, #16
 8011034:	f001 f896 	bl	8012164 <xTaskRemoveFromEventList>
 8011038:	b148      	cbz	r0, 801104e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 801103a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801103e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011042:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 801104e:	f7ff fe21 	bl	8010c94 <vPortExitCritical>
}
 8011052:	2001      	movs	r0, #1
 8011054:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011056:	f104 0010 	add.w	r0, r4, #16
 801105a:	f7ff fd59 	bl	8010b10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801105e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011062:	f7ff fd55 	bl	8010b10 <vListInitialise>
 8011066:	e7f2      	b.n	801104e <xQueueGenericReset+0x64>

08011068 <xQueueGenericCreateStatic>:
	{
 8011068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801106a:	460d      	mov	r5, r1
 801106c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801106e:	b940      	cbnz	r0, 8011082 <xQueueGenericCreateStatic+0x1a>
 8011070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011074:	f383 8811 	msr	BASEPRI, r3
 8011078:	f3bf 8f6f 	isb	sy
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	e7fe      	b.n	8011080 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8011082:	b943      	cbnz	r3, 8011096 <xQueueGenericCreateStatic+0x2e>
 8011084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011088:	f383 8811 	msr	BASEPRI, r3
 801108c:	f3bf 8f6f 	isb	sy
 8011090:	f3bf 8f4f 	dsb	sy
 8011094:	e7fe      	b.n	8011094 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011096:	b14a      	cbz	r2, 80110ac <xQueueGenericCreateStatic+0x44>
 8011098:	b991      	cbnz	r1, 80110c0 <xQueueGenericCreateStatic+0x58>
 801109a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801109e:	f383 8811 	msr	BASEPRI, r3
 80110a2:	f3bf 8f6f 	isb	sy
 80110a6:	f3bf 8f4f 	dsb	sy
 80110aa:	e7fe      	b.n	80110aa <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80110ac:	b141      	cbz	r1, 80110c0 <xQueueGenericCreateStatic+0x58>
 80110ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110b2:	f383 8811 	msr	BASEPRI, r3
 80110b6:	f3bf 8f6f 	isb	sy
 80110ba:	f3bf 8f4f 	dsb	sy
 80110be:	e7fe      	b.n	80110be <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80110c0:	2350      	movs	r3, #80	@ 0x50
 80110c2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80110c4:	9b01      	ldr	r3, [sp, #4]
 80110c6:	2b50      	cmp	r3, #80	@ 0x50
 80110c8:	d008      	beq.n	80110dc <xQueueGenericCreateStatic+0x74>
 80110ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ce:	f383 8811 	msr	BASEPRI, r3
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	f3bf 8f4f 	dsb	sy
 80110da:	e7fe      	b.n	80110da <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80110dc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80110de:	2d00      	cmp	r5, #0
 80110e0:	bf08      	it	eq
 80110e2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80110e4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80110e6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80110ea:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80110ec:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80110f0:	4620      	mov	r0, r4
 80110f2:	f7ff ff7a 	bl	8010fea <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80110f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 80110fa:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80110fc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8011100:	b003      	add	sp, #12
 8011102:	bd30      	pop	{r4, r5, pc}

08011104 <xQueueGenericCreate>:
	{
 8011104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011106:	460d      	mov	r5, r1
 8011108:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801110a:	4606      	mov	r6, r0
 801110c:	b940      	cbnz	r0, 8011120 <xQueueGenericCreate+0x1c>
 801110e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011112:	f383 8811 	msr	BASEPRI, r3
 8011116:	f3bf 8f6f 	isb	sy
 801111a:	f3bf 8f4f 	dsb	sy
 801111e:	e7fe      	b.n	801111e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011120:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011122:	3050      	adds	r0, #80	@ 0x50
 8011124:	f7ff fc1e 	bl	8010964 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8011128:	4604      	mov	r4, r0
 801112a:	b170      	cbz	r0, 801114a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801112c:	2300      	movs	r3, #0
 801112e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8011132:	b165      	cbz	r5, 801114e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011134:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011138:	2101      	movs	r1, #1
 801113a:	4620      	mov	r0, r4
 801113c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 801113e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011142:	f7ff ff52 	bl	8010fea <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8011146:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 801114a:	4620      	mov	r0, r4
 801114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801114e:	4603      	mov	r3, r0
 8011150:	e7f2      	b.n	8011138 <xQueueGenericCreate+0x34>

08011152 <xQueueCreateCountingSemaphoreStatic>:
	{
 8011152:	b513      	push	{r0, r1, r4, lr}
 8011154:	4613      	mov	r3, r2
 8011156:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8011158:	b940      	cbnz	r0, 801116c <xQueueCreateCountingSemaphoreStatic+0x1a>
 801115a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801115e:	f383 8811 	msr	BASEPRI, r3
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	e7fe      	b.n	801116a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 801116c:	4288      	cmp	r0, r1
 801116e:	d208      	bcs.n	8011182 <xQueueCreateCountingSemaphoreStatic+0x30>
 8011170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	e7fe      	b.n	8011180 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011182:	2202      	movs	r2, #2
 8011184:	9200      	str	r2, [sp, #0]
 8011186:	2200      	movs	r2, #0
 8011188:	4611      	mov	r1, r2
 801118a:	f7ff ff6d 	bl	8011068 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 801118e:	b100      	cbz	r0, 8011192 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011190:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8011192:	b002      	add	sp, #8
 8011194:	bd10      	pop	{r4, pc}

08011196 <xQueueCreateCountingSemaphore>:
	{
 8011196:	b510      	push	{r4, lr}
 8011198:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 801119a:	b940      	cbnz	r0, 80111ae <xQueueCreateCountingSemaphore+0x18>
 801119c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a0:	f383 8811 	msr	BASEPRI, r3
 80111a4:	f3bf 8f6f 	isb	sy
 80111a8:	f3bf 8f4f 	dsb	sy
 80111ac:	e7fe      	b.n	80111ac <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80111ae:	4288      	cmp	r0, r1
 80111b0:	d208      	bcs.n	80111c4 <xQueueCreateCountingSemaphore+0x2e>
 80111b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111b6:	f383 8811 	msr	BASEPRI, r3
 80111ba:	f3bf 8f6f 	isb	sy
 80111be:	f3bf 8f4f 	dsb	sy
 80111c2:	e7fe      	b.n	80111c2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80111c4:	2202      	movs	r2, #2
 80111c6:	2100      	movs	r1, #0
 80111c8:	f7ff ff9c 	bl	8011104 <xQueueGenericCreate>
		if( xHandle != NULL )
 80111cc:	b100      	cbz	r0, 80111d0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80111ce:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80111d0:	bd10      	pop	{r4, pc}

080111d2 <xQueueGenericSend>:
{
 80111d2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80111d6:	460f      	mov	r7, r1
 80111d8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80111da:	4604      	mov	r4, r0
{
 80111dc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80111de:	b940      	cbnz	r0, 80111f2 <xQueueGenericSend+0x20>
 80111e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111e4:	f383 8811 	msr	BASEPRI, r3
 80111e8:	f3bf 8f6f 	isb	sy
 80111ec:	f3bf 8f4f 	dsb	sy
 80111f0:	e7fe      	b.n	80111f0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111f2:	b951      	cbnz	r1, 801120a <xQueueGenericSend+0x38>
 80111f4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80111f6:	b143      	cbz	r3, 801120a <xQueueGenericSend+0x38>
 80111f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111fc:	f383 8811 	msr	BASEPRI, r3
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	e7fe      	b.n	8011208 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801120a:	2e02      	cmp	r6, #2
 801120c:	d10b      	bne.n	8011226 <xQueueGenericSend+0x54>
 801120e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011210:	2b01      	cmp	r3, #1
 8011212:	d008      	beq.n	8011226 <xQueueGenericSend+0x54>
 8011214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011218:	f383 8811 	msr	BASEPRI, r3
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	e7fe      	b.n	8011224 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011226:	f001 f833 	bl	8012290 <xTaskGetSchedulerState>
 801122a:	4605      	mov	r5, r0
 801122c:	b330      	cbz	r0, 801127c <xQueueGenericSend+0xaa>
 801122e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8011230:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8011234:	f7ff fd0e 	bl	8010c54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011238:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801123a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801123c:	429a      	cmp	r2, r3
 801123e:	d301      	bcc.n	8011244 <xQueueGenericSend+0x72>
 8011240:	2e02      	cmp	r6, #2
 8011242:	d127      	bne.n	8011294 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011244:	4632      	mov	r2, r6
 8011246:	4639      	mov	r1, r7
 8011248:	4620      	mov	r0, r4
 801124a:	f7ff fe4e 	bl	8010eea <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801124e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011250:	b11b      	cbz	r3, 801125a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011252:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011256:	f000 ff85 	bl	8012164 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 801125a:	b148      	cbz	r0, 8011270 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 801125c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011264:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011268:	f3bf 8f4f 	dsb	sy
 801126c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011270:	f7ff fd10 	bl	8010c94 <vPortExitCritical>
				return pdPASS;
 8011274:	2001      	movs	r0, #1
}
 8011276:	b004      	add	sp, #16
 8011278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801127c:	9b01      	ldr	r3, [sp, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d0d6      	beq.n	8011230 <xQueueGenericSend+0x5e>
 8011282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011286:	f383 8811 	msr	BASEPRI, r3
 801128a:	f3bf 8f6f 	isb	sy
 801128e:	f3bf 8f4f 	dsb	sy
 8011292:	e7fe      	b.n	8011292 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011294:	9b01      	ldr	r3, [sp, #4]
 8011296:	b91b      	cbnz	r3, 80112a0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8011298:	f7ff fcfc 	bl	8010c94 <vPortExitCritical>
					return errQUEUE_FULL;
 801129c:	2000      	movs	r0, #0
 801129e:	e7ea      	b.n	8011276 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80112a0:	b915      	cbnz	r5, 80112a8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80112a2:	a802      	add	r0, sp, #8
 80112a4:	f000 ffa0 	bl	80121e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80112a8:	f7ff fcf4 	bl	8010c94 <vPortExitCritical>
		vTaskSuspendAll();
 80112ac:	f000 fd38 	bl	8011d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80112b0:	f7ff fcd0 	bl	8010c54 <vPortEnterCritical>
 80112b4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80112b8:	2bff      	cmp	r3, #255	@ 0xff
 80112ba:	d101      	bne.n	80112c0 <xQueueGenericSend+0xee>
 80112bc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80112c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80112c4:	2bff      	cmp	r3, #255	@ 0xff
 80112c6:	d101      	bne.n	80112cc <xQueueGenericSend+0xfa>
 80112c8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 80112cc:	f7ff fce2 	bl	8010c94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80112d0:	a901      	add	r1, sp, #4
 80112d2:	a802      	add	r0, sp, #8
 80112d4:	f000 ff94 	bl	8012200 <xTaskCheckForTimeOut>
 80112d8:	bb38      	cbnz	r0, 801132a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112da:	f7ff fcbb 	bl	8010c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80112de:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80112e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d10e      	bne.n	8011304 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80112e6:	f7ff fcd5 	bl	8010c94 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80112ea:	9901      	ldr	r1, [sp, #4]
 80112ec:	f104 0010 	add.w	r0, r4, #16
 80112f0:	f000 ff00 	bl	80120f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80112f4:	4620      	mov	r0, r4
 80112f6:	f7ff fe40 	bl	8010f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80112fa:	f000 fdb5 	bl	8011e68 <xTaskResumeAll>
 80112fe:	b148      	cbz	r0, 8011314 <xQueueGenericSend+0x142>
 8011300:	2501      	movs	r5, #1
 8011302:	e797      	b.n	8011234 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8011304:	f7ff fcc6 	bl	8010c94 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8011308:	4620      	mov	r0, r4
 801130a:	f7ff fe36 	bl	8010f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801130e:	f000 fdab 	bl	8011e68 <xTaskResumeAll>
 8011312:	e7f5      	b.n	8011300 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8011314:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801131c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	e7ea      	b.n	8011300 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 801132a:	4620      	mov	r0, r4
 801132c:	f7ff fe25 	bl	8010f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011330:	f000 fd9a 	bl	8011e68 <xTaskResumeAll>
			return errQUEUE_FULL;
 8011334:	e7b2      	b.n	801129c <xQueueGenericSend+0xca>

08011336 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011336:	2200      	movs	r2, #0
	{
 8011338:	460b      	mov	r3, r1
 801133a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801133c:	4611      	mov	r1, r2
 801133e:	9000      	str	r0, [sp, #0]
 8011340:	2001      	movs	r0, #1
 8011342:	f7ff fe91 	bl	8011068 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8011346:	4604      	mov	r4, r0
 8011348:	b138      	cbz	r0, 801135a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801134a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801134c:	461a      	mov	r2, r3
 801134e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011350:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011352:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011354:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011356:	f7ff ff3c 	bl	80111d2 <xQueueGenericSend>
	}
 801135a:	4620      	mov	r0, r4
 801135c:	b002      	add	sp, #8
 801135e:	bd10      	pop	{r4, pc}

08011360 <xQueueGiveMutexRecursive>:
	{
 8011360:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8011362:	4604      	mov	r4, r0
 8011364:	b940      	cbnz	r0, 8011378 <xQueueGiveMutexRecursive+0x18>
 8011366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801136a:	f383 8811 	msr	BASEPRI, r3
 801136e:	f3bf 8f6f 	isb	sy
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	e7fe      	b.n	8011376 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011378:	6885      	ldr	r5, [r0, #8]
 801137a:	f000 ff83 	bl	8012284 <xTaskGetCurrentTaskHandle>
 801137e:	4285      	cmp	r5, r0
 8011380:	d10b      	bne.n	801139a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011382:	68e3      	ldr	r3, [r4, #12]
 8011384:	3b01      	subs	r3, #1
 8011386:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011388:	b10b      	cbz	r3, 801138e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 801138a:	2001      	movs	r0, #1
	}
 801138c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801138e:	461a      	mov	r2, r3
 8011390:	4619      	mov	r1, r3
 8011392:	4620      	mov	r0, r4
 8011394:	f7ff ff1d 	bl	80111d2 <xQueueGenericSend>
 8011398:	e7f7      	b.n	801138a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 801139a:	2000      	movs	r0, #0
		return xReturn;
 801139c:	e7f6      	b.n	801138c <xQueueGiveMutexRecursive+0x2c>

0801139e <xQueueCreateMutex>:
	{
 801139e:	b570      	push	{r4, r5, r6, lr}
 80113a0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80113a2:	2050      	movs	r0, #80	@ 0x50
 80113a4:	f7ff fade 	bl	8010964 <pvPortMalloc>
 80113a8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 80113aa:	b198      	cbz	r0, 80113d4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80113ac:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80113ae:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80113b0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80113b2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80113b6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80113ba:	f7ff fe16 	bl	8010fea <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80113be:	462b      	mov	r3, r5
 80113c0:	462a      	mov	r2, r5
 80113c2:	4629      	mov	r1, r5
 80113c4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80113c6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80113ca:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80113cc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80113ce:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80113d0:	f7ff feff 	bl	80111d2 <xQueueGenericSend>
	}
 80113d4:	4620      	mov	r0, r4
 80113d6:	bd70      	pop	{r4, r5, r6, pc}

080113d8 <xQueueGenericSendFromISR>:
{
 80113d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113dc:	4689      	mov	r9, r1
 80113de:	4617      	mov	r7, r2
 80113e0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80113e2:	4604      	mov	r4, r0
 80113e4:	b940      	cbnz	r0, 80113f8 <xQueueGenericSendFromISR+0x20>
 80113e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ea:	f383 8811 	msr	BASEPRI, r3
 80113ee:	f3bf 8f6f 	isb	sy
 80113f2:	f3bf 8f4f 	dsb	sy
 80113f6:	e7fe      	b.n	80113f6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80113f8:	b951      	cbnz	r1, 8011410 <xQueueGenericSendFromISR+0x38>
 80113fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80113fc:	b143      	cbz	r3, 8011410 <xQueueGenericSendFromISR+0x38>
 80113fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	e7fe      	b.n	801140e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011410:	2e02      	cmp	r6, #2
 8011412:	d10b      	bne.n	801142c <xQueueGenericSendFromISR+0x54>
 8011414:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011416:	2b01      	cmp	r3, #1
 8011418:	d008      	beq.n	801142c <xQueueGenericSendFromISR+0x54>
 801141a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801141e:	f383 8811 	msr	BASEPRI, r3
 8011422:	f3bf 8f6f 	isb	sy
 8011426:	f3bf 8f4f 	dsb	sy
 801142a:	e7fe      	b.n	801142a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801142c:	f7ff fd24 	bl	8010e78 <vPortValidateInterruptPriority>
	__asm volatile
 8011430:	f3ef 8811 	mrs	r8, BASEPRI
 8011434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011444:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011446:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011448:	429a      	cmp	r2, r3
 801144a:	d301      	bcc.n	8011450 <xQueueGenericSendFromISR+0x78>
 801144c:	2e02      	cmp	r6, #2
 801144e:	d11e      	bne.n	801148e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011450:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011454:	4632      	mov	r2, r6
 8011456:	4649      	mov	r1, r9
 8011458:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801145a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801145c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801145e:	f7ff fd44 	bl	8010eea <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8011462:	1c6b      	adds	r3, r5, #1
 8011464:	d10e      	bne.n	8011484 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011466:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011468:	b13b      	cbz	r3, 801147a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801146a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801146e:	f000 fe79 	bl	8012164 <xTaskRemoveFromEventList>
 8011472:	b110      	cbz	r0, 801147a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8011474:	b10f      	cbz	r7, 801147a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011476:	2301      	movs	r3, #1
 8011478:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 801147a:	2001      	movs	r0, #1
	__asm volatile
 801147c:	f388 8811 	msr	BASEPRI, r8
}
 8011480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011484:	3501      	adds	r5, #1
 8011486:	b26d      	sxtb	r5, r5
 8011488:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 801148c:	e7f5      	b.n	801147a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 801148e:	2000      	movs	r0, #0
 8011490:	e7f4      	b.n	801147c <xQueueGenericSendFromISR+0xa4>

08011492 <xQueueGiveFromISR>:
{
 8011492:	b570      	push	{r4, r5, r6, lr}
 8011494:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8011496:	4604      	mov	r4, r0
 8011498:	b940      	cbnz	r0, 80114ac <xQueueGiveFromISR+0x1a>
	__asm volatile
 801149a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801149e:	f383 8811 	msr	BASEPRI, r3
 80114a2:	f3bf 8f6f 	isb	sy
 80114a6:	f3bf 8f4f 	dsb	sy
 80114aa:	e7fe      	b.n	80114aa <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80114ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80114ae:	b143      	cbz	r3, 80114c2 <xQueueGiveFromISR+0x30>
 80114b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b4:	f383 8811 	msr	BASEPRI, r3
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	e7fe      	b.n	80114c0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	b953      	cbnz	r3, 80114dc <xQueueGiveFromISR+0x4a>
 80114c6:	6883      	ldr	r3, [r0, #8]
 80114c8:	b143      	cbz	r3, 80114dc <xQueueGiveFromISR+0x4a>
 80114ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ce:	f383 8811 	msr	BASEPRI, r3
 80114d2:	f3bf 8f6f 	isb	sy
 80114d6:	f3bf 8f4f 	dsb	sy
 80114da:	e7fe      	b.n	80114da <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114dc:	f7ff fccc 	bl	8010e78 <vPortValidateInterruptPriority>
	__asm volatile
 80114e0:	f3ef 8611 	mrs	r6, BASEPRI
 80114e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114e8:	f383 8811 	msr	BASEPRI, r3
 80114ec:	f3bf 8f6f 	isb	sy
 80114f0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80114f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d919      	bls.n	8011530 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 80114fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011500:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8011502:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8011504:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011506:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8011508:	d10d      	bne.n	8011526 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801150a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801150c:	b13b      	cbz	r3, 801151e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801150e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011512:	f000 fe27 	bl	8012164 <xTaskRemoveFromEventList>
 8011516:	b110      	cbz	r0, 801151e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8011518:	b10d      	cbz	r5, 801151e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801151a:	2301      	movs	r3, #1
 801151c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 801151e:	2001      	movs	r0, #1
	__asm volatile
 8011520:	f386 8811 	msr	BASEPRI, r6
}
 8011524:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011526:	3301      	adds	r3, #1
 8011528:	b25b      	sxtb	r3, r3
 801152a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801152e:	e7f6      	b.n	801151e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8011530:	2000      	movs	r0, #0
 8011532:	e7f5      	b.n	8011520 <xQueueGiveFromISR+0x8e>

08011534 <xQueueReceive>:
{
 8011534:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011538:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 801153a:	4604      	mov	r4, r0
{
 801153c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801153e:	b940      	cbnz	r0, 8011552 <xQueueReceive+0x1e>
	__asm volatile
 8011540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011544:	f383 8811 	msr	BASEPRI, r3
 8011548:	f3bf 8f6f 	isb	sy
 801154c:	f3bf 8f4f 	dsb	sy
 8011550:	e7fe      	b.n	8011550 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011552:	b951      	cbnz	r1, 801156a <xQueueReceive+0x36>
 8011554:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8011556:	b143      	cbz	r3, 801156a <xQueueReceive+0x36>
 8011558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801155c:	f383 8811 	msr	BASEPRI, r3
 8011560:	f3bf 8f6f 	isb	sy
 8011564:	f3bf 8f4f 	dsb	sy
 8011568:	e7fe      	b.n	8011568 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801156a:	f000 fe91 	bl	8012290 <xTaskGetSchedulerState>
 801156e:	4605      	mov	r5, r0
 8011570:	b318      	cbz	r0, 80115ba <xQueueReceive+0x86>
 8011572:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8011574:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8011578:	f7ff fb6c 	bl	8010c54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801157c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801157e:	b347      	cbz	r7, 80115d2 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011580:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011582:	4631      	mov	r1, r6
 8011584:	4620      	mov	r0, r4
 8011586:	f7ff fce3 	bl	8010f50 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801158a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801158c:	6923      	ldr	r3, [r4, #16]
 801158e:	b173      	cbz	r3, 80115ae <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011590:	f104 0010 	add.w	r0, r4, #16
 8011594:	f000 fde6 	bl	8012164 <xTaskRemoveFromEventList>
 8011598:	b148      	cbz	r0, 80115ae <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 801159a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801159e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80115a6:	f3bf 8f4f 	dsb	sy
 80115aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80115ae:	f7ff fb71 	bl	8010c94 <vPortExitCritical>
				return pdPASS;
 80115b2:	2001      	movs	r0, #1
}
 80115b4:	b004      	add	sp, #16
 80115b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115ba:	9b01      	ldr	r3, [sp, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d0d9      	beq.n	8011574 <xQueueReceive+0x40>
 80115c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115c4:	f383 8811 	msr	BASEPRI, r3
 80115c8:	f3bf 8f6f 	isb	sy
 80115cc:	f3bf 8f4f 	dsb	sy
 80115d0:	e7fe      	b.n	80115d0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80115d2:	9b01      	ldr	r3, [sp, #4]
 80115d4:	b91b      	cbnz	r3, 80115de <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80115d6:	f7ff fb5d 	bl	8010c94 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80115da:	2000      	movs	r0, #0
 80115dc:	e7ea      	b.n	80115b4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80115de:	b915      	cbnz	r5, 80115e6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115e0:	a802      	add	r0, sp, #8
 80115e2:	f000 fe01 	bl	80121e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80115e6:	f7ff fb55 	bl	8010c94 <vPortExitCritical>
		vTaskSuspendAll();
 80115ea:	f000 fb99 	bl	8011d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115ee:	f7ff fb31 	bl	8010c54 <vPortEnterCritical>
 80115f2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80115f6:	2bff      	cmp	r3, #255	@ 0xff
 80115f8:	d101      	bne.n	80115fe <xQueueReceive+0xca>
 80115fa:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80115fe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011602:	2bff      	cmp	r3, #255	@ 0xff
 8011604:	d101      	bne.n	801160a <xQueueReceive+0xd6>
 8011606:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 801160a:	f7ff fb43 	bl	8010c94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801160e:	a901      	add	r1, sp, #4
 8011610:	a802      	add	r0, sp, #8
 8011612:	f000 fdf5 	bl	8012200 <xTaskCheckForTimeOut>
 8011616:	bb00      	cbnz	r0, 801165a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011618:	4620      	mov	r0, r4
 801161a:	f7ff fc5b 	bl	8010ed4 <prvIsQueueEmpty>
 801161e:	b1b0      	cbz	r0, 801164e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011620:	9901      	ldr	r1, [sp, #4]
 8011622:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011626:	f000 fd65 	bl	80120f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801162a:	4620      	mov	r0, r4
 801162c:	f7ff fca5 	bl	8010f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011630:	f000 fc1a 	bl	8011e68 <xTaskResumeAll>
 8011634:	b948      	cbnz	r0, 801164a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8011636:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801163a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801163e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011642:	f3bf 8f4f 	dsb	sy
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	2501      	movs	r5, #1
 801164c:	e794      	b.n	8011578 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 801164e:	4620      	mov	r0, r4
 8011650:	f7ff fc93 	bl	8010f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011654:	f000 fc08 	bl	8011e68 <xTaskResumeAll>
 8011658:	e7f7      	b.n	801164a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 801165a:	4620      	mov	r0, r4
 801165c:	f7ff fc8d 	bl	8010f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011660:	f000 fc02 	bl	8011e68 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011664:	4620      	mov	r0, r4
 8011666:	f7ff fc35 	bl	8010ed4 <prvIsQueueEmpty>
 801166a:	2800      	cmp	r0, #0
 801166c:	d0ed      	beq.n	801164a <xQueueReceive+0x116>
 801166e:	e7b4      	b.n	80115da <xQueueReceive+0xa6>

08011670 <xQueueSemaphoreTake>:
{
 8011670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011672:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8011674:	4604      	mov	r4, r0
{
 8011676:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8011678:	b940      	cbnz	r0, 801168c <xQueueSemaphoreTake+0x1c>
 801167a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	e7fe      	b.n	801168a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 801168c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 801168e:	b145      	cbz	r5, 80116a2 <xQueueSemaphoreTake+0x32>
 8011690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011694:	f383 8811 	msr	BASEPRI, r3
 8011698:	f3bf 8f6f 	isb	sy
 801169c:	f3bf 8f4f 	dsb	sy
 80116a0:	e7fe      	b.n	80116a0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80116a2:	f000 fdf5 	bl	8012290 <xTaskGetSchedulerState>
 80116a6:	4606      	mov	r6, r0
 80116a8:	b320      	cbz	r0, 80116f4 <xQueueSemaphoreTake+0x84>
 80116aa:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80116ac:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 80116ae:	f7ff fad1 	bl	8010c54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80116b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80116b4:	b353      	cbz	r3, 801170c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80116b6:	3b01      	subs	r3, #1
 80116b8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116ba:	6823      	ldr	r3, [r4, #0]
 80116bc:	b913      	cbnz	r3, 80116c4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80116be:	f000 fec5 	bl	801244c <pvTaskIncrementMutexHeldCount>
 80116c2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116c4:	6923      	ldr	r3, [r4, #16]
 80116c6:	b173      	cbz	r3, 80116e6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116c8:	f104 0010 	add.w	r0, r4, #16
 80116cc:	f000 fd4a 	bl	8012164 <xTaskRemoveFromEventList>
 80116d0:	b148      	cbz	r0, 80116e6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 80116d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80116d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80116de:	f3bf 8f4f 	dsb	sy
 80116e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80116e6:	f7ff fad5 	bl	8010c94 <vPortExitCritical>
				return pdPASS;
 80116ea:	2001      	movs	r0, #1
}
 80116ec:	b005      	add	sp, #20
 80116ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116f0:	4635      	mov	r5, r6
 80116f2:	e7db      	b.n	80116ac <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80116f4:	9b01      	ldr	r3, [sp, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d0fa      	beq.n	80116f0 <xQueueSemaphoreTake+0x80>
 80116fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116fe:	f383 8811 	msr	BASEPRI, r3
 8011702:	f3bf 8f6f 	isb	sy
 8011706:	f3bf 8f4f 	dsb	sy
 801170a:	e7fe      	b.n	801170a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801170c:	9b01      	ldr	r3, [sp, #4]
 801170e:	b953      	cbnz	r3, 8011726 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011710:	2d00      	cmp	r5, #0
 8011712:	d066      	beq.n	80117e2 <xQueueSemaphoreTake+0x172>
 8011714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011718:	f383 8811 	msr	BASEPRI, r3
 801171c:	f3bf 8f6f 	isb	sy
 8011720:	f3bf 8f4f 	dsb	sy
 8011724:	e7fe      	b.n	8011724 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8011726:	b916      	cbnz	r6, 801172e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011728:	a802      	add	r0, sp, #8
 801172a:	f000 fd5d 	bl	80121e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801172e:	f7ff fab1 	bl	8010c94 <vPortExitCritical>
		vTaskSuspendAll();
 8011732:	f000 faf5 	bl	8011d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011736:	f7ff fa8d 	bl	8010c54 <vPortEnterCritical>
 801173a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801173e:	2bff      	cmp	r3, #255	@ 0xff
 8011740:	d101      	bne.n	8011746 <xQueueSemaphoreTake+0xd6>
 8011742:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8011746:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801174a:	2bff      	cmp	r3, #255	@ 0xff
 801174c:	d101      	bne.n	8011752 <xQueueSemaphoreTake+0xe2>
 801174e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011752:	f7ff fa9f 	bl	8010c94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011756:	a901      	add	r1, sp, #4
 8011758:	a802      	add	r0, sp, #8
 801175a:	f000 fd51 	bl	8012200 <xTaskCheckForTimeOut>
 801175e:	bb50      	cbnz	r0, 80117b6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011760:	4620      	mov	r0, r4
 8011762:	f7ff fbb7 	bl	8010ed4 <prvIsQueueEmpty>
 8011766:	b300      	cbz	r0, 80117aa <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011768:	6823      	ldr	r3, [r4, #0]
 801176a:	b93b      	cbnz	r3, 801177c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 801176c:	f7ff fa72 	bl	8010c54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011770:	68a0      	ldr	r0, [r4, #8]
 8011772:	f000 fd9d 	bl	80122b0 <xTaskPriorityInherit>
 8011776:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8011778:	f7ff fa8c 	bl	8010c94 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801177c:	9901      	ldr	r1, [sp, #4]
 801177e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011782:	f000 fcb7 	bl	80120f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011786:	4620      	mov	r0, r4
 8011788:	f7ff fbf7 	bl	8010f7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801178c:	f000 fb6c 	bl	8011e68 <xTaskResumeAll>
 8011790:	b948      	cbnz	r0, 80117a6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8011792:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801179a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801179e:	f3bf 8f4f 	dsb	sy
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	2601      	movs	r6, #1
 80117a8:	e781      	b.n	80116ae <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 80117aa:	4620      	mov	r0, r4
 80117ac:	f7ff fbe5 	bl	8010f7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80117b0:	f000 fb5a 	bl	8011e68 <xTaskResumeAll>
 80117b4:	e7f7      	b.n	80117a6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 80117b6:	4620      	mov	r0, r4
 80117b8:	f7ff fbdf 	bl	8010f7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80117bc:	f000 fb54 	bl	8011e68 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117c0:	4620      	mov	r0, r4
 80117c2:	f7ff fb87 	bl	8010ed4 <prvIsQueueEmpty>
 80117c6:	2800      	cmp	r0, #0
 80117c8:	d0ed      	beq.n	80117a6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 80117ca:	b165      	cbz	r5, 80117e6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 80117cc:	f7ff fa42 	bl	8010c54 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80117d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80117d2:	b119      	cbz	r1, 80117dc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80117d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80117d6:	6819      	ldr	r1, [r3, #0]
 80117d8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80117dc:	68a0      	ldr	r0, [r4, #8]
 80117de:	f000 fde7 	bl	80123b0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80117e2:	f7ff fa57 	bl	8010c94 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80117e6:	2000      	movs	r0, #0
 80117e8:	e780      	b.n	80116ec <xQueueSemaphoreTake+0x7c>

080117ea <xQueueTakeMutexRecursive>:
	{
 80117ea:	b570      	push	{r4, r5, r6, lr}
 80117ec:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 80117ee:	4604      	mov	r4, r0
 80117f0:	b940      	cbnz	r0, 8011804 <xQueueTakeMutexRecursive+0x1a>
 80117f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f6:	f383 8811 	msr	BASEPRI, r3
 80117fa:	f3bf 8f6f 	isb	sy
 80117fe:	f3bf 8f4f 	dsb	sy
 8011802:	e7fe      	b.n	8011802 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011804:	6886      	ldr	r6, [r0, #8]
 8011806:	f000 fd3d 	bl	8012284 <xTaskGetCurrentTaskHandle>
 801180a:	4286      	cmp	r6, r0
 801180c:	d104      	bne.n	8011818 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801180e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8011810:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011812:	3301      	adds	r3, #1
 8011814:	60e3      	str	r3, [r4, #12]
	}
 8011816:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011818:	4629      	mov	r1, r5
 801181a:	4620      	mov	r0, r4
 801181c:	f7ff ff28 	bl	8011670 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8011820:	2800      	cmp	r0, #0
 8011822:	d0f8      	beq.n	8011816 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011824:	68e3      	ldr	r3, [r4, #12]
 8011826:	3301      	adds	r3, #1
 8011828:	60e3      	str	r3, [r4, #12]
 801182a:	e7f4      	b.n	8011816 <xQueueTakeMutexRecursive+0x2c>

0801182c <xQueueReceiveFromISR>:
{
 801182c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011830:	4689      	mov	r9, r1
 8011832:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8011834:	4604      	mov	r4, r0
 8011836:	b940      	cbnz	r0, 801184a <xQueueReceiveFromISR+0x1e>
 8011838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801183c:	f383 8811 	msr	BASEPRI, r3
 8011840:	f3bf 8f6f 	isb	sy
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	e7fe      	b.n	8011848 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801184a:	b951      	cbnz	r1, 8011862 <xQueueReceiveFromISR+0x36>
 801184c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801184e:	b143      	cbz	r3, 8011862 <xQueueReceiveFromISR+0x36>
 8011850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011854:	f383 8811 	msr	BASEPRI, r3
 8011858:	f3bf 8f6f 	isb	sy
 801185c:	f3bf 8f4f 	dsb	sy
 8011860:	e7fe      	b.n	8011860 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011862:	f7ff fb09 	bl	8010e78 <vPortValidateInterruptPriority>
	__asm volatile
 8011866:	f3ef 8711 	mrs	r7, BASEPRI
 801186a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801186e:	f383 8811 	msr	BASEPRI, r3
 8011872:	f3bf 8f6f 	isb	sy
 8011876:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801187a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801187c:	b30d      	cbz	r5, 80118c2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 801187e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011882:	4649      	mov	r1, r9
 8011884:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011886:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8011888:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801188a:	f7ff fb61 	bl	8010f50 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801188e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8011890:	1c73      	adds	r3, r6, #1
 8011892:	d111      	bne.n	80118b8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011894:	6923      	ldr	r3, [r4, #16]
 8011896:	b153      	cbz	r3, 80118ae <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011898:	f104 0010 	add.w	r0, r4, #16
 801189c:	f000 fc62 	bl	8012164 <xTaskRemoveFromEventList>
 80118a0:	b128      	cbz	r0, 80118ae <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 80118a2:	f1b8 0f00 	cmp.w	r8, #0
 80118a6:	d002      	beq.n	80118ae <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80118a8:	2301      	movs	r3, #1
 80118aa:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80118ae:	2001      	movs	r0, #1
	__asm volatile
 80118b0:	f387 8811 	msr	BASEPRI, r7
}
 80118b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80118b8:	3601      	adds	r6, #1
 80118ba:	b276      	sxtb	r6, r6
 80118bc:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80118c0:	e7f5      	b.n	80118ae <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 80118c2:	4628      	mov	r0, r5
 80118c4:	e7f4      	b.n	80118b0 <xQueueReceiveFromISR+0x84>
	...

080118c8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118c8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80118ca:	4a07      	ldr	r2, [pc, #28]	@ (80118e8 <vQueueAddToRegistry+0x20>)
	{
 80118cc:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80118ce:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80118d2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80118d6:	b91d      	cbnz	r5, 80118e0 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80118d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80118dc:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80118de:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118e0:	3301      	adds	r3, #1
 80118e2:	2b08      	cmp	r3, #8
 80118e4:	d1f3      	bne.n	80118ce <vQueueAddToRegistry+0x6>
 80118e6:	e7fa      	b.n	80118de <vQueueAddToRegistry+0x16>
 80118e8:	24027f40 	.word	0x24027f40

080118ec <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118ec:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80118ee:	4a09      	ldr	r2, [pc, #36]	@ (8011914 <vQueueUnregisterQueue+0x28>)
	{
 80118f0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80118f2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80118f6:	00dc      	lsls	r4, r3, #3
 80118f8:	4281      	cmp	r1, r0
 80118fa:	d106      	bne.n	801190a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80118fc:	4a06      	ldr	r2, [pc, #24]	@ (8011918 <vQueueUnregisterQueue+0x2c>)
 80118fe:	2100      	movs	r1, #0
 8011900:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011904:	4422      	add	r2, r4
 8011906:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011908:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801190a:	3301      	adds	r3, #1
 801190c:	2b08      	cmp	r3, #8
 801190e:	d1f0      	bne.n	80118f2 <vQueueUnregisterQueue+0x6>
 8011910:	e7fa      	b.n	8011908 <vQueueUnregisterQueue+0x1c>
 8011912:	bf00      	nop
 8011914:	24027f44 	.word	0x24027f44
 8011918:	24027f40 	.word	0x24027f40

0801191c <vQueueDelete>:
{
 801191c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 801191e:	b940      	cbnz	r0, 8011932 <vQueueDelete+0x16>
	__asm volatile
 8011920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	e7fe      	b.n	8011930 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8011932:	f7ff ffdb 	bl	80118ec <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011936:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 801193a:	b91b      	cbnz	r3, 8011944 <vQueueDelete+0x28>
}
 801193c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8011940:	f7ff b8a8 	b.w	8010a94 <vPortFree>
}
 8011944:	bd10      	pop	{r4, pc}

08011946 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011946:	b570      	push	{r4, r5, r6, lr}
 8011948:	4604      	mov	r4, r0
 801194a:	460d      	mov	r5, r1
 801194c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801194e:	f7ff f981 	bl	8010c54 <vPortEnterCritical>
 8011952:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011956:	2bff      	cmp	r3, #255	@ 0xff
 8011958:	d102      	bne.n	8011960 <vQueueWaitForMessageRestricted+0x1a>
 801195a:	2300      	movs	r3, #0
 801195c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8011960:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011964:	2bff      	cmp	r3, #255	@ 0xff
 8011966:	d102      	bne.n	801196e <vQueueWaitForMessageRestricted+0x28>
 8011968:	2300      	movs	r3, #0
 801196a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801196e:	f7ff f991 	bl	8010c94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011972:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011974:	b92b      	cbnz	r3, 8011982 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011976:	4632      	mov	r2, r6
 8011978:	4629      	mov	r1, r5
 801197a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801197e:	f000 fbd3 	bl	8012128 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011982:	4620      	mov	r0, r4
	}
 8011984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8011988:	f7ff baf7 	b.w	8010f7a <prvUnlockQueue>

0801198c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011990:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011992:	f7ff f95f 	bl	8010c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011996:	4b2f      	ldr	r3, [pc, #188]	@ (8011a54 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8011998:	4e2f      	ldr	r6, [pc, #188]	@ (8011a58 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	4f2f      	ldr	r7, [pc, #188]	@ (8011a5c <prvAddNewTaskToReadyList+0xd0>)
 801199e:	3201      	adds	r2, #1
 80119a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80119a2:	6835      	ldr	r5, [r6, #0]
 80119a4:	2d00      	cmp	r5, #0
 80119a6:	d14a      	bne.n	8011a3e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80119a8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d11f      	bne.n	80119f0 <prvAddNewTaskToReadyList+0x64>
 80119b0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80119b2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80119b4:	4640      	mov	r0, r8
 80119b6:	f7ff f8ab 	bl	8010b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80119ba:	f108 0814 	add.w	r8, r8, #20
 80119be:	2d38      	cmp	r5, #56	@ 0x38
 80119c0:	d1f7      	bne.n	80119b2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80119c2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8011a84 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80119c6:	4d26      	ldr	r5, [pc, #152]	@ (8011a60 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80119c8:	4640      	mov	r0, r8
 80119ca:	f7ff f8a1 	bl	8010b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80119ce:	4628      	mov	r0, r5
 80119d0:	f7ff f89e 	bl	8010b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80119d4:	4823      	ldr	r0, [pc, #140]	@ (8011a64 <prvAddNewTaskToReadyList+0xd8>)
 80119d6:	f7ff f89b 	bl	8010b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80119da:	4823      	ldr	r0, [pc, #140]	@ (8011a68 <prvAddNewTaskToReadyList+0xdc>)
 80119dc:	f7ff f898 	bl	8010b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80119e0:	4822      	ldr	r0, [pc, #136]	@ (8011a6c <prvAddNewTaskToReadyList+0xe0>)
 80119e2:	f7ff f895 	bl	8010b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80119e6:	4b22      	ldr	r3, [pc, #136]	@ (8011a70 <prvAddNewTaskToReadyList+0xe4>)
 80119e8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80119ec:	4b21      	ldr	r3, [pc, #132]	@ (8011a74 <prvAddNewTaskToReadyList+0xe8>)
 80119ee:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80119f0:	4a21      	ldr	r2, [pc, #132]	@ (8011a78 <prvAddNewTaskToReadyList+0xec>)
 80119f2:	6813      	ldr	r3, [r2, #0]
 80119f4:	3301      	adds	r3, #1
 80119f6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80119f8:	4a20      	ldr	r2, [pc, #128]	@ (8011a7c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80119fa:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80119fc:	6811      	ldr	r1, [r2, #0]
 80119fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011a00:	428b      	cmp	r3, r1
 8011a02:	d900      	bls.n	8011a06 <prvAddNewTaskToReadyList+0x7a>
 8011a04:	6013      	str	r3, [r2, #0]
 8011a06:	2014      	movs	r0, #20
 8011a08:	1d21      	adds	r1, r4, #4
 8011a0a:	fb00 7003 	mla	r0, r0, r3, r7
 8011a0e:	f7ff f88d 	bl	8010b2c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8011a12:	f7ff f93f 	bl	8010c94 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8011a16:	4b1a      	ldr	r3, [pc, #104]	@ (8011a80 <prvAddNewTaskToReadyList+0xf4>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	b173      	cbz	r3, 8011a3a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011a1c:	6833      	ldr	r3, [r6, #0]
 8011a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d209      	bcs.n	8011a3a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8011a26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011a32:	f3bf 8f4f 	dsb	sy
 8011a36:	f3bf 8f6f 	isb	sy
}
 8011a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8011a3e:	4b10      	ldr	r3, [pc, #64]	@ (8011a80 <prvAddNewTaskToReadyList+0xf4>)
 8011a40:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a42:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8011a44:	2a00      	cmp	r2, #0
 8011a46:	d1d3      	bne.n	80119f0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a48:	6832      	ldr	r2, [r6, #0]
 8011a4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d8cf      	bhi.n	80119f0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8011a50:	6034      	str	r4, [r6, #0]
 8011a52:	e7cd      	b.n	80119f0 <prvAddNewTaskToReadyList+0x64>
 8011a54:	24027fa4 	.word	0x24027fa4
 8011a58:	24028478 	.word	0x24028478
 8011a5c:	24028018 	.word	0x24028018
 8011a60:	24027ff0 	.word	0x24027ff0
 8011a64:	24027fd4 	.word	0x24027fd4
 8011a68:	24027fc0 	.word	0x24027fc0
 8011a6c:	24027fa8 	.word	0x24027fa8
 8011a70:	24027fec 	.word	0x24027fec
 8011a74:	24027fe8 	.word	0x24027fe8
 8011a78:	24027f88 	.word	0x24027f88
 8011a7c:	24027f9c 	.word	0x24027f9c
 8011a80:	24027f98 	.word	0x24027f98
 8011a84:	24028004 	.word	0x24028004

08011a88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011a8a:	4b15      	ldr	r3, [pc, #84]	@ (8011ae0 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8011a8c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a8e:	4d15      	ldr	r5, [pc, #84]	@ (8011ae4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8011a90:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8011a92:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a94:	6828      	ldr	r0, [r5, #0]
 8011a96:	3004      	adds	r0, #4
 8011a98:	f7ff f86a 	bl	8010b70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a9c:	1c73      	adds	r3, r6, #1
 8011a9e:	d107      	bne.n	8011ab0 <prvAddCurrentTaskToDelayedList+0x28>
 8011aa0:	b137      	cbz	r7, 8011ab0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011aa2:	6829      	ldr	r1, [r5, #0]
 8011aa4:	4810      	ldr	r0, [pc, #64]	@ (8011ae8 <prvAddCurrentTaskToDelayedList+0x60>)
 8011aa6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011aac:	f7ff b83e 	b.w	8010b2c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011ab0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011ab2:	682b      	ldr	r3, [r5, #0]
 8011ab4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011ab6:	d307      	bcc.n	8011ac8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8011aec <prvAddCurrentTaskToDelayedList+0x64>)
 8011aba:	6818      	ldr	r0, [r3, #0]
 8011abc:	6829      	ldr	r1, [r5, #0]
}
 8011abe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ac2:	3104      	adds	r1, #4
 8011ac4:	f7ff b83d 	b.w	8010b42 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ac8:	4b09      	ldr	r3, [pc, #36]	@ (8011af0 <prvAddCurrentTaskToDelayedList+0x68>)
 8011aca:	6818      	ldr	r0, [r3, #0]
 8011acc:	6829      	ldr	r1, [r5, #0]
 8011ace:	3104      	adds	r1, #4
 8011ad0:	f7ff f837 	bl	8010b42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011ad4:	4b07      	ldr	r3, [pc, #28]	@ (8011af4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	42a2      	cmp	r2, r4
 8011ada:	d900      	bls.n	8011ade <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8011adc:	601c      	str	r4, [r3, #0]
}
 8011ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ae0:	24027fa0 	.word	0x24027fa0
 8011ae4:	24028478 	.word	0x24028478
 8011ae8:	24027fa8 	.word	0x24027fa8
 8011aec:	24027fe8 	.word	0x24027fe8
 8011af0:	24027fec 	.word	0x24027fec
 8011af4:	24027f84 	.word	0x24027f84

08011af8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011af8:	4a06      	ldr	r2, [pc, #24]	@ (8011b14 <prvResetNextTaskUnblockTime+0x1c>)
 8011afa:	6813      	ldr	r3, [r2, #0]
 8011afc:	6819      	ldr	r1, [r3, #0]
 8011afe:	4b06      	ldr	r3, [pc, #24]	@ (8011b18 <prvResetNextTaskUnblockTime+0x20>)
 8011b00:	b919      	cbnz	r1, 8011b0a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8011b02:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011b06:	601a      	str	r2, [r3, #0]
}
 8011b08:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b0a:	6812      	ldr	r2, [r2, #0]
 8011b0c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011b0e:	68d2      	ldr	r2, [r2, #12]
 8011b10:	6852      	ldr	r2, [r2, #4]
 8011b12:	e7f8      	b.n	8011b06 <prvResetNextTaskUnblockTime+0xe>
 8011b14:	24027fec 	.word	0x24027fec
 8011b18:	24027f84 	.word	0x24027f84

08011b1c <prvDeleteTCB>:
	{
 8011b1c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011b1e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8011b22:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011b24:	b93b      	cbnz	r3, 8011b36 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8011b26:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011b28:	f7fe ffb4 	bl	8010a94 <vPortFree>
				vPortFree( pxTCB );
 8011b2c:	4620      	mov	r0, r4
	}
 8011b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8011b32:	f7fe bfaf 	b.w	8010a94 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d0f9      	beq.n	8011b2e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	d008      	beq.n	8011b50 <prvDeleteTCB+0x34>
 8011b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	e7fe      	b.n	8011b4e <prvDeleteTCB+0x32>
	}
 8011b50:	bd10      	pop	{r4, pc}
	...

08011b54 <prvIdleTask>:
{
 8011b54:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011b56:	4c14      	ldr	r4, [pc, #80]	@ (8011ba8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b58:	4f14      	ldr	r7, [pc, #80]	@ (8011bac <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8011b5a:	4d15      	ldr	r5, [pc, #84]	@ (8011bb0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011b5c:	6823      	ldr	r3, [r4, #0]
 8011b5e:	b983      	cbnz	r3, 8011b82 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b60:	4b14      	ldr	r3, [pc, #80]	@ (8011bb4 <prvIdleTask+0x60>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d909      	bls.n	8011b7c <prvIdleTask+0x28>
				taskYIELD();
 8011b68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b70:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011b74:	f3bf 8f4f 	dsb	sy
 8011b78:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8011b7c:	f7ee ff34 	bl	80009e8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011b80:	e7eb      	b.n	8011b5a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8011b82:	f7ff f867 	bl	8010c54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b8a:	1d30      	adds	r0, r6, #4
 8011b8c:	f7fe fff0 	bl	8010b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011b90:	682b      	ldr	r3, [r5, #0]
 8011b92:	3b01      	subs	r3, #1
 8011b94:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8011b9c:	f7ff f87a 	bl	8010c94 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	f7ff ffbb 	bl	8011b1c <prvDeleteTCB>
 8011ba6:	e7d9      	b.n	8011b5c <prvIdleTask+0x8>
 8011ba8:	24027fbc 	.word	0x24027fbc
 8011bac:	24027fc0 	.word	0x24027fc0
 8011bb0:	24027fa4 	.word	0x24027fa4
 8011bb4:	24028018 	.word	0x24028018

08011bb8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011bbc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011bbe:	4607      	mov	r7, r0
 8011bc0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011bc2:	21a5      	movs	r1, #165	@ 0xa5
 8011bc4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011bc6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011bc8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8011bca:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011bce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8011bd0:	f018 f90e 	bl	8029df0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011bd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011bd6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011bd8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8011bdc:	b3b5      	cbz	r5, 8011c4c <prvInitialiseNewTask.constprop.0+0x94>
 8011bde:	1e6b      	subs	r3, r5, #1
 8011be0:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8011be4:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011be6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011bea:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8011bee:	b109      	cbz	r1, 8011bf4 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011bf0:	42ab      	cmp	r3, r5
 8011bf2:	d1f8      	bne.n	8011be6 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011bfa:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8011bfc:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011c00:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011c02:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8011c04:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011c08:	bf28      	it	cs
 8011c0a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8011c0c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011c0e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c10:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011c14:	f7fe ff87 	bl	8010b26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011c18:	f104 0018 	add.w	r0, r4, #24
 8011c1c:	f7fe ff83 	bl	8010b26 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8011c20:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c24:	4642      	mov	r2, r8
 8011c26:	4639      	mov	r1, r7
 8011c28:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011c2a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c2c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011c2e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8011c30:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c34:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c38:	f7fe ffe8 	bl	8010c0c <pxPortInitialiseStack>
 8011c3c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8011c3e:	f1b9 0f00 	cmp.w	r9, #0
 8011c42:	d001      	beq.n	8011c48 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011c44:	f8c9 4000 	str.w	r4, [r9]
}
 8011c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011c4c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8011c50:	e7d3      	b.n	8011bfa <prvInitialiseNewTask.constprop.0+0x42>

08011c52 <xTaskCreateStatic>:
	{
 8011c52:	b570      	push	{r4, r5, r6, lr}
 8011c54:	b086      	sub	sp, #24
 8011c56:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8011c5a:	b945      	cbnz	r5, 8011c6e <xTaskCreateStatic+0x1c>
 8011c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c60:	f383 8811 	msr	BASEPRI, r3
 8011c64:	f3bf 8f6f 	isb	sy
 8011c68:	f3bf 8f4f 	dsb	sy
 8011c6c:	e7fe      	b.n	8011c6c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8011c6e:	b944      	cbnz	r4, 8011c82 <xTaskCreateStatic+0x30>
 8011c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c74:	f383 8811 	msr	BASEPRI, r3
 8011c78:	f3bf 8f6f 	isb	sy
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	e7fe      	b.n	8011c80 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011c82:	2660      	movs	r6, #96	@ 0x60
 8011c84:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011c86:	9e05      	ldr	r6, [sp, #20]
 8011c88:	2e60      	cmp	r6, #96	@ 0x60
 8011c8a:	d008      	beq.n	8011c9e <xTaskCreateStatic+0x4c>
 8011c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c90:	f383 8811 	msr	BASEPRI, r3
 8011c94:	f3bf 8f6f 	isb	sy
 8011c98:	f3bf 8f4f 	dsb	sy
 8011c9c:	e7fe      	b.n	8011c9c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011c9e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011ca0:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011ca2:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011ca4:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011ca8:	ad04      	add	r5, sp, #16
 8011caa:	9402      	str	r4, [sp, #8]
 8011cac:	9501      	str	r5, [sp, #4]
 8011cae:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011cb0:	9500      	str	r5, [sp, #0]
 8011cb2:	f7ff ff81 	bl	8011bb8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f7ff fe68 	bl	801198c <prvAddNewTaskToReadyList>
	}
 8011cbc:	9804      	ldr	r0, [sp, #16]
 8011cbe:	b006      	add	sp, #24
 8011cc0:	bd70      	pop	{r4, r5, r6, pc}

08011cc2 <xTaskCreate>:
	{
 8011cc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cc6:	4607      	mov	r7, r0
 8011cc8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011cca:	0090      	lsls	r0, r2, #2
	{
 8011ccc:	4688      	mov	r8, r1
 8011cce:	4616      	mov	r6, r2
 8011cd0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011cd2:	f7fe fe47 	bl	8010964 <pvPortMalloc>
			if( pxStack != NULL )
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	b920      	cbnz	r0, 8011ce4 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011cda:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8011cde:	b005      	add	sp, #20
 8011ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011ce4:	2060      	movs	r0, #96	@ 0x60
 8011ce6:	f7fe fe3d 	bl	8010964 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011cea:	4604      	mov	r4, r0
 8011cec:	b198      	cbz	r0, 8011d16 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011cee:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8011cf0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011cf2:	4632      	mov	r2, r6
 8011cf4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011cf6:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cfc:	9002      	str	r0, [sp, #8]
 8011cfe:	4638      	mov	r0, r7
 8011d00:	9301      	str	r3, [sp, #4]
 8011d02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	464b      	mov	r3, r9
 8011d08:	f7ff ff56 	bl	8011bb8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	f7ff fe3d 	bl	801198c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011d12:	2001      	movs	r0, #1
 8011d14:	e7e3      	b.n	8011cde <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8011d16:	4628      	mov	r0, r5
 8011d18:	f7fe febc 	bl	8010a94 <vPortFree>
		if( pxNewTCB != NULL )
 8011d1c:	e7dd      	b.n	8011cda <xTaskCreate+0x18>
	...

08011d20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011d20:	4a02      	ldr	r2, [pc, #8]	@ (8011d2c <vTaskSuspendAll+0xc>)
 8011d22:	6813      	ldr	r3, [r2, #0]
 8011d24:	3301      	adds	r3, #1
 8011d26:	6013      	str	r3, [r2, #0]
}
 8011d28:	4770      	bx	lr
 8011d2a:	bf00      	nop
 8011d2c:	24027f80 	.word	0x24027f80

08011d30 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011d30:	4b01      	ldr	r3, [pc, #4]	@ (8011d38 <xTaskGetTickCount+0x8>)
 8011d32:	6818      	ldr	r0, [r3, #0]
}
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop
 8011d38:	24027fa0 	.word	0x24027fa0

08011d3c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8011e3c <xTaskIncrementTick+0x100>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
{
 8011d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d172      	bne.n	8011e2e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011d48:	4b3d      	ldr	r3, [pc, #244]	@ (8011e40 <xTaskIncrementTick+0x104>)
 8011d4a:	681c      	ldr	r4, [r3, #0]
 8011d4c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8011d4e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011d50:	b9bc      	cbnz	r4, 8011d82 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8011d52:	4b3c      	ldr	r3, [pc, #240]	@ (8011e44 <xTaskIncrementTick+0x108>)
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	6812      	ldr	r2, [r2, #0]
 8011d58:	b142      	cbz	r2, 8011d6c <xTaskIncrementTick+0x30>
 8011d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d5e:	f383 8811 	msr	BASEPRI, r3
 8011d62:	f3bf 8f6f 	isb	sy
 8011d66:	f3bf 8f4f 	dsb	sy
 8011d6a:	e7fe      	b.n	8011d6a <xTaskIncrementTick+0x2e>
 8011d6c:	4a36      	ldr	r2, [pc, #216]	@ (8011e48 <xTaskIncrementTick+0x10c>)
 8011d6e:	6819      	ldr	r1, [r3, #0]
 8011d70:	6810      	ldr	r0, [r2, #0]
 8011d72:	6018      	str	r0, [r3, #0]
 8011d74:	6011      	str	r1, [r2, #0]
 8011d76:	4a35      	ldr	r2, [pc, #212]	@ (8011e4c <xTaskIncrementTick+0x110>)
 8011d78:	6813      	ldr	r3, [r2, #0]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	6013      	str	r3, [r2, #0]
 8011d7e:	f7ff febb 	bl	8011af8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011d82:	4d33      	ldr	r5, [pc, #204]	@ (8011e50 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8011d84:	f04f 0b00 	mov.w	fp, #0
 8011d88:	4e32      	ldr	r6, [pc, #200]	@ (8011e54 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011d8a:	682b      	ldr	r3, [r5, #0]
 8011d8c:	4f32      	ldr	r7, [pc, #200]	@ (8011e58 <xTaskIncrementTick+0x11c>)
 8011d8e:	429c      	cmp	r4, r3
 8011d90:	d212      	bcs.n	8011db8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011d92:	683a      	ldr	r2, [r7, #0]
 8011d94:	2114      	movs	r1, #20
 8011d96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011d98:	434a      	muls	r2, r1
 8011d9a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8011d9c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8011d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8011e5c <xTaskIncrementTick+0x120>)
 8011da0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8011da2:	bf28      	it	cs
 8011da4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8011da8:	2a00      	cmp	r2, #0
 8011daa:	bf18      	it	ne
 8011dac:	f04f 0b01 	movne.w	fp, #1
}
 8011db0:	4658      	mov	r0, fp
 8011db2:	b003      	add	sp, #12
 8011db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011db8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8011e44 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8011dbc:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8011e64 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dc0:	f8d9 2000 	ldr.w	r2, [r9]
 8011dc4:	6812      	ldr	r2, [r2, #0]
 8011dc6:	b91a      	cbnz	r2, 8011dd0 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dcc:	602a      	str	r2, [r5, #0]
					break;
 8011dce:	e7e0      	b.n	8011d92 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8011dd4:	68d2      	ldr	r2, [r2, #12]
 8011dd6:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011dda:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8011dde:	428c      	cmp	r4, r1
 8011de0:	d201      	bcs.n	8011de6 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8011de2:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011de4:	e7d5      	b.n	8011d92 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011de6:	f108 0304 	add.w	r3, r8, #4
 8011dea:	4618      	mov	r0, r3
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	f7fe febf 	bl	8010b70 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011df2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8011df6:	b119      	cbz	r1, 8011e00 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011df8:	f108 0018 	add.w	r0, r8, #24
 8011dfc:	f7fe feb8 	bl	8010b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011e00:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8011e04:	f8da 1000 	ldr.w	r1, [sl]
 8011e08:	4288      	cmp	r0, r1
 8011e0a:	d901      	bls.n	8011e10 <xTaskIncrementTick+0xd4>
 8011e0c:	f8ca 0000 	str.w	r0, [sl]
 8011e10:	2314      	movs	r3, #20
 8011e12:	9901      	ldr	r1, [sp, #4]
 8011e14:	fb03 6000 	mla	r0, r3, r0, r6
 8011e18:	f7fe fe88 	bl	8010b2c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011e1c:	6838      	ldr	r0, [r7, #0]
 8011e1e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8011e22:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8011e24:	4291      	cmp	r1, r2
 8011e26:	bf28      	it	cs
 8011e28:	f04f 0b01 	movcs.w	fp, #1
 8011e2c:	e7c8      	b.n	8011dc0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8011e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8011e60 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8011e30:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 8011e34:	6813      	ldr	r3, [r2, #0]
 8011e36:	3301      	adds	r3, #1
 8011e38:	6013      	str	r3, [r2, #0]
 8011e3a:	e7b9      	b.n	8011db0 <xTaskIncrementTick+0x74>
 8011e3c:	24027f80 	.word	0x24027f80
 8011e40:	24027fa0 	.word	0x24027fa0
 8011e44:	24027fec 	.word	0x24027fec
 8011e48:	24027fe8 	.word	0x24027fe8
 8011e4c:	24027f8c 	.word	0x24027f8c
 8011e50:	24027f84 	.word	0x24027f84
 8011e54:	24028018 	.word	0x24028018
 8011e58:	24028478 	.word	0x24028478
 8011e5c:	24027f90 	.word	0x24027f90
 8011e60:	24027f94 	.word	0x24027f94
 8011e64:	24027f9c 	.word	0x24027f9c

08011e68 <xTaskResumeAll>:
{
 8011e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8011e6c:	4c30      	ldr	r4, [pc, #192]	@ (8011f30 <xTaskResumeAll+0xc8>)
 8011e6e:	6823      	ldr	r3, [r4, #0]
 8011e70:	b943      	cbnz	r3, 8011e84 <xTaskResumeAll+0x1c>
 8011e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e76:	f383 8811 	msr	BASEPRI, r3
 8011e7a:	f3bf 8f6f 	isb	sy
 8011e7e:	f3bf 8f4f 	dsb	sy
 8011e82:	e7fe      	b.n	8011e82 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8011e84:	f7fe fee6 	bl	8010c54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	3b01      	subs	r3, #1
 8011e8c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e8e:	6824      	ldr	r4, [r4, #0]
 8011e90:	b12c      	cbz	r4, 8011e9e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8011e92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011e94:	f7fe fefe 	bl	8010c94 <vPortExitCritical>
}
 8011e98:	4620      	mov	r0, r4
 8011e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011e9e:	4b25      	ldr	r3, [pc, #148]	@ (8011f34 <xTaskResumeAll+0xcc>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d0f5      	beq.n	8011e92 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ea6:	4d24      	ldr	r5, [pc, #144]	@ (8011f38 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8011ea8:	4e24      	ldr	r6, [pc, #144]	@ (8011f3c <xTaskResumeAll+0xd4>)
 8011eaa:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8011f4c <xTaskResumeAll+0xe4>
 8011eae:	e01d      	b.n	8011eec <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011eb0:	68eb      	ldr	r3, [r5, #12]
 8011eb2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011eb4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011eb6:	f104 0018 	add.w	r0, r4, #24
 8011eba:	f7fe fe59 	bl	8010b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ebe:	4638      	mov	r0, r7
 8011ec0:	f7fe fe56 	bl	8010b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011ec4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8011ec6:	6832      	ldr	r2, [r6, #0]
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d900      	bls.n	8011ece <xTaskResumeAll+0x66>
 8011ecc:	6033      	str	r3, [r6, #0]
 8011ece:	2014      	movs	r0, #20
 8011ed0:	4639      	mov	r1, r7
 8011ed2:	fb00 8003 	mla	r0, r0, r3, r8
 8011ed6:	f7fe fe29 	bl	8010b2c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011eda:	4b19      	ldr	r3, [pc, #100]	@ (8011f40 <xTaskResumeAll+0xd8>)
 8011edc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d302      	bcc.n	8011eec <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8011ee6:	4b17      	ldr	r3, [pc, #92]	@ (8011f44 <xTaskResumeAll+0xdc>)
 8011ee8:	2201      	movs	r2, #1
 8011eea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011eec:	682b      	ldr	r3, [r5, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d1de      	bne.n	8011eb0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8011ef2:	b10c      	cbz	r4, 8011ef8 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8011ef4:	f7ff fe00 	bl	8011af8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011ef8:	4d13      	ldr	r5, [pc, #76]	@ (8011f48 <xTaskResumeAll+0xe0>)
 8011efa:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8011efc:	b144      	cbz	r4, 8011f10 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8011efe:	4e11      	ldr	r6, [pc, #68]	@ (8011f44 <xTaskResumeAll+0xdc>)
 8011f00:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8011f02:	f7ff ff1b 	bl	8011d3c <xTaskIncrementTick>
 8011f06:	b100      	cbz	r0, 8011f0a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8011f08:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011f0a:	3c01      	subs	r4, #1
 8011f0c:	d1f9      	bne.n	8011f02 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8011f0e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8011f10:	4b0c      	ldr	r3, [pc, #48]	@ (8011f44 <xTaskResumeAll+0xdc>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d0bc      	beq.n	8011e92 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8011f18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011f24:	f3bf 8f4f 	dsb	sy
 8011f28:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011f2c:	2401      	movs	r4, #1
 8011f2e:	e7b1      	b.n	8011e94 <xTaskResumeAll+0x2c>
 8011f30:	24027f80 	.word	0x24027f80
 8011f34:	24027fa4 	.word	0x24027fa4
 8011f38:	24027fd4 	.word	0x24027fd4
 8011f3c:	24027f9c 	.word	0x24027f9c
 8011f40:	24028478 	.word	0x24028478
 8011f44:	24027f90 	.word	0x24027f90
 8011f48:	24027f94 	.word	0x24027f94
 8011f4c:	24028018 	.word	0x24028018

08011f50 <vTaskDelay>:
	{
 8011f50:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011f52:	b950      	cbnz	r0, 8011f6a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8011f54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011f60:	f3bf 8f4f 	dsb	sy
 8011f64:	f3bf 8f6f 	isb	sy
	}
 8011f68:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8011f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8011f94 <vTaskDelay+0x44>)
 8011f6c:	6819      	ldr	r1, [r3, #0]
 8011f6e:	b141      	cbz	r1, 8011f82 <vTaskDelay+0x32>
 8011f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f74:	f383 8811 	msr	BASEPRI, r3
 8011f78:	f3bf 8f6f 	isb	sy
 8011f7c:	f3bf 8f4f 	dsb	sy
 8011f80:	e7fe      	b.n	8011f80 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011f82:	f7ff fecd 	bl	8011d20 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011f86:	f7ff fd7f 	bl	8011a88 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8011f8a:	f7ff ff6d 	bl	8011e68 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d0e0      	beq.n	8011f54 <vTaskDelay+0x4>
 8011f92:	e7e9      	b.n	8011f68 <vTaskDelay+0x18>
 8011f94:	24027f80 	.word	0x24027f80

08011f98 <vTaskSetApplicationTaskTag>:
	{
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	460d      	mov	r5, r1
		if( xTask == NULL )
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	b908      	cbnz	r0, 8011fa4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011fa0:	4b04      	ldr	r3, [pc, #16]	@ (8011fb4 <vTaskSetApplicationTaskTag+0x1c>)
 8011fa2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8011fa4:	f7fe fe56 	bl	8010c54 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8011fa8:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 8011faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8011fae:	f7fe be71 	b.w	8010c94 <vPortExitCritical>
 8011fb2:	bf00      	nop
 8011fb4:	24028478 	.word	0x24028478

08011fb8 <xTaskCallApplicationTaskHook>:
	{
 8011fb8:	4603      	mov	r3, r0
 8011fba:	4608      	mov	r0, r1
		if( xTask == NULL )
 8011fbc:	b90b      	cbnz	r3, 8011fc2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8011fbe:	4b03      	ldr	r3, [pc, #12]	@ (8011fcc <xTaskCallApplicationTaskHook+0x14>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8011fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fc4:	b103      	cbz	r3, 8011fc8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8011fc6:	4718      	bx	r3
	}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	4770      	bx	lr
 8011fcc:	24028478 	.word	0x24028478

08011fd0 <vTaskStartScheduler>:
{
 8011fd0:	b510      	push	{r4, lr}
 8011fd2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011fd4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011fd6:	aa07      	add	r2, sp, #28
 8011fd8:	a906      	add	r1, sp, #24
 8011fda:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011fdc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011fe0:	f7fe fc82 	bl	80108e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011fe4:	9b05      	ldr	r3, [sp, #20]
 8011fe6:	9a07      	ldr	r2, [sp, #28]
 8011fe8:	9302      	str	r3, [sp, #8]
 8011fea:	9b06      	ldr	r3, [sp, #24]
 8011fec:	4919      	ldr	r1, [pc, #100]	@ (8012054 <vTaskStartScheduler+0x84>)
 8011fee:	481a      	ldr	r0, [pc, #104]	@ (8012058 <vTaskStartScheduler+0x88>)
 8011ff0:	e9cd 4300 	strd	r4, r3, [sp]
 8011ff4:	4623      	mov	r3, r4
 8011ff6:	f7ff fe2c 	bl	8011c52 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8011ffa:	b340      	cbz	r0, 801204e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8011ffc:	f000 fa84 	bl	8012508 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8012000:	2801      	cmp	r0, #1
 8012002:	d119      	bne.n	8012038 <vTaskStartScheduler+0x68>
 8012004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8012014:	f04f 32ff 	mov.w	r2, #4294967295
 8012018:	4b10      	ldr	r3, [pc, #64]	@ (801205c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 801201a:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 801201c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801201e:	4b10      	ldr	r3, [pc, #64]	@ (8012060 <vTaskStartScheduler+0x90>)
 8012020:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012022:	4b10      	ldr	r3, [pc, #64]	@ (8012064 <vTaskStartScheduler+0x94>)
 8012024:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8012026:	4b10      	ldr	r3, [pc, #64]	@ (8012068 <vTaskStartScheduler+0x98>)
 8012028:	6818      	ldr	r0, [r3, #0]
 801202a:	f7ff ffc5 	bl	8011fb8 <xTaskCallApplicationTaskHook>
}
 801202e:	b008      	add	sp, #32
 8012030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8012034:	f7fe be9e 	b.w	8010d74 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012038:	3001      	adds	r0, #1
 801203a:	d108      	bne.n	801204e <vTaskStartScheduler+0x7e>
 801203c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012040:	f383 8811 	msr	BASEPRI, r3
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	f3bf 8f4f 	dsb	sy
 801204c:	e7fe      	b.n	801204c <vTaskStartScheduler+0x7c>
}
 801204e:	b008      	add	sp, #32
 8012050:	bd10      	pop	{r4, pc}
 8012052:	bf00      	nop
 8012054:	0802d9ec 	.word	0x0802d9ec
 8012058:	08011b55 	.word	0x08011b55
 801205c:	24027f84 	.word	0x24027f84
 8012060:	24027f98 	.word	0x24027f98
 8012064:	24027fa0 	.word	0x24027fa0
 8012068:	24028478 	.word	0x24028478

0801206c <vTaskSwitchContext>:
{
 801206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801206e:	4b1c      	ldr	r3, [pc, #112]	@ (80120e0 <vTaskSwitchContext+0x74>)
 8012070:	681a      	ldr	r2, [r3, #0]
 8012072:	4b1c      	ldr	r3, [pc, #112]	@ (80120e4 <vTaskSwitchContext+0x78>)
 8012074:	b112      	cbz	r2, 801207c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8012076:	2201      	movs	r2, #1
 8012078:	601a      	str	r2, [r3, #0]
}
 801207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 801207c:	4c1a      	ldr	r4, [pc, #104]	@ (80120e8 <vTaskSwitchContext+0x7c>)
 801207e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012080:	4e1a      	ldr	r6, [pc, #104]	@ (80120ec <vTaskSwitchContext+0x80>)
 8012082:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8012084:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8012086:	6820      	ldr	r0, [r4, #0]
 8012088:	f7ff ff96 	bl	8011fb8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801208c:	6832      	ldr	r2, [r6, #0]
 801208e:	4918      	ldr	r1, [pc, #96]	@ (80120f0 <vTaskSwitchContext+0x84>)
 8012090:	fb07 f302 	mul.w	r3, r7, r2
 8012094:	58cd      	ldr	r5, [r1, r3]
 8012096:	18c8      	adds	r0, r1, r3
 8012098:	b1ad      	cbz	r5, 80120c6 <vTaskSwitchContext+0x5a>
 801209a:	6845      	ldr	r5, [r0, #4]
 801209c:	3308      	adds	r3, #8
 801209e:	686d      	ldr	r5, [r5, #4]
 80120a0:	440b      	add	r3, r1
 80120a2:	429d      	cmp	r5, r3
 80120a4:	6045      	str	r5, [r0, #4]
 80120a6:	bf04      	itt	eq
 80120a8:	686b      	ldreq	r3, [r5, #4]
 80120aa:	6043      	streq	r3, [r0, #4]
 80120ac:	2314      	movs	r3, #20
 80120ae:	fb03 1102 	mla	r1, r3, r2, r1
 80120b2:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 80120b4:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	6023      	str	r3, [r4, #0]
 80120ba:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80120bc:	6820      	ldr	r0, [r4, #0]
}
 80120be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80120c2:	f7ff bf79 	b.w	8011fb8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120c6:	b942      	cbnz	r2, 80120da <vTaskSwitchContext+0x6e>
 80120c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120cc:	f383 8811 	msr	BASEPRI, r3
 80120d0:	f3bf 8f6f 	isb	sy
 80120d4:	f3bf 8f4f 	dsb	sy
 80120d8:	e7fe      	b.n	80120d8 <vTaskSwitchContext+0x6c>
 80120da:	3a01      	subs	r2, #1
 80120dc:	e7d8      	b.n	8012090 <vTaskSwitchContext+0x24>
 80120de:	bf00      	nop
 80120e0:	24027f80 	.word	0x24027f80
 80120e4:	24027f90 	.word	0x24027f90
 80120e8:	24028478 	.word	0x24028478
 80120ec:	24027f9c 	.word	0x24027f9c
 80120f0:	24028018 	.word	0x24028018

080120f4 <vTaskPlaceOnEventList>:
{
 80120f4:	b510      	push	{r4, lr}
 80120f6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80120f8:	b940      	cbnz	r0, 801210c <vTaskPlaceOnEventList+0x18>
 80120fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120fe:	f383 8811 	msr	BASEPRI, r3
 8012102:	f3bf 8f6f 	isb	sy
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	e7fe      	b.n	801210a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801210c:	4b05      	ldr	r3, [pc, #20]	@ (8012124 <vTaskPlaceOnEventList+0x30>)
 801210e:	6819      	ldr	r1, [r3, #0]
 8012110:	3118      	adds	r1, #24
 8012112:	f7fe fd16 	bl	8010b42 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012116:	4620      	mov	r0, r4
 8012118:	2101      	movs	r1, #1
}
 801211a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801211e:	f7ff bcb3 	b.w	8011a88 <prvAddCurrentTaskToDelayedList>
 8012122:	bf00      	nop
 8012124:	24028478 	.word	0x24028478

08012128 <vTaskPlaceOnEventListRestricted>:
	{
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	460d      	mov	r5, r1
 801212c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 801212e:	b940      	cbnz	r0, 8012142 <vTaskPlaceOnEventListRestricted+0x1a>
 8012130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	e7fe      	b.n	8012140 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012142:	4b07      	ldr	r3, [pc, #28]	@ (8012160 <vTaskPlaceOnEventListRestricted+0x38>)
 8012144:	6819      	ldr	r1, [r3, #0]
 8012146:	3118      	adds	r1, #24
 8012148:	f7fe fcf0 	bl	8010b2c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 801214c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801214e:	4621      	mov	r1, r4
 8012150:	bf0c      	ite	eq
 8012152:	4628      	moveq	r0, r5
 8012154:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8012158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801215c:	f7ff bc94 	b.w	8011a88 <prvAddCurrentTaskToDelayedList>
 8012160:	24028478 	.word	0x24028478

08012164 <xTaskRemoveFromEventList>:
{
 8012164:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012166:	68c3      	ldr	r3, [r0, #12]
 8012168:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801216a:	b944      	cbnz	r4, 801217e <xTaskRemoveFromEventList+0x1a>
 801216c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012170:	f383 8811 	msr	BASEPRI, r3
 8012174:	f3bf 8f6f 	isb	sy
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	e7fe      	b.n	801217c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801217e:	f104 0518 	add.w	r5, r4, #24
 8012182:	4628      	mov	r0, r5
 8012184:	f7fe fcf4 	bl	8010b70 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012188:	4b11      	ldr	r3, [pc, #68]	@ (80121d0 <xTaskRemoveFromEventList+0x6c>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	b9d3      	cbnz	r3, 80121c4 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801218e:	1d25      	adds	r5, r4, #4
 8012190:	4628      	mov	r0, r5
 8012192:	f7fe fced 	bl	8010b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012196:	4a0f      	ldr	r2, [pc, #60]	@ (80121d4 <xTaskRemoveFromEventList+0x70>)
 8012198:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801219a:	6811      	ldr	r1, [r2, #0]
 801219c:	428b      	cmp	r3, r1
 801219e:	d900      	bls.n	80121a2 <xTaskRemoveFromEventList+0x3e>
 80121a0:	6013      	str	r3, [r2, #0]
 80121a2:	2014      	movs	r0, #20
 80121a4:	4a0c      	ldr	r2, [pc, #48]	@ (80121d8 <xTaskRemoveFromEventList+0x74>)
 80121a6:	4629      	mov	r1, r5
 80121a8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80121ac:	f7fe fcbe 	bl	8010b2c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80121b0:	4b0a      	ldr	r3, [pc, #40]	@ (80121dc <xTaskRemoveFromEventList+0x78>)
 80121b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d906      	bls.n	80121ca <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 80121bc:	2001      	movs	r0, #1
 80121be:	4b08      	ldr	r3, [pc, #32]	@ (80121e0 <xTaskRemoveFromEventList+0x7c>)
 80121c0:	6018      	str	r0, [r3, #0]
}
 80121c2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80121c4:	4629      	mov	r1, r5
 80121c6:	4807      	ldr	r0, [pc, #28]	@ (80121e4 <xTaskRemoveFromEventList+0x80>)
 80121c8:	e7f0      	b.n	80121ac <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 80121ca:	2000      	movs	r0, #0
	return xReturn;
 80121cc:	e7f9      	b.n	80121c2 <xTaskRemoveFromEventList+0x5e>
 80121ce:	bf00      	nop
 80121d0:	24027f80 	.word	0x24027f80
 80121d4:	24027f9c 	.word	0x24027f9c
 80121d8:	24028018 	.word	0x24028018
 80121dc:	24028478 	.word	0x24028478
 80121e0:	24027f90 	.word	0x24027f90
 80121e4:	24027fd4 	.word	0x24027fd4

080121e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80121e8:	4b03      	ldr	r3, [pc, #12]	@ (80121f8 <vTaskInternalSetTimeOutState+0x10>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80121ee:	4b03      	ldr	r3, [pc, #12]	@ (80121fc <vTaskInternalSetTimeOutState+0x14>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	6043      	str	r3, [r0, #4]
}
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop
 80121f8:	24027f8c 	.word	0x24027f8c
 80121fc:	24027fa0 	.word	0x24027fa0

08012200 <xTaskCheckForTimeOut>:
{
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8012204:	4605      	mov	r5, r0
 8012206:	b940      	cbnz	r0, 801221a <xTaskCheckForTimeOut+0x1a>
 8012208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801220c:	f383 8811 	msr	BASEPRI, r3
 8012210:	f3bf 8f6f 	isb	sy
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	e7fe      	b.n	8012218 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 801221a:	b941      	cbnz	r1, 801222e <xTaskCheckForTimeOut+0x2e>
 801221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012220:	f383 8811 	msr	BASEPRI, r3
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	e7fe      	b.n	801222c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 801222e:	f7fe fd11 	bl	8010c54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8012232:	4b0f      	ldr	r3, [pc, #60]	@ (8012270 <xTaskCheckForTimeOut+0x70>)
 8012234:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	1c5a      	adds	r2, r3, #1
 801223a:	d010      	beq.n	801225e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801223c:	480d      	ldr	r0, [pc, #52]	@ (8012274 <xTaskCheckForTimeOut+0x74>)
 801223e:	682e      	ldr	r6, [r5, #0]
 8012240:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012242:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012244:	4286      	cmp	r6, r0
 8012246:	d001      	beq.n	801224c <xTaskCheckForTimeOut+0x4c>
 8012248:	428a      	cmp	r2, r1
 801224a:	d90f      	bls.n	801226c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801224c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801224e:	4283      	cmp	r3, r0
 8012250:	d90a      	bls.n	8012268 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8012252:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012254:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8012256:	4413      	add	r3, r2
 8012258:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801225a:	f7ff ffc5 	bl	80121e8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 801225e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012260:	f7fe fd18 	bl	8010c94 <vPortExitCritical>
}
 8012264:	4620      	mov	r0, r4
 8012266:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8012268:	2300      	movs	r3, #0
 801226a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801226c:	2401      	movs	r4, #1
 801226e:	e7f7      	b.n	8012260 <xTaskCheckForTimeOut+0x60>
 8012270:	24027fa0 	.word	0x24027fa0
 8012274:	24027f8c 	.word	0x24027f8c

08012278 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8012278:	4b01      	ldr	r3, [pc, #4]	@ (8012280 <vTaskMissedYield+0x8>)
 801227a:	2201      	movs	r2, #1
 801227c:	601a      	str	r2, [r3, #0]
}
 801227e:	4770      	bx	lr
 8012280:	24027f90 	.word	0x24027f90

08012284 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8012284:	4b01      	ldr	r3, [pc, #4]	@ (801228c <xTaskGetCurrentTaskHandle+0x8>)
 8012286:	6818      	ldr	r0, [r3, #0]
	}
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop
 801228c:	24028478 	.word	0x24028478

08012290 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8012290:	4b05      	ldr	r3, [pc, #20]	@ (80122a8 <xTaskGetSchedulerState+0x18>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	b133      	cbz	r3, 80122a4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012296:	4b05      	ldr	r3, [pc, #20]	@ (80122ac <xTaskGetSchedulerState+0x1c>)
 8012298:	6818      	ldr	r0, [r3, #0]
 801229a:	fab0 f080 	clz	r0, r0
 801229e:	0940      	lsrs	r0, r0, #5
 80122a0:	0040      	lsls	r0, r0, #1
 80122a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80122a4:	2001      	movs	r0, #1
	}
 80122a6:	4770      	bx	lr
 80122a8:	24027f98 	.word	0x24027f98
 80122ac:	24027f80 	.word	0x24027f80

080122b0 <xTaskPriorityInherit>:
	{
 80122b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80122b2:	4604      	mov	r4, r0
 80122b4:	b338      	cbz	r0, 8012306 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80122b6:	4d1a      	ldr	r5, [pc, #104]	@ (8012320 <xTaskPriorityInherit+0x70>)
 80122b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80122ba:	682a      	ldr	r2, [r5, #0]
 80122bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80122be:	4293      	cmp	r3, r2
 80122c0:	d226      	bcs.n	8012310 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80122c2:	6982      	ldr	r2, [r0, #24]
 80122c4:	2a00      	cmp	r2, #0
 80122c6:	db04      	blt.n	80122d2 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122c8:	682a      	ldr	r2, [r5, #0]
 80122ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80122cc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80122d0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80122d2:	2214      	movs	r2, #20
 80122d4:	4e13      	ldr	r6, [pc, #76]	@ (8012324 <xTaskPriorityInherit+0x74>)
 80122d6:	fb02 6303 	mla	r3, r2, r3, r6
 80122da:	6962      	ldr	r2, [r4, #20]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d113      	bne.n	8012308 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122e0:	1d27      	adds	r7, r4, #4
 80122e2:	4638      	mov	r0, r7
 80122e4:	f7fe fc44 	bl	8010b70 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122e8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80122ea:	4a0f      	ldr	r2, [pc, #60]	@ (8012328 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80122ee:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80122f2:	428b      	cmp	r3, r1
 80122f4:	d900      	bls.n	80122f8 <xTaskPriorityInherit+0x48>
 80122f6:	6013      	str	r3, [r2, #0]
 80122f8:	2014      	movs	r0, #20
 80122fa:	4639      	mov	r1, r7
 80122fc:	fb00 6003 	mla	r0, r0, r3, r6
 8012300:	f7fe fc14 	bl	8010b2c <vListInsertEnd>
				xReturn = pdTRUE;
 8012304:	2001      	movs	r0, #1
	}
 8012306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012308:	682b      	ldr	r3, [r5, #0]
 801230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801230c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801230e:	e7f9      	b.n	8012304 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012310:	682b      	ldr	r3, [r5, #0]
 8012312:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8012314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012316:	4298      	cmp	r0, r3
 8012318:	bf2c      	ite	cs
 801231a:	2000      	movcs	r0, #0
 801231c:	2001      	movcc	r0, #1
 801231e:	e7f2      	b.n	8012306 <xTaskPriorityInherit+0x56>
 8012320:	24028478 	.word	0x24028478
 8012324:	24028018 	.word	0x24028018
 8012328:	24027f9c 	.word	0x24027f9c

0801232c <xTaskPriorityDisinherit>:
	{
 801232c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 801232e:	b908      	cbnz	r0, 8012334 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8012330:	2000      	movs	r0, #0
	}
 8012332:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8012334:	4b1b      	ldr	r3, [pc, #108]	@ (80123a4 <xTaskPriorityDisinherit+0x78>)
 8012336:	681c      	ldr	r4, [r3, #0]
 8012338:	4284      	cmp	r4, r0
 801233a:	d008      	beq.n	801234e <xTaskPriorityDisinherit+0x22>
 801233c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012340:	f383 8811 	msr	BASEPRI, r3
 8012344:	f3bf 8f6f 	isb	sy
 8012348:	f3bf 8f4f 	dsb	sy
 801234c:	e7fe      	b.n	801234c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801234e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8012350:	b943      	cbnz	r3, 8012364 <xTaskPriorityDisinherit+0x38>
 8012352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012356:	f383 8811 	msr	BASEPRI, r3
 801235a:	f3bf 8f6f 	isb	sy
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	e7fe      	b.n	8012362 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012364:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8012366:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012368:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 801236a:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801236c:	4291      	cmp	r1, r2
 801236e:	d0df      	beq.n	8012330 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012370:	2b00      	cmp	r3, #0
 8012372:	d1dd      	bne.n	8012330 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012374:	1d25      	adds	r5, r4, #4
 8012376:	4628      	mov	r0, r5
 8012378:	f7fe fbfa 	bl	8010b70 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801237c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801237e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012382:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012384:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8012386:	4a08      	ldr	r2, [pc, #32]	@ (80123a8 <xTaskPriorityDisinherit+0x7c>)
 8012388:	6811      	ldr	r1, [r2, #0]
 801238a:	428b      	cmp	r3, r1
 801238c:	d900      	bls.n	8012390 <xTaskPriorityDisinherit+0x64>
 801238e:	6013      	str	r3, [r2, #0]
 8012390:	4a06      	ldr	r2, [pc, #24]	@ (80123ac <xTaskPriorityDisinherit+0x80>)
 8012392:	2014      	movs	r0, #20
 8012394:	4629      	mov	r1, r5
 8012396:	fb00 2003 	mla	r0, r0, r3, r2
 801239a:	f7fe fbc7 	bl	8010b2c <vListInsertEnd>
					xReturn = pdTRUE;
 801239e:	2001      	movs	r0, #1
		return xReturn;
 80123a0:	e7c7      	b.n	8012332 <xTaskPriorityDisinherit+0x6>
 80123a2:	bf00      	nop
 80123a4:	24028478 	.word	0x24028478
 80123a8:	24027f9c 	.word	0x24027f9c
 80123ac:	24028018 	.word	0x24028018

080123b0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80123b0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80123b2:	4604      	mov	r4, r0
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d042      	beq.n	801243e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 80123b8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80123ba:	b942      	cbnz	r2, 80123ce <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80123bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123c0:	f383 8811 	msr	BASEPRI, r3
 80123c4:	f3bf 8f6f 	isb	sy
 80123c8:	f3bf 8f4f 	dsb	sy
 80123cc:	e7fe      	b.n	80123cc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80123ce:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80123d0:	4299      	cmp	r1, r3
 80123d2:	bf38      	it	cc
 80123d4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80123d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80123d8:	428b      	cmp	r3, r1
 80123da:	d030      	beq.n	801243e <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80123dc:	2a01      	cmp	r2, #1
 80123de:	d12e      	bne.n	801243e <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 80123e0:	4a17      	ldr	r2, [pc, #92]	@ (8012440 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80123e2:	6812      	ldr	r2, [r2, #0]
 80123e4:	4282      	cmp	r2, r0
 80123e6:	d108      	bne.n	80123fa <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80123e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123ec:	f383 8811 	msr	BASEPRI, r3
 80123f0:	f3bf 8f6f 	isb	sy
 80123f4:	f3bf 8f4f 	dsb	sy
 80123f8:	e7fe      	b.n	80123f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123fa:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80123fc:	4d11      	ldr	r5, [pc, #68]	@ (8012444 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123fe:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012400:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8012404:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012406:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801240a:	bfa8      	it	ge
 801240c:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012410:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012412:	bfa8      	it	ge
 8012414:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012416:	429a      	cmp	r2, r3
 8012418:	d111      	bne.n	801243e <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801241a:	1d06      	adds	r6, r0, #4
 801241c:	4630      	mov	r0, r6
 801241e:	f7fe fba7 	bl	8010b70 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8012422:	4a09      	ldr	r2, [pc, #36]	@ (8012448 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8012424:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012426:	6811      	ldr	r1, [r2, #0]
 8012428:	428b      	cmp	r3, r1
 801242a:	d900      	bls.n	801242e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801242c:	6013      	str	r3, [r2, #0]
 801242e:	2014      	movs	r0, #20
 8012430:	4631      	mov	r1, r6
 8012432:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8012436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 801243a:	f7fe bb77 	b.w	8010b2c <vListInsertEnd>
	}
 801243e:	bd70      	pop	{r4, r5, r6, pc}
 8012440:	24028478 	.word	0x24028478
 8012444:	24028018 	.word	0x24028018
 8012448:	24027f9c 	.word	0x24027f9c

0801244c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801244c:	4b04      	ldr	r3, [pc, #16]	@ (8012460 <pvTaskIncrementMutexHeldCount+0x14>)
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	b11a      	cbz	r2, 801245a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012452:	6819      	ldr	r1, [r3, #0]
 8012454:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8012456:	3201      	adds	r2, #1
 8012458:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 801245a:	6818      	ldr	r0, [r3, #0]
	}
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop
 8012460:	24028478 	.word	0x24028478

08012464 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8012464:	4291      	cmp	r1, r2
{
 8012466:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012468:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801246a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 801246c:	d80a      	bhi.n	8012484 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801246e:	1ad2      	subs	r2, r2, r3
 8012470:	6983      	ldr	r3, [r0, #24]
 8012472:	429a      	cmp	r2, r3
 8012474:	d20d      	bcs.n	8012492 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012476:	1d01      	adds	r1, r0, #4
 8012478:	4b07      	ldr	r3, [pc, #28]	@ (8012498 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801247a:	6818      	ldr	r0, [r3, #0]
 801247c:	f7fe fb61 	bl	8010b42 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8012480:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8012482:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012484:	429a      	cmp	r2, r3
 8012486:	d201      	bcs.n	801248c <prvInsertTimerInActiveList+0x28>
 8012488:	4299      	cmp	r1, r3
 801248a:	d202      	bcs.n	8012492 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801248c:	1d01      	adds	r1, r0, #4
 801248e:	4b03      	ldr	r3, [pc, #12]	@ (801249c <prvInsertTimerInActiveList+0x38>)
 8012490:	e7f3      	b.n	801247a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8012492:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8012494:	e7f5      	b.n	8012482 <prvInsertTimerInActiveList+0x1e>
 8012496:	bf00      	nop
 8012498:	24028578 	.word	0x24028578
 801249c:	2402857c 	.word	0x2402857c

080124a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80124a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80124a2:	4c11      	ldr	r4, [pc, #68]	@ (80124e8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80124a4:	f7fe fbd6 	bl	8010c54 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80124a8:	6825      	ldr	r5, [r4, #0]
 80124aa:	b9bd      	cbnz	r5, 80124dc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80124ac:	4f0f      	ldr	r7, [pc, #60]	@ (80124ec <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80124ae:	4e10      	ldr	r6, [pc, #64]	@ (80124f0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80124b0:	4638      	mov	r0, r7
 80124b2:	f7fe fb2d 	bl	8010b10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80124b6:	4630      	mov	r0, r6
 80124b8:	f7fe fb2a 	bl	8010b10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80124bc:	4b0d      	ldr	r3, [pc, #52]	@ (80124f4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80124be:	4a0e      	ldr	r2, [pc, #56]	@ (80124f8 <prvCheckForValidListAndQueue+0x58>)
 80124c0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80124c2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80124c4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80124c6:	4b0d      	ldr	r3, [pc, #52]	@ (80124fc <prvCheckForValidListAndQueue+0x5c>)
 80124c8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80124ca:	4b0d      	ldr	r3, [pc, #52]	@ (8012500 <prvCheckForValidListAndQueue+0x60>)
 80124cc:	9500      	str	r5, [sp, #0]
 80124ce:	f7fe fdcb 	bl	8011068 <xQueueGenericCreateStatic>
 80124d2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80124d4:	b110      	cbz	r0, 80124dc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80124d6:	490b      	ldr	r1, [pc, #44]	@ (8012504 <prvCheckForValidListAndQueue+0x64>)
 80124d8:	f7ff f9f6 	bl	80118c8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80124dc:	b003      	add	sp, #12
 80124de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80124e2:	f7fe bbd7 	b.w	8010c94 <vPortExitCritical>
 80124e6:	bf00      	nop
 80124e8:	24028574 	.word	0x24028574
 80124ec:	24028594 	.word	0x24028594
 80124f0:	24028580 	.word	0x24028580
 80124f4:	2402857c 	.word	0x2402857c
 80124f8:	240284cc 	.word	0x240284cc
 80124fc:	24028578 	.word	0x24028578
 8012500:	2402847c 	.word	0x2402847c
 8012504:	0802d9f1 	.word	0x0802d9f1

08012508 <xTimerCreateTimerTask>:
{
 8012508:	b510      	push	{r4, lr}
 801250a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801250c:	f7ff ffc8 	bl	80124a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8012510:	4b12      	ldr	r3, [pc, #72]	@ (801255c <xTimerCreateTimerTask+0x54>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	b1b3      	cbz	r3, 8012544 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012516:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012518:	aa07      	add	r2, sp, #28
 801251a:	a906      	add	r1, sp, #24
 801251c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801251e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012522:	f7fe f9ed 	bl	8010900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012526:	9b05      	ldr	r3, [sp, #20]
 8012528:	9a07      	ldr	r2, [sp, #28]
 801252a:	9302      	str	r3, [sp, #8]
 801252c:	9b06      	ldr	r3, [sp, #24]
 801252e:	490c      	ldr	r1, [pc, #48]	@ (8012560 <xTimerCreateTimerTask+0x58>)
 8012530:	9301      	str	r3, [sp, #4]
 8012532:	2302      	movs	r3, #2
 8012534:	480b      	ldr	r0, [pc, #44]	@ (8012564 <xTimerCreateTimerTask+0x5c>)
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	4623      	mov	r3, r4
 801253a:	f7ff fb8a 	bl	8011c52 <xTaskCreateStatic>
 801253e:	4b0a      	ldr	r3, [pc, #40]	@ (8012568 <xTimerCreateTimerTask+0x60>)
 8012540:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8012542:	b940      	cbnz	r0, 8012556 <xTimerCreateTimerTask+0x4e>
 8012544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012548:	f383 8811 	msr	BASEPRI, r3
 801254c:	f3bf 8f6f 	isb	sy
 8012550:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8012554:	e7fe      	b.n	8012554 <xTimerCreateTimerTask+0x4c>
}
 8012556:	2001      	movs	r0, #1
 8012558:	b008      	add	sp, #32
 801255a:	bd10      	pop	{r4, pc}
 801255c:	24028574 	.word	0x24028574
 8012560:	0802d9f6 	.word	0x0802d9f6
 8012564:	08012665 	.word	0x08012665
 8012568:	24028570 	.word	0x24028570

0801256c <xTimerGenericCommand>:
{
 801256c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801256e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8012570:	4604      	mov	r4, r0
{
 8012572:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8012574:	b940      	cbnz	r0, 8012588 <xTimerGenericCommand+0x1c>
 8012576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801257a:	f383 8811 	msr	BASEPRI, r3
 801257e:	f3bf 8f6f 	isb	sy
 8012582:	f3bf 8f4f 	dsb	sy
 8012586:	e7fe      	b.n	8012586 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8012588:	4d0c      	ldr	r5, [pc, #48]	@ (80125bc <xTimerGenericCommand+0x50>)
 801258a:	6828      	ldr	r0, [r5, #0]
 801258c:	b178      	cbz	r0, 80125ae <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801258e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012590:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012592:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012596:	dc0c      	bgt.n	80125b2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012598:	f7ff fe7a 	bl	8012290 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801259c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801259e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80125a0:	4669      	mov	r1, sp
 80125a2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80125a4:	bf0c      	ite	eq
 80125a6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80125a8:	461a      	movne	r2, r3
 80125aa:	f7fe fe12 	bl	80111d2 <xQueueGenericSend>
}
 80125ae:	b004      	add	sp, #16
 80125b0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80125b2:	2300      	movs	r3, #0
 80125b4:	4669      	mov	r1, sp
 80125b6:	f7fe ff0f 	bl	80113d8 <xQueueGenericSendFromISR>
 80125ba:	e7f8      	b.n	80125ae <xTimerGenericCommand+0x42>
 80125bc:	24028574 	.word	0x24028574

080125c0 <prvSampleTimeNow>:
{
 80125c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80125c4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8012660 <prvSampleTimeNow+0xa0>
{
 80125c8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80125ca:	f7ff fbb1 	bl	8011d30 <xTaskGetTickCount>
 80125ce:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80125d0:	f8d8 3000 	ldr.w	r3, [r8]
 80125d4:	4283      	cmp	r3, r0
 80125d6:	d909      	bls.n	80125ec <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125d8:	4f1f      	ldr	r7, [pc, #124]	@ (8012658 <prvSampleTimeNow+0x98>)
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	b96a      	cbnz	r2, 80125fc <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80125e0:	4a1e      	ldr	r2, [pc, #120]	@ (801265c <prvSampleTimeNow+0x9c>)
 80125e2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125e4:	6013      	str	r3, [r2, #0]
 80125e6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80125e8:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80125ea:	e000      	b.n	80125ee <prvSampleTimeNow+0x2e>
 80125ec:	2300      	movs	r3, #0
}
 80125ee:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80125f0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80125f2:	f8c8 5000 	str.w	r5, [r8]
}
 80125f6:	b002      	add	sp, #8
 80125f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125fc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125fe:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012600:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012604:	f104 0a04 	add.w	sl, r4, #4
 8012608:	4650      	mov	r0, sl
 801260a:	f7fe fab1 	bl	8010b70 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801260e:	6a23      	ldr	r3, [r4, #32]
 8012610:	4620      	mov	r0, r4
 8012612:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012614:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012618:	075b      	lsls	r3, r3, #29
 801261a:	d5de      	bpl.n	80125da <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801261c:	69a3      	ldr	r3, [r4, #24]
 801261e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8012620:	4599      	cmp	r9, r3
 8012622:	d206      	bcs.n	8012632 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012624:	4651      	mov	r1, sl
 8012626:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012628:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801262a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801262c:	f7fe fa89 	bl	8010b42 <vListInsert>
 8012630:	e7d3      	b.n	80125da <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012632:	2300      	movs	r3, #0
 8012634:	464a      	mov	r2, r9
 8012636:	4620      	mov	r0, r4
 8012638:	4619      	mov	r1, r3
 801263a:	9300      	str	r3, [sp, #0]
 801263c:	f7ff ff96 	bl	801256c <xTimerGenericCommand>
				configASSERT( xResult );
 8012640:	2800      	cmp	r0, #0
 8012642:	d1ca      	bne.n	80125da <prvSampleTimeNow+0x1a>
 8012644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012648:	f383 8811 	msr	BASEPRI, r3
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	e7fe      	b.n	8012654 <prvSampleTimeNow+0x94>
 8012656:	bf00      	nop
 8012658:	2402857c 	.word	0x2402857c
 801265c:	24028578 	.word	0x24028578
 8012660:	2402856c 	.word	0x2402856c

08012664 <prvTimerTask>:
{
 8012664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012668:	4d6e      	ldr	r5, [pc, #440]	@ (8012824 <prvTimerTask+0x1c0>)
{
 801266a:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801266c:	4e6e      	ldr	r6, [pc, #440]	@ (8012828 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801266e:	682b      	ldr	r3, [r5, #0]
 8012670:	f8d3 8000 	ldr.w	r8, [r3]
 8012674:	f1b8 0f00 	cmp.w	r8, #0
 8012678:	d035      	beq.n	80126e6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801267a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801267c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801267e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8012682:	f7ff fb4d 	bl	8011d20 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012686:	a804      	add	r0, sp, #16
 8012688:	f7ff ff9a 	bl	80125c0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801268c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801268e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8012690:	2b00      	cmp	r3, #0
 8012692:	d169      	bne.n	8012768 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012694:	2c00      	cmp	r4, #0
 8012696:	d14c      	bne.n	8012732 <prvTimerTask+0xce>
 8012698:	4540      	cmp	r0, r8
 801269a:	d350      	bcc.n	801273e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 801269c:	f7ff fbe4 	bl	8011e68 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126a0:	682b      	ldr	r3, [r5, #0]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126a6:	1d38      	adds	r0, r7, #4
 80126a8:	f7fe fa62 	bl	8010b70 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80126b0:	0758      	lsls	r0, r3, #29
 80126b2:	d51a      	bpl.n	80126ea <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80126b4:	69b9      	ldr	r1, [r7, #24]
 80126b6:	4643      	mov	r3, r8
 80126b8:	464a      	mov	r2, r9
 80126ba:	4638      	mov	r0, r7
 80126bc:	4441      	add	r1, r8
 80126be:	f7ff fed1 	bl	8012464 <prvInsertTimerInActiveList>
 80126c2:	b1b0      	cbz	r0, 80126f2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80126c4:	4623      	mov	r3, r4
 80126c6:	4642      	mov	r2, r8
 80126c8:	4621      	mov	r1, r4
 80126ca:	4638      	mov	r0, r7
 80126cc:	9400      	str	r4, [sp, #0]
 80126ce:	f7ff ff4d 	bl	801256c <xTimerGenericCommand>
			configASSERT( xResult );
 80126d2:	b970      	cbnz	r0, 80126f2 <prvTimerTask+0x8e>
 80126d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d8:	f383 8811 	msr	BASEPRI, r3
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f3bf 8f4f 	dsb	sy
 80126e4:	e7fe      	b.n	80126e4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80126e6:	2401      	movs	r4, #1
 80126e8:	e7cb      	b.n	8012682 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126ea:	f023 0301 	bic.w	r3, r3, #1
 80126ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	4638      	mov	r0, r7
 80126f6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80126f8:	2200      	movs	r2, #0
 80126fa:	a904      	add	r1, sp, #16
 80126fc:	6830      	ldr	r0, [r6, #0]
 80126fe:	f7fe ff19 	bl	8011534 <xQueueReceive>
 8012702:	2800      	cmp	r0, #0
 8012704:	d0b3      	beq.n	801266e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012706:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012708:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801270a:	2b00      	cmp	r3, #0
 801270c:	db2f      	blt.n	801276e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801270e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012710:	6963      	ldr	r3, [r4, #20]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d132      	bne.n	801277c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012716:	a803      	add	r0, sp, #12
 8012718:	f7ff ff52 	bl	80125c0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801271c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801271e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8012720:	2b09      	cmp	r3, #9
 8012722:	d8e9      	bhi.n	80126f8 <prvTimerTask+0x94>
 8012724:	e8df f003 	tbb	[pc, r3]
 8012728:	572e2e2e 	.word	0x572e2e2e
 801272c:	2e2e765e 	.word	0x2e2e765e
 8012730:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012732:	4b3e      	ldr	r3, [pc, #248]	@ (801282c <prvTimerTask+0x1c8>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	681c      	ldr	r4, [r3, #0]
 8012738:	fab4 f484 	clz	r4, r4
 801273c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801273e:	4622      	mov	r2, r4
 8012740:	eba8 0109 	sub.w	r1, r8, r9
 8012744:	6830      	ldr	r0, [r6, #0]
 8012746:	f7ff f8fe 	bl	8011946 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801274a:	f7ff fb8d 	bl	8011e68 <xTaskResumeAll>
 801274e:	2800      	cmp	r0, #0
 8012750:	d1d2      	bne.n	80126f8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8012752:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801275a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801275e:	f3bf 8f4f 	dsb	sy
 8012762:	f3bf 8f6f 	isb	sy
 8012766:	e7c7      	b.n	80126f8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8012768:	f7ff fb7e 	bl	8011e68 <xTaskResumeAll>
}
 801276c:	e7c4      	b.n	80126f8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801276e:	9b05      	ldr	r3, [sp, #20]
 8012770:	9907      	ldr	r1, [sp, #28]
 8012772:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012774:	9b04      	ldr	r3, [sp, #16]
 8012776:	2b00      	cmp	r3, #0
 8012778:	dbbe      	blt.n	80126f8 <prvTimerTask+0x94>
 801277a:	e7c8      	b.n	801270e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801277c:	1d20      	adds	r0, r4, #4
 801277e:	f7fe f9f7 	bl	8010b70 <uxListRemove>
 8012782:	e7c8      	b.n	8012716 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012784:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012788:	4620      	mov	r0, r4
 801278a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801278c:	f043 0301 	orr.w	r3, r3, #1
 8012790:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012794:	9b05      	ldr	r3, [sp, #20]
 8012796:	4419      	add	r1, r3
 8012798:	f7ff fe64 	bl	8012464 <prvInsertTimerInActiveList>
 801279c:	2800      	cmp	r0, #0
 801279e:	d0ab      	beq.n	80126f8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127a0:	6a23      	ldr	r3, [r4, #32]
 80127a2:	4620      	mov	r0, r4
 80127a4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127a6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80127aa:	0759      	lsls	r1, r3, #29
 80127ac:	d5a4      	bpl.n	80126f8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80127ae:	69a2      	ldr	r2, [r4, #24]
 80127b0:	2300      	movs	r3, #0
 80127b2:	9905      	ldr	r1, [sp, #20]
 80127b4:	4620      	mov	r0, r4
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	440a      	add	r2, r1
 80127ba:	4619      	mov	r1, r3
 80127bc:	f7ff fed6 	bl	801256c <xTimerGenericCommand>
							configASSERT( xResult );
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d199      	bne.n	80126f8 <prvTimerTask+0x94>
 80127c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127c8:	f383 8811 	msr	BASEPRI, r3
 80127cc:	f3bf 8f6f 	isb	sy
 80127d0:	f3bf 8f4f 	dsb	sy
 80127d4:	e7fe      	b.n	80127d4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127d6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127da:	f023 0301 	bic.w	r3, r3, #1
 80127de:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80127e2:	e789      	b.n	80126f8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80127e4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80127e8:	f043 0301 	orr.w	r3, r3, #1
 80127ec:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80127f0:	9905      	ldr	r1, [sp, #20]
 80127f2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80127f4:	b941      	cbnz	r1, 8012808 <prvTimerTask+0x1a4>
 80127f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127fa:	f383 8811 	msr	BASEPRI, r3
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	f3bf 8f4f 	dsb	sy
 8012806:	e7fe      	b.n	8012806 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012808:	4603      	mov	r3, r0
 801280a:	4401      	add	r1, r0
 801280c:	4620      	mov	r0, r4
 801280e:	f7ff fe29 	bl	8012464 <prvInsertTimerInActiveList>
					break;
 8012812:	e771      	b.n	80126f8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012814:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012818:	079a      	lsls	r2, r3, #30
 801281a:	d4de      	bmi.n	80127da <prvTimerTask+0x176>
							vPortFree( pxTimer );
 801281c:	4620      	mov	r0, r4
 801281e:	f7fe f939 	bl	8010a94 <vPortFree>
 8012822:	e769      	b.n	80126f8 <prvTimerTask+0x94>
 8012824:	2402857c 	.word	0x2402857c
 8012828:	24028574 	.word	0x24028574
 801282c:	24028578 	.word	0x24028578

08012830 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012830:	8880      	ldrh	r0, [r0, #4]
 8012832:	4770      	bx	lr

08012834 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012834:	b570      	push	{r4, r5, r6, lr}
 8012836:	6803      	ldr	r3, [r0, #0]
 8012838:	460c      	mov	r4, r1
 801283a:	2100      	movs	r1, #0
 801283c:	4605      	mov	r5, r0
 801283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012840:	4798      	blx	r3
 8012842:	4606      	mov	r6, r0
 8012844:	682b      	ldr	r3, [r5, #0]
 8012846:	4628      	mov	r0, r5
 8012848:	1ba4      	subs	r4, r4, r6
 801284a:	6a1b      	ldr	r3, [r3, #32]
 801284c:	b2a4      	uxth	r4, r4
 801284e:	4798      	blx	r3
 8012850:	fbb4 f0f0 	udiv	r0, r4, r0
 8012854:	bd70      	pop	{r4, r5, r6, pc}

08012856 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012856:	2300      	movs	r3, #0
 8012858:	8083      	strh	r3, [r0, #4]
 801285a:	4770      	bx	lr

0801285c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801285c:	b510      	push	{r4, lr}
 801285e:	6803      	ldr	r3, [r0, #0]
 8012860:	4604      	mov	r4, r0
 8012862:	8881      	ldrh	r1, [r0, #4]
 8012864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012866:	4798      	blx	r3
 8012868:	88a3      	ldrh	r3, [r4, #4]
 801286a:	3301      	adds	r3, #1
 801286c:	80a3      	strh	r3, [r4, #4]
 801286e:	bd10      	pop	{r4, pc}

08012870 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012870:	6803      	ldr	r3, [r0, #0]
 8012872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012874:	4718      	bx	r3

08012876 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012876:	4770      	bx	lr

08012878 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012878:	4a02      	ldr	r2, [pc, #8]	@ (8012884 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801287a:	6002      	str	r2, [r0, #0]
 801287c:	2200      	movs	r2, #0
 801287e:	8082      	strh	r2, [r0, #4]
 8012880:	4770      	bx	lr
 8012882:	bf00      	nop
 8012884:	0802da08 	.word	0x0802da08

08012888 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 8012888:	f880 102f 	strb.w	r1, [r0, #47]	@ 0x2f
 801288c:	4770      	bx	lr

0801288e <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 801288e:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 8012892:	4770      	bx	lr

08012894 <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 8012894:	b510      	push	{r4, lr}
 8012896:	6803      	ldr	r3, [r0, #0]
 8012898:	4604      	mov	r4, r0
 801289a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801289e:	4798      	blx	r3
 80128a0:	b110      	cbz	r0, 80128a8 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 80128a2:	4620      	mov	r0, r4
 80128a4:	f7f0 ff93 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80128a8:	bd10      	pop	{r4, pc}

080128aa <_ZN8touchgfx12DigitalClock8setWidthEs>:
 80128aa:	b508      	push	{r3, lr}
 80128ac:	3034      	adds	r0, #52	@ 0x34
 80128ae:	f820 1c2c 	strh.w	r1, [r0, #-44]
 80128b2:	f7f1 faa3 	bl	8003dfc <_ZN8touchgfx8TextArea8setWidthEs>
 80128b6:	bd08      	pop	{r3, pc}

080128b8 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 80128b8:	b508      	push	{r3, lr}
 80128ba:	3034      	adds	r0, #52	@ 0x34
 80128bc:	f820 1c2a 	strh.w	r1, [r0, #-42]
 80128c0:	f7f1 faae 	bl	8003e20 <_ZN8touchgfx8TextArea9setHeightEs>
 80128c4:	bd08      	pop	{r3, pc}
	...

080128c8 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 80128c8:	4a11      	ldr	r2, [pc, #68]	@ (8012910 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 80128ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ce:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80128d2:	4604      	mov	r4, r0
 80128d4:	8812      	ldrh	r2, [r2, #0]
 80128d6:	460d      	mov	r5, r1
 80128d8:	429a      	cmp	r2, r3
 80128da:	d916      	bls.n	801290a <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 80128dc:	6802      	ldr	r2, [r0, #0]
 80128de:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80128e2:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 80128e4:	4a0b      	ldr	r2, [pc, #44]	@ (8012914 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 80128e6:	6812      	ldr	r2, [r2, #0]
 80128e8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80128ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012918 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80128f4:	6803      	ldr	r3, [r0, #0]
 80128f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128f8:	4798      	blx	r3
 80128fa:	1a2a      	subs	r2, r5, r0
 80128fc:	4639      	mov	r1, r7
 80128fe:	4620      	mov	r0, r4
 8012900:	4633      	mov	r3, r6
 8012902:	b212      	sxth	r2, r2
 8012904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012908:	4718      	bx	r3
 801290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801290e:	bf00      	nop
 8012910:	24028610 	.word	0x24028610
 8012914:	2402860c 	.word	0x2402860c
 8012918:	24028614 	.word	0x24028614

0801291c <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 801291c:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 8012920:	4770      	bx	lr

08012922 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8012922:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 8012926:	4770      	bx	lr

08012928 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8012928:	b508      	push	{r3, lr}
 801292a:	3034      	adds	r0, #52	@ 0x34
 801292c:	6301      	str	r1, [r0, #48]	@ 0x30
 801292e:	f7f0 ff4e 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012932:	bd08      	pop	{r3, pc}

08012934 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8012934:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8012936:	4770      	bx	lr

08012938 <_ZN8touchgfx12DigitalClockD1Ev>:
 8012938:	4770      	bx	lr

0801293a <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 801293a:	3034      	adds	r0, #52	@ 0x34
 801293c:	f004 bdda 	b.w	80174f4 <_ZNK8touchgfx8TextArea12getTextWidthEv>

08012940 <_ZN8touchgfx12DigitalClockD0Ev>:
 8012940:	b510      	push	{r4, lr}
 8012942:	4604      	mov	r4, r0
 8012944:	2198      	movs	r1, #152	@ 0x98
 8012946:	f016 fb27 	bl	8028f98 <_ZdlPvj>
 801294a:	4620      	mov	r0, r4
 801294c:	bd10      	pop	{r4, pc}

0801294e <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 801294e:	b538      	push	{r3, r4, r5, lr}
 8012950:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8012954:	460d      	mov	r5, r1
 8012956:	4620      	mov	r0, r4
 8012958:	f7f0 ff39 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801295c:	4620      	mov	r0, r4
 801295e:	4629      	mov	r1, r5
 8012960:	f005 f904 	bl	8017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012964:	4620      	mov	r0, r4
 8012966:	f7f0 ff32 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801296a:	bd38      	pop	{r3, r4, r5, pc}

0801296c <_ZN8touchgfx12DigitalClock11updateClockEv>:
 801296c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012970:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 8012974:	4604      	mov	r4, r0
 8012976:	4630      	mov	r0, r6
 8012978:	f7f0 ff29 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801297c:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8012980:	bb0b      	cbnz	r3, 80129c6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 8012982:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8012986:	4620      	mov	r0, r4
 8012988:	4a40      	ldr	r2, [pc, #256]	@ (8012a8c <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 801298a:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 801298e:	4d40      	ldr	r5, [pc, #256]	@ (8012a90 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8012990:	2b00      	cmp	r3, #0
 8012992:	bf08      	it	eq
 8012994:	4615      	moveq	r5, r2
 8012996:	f000 f928 	bl	8012bea <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 801299a:	4680      	mov	r8, r0
 801299c:	4620      	mov	r0, r4
 801299e:	f000 f937 	bl	8012c10 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80129a2:	4681      	mov	r9, r0
 80129a4:	4620      	mov	r0, r4
 80129a6:	f000 f92c 	bl	8012c02 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	462a      	mov	r2, r5
 80129ae:	f04f 010c 	mov.w	r1, #12
 80129b2:	bf14      	ite	ne
 80129b4:	2341      	movne	r3, #65	@ 0x41
 80129b6:	2350      	moveq	r3, #80	@ 0x50
 80129b8:	4638      	mov	r0, r7
 80129ba:	e9cd 9300 	strd	r9, r3, [sp]
 80129be:	4643      	mov	r3, r8
 80129c0:	f00b fb5a 	bl	801e078 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80129c4:	e017      	b.n	80129f6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d11b      	bne.n	8012a02 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 80129ca:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80129ce:	4620      	mov	r0, r4
 80129d0:	4a30      	ldr	r2, [pc, #192]	@ (8012a94 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 80129d2:	4d31      	ldr	r5, [pc, #196]	@ (8012a98 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	bf08      	it	eq
 80129d8:	4615      	moveq	r5, r2
 80129da:	f000 f903 	bl	8012be4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80129de:	4607      	mov	r7, r0
 80129e0:	4620      	mov	r0, r4
 80129e2:	f000 f915 	bl	8012c10 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80129e6:	462a      	mov	r2, r5
 80129e8:	9000      	str	r0, [sp, #0]
 80129ea:	463b      	mov	r3, r7
 80129ec:	210c      	movs	r1, #12
 80129ee:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80129f2:	f00b fb41 	bl	801e078 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80129f6:	4630      	mov	r0, r6
 80129f8:	f7f0 fee9 	bl	80037ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80129fc:	b004      	add	sp, #16
 80129fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a02:	2b02      	cmp	r3, #2
 8012a04:	d126      	bne.n	8012a54 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 8012a06:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	4a23      	ldr	r2, [pc, #140]	@ (8012a9c <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8012a0e:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8012a12:	4d23      	ldr	r5, [pc, #140]	@ (8012aa0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	bf08      	it	eq
 8012a18:	4615      	moveq	r5, r2
 8012a1a:	f000 f8e6 	bl	8012bea <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8012a1e:	4680      	mov	r8, r0
 8012a20:	4620      	mov	r0, r4
 8012a22:	f000 f8f5 	bl	8012c10 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8012a26:	4681      	mov	r9, r0
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f000 f8f4 	bl	8012c16 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012a2e:	4682      	mov	sl, r0
 8012a30:	4620      	mov	r0, r4
 8012a32:	f000 f8e6 	bl	8012c02 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8012a36:	2800      	cmp	r0, #0
 8012a38:	f8cd 9000 	str.w	r9, [sp]
 8012a3c:	462a      	mov	r2, r5
 8012a3e:	bf14      	ite	ne
 8012a40:	2341      	movne	r3, #65	@ 0x41
 8012a42:	2350      	moveq	r3, #80	@ 0x50
 8012a44:	210c      	movs	r1, #12
 8012a46:	4638      	mov	r0, r7
 8012a48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012a4c:	4643      	mov	r3, r8
 8012a4e:	f00b fb13 	bl	801e078 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012a52:	e7d0      	b.n	80129f6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8012a54:	2b03      	cmp	r3, #3
 8012a56:	d1ce      	bne.n	80129f6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8012a58:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	4a11      	ldr	r2, [pc, #68]	@ (8012aa4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8012a60:	4d11      	ldr	r5, [pc, #68]	@ (8012aa8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	bf08      	it	eq
 8012a66:	4615      	moveq	r5, r2
 8012a68:	f000 f8bc 	bl	8012be4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8012a6c:	4607      	mov	r7, r0
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f000 f8ce 	bl	8012c10 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8012a74:	4680      	mov	r8, r0
 8012a76:	4620      	mov	r0, r4
 8012a78:	f000 f8cd 	bl	8012c16 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012a7c:	463b      	mov	r3, r7
 8012a7e:	462a      	mov	r2, r5
 8012a80:	210c      	movs	r1, #12
 8012a82:	e9cd 8000 	strd	r8, r0, [sp]
 8012a86:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8012a8a:	e799      	b.n	80129c0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 8012a8c:	0802da34 	.word	0x0802da34
 8012a90:	0802da5e 	.word	0x0802da5e
 8012a94:	0802da40 	.word	0x0802da40
 8012a98:	0802da7e 	.word	0x0802da7e
 8012a9c:	0802da5b 	.word	0x0802da5b
 8012aa0:	0802da48 	.word	0x0802da48
 8012aa4:	0802da7b 	.word	0x0802da7b
 8012aa8:	0802da6c 	.word	0x0802da6c

08012aac <_ZN8touchgfx12DigitalClockC1Ev>:
 8012aac:	b510      	push	{r4, lr}
 8012aae:	4604      	mov	r4, r0
 8012ab0:	f000 f87c 	bl	8012bac <_ZN8touchgfx13AbstractClockC1Ev>
 8012ab4:	2201      	movs	r2, #1
 8012ab6:	4b21      	ldr	r3, [pc, #132]	@ (8012b3c <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 8012ab8:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 8012abc:	4620      	mov	r0, r4
 8012abe:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8012ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8012b40 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 8012ac4:	6023      	str	r3, [r4, #0]
 8012ac6:	2303      	movs	r3, #3
 8012ac8:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8012aca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ace:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8012ad8:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 8012adc:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 8012ae0:	4a18      	ldr	r2, [pc, #96]	@ (8012b44 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 8012ae2:	66a1      	str	r1, [r4, #104]	@ 0x68
 8012ae4:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 8012ae8:	6362      	str	r2, [r4, #52]	@ 0x34
 8012aea:	4622      	mov	r2, r4
 8012aec:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8012af0:	8723      	strh	r3, [r4, #56]	@ 0x38
 8012af2:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8012af4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 8012af6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8012af8:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8012afc:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8012b00:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8012b04:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8012b08:	6523      	str	r3, [r4, #80]	@ 0x50
 8012b0a:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8012b0e:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8012b12:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8012b16:	6663      	str	r3, [r4, #100]	@ 0x64
 8012b18:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8012b1c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8012b20:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 8012b24:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 8012b28:	67a3      	str	r3, [r4, #120]	@ 0x78
 8012b2a:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012b2e:	f822 3f80 	strh.w	r3, [r2, #128]!
 8012b32:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8012b34:	f000 f87c 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012b38:	4620      	mov	r0, r4
 8012b3a:	bd10      	pop	{r4, pc}
 8012b3c:	0802da90 	.word	0x0802da90
 8012b40:	0802c798 	.word	0x0802c798
 8012b44:	0802c7a8 	.word	0x0802c7a8

08012b48 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8012b48:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 8012b4c:	4770      	bx	lr

08012b4e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8012b4e:	b470      	push	{r4, r5, r6}
 8012b50:	2518      	movs	r5, #24
 8012b52:	fbb1 f6f5 	udiv	r6, r1, r5
 8012b56:	fb06 1115 	mls	r1, r6, r5, r1
 8012b5a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8012b5e:	213c      	movs	r1, #60	@ 0x3c
 8012b60:	fbb2 f5f1 	udiv	r5, r2, r1
 8012b64:	fb05 2211 	mls	r2, r5, r1, r2
 8012b68:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 8012b6c:	fbb3 f2f1 	udiv	r2, r3, r1
 8012b70:	fb02 3311 	mls	r3, r2, r1, r3
 8012b74:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 8012b78:	6803      	ldr	r3, [r0, #0]
 8012b7a:	bc70      	pop	{r4, r5, r6}
 8012b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b80:	4718      	bx	r3

08012b82 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8012b82:	b4f0      	push	{r4, r5, r6, r7}
 8012b84:	6804      	ldr	r4, [r0, #0]
 8012b86:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8012b8a:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 8012b8e:	240c      	movs	r4, #12
 8012b90:	2e00      	cmp	r6, #0
 8012b92:	46ac      	mov	ip, r5
 8012b94:	fbb1 f7f4 	udiv	r7, r1, r4
 8012b98:	fb07 1114 	mls	r1, r7, r4, r1
 8012b9c:	bf18      	it	ne
 8012b9e:	2400      	movne	r4, #0
 8012ba0:	fa54 f181 	uxtab	r1, r4, r1
 8012ba4:	bcf0      	pop	{r4, r5, r6, r7}
 8012ba6:	b2c9      	uxtb	r1, r1
 8012ba8:	4760      	bx	ip
	...

08012bac <_ZN8touchgfx13AbstractClockC1Ev>:
 8012bac:	2101      	movs	r1, #1
 8012bae:	2200      	movs	r2, #0
 8012bb0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8012bb4:	490a      	ldr	r1, [pc, #40]	@ (8012be0 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 8012bb6:	8082      	strh	r2, [r0, #4]
 8012bb8:	80c2      	strh	r2, [r0, #6]
 8012bba:	8102      	strh	r2, [r0, #8]
 8012bbc:	8142      	strh	r2, [r0, #10]
 8012bbe:	8182      	strh	r2, [r0, #12]
 8012bc0:	81c2      	strh	r2, [r0, #14]
 8012bc2:	8202      	strh	r2, [r0, #16]
 8012bc4:	8242      	strh	r2, [r0, #18]
 8012bc6:	61c2      	str	r2, [r0, #28]
 8012bc8:	8402      	strh	r2, [r0, #32]
 8012bca:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012bcc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8012bd0:	6001      	str	r1, [r0, #0]
 8012bd2:	6282      	str	r2, [r0, #40]	@ 0x28
 8012bd4:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8012bd6:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 8012bda:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012bde:	4770      	bx	lr
 8012be0:	0802db50 	.word	0x0802db50

08012be4 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8012be4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012be8:	4770      	bx	lr

08012bea <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8012bea:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012bee:	220c      	movs	r2, #12
 8012bf0:	f100 030b 	add.w	r3, r0, #11
 8012bf4:	fb93 f0f2 	sdiv	r0, r3, r2
 8012bf8:	fb02 3010 	mls	r0, r2, r0, r3
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	b2c0      	uxtb	r0, r0
 8012c00:	4770      	bx	lr

08012c02 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8012c02:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012c06:	280b      	cmp	r0, #11
 8012c08:	bf8c      	ite	hi
 8012c0a:	2000      	movhi	r0, #0
 8012c0c:	2001      	movls	r0, #1
 8012c0e:	4770      	bx	lr

08012c10 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8012c10:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8012c14:	4770      	bx	lr

08012c16 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8012c16:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 8012c1a:	4770      	bx	lr

08012c1c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012c1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012c1e:	2000      	movs	r0, #0
 8012c20:	b12b      	cbz	r3, 8012c2e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c22:	b920      	cbnz	r0, 8012c2e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012c24:	1a5a      	subs	r2, r3, r1
 8012c26:	699b      	ldr	r3, [r3, #24]
 8012c28:	4250      	negs	r0, r2
 8012c2a:	4150      	adcs	r0, r2
 8012c2c:	e7f8      	b.n	8012c20 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012c2e:	4770      	bx	lr

08012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012c30:	2300      	movs	r3, #0
 8012c32:	6148      	str	r0, [r1, #20]
 8012c34:	618b      	str	r3, [r1, #24]
 8012c36:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012c38:	b913      	cbnz	r3, 8012c40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012c3a:	6281      	str	r1, [r0, #40]	@ 0x28
 8012c3c:	4770      	bx	lr
 8012c3e:	4613      	mov	r3, r2
 8012c40:	699a      	ldr	r2, [r3, #24]
 8012c42:	2a00      	cmp	r2, #0
 8012c44:	d1fb      	bne.n	8012c3e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012c46:	6199      	str	r1, [r3, #24]
 8012c48:	4770      	bx	lr

08012c4a <_ZN8touchgfx9Container9removeAllEv>:
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012c4e:	b123      	cbz	r3, 8012c5a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012c50:	6999      	ldr	r1, [r3, #24]
 8012c52:	6281      	str	r1, [r0, #40]	@ 0x28
 8012c54:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012c58:	e7f8      	b.n	8012c4c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012c5a:	4770      	bx	lr

08012c5c <_ZN8touchgfx9Container6unlinkEv>:
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	6283      	str	r3, [r0, #40]	@ 0x28
 8012c60:	4770      	bx	lr

08012c62 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012c62:	2200      	movs	r2, #0
 8012c64:	8002      	strh	r2, [r0, #0]
 8012c66:	8042      	strh	r2, [r0, #2]
 8012c68:	8082      	strh	r2, [r0, #4]
 8012c6a:	80c2      	strh	r2, [r0, #6]
 8012c6c:	4770      	bx	lr

08012c6e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012c6e:	b570      	push	{r4, r5, r6, lr}
 8012c70:	460d      	mov	r5, r1
 8012c72:	4616      	mov	r6, r2
 8012c74:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012c76:	b13c      	cbz	r4, 8012c88 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012c78:	6823      	ldr	r3, [r4, #0]
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	4632      	mov	r2, r6
 8012c7e:	4629      	mov	r1, r5
 8012c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c82:	4798      	blx	r3
 8012c84:	69a4      	ldr	r4, [r4, #24]
 8012c86:	e7f6      	b.n	8012c76 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012c88:	bd70      	pop	{r4, r5, r6, pc}

08012c8a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012c8a:	b538      	push	{r3, r4, r5, lr}
 8012c8c:	460d      	mov	r5, r1
 8012c8e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012c90:	b134      	cbz	r4, 8012ca0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012c92:	682b      	ldr	r3, [r5, #0]
 8012c94:	4621      	mov	r1, r4
 8012c96:	4628      	mov	r0, r5
 8012c98:	689b      	ldr	r3, [r3, #8]
 8012c9a:	4798      	blx	r3
 8012c9c:	69a4      	ldr	r4, [r4, #24]
 8012c9e:	e7f7      	b.n	8012c90 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012ca0:	bd38      	pop	{r3, r4, r5, pc}

08012ca2 <_ZN8touchgfx9ContainerD1Ev>:
 8012ca2:	4770      	bx	lr

08012ca4 <_ZN8touchgfx9ContainerD0Ev>:
 8012ca4:	b510      	push	{r4, lr}
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	212c      	movs	r1, #44	@ 0x2c
 8012caa:	f016 f975 	bl	8028f98 <_ZdlPvj>
 8012cae:	4620      	mov	r0, r4
 8012cb0:	bd10      	pop	{r4, pc}

08012cb2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012cb2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012cb4:	b19b      	cbz	r3, 8012cde <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012cb6:	428b      	cmp	r3, r1
 8012cb8:	d109      	bne.n	8012cce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012cba:	699a      	ldr	r2, [r3, #24]
 8012cbc:	2100      	movs	r1, #0
 8012cbe:	6159      	str	r1, [r3, #20]
 8012cc0:	6282      	str	r2, [r0, #40]	@ 0x28
 8012cc2:	b902      	cbnz	r2, 8012cc6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012cc4:	4770      	bx	lr
 8012cc6:	6199      	str	r1, [r3, #24]
 8012cc8:	4770      	bx	lr
 8012cca:	4613      	mov	r3, r2
 8012ccc:	b13a      	cbz	r2, 8012cde <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012cce:	699a      	ldr	r2, [r3, #24]
 8012cd0:	428a      	cmp	r2, r1
 8012cd2:	d1fa      	bne.n	8012cca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012cd4:	698a      	ldr	r2, [r1, #24]
 8012cd6:	619a      	str	r2, [r3, #24]
 8012cd8:	2300      	movs	r3, #0
 8012cda:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012cde:	4770      	bx	lr

08012ce0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012ce0:	b410      	push	{r4}
 8012ce2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012ce4:	4604      	mov	r4, r0
 8012ce6:	b92b      	cbnz	r3, 8012cf4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012ce8:	6803      	ldr	r3, [r0, #0]
 8012cea:	4611      	mov	r1, r2
 8012cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012cf2:	4718      	bx	r3
 8012cf4:	b941      	cbnz	r1, 8012d08 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012cf6:	6193      	str	r3, [r2, #24]
 8012cf8:	6282      	str	r2, [r0, #40]	@ 0x28
 8012cfa:	6154      	str	r4, [r2, #20]
 8012cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d00:	4770      	bx	lr
 8012d02:	4603      	mov	r3, r0
 8012d04:	2800      	cmp	r0, #0
 8012d06:	d0f9      	beq.n	8012cfc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012d08:	4299      	cmp	r1, r3
 8012d0a:	6998      	ldr	r0, [r3, #24]
 8012d0c:	d1f9      	bne.n	8012d02 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012d0e:	6190      	str	r0, [r2, #24]
 8012d10:	618a      	str	r2, [r1, #24]
 8012d12:	e7f2      	b.n	8012cfa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012d14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d18:	461f      	mov	r7, r3
 8012d1a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8012d1e:	460d      	mov	r5, r1
 8012d20:	4616      	mov	r6, r2
 8012d22:	b103      	cbz	r3, 8012d26 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012d24:	6038      	str	r0, [r7, #0]
 8012d26:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012d28:	b314      	cbz	r4, 8012d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012d2a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012d2e:	b1eb      	cbz	r3, 8012d6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d30:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012d34:	428d      	cmp	r5, r1
 8012d36:	db19      	blt.n	8012d6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d38:	b289      	uxth	r1, r1
 8012d3a:	8923      	ldrh	r3, [r4, #8]
 8012d3c:	440b      	add	r3, r1
 8012d3e:	b21b      	sxth	r3, r3
 8012d40:	429d      	cmp	r5, r3
 8012d42:	da13      	bge.n	8012d6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d44:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012d48:	4296      	cmp	r6, r2
 8012d4a:	db0f      	blt.n	8012d6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d4c:	b292      	uxth	r2, r2
 8012d4e:	8963      	ldrh	r3, [r4, #10]
 8012d50:	4413      	add	r3, r2
 8012d52:	b21b      	sxth	r3, r3
 8012d54:	429e      	cmp	r6, r3
 8012d56:	da09      	bge.n	8012d6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	1ab2      	subs	r2, r6, r2
 8012d5c:	1a69      	subs	r1, r5, r1
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8012d64:	b212      	sxth	r2, r2
 8012d66:	463b      	mov	r3, r7
 8012d68:	b209      	sxth	r1, r1
 8012d6a:	47c0      	blx	r8
 8012d6c:	69a4      	ldr	r4, [r4, #24]
 8012d6e:	e7db      	b.n	8012d28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d78:	4c6d      	ldr	r4, [pc, #436]	@ (8012f30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012d7a:	b0a1      	sub	sp, #132	@ 0x84
 8012d7c:	4606      	mov	r6, r0
 8012d7e:	6824      	ldr	r4, [r4, #0]
 8012d80:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8012d82:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8012d86:	2400      	movs	r4, #0
 8012d88:	9303      	str	r3, [sp, #12]
 8012d8a:	802c      	strh	r4, [r5, #0]
 8012d8c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8012d8e:	802c      	strh	r4, [r5, #0]
 8012d90:	601c      	str	r4, [r3, #0]
 8012d92:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012d96:	f7ff ffbd 	bl	8012d14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012d9a:	f1b9 0f03 	cmp.w	r9, #3
 8012d9e:	f340 80c1 	ble.w	8012f24 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012da2:	4631      	mov	r1, r6
 8012da4:	a80c      	add	r0, sp, #48	@ 0x30
 8012da6:	f008 fe91 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012daa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8012dae:	9306      	str	r3, [sp, #24]
 8012db0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012db4:	9307      	str	r3, [sp, #28]
 8012db6:	9b03      	ldr	r3, [sp, #12]
 8012db8:	f8d3 a000 	ldr.w	sl, [r3]
 8012dbc:	f1ba 0f00 	cmp.w	sl, #0
 8012dc0:	f000 80b3 	beq.w	8012f2a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012dc4:	4651      	mov	r1, sl
 8012dc6:	a810      	add	r0, sp, #64	@ 0x40
 8012dc8:	f008 fe80 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012dcc:	2002      	movs	r0, #2
 8012dce:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8012dd2:	9b01      	ldr	r3, [sp, #4]
 8012dd4:	9a06      	ldr	r2, [sp, #24]
 8012dd6:	fb91 f1f0 	sdiv	r1, r1, r0
 8012dda:	189d      	adds	r5, r3, r2
 8012ddc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8012de0:	9a07      	ldr	r2, [sp, #28]
 8012de2:	4419      	add	r1, r3
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	4413      	add	r3, r2
 8012de8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8012dec:	1a6d      	subs	r5, r5, r1
 8012dee:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8012df2:	fb92 f2f0 	sdiv	r2, r2, r0
 8012df6:	440a      	add	r2, r1
 8012df8:	1a9b      	subs	r3, r3, r2
 8012dfa:	435b      	muls	r3, r3
 8012dfc:	fb05 3505 	mla	r5, r5, r5, r3
 8012e00:	4f4c      	ldr	r7, [pc, #304]	@ (8012f34 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012e02:	ac10      	add	r4, sp, #64	@ 0x40
 8012e04:	f1b9 0f0c 	cmp.w	r9, #12
 8012e08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e14:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012e1c:	f04f 0303 	mov.w	r3, #3
 8012e20:	bfd8      	it	le
 8012e22:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012e26:	f04f 0400 	mov.w	r4, #0
 8012e2a:	f8cd 9000 	str.w	r9, [sp]
 8012e2e:	bfcc      	ite	gt
 8012e30:	4698      	movgt	r8, r3
 8012e32:	fb92 f8f3 	sdivle	r8, r2, r3
 8012e36:	1c63      	adds	r3, r4, #1
 8012e38:	aa10      	add	r2, sp, #64	@ 0x40
 8012e3a:	f004 0401 	and.w	r4, r4, #1
 8012e3e:	f04f 0b00 	mov.w	fp, #0
 8012e42:	9308      	str	r3, [sp, #32]
 8012e44:	9b00      	ldr	r3, [sp, #0]
 8012e46:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012e4a:	fb93 f3f8 	sdiv	r3, r3, r8
 8012e4e:	3404      	adds	r4, #4
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	9304      	str	r3, [sp, #16]
 8012e54:	9a04      	ldr	r2, [sp, #16]
 8012e56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012e5a:	fb13 f302 	smulbb	r3, r3, r2
 8012e5e:	9a01      	ldr	r2, [sp, #4]
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	1899      	adds	r1, r3, r2
 8012e64:	9305      	str	r3, [sp, #20]
 8012e66:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012e6a:	b209      	sxth	r1, r1
 8012e6c:	4299      	cmp	r1, r3
 8012e6e:	db4d      	blt.n	8012f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e70:	8932      	ldrh	r2, [r6, #8]
 8012e72:	4413      	add	r3, r2
 8012e74:	b21b      	sxth	r3, r3
 8012e76:	4299      	cmp	r1, r3
 8012e78:	da48      	bge.n	8012f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e7a:	9b04      	ldr	r3, [sp, #16]
 8012e7c:	6827      	ldr	r7, [r4, #0]
 8012e7e:	fb17 f703 	smulbb	r7, r7, r3
 8012e82:	9b02      	ldr	r3, [sp, #8]
 8012e84:	b2bf      	uxth	r7, r7
 8012e86:	18fa      	adds	r2, r7, r3
 8012e88:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012e8c:	b212      	sxth	r2, r2
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	db3c      	blt.n	8012f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e92:	8970      	ldrh	r0, [r6, #10]
 8012e94:	4403      	add	r3, r0
 8012e96:	b21b      	sxth	r3, r3
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	da37      	bge.n	8012f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ea2:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012ea4:	f7ff ff36 	bl	8012d14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012ea8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012eaa:	b37a      	cbz	r2, 8012f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012eac:	4552      	cmp	r2, sl
 8012eae:	d02d      	beq.n	8012f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	a80e      	add	r0, sp, #56	@ 0x38
 8012eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012eb6:	f008 fe09 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012eba:	f04f 0e02 	mov.w	lr, #2
 8012ebe:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8012ec2:	9a06      	ldr	r2, [sp, #24]
 8012ec4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012ec8:	9b01      	ldr	r3, [sp, #4]
 8012eca:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8012ece:	4413      	add	r3, r2
 8012ed0:	9a07      	ldr	r2, [sp, #28]
 8012ed2:	fb91 f1fe 	sdiv	r1, r1, lr
 8012ed6:	fb9c fcfe 	sdiv	ip, ip, lr
 8012eda:	4401      	add	r1, r0
 8012edc:	1a58      	subs	r0, r3, r1
 8012ede:	9b02      	ldr	r3, [sp, #8]
 8012ee0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012ee4:	4413      	add	r3, r2
 8012ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ee8:	448c      	add	ip, r1
 8012eea:	eba3 030c 	sub.w	r3, r3, ip
 8012eee:	435b      	muls	r3, r3
 8012ef0:	fb00 3300 	mla	r3, r0, r0, r3
 8012ef4:	42ab      	cmp	r3, r5
 8012ef6:	d208      	bcs.n	8012f0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012ef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012efa:	461d      	mov	r5, r3
 8012efc:	9803      	ldr	r0, [sp, #12]
 8012efe:	6001      	str	r1, [r0, #0]
 8012f00:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012f02:	9805      	ldr	r0, [sp, #20]
 8012f04:	8008      	strh	r0, [r1, #0]
 8012f06:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012f08:	800f      	strh	r7, [r1, #0]
 8012f0a:	4692      	mov	sl, r2
 8012f0c:	f10b 0b01 	add.w	fp, fp, #1
 8012f10:	3408      	adds	r4, #8
 8012f12:	f1bb 0f04 	cmp.w	fp, #4
 8012f16:	d19d      	bne.n	8012e54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012f18:	9b00      	ldr	r3, [sp, #0]
 8012f1a:	9c08      	ldr	r4, [sp, #32]
 8012f1c:	444b      	add	r3, r9
 8012f1e:	4544      	cmp	r4, r8
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	d188      	bne.n	8012e36 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012f24:	b021      	add	sp, #132	@ 0x84
 8012f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2a:	f04f 35ff 	mov.w	r5, #4294967295
 8012f2e:	e767      	b.n	8012e00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012f30:	240285b4 	.word	0x240285b4
 8012f34:	0802a7e0 	.word	0x0802a7e0

08012f38 <_ZN8touchgfx4RectaNERKS0_>:
 8012f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f3c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012f40:	888c      	ldrh	r4, [r1, #4]
 8012f42:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012f46:	443c      	add	r4, r7
 8012f48:	b2a4      	uxth	r4, r4
 8012f4a:	fa0f f884 	sxth.w	r8, r4
 8012f4e:	45c1      	cmp	r9, r8
 8012f50:	da2f      	bge.n	8012fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f52:	8882      	ldrh	r2, [r0, #4]
 8012f54:	444a      	add	r2, r9
 8012f56:	b292      	uxth	r2, r2
 8012f58:	fa0f fe82 	sxth.w	lr, r2
 8012f5c:	4577      	cmp	r7, lr
 8012f5e:	da28      	bge.n	8012fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f60:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012f64:	88cb      	ldrh	r3, [r1, #6]
 8012f66:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012f6a:	442b      	add	r3, r5
 8012f6c:	b21b      	sxth	r3, r3
 8012f6e:	429e      	cmp	r6, r3
 8012f70:	da1f      	bge.n	8012fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f72:	88c3      	ldrh	r3, [r0, #6]
 8012f74:	4433      	add	r3, r6
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	fa0f fc83 	sxth.w	ip, r3
 8012f7c:	4565      	cmp	r5, ip
 8012f7e:	da18      	bge.n	8012fb2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012f80:	454f      	cmp	r7, r9
 8012f82:	bfb8      	it	lt
 8012f84:	464f      	movlt	r7, r9
 8012f86:	42b5      	cmp	r5, r6
 8012f88:	bfb8      	it	lt
 8012f8a:	4635      	movlt	r5, r6
 8012f8c:	45f0      	cmp	r8, lr
 8012f8e:	bfd8      	it	le
 8012f90:	4622      	movle	r2, r4
 8012f92:	1bd2      	subs	r2, r2, r7
 8012f94:	8082      	strh	r2, [r0, #4]
 8012f96:	884a      	ldrh	r2, [r1, #2]
 8012f98:	88c9      	ldrh	r1, [r1, #6]
 8012f9a:	8007      	strh	r7, [r0, #0]
 8012f9c:	440a      	add	r2, r1
 8012f9e:	8045      	strh	r5, [r0, #2]
 8012fa0:	b292      	uxth	r2, r2
 8012fa2:	b211      	sxth	r1, r2
 8012fa4:	458c      	cmp	ip, r1
 8012fa6:	bfa8      	it	ge
 8012fa8:	4613      	movge	r3, r2
 8012faa:	1b5b      	subs	r3, r3, r5
 8012fac:	80c3      	strh	r3, [r0, #6]
 8012fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	8003      	strh	r3, [r0, #0]
 8012fb6:	8043      	strh	r3, [r0, #2]
 8012fb8:	8083      	strh	r3, [r0, #4]
 8012fba:	80c3      	strh	r3, [r0, #6]
 8012fbc:	e7f7      	b.n	8012fae <_ZN8touchgfx4RectaNERKS0_+0x76>

08012fbe <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012fbe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	dd06      	ble.n	8012fd4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012fc6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	bfcc      	ite	gt
 8012fce:	2000      	movgt	r0, #0
 8012fd0:	2001      	movle	r0, #1
 8012fd2:	4770      	bx	lr
 8012fd4:	2001      	movs	r0, #1
 8012fd6:	4770      	bx	lr

08012fd8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fdc:	2300      	movs	r3, #0
 8012fde:	4604      	mov	r4, r0
 8012fe0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012fe2:	8003      	strh	r3, [r0, #0]
 8012fe4:	8043      	strh	r3, [r0, #2]
 8012fe6:	8083      	strh	r3, [r0, #4]
 8012fe8:	80c3      	strh	r3, [r0, #6]
 8012fea:	2d00      	cmp	r5, #0
 8012fec:	d040      	beq.n	8013070 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012fee:	1d28      	adds	r0, r5, #4
 8012ff0:	f7ff ffe5 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ff4:	b988      	cbnz	r0, 801301a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f7ff ffe1 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ffc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013000:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013004:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013008:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801300c:	b138      	cbz	r0, 801301e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801300e:	8022      	strh	r2, [r4, #0]
 8013010:	8063      	strh	r3, [r4, #2]
 8013012:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013016:	f8a4 c006 	strh.w	ip, [r4, #6]
 801301a:	69ad      	ldr	r5, [r5, #24]
 801301c:	e7e5      	b.n	8012fea <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801301e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013022:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013026:	4290      	cmp	r0, r2
 8013028:	4607      	mov	r7, r0
 801302a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801302e:	460e      	mov	r6, r1
 8013030:	bfa8      	it	ge
 8013032:	4617      	movge	r7, r2
 8013034:	4299      	cmp	r1, r3
 8013036:	4472      	add	r2, lr
 8013038:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801303c:	bfa8      	it	ge
 801303e:	461e      	movge	r6, r3
 8013040:	4440      	add	r0, r8
 8013042:	4471      	add	r1, lr
 8013044:	4463      	add	r3, ip
 8013046:	b200      	sxth	r0, r0
 8013048:	8027      	strh	r7, [r4, #0]
 801304a:	b212      	sxth	r2, r2
 801304c:	8066      	strh	r6, [r4, #2]
 801304e:	b209      	sxth	r1, r1
 8013050:	b21b      	sxth	r3, r3
 8013052:	4290      	cmp	r0, r2
 8013054:	bfac      	ite	ge
 8013056:	ebc7 0200 	rsbge	r2, r7, r0
 801305a:	ebc7 0202 	rsblt	r2, r7, r2
 801305e:	4299      	cmp	r1, r3
 8013060:	bfac      	ite	ge
 8013062:	ebc6 0301 	rsbge	r3, r6, r1
 8013066:	ebc6 0303 	rsblt	r3, r6, r3
 801306a:	80a2      	strh	r2, [r4, #4]
 801306c:	80e3      	strh	r3, [r4, #6]
 801306e:	e7d4      	b.n	801301a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013070:	4620      	mov	r0, r4
 8013072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013076 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013076:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801307a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801307e:	b383      	cbz	r3, 80130e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013080:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013082:	b374      	cbz	r4, 80130e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013084:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013088:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801308c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013090:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013094:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013098:	b303      	cbz	r3, 80130dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801309a:	4668      	mov	r0, sp
 801309c:	1d21      	adds	r1, r4, #4
 801309e:	f8ad 5000 	strh.w	r5, [sp]
 80130a2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80130a6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80130aa:	f8ad 8006 	strh.w	r8, [sp, #6]
 80130ae:	f7ff ff43 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 80130b2:	4668      	mov	r0, sp
 80130b4:	f7ff ff83 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 80130b8:	b980      	cbnz	r0, 80130dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80130ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80130be:	4669      	mov	r1, sp
 80130c0:	88a2      	ldrh	r2, [r4, #4]
 80130c2:	4620      	mov	r0, r4
 80130c4:	1a9b      	subs	r3, r3, r2
 80130c6:	88e2      	ldrh	r2, [r4, #6]
 80130c8:	f8ad 3000 	strh.w	r3, [sp]
 80130cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80130d0:	1a9b      	subs	r3, r3, r2
 80130d2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	4798      	blx	r3
 80130dc:	69a4      	ldr	r4, [r4, #24]
 80130de:	2c00      	cmp	r4, #0
 80130e0:	d1d8      	bne.n	8013094 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80130e2:	b002      	add	sp, #8
 80130e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80130e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130ea:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80130ee:	460d      	mov	r5, r1
 80130f0:	4616      	mov	r6, r2
 80130f2:	b323      	cbz	r3, 801313e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80130f4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80130f6:	b314      	cbz	r4, 801313e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80130f8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80130fc:	b1eb      	cbz	r3, 801313a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80130fe:	6828      	ldr	r0, [r5, #0]
 8013100:	466b      	mov	r3, sp
 8013102:	6869      	ldr	r1, [r5, #4]
 8013104:	c303      	stmia	r3!, {r0, r1}
 8013106:	4668      	mov	r0, sp
 8013108:	1d21      	adds	r1, r4, #4
 801310a:	f7ff ff15 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801310e:	4668      	mov	r0, sp
 8013110:	f7ff ff55 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013114:	b988      	cbnz	r0, 801313a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013116:	f8bd 3000 	ldrh.w	r3, [sp]
 801311a:	4669      	mov	r1, sp
 801311c:	88a2      	ldrh	r2, [r4, #4]
 801311e:	4620      	mov	r0, r4
 8013120:	1a9b      	subs	r3, r3, r2
 8013122:	88e2      	ldrh	r2, [r4, #6]
 8013124:	f8ad 3000 	strh.w	r3, [sp]
 8013128:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801312c:	1a9b      	subs	r3, r3, r2
 801312e:	4632      	mov	r2, r6
 8013130:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013138:	4798      	blx	r3
 801313a:	69a4      	ldr	r4, [r4, #24]
 801313c:	e7db      	b.n	80130f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801313e:	b002      	add	sp, #8
 8013140:	bd70      	pop	{r4, r5, r6, pc}

08013142 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013142:	2000      	movs	r0, #0
 8013144:	4770      	bx	lr

08013146 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013146:	2001      	movs	r0, #1
 8013148:	4770      	bx	lr

0801314a <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 801314a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801314c:	6803      	ldr	r3, [r0, #0]
 801314e:	4604      	mov	r4, r0
 8013150:	460e      	mov	r6, r1
 8013152:	4601      	mov	r1, r0
 8013154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013158:	4668      	mov	r0, sp
 801315a:	4615      	mov	r5, r2
 801315c:	4798      	blx	r3
 801315e:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8013162:	b13b      	cbz	r3, 8013174 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 8013164:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013168:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801316c:	4293      	cmp	r3, r2
 801316e:	bfac      	ite	ge
 8013170:	2300      	movge	r3, #0
 8013172:	2301      	movlt	r3, #1
 8013174:	7033      	strb	r3, [r6, #0]
 8013176:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 801317a:	b13b      	cbz	r3, 801318c <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 801317c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013180:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013184:	4293      	cmp	r3, r2
 8013186:	bfac      	ite	ge
 8013188:	2300      	movge	r3, #0
 801318a:	2301      	movlt	r3, #1
 801318c:	702b      	strb	r3, [r5, #0]
 801318e:	b002      	add	sp, #8
 8013190:	bd70      	pop	{r4, r5, r6, pc}

08013192 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 8013192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013196:	4604      	mov	r4, r0
 8013198:	460f      	mov	r7, r1
 801319a:	4616      	mov	r6, r2
 801319c:	6a85      	ldr	r5, [r0, #40]	@ 0x28
 801319e:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 80131a2:	f100 0964 	add.w	r9, r0, #100	@ 0x64
 80131a6:	b15d      	cbz	r5, 80131c0 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 80131a8:	4545      	cmp	r5, r8
 80131aa:	d007      	beq.n	80131bc <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80131ac:	454d      	cmp	r5, r9
 80131ae:	d005      	beq.n	80131bc <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80131b0:	682b      	ldr	r3, [r5, #0]
 80131b2:	4632      	mov	r2, r6
 80131b4:	4639      	mov	r1, r7
 80131b6:	4628      	mov	r0, r5
 80131b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80131ba:	4798      	blx	r3
 80131bc:	69ad      	ldr	r5, [r5, #24]
 80131be:	e7f2      	b.n	80131a6 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 80131c0:	f8b4 3098 	ldrh.w	r3, [r4, #152]	@ 0x98
 80131c4:	441f      	add	r7, r3
 80131c6:	f8b4 309a 	ldrh.w	r3, [r4, #154]	@ 0x9a
 80131ca:	441e      	add	r6, r3
 80131cc:	f8a4 7098 	strh.w	r7, [r4, #152]	@ 0x98
 80131d0:	f8a4 609a 	strh.w	r6, [r4, #154]	@ 0x9a
 80131d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080131d8 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 80131d8:	4770      	bx	lr

080131da <_ZN8touchgfx9DragEventD1Ev>:
 80131da:	4770      	bx	lr

080131dc <_ZN8touchgfx10ClickEventD1Ev>:
 80131dc:	4770      	bx	lr

080131de <_ZN8touchgfx10ClickEventD0Ev>:
 80131de:	b510      	push	{r4, lr}
 80131e0:	4604      	mov	r4, r0
 80131e2:	210c      	movs	r1, #12
 80131e4:	f015 fed8 	bl	8028f98 <_ZdlPvj>
 80131e8:	4620      	mov	r0, r4
 80131ea:	bd10      	pop	{r4, pc}

080131ec <_ZN8touchgfx9DragEventD0Ev>:
 80131ec:	b510      	push	{r4, lr}
 80131ee:	4604      	mov	r4, r0
 80131f0:	2110      	movs	r1, #16
 80131f2:	f015 fed1 	bl	8028f98 <_ZdlPvj>
 80131f6:	4620      	mov	r0, r4
 80131f8:	bd10      	pop	{r4, pc}

080131fa <_ZN8touchgfx19ScrollableContainerD0Ev>:
 80131fa:	b510      	push	{r4, lr}
 80131fc:	4604      	mov	r4, r0
 80131fe:	21bc      	movs	r1, #188	@ 0xbc
 8013200:	f015 feca 	bl	8028f98 <_ZdlPvj>
 8013204:	4620      	mov	r0, r4
 8013206:	bd10      	pop	{r4, pc}

08013208 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	b086      	sub	sp, #24
 801320c:	2300      	movs	r3, #0
 801320e:	460c      	mov	r4, r1
 8013210:	4605      	mov	r5, r0
 8013212:	aa06      	add	r2, sp, #24
 8013214:	f88d 3002 	strb.w	r3, [sp, #2]
 8013218:	f10d 0102 	add.w	r1, sp, #2
 801321c:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8013220:	6803      	ldr	r3, [r0, #0]
 8013222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013226:	4798      	blx	r3
 8013228:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801322c:	b10b      	cbz	r3, 8013232 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 801322e:	7923      	ldrb	r3, [r4, #4]
 8013230:	b133      	cbz	r3, 8013240 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8013232:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d068      	beq.n	801330c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 801323a:	7923      	ldrb	r3, [r4, #4]
 801323c:	2b01      	cmp	r3, #1
 801323e:	d165      	bne.n	801330c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8013240:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013244:	2a00      	cmp	r2, #0
 8013246:	bfb8      	it	lt
 8013248:	4252      	neglt	r2, r2
 801324a:	b213      	sxth	r3, r2
 801324c:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	@ 0x9c
 8013250:	429a      	cmp	r2, r3
 8013252:	dc5b      	bgt.n	801330c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 8013254:	8eaa      	ldrh	r2, [r5, #52]	@ 0x34
 8013256:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	@ 0xb8
 801325a:	429a      	cmp	r2, r3
 801325c:	bfa8      	it	ge
 801325e:	461a      	movge	r2, r3
 8013260:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	@ 0xba
 8013264:	b212      	sxth	r2, r2
 8013266:	2a05      	cmp	r2, #5
 8013268:	bfb8      	it	lt
 801326a:	2205      	movlt	r2, #5
 801326c:	4351      	muls	r1, r2
 801326e:	3a04      	subs	r2, #4
 8013270:	fb91 f1f3 	sdiv	r1, r1, r3
 8013274:	f8a5 10a8 	strh.w	r1, [r5, #168]	@ 0xa8
 8013278:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801327c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013280:	b289      	uxth	r1, r1
 8013282:	2b00      	cmp	r3, #0
 8013284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013288:	bfcc      	ite	gt
 801328a:	2001      	movgt	r0, #1
 801328c:	4618      	movle	r0, r3
 801328e:	00d3      	lsls	r3, r2, #3
 8013290:	fb13 f300 	smulbb	r3, r3, r0
 8013294:	b21b      	sxth	r3, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	f8a5 30ac 	strh.w	r3, [r5, #172]	@ 0xac
 801329c:	bfb8      	it	lt
 801329e:	425b      	neglt	r3, r3
 80132a0:	b21b      	sxth	r3, r3
 80132a2:	428b      	cmp	r3, r1
 80132a4:	bfa8      	it	ge
 80132a6:	460b      	movge	r3, r1
 80132a8:	4629      	mov	r1, r5
 80132aa:	f8a5 30a8 	strh.w	r3, [r5, #168]	@ 0xa8
 80132ae:	7922      	ldrb	r2, [r4, #4]
 80132b0:	682b      	ldr	r3, [r5, #0]
 80132b2:	2a01      	cmp	r2, #1
 80132b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80132b8:	d12a      	bne.n	8013310 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x108>
 80132ba:	a801      	add	r0, sp, #4
 80132bc:	4798      	blx	r3
 80132be:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80132c2:	2601      	movs	r6, #1
 80132c4:	f8a5 30aa 	strh.w	r3, [r5, #170]	@ 0xaa
 80132c8:	f885 60b0 	strb.w	r6, [r5, #176]	@ 0xb0
 80132cc:	f007 faa0 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 80132d0:	4629      	mov	r1, r5
 80132d2:	3004      	adds	r0, #4
 80132d4:	f007 fb6a 	bl	801a9ac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 80132d8:	7923      	ldrb	r3, [r4, #4]
 80132da:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 80132de:	f885 3036 	strb.w	r3, [r5, #54]	@ 0x36
 80132e2:	b198      	cbz	r0, 801330c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 80132e4:	f895 30b6 	ldrb.w	r3, [r5, #182]	@ 0xb6
 80132e8:	b983      	cbnz	r3, 801330c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x104>
 80132ea:	4a0c      	ldr	r2, [pc, #48]	@ (801331c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>)
 80132ec:	a903      	add	r1, sp, #12
 80132ee:	f8ad 3012 	strh.w	r3, [sp, #18]
 80132f2:	9203      	str	r2, [sp, #12]
 80132f4:	2202      	movs	r2, #2
 80132f6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80132fa:	f88d 2010 	strb.w	r2, [sp, #16]
 80132fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013302:	6803      	ldr	r3, [r0, #0]
 8013304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013306:	4798      	blx	r3
 8013308:	f885 60b6 	strb.w	r6, [r5, #182]	@ 0xb6
 801330c:	b006      	add	sp, #24
 801330e:	bd70      	pop	{r4, r5, r6, pc}
 8013310:	a803      	add	r0, sp, #12
 8013312:	4798      	blx	r3
 8013314:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013318:	e7d3      	b.n	80132c2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 801331a:	bf00      	nop
 801331c:	0802dc7c 	.word	0x0802dc7c

08013320 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8013320:	b470      	push	{r4, r5, r6}
 8013322:	f890 6025 	ldrb.w	r6, [r0, #37]	@ 0x25
 8013326:	461d      	mov	r5, r3
 8013328:	b11e      	cbz	r6, 8013332 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 801332a:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 801332e:	b116      	cbz	r6, 8013336 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8013330:	6028      	str	r0, [r5, #0]
 8013332:	bc70      	pop	{r4, r5, r6}
 8013334:	4770      	bx	lr
 8013336:	bc70      	pop	{r4, r5, r6}
 8013338:	f7ff bcec 	b.w	8012d14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>

0801333c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 801333c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801333e:	f890 30b0 	ldrb.w	r3, [r0, #176]	@ 0xb0
 8013342:	4604      	mov	r4, r0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d049      	beq.n	80133dc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 8013348:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	@ 0xae
 801334c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013350:	3001      	adds	r0, #1
 8013352:	b280      	uxth	r0, r0
 8013354:	4298      	cmp	r0, r3
 8013356:	f8a4 00ae 	strh.w	r0, [r4, #174]	@ 0xae
 801335a:	d843      	bhi.n	80133e4 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa8>
 801335c:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8013360:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8013364:	f009 fb70 	bl	801ca48 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013368:	4605      	mov	r5, r0
 801336a:	b282      	uxth	r2, r0
 801336c:	f012 0301 	ands.w	r3, r2, #1
 8013370:	d006      	beq.n	8013380 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8013372:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013376:	2800      	cmp	r0, #0
 8013378:	bfd8      	it	le
 801337a:	460b      	movle	r3, r1
 801337c:	18d5      	adds	r5, r2, r3
 801337e:	b22d      	sxth	r5, r5
 8013380:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8013384:	2b01      	cmp	r3, #1
 8013386:	d02b      	beq.n	80133e0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa4>
 8013388:	6823      	ldr	r3, [r4, #0]
 801338a:	4621      	mov	r1, r4
 801338c:	4668      	mov	r0, sp
 801338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013392:	4798      	blx	r3
 8013394:	f8bd 6000 	ldrh.w	r6, [sp]
 8013398:	1bae      	subs	r6, r5, r6
 801339a:	b236      	sxth	r6, r6
 801339c:	f894 2036 	ldrb.w	r2, [r4, #54]	@ 0x36
 80133a0:	b14a      	cbz	r2, 80133b6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 80133a2:	6823      	ldr	r3, [r4, #0]
 80133a4:	4621      	mov	r1, r4
 80133a6:	4668      	mov	r0, sp
 80133a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133ac:	4798      	blx	r3
 80133ae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80133b2:	1aad      	subs	r5, r5, r2
 80133b4:	b22a      	sxth	r2, r5
 80133b6:	6823      	ldr	r3, [r4, #0]
 80133b8:	4631      	mov	r1, r6
 80133ba:	4620      	mov	r0, r4
 80133bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80133c0:	4798      	blx	r3
 80133c2:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
 80133c6:	f894 50b0 	ldrb.w	r5, [r4, #176]	@ 0xb0
 80133ca:	b93d      	cbnz	r5, 80133dc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa0>
 80133cc:	f007 fa20 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 80133d0:	4621      	mov	r1, r4
 80133d2:	3004      	adds	r0, #4
 80133d4:	f007 fa41 	bl	801a85a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80133d8:	f8a4 50ae 	strh.w	r5, [r4, #174]	@ 0xae
 80133dc:	b002      	add	sp, #8
 80133de:	bd70      	pop	{r4, r5, r6, pc}
 80133e0:	2600      	movs	r6, #0
 80133e2:	e7db      	b.n	801339c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 80133e4:	2300      	movs	r3, #0
 80133e6:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
 80133ea:	e7ec      	b.n	80133c6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

080133ec <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 80133ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f0:	b08b      	sub	sp, #44	@ 0x2c
 80133f2:	2300      	movs	r3, #0
 80133f4:	4604      	mov	r4, r0
 80133f6:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80133fa:	aa0a      	add	r2, sp, #40	@ 0x28
 80133fc:	f88d 3006 	strb.w	r3, [sp, #6]
 8013400:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013404:	460f      	mov	r7, r1
 8013406:	f802 3d21 	strb.w	r3, [r2, #-33]!
 801340a:	6803      	ldr	r3, [r0, #0]
 801340c:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8013410:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8013414:	f10d 0106 	add.w	r1, sp, #6
 8013418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801341c:	4798      	blx	r3
 801341e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8013422:	2900      	cmp	r1, #0
 8013424:	d03d      	beq.n	80134a2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013426:	42a1      	cmp	r1, r4
 8013428:	d03b      	beq.n	80134a2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801342a:	a802      	add	r0, sp, #8
 801342c:	f008 fb4e 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013430:	4621      	mov	r1, r4
 8013432:	a804      	add	r0, sp, #16
 8013434:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8013438:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801343c:	f008 fb46 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013440:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013444:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 8013448:	eba3 030b 	sub.w	r3, r3, fp
 801344c:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8013450:	88f9      	ldrh	r1, [r7, #6]
 8013452:	4413      	add	r3, r2
 8013454:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013458:	f89d c006 	ldrb.w	ip, [sp, #6]
 801345c:	eba2 020a 	sub.w	r2, r2, sl
 8013460:	b29b      	uxth	r3, r3
 8013462:	4402      	add	r2, r0
 8013464:	8938      	ldrh	r0, [r7, #8]
 8013466:	4419      	add	r1, r3
 8013468:	b292      	uxth	r2, r2
 801346a:	b209      	sxth	r1, r1
 801346c:	4410      	add	r0, r2
 801346e:	b200      	sxth	r0, r0
 8013470:	f1bc 0f00 	cmp.w	ip, #0
 8013474:	f040 808d 	bne.w	8013592 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 8013478:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 801347c:	4473      	add	r3, lr
 801347e:	b21b      	sxth	r3, r3
 8013480:	f89d e007 	ldrb.w	lr, [sp, #7]
 8013484:	f1be 0f00 	cmp.w	lr, #0
 8013488:	f040 80b1 	bne.w	80135ee <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 801348c:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 8013490:	4472      	add	r2, lr
 8013492:	b212      	sxth	r2, r2
 8013494:	f1bc 0f00 	cmp.w	ip, #0
 8013498:	f000 80c8 	beq.w	801362c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 801349c:	4290      	cmp	r0, r2
 801349e:	f040 80ae 	bne.w	80135fe <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 80134a2:	f894 30a3 	ldrb.w	r3, [r4, #163]	@ 0xa3
 80134a6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f040 8099 	bne.w	80135e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 80134b0:	897d      	ldrh	r5, [r7, #10]
 80134b2:	89be      	ldrh	r6, [r7, #12]
 80134b4:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 80134b8:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	@ 0xb4
 80134bc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	@ 0x9e
 80134c0:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	@ 0xa0
 80134c4:	4411      	add	r1, r2
 80134c6:	442a      	add	r2, r5
 80134c8:	449c      	add	ip, r3
 80134ca:	4433      	add	r3, r6
 80134cc:	b292      	uxth	r2, r2
 80134ce:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	b289      	uxth	r1, r1
 80134d6:	fa1f fc8c 	uxth.w	ip, ip
 80134da:	b215      	sxth	r5, r2
 80134dc:	b21e      	sxth	r6, r3
 80134de:	b15f      	cbz	r7, 80134f8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 80134e0:	1a52      	subs	r2, r2, r1
 80134e2:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	@ 0x9c
 80134e6:	b212      	sxth	r2, r2
 80134e8:	2a00      	cmp	r2, #0
 80134ea:	bfb8      	it	lt
 80134ec:	4252      	neglt	r2, r2
 80134ee:	b212      	sxth	r2, r2
 80134f0:	4297      	cmp	r7, r2
 80134f2:	bfac      	ite	ge
 80134f4:	2700      	movge	r7, #0
 80134f6:	2701      	movlt	r7, #1
 80134f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80134fc:	b152      	cbz	r2, 8013514 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 80134fe:	eba3 030c 	sub.w	r3, r3, ip
 8013502:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	@ 0x9c
 8013506:	b21b      	sxth	r3, r3
 8013508:	2b00      	cmp	r3, #0
 801350a:	bfb8      	it	lt
 801350c:	425b      	neglt	r3, r3
 801350e:	b21b      	sxth	r3, r3
 8013510:	429a      	cmp	r2, r3
 8013512:	db01      	blt.n	8013518 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8013514:	2f00      	cmp	r7, #0
 8013516:	d03e      	beq.n	8013596 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8013518:	2701      	movs	r7, #1
 801351a:	fa0f f881 	sxth.w	r8, r1
 801351e:	fa0f f98c 	sxth.w	r9, ip
 8013522:	f884 70a3 	strb.w	r7, [r4, #163]	@ 0xa3
 8013526:	b1a0      	cbz	r0, 8013552 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013528:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 801352c:	b98b      	cbnz	r3, 8013552 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 801352e:	4a41      	ldr	r2, [pc, #260]	@ (8013634 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013530:	a906      	add	r1, sp, #24
 8013532:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013536:	9206      	str	r2, [sp, #24]
 8013538:	2202      	movs	r2, #2
 801353a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801353e:	f88d 201c 	strb.w	r2, [sp, #28]
 8013542:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013546:	6803      	ldr	r3, [r0, #0]
 8013548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801354a:	4798      	blx	r3
 801354c:	2301      	movs	r3, #1
 801354e:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 8013552:	f894 10a4 	ldrb.w	r1, [r4, #164]	@ 0xa4
 8013556:	b149      	cbz	r1, 801356c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013558:	eba5 0108 	sub.w	r1, r5, r8
 801355c:	b209      	sxth	r1, r1
 801355e:	b12f      	cbz	r7, 801356c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013560:	2900      	cmp	r1, #0
 8013562:	dc40      	bgt.n	80135e6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 8013564:	bf14      	ite	ne
 8013566:	f04f 31ff 	movne.w	r1, #4294967295
 801356a:	2100      	moveq	r1, #0
 801356c:	f894 20a5 	ldrb.w	r2, [r4, #165]	@ 0xa5
 8013570:	b14a      	cbz	r2, 8013586 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013572:	eba6 0609 	sub.w	r6, r6, r9
 8013576:	b232      	sxth	r2, r6
 8013578:	b12f      	cbz	r7, 8013586 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 801357a:	2a00      	cmp	r2, #0
 801357c:	dc35      	bgt.n	80135ea <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 801357e:	bf14      	ite	ne
 8013580:	f04f 32ff 	movne.w	r2, #4294967295
 8013584:	2200      	moveq	r2, #0
 8013586:	6823      	ldr	r3, [r4, #0]
 8013588:	4620      	mov	r0, r4
 801358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801358e:	4798      	blx	r3
 8013590:	e024      	b.n	80135dc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013592:	460b      	mov	r3, r1
 8013594:	e774      	b.n	8013480 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 8013596:	b308      	cbz	r0, 80135dc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013598:	f894 30b6 	ldrb.w	r3, [r4, #182]	@ 0xb6
 801359c:	b9f3      	cbnz	r3, 80135dc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 801359e:	ab0a      	add	r3, sp, #40	@ 0x28
 80135a0:	4620      	mov	r0, r4
 80135a2:	4632      	mov	r2, r6
 80135a4:	4629      	mov	r1, r5
 80135a6:	f843 7d18 	str.w	r7, [r3, #-24]!
 80135aa:	f7ff fbb3 	bl	8012d14 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80135ae:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80135b2:	9b04      	ldr	r3, [sp, #16]
 80135b4:	4298      	cmp	r0, r3
 80135b6:	d011      	beq.n	80135dc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80135b8:	4b1e      	ldr	r3, [pc, #120]	@ (8013634 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 80135ba:	a906      	add	r1, sp, #24
 80135bc:	f8ad 701e 	strh.w	r7, [sp, #30]
 80135c0:	9306      	str	r3, [sp, #24]
 80135c2:	2302      	movs	r3, #2
 80135c4:	f8ad 7020 	strh.w	r7, [sp, #32]
 80135c8:	f88d 301c 	strb.w	r3, [sp, #28]
 80135cc:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80135d0:	6803      	ldr	r3, [r0, #0]
 80135d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135d4:	4798      	blx	r3
 80135d6:	2301      	movs	r3, #1
 80135d8:	f884 30b6 	strb.w	r3, [r4, #182]	@ 0xb6
 80135dc:	b00b      	add	sp, #44	@ 0x2c
 80135de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e2:	2700      	movs	r7, #0
 80135e4:	e79f      	b.n	8013526 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 80135e6:	2101      	movs	r1, #1
 80135e8:	e7c0      	b.n	801356c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 80135ea:	2201      	movs	r2, #1
 80135ec:	e7cb      	b.n	8013586 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80135ee:	f1bc 0f00 	cmp.w	ip, #0
 80135f2:	f47f af56 	bne.w	80134a2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80135f6:	428b      	cmp	r3, r1
 80135f8:	f43f af53 	beq.w	80134a2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80135fc:	4602      	mov	r2, r0
 80135fe:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8013638 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 8013602:	f8ad 0020 	strh.w	r0, [sp, #32]
 8013606:	f8cd c018 	str.w	ip, [sp, #24]
 801360a:	f04f 0c00 	mov.w	ip, #0
 801360e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8013612:	f8ad 101e 	strh.w	r1, [sp, #30]
 8013616:	a906      	add	r1, sp, #24
 8013618:	f88d c01c 	strb.w	ip, [sp, #28]
 801361c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013620:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 8013624:	6803      	ldr	r3, [r0, #0]
 8013626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013628:	4798      	blx	r3
 801362a:	e73a      	b.n	80134a2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801362c:	428b      	cmp	r3, r1
 801362e:	f43f af35 	beq.w	801349c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 8013632:	e7e4      	b.n	80135fe <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013634:	0802dc7c 	.word	0x0802dc7c
 8013638:	0802dc90 	.word	0x0802dc90

0801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363e:	4604      	mov	r4, r0
 8013640:	4608      	mov	r0, r1
 8013642:	460d      	mov	r5, r1
 8013644:	f7ff fcbb 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013648:	b978      	cbnz	r0, 801366a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801364a:	4620      	mov	r0, r4
 801364c:	f7ff fcb7 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013650:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013654:	b150      	cbz	r0, 801366c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013656:	8026      	strh	r6, [r4, #0]
 8013658:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801365c:	8063      	strh	r3, [r4, #2]
 801365e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013662:	80a3      	strh	r3, [r4, #4]
 8013664:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013668:	80e3      	strh	r3, [r4, #6]
 801366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801366c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013670:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013674:	42b1      	cmp	r1, r6
 8013676:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801367a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801367e:	460f      	mov	r7, r1
 8013680:	88ed      	ldrh	r5, [r5, #6]
 8013682:	bfa8      	it	ge
 8013684:	4637      	movge	r7, r6
 8013686:	4293      	cmp	r3, r2
 8013688:	4618      	mov	r0, r3
 801368a:	4466      	add	r6, ip
 801368c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013690:	bfa8      	it	ge
 8013692:	4610      	movge	r0, r2
 8013694:	442a      	add	r2, r5
 8013696:	88e5      	ldrh	r5, [r4, #6]
 8013698:	4461      	add	r1, ip
 801369a:	b236      	sxth	r6, r6
 801369c:	8027      	strh	r7, [r4, #0]
 801369e:	442b      	add	r3, r5
 80136a0:	b209      	sxth	r1, r1
 80136a2:	b212      	sxth	r2, r2
 80136a4:	8060      	strh	r0, [r4, #2]
 80136a6:	b21b      	sxth	r3, r3
 80136a8:	428e      	cmp	r6, r1
 80136aa:	bfac      	ite	ge
 80136ac:	ebc7 0106 	rsbge	r1, r7, r6
 80136b0:	ebc7 0101 	rsblt	r1, r7, r1
 80136b4:	429a      	cmp	r2, r3
 80136b6:	bfac      	ite	ge
 80136b8:	ebc0 0202 	rsbge	r2, r0, r2
 80136bc:	ebc0 0203 	rsblt	r2, r0, r3
 80136c0:	80a1      	strh	r1, [r4, #4]
 80136c2:	80e2      	strh	r2, [r4, #6]
 80136c4:	e7d1      	b.n	801366a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080136c6 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 80136c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136c8:	4604      	mov	r4, r0
 80136ca:	2200      	movs	r2, #0
 80136cc:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 80136d0:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 80136d4:	680b      	ldr	r3, [r1, #0]
 80136d6:	8022      	strh	r2, [r4, #0]
 80136d8:	8062      	strh	r2, [r4, #2]
 80136da:	80e0      	strh	r0, [r4, #6]
 80136dc:	4668      	mov	r0, sp
 80136de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80136e2:	80a5      	strh	r5, [r4, #4]
 80136e4:	4798      	blx	r3
 80136e6:	4620      	mov	r0, r4
 80136e8:	4669      	mov	r1, sp
 80136ea:	f7ff ffa7 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80136ee:	4620      	mov	r0, r4
 80136f0:	b003      	add	sp, #12
 80136f2:	bd30      	pop	{r4, r5, pc}

080136f4 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 80136f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f6:	2300      	movs	r3, #0
 80136f8:	4605      	mov	r5, r0
 80136fa:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80136fc:	f101 0738 	add.w	r7, r1, #56	@ 0x38
 8013700:	f101 0664 	add.w	r6, r1, #100	@ 0x64
 8013704:	8003      	strh	r3, [r0, #0]
 8013706:	8043      	strh	r3, [r0, #2]
 8013708:	8083      	strh	r3, [r0, #4]
 801370a:	80c3      	strh	r3, [r0, #6]
 801370c:	b164      	cbz	r4, 8013728 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 801370e:	42bc      	cmp	r4, r7
 8013710:	d008      	beq.n	8013724 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013712:	42b4      	cmp	r4, r6
 8013714:	d006      	beq.n	8013724 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013716:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801371a:	b11b      	cbz	r3, 8013724 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 801371c:	1d21      	adds	r1, r4, #4
 801371e:	4628      	mov	r0, r5
 8013720:	f7ff ff8c 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013724:	69a4      	ldr	r4, [r4, #24]
 8013726:	e7f1      	b.n	801370c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8013728:	4628      	mov	r0, r5
 801372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801372c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 801372c:	b570      	push	{r4, r5, r6, lr}
 801372e:	6803      	ldr	r3, [r0, #0]
 8013730:	4604      	mov	r4, r0
 8013732:	4615      	mov	r5, r2
 8013734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013736:	4798      	blx	r3
 8013738:	6823      	ldr	r3, [r4, #0]
 801373a:	4629      	mov	r1, r5
 801373c:	4620      	mov	r0, r4
 801373e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013744:	4718      	bx	r3
	...

08013748 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8013748:	b530      	push	{r4, r5, lr}
 801374a:	2500      	movs	r5, #0
 801374c:	6283      	str	r3, [r0, #40]	@ 0x28
 801374e:	8101      	strh	r1, [r0, #8]
 8013750:	8085      	strh	r5, [r0, #4]
 8013752:	80c5      	strh	r5, [r0, #6]
 8013754:	8185      	strh	r5, [r0, #12]
 8013756:	81c5      	strh	r5, [r0, #14]
 8013758:	8205      	strh	r5, [r0, #16]
 801375a:	8245      	strh	r5, [r0, #18]
 801375c:	61c5      	str	r5, [r0, #28]
 801375e:	8405      	strh	r5, [r0, #32]
 8013760:	8445      	strh	r5, [r0, #34]	@ 0x22
 8013762:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8013766:	8142      	strh	r2, [r0, #10]
 8013768:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801376c:	2501      	movs	r5, #1
 801376e:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 8013772:	4d03      	ldr	r5, [pc, #12]	@ (8013780 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8013774:	6005      	str	r5, [r0, #0]
 8013776:	f89d 500c 	ldrb.w	r5, [sp, #12]
 801377a:	f880 5026 	strb.w	r5, [r0, #38]	@ 0x26
 801377e:	bd30      	pop	{r4, r5, pc}
 8013780:	0802e2e8 	.word	0x0802e2e8

08013784 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8013784:	4b2f      	ldr	r3, [pc, #188]	@ (8013844 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8013786:	2278      	movs	r2, #120	@ 0x78
 8013788:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801378a:	6003      	str	r3, [r0, #0]
 801378c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013790:	2500      	movs	r5, #0
 8013792:	2601      	movs	r6, #1
 8013794:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013796:	2111      	movs	r1, #17
 8013798:	f04f 33ff 	mov.w	r3, #4294967295
 801379c:	4604      	mov	r4, r0
 801379e:	8085      	strh	r5, [r0, #4]
 80137a0:	80c5      	strh	r5, [r0, #6]
 80137a2:	8105      	strh	r5, [r0, #8]
 80137a4:	8145      	strh	r5, [r0, #10]
 80137a6:	8185      	strh	r5, [r0, #12]
 80137a8:	81c5      	strh	r5, [r0, #14]
 80137aa:	8205      	strh	r5, [r0, #16]
 80137ac:	8245      	strh	r5, [r0, #18]
 80137ae:	61c5      	str	r5, [r0, #28]
 80137b0:	8405      	strh	r5, [r0, #32]
 80137b2:	8445      	strh	r5, [r0, #34]	@ 0x22
 80137b4:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 80137b8:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
 80137bc:	6285      	str	r5, [r0, #40]	@ 0x28
 80137be:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 80137c2:	6303      	str	r3, [r0, #48]	@ 0x30
 80137c4:	8681      	strh	r1, [r0, #52]	@ 0x34
 80137c6:	4629      	mov	r1, r5
 80137c8:	f880 5036 	strb.w	r5, [r0, #54]	@ 0x36
 80137cc:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80137d0:	9200      	str	r2, [sp, #0]
 80137d2:	3038      	adds	r0, #56	@ 0x38
 80137d4:	462a      	mov	r2, r5
 80137d6:	f7ff ffb7 	bl	8013748 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 80137da:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80137de:	462a      	mov	r2, r5
 80137e0:	4629      	mov	r1, r5
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 80137e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137ea:	f7ff ffad 	bl	8013748 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 80137ee:	2305      	movs	r3, #5
 80137f0:	4620      	mov	r0, r4
 80137f2:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
 80137f6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80137fa:	4b13      	ldr	r3, [pc, #76]	@ (8013848 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 80137fc:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8013800:	f884 50a2 	strb.w	r5, [r4, #162]	@ 0xa2
 8013804:	f884 50a3 	strb.w	r5, [r4, #163]	@ 0xa3
 8013808:	f884 60a4 	strb.w	r6, [r4, #164]	@ 0xa4
 801380c:	f884 60a5 	strb.w	r6, [r4, #165]	@ 0xa5
 8013810:	f884 60a6 	strb.w	r6, [r4, #166]	@ 0xa6
 8013814:	f884 50a7 	strb.w	r5, [r4, #167]	@ 0xa7
 8013818:	f884 50b0 	strb.w	r5, [r4, #176]	@ 0xb0
 801381c:	f8a4 50b2 	strh.w	r5, [r4, #178]	@ 0xb2
 8013820:	f8a4 50b4 	strh.w	r5, [r4, #180]	@ 0xb4
 8013824:	f884 50b6 	strb.w	r5, [r4, #182]	@ 0xb6
 8013828:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 801382c:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8013830:	f884 5089 	strb.w	r5, [r4, #137]	@ 0x89
 8013834:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8013838:	e9c4 5524 	strd	r5, r5, [r4, #144]	@ 0x90
 801383c:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 8013840:	b002      	add	sp, #8
 8013842:	bd70      	pop	{r4, r5, r6, pc}
 8013844:	0802dca4 	.word	0x0802dca4
 8013848:	00010007 	.word	0x00010007

0801384c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 801384c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801384e:	2600      	movs	r6, #0
 8013850:	f891 30a4 	ldrb.w	r3, [r1, #164]	@ 0xa4
 8013854:	4605      	mov	r5, r0
 8013856:	460c      	mov	r4, r1
 8013858:	8006      	strh	r6, [r0, #0]
 801385a:	8046      	strh	r6, [r0, #2]
 801385c:	8086      	strh	r6, [r0, #4]
 801385e:	80c6      	strh	r6, [r0, #6]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d041      	beq.n	80138e8 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8013864:	680b      	ldr	r3, [r1, #0]
 8013866:	4668      	mov	r0, sp
 8013868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801386c:	4798      	blx	r3
 801386e:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8013872:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d039      	beq.n	80138ee <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 801387a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801387e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013882:	429a      	cmp	r2, r3
 8013884:	dd05      	ble.n	8013892 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 8013886:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801388a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801388e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013892:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013896:	42bb      	cmp	r3, r7
 8013898:	da26      	bge.n	80138e8 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801389a:	f9bd 0000 	ldrsh.w	r0, [sp]
 801389e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80138a2:	4242      	negs	r2, r0
 80138a4:	4438      	add	r0, r7
 80138a6:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80138aa:	b200      	sxth	r0, r0
 80138ac:	435a      	muls	r2, r3
 80138ae:	1b9e      	subs	r6, r3, r6
 80138b0:	1ac0      	subs	r0, r0, r3
 80138b2:	4343      	muls	r3, r0
 80138b4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80138b8:	fb92 f2f7 	sdiv	r2, r2, r7
 80138bc:	fb93 f3f7 	sdiv	r3, r3, r7
 80138c0:	4413      	add	r3, r2
 80138c2:	0047      	lsls	r7, r0, #1
 80138c4:	1af3      	subs	r3, r6, r3
 80138c6:	429f      	cmp	r7, r3
 80138c8:	dd05      	ble.n	80138d6 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 80138ca:	1afb      	subs	r3, r7, r3
 80138cc:	4353      	muls	r3, r2
 80138ce:	fb93 f3f6 	sdiv	r3, r3, r6
 80138d2:	1ad2      	subs	r2, r2, r3
 80138d4:	463b      	mov	r3, r7
 80138d6:	b289      	uxth	r1, r1
 80138d8:	8964      	ldrh	r4, [r4, #10]
 80138da:	80ab      	strh	r3, [r5, #4]
 80138dc:	180e      	adds	r6, r1, r0
 80138de:	4411      	add	r1, r2
 80138e0:	80e8      	strh	r0, [r5, #6]
 80138e2:	1ba4      	subs	r4, r4, r6
 80138e4:	8029      	strh	r1, [r5, #0]
 80138e6:	806c      	strh	r4, [r5, #2]
 80138e8:	4628      	mov	r0, r5
 80138ea:	b003      	add	sp, #12
 80138ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138ee:	461e      	mov	r6, r3
 80138f0:	e7cf      	b.n	8013892 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

080138f2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 80138f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138f4:	2600      	movs	r6, #0
 80138f6:	f891 30a5 	ldrb.w	r3, [r1, #165]	@ 0xa5
 80138fa:	4605      	mov	r5, r0
 80138fc:	460c      	mov	r4, r1
 80138fe:	8006      	strh	r6, [r0, #0]
 8013900:	8046      	strh	r6, [r0, #2]
 8013902:	8086      	strh	r6, [r0, #4]
 8013904:	80c6      	strh	r6, [r0, #6]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d041      	beq.n	801398e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801390a:	680b      	ldr	r3, [r1, #0]
 801390c:	4668      	mov	r0, sp
 801390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013912:	4798      	blx	r3
 8013914:	f894 30a4 	ldrb.w	r3, [r4, #164]	@ 0xa4
 8013918:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d039      	beq.n	8013994 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8013920:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013924:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013928:	429a      	cmp	r2, r3
 801392a:	dd05      	ble.n	8013938 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 801392c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013930:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8013934:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013938:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801393c:	42bb      	cmp	r3, r7
 801393e:	da26      	bge.n	801398e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8013940:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8013944:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013948:	4242      	negs	r2, r0
 801394a:	4438      	add	r0, r7
 801394c:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8013950:	b200      	sxth	r0, r0
 8013952:	435a      	muls	r2, r3
 8013954:	1b9e      	subs	r6, r3, r6
 8013956:	1ac0      	subs	r0, r0, r3
 8013958:	4343      	muls	r3, r0
 801395a:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801395e:	fb92 f2f7 	sdiv	r2, r2, r7
 8013962:	fb93 f3f7 	sdiv	r3, r3, r7
 8013966:	4413      	add	r3, r2
 8013968:	0047      	lsls	r7, r0, #1
 801396a:	1af3      	subs	r3, r6, r3
 801396c:	429f      	cmp	r7, r3
 801396e:	dd05      	ble.n	801397c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8013970:	1afb      	subs	r3, r7, r3
 8013972:	4353      	muls	r3, r2
 8013974:	fb93 f3f6 	sdiv	r3, r3, r6
 8013978:	1ad2      	subs	r2, r2, r3
 801397a:	463b      	mov	r3, r7
 801397c:	b289      	uxth	r1, r1
 801397e:	8924      	ldrh	r4, [r4, #8]
 8013980:	80a8      	strh	r0, [r5, #4]
 8013982:	180e      	adds	r6, r1, r0
 8013984:	4411      	add	r1, r2
 8013986:	80eb      	strh	r3, [r5, #6]
 8013988:	1ba4      	subs	r4, r4, r6
 801398a:	8069      	strh	r1, [r5, #2]
 801398c:	802c      	strh	r4, [r5, #0]
 801398e:	4628      	mov	r0, r5
 8013990:	b003      	add	sp, #12
 8013992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013994:	461e      	mov	r6, r3
 8013996:	e7cf      	b.n	8013938 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

08013998 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8013998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801399c:	4617      	mov	r7, r2
 801399e:	2200      	movs	r2, #0
 80139a0:	4604      	mov	r4, r0
 80139a2:	460e      	mov	r6, r1
 80139a4:	8002      	strh	r2, [r0, #0]
 80139a6:	4698      	mov	r8, r3
 80139a8:	8042      	strh	r2, [r0, #2]
 80139aa:	8082      	strh	r2, [r0, #4]
 80139ac:	80c2      	strh	r2, [r0, #6]
 80139ae:	4638      	mov	r0, r7
 80139b0:	f7ff fb05 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 80139b4:	4605      	mov	r5, r0
 80139b6:	b998      	cbnz	r0, 80139e0 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 80139b8:	4640      	mov	r0, r8
 80139ba:	f7ff fb00 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 80139be:	f896 202c 	ldrb.w	r2, [r6, #44]	@ 0x2c
 80139c2:	f896 102d 	ldrb.w	r1, [r6, #45]	@ 0x2d
 80139c6:	b908      	cbnz	r0, 80139cc <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 80139c8:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 80139cc:	8933      	ldrh	r3, [r6, #8]
 80139ce:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 80139d2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80139d6:	8022      	strh	r2, [r4, #0]
 80139d8:	8067      	strh	r7, [r4, #2]
 80139da:	1b58      	subs	r0, r3, r5
 80139dc:	80e1      	strh	r1, [r4, #6]
 80139de:	80a0      	strh	r0, [r4, #4]
 80139e0:	4620      	mov	r0, r4
 80139e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080139e6 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 80139e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ea:	4604      	mov	r4, r0
 80139ec:	2000      	movs	r0, #0
 80139ee:	460f      	mov	r7, r1
 80139f0:	4616      	mov	r6, r2
 80139f2:	8020      	strh	r0, [r4, #0]
 80139f4:	4698      	mov	r8, r3
 80139f6:	8060      	strh	r0, [r4, #2]
 80139f8:	80a0      	strh	r0, [r4, #4]
 80139fa:	80e0      	strh	r0, [r4, #6]
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff fade 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a02:	4605      	mov	r5, r0
 8013a04:	b998      	cbnz	r0, 8013a2e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8013a06:	4630      	mov	r0, r6
 8013a08:	f7ff fad9 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a0c:	f897 602c 	ldrb.w	r6, [r7, #44]	@ 0x2c
 8013a10:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8013a14:	b908      	cbnz	r0, 8013a1a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8013a16:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8013a1a:	897a      	ldrh	r2, [r7, #10]
 8013a1c:	f8b8 3000 	ldrh.w	r3, [r8]
 8013a20:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8013a24:	8066      	strh	r6, [r4, #2]
 8013a26:	8023      	strh	r3, [r4, #0]
 8013a28:	1b50      	subs	r0, r2, r5
 8013a2a:	80a1      	strh	r1, [r4, #4]
 8013a2c:	80e0      	strh	r0, [r4, #6]
 8013a2e:	4620      	mov	r0, r4
 8013a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a34 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8013a34:	b570      	push	{r4, r5, r6, lr}
 8013a36:	b088      	sub	sp, #32
 8013a38:	4604      	mov	r4, r0
 8013a3a:	4601      	mov	r1, r0
 8013a3c:	4668      	mov	r0, sp
 8013a3e:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 8013a42:	f7ff ff03 	bl	801384c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8013a46:	4621      	mov	r1, r4
 8013a48:	a802      	add	r0, sp, #8
 8013a4a:	f7ff ff52 	bl	80138f2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8013a4e:	ab02      	add	r3, sp, #8
 8013a50:	466a      	mov	r2, sp
 8013a52:	4621      	mov	r1, r4
 8013a54:	a804      	add	r0, sp, #16
 8013a56:	f7ff ff9f 	bl	8013998 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8013a5a:	ab02      	add	r3, sp, #8
 8013a5c:	466a      	mov	r2, sp
 8013a5e:	4621      	mov	r1, r4
 8013a60:	a806      	add	r0, sp, #24
 8013a62:	f7ff ffc0 	bl	80139e6 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8013a66:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013a6a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	da02      	bge.n	8013a78 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8013a72:	4630      	mov	r0, r6
 8013a74:	f007 ff8f 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013a78:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013a7c:	f104 0564 	add.w	r5, r4, #100	@ 0x64
 8013a80:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	@ 0x68
 8013a84:	429a      	cmp	r2, r3
 8013a86:	da02      	bge.n	8013a8e <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8013a88:	4628      	mov	r0, r5
 8013a8a:	f007 ff84 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013a8e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013a92:	f8bd 0000 	ldrh.w	r0, [sp]
 8013a96:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8013a9a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013a9e:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8013aa4:	f7ff fe42 	bl	801372c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013aa8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8013aac:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8013ab0:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013ab4:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 8013abe:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8013ac2:	f7ff fe33 	bl	801372c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013ac6:	8922      	ldrh	r2, [r4, #8]
 8013ac8:	2300      	movs	r3, #0
 8013aca:	a804      	add	r0, sp, #16
 8013acc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013ad0:	8962      	ldrh	r2, [r4, #10]
 8013ad2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013ad6:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013ada:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013ade:	f7ff fa6e 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ae2:	b920      	cbnz	r0, 8013aee <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8013ae4:	6823      	ldr	r3, [r4, #0]
 8013ae6:	a904      	add	r1, sp, #16
 8013ae8:	4620      	mov	r0, r4
 8013aea:	691b      	ldr	r3, [r3, #16]
 8013aec:	4798      	blx	r3
 8013aee:	a806      	add	r0, sp, #24
 8013af0:	f7ff fa65 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013af4:	b920      	cbnz	r0, 8013b00 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8013af6:	6823      	ldr	r3, [r4, #0]
 8013af8:	a906      	add	r1, sp, #24
 8013afa:	4620      	mov	r0, r4
 8013afc:	691b      	ldr	r3, [r3, #16]
 8013afe:	4798      	blx	r3
 8013b00:	b008      	add	sp, #32
 8013b02:	bd70      	pop	{r4, r5, r6, pc}

08013b04 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	790b      	ldrb	r3, [r1, #4]
 8013b08:	b08a      	sub	sp, #40	@ 0x28
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	460d      	mov	r5, r1
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d17f      	bne.n	8013c12 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10e>
 8013b12:	2201      	movs	r2, #1
 8013b14:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
 8013b18:	f890 20b0 	ldrb.w	r2, [r0, #176]	@ 0xb0
 8013b1c:	b14a      	cbz	r2, 8013b32 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2e>
 8013b1e:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8013b22:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
 8013b26:	f006 fe73 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8013b2a:	4621      	mov	r1, r4
 8013b2c:	3004      	adds	r0, #4
 8013b2e:	f006 fe94 	bl	801a85a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013b32:	4623      	mov	r3, r4
 8013b34:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013b38:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013b3c:	f853 0bb4 	ldr.w	r0, [r3], #180
 8013b40:	9301      	str	r3, [sp, #4]
 8013b42:	f104 03b2 	add.w	r3, r4, #178	@ 0xb2
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 8013b4c:	6f86      	ldr	r6, [r0, #120]	@ 0x78
 8013b4e:	4620      	mov	r0, r4
 8013b50:	47b0      	blx	r6
 8013b52:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8013b56:	42a3      	cmp	r3, r4
 8013b58:	bf04      	itt	eq
 8013b5a:	2300      	moveq	r3, #0
 8013b5c:	f8c4 3090 	streq.w	r3, [r4, #144]	@ 0x90
 8013b60:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8013b64:	2900      	cmp	r1, #0
 8013b66:	d03a      	beq.n	8013bde <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8013b68:	2600      	movs	r6, #0
 8013b6a:	a803      	add	r0, sp, #12
 8013b6c:	f884 60b6 	strb.w	r6, [r4, #182]	@ 0xb6
 8013b70:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013b74:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 8013b78:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8013b7c:	f8a4 30a0 	strh.w	r3, [r4, #160]	@ 0xa0
 8013b80:	f007 ffa4 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b84:	4621      	mov	r1, r4
 8013b86:	a805      	add	r0, sp, #20
 8013b88:	f007 ffa0 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b8c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013b90:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013b94:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8013b98:	1ad2      	subs	r2, r2, r3
 8013b9a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8013b9e:	7929      	ldrb	r1, [r5, #4]
 8013ba0:	441a      	add	r2, r3
 8013ba2:	88eb      	ldrh	r3, [r5, #6]
 8013ba4:	f88d 1020 	strb.w	r1, [sp, #32]
 8013ba8:	a907      	add	r1, sp, #28
 8013baa:	441a      	add	r2, r3
 8013bac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013bb0:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8013bb4:	1a1b      	subs	r3, r3, r0
 8013bb6:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8013bba:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 8013bbe:	4403      	add	r3, r0
 8013bc0:	8928      	ldrh	r0, [r5, #8]
 8013bc2:	4403      	add	r3, r0
 8013bc4:	482f      	ldr	r0, [pc, #188]	@ (8013c84 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8013bc6:	9007      	str	r0, [sp, #28]
 8013bc8:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8013bcc:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013bd0:	6803      	ldr	r3, [r0, #0]
 8013bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013bd4:	4798      	blx	r3
 8013bd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8013bda:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8013bde:	2300      	movs	r3, #0
 8013be0:	f894 20a2 	ldrb.w	r2, [r4, #162]	@ 0xa2
 8013be4:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8013be8:	b112      	cbz	r2, 8013bf0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xec>
 8013bea:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8013bee:	b90b      	cbnz	r3, 8013bf4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xf0>
 8013bf0:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8013bf4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8013bf8:	b112      	cbz	r2, 8013c00 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfc>
 8013bfa:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8013bfe:	b90b      	cbnz	r3, 8013c04 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x100>
 8013c00:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8013c04:	f884 3089 	strb.w	r3, [r4, #137]	@ 0x89
 8013c08:	4620      	mov	r0, r4
 8013c0a:	f7ff ff13 	bl	8013a34 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8013c0e:	b00a      	add	sp, #40	@ 0x28
 8013c10:	bd70      	pop	{r4, r5, r6, pc}
 8013c12:	2b02      	cmp	r3, #2
 8013c14:	d0fb      	beq.n	8013c0e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10a>
 8013c16:	f8d0 1090 	ldr.w	r1, [r0, #144]	@ 0x90
 8013c1a:	b361      	cbz	r1, 8013c76 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x172>
 8013c1c:	a803      	add	r0, sp, #12
 8013c1e:	f007 ff55 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c22:	4621      	mov	r1, r4
 8013c24:	a805      	add	r0, sp, #20
 8013c26:	f007 ff51 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c2a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013c2e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013c32:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8013c36:	1ad2      	subs	r2, r2, r3
 8013c38:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8013c3c:	7929      	ldrb	r1, [r5, #4]
 8013c3e:	441a      	add	r2, r3
 8013c40:	88eb      	ldrh	r3, [r5, #6]
 8013c42:	f88d 1020 	strb.w	r1, [sp, #32]
 8013c46:	a907      	add	r1, sp, #28
 8013c48:	441a      	add	r2, r3
 8013c4a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013c4e:	1a1b      	subs	r3, r3, r0
 8013c50:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	@ 0xb4
 8013c54:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 8013c58:	4403      	add	r3, r0
 8013c5a:	8928      	ldrh	r0, [r5, #8]
 8013c5c:	4403      	add	r3, r0
 8013c5e:	4809      	ldr	r0, [pc, #36]	@ (8013c84 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x180>)
 8013c60:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013c64:	2300      	movs	r3, #0
 8013c66:	9007      	str	r0, [sp, #28]
 8013c68:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8013c6c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013c70:	6803      	ldr	r3, [r0, #0]
 8013c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c74:	4798      	blx	r3
 8013c76:	2300      	movs	r3, #0
 8013c78:	e9c4 3324 	strd	r3, r3, [r4, #144]	@ 0x90
 8013c7c:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 8013c80:	e7ad      	b.n	8013bde <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xda>
 8013c82:	bf00      	nop
 8013c84:	0802dc7c 	.word	0x0802dc7c

08013c88 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8013c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c8a:	4606      	mov	r6, r0
 8013c8c:	4615      	mov	r5, r2
 8013c8e:	460c      	mov	r4, r1
 8013c90:	b919      	cbnz	r1, 8013c9a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8013c92:	b912      	cbnz	r2, 8013c9a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8013c94:	2000      	movs	r0, #0
 8013c96:	b003      	add	sp, #12
 8013c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c9a:	6833      	ldr	r3, [r6, #0]
 8013c9c:	4631      	mov	r1, r6
 8013c9e:	4668      	mov	r0, sp
 8013ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ca4:	4798      	blx	r3
 8013ca6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8013caa:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8013cae:	f9bd 2000 	ldrsh.w	r2, [sp]
 8013cb2:	4288      	cmp	r0, r1
 8013cb4:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8013cb8:	da2c      	bge.n	8013d14 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 8013cba:	2c00      	cmp	r4, #0
 8013cbc:	dd20      	ble.n	8013d00 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 8013cbe:	1913      	adds	r3, r2, r4
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	dd01      	ble.n	8013cc8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8013cc4:	4252      	negs	r2, r2
 8013cc6:	b214      	sxth	r4, r2
 8013cc8:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8013ccc:	4297      	cmp	r7, r2
 8013cce:	dd2c      	ble.n	8013d2a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8013cd0:	2d00      	cmp	r5, #0
 8013cd2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013cd6:	dd1f      	ble.n	8013d18 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8013cd8:	195a      	adds	r2, r3, r5
 8013cda:	2a00      	cmp	r2, #0
 8013cdc:	dd04      	ble.n	8013ce8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8013cde:	425b      	negs	r3, r3
 8013ce0:	b21d      	sxth	r5, r3
 8013ce2:	b90c      	cbnz	r4, 8013ce8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8013ce4:	2d00      	cmp	r5, #0
 8013ce6:	d0d5      	beq.n	8013c94 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8013ce8:	6833      	ldr	r3, [r6, #0]
 8013cea:	462a      	mov	r2, r5
 8013cec:	4621      	mov	r1, r4
 8013cee:	4630      	mov	r0, r6
 8013cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013cf4:	4798      	blx	r3
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f7ff fe9c 	bl	8013a34 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8013cfc:	2001      	movs	r0, #1
 8013cfe:	e7ca      	b.n	8013c96 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8013d00:	d0e2      	beq.n	8013cc8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8013d02:	440a      	add	r2, r1
 8013d04:	b292      	uxth	r2, r2
 8013d06:	fa04 f382 	sxtah	r3, r4, r2
 8013d0a:	4283      	cmp	r3, r0
 8013d0c:	dadc      	bge.n	8013cc8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8013d0e:	1a84      	subs	r4, r0, r2
 8013d10:	b224      	sxth	r4, r4
 8013d12:	e7d9      	b.n	8013cc8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8013d14:	2400      	movs	r4, #0
 8013d16:	e7d7      	b.n	8013cc8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8013d18:	d007      	beq.n	8013d2a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8013d1a:	443b      	add	r3, r7
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	fa05 f183 	sxtah	r1, r5, r3
 8013d22:	4291      	cmp	r1, r2
 8013d24:	dae0      	bge.n	8013ce8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8013d26:	1ad3      	subs	r3, r2, r3
 8013d28:	e7da      	b.n	8013ce0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 8013d2a:	2c00      	cmp	r4, #0
 8013d2c:	d0b2      	beq.n	8013c94 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8013d2e:	2500      	movs	r5, #0
 8013d30:	e7da      	b.n	8013ce8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

08013d32 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8013d32:	b513      	push	{r0, r1, r4, lr}
 8013d34:	6803      	ldr	r3, [r0, #0]
 8013d36:	4601      	mov	r1, r0
 8013d38:	4604      	mov	r4, r0
 8013d3a:	4668      	mov	r0, sp
 8013d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013d40:	4798      	blx	r3
 8013d42:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8013d46:	f9bd 1000 	ldrsh.w	r1, [sp]
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	dd20      	ble.n	8013d90 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	2900      	cmp	r1, #0
 8013d52:	dc0e      	bgt.n	8013d72 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8013d54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013d58:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8013d5c:	440b      	add	r3, r1
 8013d5e:	b21b      	sxth	r3, r3
 8013d60:	4298      	cmp	r0, r3
 8013d62:	dd04      	ble.n	8013d6e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8013d64:	1a1b      	subs	r3, r3, r0
 8013d66:	4299      	cmp	r1, r3
 8013d68:	bfb8      	it	lt
 8013d6a:	4619      	movlt	r1, r3
 8013d6c:	b909      	cbnz	r1, 8013d72 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8013d6e:	b1f2      	cbz	r2, 8013dae <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8013d70:	2100      	movs	r1, #0
 8013d72:	6823      	ldr	r3, [r4, #0]
 8013d74:	4252      	negs	r2, r2
 8013d76:	4249      	negs	r1, r1
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d7e:	b212      	sxth	r2, r2
 8013d80:	b209      	sxth	r1, r1
 8013d82:	4798      	blx	r3
 8013d84:	4620      	mov	r0, r4
 8013d86:	b002      	add	sp, #8
 8013d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d8c:	f7ff be52 	b.w	8013a34 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8013d90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013d94:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8013d98:	4403      	add	r3, r0
 8013d9a:	b21b      	sxth	r3, r3
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	dd04      	ble.n	8013daa <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8013da0:	1a9a      	subs	r2, r3, r2
 8013da2:	4282      	cmp	r2, r0
 8013da4:	bfb8      	it	lt
 8013da6:	4602      	movlt	r2, r0
 8013da8:	e7d2      	b.n	8013d50 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8013daa:	2200      	movs	r2, #0
 8013dac:	e7d0      	b.n	8013d50 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8013dae:	b002      	add	sp, #8
 8013db0:	bd10      	pop	{r4, pc}

08013db2 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8013db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013db4:	4605      	mov	r5, r0
 8013db6:	f100 0638 	add.w	r6, r0, #56	@ 0x38
 8013dba:	4604      	mov	r4, r0
 8013dbc:	460f      	mov	r7, r1
 8013dbe:	f855 3b64 	ldr.w	r3, [r5], #100
 8013dc2:	4631      	mov	r1, r6
 8013dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013dc6:	4798      	blx	r3
 8013dc8:	6823      	ldr	r3, [r4, #0]
 8013dca:	4629      	mov	r1, r5
 8013dcc:	4620      	mov	r0, r4
 8013dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013dd0:	4798      	blx	r3
 8013dd2:	4639      	mov	r1, r7
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f7fe ff2b 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013dda:	4631      	mov	r1, r6
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f7fe ff27 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013de2:	4629      	mov	r1, r5
 8013de4:	4620      	mov	r0, r4
 8013de6:	f7fe ff23 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013dea:	f894 30a7 	ldrb.w	r3, [r4, #167]	@ 0xa7
 8013dee:	b123      	cbz	r3, 8013dfa <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE+0x48>
 8013df0:	4620      	mov	r0, r4
 8013df2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013df6:	f7ff be1d 	b.w	8013a34 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8013dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013dfc <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 8013dfc:	6301      	str	r1, [r0, #48]	@ 0x30
 8013dfe:	6601      	str	r1, [r0, #96]	@ 0x60
 8013e00:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8013e04:	4770      	bx	lr

08013e06 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 8013e06:	f880 102e 	strb.w	r1, [r0, #46]	@ 0x2e
 8013e0a:	f880 105e 	strb.w	r1, [r0, #94]	@ 0x5e
 8013e0e:	f880 108a 	strb.w	r1, [r0, #138]	@ 0x8a
 8013e12:	4770      	bx	lr

08013e14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013e14:	6803      	ldr	r3, [r0, #0]
 8013e16:	b513      	push	{r0, r1, r4, lr}
 8013e18:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	e9cd 3300 	strd	r3, r3, [sp]
 8013e22:	466b      	mov	r3, sp
 8013e24:	47a0      	blx	r4
 8013e26:	b002      	add	sp, #8
 8013e28:	bd10      	pop	{r4, pc}

08013e2a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8013e30:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8013e34:	4770      	bx	lr

08013e36 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013e36:	2301      	movs	r3, #1
 8013e38:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8013e3c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8013e40:	4770      	bx	lr

08013e42 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013e42:	6843      	ldr	r3, [r0, #4]
 8013e44:	2201      	movs	r2, #1
 8013e46:	725a      	strb	r2, [r3, #9]
 8013e48:	6840      	ldr	r0, [r0, #4]
 8013e4a:	6803      	ldr	r3, [r0, #0]
 8013e4c:	691b      	ldr	r3, [r3, #16]
 8013e4e:	4718      	bx	r3

08013e50 <_ZN8touchgfx3HAL8flushDMAEv>:
 8013e50:	6840      	ldr	r0, [r0, #4]
 8013e52:	6803      	ldr	r3, [r0, #0]
 8013e54:	689b      	ldr	r3, [r3, #8]
 8013e56:	4718      	bx	r3

08013e58 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8013e58:	b530      	push	{r4, r5, lr}
 8013e5a:	b08b      	sub	sp, #44	@ 0x2c
 8013e5c:	6804      	ldr	r4, [r0, #0]
 8013e5e:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8013e62:	9509      	str	r5, [sp, #36]	@ 0x24
 8013e64:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8013e68:	9508      	str	r5, [sp, #32]
 8013e6a:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8013e6e:	9507      	str	r5, [sp, #28]
 8013e70:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8013e74:	9506      	str	r5, [sp, #24]
 8013e76:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8013e7a:	9505      	str	r5, [sp, #20]
 8013e7c:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8013e80:	9504      	str	r5, [sp, #16]
 8013e82:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8013e86:	9503      	str	r5, [sp, #12]
 8013e88:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8013e8c:	9502      	str	r5, [sp, #8]
 8013e8e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8013e92:	e9cd 3500 	strd	r3, r5, [sp]
 8013e96:	4613      	mov	r3, r2
 8013e98:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	47a0      	blx	r4
 8013e9e:	b00b      	add	sp, #44	@ 0x2c
 8013ea0:	bd30      	pop	{r4, r5, pc}
	...

08013ea4 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013ea4:	4b04      	ldr	r3, [pc, #16]	@ (8013eb8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	b123      	cbz	r3, 8013eb4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013eaa:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8013eae:	f080 0001 	eor.w	r0, r0, #1
 8013eb2:	4770      	bx	lr
 8013eb4:	2001      	movs	r0, #1
 8013eb6:	4770      	bx	lr
 8013eb8:	240285b2 	.word	0x240285b2

08013ebc <_ZN8touchgfx3HAL8endFrameEv>:
 8013ebc:	b510      	push	{r4, lr}
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	6840      	ldr	r0, [r0, #4]
 8013ec2:	6803      	ldr	r3, [r0, #0]
 8013ec4:	689b      	ldr	r3, [r3, #8]
 8013ec6:	4798      	blx	r3
 8013ec8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8013ecc:	b113      	cbz	r3, 8013ed4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013ece:	2301      	movs	r3, #1
 8013ed0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013ed4:	bd10      	pop	{r4, pc}

08013ed6 <_ZN8touchgfx3HAL10initializeEv>:
 8013ed6:	b510      	push	{r4, lr}
 8013ed8:	4604      	mov	r4, r0
 8013eda:	f7ee ff5f 	bl	8002d9c <_ZN8touchgfx10OSWrappers10initializeEv>
 8013ede:	f7ed ffb5 	bl	8001e4c <_ZN8touchgfx4GPIO4initEv>
 8013ee2:	6860      	ldr	r0, [r4, #4]
 8013ee4:	6803      	ldr	r3, [r0, #0]
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	4798      	blx	r3
 8013eea:	68e0      	ldr	r0, [r4, #12]
 8013eec:	6803      	ldr	r3, [r0, #0]
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	4798      	blx	r3
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013efc:	4718      	bx	r3
	...

08013f00 <_ZN8touchgfx3HAL4tickEv>:
 8013f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013f02:	6803      	ldr	r3, [r0, #0]
 8013f04:	4604      	mov	r4, r0
 8013f06:	4d5b      	ldr	r5, [pc, #364]	@ (8014074 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013f0c:	4798      	blx	r3
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	f000 8095 	beq.w	801403e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013f14:	2001      	movs	r0, #1
 8013f16:	2600      	movs	r6, #0
 8013f18:	f7ed fefe 	bl	8001d18 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013f1c:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8013f20:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8013f24:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8013f28:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8013f2c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8013f30:	b133      	cbz	r3, 8013f40 <_ZN8touchgfx3HAL4tickEv+0x40>
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	4620      	mov	r0, r4
 8013f36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8013f3a:	4798      	blx	r3
 8013f3c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8013f40:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8013f44:	2601      	movs	r6, #1
 8013f46:	6862      	ldr	r2, [r4, #4]
 8013f48:	f083 0301 	eor.w	r3, r3, #1
 8013f4c:	702e      	strb	r6, [r5, #0]
 8013f4e:	7253      	strb	r3, [r2, #9]
 8013f50:	f006 fc5e 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8013f54:	6803      	ldr	r3, [r0, #0]
 8013f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f58:	4798      	blx	r3
 8013f5a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8013f5e:	b90b      	cbnz	r3, 8013f64 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013f60:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8013f64:	f006 fc54 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8013f68:	6803      	ldr	r3, [r0, #0]
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	4798      	blx	r3
 8013f6e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013f70:	6803      	ldr	r3, [r0, #0]
 8013f72:	691b      	ldr	r3, [r3, #16]
 8013f74:	4798      	blx	r3
 8013f76:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8013f7a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8013f7e:	3b01      	subs	r3, #1
 8013f80:	b2db      	uxtb	r3, r3
 8013f82:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8013f86:	b10a      	cbz	r2, 8013f8c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d1eb      	bne.n	8013f64 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8014078 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013f8e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8013f92:	7813      	ldrb	r3, [r2, #0]
 8013f94:	3301      	adds	r3, #1
 8013f96:	b25b      	sxtb	r3, r3
 8013f98:	4299      	cmp	r1, r3
 8013f9a:	7013      	strb	r3, [r2, #0]
 8013f9c:	dc10      	bgt.n	8013fc0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	68e0      	ldr	r0, [r4, #12]
 8013fa2:	a902      	add	r1, sp, #8
 8013fa4:	7013      	strb	r3, [r2, #0]
 8013fa6:	aa03      	add	r2, sp, #12
 8013fa8:	6803      	ldr	r3, [r0, #0]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	4798      	blx	r3
 8013fae:	6823      	ldr	r3, [r4, #0]
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	d050      	beq.n	8014056 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013fb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013fb8:	4620      	mov	r0, r4
 8013fba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013fbe:	4798      	blx	r3
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	6960      	ldr	r0, [r4, #20]
 8013fc4:	f88d 3007 	strb.w	r3, [sp, #7]
 8013fc8:	b158      	cbz	r0, 8013fe2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013fca:	6803      	ldr	r3, [r0, #0]
 8013fcc:	f10d 0107 	add.w	r1, sp, #7
 8013fd0:	68db      	ldr	r3, [r3, #12]
 8013fd2:	4798      	blx	r3
 8013fd4:	b128      	cbz	r0, 8013fe2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013fd6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013fd8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013fdc:	6803      	ldr	r3, [r0, #0]
 8013fde:	68db      	ldr	r3, [r3, #12]
 8013fe0:	4798      	blx	r3
 8013fe2:	f104 001c 	add.w	r0, r4, #28
 8013fe6:	f014 f9bb 	bl	8028360 <_ZN8touchgfx8Gestures4tickEv>
 8013fea:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8013fee:	b30b      	cbz	r3, 8014034 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013ff0:	6920      	ldr	r0, [r4, #16]
 8013ff2:	6803      	ldr	r3, [r0, #0]
 8013ff4:	691b      	ldr	r3, [r3, #16]
 8013ff6:	4798      	blx	r3
 8013ff8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013ffa:	4606      	mov	r6, r0
 8013ffc:	b903      	cbnz	r3, 8014000 <_ZN8touchgfx3HAL4tickEv+0x100>
 8013ffe:	6760      	str	r0, [r4, #116]	@ 0x74
 8014000:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014002:	4a1e      	ldr	r2, [pc, #120]	@ (801407c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014004:	1af3      	subs	r3, r6, r3
 8014006:	4293      	cmp	r3, r2
 8014008:	d914      	bls.n	8014034 <_ZN8touchgfx3HAL4tickEv+0x134>
 801400a:	6920      	ldr	r0, [r4, #16]
 801400c:	6803      	ldr	r3, [r0, #0]
 801400e:	699b      	ldr	r3, [r3, #24]
 8014010:	4798      	blx	r3
 8014012:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014014:	2264      	movs	r2, #100	@ 0x64
 8014016:	1af3      	subs	r3, r6, r3
 8014018:	fbb3 f3f2 	udiv	r3, r3, r2
 801401c:	fbb0 f0f3 	udiv	r0, r0, r3
 8014020:	2800      	cmp	r0, #0
 8014022:	dc1d      	bgt.n	8014060 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014024:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8014028:	6920      	ldr	r0, [r4, #16]
 801402a:	2100      	movs	r1, #0
 801402c:	6803      	ldr	r3, [r0, #0]
 801402e:	69db      	ldr	r3, [r3, #28]
 8014030:	4798      	blx	r3
 8014032:	6766      	str	r6, [r4, #116]	@ 0x74
 8014034:	f006 fbec 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 8014038:	6803      	ldr	r3, [r0, #0]
 801403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801403c:	4798      	blx	r3
 801403e:	6823      	ldr	r3, [r4, #0]
 8014040:	4620      	mov	r0, r4
 8014042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014046:	4798      	blx	r3
 8014048:	2001      	movs	r0, #1
 801404a:	f7ed fe95 	bl	8001d78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801404e:	2300      	movs	r3, #0
 8014050:	702b      	strb	r3, [r5, #0]
 8014052:	b004      	add	sp, #16
 8014054:	bd70      	pop	{r4, r5, r6, pc}
 8014056:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801405a:	4620      	mov	r0, r4
 801405c:	4798      	blx	r3
 801405e:	e7af      	b.n	8013fc0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014060:	2863      	cmp	r0, #99	@ 0x63
 8014062:	bfcb      	itete	gt
 8014064:	2300      	movgt	r3, #0
 8014066:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801406a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 801406e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014072:	e7d9      	b.n	8014028 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014074:	240285b8 	.word	0x240285b8
 8014078:	240285b9 	.word	0x240285b9
 801407c:	05f5e100 	.word	0x05f5e100

08014080 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014080:	b510      	push	{r4, lr}
 8014082:	4604      	mov	r4, r0
 8014084:	f7ee feba 	bl	8002dfc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014088:	2200      	movs	r2, #0
 801408a:	6863      	ldr	r3, [r4, #4]
 801408c:	729a      	strb	r2, [r3, #10]
 801408e:	bd10      	pop	{r4, pc}

08014090 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014090:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014092:	301c      	adds	r0, #28
 8014094:	f014 b962 	b.w	802835c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014098 <_ZN8touchgfx3HAL5touchEll>:
 8014098:	b530      	push	{r4, r5, lr}
 801409a:	b087      	sub	sp, #28
 801409c:	4604      	mov	r4, r0
 801409e:	a804      	add	r0, sp, #16
 80140a0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80140a4:	f006 f9c6 	bl	801a434 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80140a8:	9b04      	ldr	r3, [sp, #16]
 80140aa:	a906      	add	r1, sp, #24
 80140ac:	a803      	add	r0, sp, #12
 80140ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 80140b2:	9b05      	ldr	r3, [sp, #20]
 80140b4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80140b8:	f006 fa0e 	bl	801a4d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80140bc:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80140c0:	f104 001c 	add.w	r0, r4, #28
 80140c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80140c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80140cc:	b189      	cbz	r1, 80140f2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80140ce:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80140d2:	9300      	str	r3, [sp, #0]
 80140d4:	4613      	mov	r3, r2
 80140d6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80140da:	462a      	mov	r2, r5
 80140dc:	f014 f94e 	bl	802837c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80140e0:	b128      	cbz	r0, 80140ee <_ZN8touchgfx3HAL5touchEll+0x56>
 80140e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80140e6:	6623      	str	r3, [r4, #96]	@ 0x60
 80140e8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80140ec:	6663      	str	r3, [r4, #100]	@ 0x64
 80140ee:	b007      	add	sp, #28
 80140f0:	bd30      	pop	{r4, r5, pc}
 80140f2:	f014 f983 	bl	80283fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80140f6:	2301      	movs	r3, #1
 80140f8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80140fc:	e7f1      	b.n	80140e2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080140fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80140fe:	b510      	push	{r4, lr}
 8014100:	2b00      	cmp	r3, #0
 8014102:	d046      	beq.n	8014192 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014104:	ea81 0002 	eor.w	r0, r1, r2
 8014108:	07c4      	lsls	r4, r0, #31
 801410a:	d508      	bpl.n	801411e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801410c:	440b      	add	r3, r1
 801410e:	3a01      	subs	r2, #1
 8014110:	428b      	cmp	r3, r1
 8014112:	d93e      	bls.n	8014192 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014114:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014118:	f801 0b01 	strb.w	r0, [r1], #1
 801411c:	e7f8      	b.n	8014110 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801411e:	07d0      	lsls	r0, r2, #31
 8014120:	bf42      	ittt	mi
 8014122:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014126:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801412a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801412e:	2b01      	cmp	r3, #1
 8014130:	d911      	bls.n	8014156 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014132:	ea81 0402 	eor.w	r4, r1, r2
 8014136:	4610      	mov	r0, r2
 8014138:	07a4      	lsls	r4, r4, #30
 801413a:	d022      	beq.n	8014182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801413c:	f023 0401 	bic.w	r4, r3, #1
 8014140:	440c      	add	r4, r1
 8014142:	428c      	cmp	r4, r1
 8014144:	4602      	mov	r2, r0
 8014146:	d904      	bls.n	8014152 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014148:	8812      	ldrh	r2, [r2, #0]
 801414a:	3002      	adds	r0, #2
 801414c:	f821 2b02 	strh.w	r2, [r1], #2
 8014150:	e7f7      	b.n	8014142 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014152:	f003 0301 	and.w	r3, r3, #1
 8014156:	f023 0003 	bic.w	r0, r3, #3
 801415a:	4408      	add	r0, r1
 801415c:	4288      	cmp	r0, r1
 801415e:	4614      	mov	r4, r2
 8014160:	d904      	bls.n	801416c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014162:	6824      	ldr	r4, [r4, #0]
 8014164:	3204      	adds	r2, #4
 8014166:	f841 4b04 	str.w	r4, [r1], #4
 801416a:	e7f7      	b.n	801415c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801416c:	f003 0303 	and.w	r3, r3, #3
 8014170:	3a01      	subs	r2, #1
 8014172:	440b      	add	r3, r1
 8014174:	428b      	cmp	r3, r1
 8014176:	d90c      	bls.n	8014192 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014178:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801417c:	f801 0b01 	strb.w	r0, [r1], #1
 8014180:	e7f8      	b.n	8014174 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014182:	0790      	lsls	r0, r2, #30
 8014184:	d0e7      	beq.n	8014156 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014186:	f832 0b02 	ldrh.w	r0, [r2], #2
 801418a:	3b02      	subs	r3, #2
 801418c:	f821 0b02 	strh.w	r0, [r1], #2
 8014190:	e7e1      	b.n	8014156 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014192:	2001      	movs	r0, #1
 8014194:	bd10      	pop	{r4, pc}

08014196 <_ZN8touchgfx3HAL7noTouchEv>:
 8014196:	b510      	push	{r4, lr}
 8014198:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 801419c:	4604      	mov	r4, r0
 801419e:	b153      	cbz	r3, 80141b6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80141a0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80141a4:	2101      	movs	r1, #1
 80141a6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80141aa:	301c      	adds	r0, #28
 80141ac:	f014 f926 	bl	80283fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80141b0:	2300      	movs	r3, #0
 80141b2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80141b6:	bd10      	pop	{r4, pc}

080141b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80141b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141bc:	b085      	sub	sp, #20
 80141be:	4604      	mov	r4, r0
 80141c0:	2000      	movs	r0, #0
 80141c2:	4699      	mov	r9, r3
 80141c4:	ad04      	add	r5, sp, #16
 80141c6:	460f      	mov	r7, r1
 80141c8:	4690      	mov	r8, r2
 80141ca:	f845 0d04 	str.w	r0, [r5, #-4]!
 80141ce:	69a0      	ldr	r0, [r4, #24]
 80141d0:	6806      	ldr	r6, [r0, #0]
 80141d2:	9501      	str	r5, [sp, #4]
 80141d4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80141d8:	9500      	str	r5, [sp, #0]
 80141da:	6835      	ldr	r5, [r6, #0]
 80141dc:	47a8      	blx	r5
 80141de:	4d10      	ldr	r5, [pc, #64]	@ (8014220 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80141e0:	4606      	mov	r6, r0
 80141e2:	f8a5 9000 	strh.w	r9, [r5]
 80141e6:	f7f3 fce9 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 80141ea:	6803      	ldr	r3, [r0, #0]
 80141ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141ee:	4798      	blx	r3
 80141f0:	b128      	cbz	r0, 80141fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80141f2:	2801      	cmp	r0, #1
 80141f4:	d00b      	beq.n	801420e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80141f6:	4630      	mov	r0, r6
 80141f8:	b005      	add	sp, #20
 80141fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141fe:	882b      	ldrh	r3, [r5, #0]
 8014200:	fb08 7203 	mla	r2, r8, r3, r7
 8014204:	9b03      	ldr	r3, [sp, #12]
 8014206:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801420a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801420c:	e7f3      	b.n	80141f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801420e:	882a      	ldrh	r2, [r5, #0]
 8014210:	9b03      	ldr	r3, [sp, #12]
 8014212:	fb08 7202 	mla	r2, r8, r2, r7
 8014216:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801421a:	1a9a      	subs	r2, r3, r2
 801421c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801421e:	e7ea      	b.n	80141f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014220:	240285ae 	.word	0x240285ae

08014224 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014226:	b08b      	sub	sp, #44	@ 0x2c
 8014228:	4617      	mov	r7, r2
 801422a:	4604      	mov	r4, r0
 801422c:	460e      	mov	r6, r1
 801422e:	461d      	mov	r5, r3
 8014230:	f7f3 fcc4 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8014234:	6803      	ldr	r3, [r0, #0]
 8014236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014238:	4798      	blx	r3
 801423a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801423e:	9007      	str	r0, [sp, #28]
 8014240:	4631      	mov	r1, r6
 8014242:	6822      	ldr	r2, [r4, #0]
 8014244:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014248:	4b0c      	ldr	r3, [pc, #48]	@ (801427c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801424a:	4620      	mov	r0, r4
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	9306      	str	r3, [sp, #24]
 8014250:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014254:	9305      	str	r3, [sp, #20]
 8014256:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801425a:	9304      	str	r3, [sp, #16]
 801425c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014260:	9303      	str	r3, [sp, #12]
 8014262:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014266:	9302      	str	r3, [sp, #8]
 8014268:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801426c:	e9cd 5300 	strd	r5, r3, [sp]
 8014270:	463b      	mov	r3, r7
 8014272:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8014274:	2200      	movs	r2, #0
 8014276:	47a8      	blx	r5
 8014278:	b00b      	add	sp, #44	@ 0x2c
 801427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801427c:	240285ae 	.word	0x240285ae

08014280 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014284:	4698      	mov	r8, r3
 8014286:	6803      	ldr	r3, [r0, #0]
 8014288:	b08b      	sub	sp, #44	@ 0x2c
 801428a:	4617      	mov	r7, r2
 801428c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 801428e:	460e      	mov	r6, r1
 8014290:	4b13      	ldr	r3, [pc, #76]	@ (80142e0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014292:	4604      	mov	r4, r0
 8014294:	f8b3 9000 	ldrh.w	r9, [r3]
 8014298:	f7f3 fc90 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 801429c:	6803      	ldr	r3, [r0, #0]
 801429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142a0:	4798      	blx	r3
 80142a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80142a6:	2200      	movs	r2, #0
 80142a8:	4631      	mov	r1, r6
 80142aa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80142ae:	2302      	movs	r3, #2
 80142b0:	4620      	mov	r0, r4
 80142b2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80142b6:	2301      	movs	r3, #1
 80142b8:	9305      	str	r3, [sp, #20]
 80142ba:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80142be:	9304      	str	r3, [sp, #16]
 80142c0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80142c4:	9303      	str	r3, [sp, #12]
 80142c6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80142ca:	9302      	str	r3, [sp, #8]
 80142cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80142d0:	e9cd 8300 	strd	r8, r3, [sp]
 80142d4:	463b      	mov	r3, r7
 80142d6:	47a8      	blx	r5
 80142d8:	b00b      	add	sp, #44	@ 0x2c
 80142da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142de:	bf00      	nop
 80142e0:	240285ae 	.word	0x240285ae

080142e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80142e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142e8:	4698      	mov	r8, r3
 80142ea:	6803      	ldr	r3, [r0, #0]
 80142ec:	b087      	sub	sp, #28
 80142ee:	460e      	mov	r6, r1
 80142f0:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 80142f2:	4617      	mov	r7, r2
 80142f4:	4b0f      	ldr	r3, [pc, #60]	@ (8014334 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80142f6:	4604      	mov	r4, r0
 80142f8:	f8b3 9000 	ldrh.w	r9, [r3]
 80142fc:	f7f3 fc5e 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8014300:	6803      	ldr	r3, [r0, #0]
 8014302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014304:	4798      	blx	r3
 8014306:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801430a:	463a      	mov	r2, r7
 801430c:	4631      	mov	r1, r6
 801430e:	f8cd 900c 	str.w	r9, [sp, #12]
 8014312:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014316:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801431a:	4620      	mov	r0, r4
 801431c:	9302      	str	r3, [sp, #8]
 801431e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8014322:	9301      	str	r3, [sp, #4]
 8014324:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	4643      	mov	r3, r8
 801432c:	47a8      	blx	r5
 801432e:	b007      	add	sp, #28
 8014330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014334:	240285ae 	.word	0x240285ae

08014338 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801433c:	4604      	mov	r4, r0
 801433e:	b08f      	sub	sp, #60	@ 0x3c
 8014340:	4610      	mov	r0, r2
 8014342:	460d      	mov	r5, r1
 8014344:	4691      	mov	r9, r2
 8014346:	461e      	mov	r6, r3
 8014348:	f009 febc 	bl	801e0c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801434c:	2800      	cmp	r0, #0
 801434e:	f000 809d 	beq.w	801448c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014352:	6823      	ldr	r3, [r4, #0]
 8014354:	4620      	mov	r0, r4
 8014356:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80144f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801435a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014360:	4798      	blx	r3
 8014362:	6823      	ldr	r3, [r4, #0]
 8014364:	4620      	mov	r0, r4
 8014366:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80144f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801436c:	4798      	blx	r3
 801436e:	f8bb 3000 	ldrh.w	r3, [fp]
 8014372:	4f5c      	ldr	r7, [pc, #368]	@ (80144e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014374:	9301      	str	r3, [sp, #4]
 8014376:	f8ba 3000 	ldrh.w	r3, [sl]
 801437a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801437e:	4640      	mov	r0, r8
 8014380:	9302      	str	r3, [sp, #8]
 8014382:	883b      	ldrh	r3, [r7, #0]
 8014384:	9303      	str	r3, [sp, #12]
 8014386:	4b58      	ldr	r3, [pc, #352]	@ (80144e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014388:	881a      	ldrh	r2, [r3, #0]
 801438a:	9305      	str	r3, [sp, #20]
 801438c:	9204      	str	r2, [sp, #16]
 801438e:	f009 ffe9 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014392:	8038      	strh	r0, [r7, #0]
 8014394:	4640      	mov	r0, r8
 8014396:	f00a f819 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801439a:	9b05      	ldr	r3, [sp, #20]
 801439c:	b280      	uxth	r0, r0
 801439e:	8018      	strh	r0, [r3, #0]
 80143a0:	4b52      	ldr	r3, [pc, #328]	@ (80144ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d174      	bne.n	8014492 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80143a8:	883b      	ldrh	r3, [r7, #0]
 80143aa:	f8aa 0000 	strh.w	r0, [sl]
 80143ae:	f8ab 3000 	strh.w	r3, [fp]
 80143b2:	4648      	mov	r0, r9
 80143b4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80143b8:	f009 fe84 	bl	801e0c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80143bc:	2200      	movs	r2, #0
 80143be:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80143c2:	4611      	mov	r1, r2
 80143c4:	4628      	mov	r0, r5
 80143c6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80143ca:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80143ce:	f7ef feb3 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
 80143d2:	2301      	movs	r3, #1
 80143d4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80143d8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80143dc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	dd5c      	ble.n	801449e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80143e4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	dd58      	ble.n	801449e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80143ec:	462a      	mov	r2, r5
 80143ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80143f0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80143f4:	6851      	ldr	r1, [r2, #4]
 80143f6:	c303      	stmia	r3!, {r0, r1}
 80143f8:	4631      	mov	r1, r6
 80143fa:	a80a      	add	r0, sp, #40	@ 0x28
 80143fc:	f7fe fd9c 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8014400:	4b38      	ldr	r3, [pc, #224]	@ (80144e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014402:	2100      	movs	r1, #0
 8014404:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014408:	4b37      	ldr	r3, [pc, #220]	@ (80144e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801440a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801440e:	aa0a      	add	r2, sp, #40	@ 0x28
 8014410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014414:	910c      	str	r1, [sp, #48]	@ 0x30
 8014416:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801441a:	ab08      	add	r3, sp, #32
 801441c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014420:	e883 0003 	stmia.w	r3, {r0, r1}
 8014424:	4618      	mov	r0, r3
 8014426:	a90c      	add	r1, sp, #48	@ 0x30
 8014428:	f7fe fd86 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801442c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801442e:	2b00      	cmp	r3, #0
 8014430:	d13c      	bne.n	80144ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014432:	2000      	movs	r0, #0
 8014434:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8014438:	2600      	movs	r6, #0
 801443a:	696b      	ldr	r3, [r5, #20]
 801443c:	a908      	add	r1, sp, #32
 801443e:	682a      	ldr	r2, [r5, #0]
 8014440:	4628      	mov	r0, r5
 8014442:	9305      	str	r3, [sp, #20]
 8014444:	616e      	str	r6, [r5, #20]
 8014446:	6892      	ldr	r2, [r2, #8]
 8014448:	4790      	blx	r2
 801444a:	9b05      	ldr	r3, [sp, #20]
 801444c:	4652      	mov	r2, sl
 801444e:	4649      	mov	r1, r9
 8014450:	616b      	str	r3, [r5, #20]
 8014452:	4628      	mov	r0, r5
 8014454:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8014458:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 801445c:	f7ef fe6c 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
 8014460:	9a01      	ldr	r2, [sp, #4]
 8014462:	4b23      	ldr	r3, [pc, #140]	@ (80144f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014464:	4620      	mov	r0, r4
 8014466:	801a      	strh	r2, [r3, #0]
 8014468:	9a02      	ldr	r2, [sp, #8]
 801446a:	4b22      	ldr	r3, [pc, #136]	@ (80144f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801446c:	801a      	strh	r2, [r3, #0]
 801446e:	9a03      	ldr	r2, [sp, #12]
 8014470:	4b1c      	ldr	r3, [pc, #112]	@ (80144e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014472:	801a      	strh	r2, [r3, #0]
 8014474:	4b1c      	ldr	r3, [pc, #112]	@ (80144e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014476:	9a04      	ldr	r2, [sp, #16]
 8014478:	801a      	strh	r2, [r3, #0]
 801447a:	6823      	ldr	r3, [r4, #0]
 801447c:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8014480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014482:	4798      	blx	r3
 8014484:	6823      	ldr	r3, [r4, #0]
 8014486:	4620      	mov	r0, r4
 8014488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801448a:	4798      	blx	r3
 801448c:	b00f      	add	sp, #60	@ 0x3c
 801448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014492:	883b      	ldrh	r3, [r7, #0]
 8014494:	f8ab 0000 	strh.w	r0, [fp]
 8014498:	f8aa 3000 	strh.w	r3, [sl]
 801449c:	e789      	b.n	80143b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801449e:	462a      	mov	r2, r5
 80144a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80144a2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80144a6:	6851      	ldr	r1, [r2, #4]
 80144a8:	c303      	stmia	r3!, {r0, r1}
 80144aa:	e7a9      	b.n	8014400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80144ac:	a807      	add	r0, sp, #28
 80144ae:	f00a f8cf 	bl	801e650 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80144b2:	4606      	mov	r6, r0
 80144b4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80144b6:	6803      	ldr	r3, [r0, #0]
 80144b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144ba:	4798      	blx	r3
 80144bc:	4286      	cmp	r6, r0
 80144be:	d1b8      	bne.n	8014432 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80144c0:	f7f3 fb7c 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 80144c4:	6803      	ldr	r3, [r0, #0]
 80144c6:	4606      	mov	r6, r0
 80144c8:	a807      	add	r0, sp, #28
 80144ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80144cc:	9305      	str	r3, [sp, #20]
 80144ce:	f00a f8bf 	bl	801e650 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80144d2:	9b05      	ldr	r3, [sp, #20]
 80144d4:	4601      	mov	r1, r0
 80144d6:	4630      	mov	r0, r6
 80144d8:	4798      	blx	r3
 80144da:	f080 0001 	eor.w	r0, r0, #1
 80144de:	b2c0      	uxtb	r0, r0
 80144e0:	e7a8      	b.n	8014434 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80144e2:	bf00      	nop
 80144e4:	240285a8 	.word	0x240285a8
 80144e8:	240285aa 	.word	0x240285aa
 80144ec:	240285ac 	.word	0x240285ac
 80144f0:	240285ae 	.word	0x240285ae
 80144f4:	240285b0 	.word	0x240285b0

080144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80144f8:	4b07      	ldr	r3, [pc, #28]	@ (8014518 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80144fa:	b510      	push	{r4, lr}
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	4604      	mov	r4, r0
 8014500:	b13b      	cbz	r3, 8014512 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014502:	6803      	ldr	r3, [r0, #0]
 8014504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014506:	4798      	blx	r3
 8014508:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801450a:	4283      	cmp	r3, r0
 801450c:	d101      	bne.n	8014512 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801450e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8014510:	bd10      	pop	{r4, pc}
 8014512:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014514:	e7fc      	b.n	8014510 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014516:	bf00      	nop
 8014518:	240285b2 	.word	0x240285b2

0801451c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801451c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014520:	461d      	mov	r5, r3
 8014522:	b08a      	sub	sp, #40	@ 0x28
 8014524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014528:	4690      	mov	r8, r2
 801452a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801452e:	2400      	movs	r4, #0
 8014530:	4607      	mov	r7, r0
 8014532:	fb06 8505 	mla	r5, r6, r5, r8
 8014536:	9404      	str	r4, [sp, #16]
 8014538:	f88d 4020 	strb.w	r4, [sp, #32]
 801453c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014540:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014544:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014548:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801454c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014550:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014554:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014558:	f7ff ffce 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801455c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014566:	a901      	add	r1, sp, #4
 8014568:	9505      	str	r5, [sp, #20]
 801456a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801456e:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8014572:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014576:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801457a:	6803      	ldr	r3, [r0, #0]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	4798      	blx	r3
 8014580:	b00a      	add	sp, #40	@ 0x28
 8014582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014586 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801458a:	b08b      	sub	sp, #44	@ 0x2c
 801458c:	2400      	movs	r4, #0
 801458e:	4691      	mov	r9, r2
 8014590:	461d      	mov	r5, r3
 8014592:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8014596:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801459a:	4688      	mov	r8, r1
 801459c:	4607      	mov	r7, r0
 801459e:	9404      	str	r4, [sp, #16]
 80145a0:	fb06 9505 	mla	r5, r6, r5, r9
 80145a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80145a8:	f7ff ffa6 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80145ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80145b0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80145ba:	a901      	add	r1, sp, #4
 80145bc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80145c0:	9505      	str	r5, [sp, #20]
 80145c2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80145c6:	f8ad 401c 	strh.w	r4, [sp, #28]
 80145ca:	f8ad 601e 	strh.w	r6, [sp, #30]
 80145ce:	f8cd 8010 	str.w	r8, [sp, #16]
 80145d2:	f8ad 4020 	strh.w	r4, [sp, #32]
 80145d6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80145da:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80145de:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80145e2:	6803      	ldr	r3, [r0, #0]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	4798      	blx	r3
 80145e8:	b00b      	add	sp, #44	@ 0x2c
 80145ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080145f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80145f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f4:	b08a      	sub	sp, #40	@ 0x28
 80145f6:	4698      	mov	r8, r3
 80145f8:	2300      	movs	r3, #0
 80145fa:	4606      	mov	r6, r0
 80145fc:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8014600:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8014604:	2d0b      	cmp	r5, #11
 8014606:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801460a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801460e:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8014612:	9304      	str	r3, [sp, #16]
 8014614:	d137      	bne.n	8014686 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8014616:	2380      	movs	r3, #128	@ 0x80
 8014618:	f88d 0020 	strb.w	r0, [sp, #32]
 801461c:	4630      	mov	r0, r6
 801461e:	9203      	str	r2, [sp, #12]
 8014620:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014624:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014628:	f8ad 3018 	strh.w	r3, [sp, #24]
 801462c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014630:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014634:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014638:	f8ad 301c 	strh.w	r3, [sp, #28]
 801463c:	f7ff ff5c 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014640:	2c0b      	cmp	r4, #11
 8014642:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8014646:	f8ad 701e 	strh.w	r7, [sp, #30]
 801464a:	bf94      	ite	ls
 801464c:	4b19      	ldrls	r3, [pc, #100]	@ (80146b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801464e:	2100      	movhi	r1, #0
 8014650:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8014654:	bf98      	it	ls
 8014656:	5d19      	ldrbls	r1, [r3, r4]
 8014658:	fb02 8307 	mla	r3, r2, r7, r8
 801465c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014660:	10c9      	asrs	r1, r1, #3
 8014662:	fb01 0003 	mla	r0, r1, r3, r0
 8014666:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801466a:	a901      	add	r1, sp, #4
 801466c:	9005      	str	r0, [sp, #20]
 801466e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8014672:	2300      	movs	r3, #0
 8014674:	6870      	ldr	r0, [r6, #4]
 8014676:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801467a:	6803      	ldr	r3, [r0, #0]
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	4798      	blx	r3
 8014680:	b00a      	add	sp, #40	@ 0x28
 8014682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014686:	2d02      	cmp	r5, #2
 8014688:	d109      	bne.n	801469e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801468a:	28ff      	cmp	r0, #255	@ 0xff
 801468c:	d105      	bne.n	801469a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801468e:	f1bc 0f00 	cmp.w	ip, #0
 8014692:	bf14      	ite	ne
 8014694:	2340      	movne	r3, #64	@ 0x40
 8014696:	2320      	moveq	r3, #32
 8014698:	e7be      	b.n	8014618 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801469a:	2340      	movs	r3, #64	@ 0x40
 801469c:	e7bc      	b.n	8014618 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801469e:	28ff      	cmp	r0, #255	@ 0xff
 80146a0:	d105      	bne.n	80146ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80146a2:	f1bc 0f00 	cmp.w	ip, #0
 80146a6:	bf14      	ite	ne
 80146a8:	2304      	movne	r3, #4
 80146aa:	2301      	moveq	r3, #1
 80146ac:	e7b4      	b.n	8014618 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80146ae:	2304      	movs	r3, #4
 80146b0:	e7b2      	b.n	8014618 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80146b2:	bf00      	nop
 80146b4:	0802dd38 	.word	0x0802dd38

080146b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80146b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146bc:	b08b      	sub	sp, #44	@ 0x2c
 80146be:	461d      	mov	r5, r3
 80146c0:	2400      	movs	r4, #0
 80146c2:	4688      	mov	r8, r1
 80146c4:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80146c8:	4693      	mov	fp, r2
 80146ca:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80146ce:	4607      	mov	r7, r0
 80146d0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80146d4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80146d8:	9404      	str	r4, [sp, #16]
 80146da:	bf14      	ite	ne
 80146dc:	2308      	movne	r3, #8
 80146de:	2302      	moveq	r3, #2
 80146e0:	fb05 b50a 	mla	r5, r5, sl, fp
 80146e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146e8:	f7ff ff06 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80146ec:	2e0b      	cmp	r6, #11
 80146ee:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80146f2:	a901      	add	r1, sp, #4
 80146f4:	bf98      	it	ls
 80146f6:	4b13      	ldrls	r3, [pc, #76]	@ (8014744 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80146f8:	f8ad a01e 	strh.w	sl, [sp, #30]
 80146fc:	bf98      	it	ls
 80146fe:	5d9c      	ldrbls	r4, [r3, r6]
 8014700:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014704:	10e4      	asrs	r4, r4, #3
 8014706:	f8cd 8010 	str.w	r8, [sp, #16]
 801470a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801470e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8014712:	fb04 0405 	mla	r4, r4, r5, r0
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f8ad 301a 	strh.w	r3, [sp, #26]
 801471c:	2300      	movs	r3, #0
 801471e:	9405      	str	r4, [sp, #20]
 8014720:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014724:	f88d 9020 	strb.w	r9, [sp, #32]
 8014728:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 801472c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014730:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8014734:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8014738:	6803      	ldr	r3, [r0, #0]
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	4798      	blx	r3
 801473e:	b00b      	add	sp, #44	@ 0x2c
 8014740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014744:	0802dd38 	.word	0x0802dd38

08014748 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801474c:	461e      	mov	r6, r3
 801474e:	4b0a      	ldr	r3, [pc, #40]	@ (8014778 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014750:	460f      	mov	r7, r1
 8014752:	4690      	mov	r8, r2
 8014754:	881d      	ldrh	r5, [r3, #0]
 8014756:	f7f3 fa31 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 801475a:	6803      	ldr	r3, [r0, #0]
 801475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801475e:	4798      	blx	r3
 8014760:	280b      	cmp	r0, #11
 8014762:	bf96      	itet	ls
 8014764:	4b05      	ldrls	r3, [pc, #20]	@ (801477c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014766:	2400      	movhi	r4, #0
 8014768:	5c1c      	ldrbls	r4, [r3, r0]
 801476a:	fb08 7005 	mla	r0, r8, r5, r7
 801476e:	10e4      	asrs	r4, r4, #3
 8014770:	fb04 6000 	mla	r0, r4, r0, r6
 8014774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014778:	240285ae 	.word	0x240285ae
 801477c:	0802dd38 	.word	0x0802dd38

08014780 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014782:	b08b      	sub	sp, #44	@ 0x2c
 8014784:	461f      	mov	r7, r3
 8014786:	4604      	mov	r4, r0
 8014788:	4616      	mov	r6, r2
 801478a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801478e:	2500      	movs	r5, #0
 8014790:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014794:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014798:	9504      	str	r5, [sp, #16]
 801479a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801479e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80147a2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80147a6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80147aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80147ae:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80147b2:	f88d 3020 	strb.w	r3, [sp, #32]
 80147b6:	f7ff fe9f 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80147ba:	463a      	mov	r2, r7
 80147bc:	4631      	mov	r1, r6
 80147be:	4603      	mov	r3, r0
 80147c0:	4620      	mov	r0, r4
 80147c2:	f7ff ffc1 	bl	8014748 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80147c6:	4b0e      	ldr	r3, [pc, #56]	@ (8014800 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80147c8:	9005      	str	r0, [sp, #20]
 80147ca:	881b      	ldrh	r3, [r3, #0]
 80147cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80147d0:	f7f3 f9f4 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 80147d4:	6803      	ldr	r3, [r0, #0]
 80147d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147d8:	4798      	blx	r3
 80147da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80147dc:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80147e0:	a901      	add	r1, sp, #4
 80147e2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80147e6:	9304      	str	r3, [sp, #16]
 80147e8:	6860      	ldr	r0, [r4, #4]
 80147ea:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80147ee:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80147f2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80147f6:	6803      	ldr	r3, [r0, #0]
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	4798      	blx	r3
 80147fc:	b00b      	add	sp, #44	@ 0x2c
 80147fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014800:	240285ae 	.word	0x240285ae

08014804 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014806:	b08d      	sub	sp, #52	@ 0x34
 8014808:	2501      	movs	r5, #1
 801480a:	4604      	mov	r4, r0
 801480c:	466b      	mov	r3, sp
 801480e:	9503      	str	r5, [sp, #12]
 8014810:	e883 0006 	stmia.w	r3, {r1, r2}
 8014814:	2300      	movs	r3, #0
 8014816:	f8bd 6000 	ldrh.w	r6, [sp]
 801481a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801481e:	9306      	str	r3, [sp, #24]
 8014820:	6803      	ldr	r3, [r0, #0]
 8014822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014824:	4798      	blx	r3
 8014826:	463a      	mov	r2, r7
 8014828:	4631      	mov	r1, r6
 801482a:	4603      	mov	r3, r0
 801482c:	4620      	mov	r0, r4
 801482e:	f7ff ff8b 	bl	8014748 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014832:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014834:	9004      	str	r0, [sp, #16]
 8014836:	9307      	str	r3, [sp, #28]
 8014838:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801483c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014840:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014844:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8014848:	4b0e      	ldr	r3, [pc, #56]	@ (8014884 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801484a:	881b      	ldrh	r3, [r3, #0]
 801484c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8014850:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8014854:	f7f3 f9b2 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8014858:	6803      	ldr	r3, [r0, #0]
 801485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801485c:	4798      	blx	r3
 801485e:	23ff      	movs	r3, #255	@ 0xff
 8014860:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8014864:	a903      	add	r1, sp, #12
 8014866:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801486a:	6860      	ldr	r0, [r4, #4]
 801486c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8014870:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8014874:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8014878:	6803      	ldr	r3, [r0, #0]
 801487a:	685b      	ldr	r3, [r3, #4]
 801487c:	4798      	blx	r3
 801487e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8014880:	b00d      	add	sp, #52	@ 0x34
 8014882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014884:	240285ae 	.word	0x240285ae

08014888 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801488c:	b08c      	sub	sp, #48	@ 0x30
 801488e:	461e      	mov	r6, r3
 8014890:	2300      	movs	r3, #0
 8014892:	4604      	mov	r4, r0
 8014894:	466d      	mov	r5, sp
 8014896:	9306      	str	r3, [sp, #24]
 8014898:	6803      	ldr	r3, [r0, #0]
 801489a:	e885 0006 	stmia.w	r5, {r1, r2}
 801489e:	2501      	movs	r5, #1
 80148a0:	f8bd 7000 	ldrh.w	r7, [sp]
 80148a4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80148a8:	9503      	str	r5, [sp, #12]
 80148aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148ac:	4798      	blx	r3
 80148ae:	4642      	mov	r2, r8
 80148b0:	4639      	mov	r1, r7
 80148b2:	4603      	mov	r3, r0
 80148b4:	4620      	mov	r0, r4
 80148b6:	f7ff ff47 	bl	8014748 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80148ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80148be:	9004      	str	r0, [sp, #16]
 80148c0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80148c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80148c8:	9607      	str	r6, [sp, #28]
 80148ca:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80148ce:	4b10      	ldr	r3, [pc, #64]	@ (8014910 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80148d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80148d8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80148dc:	f7f3 f96e 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 80148e0:	6803      	ldr	r3, [r0, #0]
 80148e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148e4:	4798      	blx	r3
 80148e6:	23ff      	movs	r3, #255	@ 0xff
 80148e8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80148ec:	a903      	add	r1, sp, #12
 80148ee:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80148f2:	6860      	ldr	r0, [r4, #4]
 80148f4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80148f8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80148fc:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8014900:	6803      	ldr	r3, [r0, #0]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	4798      	blx	r3
 8014906:	4630      	mov	r0, r6
 8014908:	b00c      	add	sp, #48	@ 0x30
 801490a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801490e:	bf00      	nop
 8014910:	240285ae 	.word	0x240285ae

08014914 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8014914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014916:	b085      	sub	sp, #20
 8014918:	4605      	mov	r5, r0
 801491a:	ac02      	add	r4, sp, #8
 801491c:	e884 0006 	stmia.w	r4, {r1, r2}
 8014920:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014924:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8014928:	f7ff fde6 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801492c:	4631      	mov	r1, r6
 801492e:	4603      	mov	r3, r0
 8014930:	463a      	mov	r2, r7
 8014932:	4628      	mov	r0, r5
 8014934:	f7ff ff08 	bl	8014748 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014938:	4a05      	ldr	r2, [pc, #20]	@ (8014950 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801493a:	682b      	ldr	r3, [r5, #0]
 801493c:	8812      	ldrh	r2, [r2, #0]
 801493e:	9200      	str	r2, [sp, #0]
 8014940:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8014942:	4603      	mov	r3, r0
 8014944:	4628      	mov	r0, r5
 8014946:	e894 0006 	ldmia.w	r4, {r1, r2}
 801494a:	47b0      	blx	r6
 801494c:	b005      	add	sp, #20
 801494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014950:	240285ae 	.word	0x240285ae

08014954 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014954:	b570      	push	{r4, r5, r6, lr}
 8014956:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801495a:	4604      	mov	r4, r0
 801495c:	b19b      	cbz	r3, 8014986 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801495e:	2002      	movs	r0, #2
 8014960:	f7ed fa3a 	bl	8001dd8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014964:	2300      	movs	r3, #0
 8014966:	4620      	mov	r0, r4
 8014968:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801496c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8014970:	6823      	ldr	r3, [r4, #0]
 8014972:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8014976:	f7ff fdbf 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801497a:	4601      	mov	r1, r0
 801497c:	4620      	mov	r0, r4
 801497e:	462b      	mov	r3, r5
 8014980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014984:	4718      	bx	r3
 8014986:	bd70      	pop	{r4, r5, r6, pc}

08014988 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8014988:	b570      	push	{r4, r5, r6, lr}
 801498a:	4605      	mov	r5, r0
 801498c:	460c      	mov	r4, r1
 801498e:	2003      	movs	r0, #3
 8014990:	b149      	cbz	r1, 80149a6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8014992:	f7ed f9c1 	bl	8001d18 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014996:	6928      	ldr	r0, [r5, #16]
 8014998:	b168      	cbz	r0, 80149b6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801499a:	6803      	ldr	r3, [r0, #0]
 801499c:	2101      	movs	r1, #1
 801499e:	695b      	ldr	r3, [r3, #20]
 80149a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149a4:	4718      	bx	r3
 80149a6:	f7ed f9e7 	bl	8001d78 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80149aa:	6928      	ldr	r0, [r5, #16]
 80149ac:	b118      	cbz	r0, 80149b6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80149ae:	6803      	ldr	r3, [r0, #0]
 80149b0:	4621      	mov	r1, r4
 80149b2:	695b      	ldr	r3, [r3, #20]
 80149b4:	e7f4      	b.n	80149a0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80149b6:	bd70      	pop	{r4, r5, r6, pc}

080149b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80149be:	4604      	mov	r4, r0
 80149c0:	460d      	mov	r5, r1
 80149c2:	428b      	cmp	r3, r1
 80149c4:	d006      	beq.n	80149d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80149c6:	6803      	ldr	r3, [r0, #0]
 80149c8:	b929      	cbnz	r1, 80149d6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80149ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80149ce:	4798      	blx	r3
 80149d0:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80149d4:	bd38      	pop	{r3, r4, r5, pc}
 80149d6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80149da:	e7f8      	b.n	80149ce <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080149dc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80149dc:	4b0d      	ldr	r3, [pc, #52]	@ (8014a14 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80149de:	b510      	push	{r4, lr}
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	4604      	mov	r4, r0
 80149e4:	b95b      	cbnz	r3, 80149fe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80149e6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80149ea:	2b02      	cmp	r3, #2
 80149ec:	d007      	beq.n	80149fe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80149ee:	6840      	ldr	r0, [r0, #4]
 80149f0:	f000 f91a 	bl	8014c28 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80149f4:	b118      	cbz	r0, 80149fe <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80149f6:	6862      	ldr	r2, [r4, #4]
 80149f8:	7a53      	ldrb	r3, [r2, #9]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d0fc      	beq.n	80149f8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80149fe:	f7ee f9f5 	bl	8002dec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014a02:	4620      	mov	r0, r4
 8014a04:	2100      	movs	r1, #0
 8014a06:	f7ff ffd7 	bl	80149b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f7ff fd74 	bl	80144f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a10:	bd10      	pop	{r4, pc}
 8014a12:	bf00      	nop
 8014a14:	240285b2 	.word	0x240285b2

08014a18 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8014a18:	b570      	push	{r4, r5, r6, lr}
 8014a1a:	4604      	mov	r4, r0
 8014a1c:	6803      	ldr	r3, [r0, #0]
 8014a1e:	b919      	cbnz	r1, 8014a28 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8014a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a26:	4718      	bx	r3
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8014a2e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8014a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a34:	4798      	blx	r3
 8014a36:	6863      	ldr	r3, [r4, #4]
 8014a38:	2101      	movs	r1, #1
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	7299      	strb	r1, [r3, #10]
 8014a40:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8014a44:	f7ff ffb8 	bl	80149b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014a48:	4628      	mov	r0, r5
 8014a4a:	bd70      	pop	{r4, r5, r6, pc}

08014a4c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014a4c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014a50:	1a13      	subs	r3, r2, r0
 8014a52:	4258      	negs	r0, r3
 8014a54:	4158      	adcs	r0, r3
 8014a56:	4770      	bx	lr

08014a58 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014a58:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014a5c:	1a9b      	subs	r3, r3, r2
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	bfdc      	itt	le
 8014a62:	6882      	ldrle	r2, [r0, #8]
 8014a64:	189b      	addle	r3, r3, r2
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	bfcc      	ite	gt
 8014a6a:	2000      	movgt	r0, #0
 8014a6c:	2001      	movle	r0, #1
 8014a6e:	4770      	bx	lr

08014a70 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014a70:	6902      	ldr	r2, [r0, #16]
 8014a72:	6843      	ldr	r3, [r0, #4]
 8014a74:	2024      	movs	r0, #36	@ 0x24
 8014a76:	fb00 3002 	mla	r0, r0, r2, r3
 8014a7a:	4770      	bx	lr

08014a7c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014a7c:	6803      	ldr	r3, [r0, #0]
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	4718      	bx	r3

08014a82 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014a82:	2301      	movs	r3, #1
 8014a84:	b570      	push	{r4, r5, r6, lr}
 8014a86:	7203      	strb	r3, [r0, #8]
 8014a88:	4604      	mov	r4, r0
 8014a8a:	6840      	ldr	r0, [r0, #4]
 8014a8c:	6803      	ldr	r3, [r0, #0]
 8014a8e:	699b      	ldr	r3, [r3, #24]
 8014a90:	4798      	blx	r3
 8014a92:	6803      	ldr	r3, [r0, #0]
 8014a94:	4605      	mov	r5, r0
 8014a96:	2b40      	cmp	r3, #64	@ 0x40
 8014a98:	d00c      	beq.n	8014ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014a9a:	d810      	bhi.n	8014abe <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014a9c:	2b04      	cmp	r3, #4
 8014a9e:	d01d      	beq.n	8014adc <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014aa0:	d804      	bhi.n	8014aac <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d006      	beq.n	8014ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014aa6:	2b02      	cmp	r3, #2
 8014aa8:	d02c      	beq.n	8014b04 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014aaa:	bd70      	pop	{r4, r5, r6, pc}
 8014aac:	2b08      	cmp	r3, #8
 8014aae:	d01d      	beq.n	8014aec <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014ab0:	2b20      	cmp	r3, #32
 8014ab2:	d1fa      	bne.n	8014aaa <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014ab4:	6823      	ldr	r3, [r4, #0]
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014aba:	4798      	blx	r3
 8014abc:	e013      	b.n	8014ae6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ac2:	d0f7      	beq.n	8014ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014ac4:	d804      	bhi.n	8014ad0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014ac6:	2b80      	cmp	r3, #128	@ 0x80
 8014ac8:	d0f4      	beq.n	8014ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014ace:	e7f0      	b.n	8014ab2 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014ad4:	d0ee      	beq.n	8014ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014ad6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014ada:	e7e5      	b.n	8014aa8 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014adc:	6823      	ldr	r3, [r4, #0]
 8014ade:	7f01      	ldrb	r1, [r0, #28]
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ae4:	4798      	blx	r3
 8014ae6:	6823      	ldr	r3, [r4, #0]
 8014ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014aea:	e006      	b.n	8014afa <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014aec:	6823      	ldr	r3, [r4, #0]
 8014aee:	7f01      	ldrb	r1, [r0, #28]
 8014af0:	4620      	mov	r0, r4
 8014af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014af4:	4798      	blx	r3
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014afa:	4629      	mov	r1, r5
 8014afc:	4620      	mov	r0, r4
 8014afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b02:	4718      	bx	r3
 8014b04:	6823      	ldr	r3, [r4, #0]
 8014b06:	4620      	mov	r0, r4
 8014b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b0a:	4798      	blx	r3
 8014b0c:	e7f3      	b.n	8014af6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014b0e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014b0e:	4770      	bx	lr

08014b10 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014b10:	4770      	bx	lr

08014b12 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8014b12:	4770      	bx	lr

08014b14 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014b14:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014b18:	b510      	push	{r4, lr}
 8014b1a:	1ad2      	subs	r2, r2, r3
 8014b1c:	2a00      	cmp	r2, #0
 8014b1e:	bfdc      	itt	le
 8014b20:	6884      	ldrle	r4, [r0, #8]
 8014b22:	1912      	addle	r2, r2, r4
 8014b24:	2a01      	cmp	r2, #1
 8014b26:	dd16      	ble.n	8014b56 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014b28:	6842      	ldr	r2, [r0, #4]
 8014b2a:	2424      	movs	r4, #36	@ 0x24
 8014b2c:	fb04 2303 	mla	r3, r4, r3, r2
 8014b30:	f101 0220 	add.w	r2, r1, #32
 8014b34:	f851 4b04 	ldr.w	r4, [r1], #4
 8014b38:	4291      	cmp	r1, r2
 8014b3a:	f843 4b04 	str.w	r4, [r3], #4
 8014b3e:	d1f9      	bne.n	8014b34 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014b40:	780a      	ldrb	r2, [r1, #0]
 8014b42:	701a      	strb	r2, [r3, #0]
 8014b44:	68c3      	ldr	r3, [r0, #12]
 8014b46:	6882      	ldr	r2, [r0, #8]
 8014b48:	f3bf 8f5b 	dmb	ish
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	bfd8      	it	le
 8014b52:	1a9b      	suble	r3, r3, r2
 8014b54:	60c3      	str	r3, [r0, #12]
 8014b56:	bd10      	pop	{r4, pc}

08014b58 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014b58:	6903      	ldr	r3, [r0, #16]
 8014b5a:	6882      	ldr	r2, [r0, #8]
 8014b5c:	f3bf 8f5b 	dmb	ish
 8014b60:	3301      	adds	r3, #1
 8014b62:	429a      	cmp	r2, r3
 8014b64:	bfd8      	it	le
 8014b66:	1a9b      	suble	r3, r3, r2
 8014b68:	6103      	str	r3, [r0, #16]
 8014b6a:	4770      	bx	lr

08014b6c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	4604      	mov	r4, r0
 8014b70:	460e      	mov	r6, r1
 8014b72:	6860      	ldr	r0, [r4, #4]
 8014b74:	6803      	ldr	r3, [r0, #0]
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	4798      	blx	r3
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d1f9      	bne.n	8014b72 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8014bb4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014b80:	6828      	ldr	r0, [r5, #0]
 8014b82:	6803      	ldr	r3, [r0, #0]
 8014b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b86:	4798      	blx	r3
 8014b88:	f7ee f93e 	bl	8002e08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014b8c:	6828      	ldr	r0, [r5, #0]
 8014b8e:	2101      	movs	r1, #1
 8014b90:	f7ff ff12 	bl	80149b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014b94:	6860      	ldr	r0, [r4, #4]
 8014b96:	4631      	mov	r1, r6
 8014b98:	6803      	ldr	r3, [r0, #0]
 8014b9a:	689b      	ldr	r3, [r3, #8]
 8014b9c:	4798      	blx	r3
 8014b9e:	6823      	ldr	r3, [r4, #0]
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ba4:	4798      	blx	r3
 8014ba6:	6828      	ldr	r0, [r5, #0]
 8014ba8:	6803      	ldr	r3, [r0, #0]
 8014baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014bb0:	4718      	bx	r3
 8014bb2:	bf00      	nop
 8014bb4:	240285b4 	.word	0x240285b4

08014bb8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014bb8:	b508      	push	{r3, lr}
 8014bba:	f7ee f917 	bl	8002dec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014bc2:	f7ee b91b 	b.w	8002dfc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014bc6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014bc6:	b510      	push	{r4, lr}
 8014bc8:	4604      	mov	r4, r0
 8014bca:	2114      	movs	r1, #20
 8014bcc:	f014 f9e4 	bl	8028f98 <_ZdlPvj>
 8014bd0:	4620      	mov	r0, r4
 8014bd2:	bd10      	pop	{r4, pc}

08014bd4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014bd4:	b570      	push	{r4, r5, r6, lr}
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	6840      	ldr	r0, [r0, #4]
 8014bda:	6803      	ldr	r3, [r0, #0]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	4798      	blx	r3
 8014be0:	4605      	mov	r5, r0
 8014be2:	b930      	cbnz	r0, 8014bf2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014be4:	7a23      	ldrb	r3, [r4, #8]
 8014be6:	b123      	cbz	r3, 8014bf2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014be8:	6860      	ldr	r0, [r4, #4]
 8014bea:	6803      	ldr	r3, [r0, #0]
 8014bec:	695b      	ldr	r3, [r3, #20]
 8014bee:	4798      	blx	r3
 8014bf0:	7225      	strb	r5, [r4, #8]
 8014bf2:	6860      	ldr	r0, [r4, #4]
 8014bf4:	6803      	ldr	r3, [r0, #0]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	4798      	blx	r3
 8014bfa:	b928      	cbnz	r0, 8014c08 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014bfc:	6823      	ldr	r3, [r4, #0]
 8014bfe:	4620      	mov	r0, r4
 8014c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c06:	4718      	bx	r3
 8014c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c0c:	f7ee b904 	b.w	8002e18 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08014c10 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014c10:	b510      	push	{r4, lr}
 8014c12:	6082      	str	r2, [r0, #8]
 8014c14:	2200      	movs	r2, #0
 8014c16:	4c03      	ldr	r4, [pc, #12]	@ (8014c24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014c18:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014c1c:	e9c0 4100 	strd	r4, r1, [r0]
 8014c20:	bd10      	pop	{r4, pc}
 8014c22:	bf00      	nop
 8014c24:	0802dd4c 	.word	0x0802dd4c

08014c28 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014c28:	6840      	ldr	r0, [r0, #4]
 8014c2a:	6803      	ldr	r3, [r0, #0]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	4718      	bx	r3

08014c30 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8014c30:	2300      	movs	r3, #0
 8014c32:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8014c34:	8503      	strh	r3, [r0, #40]	@ 0x28
 8014c36:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8014c38:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014c3a:	6980      	ldr	r0, [r0, #24]
 8014c3c:	b110      	cbz	r0, 8014c44 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8014c3e:	6803      	ldr	r3, [r0, #0]
 8014c40:	691b      	ldr	r3, [r3, #16]
 8014c42:	4718      	bx	r3
 8014c44:	4770      	bx	lr

08014c46 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8014c46:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8014c4a:	4770      	bx	lr

08014c4c <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	0e0b      	lsrs	r3, r1, #24
 8014c50:	4604      	mov	r4, r0
 8014c52:	460d      	mov	r5, r1
 8014c54:	7783      	strb	r3, [r0, #30]
 8014c56:	6803      	ldr	r3, [r0, #0]
 8014c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c5a:	4798      	blx	r3
 8014c5c:	6803      	ldr	r3, [r0, #0]
 8014c5e:	4629      	mov	r1, r5
 8014c60:	689b      	ldr	r3, [r3, #8]
 8014c62:	4798      	blx	r3
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	4620      	mov	r0, r4
 8014c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c6a:	4798      	blx	r3
 8014c6c:	61a0      	str	r0, [r4, #24]
 8014c6e:	bd38      	pop	{r3, r4, r5, pc}

08014c70 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8014c70:	7741      	strb	r1, [r0, #29]
 8014c72:	4770      	bx	lr

08014c74 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8014c74:	b530      	push	{r4, r5, lr}
 8014c76:	460d      	mov	r5, r1
 8014c78:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8014c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c84:	682b      	ldr	r3, [r5, #0]
 8014c86:	6023      	str	r3, [r4, #0]
 8014c88:	bd30      	pop	{r4, r5, pc}

08014c8a <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8014c8a:	b538      	push	{r3, r4, r5, lr}
 8014c8c:	4604      	mov	r4, r0
 8014c8e:	1d03      	adds	r3, r0, #4
 8014c90:	6808      	ldr	r0, [r1, #0]
 8014c92:	2500      	movs	r5, #0
 8014c94:	6849      	ldr	r1, [r1, #4]
 8014c96:	c303      	stmia	r3!, {r0, r1}
 8014c98:	6813      	ldr	r3, [r2, #0]
 8014c9a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8014c9e:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8014ca2:	6853      	ldr	r3, [r2, #4]
 8014ca4:	61a5      	str	r5, [r4, #24]
 8014ca6:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8014caa:	f007 f97b 	bl	801bfa4 <_ZN8touchgfx9Matrix3x35resetEv>
 8014cae:	23ff      	movs	r3, #255	@ 0xff
 8014cb0:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8014cb4:	7763      	strb	r3, [r4, #29]
 8014cb6:	77a3      	strb	r3, [r4, #30]
 8014cb8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8014cbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8014cbe:	2301      	movs	r3, #1
 8014cc0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8014cc4:	bd38      	pop	{r3, r4, r5, pc}
	...

08014cc8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8014cc8:	ee70 7a41 	vsub.f32	s15, s0, s2
 8014ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cd4:	4605      	mov	r5, r0
 8014cd6:	ed2d 8b0a 	vpush	{d8-d12}
 8014cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cde:	b086      	sub	sp, #24
 8014ce0:	eeb0 ba40 	vmov.f32	s22, s0
 8014ce4:	6802      	ldr	r2, [r0, #0]
 8014ce6:	eef0 ba60 	vmov.f32	s23, s1
 8014cea:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8014cee:	eef0 aa41 	vmov.f32	s21, s2
 8014cf2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8014cf4:	eeb0 aa61 	vmov.f32	s20, s3
 8014cf8:	eeb0 ca42 	vmov.f32	s24, s4
 8014cfc:	eef0 ca62 	vmov.f32	s25, s5
 8014d00:	d112      	bne.n	8014d28 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8014d02:	ee70 7ae1 	vsub.f32	s15, s1, s3
 8014d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0e:	d10b      	bne.n	8014d28 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8014d10:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8014d14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8014d16:	3901      	subs	r1, #1
 8014d18:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014d1c:	b006      	add	sp, #24
 8014d1e:	ecbd 8b0a 	vpop	{d8-d12}
 8014d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d26:	4710      	bx	r2
 8014d28:	23ff      	movs	r3, #255	@ 0xff
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8014d30:	77ab      	strb	r3, [r5, #30]
 8014d32:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8014d34:	4798      	blx	r3
 8014d36:	eeb0 0a4b 	vmov.f32	s0, s22
 8014d3a:	eef0 0a6b 	vmov.f32	s1, s23
 8014d3e:	4604      	mov	r4, r0
 8014d40:	4640      	mov	r0, r8
 8014d42:	f007 f9de 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014d46:	eef0 8a40 	vmov.f32	s17, s0
 8014d4a:	ed8d 0a00 	vstr	s0, [sp]
 8014d4e:	eeb0 0a6a 	vmov.f32	s0, s21
 8014d52:	eef0 9a60 	vmov.f32	s19, s1
 8014d56:	edcd 0a01 	vstr	s1, [sp, #4]
 8014d5a:	4640      	mov	r0, r8
 8014d5c:	eef0 0a4a 	vmov.f32	s1, s20
 8014d60:	f007 f9cf 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014d64:	eef4 8a40 	vcmp.f32	s17, s0
 8014d68:	eeb0 8a40 	vmov.f32	s16, s0
 8014d6c:	ed8d 0a02 	vstr	s0, [sp, #8]
 8014d70:	eeb0 9a60 	vmov.f32	s18, s1
 8014d74:	edcd 0a03 	vstr	s1, [sp, #12]
 8014d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d7c:	eef4 9a60 	vcmp.f32	s19, s1
 8014d80:	bf0c      	ite	eq
 8014d82:	2301      	moveq	r3, #1
 8014d84:	2300      	movne	r3, #0
 8014d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8a:	eef4 8a40 	vcmp.f32	s17, s0
 8014d8e:	7463      	strb	r3, [r4, #17]
 8014d90:	bf0c      	ite	eq
 8014d92:	2301      	moveq	r3, #1
 8014d94:	2300      	movne	r3, #0
 8014d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d9a:	74a3      	strb	r3, [r4, #18]
 8014d9c:	d024      	beq.n	8014de8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8014d9e:	eef4 9a60 	vcmp.f32	s19, s1
 8014da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014da6:	d01f      	beq.n	8014de8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8014da8:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8014dac:	4640      	mov	r0, r8
 8014dae:	ee7a aacb 	vsub.f32	s21, s21, s22
 8014db2:	eeb0 0a4b 	vmov.f32	s0, s22
 8014db6:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8014dba:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8014dbe:	eef0 0a6b 	vmov.f32	s1, s23
 8014dc2:	eea7 0acc 	vfms.f32	s0, s15, s24
 8014dc6:	eeec 0a87 	vfma.f32	s1, s25, s14
 8014dca:	f007 f99a 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014dce:	ed8d 0a04 	vstr	s0, [sp, #16]
 8014dd2:	ee30 0a68 	vsub.f32	s0, s0, s17
 8014dd6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014dda:	edcd 0a05 	vstr	s1, [sp, #20]
 8014dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de2:	d121      	bne.n	8014e28 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 8014de4:	2301      	movs	r3, #1
 8014de6:	74a3      	strb	r3, [r4, #18]
 8014de8:	7c63      	ldrb	r3, [r4, #17]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d051      	beq.n	8014e92 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 8014dee:	ee39 7a69 	vsub.f32	s14, s18, s19
 8014df2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014ee8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8014df6:	eef4 9ac9 	vcmpe.f32	s19, s18
 8014dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e02:	edc4 7a08 	vstr	s15, [r4, #32]
 8014e06:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8014e0a:	ee17 3a90 	vmov	r3, s15
 8014e0e:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8014e12:	b21a      	sxth	r2, r3
 8014e14:	ee17 3a90 	vmov	r3, s15
 8014e18:	bf48      	it	mi
 8014e1a:	8122      	strhmi	r2, [r4, #8]
 8014e1c:	b21b      	sxth	r3, r3
 8014e1e:	bf56      	itet	pl
 8014e20:	80e2      	strhpl	r2, [r4, #6]
 8014e22:	80e3      	strhmi	r3, [r4, #6]
 8014e24:	8123      	strhpl	r3, [r4, #8]
 8014e26:	e02c      	b.n	8014e82 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8014e28:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8014e2c:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8014e30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014e34:	edc4 7a05 	vstr	s15, [r4, #20]
 8014e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e3c:	d102      	bne.n	8014e44 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8014e3e:	2301      	movs	r3, #1
 8014e40:	7463      	strb	r3, [r4, #17]
 8014e42:	e7d1      	b.n	8014de8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8014e44:	eeb0 7a69 	vmov.f32	s14, s19
 8014e48:	ee39 9a69 	vsub.f32	s18, s18, s19
 8014e4c:	ee38 8a68 	vsub.f32	s16, s16, s17
 8014e50:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8014e54:	ed84 7a06 	vstr	s14, [r4, #24]
 8014e58:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8014e5c:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014e60:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8014eec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8014e64:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014e68:	ed84 8a07 	vstr	s16, [r4, #28]
 8014e6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e74:	edc4 7a08 	vstr	s15, [r4, #32]
 8014e78:	d503      	bpl.n	8014e82 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8014e7a:	eeb1 8a48 	vneg.f32	s16, s16
 8014e7e:	ed84 8a07 	vstr	s16, [r4, #28]
 8014e82:	60e7      	str	r7, [r4, #12]
 8014e84:	7426      	strb	r6, [r4, #16]
 8014e86:	61ac      	str	r4, [r5, #24]
 8014e88:	b006      	add	sp, #24
 8014e8a:	ecbd 8b0a 	vpop	{d8-d12}
 8014e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e92:	7ca3      	ldrb	r3, [r4, #18]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d0f4      	beq.n	8014e82 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8014e98:	ee38 7a68 	vsub.f32	s14, s16, s17
 8014e9c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8014ee8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8014ea0:	eef4 8ac8 	vcmpe.f32	s17, s16
 8014ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eac:	edc4 7a08 	vstr	s15, [r4, #32]
 8014eb0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014eb4:	ee17 3a90 	vmov	r3, s15
 8014eb8:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8014ebc:	b21a      	sxth	r2, r3
 8014ebe:	ee17 3a90 	vmov	r3, s15
 8014ec2:	bf48      	it	mi
 8014ec4:	8122      	strhmi	r2, [r4, #8]
 8014ec6:	b21b      	sxth	r3, r3
 8014ec8:	bf56      	itet	pl
 8014eca:	80e2      	strhpl	r2, [r4, #6]
 8014ecc:	80e3      	strhmi	r3, [r4, #6]
 8014ece:	8123      	strhpl	r3, [r4, #8]
 8014ed0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014ed4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014ed8:	1a9b      	subs	r3, r3, r2
 8014eda:	ee07 3a90 	vmov	s15, r3
 8014ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ee2:	edc4 7a07 	vstr	s15, [r4, #28]
 8014ee6:	e7cc      	b.n	8014e82 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8014ee8:	447ffffe 	.word	0x447ffffe
 8014eec:	44800000 	.word	0x44800000

08014ef0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8014ef0:	b510      	push	{r4, lr}
 8014ef2:	ed2d 8b02 	vpush	{d8}
 8014ef6:	eef0 8a62 	vmov.f32	s17, s5
 8014efa:	2100      	movs	r1, #0
 8014efc:	4604      	mov	r4, r0
 8014efe:	eeb0 8a42 	vmov.f32	s16, s4
 8014f02:	f013 fdbb 	bl	8028a7c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8014f06:	eef0 7a68 	vmov.f32	s15, s17
 8014f0a:	6823      	ldr	r3, [r4, #0]
 8014f0c:	4620      	mov	r0, r4
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f14:	ee17 2a90 	vmov	r2, s15
 8014f18:	eef0 7a48 	vmov.f32	s15, s16
 8014f1c:	ecbd 8b02 	vpop	{d8}
 8014f20:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f28:	ee17 1a90 	vmov	r1, s15
 8014f2c:	4718      	bx	r3

08014f2e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8014f2e:	b510      	push	{r4, lr}
 8014f30:	ed2d 8b02 	vpush	{d8}
 8014f34:	eef0 8a63 	vmov.f32	s17, s7
 8014f38:	2100      	movs	r1, #0
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	eeb0 8a43 	vmov.f32	s16, s6
 8014f40:	f013 fe5e 	bl	8028c00 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8014f44:	eef0 7a68 	vmov.f32	s15, s17
 8014f48:	6823      	ldr	r3, [r4, #0]
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	689b      	ldr	r3, [r3, #8]
 8014f4e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f52:	ee17 2a90 	vmov	r2, s15
 8014f56:	eef0 7a48 	vmov.f32	s15, s16
 8014f5a:	ecbd 8b02 	vpop	{d8}
 8014f5e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f66:	ee17 1a90 	vmov	r1, s15
 8014f6a:	4718      	bx	r3

08014f6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8014f6c:	b513      	push	{r0, r1, r4, lr}
 8014f6e:	4604      	mov	r4, r0
 8014f70:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8014f72:	f007 f8c6 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014f76:	eef0 7a60 	vmov.f32	s15, s1
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f80:	ee17 2a90 	vmov	r2, s15
 8014f84:	eef0 7a40 	vmov.f32	s15, s0
 8014f88:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014f8c:	ee17 1a90 	vmov	r1, s15
 8014f90:	b002      	add	sp, #8
 8014f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f96:	f013 bccb 	b.w	8028930 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8014f9a:	b513      	push	{r0, r1, r4, lr}
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8014fa0:	f007 f8af 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014fa4:	eef0 7a60 	vmov.f32	s15, s1
 8014fa8:	4620      	mov	r0, r4
 8014faa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014fae:	ee17 2a90 	vmov	r2, s15
 8014fb2:	eef0 7a40 	vmov.f32	s15, s0
 8014fb6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8014fba:	ee17 1a90 	vmov	r1, s15
 8014fbe:	b002      	add	sp, #8
 8014fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fc4:	f013 bd01 	b.w	80289ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08014fc8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8014fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fca:	2400      	movs	r4, #0
 8014fcc:	9f07      	ldr	r7, [sp, #28]
 8014fce:	f04f 0e01 	mov.w	lr, #1
 8014fd2:	4626      	mov	r6, r4
 8014fd4:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8014fd8:	4463      	add	r3, ip
 8014fda:	4563      	cmp	r3, ip
 8014fdc:	d02d      	beq.n	801503a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8014fde:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8014fe2:	2d06      	cmp	r5, #6
 8014fe4:	d8f9      	bhi.n	8014fda <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8014fe6:	fa0e f505 	lsl.w	r5, lr, r5
 8014fea:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8014fee:	d10d      	bne.n	801500c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8014ff0:	f015 0f10 	tst.w	r5, #16
 8014ff4:	d117      	bne.n	8015026 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8014ff6:	072d      	lsls	r5, r5, #28
 8014ff8:	d5ef      	bpl.n	8014fda <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8014ffa:	3801      	subs	r0, #1
 8014ffc:	b91e      	cbnz	r6, 8015006 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8014ffe:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8015002:	682d      	ldr	r5, [r5, #0]
 8015004:	600d      	str	r5, [r1, #0]
 8015006:	b96c      	cbnz	r4, 8015024 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015008:	2601      	movs	r6, #1
 801500a:	e7e6      	b.n	8014fda <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801500c:	b926      	cbnz	r6, 8015018 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 801500e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8015012:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8015016:	600b      	str	r3, [r1, #0]
 8015018:	b924      	cbnz	r4, 8015024 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801501a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801501e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015022:	6013      	str	r3, [r2, #0]
 8015024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015026:	3801      	subs	r0, #1
 8015028:	b91c      	cbnz	r4, 8015032 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801502a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801502e:	6824      	ldr	r4, [r4, #0]
 8015030:	6014      	str	r4, [r2, #0]
 8015032:	2e00      	cmp	r6, #0
 8015034:	d1f6      	bne.n	8015024 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015036:	2401      	movs	r4, #1
 8015038:	e7cf      	b.n	8014fda <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801503a:	b90e      	cbnz	r6, 8015040 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 801503c:	2300      	movs	r3, #0
 801503e:	600b      	str	r3, [r1, #0]
 8015040:	2c00      	cmp	r4, #0
 8015042:	d1ef      	bne.n	8015024 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8015044:	2300      	movs	r3, #0
 8015046:	e7ec      	b.n	8015022 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08015048 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8015048:	b538      	push	{r3, r4, r5, lr}
 801504a:	ed2d 8b0a 	vpush	{d8-d12}
 801504e:	eef0 ba40 	vmov.f32	s23, s0
 8015052:	4604      	mov	r4, r0
 8015054:	eeb0 ca60 	vmov.f32	s24, s1
 8015058:	460d      	mov	r5, r1
 801505a:	eef0 aa41 	vmov.f32	s21, s2
 801505e:	eeb0 ba61 	vmov.f32	s22, s3
 8015062:	eeb0 9a42 	vmov.f32	s18, s4
 8015066:	eef0 9a62 	vmov.f32	s19, s5
 801506a:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801506e:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8015072:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8015076:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801507a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 801507e:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8015082:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8015086:	ee20 0a00 	vmul.f32	s0, s0, s0
 801508a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801508e:	f013 ffad 	bl	8028fec <sqrtf>
 8015092:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8015096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509a:	d12e      	bne.n	80150fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 801509c:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80150a0:	ee39 7acb 	vsub.f32	s14, s19, s22
 80150a4:	eeb0 8a6a 	vmov.f32	s16, s21
 80150a8:	eef0 8a4b 	vmov.f32	s17, s22
 80150ac:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80150b0:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80150b4:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80150b8:	eee7 8aca 	vfms.f32	s17, s15, s20
 80150bc:	2d02      	cmp	r5, #2
 80150be:	dc2f      	bgt.n	8015120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80150c0:	3501      	adds	r5, #1
 80150c2:	eef0 1a4b 	vmov.f32	s3, s22
 80150c6:	eeb0 1a6a 	vmov.f32	s2, s21
 80150ca:	4620      	mov	r0, r4
 80150cc:	4629      	mov	r1, r5
 80150ce:	eef0 2a68 	vmov.f32	s5, s17
 80150d2:	eeb0 2a48 	vmov.f32	s4, s16
 80150d6:	eef0 0a4c 	vmov.f32	s1, s24
 80150da:	eeb0 0a6b 	vmov.f32	s0, s23
 80150de:	f7ff ffb3 	bl	8015048 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80150e2:	eef0 0a68 	vmov.f32	s1, s17
 80150e6:	eeb0 0a48 	vmov.f32	s0, s16
 80150ea:	4620      	mov	r0, r4
 80150ec:	f7ff ff55 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80150f0:	eeb0 ba68 	vmov.f32	s22, s17
 80150f4:	eef0 aa48 	vmov.f32	s21, s16
 80150f8:	e7b9      	b.n	801506e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80150fa:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80150fe:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8015102:	ee78 8acc 	vsub.f32	s17, s17, s24
 8015106:	ee28 7a27 	vmul.f32	s14, s16, s15
 801510a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801510e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8015112:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8015116:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801511a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801511e:	e7cd      	b.n	80150bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8015120:	eef0 0a68 	vmov.f32	s1, s17
 8015124:	4620      	mov	r0, r4
 8015126:	eeb0 0a48 	vmov.f32	s0, s16
 801512a:	f7ff ff36 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801512e:	ecbd 8b0a 	vpop	{d8-d12}
 8015132:	bd38      	pop	{r3, r4, r5, pc}

08015134 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8015134:	b510      	push	{r4, lr}
 8015136:	ed2d 8b0a 	vpush	{d8-d12}
 801513a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801513e:	4604      	mov	r4, r0
 8015140:	eeb0 ca40 	vmov.f32	s24, s0
 8015144:	2b02      	cmp	r3, #2
 8015146:	eeb0 9a60 	vmov.f32	s18, s1
 801514a:	eef0 9a41 	vmov.f32	s19, s2
 801514e:	eef0 8a61 	vmov.f32	s17, s3
 8015152:	eeb0 ba42 	vmov.f32	s22, s4
 8015156:	eef0 ba62 	vmov.f32	s23, s5
 801515a:	eeb0 aa43 	vmov.f32	s20, s6
 801515e:	eef0 aa63 	vmov.f32	s21, s7
 8015162:	eeb0 8a44 	vmov.f32	s16, s8
 8015166:	eef0 ca64 	vmov.f32	s25, s9
 801516a:	d12c      	bne.n	80151c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 801516c:	eef0 0a62 	vmov.f32	s1, s5
 8015170:	eeb0 0a42 	vmov.f32	s0, s4
 8015174:	f7ff ff11 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015178:	ee79 9acb 	vsub.f32	s19, s19, s22
 801517c:	ee7a caec 	vsub.f32	s25, s21, s25
 8015180:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8015184:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015188:	ee69 9aac 	vmul.f32	s19, s19, s25
 801518c:	ee28 8a88 	vmul.f32	s16, s17, s16
 8015190:	eef4 9ac8 	vcmpe.f32	s19, s16
 8015194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015198:	db0f      	blt.n	80151ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801519a:	2101      	movs	r1, #1
 801519c:	eef0 2a6a 	vmov.f32	s5, s21
 80151a0:	eeb0 2a4a 	vmov.f32	s4, s20
 80151a4:	4620      	mov	r0, r4
 80151a6:	eef0 1a6b 	vmov.f32	s3, s23
 80151aa:	eeb0 1a4b 	vmov.f32	s2, s22
 80151ae:	eef0 0a49 	vmov.f32	s1, s18
 80151b2:	eeb0 0a4c 	vmov.f32	s0, s24
 80151b6:	f7ff ff47 	bl	8015048 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80151ba:	eef0 0a6a 	vmov.f32	s1, s21
 80151be:	4620      	mov	r0, r4
 80151c0:	eeb0 0a4a 	vmov.f32	s0, s20
 80151c4:	e035      	b.n	8015232 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80151c6:	2b01      	cmp	r3, #1
 80151c8:	d138      	bne.n	801523c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80151ca:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80151ce:	ee33 6a48 	vsub.f32	s12, s6, s16
 80151d2:	ee71 7a42 	vsub.f32	s15, s2, s4
 80151d6:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80151da:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80151de:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80151e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80151e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ea:	d027      	beq.n	801523c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80151ec:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80151f0:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80151f4:	eea4 8a83 	vfma.f32	s16, s9, s6
 80151f8:	eee1 8a22 	vfma.f32	s17, s2, s5
 80151fc:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8015200:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8015204:	eee6 7a28 	vfma.f32	s15, s12, s17
 8015208:	eea6 8aa8 	vfma.f32	s16, s13, s17
 801520c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8015210:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8015214:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8015218:	ee3c ca40 	vsub.f32	s24, s24, s0
 801521c:	ee39 9a60 	vsub.f32	s18, s18, s1
 8015220:	ee29 9a09 	vmul.f32	s18, s18, s18
 8015224:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8015228:	eef4 7ac9 	vcmpe.f32	s15, s18
 801522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015230:	db04      	blt.n	801523c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8015232:	f7ff feb2 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015236:	ecbd 8b0a 	vpop	{d8-d12}
 801523a:	bd10      	pop	{r4, pc}
 801523c:	eef0 0a6b 	vmov.f32	s1, s23
 8015240:	4620      	mov	r0, r4
 8015242:	eeb0 0a4b 	vmov.f32	s0, s22
 8015246:	f7ff fea8 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801524a:	e7b6      	b.n	80151ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0801524c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 801524c:	b510      	push	{r4, lr}
 801524e:	ed2d 8b0c 	vpush	{d8-d13}
 8015252:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8015256:	4604      	mov	r4, r0
 8015258:	eeb0 9a40 	vmov.f32	s18, s0
 801525c:	eef0 9a60 	vmov.f32	s19, s1
 8015260:	eef0 aa41 	vmov.f32	s21, s2
 8015264:	eeb0 ba61 	vmov.f32	s22, s3
 8015268:	b933      	cbnz	r3, 8015278 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801526a:	f7ff fe96 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801526e:	eef0 0a4b 	vmov.f32	s1, s22
 8015272:	eeb0 0a6a 	vmov.f32	s0, s21
 8015276:	e015      	b.n	80152a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8015278:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801527c:	2b02      	cmp	r3, #2
 801527e:	ee71 8a40 	vsub.f32	s17, s2, s0
 8015282:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8015286:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801528a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801528e:	d10f      	bne.n	80152b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8015290:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8015294:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015298:	f7ff fe7f 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801529c:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80152a0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80152a4:	4620      	mov	r0, r4
 80152a6:	f7ff fe78 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80152aa:	ecbd 8b0c 	vpop	{d8-d13}
 80152ae:	bd10      	pop	{r4, pc}
 80152b0:	f7ff fe73 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80152b4:	eef0 0a69 	vmov.f32	s1, s19
 80152b8:	eeb0 0a49 	vmov.f32	s0, s18
 80152bc:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80153ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80152c0:	eeb1 aa68 	vneg.f32	s20, s17
 80152c4:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80153f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80152c8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80152cc:	4620      	mov	r0, r4
 80152ce:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80152d2:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80153f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80152d6:	eddf ca48 	vldr	s25, [pc, #288]	@ 80153f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80152da:	ed9f da48 	vldr	s26, [pc, #288]	@ 80153fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80152de:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80152e2:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80152e6:	f7ff fe58 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80152ea:	eef0 0a69 	vmov.f32	s1, s19
 80152ee:	eeb0 0a49 	vmov.f32	s0, s18
 80152f2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8015400 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80152f6:	4620      	mov	r0, r4
 80152f8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80152fc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015300:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8015304:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015308:	f7ff fe47 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801530c:	eef0 0a69 	vmov.f32	s1, s19
 8015310:	eeb0 0a49 	vmov.f32	s0, s18
 8015314:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8015404 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8015318:	4620      	mov	r0, r4
 801531a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801531e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015322:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8015326:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801532a:	f7ff fe36 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801532e:	eef0 0a69 	vmov.f32	s1, s19
 8015332:	eeb0 0a49 	vmov.f32	s0, s18
 8015336:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8015408 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801533a:	4620      	mov	r0, r4
 801533c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015340:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8015344:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015348:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801534c:	f7ff fe25 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015350:	ee79 0a88 	vadd.f32	s1, s19, s16
 8015354:	ee39 0a28 	vadd.f32	s0, s18, s17
 8015358:	4620      	mov	r0, r4
 801535a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801535e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015362:	f7ff fe1a 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015366:	eef0 0a69 	vmov.f32	s1, s19
 801536a:	eeb0 0a49 	vmov.f32	s0, s18
 801536e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801540c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8015372:	4620      	mov	r0, r4
 8015374:	eee8 0a27 	vfma.f32	s1, s16, s15
 8015378:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801537c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8015380:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8015384:	f7ff fe09 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8015388:	eef0 0a69 	vmov.f32	s1, s19
 801538c:	eeb0 0a49 	vmov.f32	s0, s18
 8015390:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8015410 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8015394:	4620      	mov	r0, r4
 8015396:	eee8 0a27 	vfma.f32	s1, s16, s15
 801539a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801539e:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80153a2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80153a6:	f7ff fdf8 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80153aa:	eef0 0a69 	vmov.f32	s1, s19
 80153ae:	eeb0 0a49 	vmov.f32	s0, s18
 80153b2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8015414 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80153b6:	4620      	mov	r0, r4
 80153b8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80153bc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80153c0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80153c4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80153c8:	f7ff fde7 	bl	8014f9a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80153cc:	eef0 0a69 	vmov.f32	s1, s19
 80153d0:	eeb0 0a49 	vmov.f32	s0, s18
 80153d4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8015418 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80153d8:	4620      	mov	r0, r4
 80153da:	eee8 0a27 	vfma.f32	s1, s16, s15
 80153de:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80153e2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80153e6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80153ea:	e73e      	b.n	801526a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80153ec:	3d23d70a 	.word	0x3d23d70a
 80153f0:	3e8f5c29 	.word	0x3e8f5c29
 80153f4:	3f19999a 	.word	0x3f19999a
 80153f8:	3f4ccccd 	.word	0x3f4ccccd
 80153fc:	3f75c28f 	.word	0x3f75c28f
 8015400:	3e4ccccd 	.word	0x3e4ccccd
 8015404:	3ecccccd 	.word	0x3ecccccd
 8015408:	3f3851ec 	.word	0x3f3851ec
 801540c:	3fa3d70a 	.word	0x3fa3d70a
 8015410:	3fcccccd 	.word	0x3fcccccd
 8015414:	3fe66666 	.word	0x3fe66666
 8015418:	3ffae148 	.word	0x3ffae148

0801541c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 801541c:	b570      	push	{r4, r5, r6, lr}
 801541e:	ed2d 8b06 	vpush	{d8-d10}
 8015422:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8015426:	eef0 aa40 	vmov.f32	s21, s0
 801542a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 801542e:	4604      	mov	r4, r0
 8015430:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8015434:	ee30 9a49 	vsub.f32	s18, s0, s18
 8015438:	eeb0 aa60 	vmov.f32	s20, s1
 801543c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015440:	eea9 0a09 	vfma.f32	s0, s18, s18
 8015444:	f013 fdd2 	bl	8028fec <sqrtf>
 8015448:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015450:	dd36      	ble.n	80154c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8015452:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8015456:	2600      	movs	r6, #0
 8015458:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 801545c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8015460:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8015464:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8015468:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 801546c:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8015470:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8015474:	ee70 9a28 	vadd.f32	s19, s0, s17
 8015478:	ee78 8aaa 	vadd.f32	s17, s17, s21
 801547c:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8015480:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8015484:	b1fd      	cbz	r5, 80154c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8015486:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801548a:	eef0 0a49 	vmov.f32	s1, s18
 801548e:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8015492:	eeb0 0a69 	vmov.f32	s0, s19
 8015496:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 801549a:	4620      	mov	r0, r4
 801549c:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80154a0:	f7ff fd64 	bl	8014f6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80154a4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80154a8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80154ac:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80154b0:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80154b4:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80154b8:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80154bc:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80154c0:	ecbd 8b06 	vpop	{d8-d10}
 80154c4:	bd70      	pop	{r4, r5, r6, pc}
 80154c6:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80154ca:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80154ce:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80154d2:	b16b      	cbz	r3, 80154f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80154d4:	eef0 1a49 	vmov.f32	s3, s18
 80154d8:	4620      	mov	r0, r4
 80154da:	eeb0 1a69 	vmov.f32	s2, s19
 80154de:	eef0 0a62 	vmov.f32	s1, s5
 80154e2:	eeb0 0a42 	vmov.f32	s0, s4
 80154e6:	f7ff feb1 	bl	801524c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80154ea:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80154ee:	e7db      	b.n	80154a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80154f0:	eef0 4a48 	vmov.f32	s9, s16
 80154f4:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80154f8:	eeb0 4a68 	vmov.f32	s8, s17
 80154fc:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8015500:	eef0 3a49 	vmov.f32	s7, s18
 8015504:	4620      	mov	r0, r4
 8015506:	eeb0 3a69 	vmov.f32	s6, s19
 801550a:	f7ff fe13 	bl	8015134 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801550e:	e7cb      	b.n	80154a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08015510 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8015510:	ee07 2a90 	vmov	s15, r2
 8015514:	ee07 1a10 	vmov	s14, r1
 8015518:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801551c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8015530 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8015520:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8015524:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015528:	ee20 0a27 	vmul.f32	s0, s0, s15
 801552c:	f7ff bf76 	b.w	801541c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015530:	3d000000 	.word	0x3d000000

08015534 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8015534:	b538      	push	{r3, r4, r5, lr}
 8015536:	ed2d 8b02 	vpush	{d8}
 801553a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 801553e:	4604      	mov	r4, r0
 8015540:	b31d      	cbz	r5, 801558a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8015542:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8015546:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801554a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 801554e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8015552:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015556:	eef0 0a68 	vmov.f32	s1, s17
 801555a:	f7ff fd07 	bl	8014f6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 801555e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015562:	eef0 1a48 	vmov.f32	s3, s16
 8015566:	4620      	mov	r0, r4
 8015568:	eeb0 0a41 	vmov.f32	s0, s2
 801556c:	eef0 0a68 	vmov.f32	s1, s17
 8015570:	f7ff fe6c 	bl	801524c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8015574:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8015578:	eef0 1a68 	vmov.f32	s3, s17
 801557c:	4620      	mov	r0, r4
 801557e:	eef0 0a48 	vmov.f32	s1, s16
 8015582:	eeb0 0a41 	vmov.f32	s0, s2
 8015586:	f7ff fe61 	bl	801524c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801558a:	4628      	mov	r0, r5
 801558c:	ecbd 8b02 	vpop	{d8}
 8015590:	bd38      	pop	{r3, r4, r5, pc}

08015592 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8015592:	b510      	push	{r4, lr}
 8015594:	ed2d 8b02 	vpush	{d8}
 8015598:	4604      	mov	r4, r0
 801559a:	eeb0 8a40 	vmov.f32	s16, s0
 801559e:	eef0 8a60 	vmov.f32	s17, s1
 80155a2:	f7ff ffc7 	bl	8015534 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80155a6:	b9d0      	cbnz	r0, 80155de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80155a8:	4620      	mov	r0, r4
 80155aa:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80155ae:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80155b2:	eef0 0a68 	vmov.f32	s1, s17
 80155b6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80155ba:	eeb0 0a48 	vmov.f32	s0, s16
 80155be:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80155c2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80155c6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80155ca:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80155ce:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80155d2:	f7ff fdaf 	bl	8015134 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80155d6:	2001      	movs	r0, #1
 80155d8:	ecbd 8b02 	vpop	{d8}
 80155dc:	bd10      	pop	{r4, pc}
 80155de:	2000      	movs	r0, #0
 80155e0:	e7fa      	b.n	80155d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080155e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80155e2:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80155e6:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80155ea:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80155ee:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80155f2:	f7ff be2b 	b.w	801524c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080155f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80155f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155fc:	b089      	sub	sp, #36	@ 0x24
 80155fe:	461c      	mov	r4, r3
 8015600:	4682      	mov	sl, r0
 8015602:	4615      	mov	r5, r2
 8015604:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015608:	f10d 0820 	add.w	r8, sp, #32
 801560c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801560e:	9304      	str	r3, [sp, #16]
 8015610:	2300      	movs	r3, #0
 8015612:	9105      	str	r1, [sp, #20]
 8015614:	9306      	str	r3, [sp, #24]
 8015616:	f848 3d04 	str.w	r3, [r8, #-4]!
 801561a:	9b04      	ldr	r3, [sp, #16]
 801561c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8015620:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8015624:	9b05      	ldr	r3, [sp, #20]
 8015626:	429d      	cmp	r5, r3
 8015628:	d96d      	bls.n	8015706 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801562a:	3d01      	subs	r5, #1
 801562c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8015630:	2b06      	cmp	r3, #6
 8015632:	d8f7      	bhi.n	8015624 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8015634:	a201      	add	r2, pc, #4	@ (adr r2, 801563c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8015636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801563a:	bf00      	nop
 801563c:	0801565b 	.word	0x0801565b
 8015640:	08015625 	.word	0x08015625
 8015644:	08015659 	.word	0x08015659
 8015648:	0801567d 	.word	0x0801567d
 801564c:	0801567d 	.word	0x0801567d
 8015650:	08015681 	.word	0x08015681
 8015654:	080156c1 	.word	0x080156c1
 8015658:	3c02      	subs	r4, #2
 801565a:	4650      	mov	r0, sl
 801565c:	9400      	str	r4, [sp, #0]
 801565e:	462b      	mov	r3, r5
 8015660:	4642      	mov	r2, r8
 8015662:	a906      	add	r1, sp, #24
 8015664:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8015668:	f7ff fcae 	bl	8014fc8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801566c:	eddd 0a07 	vldr	s1, [sp, #28]
 8015670:	ed9d 0a06 	vldr	s0, [sp, #24]
 8015674:	4630      	mov	r0, r6
 8015676:	f7ff fed1 	bl	801541c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801567a:	e7d3      	b.n	8015624 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801567c:	3c01      	subs	r4, #1
 801567e:	e7ec      	b.n	801565a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8015680:	f1a4 0b04 	sub.w	fp, r4, #4
 8015684:	3c02      	subs	r4, #2
 8015686:	4650      	mov	r0, sl
 8015688:	462b      	mov	r3, r5
 801568a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801568e:	f8cd b000 	str.w	fp, [sp]
 8015692:	4642      	mov	r2, r8
 8015694:	a906      	add	r1, sp, #24
 8015696:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801569a:	f7ff fc95 	bl	8014fc8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801569e:	eddd 2a07 	vldr	s5, [sp, #28]
 80156a2:	ed9d 2a06 	vldr	s4, [sp, #24]
 80156a6:	4630      	mov	r0, r6
 80156a8:	ed54 1a01 	vldr	s3, [r4, #-4]
 80156ac:	ed14 1a02 	vldr	s2, [r4, #-8]
 80156b0:	edd4 0a01 	vldr	s1, [r4, #4]
 80156b4:	ed94 0a00 	vldr	s0, [r4]
 80156b8:	f7ff fc1a 	bl	8014ef0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80156bc:	465c      	mov	r4, fp
 80156be:	e7b1      	b.n	8015624 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80156c0:	f1a4 0b06 	sub.w	fp, r4, #6
 80156c4:	3c02      	subs	r4, #2
 80156c6:	4650      	mov	r0, sl
 80156c8:	462b      	mov	r3, r5
 80156ca:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80156ce:	f8cd b000 	str.w	fp, [sp]
 80156d2:	4642      	mov	r2, r8
 80156d4:	a906      	add	r1, sp, #24
 80156d6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80156da:	f7ff fc75 	bl	8014fc8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80156de:	eddd 3a07 	vldr	s7, [sp, #28]
 80156e2:	ed9d 3a06 	vldr	s6, [sp, #24]
 80156e6:	4630      	mov	r0, r6
 80156e8:	ed54 2a03 	vldr	s5, [r4, #-12]
 80156ec:	ed14 2a04 	vldr	s4, [r4, #-16]
 80156f0:	ed54 1a01 	vldr	s3, [r4, #-4]
 80156f4:	ed14 1a02 	vldr	s2, [r4, #-8]
 80156f8:	edd4 0a01 	vldr	s1, [r4, #4]
 80156fc:	ed94 0a00 	vldr	s0, [r4]
 8015700:	f7ff fc15 	bl	8014f2e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8015704:	e7da      	b.n	80156bc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8015706:	9b04      	ldr	r3, [sp, #16]
 8015708:	b113      	cbz	r3, 8015710 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801570a:	4630      	mov	r0, r6
 801570c:	f7ff ff69 	bl	80155e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8015710:	b009      	add	sp, #36	@ 0x24
 8015712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015716:	bf00      	nop

08015718 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8015718:	eef0 7a60 	vmov.f32	s15, s1
 801571c:	6803      	ldr	r3, [r0, #0]
 801571e:	689b      	ldr	r3, [r3, #8]
 8015720:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015724:	ee17 2a90 	vmov	r2, s15
 8015728:	eef0 7a40 	vmov.f32	s15, s0
 801572c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015730:	ee17 1a90 	vmov	r1, s15
 8015734:	4718      	bx	r3
	...

08015738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8015738:	4b04      	ldr	r3, [pc, #16]	@ (801574c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801573a:	b510      	push	{r4, lr}
 801573c:	4604      	mov	r4, r0
 801573e:	f840 3b14 	str.w	r3, [r0], #20
 8015742:	f002 fd0f 	bl	8018164 <_ZN8touchgfx7OutlineD1Ev>
 8015746:	4620      	mov	r0, r4
 8015748:	bd10      	pop	{r4, pc}
 801574a:	bf00      	nop
 801574c:	0802e814 	.word	0x0802e814

08015750 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8015750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015754:	ed2d 8b04 	vpush	{d8-d9}
 8015758:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 801575c:	b0b5      	sub	sp, #212	@ 0xd4
 801575e:	4605      	mov	r5, r0
 8015760:	468b      	mov	fp, r1
 8015762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015766:	9206      	str	r2, [sp, #24]
 8015768:	461e      	mov	r6, r3
 801576a:	2400      	movs	r4, #0
 801576c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015770:	f240 814f 	bls.w	8015a12 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8015774:	23ff      	movs	r3, #255	@ 0xff
 8015776:	1d02      	adds	r2, r0, #4
 8015778:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8015a18 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 801577c:	f04f 0800 	mov.w	r8, #0
 8015780:	9300      	str	r3, [sp, #0]
 8015782:	af08      	add	r7, sp, #32
 8015784:	6981      	ldr	r1, [r0, #24]
 8015786:	a808      	add	r0, sp, #32
 8015788:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801578a:	eef0 9a49 	vmov.f32	s19, s18
 801578e:	f012 ff83 	bl	8028698 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8015792:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8015796:	4ba1      	ldr	r3, [pc, #644]	@ (8015a1c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8015798:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801579c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80157a0:	2201      	movs	r2, #1
 80157a2:	9308      	str	r3, [sp, #32]
 80157a4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80157a8:	edd5 6a08 	vldr	s13, [r5, #32]
 80157ac:	eeb0 8a49 	vmov.f32	s16, s18
 80157b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b4:	9325      	str	r3, [sp, #148]	@ 0x94
 80157b6:	f04f 0300 	mov.w	r3, #0
 80157ba:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 80157be:	7f6a      	ldrb	r2, [r5, #29]
 80157c0:	eef0 8a49 	vmov.f32	s17, s18
 80157c4:	bf48      	it	mi
 80157c6:	eef1 7a67 	vnegmi.f32	s15, s15
 80157ca:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80157ce:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 80157d2:	46c1      	mov	r9, r8
 80157d4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80157d8:	f04f 0a01 	mov.w	sl, #1
 80157dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80157e0:	7fab      	ldrb	r3, [r5, #30]
 80157e2:	942a      	str	r4, [sp, #168]	@ 0xa8
 80157e4:	435a      	muls	r2, r3
 80157e6:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80157ea:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80157ee:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80157f2:	1c53      	adds	r3, r2, #1
 80157f4:	942b      	str	r4, [sp, #172]	@ 0xac
 80157f6:	942c      	str	r4, [sp, #176]	@ 0xb0
 80157f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80157fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015800:	942d      	str	r4, [sp, #180]	@ 0xb4
 8015802:	942e      	str	r4, [sp, #184]	@ 0xb8
 8015804:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015808:	ee67 7a27 	vmul.f32	s15, s14, s15
 801580c:	942f      	str	r4, [sp, #188]	@ 0xbc
 801580e:	9430      	str	r4, [sp, #192]	@ 0xc0
 8015810:	9431      	str	r4, [sp, #196]	@ 0xc4
 8015812:	9432      	str	r4, [sp, #200]	@ 0xc8
 8015814:	9433      	str	r4, [sp, #204]	@ 0xcc
 8015816:	4644      	mov	r4, r8
 8015818:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801581c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8015820:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8015824:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8015828:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 801582c:	9b06      	ldr	r3, [sp, #24]
 801582e:	454b      	cmp	r3, r9
 8015830:	f000 80cc 	beq.w	80159cc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8015834:	f109 0301 	add.w	r3, r9, #1
 8015838:	9305      	str	r3, [sp, #20]
 801583a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801583e:	2b06      	cmp	r3, #6
 8015840:	d839      	bhi.n	80158b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8015842:	e8df f003 	tbb	[pc, r3]
 8015846:	3b04      	.short	0x3b04
 8015848:	817c6f60 	.word	0x817c6f60
 801584c:	a0          	.byte	0xa0
 801584d:	00          	.byte	0x00
 801584e:	45c1      	cmp	r9, r8
 8015850:	d92b      	bls.n	80158aa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8015852:	eef0 0a49 	vmov.f32	s1, s18
 8015856:	4638      	mov	r0, r7
 8015858:	eeb0 0a69 	vmov.f32	s0, s19
 801585c:	f7ff fdde 	bl	801541c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015860:	4638      	mov	r0, r7
 8015862:	f7ff fe67 	bl	8015534 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8015866:	4681      	mov	r9, r0
 8015868:	b9f8      	cbnz	r0, 80158aa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801586a:	eef0 0a49 	vmov.f32	s1, s18
 801586e:	4638      	mov	r0, r7
 8015870:	eeb0 0a69 	vmov.f32	s0, s19
 8015874:	f7ff fe8d 	bl	8015592 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8015878:	4628      	mov	r0, r5
 801587a:	4623      	mov	r3, r4
 801587c:	9a05      	ldr	r2, [sp, #20]
 801587e:	4641      	mov	r1, r8
 8015880:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8015884:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8015888:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 801588c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8015890:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8015894:	e9cd b600 	strd	fp, r6, [sp]
 8015898:	f7ff feae 	bl	80155f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801589c:	eef0 0a49 	vmov.f32	s1, s18
 80158a0:	eeb0 0a69 	vmov.f32	s0, s19
 80158a4:	4638      	mov	r0, r7
 80158a6:	f7ff fe74 	bl	8015592 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80158aa:	eeb0 8a49 	vmov.f32	s16, s18
 80158ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80158b2:	eef0 8a69 	vmov.f32	s17, s19
 80158b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80158ba:	e7b7      	b.n	801582c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 80158bc:	45c1      	cmp	r9, r8
 80158be:	d90d      	bls.n	80158dc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80158c0:	4638      	mov	r0, r7
 80158c2:	f7ff fe37 	bl	8015534 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80158c6:	b948      	cbnz	r0, 80158dc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80158c8:	4623      	mov	r3, r4
 80158ca:	464a      	mov	r2, r9
 80158cc:	4641      	mov	r1, r8
 80158ce:	4628      	mov	r0, r5
 80158d0:	e9cd a702 	strd	sl, r7, [sp, #8]
 80158d4:	e9cd b600 	strd	fp, r6, [sp]
 80158d8:	f7ff fe8e 	bl	80155f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80158dc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80158e0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80158e4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80158e8:	3402      	adds	r4, #2
 80158ea:	edd3 8a00 	vldr	s17, [r3]
 80158ee:	46c8      	mov	r8, r9
 80158f0:	ed93 8a01 	vldr	s16, [r3, #4]
 80158f4:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80158f8:	eef0 9a68 	vmov.f32	s19, s17
 80158fc:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8015900:	eeb0 9a48 	vmov.f32	s18, s16
 8015904:	e7d7      	b.n	80158b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8015906:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801590a:	4638      	mov	r0, r7
 801590c:	3402      	adds	r4, #2
 801590e:	edd3 8a00 	vldr	s17, [r3]
 8015912:	ed93 8a01 	vldr	s16, [r3, #4]
 8015916:	eeb0 0a68 	vmov.f32	s0, s17
 801591a:	eef0 0a48 	vmov.f32	s1, s16
 801591e:	f7ff fd7d 	bl	801541c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8015922:	e7c8      	b.n	80158b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8015924:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015928:	edd3 8a00 	vldr	s17, [r3]
 801592c:	eef0 0a48 	vmov.f32	s1, s16
 8015930:	4638      	mov	r0, r7
 8015932:	eeb0 0a68 	vmov.f32	s0, s17
 8015936:	3401      	adds	r4, #1
 8015938:	f7ff fd70 	bl	801541c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801593c:	e7bb      	b.n	80158b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801593e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015942:	ed93 8a00 	vldr	s16, [r3]
 8015946:	e7f1      	b.n	801592c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8015948:	00a3      	lsls	r3, r4, #2
 801594a:	eef0 0a48 	vmov.f32	s1, s16
 801594e:	eeb0 0a68 	vmov.f32	s0, s17
 8015952:	4638      	mov	r0, r7
 8015954:	f103 0208 	add.w	r2, r3, #8
 8015958:	f103 090c 	add.w	r9, r3, #12
 801595c:	4433      	add	r3, r6
 801595e:	3404      	adds	r4, #4
 8015960:	4432      	add	r2, r6
 8015962:	44b1      	add	r9, r6
 8015964:	edd3 1a01 	vldr	s3, [r3, #4]
 8015968:	ed92 2a00 	vldr	s4, [r2]
 801596c:	edd9 2a00 	vldr	s5, [r9]
 8015970:	ed93 1a00 	vldr	s2, [r3]
 8015974:	9207      	str	r2, [sp, #28]
 8015976:	f7ff fabb 	bl	8014ef0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801597a:	9a07      	ldr	r2, [sp, #28]
 801597c:	ed99 8a00 	vldr	s16, [r9]
 8015980:	edd2 8a00 	vldr	s17, [r2]
 8015984:	e797      	b.n	80158b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8015986:	00a3      	lsls	r3, r4, #2
 8015988:	eef0 0a48 	vmov.f32	s1, s16
 801598c:	eeb0 0a68 	vmov.f32	s0, s17
 8015990:	4638      	mov	r0, r7
 8015992:	f103 0210 	add.w	r2, r3, #16
 8015996:	f103 0914 	add.w	r9, r3, #20
 801599a:	4433      	add	r3, r6
 801599c:	3406      	adds	r4, #6
 801599e:	4432      	add	r2, r6
 80159a0:	44b1      	add	r9, r6
 80159a2:	edd3 2a03 	vldr	s5, [r3, #12]
 80159a6:	ed92 3a00 	vldr	s6, [r2]
 80159aa:	edd9 3a00 	vldr	s7, [r9]
 80159ae:	ed93 2a02 	vldr	s4, [r3, #8]
 80159b2:	edd3 1a01 	vldr	s3, [r3, #4]
 80159b6:	ed93 1a00 	vldr	s2, [r3]
 80159ba:	9207      	str	r2, [sp, #28]
 80159bc:	f7ff fab7 	bl	8014f2e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80159c0:	9a07      	ldr	r2, [sp, #28]
 80159c2:	ed99 8a00 	vldr	s16, [r9]
 80159c6:	edd2 8a00 	vldr	s17, [r2]
 80159ca:	e774      	b.n	80158b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80159cc:	9b06      	ldr	r3, [sp, #24]
 80159ce:	af08      	add	r7, sp, #32
 80159d0:	4543      	cmp	r3, r8
 80159d2:	d90f      	bls.n	80159f4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80159d4:	4638      	mov	r0, r7
 80159d6:	f7ff fdad 	bl	8015534 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80159da:	b958      	cbnz	r0, 80159f4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80159dc:	2301      	movs	r3, #1
 80159de:	9703      	str	r7, [sp, #12]
 80159e0:	f8cd b000 	str.w	fp, [sp]
 80159e4:	4641      	mov	r1, r8
 80159e6:	9a06      	ldr	r2, [sp, #24]
 80159e8:	4628      	mov	r0, r5
 80159ea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80159ee:	4623      	mov	r3, r4
 80159f0:	f7ff fe02 	bl	80155f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80159f4:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80159f8:	4638      	mov	r0, r7
 80159fa:	f012 fee1 	bl	80287c0 <_ZN8touchgfx6Canvas6renderEh>
 80159fe:	4604      	mov	r4, r0
 8015a00:	4638      	mov	r0, r7
 8015a02:	f7ff fe99 	bl	8015738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8015a06:	4620      	mov	r0, r4
 8015a08:	b035      	add	sp, #212	@ 0xd4
 8015a0a:	ecbd 8b04 	vpop	{d8-d9}
 8015a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a12:	2401      	movs	r4, #1
 8015a14:	e7f7      	b.n	8015a06 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8015a16:	bf00      	nop
 8015a18:	00000000 	.word	0x00000000
 8015a1c:	0802dd70 	.word	0x0802dd70

08015a20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8015a20:	b510      	push	{r4, lr}
 8015a22:	4604      	mov	r4, r0
 8015a24:	f7ff fe88 	bl	8015738 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8015a28:	21b0      	movs	r1, #176	@ 0xb0
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	f013 fab4 	bl	8028f98 <_ZdlPvj>
 8015a30:	4620      	mov	r0, r4
 8015a32:	bd10      	pop	{r4, pc}

08015a34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8015a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a38:	4698      	mov	r8, r3
 8015a3a:	23ff      	movs	r3, #255	@ 0xff
 8015a3c:	4607      	mov	r7, r0
 8015a3e:	4689      	mov	r9, r1
 8015a40:	4692      	mov	sl, r2
 8015a42:	1d02      	adds	r2, r0, #4
 8015a44:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8015a48:	2400      	movs	r4, #0
 8015a4a:	44ca      	add	sl, r9
 8015a4c:	ed2d 8b06 	vpush	{d8-d10}
 8015a50:	b0aa      	sub	sp, #168	@ 0xa8
 8015a52:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8015c58 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8015a56:	9300      	str	r3, [sp, #0]
 8015a58:	eef0 8a48 	vmov.f32	s17, s16
 8015a5c:	6981      	ldr	r1, [r0, #24]
 8015a5e:	a80d      	add	r0, sp, #52	@ 0x34
 8015a60:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8015a62:	f012 fe19 	bl	8028698 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8015a66:	7f3b      	ldrb	r3, [r7, #28]
 8015a68:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8015c58 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	1e5a      	subs	r2, r3, #1
 8015a70:	eeb0 0a60 	vmov.f32	s0, s1
 8015a74:	4253      	negs	r3, r2
 8015a76:	4153      	adcs	r3, r2
 8015a78:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8015a7c:	f006 fb41 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015a80:	eeb0 9a40 	vmov.f32	s18, s0
 8015a84:	eef0 9a60 	vmov.f32	s19, s1
 8015a88:	45ca      	cmp	sl, r9
 8015a8a:	f000 80cd 	beq.w	8015c28 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8015a8e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015a92:	2b06      	cmp	r3, #6
 8015a94:	d8f8      	bhi.n	8015a88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8015a96:	e8df f003 	tbb	[pc, r3]
 8015a9a:	0804      	.short	0x0804
 8015a9c:	58533f2a 	.word	0x58533f2a
 8015aa0:	8a          	.byte	0x8a
 8015aa1:	00          	.byte	0x00
 8015aa2:	a80d      	add	r0, sp, #52	@ 0x34
 8015aa4:	f012 fe6a 	bl	802877c <_ZN8touchgfx6Canvas5closeEv>
 8015aa8:	e7ee      	b.n	8015a88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8015aaa:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8015aae:	4628      	mov	r0, r5
 8015ab0:	ed93 8a01 	vldr	s16, [r3, #4]
 8015ab4:	edd3 8a00 	vldr	s17, [r3]
 8015ab8:	eef0 0a48 	vmov.f32	s1, s16
 8015abc:	eeb0 0a68 	vmov.f32	s0, s17
 8015ac0:	f006 fb1f 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015ac4:	a80d      	add	r0, sp, #52	@ 0x34
 8015ac6:	eef0 7a60 	vmov.f32	s15, s1
 8015aca:	eeb0 9a40 	vmov.f32	s18, s0
 8015ace:	eef0 9a60 	vmov.f32	s19, s1
 8015ad2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015ad6:	ee17 2a90 	vmov	r2, s15
 8015ada:	eef0 7a40 	vmov.f32	s15, s0
 8015ade:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8015ae2:	ee17 1a90 	vmov	r1, s15
 8015ae6:	f012 ff23 	bl	8028930 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8015aea:	3402      	adds	r4, #2
 8015aec:	e7cc      	b.n	8015a88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8015aee:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8015af2:	4628      	mov	r0, r5
 8015af4:	edd3 8a00 	vldr	s17, [r3]
 8015af8:	ed93 8a01 	vldr	s16, [r3, #4]
 8015afc:	eeb0 0a68 	vmov.f32	s0, s17
 8015b00:	eef0 0a48 	vmov.f32	s1, s16
 8015b04:	f006 fafd 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015b08:	a80d      	add	r0, sp, #52	@ 0x34
 8015b0a:	eeb0 9a40 	vmov.f32	s18, s0
 8015b0e:	eef0 9a60 	vmov.f32	s19, s1
 8015b12:	f7ff fe01 	bl	8015718 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8015b16:	e7e8      	b.n	8015aea <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8015b18:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8015b1c:	edd3 8a00 	vldr	s17, [r3]
 8015b20:	eef0 0a48 	vmov.f32	s1, s16
 8015b24:	4628      	mov	r0, r5
 8015b26:	eeb0 0a68 	vmov.f32	s0, s17
 8015b2a:	3401      	adds	r4, #1
 8015b2c:	f006 fae9 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015b30:	a80d      	add	r0, sp, #52	@ 0x34
 8015b32:	eef0 9a60 	vmov.f32	s19, s1
 8015b36:	eeb0 9a40 	vmov.f32	s18, s0
 8015b3a:	f7ff fded 	bl	8015718 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8015b3e:	e7a3      	b.n	8015a88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8015b40:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8015b44:	ed93 8a00 	vldr	s16, [r3]
 8015b48:	e7ea      	b.n	8015b20 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8015b4a:	1ca3      	adds	r3, r4, #2
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	3404      	adds	r4, #4
 8015b50:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8015b54:	ed53 0a01 	vldr	s1, [r3, #-4]
 8015b58:	ed13 0a02 	vldr	s0, [r3, #-8]
 8015b5c:	edd3 8a00 	vldr	s17, [r3]
 8015b60:	ed93 8a01 	vldr	s16, [r3, #4]
 8015b64:	f006 facd 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015b68:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8015b6c:	eeb0 0a68 	vmov.f32	s0, s17
 8015b70:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8015b74:	eef0 0a48 	vmov.f32	s1, s16
 8015b78:	4628      	mov	r0, r5
 8015b7a:	f006 fac2 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015b7e:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8015b82:	eef0 2a60 	vmov.f32	s5, s1
 8015b86:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8015b8a:	eeb0 2a40 	vmov.f32	s4, s0
 8015b8e:	a80d      	add	r0, sp, #52	@ 0x34
 8015b90:	eeb0 aa40 	vmov.f32	s20, s0
 8015b94:	eef0 aa60 	vmov.f32	s21, s1
 8015b98:	eeb0 0a49 	vmov.f32	s0, s18
 8015b9c:	eef0 0a69 	vmov.f32	s1, s19
 8015ba0:	f7ff f9a6 	bl	8014ef0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8015ba4:	eef0 9a6a 	vmov.f32	s19, s21
 8015ba8:	eeb0 9a4a 	vmov.f32	s18, s20
 8015bac:	e76c      	b.n	8015a88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8015bae:	1d26      	adds	r6, r4, #4
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	3406      	adds	r4, #6
 8015bb4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015bb8:	ed56 0a03 	vldr	s1, [r6, #-12]
 8015bbc:	ed16 0a04 	vldr	s0, [r6, #-16]
 8015bc0:	edd6 8a00 	vldr	s17, [r6]
 8015bc4:	ed96 8a01 	vldr	s16, [r6, #4]
 8015bc8:	f006 fa9b 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015bcc:	ed8d 0a07 	vstr	s0, [sp, #28]
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	ed16 0a02 	vldr	s0, [r6, #-8]
 8015bd6:	edcd 0a08 	vstr	s1, [sp, #32]
 8015bda:	ed56 0a01 	vldr	s1, [r6, #-4]
 8015bde:	f006 fa90 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015be2:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8015be6:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8015bea:	eeb0 0a68 	vmov.f32	s0, s17
 8015bee:	eef0 0a48 	vmov.f32	s1, s16
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	f006 fa85 	bl	801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8015bf8:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8015bfc:	eeb0 3a40 	vmov.f32	s6, s0
 8015c00:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8015c04:	eef0 3a60 	vmov.f32	s7, s1
 8015c08:	eddd 1a08 	vldr	s3, [sp, #32]
 8015c0c:	eeb0 aa40 	vmov.f32	s20, s0
 8015c10:	ed9d 1a07 	vldr	s2, [sp, #28]
 8015c14:	eef0 aa60 	vmov.f32	s21, s1
 8015c18:	a80d      	add	r0, sp, #52	@ 0x34
 8015c1a:	eef0 0a69 	vmov.f32	s1, s19
 8015c1e:	eeb0 0a49 	vmov.f32	s0, s18
 8015c22:	f7ff f984 	bl	8014f2e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8015c26:	e7bd      	b.n	8015ba4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8015c28:	7f7b      	ldrb	r3, [r7, #29]
 8015c2a:	a80d      	add	r0, sp, #52	@ 0x34
 8015c2c:	7fb9      	ldrb	r1, [r7, #30]
 8015c2e:	4359      	muls	r1, r3
 8015c30:	1c4b      	adds	r3, r1, #1
 8015c32:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8015c36:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015c3a:	f012 fdc1 	bl	80287c0 <_ZN8touchgfx6Canvas6renderEh>
 8015c3e:	4b07      	ldr	r3, [pc, #28]	@ (8015c5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8015c40:	4604      	mov	r4, r0
 8015c42:	a812      	add	r0, sp, #72	@ 0x48
 8015c44:	930d      	str	r3, [sp, #52]	@ 0x34
 8015c46:	f002 fa8d 	bl	8018164 <_ZN8touchgfx7OutlineD1Ev>
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	b02a      	add	sp, #168	@ 0xa8
 8015c4e:	ecbd 8b06 	vpop	{d8-d10}
 8015c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c56:	bf00      	nop
 8015c58:	00000000 	.word	0x00000000
 8015c5c:	0802e814 	.word	0x0802e814

08015c60 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8015c60:	b410      	push	{r4}
 8015c62:	7f04      	ldrb	r4, [r0, #28]
 8015c64:	b11c      	cbz	r4, 8015c6e <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8015c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c6a:	f7ff bee3 	b.w	8015a34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8015c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c72:	f7ff bd6d 	b.w	8015750 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08015c76 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8015c76:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c7a:	4691      	mov	r9, r2
 8015c7c:	4602      	mov	r2, r0
 8015c7e:	4606      	mov	r6, r0
 8015c80:	4688      	mov	r8, r1
 8015c82:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8015c86:	469a      	mov	sl, r3
 8015c88:	ab02      	add	r3, sp, #8
 8015c8a:	af02      	add	r7, sp, #8
 8015c8c:	6851      	ldr	r1, [r2, #4]
 8015c8e:	c303      	stmia	r3!, {r0, r1}
 8015c90:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	dd2f      	ble.n	8015cf8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8015c98:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8015c9c:	2c00      	cmp	r4, #0
 8015c9e:	dd2b      	ble.n	8015cf8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8015ca0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015ca4:	441c      	add	r4, r3
 8015ca6:	b2a4      	uxth	r4, r4
 8015ca8:	b225      	sxth	r5, r4
 8015caa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015cae:	42ab      	cmp	r3, r5
 8015cb0:	da22      	bge.n	8015cf8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8015cb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015cb4:	464a      	mov	r2, r9
 8015cb6:	9701      	str	r7, [sp, #4]
 8015cb8:	4641      	mov	r1, r8
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	4653      	mov	r3, sl
 8015cc0:	f7ff ffce 	bl	8015c60 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8015cc4:	b940      	cbnz	r0, 8015cd8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8015cc6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015cca:	2b01      	cmp	r3, #1
 8015ccc:	d004      	beq.n	8015cd8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8015cce:	3301      	adds	r3, #1
 8015cd0:	105b      	asrs	r3, r3, #1
 8015cd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015cd6:	e7ec      	b.n	8015cb2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8015cd8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8015cdc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	b29b      	uxth	r3, r3
 8015ce4:	441a      	add	r2, r3
 8015ce6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8015cea:	b212      	sxth	r2, r2
 8015cec:	4295      	cmp	r5, r2
 8015cee:	dadc      	bge.n	8015caa <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8015cf0:	1ae3      	subs	r3, r4, r3
 8015cf2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015cf6:	e7d8      	b.n	8015caa <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8015cf8:	b004      	add	sp, #16
 8015cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015cfe <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8015cfe:	0c0b      	lsrs	r3, r1, #16
 8015d00:	60c1      	str	r1, [r0, #12]
 8015d02:	7481      	strb	r1, [r0, #18]
 8015d04:	7403      	strb	r3, [r0, #16]
 8015d06:	0a0b      	lsrs	r3, r1, #8
 8015d08:	7443      	strb	r3, [r0, #17]
 8015d0a:	4770      	bx	lr

08015d0c <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8015d0c:	f1a0 0008 	sub.w	r0, r0, #8
 8015d10:	e7f5      	b.n	8015cfe <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08015d14 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8015d14:	b508      	push	{r3, lr}
 8015d16:	4b05      	ldr	r3, [pc, #20]	@ (8015d2c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8015d18:	6818      	ldr	r0, [r3, #0]
 8015d1a:	6803      	ldr	r3, [r0, #0]
 8015d1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015d20:	4798      	blx	r3
 8015d22:	1e43      	subs	r3, r0, #1
 8015d24:	4258      	negs	r0, r3
 8015d26:	4158      	adcs	r0, r3
 8015d28:	bd08      	pop	{r3, pc}
 8015d2a:	bf00      	nop
 8015d2c:	240285b4 	.word	0x240285b4

08015d30 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8015d30:	4770      	bx	lr

08015d32 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8015d32:	3808      	subs	r0, #8
 8015d34:	4770      	bx	lr

08015d36 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 8015d36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015d3a:	b410      	push	{r4}
 8015d3c:	188c      	adds	r4, r1, r2
 8015d3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015d42:	68c2      	ldr	r2, [r0, #12]
 8015d44:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8015d48:	4620      	mov	r0, r4
 8015d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d4e:	f7ed bac1 	b.w	80032d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08015d52 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8015d52:	f7ed ba9b 	b.w	800328c <_ZN8touchgfx5paint8tearDownEv>

08015d56 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8015d56:	b510      	push	{r4, lr}
 8015d58:	4604      	mov	r4, r0
 8015d5a:	2114      	movs	r1, #20
 8015d5c:	f013 f91c 	bl	8028f98 <_ZdlPvj>
 8015d60:	4620      	mov	r0, r4
 8015d62:	bd10      	pop	{r4, pc}

08015d64 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8015d64:	f1a0 0008 	sub.w	r0, r0, #8
 8015d68:	e7f5      	b.n	8015d56 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08015d6c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8015d6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d74:	4411      	add	r1, r2
 8015d76:	7c42      	ldrb	r2, [r0, #17]
 8015d78:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8015d7c:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8015d80:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8015d84:	2a00      	cmp	r2, #0
 8015d86:	f000 8084 	beq.w	8015e92 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8015d8a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015d8e:	ed90 7a08 	vldr	s14, [r0, #32]
 8015d92:	42a2      	cmp	r2, r4
 8015d94:	68c3      	ldr	r3, [r0, #12]
 8015d96:	db20      	blt.n	8015dda <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8015d98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015d9c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da4:	bfc8      	it	gt
 8015da6:	2200      	movgt	r2, #0
 8015da8:	589a      	ldr	r2, [r3, r2]
 8015daa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015dae:	7c03      	ldrb	r3, [r0, #16]
 8015db0:	fa5f fc82 	uxtb.w	ip, r2
 8015db4:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8015db8:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8015dbc:	440e      	add	r6, r1
 8015dbe:	b36b      	cbz	r3, 8015e1c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8015dc0:	2dff      	cmp	r5, #255	@ 0xff
 8015dc2:	d12b      	bne.n	8015e1c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8015dc4:	42b1      	cmp	r1, r6
 8015dc6:	f080 8204 	bcs.w	80161d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8015dca:	f881 c000 	strb.w	ip, [r1]
 8015dce:	3103      	adds	r1, #3
 8015dd0:	f801 7c02 	strb.w	r7, [r1, #-2]
 8015dd4:	f801 4c01 	strb.w	r4, [r1, #-1]
 8015dd8:	e7f4      	b.n	8015dc4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8015dda:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8015dde:	42a7      	cmp	r7, r4
 8015de0:	dc08      	bgt.n	8015df4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 8015de2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015de6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dee:	bfd8      	it	le
 8015df0:	2200      	movle	r2, #0
 8015df2:	e7d9      	b.n	8015da8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8015df4:	1aa2      	subs	r2, r4, r2
 8015df6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015dfa:	ee07 2a90 	vmov	s15, r2
 8015dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015e0e:	ee17 2a90 	vmov	r2, s15
 8015e12:	bfd8      	it	le
 8015e14:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8015e18:	0092      	lsls	r2, r2, #2
 8015e1a:	e7c5      	b.n	8015da8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8015e1c:	0e12      	lsrs	r2, r2, #24
 8015e1e:	4355      	muls	r5, r2
 8015e20:	1c6a      	adds	r2, r5, #1
 8015e22:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8015e26:	122d      	asrs	r5, r5, #8
 8015e28:	43e8      	mvns	r0, r5
 8015e2a:	b2ad      	uxth	r5, r5
 8015e2c:	fb1c fc05 	smulbb	ip, ip, r5
 8015e30:	b2c0      	uxtb	r0, r0
 8015e32:	fb17 f705 	smulbb	r7, r7, r5
 8015e36:	fb14 f505 	smulbb	r5, r4, r5
 8015e3a:	fa1f fc8c 	uxth.w	ip, ip
 8015e3e:	b2bf      	uxth	r7, r7
 8015e40:	b2ad      	uxth	r5, r5
 8015e42:	428e      	cmp	r6, r1
 8015e44:	f101 0303 	add.w	r3, r1, #3
 8015e48:	f240 81c3 	bls.w	80161d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8015e4c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8015e50:	fb02 c200 	mla	r2, r2, r0, ip
 8015e54:	b292      	uxth	r2, r2
 8015e56:	1c51      	adds	r1, r2, #1
 8015e58:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015e5c:	1212      	asrs	r2, r2, #8
 8015e5e:	f803 2c03 	strb.w	r2, [r3, #-3]
 8015e62:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8015e66:	fb02 7200 	mla	r2, r2, r0, r7
 8015e6a:	b292      	uxth	r2, r2
 8015e6c:	1c51      	adds	r1, r2, #1
 8015e6e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015e72:	1212      	asrs	r2, r2, #8
 8015e74:	f803 2c02 	strb.w	r2, [r3, #-2]
 8015e78:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8015e7c:	fb02 5200 	mla	r2, r2, r0, r5
 8015e80:	b292      	uxth	r2, r2
 8015e82:	1c51      	adds	r1, r2, #1
 8015e84:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8015e88:	4619      	mov	r1, r3
 8015e8a:	1212      	asrs	r2, r2, #8
 8015e8c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8015e90:	e7d7      	b.n	8015e42 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8015e92:	7c82      	ldrb	r2, [r0, #18]
 8015e94:	2a00      	cmp	r2, #0
 8015e96:	d047      	beq.n	8015f28 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8015e98:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015e9c:	ee07 2a10 	vmov	s14, r2
 8015ea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ea4:	ee07 3a90 	vmov	s15, r3
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015eae:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb6:	f200 808e 	bhi.w	8015fd6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8015eba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015ebe:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8015ec2:	68c7      	ldr	r7, [r0, #12]
 8015ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015ecc:	ee06 6a90 	vmov	s13, r6
 8015ed0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ed4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015edc:	bf4a      	itet	mi
 8015ede:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8015ee2:	4634      	movpl	r4, r6
 8015ee4:	ee17 4a90 	vmovmi	r4, s15
 8015ee8:	edd0 7a08 	vldr	s15, [r0, #32]
 8015eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ef0:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8015ef4:	448e      	add	lr, r1
 8015ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efa:	bfc8      	it	gt
 8015efc:	2200      	movgt	r2, #0
 8015efe:	58bf      	ldr	r7, [r7, r2]
 8015f00:	7c02      	ldrb	r2, [r0, #16]
 8015f02:	fa5f f987 	uxtb.w	r9, r7
 8015f06:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8015f0a:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8015f0e:	b31a      	cbz	r2, 8015f58 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8015f10:	2dff      	cmp	r5, #255	@ 0xff
 8015f12:	d121      	bne.n	8015f58 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8015f14:	4571      	cmp	r1, lr
 8015f16:	d25d      	bcs.n	8015fd4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8015f18:	f881 9000 	strb.w	r9, [r1]
 8015f1c:	3103      	adds	r1, #3
 8015f1e:	f801 8c02 	strb.w	r8, [r1, #-2]
 8015f22:	f801 cc01 	strb.w	ip, [r1, #-1]
 8015f26:	e7f5      	b.n	8015f14 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8015f28:	ee07 4a90 	vmov	s15, r4
 8015f2c:	ed90 7a06 	vldr	s14, [r0, #24]
 8015f30:	edd0 6a05 	vldr	s13, [r0, #20]
 8015f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015f3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015f40:	edd0 7a08 	vldr	s15, [r0, #32]
 8015f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4c:	bf44      	itt	mi
 8015f4e:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8015f52:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8015f56:	e7a5      	b.n	8015ea4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8015f58:	0e3f      	lsrs	r7, r7, #24
 8015f5a:	436f      	muls	r7, r5
 8015f5c:	1c7a      	adds	r2, r7, #1
 8015f5e:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8015f62:	1212      	asrs	r2, r2, #8
 8015f64:	ea6f 0a02 	mvn.w	sl, r2
 8015f68:	b292      	uxth	r2, r2
 8015f6a:	fb19 f902 	smulbb	r9, r9, r2
 8015f6e:	fa5f fa8a 	uxtb.w	sl, sl
 8015f72:	fb18 f802 	smulbb	r8, r8, r2
 8015f76:	fb1c fc02 	smulbb	ip, ip, r2
 8015f7a:	fa1f f989 	uxth.w	r9, r9
 8015f7e:	fa1f f888 	uxth.w	r8, r8
 8015f82:	fa1f fc8c 	uxth.w	ip, ip
 8015f86:	458e      	cmp	lr, r1
 8015f88:	f101 0203 	add.w	r2, r1, #3
 8015f8c:	d922      	bls.n	8015fd4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8015f8e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8015f92:	fb01 910a 	mla	r1, r1, sl, r9
 8015f96:	b289      	uxth	r1, r1
 8015f98:	1c4f      	adds	r7, r1, #1
 8015f9a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8015f9e:	1209      	asrs	r1, r1, #8
 8015fa0:	f802 1c03 	strb.w	r1, [r2, #-3]
 8015fa4:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8015fa8:	fb01 810a 	mla	r1, r1, sl, r8
 8015fac:	b289      	uxth	r1, r1
 8015fae:	1c4f      	adds	r7, r1, #1
 8015fb0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8015fb4:	1209      	asrs	r1, r1, #8
 8015fb6:	f802 1c02 	strb.w	r1, [r2, #-2]
 8015fba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8015fbe:	fb01 c10a 	mla	r1, r1, sl, ip
 8015fc2:	b289      	uxth	r1, r1
 8015fc4:	1c4f      	adds	r7, r1, #1
 8015fc6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8015fca:	1209      	asrs	r1, r1, #8
 8015fcc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015fd0:	4611      	mov	r1, r2
 8015fd2:	e7d8      	b.n	8015f86 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8015fd4:	191a      	adds	r2, r3, r4
 8015fd6:	4433      	add	r3, r6
 8015fd8:	b21b      	sxth	r3, r3
 8015fda:	4293      	cmp	r3, r2
 8015fdc:	f340 80f9 	ble.w	80161d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8015fe0:	edd0 7a07 	vldr	s15, [r0, #28]
 8015fe4:	ee06 2a90 	vmov	s13, r2
 8015fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ff0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff8:	f340 80b0 	ble.w	801615c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8015ffc:	ee06 3a10 	vmov	s12, r3
 8016000:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016004:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80161d8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8016008:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801600c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016010:	ed90 6a08 	vldr	s12, [r0, #32]
 8016014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016018:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801601c:	bfd6      	itet	le
 801601e:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8016022:	469c      	movgt	ip, r3
 8016024:	ee17 ca90 	vmovle	ip, s15
 8016028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801602c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80161dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8016030:	ebac 0202 	sub.w	r2, ip, r2
 8016034:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8016038:	eee6 7a07 	vfma.f32	s15, s12, s14
 801603c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016040:	188c      	adds	r4, r1, r2
 8016042:	7c02      	ldrb	r2, [r0, #16]
 8016044:	b1d2      	cbz	r2, 801607c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8016046:	2dff      	cmp	r5, #255	@ 0xff
 8016048:	d118      	bne.n	801607c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801604a:	42a1      	cmp	r1, r4
 801604c:	d261      	bcs.n	8016112 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801604e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016052:	68c6      	ldr	r6, [r0, #12]
 8016054:	3103      	adds	r1, #3
 8016056:	ee17 7a10 	vmov	r7, s14
 801605a:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801605e:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8016062:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016066:	7856      	ldrb	r6, [r2, #1]
 8016068:	f801 6c02 	strb.w	r6, [r1, #-2]
 801606c:	7892      	ldrb	r2, [r2, #2]
 801606e:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016072:	ed90 7a08 	vldr	s14, [r0, #32]
 8016076:	ee77 7a87 	vadd.f32	s15, s15, s14
 801607a:	e7e6      	b.n	801604a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 801607c:	68c2      	ldr	r2, [r0, #12]
 801607e:	428c      	cmp	r4, r1
 8016080:	f101 0e03 	add.w	lr, r1, #3
 8016084:	d945      	bls.n	8016112 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8016086:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801608a:	ee17 9a10 	vmov	r9, s14
 801608e:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8016092:	f898 7003 	ldrb.w	r7, [r8, #3]
 8016096:	fb07 f605 	mul.w	r6, r7, r5
 801609a:	1c77      	adds	r7, r6, #1
 801609c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80160a0:	123f      	asrs	r7, r7, #8
 80160a2:	b2b9      	uxth	r1, r7
 80160a4:	43ff      	mvns	r7, r7
 80160a6:	b2fe      	uxtb	r6, r7
 80160a8:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 80160ac:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 80160b0:	fb19 f906 	smulbb	r9, r9, r6
 80160b4:	fb07 9701 	mla	r7, r7, r1, r9
 80160b8:	b2bf      	uxth	r7, r7
 80160ba:	f107 0901 	add.w	r9, r7, #1
 80160be:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80160c2:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80160c6:	fb19 f906 	smulbb	r9, r9, r6
 80160ca:	123f      	asrs	r7, r7, #8
 80160cc:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80160d0:	f898 7001 	ldrb.w	r7, [r8, #1]
 80160d4:	fb07 9701 	mla	r7, r7, r1, r9
 80160d8:	b2bf      	uxth	r7, r7
 80160da:	f107 0901 	add.w	r9, r7, #1
 80160de:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80160e2:	123f      	asrs	r7, r7, #8
 80160e4:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80160e8:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80160ec:	f898 8002 	ldrb.w	r8, [r8, #2]
 80160f0:	fb17 f606 	smulbb	r6, r7, r6
 80160f4:	fb08 6601 	mla	r6, r8, r1, r6
 80160f8:	b2b6      	uxth	r6, r6
 80160fa:	1c71      	adds	r1, r6, #1
 80160fc:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8016100:	4671      	mov	r1, lr
 8016102:	1236      	asrs	r6, r6, #8
 8016104:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8016108:	ed90 7a08 	vldr	s14, [r0, #32]
 801610c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016110:	e7b5      	b.n	801607e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8016112:	4563      	cmp	r3, ip
 8016114:	dd5d      	ble.n	80161d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8016116:	edd0 7a08 	vldr	s15, [r0, #32]
 801611a:	eba3 030c 	sub.w	r3, r3, ip
 801611e:	68c4      	ldr	r4, [r0, #12]
 8016120:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8016124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016128:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801612c:	7c00      	ldrb	r0, [r0, #16]
 801612e:	440b      	add	r3, r1
 8016130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016134:	bfd8      	it	le
 8016136:	2200      	movle	r2, #0
 8016138:	58a2      	ldr	r2, [r4, r2]
 801613a:	b2d4      	uxtb	r4, r2
 801613c:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8016140:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8016144:	b160      	cbz	r0, 8016160 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8016146:	2dff      	cmp	r5, #255	@ 0xff
 8016148:	d10a      	bne.n	8016160 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801614a:	4299      	cmp	r1, r3
 801614c:	d241      	bcs.n	80161d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801614e:	700c      	strb	r4, [r1, #0]
 8016150:	3103      	adds	r1, #3
 8016152:	f801 cc02 	strb.w	ip, [r1, #-2]
 8016156:	f801 7c01 	strb.w	r7, [r1, #-1]
 801615a:	e7f6      	b.n	801614a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 801615c:	4694      	mov	ip, r2
 801615e:	e7da      	b.n	8016116 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8016160:	0e12      	lsrs	r2, r2, #24
 8016162:	436a      	muls	r2, r5
 8016164:	1c55      	adds	r5, r2, #1
 8016166:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801616a:	122d      	asrs	r5, r5, #8
 801616c:	43ee      	mvns	r6, r5
 801616e:	b2ad      	uxth	r5, r5
 8016170:	fb14 f405 	smulbb	r4, r4, r5
 8016174:	b2f6      	uxtb	r6, r6
 8016176:	fb1c f005 	smulbb	r0, ip, r5
 801617a:	fb17 f505 	smulbb	r5, r7, r5
 801617e:	b2a4      	uxth	r4, r4
 8016180:	b280      	uxth	r0, r0
 8016182:	b2ad      	uxth	r5, r5
 8016184:	428b      	cmp	r3, r1
 8016186:	f101 0203 	add.w	r2, r1, #3
 801618a:	d922      	bls.n	80161d2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801618c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8016190:	fb01 4106 	mla	r1, r1, r6, r4
 8016194:	b289      	uxth	r1, r1
 8016196:	1c4f      	adds	r7, r1, #1
 8016198:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801619c:	1209      	asrs	r1, r1, #8
 801619e:	f802 1c03 	strb.w	r1, [r2, #-3]
 80161a2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80161a6:	fb01 0106 	mla	r1, r1, r6, r0
 80161aa:	b289      	uxth	r1, r1
 80161ac:	1c4f      	adds	r7, r1, #1
 80161ae:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80161b2:	1209      	asrs	r1, r1, #8
 80161b4:	f802 1c02 	strb.w	r1, [r2, #-2]
 80161b8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80161bc:	fb01 5106 	mla	r1, r1, r6, r5
 80161c0:	b289      	uxth	r1, r1
 80161c2:	1c4f      	adds	r7, r1, #1
 80161c4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80161c8:	1209      	asrs	r1, r1, #8
 80161ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 80161ce:	4611      	mov	r1, r2
 80161d0:	e7d8      	b.n	8016184 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80161d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161d6:	bf00      	nop
 80161d8:	447ffffe 	.word	0x447ffffe
 80161dc:	00000000 	.word	0x00000000

080161e0 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80161e0:	4770      	bx	lr

080161e2 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80161e2:	4770      	bx	lr

080161e4 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80161e4:	b510      	push	{r4, lr}
 80161e6:	4604      	mov	r4, r0
 80161e8:	2124      	movs	r1, #36	@ 0x24
 80161ea:	f012 fed5 	bl	8028f98 <_ZdlPvj>
 80161ee:	4620      	mov	r0, r4
 80161f0:	bd10      	pop	{r4, pc}
	...

080161f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80161f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	460d      	mov	r5, r1
 80161fa:	4604      	mov	r4, r0
 80161fc:	4601      	mov	r1, r0
 80161fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016200:	a802      	add	r0, sp, #8
 8016202:	4798      	blx	r3
 8016204:	6828      	ldr	r0, [r5, #0]
 8016206:	6869      	ldr	r1, [r5, #4]
 8016208:	466b      	mov	r3, sp
 801620a:	c303      	stmia	r3!, {r0, r1}
 801620c:	4668      	mov	r0, sp
 801620e:	4619      	mov	r1, r3
 8016210:	f7fc fe92 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8016214:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016216:	b188      	cbz	r0, 801623c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016218:	6803      	ldr	r3, [r0, #0]
 801621a:	1d21      	adds	r1, r4, #4
 801621c:	68db      	ldr	r3, [r3, #12]
 801621e:	4798      	blx	r3
 8016220:	b160      	cbz	r0, 801623c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016222:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	dd08      	ble.n	801623c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801622a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801622e:	2d00      	cmp	r5, #0
 8016230:	dd04      	ble.n	801623c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016232:	4a2b      	ldr	r2, [pc, #172]	@ (80162e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8016234:	7812      	ldrb	r2, [r2, #0]
 8016236:	b11a      	cbz	r2, 8016240 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8016238:	2a01      	cmp	r2, #1
 801623a:	d029      	beq.n	8016290 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 801623c:	b004      	add	sp, #16
 801623e:	bd70      	pop	{r4, r5, r6, pc}
 8016240:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016244:	441d      	add	r5, r3
 8016246:	b2ad      	uxth	r5, r5
 8016248:	b22e      	sxth	r6, r5
 801624a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801624e:	42b3      	cmp	r3, r6
 8016250:	daf4      	bge.n	801623c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016252:	6823      	ldr	r3, [r4, #0]
 8016254:	4669      	mov	r1, sp
 8016256:	4620      	mov	r0, r4
 8016258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801625a:	4798      	blx	r3
 801625c:	b940      	cbnz	r0, 8016270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801625e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8016262:	2b01      	cmp	r3, #1
 8016264:	d004      	beq.n	8016270 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8016266:	3301      	adds	r3, #1
 8016268:	105b      	asrs	r3, r3, #1
 801626a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801626e:	e7f0      	b.n	8016252 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016270:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016274:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016278:	4413      	add	r3, r2
 801627a:	b29b      	uxth	r3, r3
 801627c:	441a      	add	r2, r3
 801627e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016282:	b212      	sxth	r2, r2
 8016284:	4296      	cmp	r6, r2
 8016286:	dae0      	bge.n	801624a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016288:	1aeb      	subs	r3, r5, r3
 801628a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801628e:	e7dc      	b.n	801624a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8016290:	f8bd 5000 	ldrh.w	r5, [sp]
 8016294:	441d      	add	r5, r3
 8016296:	b2ad      	uxth	r5, r5
 8016298:	b22e      	sxth	r6, r5
 801629a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801629e:	42b3      	cmp	r3, r6
 80162a0:	dacc      	bge.n	801623c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80162a2:	6823      	ldr	r3, [r4, #0]
 80162a4:	4669      	mov	r1, sp
 80162a6:	4620      	mov	r0, r4
 80162a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162aa:	4798      	blx	r3
 80162ac:	b940      	cbnz	r0, 80162c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80162ae:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80162b2:	2b01      	cmp	r3, #1
 80162b4:	d004      	beq.n	80162c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80162b6:	3301      	adds	r3, #1
 80162b8:	105b      	asrs	r3, r3, #1
 80162ba:	f8ad 3004 	strh.w	r3, [sp, #4]
 80162be:	e7f0      	b.n	80162a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80162c0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80162c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80162c8:	4413      	add	r3, r2
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	441a      	add	r2, r3
 80162ce:	f8ad 3000 	strh.w	r3, [sp]
 80162d2:	b212      	sxth	r2, r2
 80162d4:	4296      	cmp	r6, r2
 80162d6:	dae0      	bge.n	801629a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80162d8:	1aeb      	subs	r3, r5, r3
 80162da:	f8ad 3004 	strh.w	r3, [sp, #4]
 80162de:	e7dc      	b.n	801629a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80162e0:	240285ac 	.word	0x240285ac

080162e4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80162e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80162e6:	6803      	ldr	r3, [r0, #0]
 80162e8:	4604      	mov	r4, r0
 80162ea:	4601      	mov	r1, r0
 80162ec:	4668      	mov	r0, sp
 80162ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162f0:	4798      	blx	r3
 80162f2:	2100      	movs	r1, #0
 80162f4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80162f8:	4668      	mov	r0, sp
 80162fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80162fe:	9102      	str	r1, [sp, #8]
 8016300:	a902      	add	r1, sp, #8
 8016302:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016306:	f8ad 300e 	strh.w	r3, [sp, #14]
 801630a:	f7fc fe15 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801630e:	6823      	ldr	r3, [r4, #0]
 8016310:	4669      	mov	r1, sp
 8016312:	4620      	mov	r0, r4
 8016314:	691b      	ldr	r3, [r3, #16]
 8016316:	4798      	blx	r3
 8016318:	b004      	add	sp, #16
 801631a:	bd10      	pop	{r4, pc}

0801631c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801631c:	2101      	movs	r1, #1
 801631e:	2200      	movs	r2, #0
 8016320:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016324:	490a      	ldr	r1, [pc, #40]	@ (8016350 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8016326:	8082      	strh	r2, [r0, #4]
 8016328:	6001      	str	r1, [r0, #0]
 801632a:	21ff      	movs	r1, #255	@ 0xff
 801632c:	80c2      	strh	r2, [r0, #6]
 801632e:	8102      	strh	r2, [r0, #8]
 8016330:	8142      	strh	r2, [r0, #10]
 8016332:	8182      	strh	r2, [r0, #12]
 8016334:	81c2      	strh	r2, [r0, #14]
 8016336:	8202      	strh	r2, [r0, #16]
 8016338:	8242      	strh	r2, [r0, #18]
 801633a:	61c2      	str	r2, [r0, #28]
 801633c:	8402      	strh	r2, [r0, #32]
 801633e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8016340:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016344:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8016348:	6282      	str	r2, [r0, #40]	@ 0x28
 801634a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801634e:	4770      	bx	lr
 8016350:	0802de28 	.word	0x0802de28

08016354 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8016354:	6301      	str	r1, [r0, #48]	@ 0x30
 8016356:	4770      	bx	lr

08016358 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8016358:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801635a:	4770      	bx	lr

0801635c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 801635c:	6341      	str	r1, [r0, #52]	@ 0x34
 801635e:	4770      	bx	lr

08016360 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8016360:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8016362:	4770      	bx	lr

08016364 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8016364:	4770      	bx	lr

08016366 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8016366:	4608      	mov	r0, r1
 8016368:	4770      	bx	lr

0801636a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 801636a:	b530      	push	{r4, r5, lr}
 801636c:	460d      	mov	r5, r1
 801636e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8016370:	8949      	ldrh	r1, [r1, #10]
 8016372:	b085      	sub	sp, #20
 8016374:	4604      	mov	r4, r0
 8016376:	1ac9      	subs	r1, r1, r3
 8016378:	6803      	ldr	r3, [r0, #0]
 801637a:	f10d 0206 	add.w	r2, sp, #6
 801637e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8016382:	b209      	sxth	r1, r1
 8016384:	4798      	blx	r3
 8016386:	b1a0      	cbz	r0, 80163b2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016388:	792b      	ldrb	r3, [r5, #4]
 801638a:	b993      	cbnz	r3, 80163b2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801638c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8016390:	b178      	cbz	r0, 80163b2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8016392:	6803      	ldr	r3, [r0, #0]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	4798      	blx	r3
 8016398:	b158      	cbz	r0, 80163b2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801639a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801639e:	aa02      	add	r2, sp, #8
 80163a0:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80163a4:	4621      	mov	r1, r4
 80163a6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80163aa:	9503      	str	r5, [sp, #12]
 80163ac:	6803      	ldr	r3, [r0, #0]
 80163ae:	689b      	ldr	r3, [r3, #8]
 80163b0:	4798      	blx	r3
 80163b2:	b005      	add	sp, #20
 80163b4:	bd30      	pop	{r4, r5, pc}

080163b6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80163b6:	428a      	cmp	r2, r1
 80163b8:	bfbc      	itt	lt
 80163ba:	460b      	movlt	r3, r1
 80163bc:	4611      	movlt	r1, r2
 80163be:	b510      	push	{r4, lr}
 80163c0:	bfb8      	it	lt
 80163c2:	461a      	movlt	r2, r3
 80163c4:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 80163c8:	4604      	mov	r4, r0
 80163ca:	428b      	cmp	r3, r1
 80163cc:	d103      	bne.n	80163d6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 80163ce:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 80163d2:	4293      	cmp	r3, r2
 80163d4:	d011      	beq.n	80163fa <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 80163d6:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 80163da:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80163de:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 80163e2:	f005 fad8 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 80163e6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80163ea:	f005 fad4 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 80163ee:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80163f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163f6:	f005 bace 	b.w	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 80163fa:	bd10      	pop	{r4, pc}

080163fc <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 80163fc:	428a      	cmp	r2, r1
 80163fe:	bfbc      	itt	lt
 8016400:	460b      	movlt	r3, r1
 8016402:	4611      	movlt	r1, r2
 8016404:	b510      	push	{r4, lr}
 8016406:	bfb8      	it	lt
 8016408:	461a      	movlt	r2, r3
 801640a:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 801640e:	4604      	mov	r4, r0
 8016410:	428b      	cmp	r3, r1
 8016412:	d103      	bne.n	801641c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8016414:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8016418:	4293      	cmp	r3, r2
 801641a:	d011      	beq.n	8016440 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 801641c:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8016420:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8016424:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8016428:	f005 fab5 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 801642c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016430:	f005 fab1 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016434:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8016438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801643c:	f005 baab 	b.w	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016440:	bd10      	pop	{r4, pc}

08016442 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8016442:	2300      	movs	r3, #0
 8016444:	3038      	adds	r0, #56	@ 0x38
 8016446:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 801644a:	f005 baa4 	b.w	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>

0801644e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 801644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016452:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016456:	4605      	mov	r5, r0
 8016458:	460f      	mov	r7, r1
 801645a:	4616      	mov	r6, r2
 801645c:	2b00      	cmp	r3, #0
 801645e:	d03d      	beq.n	80164dc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016460:	6803      	ldr	r3, [r0, #0]
 8016462:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8016466:	4798      	blx	r3
 8016468:	682b      	ldr	r3, [r5, #0]
 801646a:	b204      	sxth	r4, r0
 801646c:	4628      	mov	r0, r5
 801646e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016472:	4798      	blx	r3
 8016474:	b203      	sxth	r3, r0
 8016476:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 801647a:	429c      	cmp	r4, r3
 801647c:	bfc4      	itt	gt
 801647e:	4622      	movgt	r2, r4
 8016480:	461c      	movgt	r4, r3
 8016482:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016486:	bfc8      	it	gt
 8016488:	4613      	movgt	r3, r2
 801648a:	4284      	cmp	r4, r0
 801648c:	da26      	bge.n	80164dc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 801648e:	4298      	cmp	r0, r3
 8016490:	bfa8      	it	ge
 8016492:	4618      	movge	r0, r3
 8016494:	2800      	cmp	r0, #0
 8016496:	db21      	blt.n	80164dc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016498:	b9ef      	cbnz	r7, 80164d6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 801649a:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 801649e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80164a2:	4619      	mov	r1, r3
 80164a4:	42a0      	cmp	r0, r4
 80164a6:	dd0b      	ble.n	80164c0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 80164a8:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 80164ac:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80164b0:	3401      	adds	r4, #1
 80164b2:	4291      	cmp	r1, r2
 80164b4:	bfa8      	it	ge
 80164b6:	4611      	movge	r1, r2
 80164b8:	4293      	cmp	r3, r2
 80164ba:	bfb8      	it	lt
 80164bc:	4613      	movlt	r3, r2
 80164be:	e7f1      	b.n	80164a4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80164c0:	1b89      	subs	r1, r1, r6
 80164c2:	18f2      	adds	r2, r6, r3
 80164c4:	4291      	cmp	r1, r2
 80164c6:	d009      	beq.n	80164dc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80164c8:	682b      	ldr	r3, [r5, #0]
 80164ca:	4628      	mov	r0, r5
 80164cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80164d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164d4:	4718      	bx	r3
 80164d6:	4273      	negs	r3, r6
 80164d8:	4631      	mov	r1, r6
 80164da:	e7e3      	b.n	80164a4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80164dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080164e0 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 80164e0:	b530      	push	{r4, r5, lr}
 80164e2:	790b      	ldrb	r3, [r1, #4]
 80164e4:	b085      	sub	sp, #20
 80164e6:	4604      	mov	r4, r0
 80164e8:	460d      	mov	r5, r1
 80164ea:	2b02      	cmp	r3, #2
 80164ec:	d020      	beq.n	8016530 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80164ee:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80164f0:	f10d 0206 	add.w	r2, sp, #6
 80164f4:	88c9      	ldrh	r1, [r1, #6]
 80164f6:	1ac9      	subs	r1, r1, r3
 80164f8:	6803      	ldr	r3, [r0, #0]
 80164fa:	b209      	sxth	r1, r1
 80164fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8016500:	4798      	blx	r3
 8016502:	b1a8      	cbz	r0, 8016530 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016504:	792b      	ldrb	r3, [r5, #4]
 8016506:	2b01      	cmp	r3, #1
 8016508:	d812      	bhi.n	8016530 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801650a:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801650e:	b178      	cbz	r0, 8016530 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016510:	6803      	ldr	r3, [r0, #0]
 8016512:	68db      	ldr	r3, [r3, #12]
 8016514:	4798      	blx	r3
 8016516:	b158      	cbz	r0, 8016530 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016518:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801651c:	aa02      	add	r2, sp, #8
 801651e:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8016522:	4621      	mov	r1, r4
 8016524:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016528:	9503      	str	r5, [sp, #12]
 801652a:	6803      	ldr	r3, [r0, #0]
 801652c:	689b      	ldr	r3, [r3, #8]
 801652e:	4798      	blx	r3
 8016530:	b005      	add	sp, #20
 8016532:	bd30      	pop	{r4, r5, pc}

08016534 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8016534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016538:	4604      	mov	r4, r0
 801653a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 801653e:	4690      	mov	r8, r2
 8016540:	461f      	mov	r7, r3
 8016542:	9e06      	ldr	r6, [sp, #24]
 8016544:	b928      	cbnz	r0, 8016552 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8016546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801654a:	8033      	strh	r3, [r6, #0]
 801654c:	803b      	strh	r3, [r7, #0]
 801654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016552:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8016556:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 801655a:	1883      	adds	r3, r0, r2
 801655c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8016560:	1ad2      	subs	r2, r2, r3
 8016562:	b212      	sxth	r2, r2
 8016564:	2a01      	cmp	r2, #1
 8016566:	dc07      	bgt.n	8016578 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8016568:	2300      	movs	r3, #0
 801656a:	803b      	strh	r3, [r7, #0]
 801656c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8016570:	3b01      	subs	r3, #1
 8016572:	8033      	strh	r3, [r6, #0]
 8016574:	2001      	movs	r0, #1
 8016576:	e7ea      	b.n	801654e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016578:	1a08      	subs	r0, r1, r0
 801657a:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 801657e:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8016582:	0140      	lsls	r0, r0, #5
 8016584:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016586:	1a5b      	subs	r3, r3, r1
 8016588:	d459      	bmi.n	801663e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 801658a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801658e:	fb93 f1f5 	sdiv	r1, r3, r5
 8016592:	2302      	movs	r3, #2
 8016594:	fb91 f1f3 	sdiv	r1, r1, r3
 8016598:	3a01      	subs	r2, #1
 801659a:	f005 ff0c 	bl	801c3b6 <_ZN8touchgfx6muldivElll>
 801659e:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80165a2:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 80165a6:	2900      	cmp	r1, #0
 80165a8:	db55      	blt.n	8016656 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80165aa:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80165ae:	2502      	movs	r5, #2
 80165b0:	fb93 f3fc 	sdiv	r3, r3, ip
 80165b4:	fb93 f3f5 	sdiv	r3, r3, r5
 80165b8:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80165bc:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 80165c0:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 80165c4:	1a52      	subs	r2, r2, r1
 80165c6:	eba8 0003 	sub.w	r0, r8, r3
 80165ca:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80165ce:	d44e      	bmi.n	801666e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 80165d0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80165d4:	fb92 f1fc 	sdiv	r1, r2, ip
 80165d8:	2202      	movs	r2, #2
 80165da:	fb91 f1f2 	sdiv	r1, r1, r2
 80165de:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 80165e2:	4413      	add	r3, r2
 80165e4:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80165e8:	1ad2      	subs	r2, r2, r3
 80165ea:	b212      	sxth	r2, r2
 80165ec:	3a01      	subs	r2, #1
 80165ee:	f005 fee2 	bl	801c3b6 <_ZN8touchgfx6muldivElll>
 80165f2:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 80165f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	db44      	blt.n	8016686 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 80165fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016600:	fb93 f3f2 	sdiv	r3, r3, r2
 8016604:	2202      	movs	r2, #2
 8016606:	fb93 f3f2 	sdiv	r3, r3, r2
 801660a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801660e:	2020      	movs	r0, #32
 8016610:	429d      	cmp	r5, r3
 8016612:	bfde      	ittt	le
 8016614:	461a      	movle	r2, r3
 8016616:	462b      	movle	r3, r5
 8016618:	4615      	movle	r5, r2
 801661a:	b21b      	sxth	r3, r3
 801661c:	2d00      	cmp	r5, #0
 801661e:	bfaa      	itet	ge
 8016620:	351f      	addge	r5, #31
 8016622:	fb95 f5f0 	sdivlt	r5, r5, r0
 8016626:	116d      	asrge	r5, r5, #5
 8016628:	fb93 f3f0 	sdiv	r3, r3, r0
 801662c:	b22d      	sxth	r5, r5
 801662e:	803b      	strh	r3, [r7, #0]
 8016630:	2d00      	cmp	r5, #0
 8016632:	8035      	strh	r5, [r6, #0]
 8016634:	da33      	bge.n	801669e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8016636:	2000      	movs	r0, #0
 8016638:	8030      	strh	r0, [r6, #0]
 801663a:	8038      	strh	r0, [r7, #0]
 801663c:	e787      	b.n	801654e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801663e:	f06f 0101 	mvn.w	r1, #1
 8016642:	fb01 5303 	mla	r3, r1, r3, r5
 8016646:	1e59      	subs	r1, r3, #1
 8016648:	2302      	movs	r3, #2
 801664a:	fb91 f1f5 	sdiv	r1, r1, r5
 801664e:	fb91 f1f3 	sdiv	r1, r1, r3
 8016652:	4249      	negs	r1, r1
 8016654:	e7a0      	b.n	8016598 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8016656:	f06f 0301 	mvn.w	r3, #1
 801665a:	2502      	movs	r5, #2
 801665c:	fb03 c301 	mla	r3, r3, r1, ip
 8016660:	3b01      	subs	r3, #1
 8016662:	fb93 f3fc 	sdiv	r3, r3, ip
 8016666:	fb93 f3f5 	sdiv	r3, r3, r5
 801666a:	425b      	negs	r3, r3
 801666c:	e7a4      	b.n	80165b8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 801666e:	f06f 0101 	mvn.w	r1, #1
 8016672:	fb01 c202 	mla	r2, r1, r2, ip
 8016676:	1e51      	subs	r1, r2, #1
 8016678:	2202      	movs	r2, #2
 801667a:	fb91 f1fc 	sdiv	r1, r1, ip
 801667e:	fb91 f1f2 	sdiv	r1, r1, r2
 8016682:	4249      	negs	r1, r1
 8016684:	e7ab      	b.n	80165de <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8016686:	f06f 0101 	mvn.w	r1, #1
 801668a:	fb01 2303 	mla	r3, r1, r3, r2
 801668e:	3b01      	subs	r3, #1
 8016690:	fb93 f3f2 	sdiv	r3, r3, r2
 8016694:	2202      	movs	r2, #2
 8016696:	fb93 f3f2 	sdiv	r3, r3, r2
 801669a:	425b      	negs	r3, r3
 801669c:	e7b5      	b.n	801660a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 801669e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80166a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80166a6:	4293      	cmp	r3, r2
 80166a8:	dc05      	bgt.n	80166b6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80166aa:	3b01      	subs	r3, #1
 80166ac:	2000      	movs	r0, #0
 80166ae:	b21b      	sxth	r3, r3
 80166b0:	8033      	strh	r3, [r6, #0]
 80166b2:	803b      	strh	r3, [r7, #0]
 80166b4:	e74b      	b.n	801654e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80166b6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80166ba:	803a      	strh	r2, [r7, #0]
 80166bc:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80166c0:	f9b6 2000 	ldrsh.w	r2, [r6]
 80166c4:	4293      	cmp	r3, r2
 80166c6:	bfdc      	itt	le
 80166c8:	f103 33ff 	addle.w	r3, r3, #4294967295
 80166cc:	b21a      	sxthle	r2, r3
 80166ce:	8032      	strh	r2, [r6, #0]
 80166d0:	e750      	b.n	8016574 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

080166d4 <_ZN8touchgfx9ContainerC1Ev>:
 80166d4:	2101      	movs	r1, #1
 80166d6:	2200      	movs	r2, #0
 80166d8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80166dc:	4909      	ldr	r1, [pc, #36]	@ (8016704 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 80166de:	8082      	strh	r2, [r0, #4]
 80166e0:	80c2      	strh	r2, [r0, #6]
 80166e2:	8102      	strh	r2, [r0, #8]
 80166e4:	8142      	strh	r2, [r0, #10]
 80166e6:	8182      	strh	r2, [r0, #12]
 80166e8:	81c2      	strh	r2, [r0, #14]
 80166ea:	8202      	strh	r2, [r0, #16]
 80166ec:	8242      	strh	r2, [r0, #18]
 80166ee:	61c2      	str	r2, [r0, #28]
 80166f0:	8402      	strh	r2, [r0, #32]
 80166f2:	8442      	strh	r2, [r0, #34]	@ 0x22
 80166f4:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80166f8:	6001      	str	r1, [r0, #0]
 80166fa:	6282      	str	r2, [r0, #40]	@ 0x28
 80166fc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016700:	4770      	bx	lr
 8016702:	bf00      	nop
 8016704:	0802dbec 	.word	0x0802dbec

08016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8016708:	6800      	ldr	r0, [r0, #0]
 801670a:	2800      	cmp	r0, #0
 801670c:	bfbd      	ittte	lt
 801670e:	380f      	sublt	r0, #15
 8016710:	2320      	movlt	r3, #32
 8016712:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016716:	3010      	addge	r0, #16
 8016718:	bfa8      	it	ge
 801671a:	1140      	asrge	r0, r0, #5
 801671c:	4770      	bx	lr

0801671e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 801671e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016722:	4605      	mov	r5, r0
 8016724:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8016728:	4688      	mov	r8, r1
 801672a:	4691      	mov	r9, r2
 801672c:	469a      	mov	sl, r3
 801672e:	b360      	cbz	r0, 801678a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8016730:	2700      	movs	r7, #0
 8016732:	f04f 3bff 	mov.w	fp, #4294967295
 8016736:	b23e      	sxth	r6, r7
 8016738:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 801673c:	42b3      	cmp	r3, r6
 801673e:	dd23      	ble.n	8016788 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8016740:	682b      	ldr	r3, [r5, #0]
 8016742:	4631      	mov	r1, r6
 8016744:	4628      	mov	r0, r5
 8016746:	3701      	adds	r7, #1
 8016748:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801674c:	4798      	blx	r3
 801674e:	9001      	str	r0, [sp, #4]
 8016750:	a801      	add	r0, sp, #4
 8016752:	f7ff ffd9 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016756:	682b      	ldr	r3, [r5, #0]
 8016758:	eba0 0008 	sub.w	r0, r0, r8
 801675c:	4631      	mov	r1, r6
 801675e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016762:	b204      	sxth	r4, r0
 8016764:	4628      	mov	r0, r5
 8016766:	4798      	blx	r3
 8016768:	9001      	str	r0, [sp, #4]
 801676a:	a801      	add	r0, sp, #4
 801676c:	f7ff ffcc 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016770:	eba0 0009 	sub.w	r0, r0, r9
 8016774:	fb10 f000 	smulbb	r0, r0, r0
 8016778:	fb04 0404 	mla	r4, r4, r4, r0
 801677c:	455c      	cmp	r4, fp
 801677e:	bf3c      	itt	cc
 8016780:	f8aa 6000 	strhcc.w	r6, [sl]
 8016784:	46a3      	movcc	fp, r4
 8016786:	e7d6      	b.n	8016736 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8016788:	2001      	movs	r0, #1
 801678a:	b003      	add	sp, #12
 801678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016790 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8016790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016794:	460e      	mov	r6, r1
 8016796:	2100      	movs	r1, #0
 8016798:	4605      	mov	r5, r0
 801679a:	4617      	mov	r7, r2
 801679c:	8011      	strh	r1, [r2, #0]
 801679e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80167a2:	b36b      	cbz	r3, 8016800 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 80167a4:	6803      	ldr	r3, [r0, #0]
 80167a6:	f10d 0808 	add.w	r8, sp, #8
 80167aa:	2401      	movs	r4, #1
 80167ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80167b0:	4798      	blx	r3
 80167b2:	f848 0d04 	str.w	r0, [r8, #-4]!
 80167b6:	4640      	mov	r0, r8
 80167b8:	f7ff ffa6 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80167bc:	b200      	sxth	r0, r0
 80167be:	1b80      	subs	r0, r0, r6
 80167c0:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 80167c4:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 80167c8:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 80167cc:	42a3      	cmp	r3, r4
 80167ce:	dd1b      	ble.n	8016808 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 80167d0:	682b      	ldr	r3, [r5, #0]
 80167d2:	4621      	mov	r1, r4
 80167d4:	4628      	mov	r0, r5
 80167d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80167da:	4798      	blx	r3
 80167dc:	9001      	str	r0, [sp, #4]
 80167de:	4640      	mov	r0, r8
 80167e0:	f7ff ff92 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80167e4:	b200      	sxth	r0, r0
 80167e6:	1b80      	subs	r0, r0, r6
 80167e8:	2800      	cmp	r0, #0
 80167ea:	bfb8      	it	lt
 80167ec:	4240      	neglt	r0, r0
 80167ee:	4548      	cmp	r0, r9
 80167f0:	bf38      	it	cc
 80167f2:	803c      	strhcc	r4, [r7, #0]
 80167f4:	f104 0401 	add.w	r4, r4, #1
 80167f8:	bf38      	it	cc
 80167fa:	4681      	movcc	r9, r0
 80167fc:	b224      	sxth	r4, r4
 80167fe:	e7e3      	b.n	80167c8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8016800:	4618      	mov	r0, r3
 8016802:	b003      	add	sp, #12
 8016804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016808:	2001      	movs	r0, #1
 801680a:	e7fa      	b.n	8016802 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

0801680c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 801680c:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8016810:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016814:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8016818:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 801681c:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8016820:	4770      	bx	lr

08016822 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8016822:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016824:	4604      	mov	r4, r0
 8016826:	3038      	adds	r0, #56	@ 0x38
 8016828:	460d      	mov	r5, r1
 801682a:	f7fc fa01 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801682e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8016832:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016836:	4628      	mov	r0, r5
 8016838:	9200      	str	r2, [sp, #0]
 801683a:	2200      	movs	r2, #0
 801683c:	4611      	mov	r1, r2
 801683e:	f7ed fc88 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016842:	b003      	add	sp, #12
 8016844:	bd30      	pop	{r4, r5, pc}

08016846 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8016846:	b538      	push	{r3, r4, r5, lr}
 8016848:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801684c:	460d      	mov	r5, r1
 801684e:	428b      	cmp	r3, r1
 8016850:	dd08      	ble.n	8016864 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8016852:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8016854:	b134      	cbz	r4, 8016864 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8016856:	6823      	ldr	r3, [r4, #0]
 8016858:	4620      	mov	r0, r4
 801685a:	4629      	mov	r1, r5
 801685c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801685e:	4798      	blx	r3
 8016860:	69a4      	ldr	r4, [r4, #24]
 8016862:	e7f7      	b.n	8016854 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8016864:	bd38      	pop	{r3, r4, r5, pc}

08016866 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8016866:	b570      	push	{r4, r5, r6, lr}
 8016868:	4606      	mov	r6, r0
 801686a:	460d      	mov	r5, r1
 801686c:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8016870:	b134      	cbz	r4, 8016880 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8016872:	6823      	ldr	r3, [r4, #0]
 8016874:	4620      	mov	r0, r4
 8016876:	4629      	mov	r1, r5
 8016878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801687a:	4798      	blx	r3
 801687c:	69a4      	ldr	r4, [r4, #24]
 801687e:	e7f7      	b.n	8016870 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8016880:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8016884:	b134      	cbz	r4, 8016894 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8016886:	6823      	ldr	r3, [r4, #0]
 8016888:	4620      	mov	r0, r4
 801688a:	4629      	mov	r1, r5
 801688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801688e:	4798      	blx	r3
 8016890:	69a4      	ldr	r4, [r4, #24]
 8016892:	e7f7      	b.n	8016884 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8016894:	bd70      	pop	{r4, r5, r6, pc}

08016896 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8016896:	b538      	push	{r3, r4, r5, lr}
 8016898:	4604      	mov	r4, r0
 801689a:	2500      	movs	r5, #0
 801689c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80168a0:	42ab      	cmp	r3, r5
 80168a2:	db05      	blt.n	80168b0 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 80168a4:	b229      	sxth	r1, r5
 80168a6:	4620      	mov	r0, r4
 80168a8:	f7ff ffdd 	bl	8016866 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80168ac:	3501      	adds	r5, #1
 80168ae:	e7f5      	b.n	801689c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 80168b0:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80168b4:	f005 f86f 	bl	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>
 80168b8:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80168bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168c0:	f005 b869 	b.w	801b996 <_ZNK8touchgfx8Drawable10invalidateEv>

080168c4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80168c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80168c6:	4604      	mov	r4, r0
 80168c8:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80168ca:	b15d      	cbz	r5, 80168e4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80168cc:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80168d0:	4628      	mov	r0, r5
 80168d2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80168d6:	9200      	str	r2, [sp, #0]
 80168d8:	2200      	movs	r2, #0
 80168da:	4611      	mov	r1, r2
 80168dc:	f7ed fc39 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168e0:	69ad      	ldr	r5, [r5, #24]
 80168e2:	e7f2      	b.n	80168ca <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 80168e4:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 80168e8:	b15d      	cbz	r5, 8016902 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 80168ea:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 80168ee:	4628      	mov	r0, r5
 80168f0:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 80168f4:	9200      	str	r2, [sp, #0]
 80168f6:	2200      	movs	r2, #0
 80168f8:	4611      	mov	r1, r2
 80168fa:	f7ed fc2a 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 80168fe:	69ad      	ldr	r5, [r5, #24]
 8016900:	e7f2      	b.n	80168e8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8016902:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8016906:	b15d      	cbz	r5, 8016920 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8016908:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 801690c:	4628      	mov	r0, r5
 801690e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8016912:	9200      	str	r2, [sp, #0]
 8016914:	2200      	movs	r2, #0
 8016916:	4611      	mov	r1, r2
 8016918:	f7ed fc1b 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 801691c:	69ad      	ldr	r5, [r5, #24]
 801691e:	e7f2      	b.n	8016906 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8016920:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8016924:	b15d      	cbz	r5, 801693e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8016926:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 801692a:	4628      	mov	r0, r5
 801692c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8016930:	9200      	str	r2, [sp, #0]
 8016932:	2200      	movs	r2, #0
 8016934:	4611      	mov	r1, r2
 8016936:	f7ed fc0c 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 801693a:	69ad      	ldr	r5, [r5, #24]
 801693c:	e7f2      	b.n	8016924 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801693e:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8016942:	b15d      	cbz	r5, 801695c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8016944:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8016948:	4628      	mov	r0, r5
 801694a:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 801694e:	9200      	str	r2, [sp, #0]
 8016950:	2200      	movs	r2, #0
 8016952:	4611      	mov	r1, r2
 8016954:	f7ed fbfd 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016958:	69ad      	ldr	r5, [r5, #24]
 801695a:	e7f2      	b.n	8016942 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 801695c:	6823      	ldr	r3, [r4, #0]
 801695e:	4620      	mov	r0, r4
 8016960:	695b      	ldr	r3, [r3, #20]
 8016962:	b003      	add	sp, #12
 8016964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016968:	4718      	bx	r3

0801696a <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 801696a:	b430      	push	{r4, r5}
 801696c:	b28a      	uxth	r2, r1
 801696e:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8016972:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8016976:	1b15      	subs	r5, r2, r4
 8016978:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 801697c:	8101      	strh	r1, [r0, #8]
 801697e:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8016982:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8016986:	442c      	add	r4, r5
 8016988:	1b12      	subs	r2, r2, r4
 801698a:	bc30      	pop	{r4, r5}
 801698c:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016990:	f7ff bf98 	b.w	80168c4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016994 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8016994:	b430      	push	{r4, r5}
 8016996:	b28a      	uxth	r2, r1
 8016998:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 801699c:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 80169a0:	1b15      	subs	r5, r2, r4
 80169a2:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 80169a6:	8141      	strh	r1, [r0, #10]
 80169a8:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 80169ac:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 80169b0:	442c      	add	r4, r5
 80169b2:	1b12      	subs	r2, r2, r4
 80169b4:	bc30      	pop	{r4, r5}
 80169b6:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80169ba:	f7ff bf83 	b.w	80168c4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

080169be <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 80169be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80169c2:	fa1f fa83 	uxth.w	sl, r3
 80169c6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 80169ca:	4615      	mov	r5, r2
 80169cc:	4699      	mov	r9, r3
 80169ce:	fa1f f887 	uxth.w	r8, r7
 80169d2:	8903      	ldrh	r3, [r0, #8]
 80169d4:	4452      	add	r2, sl
 80169d6:	4604      	mov	r4, r0
 80169d8:	8940      	ldrh	r0, [r0, #10]
 80169da:	460e      	mov	r6, r1
 80169dc:	1a9b      	subs	r3, r3, r2
 80169de:	eb08 0201 	add.w	r2, r8, r1
 80169e2:	1a80      	subs	r0, r0, r2
 80169e4:	b21b      	sxth	r3, r3
 80169e6:	460a      	mov	r2, r1
 80169e8:	4629      	mov	r1, r5
 80169ea:	b200      	sxth	r0, r0
 80169ec:	9000      	str	r0, [sp, #0]
 80169ee:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80169f2:	f7ed fbae 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 80169f6:	2200      	movs	r2, #0
 80169f8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80169fc:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8016a00:	4611      	mov	r1, r2
 8016a02:	9600      	str	r6, [sp, #0]
 8016a04:	f7ed fba5 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a08:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8016a12:	9300      	str	r3, [sp, #0]
 8016a14:	462b      	mov	r3, r5
 8016a16:	4611      	mov	r1, r2
 8016a18:	f7ed fb9b 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a1c:	8921      	ldrh	r1, [r4, #8]
 8016a1e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016a22:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8016a26:	eba1 010a 	sub.w	r1, r1, sl
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	9300      	str	r3, [sp, #0]
 8016a2e:	464b      	mov	r3, r9
 8016a30:	b209      	sxth	r1, r1
 8016a32:	f7ed fb8e 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a36:	8962      	ldrh	r2, [r4, #10]
 8016a38:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016a3c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016a40:	eba2 0208 	sub.w	r2, r2, r8
 8016a44:	9700      	str	r7, [sp, #0]
 8016a46:	2100      	movs	r1, #0
 8016a48:	b212      	sxth	r2, r2
 8016a4a:	f7ed fb82 	bl	8004152 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016a4e:	4620      	mov	r0, r4
 8016a50:	b002      	add	sp, #8
 8016a52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a56:	f7ff bf35 	b.w	80168c4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08016a5c <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8016a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a60:	b085      	sub	sp, #20
 8016a62:	4604      	mov	r4, r0
 8016a64:	2601      	movs	r6, #1
 8016a66:	2500      	movs	r5, #0
 8016a68:	9103      	str	r1, [sp, #12]
 8016a6a:	f7ff fe33 	bl	80166d4 <_ZN8touchgfx9ContainerC1Ev>
 8016a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8016b20 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8016a70:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8016a74:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8016a78:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8016a7c:	6023      	str	r3, [r4, #0]
 8016a7e:	23ff      	movs	r3, #255	@ 0xff
 8016a80:	4658      	mov	r0, fp
 8016a82:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8016a86:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016a8a:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8016a8e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8016a92:	f7ff fe1f 	bl	80166d4 <_ZN8touchgfx9ContainerC1Ev>
 8016a96:	4648      	mov	r0, r9
 8016a98:	f7ff fe1c 	bl	80166d4 <_ZN8touchgfx9ContainerC1Ev>
 8016a9c:	4640      	mov	r0, r8
 8016a9e:	f7ff fe19 	bl	80166d4 <_ZN8touchgfx9ContainerC1Ev>
 8016aa2:	4650      	mov	r0, sl
 8016aa4:	f7ff fe16 	bl	80166d4 <_ZN8touchgfx9ContainerC1Ev>
 8016aa8:	4638      	mov	r0, r7
 8016aaa:	f7ff fe13 	bl	80166d4 <_ZN8touchgfx9ContainerC1Ev>
 8016aae:	9903      	ldr	r1, [sp, #12]
 8016ab0:	4620      	mov	r0, r4
 8016ab2:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 8016ab6:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 8016aba:	4659      	mov	r1, fp
 8016abc:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8016ac0:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8016ac4:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8016ac8:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8016acc:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8016ad0:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8016ad4:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8016ad8:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8016adc:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 8016ae0:	f7fc f8a6 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016ae4:	4651      	mov	r1, sl
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	f7fc f8a2 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016aec:	4649      	mov	r1, r9
 8016aee:	4620      	mov	r0, r4
 8016af0:	f7fc f89e 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016af4:	4641      	mov	r1, r8
 8016af6:	4620      	mov	r0, r4
 8016af8:	f7fc f89a 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016afc:	4639      	mov	r1, r7
 8016afe:	4620      	mov	r0, r4
 8016b00:	f7fc f896 	bl	8012c30 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016b04:	4620      	mov	r0, r4
 8016b06:	9500      	str	r5, [sp, #0]
 8016b08:	462b      	mov	r3, r5
 8016b0a:	462a      	mov	r2, r5
 8016b0c:	4629      	mov	r1, r5
 8016b0e:	f7ff ff56 	bl	80169be <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8016b12:	4620      	mov	r0, r4
 8016b14:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8016b18:	b005      	add	sp, #20
 8016b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b1e:	bf00      	nop
 8016b20:	0802e038 	.word	0x0802e038

08016b24 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8016b24:	4291      	cmp	r1, r2
 8016b26:	4613      	mov	r3, r2
 8016b28:	d003      	beq.n	8016b32 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8016b2a:	460a      	mov	r2, r1
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	f005 bc42 	b.w	801c3b6 <_ZN8touchgfx6muldivElll>
 8016b32:	4770      	bx	lr

08016b34 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8016b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b38:	6803      	ldr	r3, [r0, #0]
 8016b3a:	460d      	mov	r5, r1
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b42:	4798      	blx	r3
 8016b44:	42a8      	cmp	r0, r5
 8016b46:	4606      	mov	r6, r0
 8016b48:	d024      	beq.n	8016b94 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8016b4a:	6823      	ldr	r3, [r4, #0]
 8016b4c:	4601      	mov	r1, r0
 8016b4e:	462a      	mov	r2, r5
 8016b50:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8016b54:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8016b58:	f7ff ffe4 	bl	8016b24 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	462a      	mov	r2, r5
 8016b60:	4631      	mov	r1, r6
 8016b62:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8016b66:	f7ff ffdd 	bl	8016b24 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b6a:	4641      	mov	r1, r8
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	4620      	mov	r0, r4
 8016b70:	47b8      	blx	r7
 8016b72:	462a      	mov	r2, r5
 8016b74:	4631      	mov	r1, r6
 8016b76:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8016b7a:	f7ff ffd3 	bl	8016b24 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b7e:	462a      	mov	r2, r5
 8016b80:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8016b84:	4631      	mov	r1, r6
 8016b86:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8016b8a:	f7ff ffcb 	bl	8016b24 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016b8e:	6325      	str	r5, [r4, #48]	@ 0x30
 8016b90:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8016b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b98 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8016b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	460f      	mov	r7, r1
 8016ba0:	b1b2      	cbz	r2, 8016bd0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8016ba2:	6803      	ldr	r3, [r0, #0]
 8016ba4:	2600      	movs	r6, #0
 8016ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016baa:	4798      	blx	r3
 8016bac:	4681      	mov	r9, r0
 8016bae:	b235      	sxth	r5, r6
 8016bb0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016bb4:	3601      	adds	r6, #1
 8016bb6:	42ab      	cmp	r3, r5
 8016bb8:	dd0a      	ble.n	8016bd0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8016bba:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8016bbe:	463a      	mov	r2, r7
 8016bc0:	4649      	mov	r1, r9
 8016bc2:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8016bc6:	f7ff ffad 	bl	8016b24 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016bca:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8016bce:	e7ee      	b.n	8016bae <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8016bd0:	6367      	str	r7, [r4, #52]	@ 0x34
 8016bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016bd6 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8016bd6:	b570      	push	{r4, r5, r6, lr}
 8016bd8:	6803      	ldr	r3, [r0, #0]
 8016bda:	4604      	mov	r4, r0
 8016bdc:	460d      	mov	r5, r1
 8016bde:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016be2:	4798      	blx	r3
 8016be4:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8016be8:	4629      	mov	r1, r5
 8016bea:	4620      	mov	r0, r4
 8016bec:	3301      	adds	r3, #1
 8016bee:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8016bf2:	6823      	ldr	r3, [r4, #0]
 8016bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bf8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016bfc:	4718      	bx	r3

08016bfe <_ZN8touchgfx16GraphElementLineD1Ev>:
 8016bfe:	4770      	bx	lr

08016c00 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8016c00:	b510      	push	{r4, lr}
 8016c02:	4604      	mov	r4, r0
 8016c04:	2130      	movs	r1, #48	@ 0x30
 8016c06:	f012 f9c7 	bl	8028f98 <_ZdlPvj>
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	bd10      	pop	{r4, pc}

08016c0e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8016c0e:	6800      	ldr	r0, [r0, #0]
 8016c10:	2800      	cmp	r0, #0
 8016c12:	bfb9      	ittee	lt
 8016c14:	2320      	movlt	r3, #32
 8016c16:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016c1a:	301f      	addge	r0, #31
 8016c1c:	1140      	asrge	r0, r0, #5
 8016c1e:	4770      	bx	lr

08016c20 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8016c20:	b510      	push	{r4, lr}
 8016c22:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016c26:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8016c2a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016c2e:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8016c32:	139b      	asrs	r3, r3, #14
 8016c34:	13a4      	asrs	r4, r4, #14
 8016c36:	429c      	cmp	r4, r3
 8016c38:	bfb8      	it	lt
 8016c3a:	461c      	movlt	r4, r3
 8016c3c:	2c01      	cmp	r4, #1
 8016c3e:	dd07      	ble.n	8016c50 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016c40:	fb91 f1f4 	sdiv	r1, r1, r4
 8016c44:	fb90 f0f4 	sdiv	r0, r0, r4
 8016c48:	f7ff ffea 	bl	8016c20 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016c4c:	4360      	muls	r0, r4
 8016c4e:	bd10      	pop	{r4, pc}
 8016c50:	4340      	muls	r0, r0
 8016c52:	fb01 0101 	mla	r1, r1, r1, r0
 8016c56:	2000      	movs	r0, #0
 8016c58:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8016c5c:	bfb4      	ite	lt
 8016c5e:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8016c62:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8016c66:	18c2      	adds	r2, r0, r3
 8016c68:	428a      	cmp	r2, r1
 8016c6a:	bf9c      	itt	ls
 8016c6c:	1898      	addls	r0, r3, r2
 8016c6e:	1a89      	subls	r1, r1, r2
 8016c70:	089b      	lsrs	r3, r3, #2
 8016c72:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8016c76:	d1f6      	bne.n	8016c66 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8016c78:	e7e9      	b.n	8016c4e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08016c7a <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8016c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c7c:	9906      	ldr	r1, [sp, #24]
 8016c7e:	4606      	mov	r6, r0
 8016c80:	461c      	mov	r4, r3
 8016c82:	2020      	movs	r0, #32
 8016c84:	4291      	cmp	r1, r2
 8016c86:	bfbc      	itt	lt
 8016c88:	9206      	strlt	r2, [sp, #24]
 8016c8a:	460a      	movlt	r2, r1
 8016c8c:	9907      	ldr	r1, [sp, #28]
 8016c8e:	428b      	cmp	r3, r1
 8016c90:	bfc4      	itt	gt
 8016c92:	460c      	movgt	r4, r1
 8016c94:	9307      	strgt	r3, [sp, #28]
 8016c96:	fb92 f5f0 	sdiv	r5, r2, r0
 8016c9a:	fb94 f4f0 	sdiv	r4, r4, r0
 8016c9e:	a806      	add	r0, sp, #24
 8016ca0:	f7ff ffb5 	bl	8016c0e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016ca4:	4607      	mov	r7, r0
 8016ca6:	a807      	add	r0, sp, #28
 8016ca8:	f7ff ffb1 	bl	8016c0e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016cac:	1b7a      	subs	r2, r7, r5
 8016cae:	1b00      	subs	r0, r0, r4
 8016cb0:	8035      	strh	r5, [r6, #0]
 8016cb2:	8074      	strh	r4, [r6, #2]
 8016cb4:	80f0      	strh	r0, [r6, #6]
 8016cb6:	4630      	mov	r0, r6
 8016cb8:	80b2      	strh	r2, [r6, #4]
 8016cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016cbc <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8016cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cbe:	9c08      	ldr	r4, [sp, #32]
 8016cc0:	2602      	movs	r6, #2
 8016cc2:	4605      	mov	r5, r0
 8016cc4:	3401      	adds	r4, #1
 8016cc6:	fb94 f4f6 	sdiv	r4, r4, r6
 8016cca:	18a6      	adds	r6, r4, r2
 8016ccc:	191f      	adds	r7, r3, r4
 8016cce:	1b12      	subs	r2, r2, r4
 8016cd0:	1b1b      	subs	r3, r3, r4
 8016cd2:	e9cd 6700 	strd	r6, r7, [sp]
 8016cd6:	f7ff ffd0 	bl	8016c7a <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8016cda:	4628      	mov	r0, r5
 8016cdc:	b003      	add	sp, #12
 8016cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ce0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8016ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ce4:	6943      	ldr	r3, [r0, #20]
 8016ce6:	b087      	sub	sp, #28
 8016ce8:	4606      	mov	r6, r0
 8016cea:	460d      	mov	r5, r1
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d072      	beq.n	8016dd6 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8016cf0:	695c      	ldr	r4, [r3, #20]
 8016cf2:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8016cf6:	6823      	ldr	r3, [r4, #0]
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	017f      	lsls	r7, r7, #5
 8016cfc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016d00:	4798      	blx	r3
 8016d02:	6823      	ldr	r3, [r4, #0]
 8016d04:	4680      	mov	r8, r0
 8016d06:	4629      	mov	r1, r5
 8016d08:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	4798      	blx	r3
 8016d10:	9700      	str	r7, [sp, #0]
 8016d12:	4603      	mov	r3, r0
 8016d14:	4642      	mov	r2, r8
 8016d16:	4631      	mov	r1, r6
 8016d18:	a802      	add	r0, sp, #8
 8016d1a:	f7ff ffcf 	bl	8016cbc <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8016d1e:	2d00      	cmp	r5, #0
 8016d20:	dd1b      	ble.n	8016d5a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8016d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8016d26:	6823      	ldr	r3, [r4, #0]
 8016d28:	4620      	mov	r0, r4
 8016d2a:	fa0f f888 	sxth.w	r8, r8
 8016d2e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016d32:	4641      	mov	r1, r8
 8016d34:	4798      	blx	r3
 8016d36:	6823      	ldr	r3, [r4, #0]
 8016d38:	4681      	mov	r9, r0
 8016d3a:	4641      	mov	r1, r8
 8016d3c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016d40:	4620      	mov	r0, r4
 8016d42:	4798      	blx	r3
 8016d44:	4631      	mov	r1, r6
 8016d46:	4603      	mov	r3, r0
 8016d48:	9700      	str	r7, [sp, #0]
 8016d4a:	a804      	add	r0, sp, #16
 8016d4c:	464a      	mov	r2, r9
 8016d4e:	f7ff ffb5 	bl	8016cbc <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8016d52:	a904      	add	r1, sp, #16
 8016d54:	a802      	add	r0, sp, #8
 8016d56:	f7fc fc71 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016d5a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016d5e:	3b01      	subs	r3, #1
 8016d60:	429d      	cmp	r5, r3
 8016d62:	da19      	bge.n	8016d98 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8016d64:	3501      	adds	r5, #1
 8016d66:	6823      	ldr	r3, [r4, #0]
 8016d68:	4620      	mov	r0, r4
 8016d6a:	b22d      	sxth	r5, r5
 8016d6c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016d70:	4629      	mov	r1, r5
 8016d72:	4798      	blx	r3
 8016d74:	6823      	ldr	r3, [r4, #0]
 8016d76:	4680      	mov	r8, r0
 8016d78:	4629      	mov	r1, r5
 8016d7a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016d7e:	4620      	mov	r0, r4
 8016d80:	4798      	blx	r3
 8016d82:	4631      	mov	r1, r6
 8016d84:	4603      	mov	r3, r0
 8016d86:	9700      	str	r7, [sp, #0]
 8016d88:	a804      	add	r0, sp, #16
 8016d8a:	4642      	mov	r2, r8
 8016d8c:	f7ff ff96 	bl	8016cbc <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8016d90:	a904      	add	r1, sp, #16
 8016d92:	a802      	add	r0, sp, #8
 8016d94:	f7fc fc52 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016d98:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8016d9c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8016da0:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8016da4:	18ca      	adds	r2, r1, r3
 8016da6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8016daa:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016dae:	a904      	add	r1, sp, #16
 8016db0:	1a9b      	subs	r3, r3, r2
 8016db2:	2200      	movs	r2, #0
 8016db4:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016db8:	a802      	add	r0, sp, #8
 8016dba:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016dbe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016dc2:	f7fc f8b9 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8016dc6:	6833      	ldr	r3, [r6, #0]
 8016dc8:	a902      	add	r1, sp, #8
 8016dca:	4630      	mov	r0, r6
 8016dcc:	691b      	ldr	r3, [r3, #16]
 8016dce:	4798      	blx	r3
 8016dd0:	b007      	add	sp, #28
 8016dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	deff      	udf	#255	@ 0xff

08016dda <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8016dda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dde:	b08b      	sub	sp, #44	@ 0x2c
 8016de0:	461e      	mov	r6, r3
 8016de2:	460f      	mov	r7, r1
 8016de4:	4615      	mov	r5, r2
 8016de6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8016dea:	429e      	cmp	r6, r3
 8016dec:	9304      	str	r3, [sp, #16]
 8016dee:	d074      	beq.n	8016eda <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8016df0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8016df4:	4631      	mov	r1, r6
 8016df6:	4610      	mov	r0, r2
 8016df8:	4634      	mov	r4, r6
 8016dfa:	015b      	lsls	r3, r3, #5
 8016dfc:	9303      	str	r3, [sp, #12]
 8016dfe:	6813      	ldr	r3, [r2, #0]
 8016e00:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016e04:	4798      	blx	r3
 8016e06:	ab0a      	add	r3, sp, #40	@ 0x28
 8016e08:	f843 0d10 	str.w	r0, [r3, #-16]!
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ff fc7b 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016e12:	682b      	ldr	r3, [r5, #0]
 8016e14:	4631      	mov	r1, r6
 8016e16:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016e1a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016e1e:	4628      	mov	r0, r5
 8016e20:	4798      	blx	r3
 8016e22:	ab0a      	add	r3, sp, #40	@ 0x28
 8016e24:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7ff fc6d 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016e2e:	4641      	mov	r1, r8
 8016e30:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8016e34:	4638      	mov	r0, r7
 8016e36:	464a      	mov	r2, r9
 8016e38:	f011 fd7a 	bl	8028930 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	9300      	str	r3, [sp, #0]
 8016e40:	4628      	mov	r0, r5
 8016e42:	9b00      	ldr	r3, [sp, #0]
 8016e44:	441c      	add	r4, r3
 8016e46:	682b      	ldr	r3, [r5, #0]
 8016e48:	b224      	sxth	r4, r4
 8016e4a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016e4e:	4621      	mov	r1, r4
 8016e50:	4798      	blx	r3
 8016e52:	9008      	str	r0, [sp, #32]
 8016e54:	a808      	add	r0, sp, #32
 8016e56:	f7ff fc57 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016e5a:	4621      	mov	r1, r4
 8016e5c:	0143      	lsls	r3, r0, #5
 8016e5e:	4628      	mov	r0, r5
 8016e60:	9301      	str	r3, [sp, #4]
 8016e62:	682b      	ldr	r3, [r5, #0]
 8016e64:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016e68:	4798      	blx	r3
 8016e6a:	9009      	str	r0, [sp, #36]	@ 0x24
 8016e6c:	a809      	add	r0, sp, #36	@ 0x24
 8016e6e:	f7ff fc4b 	bl	8016708 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016e72:	0143      	lsls	r3, r0, #5
 8016e74:	9302      	str	r3, [sp, #8]
 8016e76:	9b01      	ldr	r3, [sp, #4]
 8016e78:	eba3 0b08 	sub.w	fp, r3, r8
 8016e7c:	9b02      	ldr	r3, [sp, #8]
 8016e7e:	eba3 0a09 	sub.w	sl, r3, r9
 8016e82:	4658      	mov	r0, fp
 8016e84:	4651      	mov	r1, sl
 8016e86:	f7ff fecb 	bl	8016c20 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016e8a:	b320      	cbz	r0, 8016ed6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8016e8c:	4602      	mov	r2, r0
 8016e8e:	4651      	mov	r1, sl
 8016e90:	9005      	str	r0, [sp, #20]
 8016e92:	9803      	ldr	r0, [sp, #12]
 8016e94:	f005 fa8f 	bl	801c3b6 <_ZN8touchgfx6muldivElll>
 8016e98:	2302      	movs	r3, #2
 8016e9a:	4659      	mov	r1, fp
 8016e9c:	fb90 faf3 	sdiv	sl, r0, r3
 8016ea0:	9b05      	ldr	r3, [sp, #20]
 8016ea2:	9803      	ldr	r0, [sp, #12]
 8016ea4:	461a      	mov	r2, r3
 8016ea6:	f005 fa86 	bl	801c3b6 <_ZN8touchgfx6muldivElll>
 8016eaa:	2302      	movs	r3, #2
 8016eac:	eba8 010a 	sub.w	r1, r8, sl
 8016eb0:	fb90 fbf3 	sdiv	fp, r0, r3
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	eb0b 0209 	add.w	r2, fp, r9
 8016eba:	4638      	mov	r0, r7
 8016ebc:	689b      	ldr	r3, [r3, #8]
 8016ebe:	4798      	blx	r3
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	9a02      	ldr	r2, [sp, #8]
 8016ec4:	4638      	mov	r0, r7
 8016ec6:	9901      	ldr	r1, [sp, #4]
 8016ec8:	689b      	ldr	r3, [r3, #8]
 8016eca:	445a      	add	r2, fp
 8016ecc:	eba1 010a 	sub.w	r1, r1, sl
 8016ed0:	4798      	blx	r3
 8016ed2:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8016ed6:	42a6      	cmp	r6, r4
 8016ed8:	db02      	blt.n	8016ee0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8016eda:	b00b      	add	sp, #44	@ 0x2c
 8016edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee0:	9b00      	ldr	r3, [sp, #0]
 8016ee2:	9a04      	ldr	r2, [sp, #16]
 8016ee4:	42a2      	cmp	r2, r4
 8016ee6:	bf08      	it	eq
 8016ee8:	f04f 33ff 	moveq.w	r3, #4294967295
 8016eec:	e7a7      	b.n	8016e3e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>
	...

08016ef0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8016ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef4:	6943      	ldr	r3, [r0, #20]
 8016ef6:	b0a4      	sub	sp, #144	@ 0x90
 8016ef8:	4605      	mov	r5, r0
 8016efa:	460f      	mov	r7, r1
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d077      	beq.n	8016ff0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8016f00:	695c      	ldr	r4, [r3, #20]
 8016f02:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	dc04      	bgt.n	8016f14 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8016f0a:	2401      	movs	r4, #1
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	b024      	add	sp, #144	@ 0x90
 8016f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f14:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8016f18:	ae24      	add	r6, sp, #144	@ 0x90
 8016f1a:	011b      	lsls	r3, r3, #4
 8016f1c:	f846 3d74 	str.w	r3, [r6, #-116]!
 8016f20:	4630      	mov	r0, r6
 8016f22:	f7ff fe74 	bl	8016c0e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016f26:	8839      	ldrh	r1, [r7, #0]
 8016f28:	88ba      	ldrh	r2, [r7, #4]
 8016f2a:	b280      	uxth	r0, r0
 8016f2c:	6823      	ldr	r3, [r4, #0]
 8016f2e:	440a      	add	r2, r1
 8016f30:	1a09      	subs	r1, r1, r0
 8016f32:	4402      	add	r2, r0
 8016f34:	f10d 000a 	add.w	r0, sp, #10
 8016f38:	b209      	sxth	r1, r1
 8016f3a:	9000      	str	r0, [sp, #0]
 8016f3c:	b212      	sxth	r2, r2
 8016f3e:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8016f42:	4620      	mov	r0, r4
 8016f44:	ab02      	add	r3, sp, #8
 8016f46:	47c0      	blx	r8
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d0de      	beq.n	8016f0a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8016f4c:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8016f50:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8016f54:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8016f58:	18ca      	adds	r2, r1, r3
 8016f5a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8016f5e:	f8ad 100e 	strh.w	r1, [sp, #14]
 8016f62:	4639      	mov	r1, r7
 8016f64:	1a9b      	subs	r3, r3, r2
 8016f66:	2200      	movs	r2, #0
 8016f68:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016f6c:	a803      	add	r0, sp, #12
 8016f6e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016f72:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016f76:	f7fb ffdf 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8016f7a:	4629      	mov	r1, r5
 8016f7c:	a805      	add	r0, sp, #20
 8016f7e:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8016f80:	f004 fda4 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f84:	682b      	ldr	r3, [r5, #0]
 8016f86:	4628      	mov	r0, r5
 8016f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016f8a:	4798      	blx	r3
 8016f8c:	ab03      	add	r3, sp, #12
 8016f8e:	9000      	str	r0, [sp, #0]
 8016f90:	aa05      	add	r2, sp, #20
 8016f92:	4639      	mov	r1, r7
 8016f94:	4630      	mov	r0, r6
 8016f96:	f011 fb7f 	bl	8028698 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8016f9a:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8016f9e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016fa2:	2f00      	cmp	r7, #0
 8016fa4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016fa8:	dd03      	ble.n	8016fb2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8016faa:	42bb      	cmp	r3, r7
 8016fac:	da01      	bge.n	8016fb2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8016fae:	42ba      	cmp	r2, r7
 8016fb0:	da11      	bge.n	8016fd6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 8016fb2:	9200      	str	r2, [sp, #0]
 8016fb4:	4622      	mov	r2, r4
 8016fb6:	4631      	mov	r1, r6
 8016fb8:	4628      	mov	r0, r5
 8016fba:	f7ff ff0e 	bl	8016dda <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8016fbe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016fc2:	4630      	mov	r0, r6
 8016fc4:	f011 fbfc 	bl	80287c0 <_ZN8touchgfx6Canvas6renderEh>
 8016fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8016ff8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 8016fca:	4604      	mov	r4, r0
 8016fcc:	a80c      	add	r0, sp, #48	@ 0x30
 8016fce:	9307      	str	r3, [sp, #28]
 8016fd0:	f001 f8c8 	bl	8018164 <_ZN8touchgfx7OutlineD1Ev>
 8016fd4:	e79a      	b.n	8016f0c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8016fd6:	1e7a      	subs	r2, r7, #1
 8016fd8:	4631      	mov	r1, r6
 8016fda:	4628      	mov	r0, r5
 8016fdc:	b212      	sxth	r2, r2
 8016fde:	9200      	str	r2, [sp, #0]
 8016fe0:	4622      	mov	r2, r4
 8016fe2:	f7ff fefa 	bl	8016dda <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8016fe6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	463b      	mov	r3, r7
 8016fee:	e7e1      	b.n	8016fb4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8016ff0:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8016ff4:	deff      	udf	#255	@ 0xff
 8016ff6:	bf00      	nop
 8016ff8:	0802e814 	.word	0x0802e814

08016ffc <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 8016ffc:	b510      	push	{r4, lr}
 8016ffe:	4604      	mov	r4, r0
 8017000:	f7ff fc49 	bl	8016896 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8017004:	4620      	mov	r0, r4
 8017006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801700a:	f7ff ba1a 	b.w	8016442 <_ZN8touchgfx17AbstractDataGraph5clearEv>

0801700e <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 801700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017010:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8017014:	460f      	mov	r7, r1
 8017016:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 801701a:	4604      	mov	r4, r0
 801701c:	1c6b      	adds	r3, r5, #1
 801701e:	4629      	mov	r1, r5
 8017020:	f8a0 311e 	strh.w	r3, [r0, #286]	@ 0x11e
 8017024:	6803      	ldr	r3, [r0, #0]
 8017026:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801702a:	4798      	blx	r3
 801702c:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8017030:	b915      	cbnz	r5, 8017038 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8017032:	4620      	mov	r0, r4
 8017034:	f7ff fc2f 	bl	8016896 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8017038:	4620      	mov	r0, r4
 801703a:	4629      	mov	r1, r5
 801703c:	f7ff fc03 	bl	8016846 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8017040:	4628      	mov	r0, r5
 8017042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017044 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 8017044:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	@ 0x11e
 8017048:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 801704c:	4291      	cmp	r1, r2
 801704e:	db03      	blt.n	8017058 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 8017050:	6803      	ldr	r3, [r0, #0]
 8017052:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017056:	4718      	bx	r3
 8017058:	4770      	bx	lr

0801705a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801705a:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801705e:	4770      	bx	lr

08017060 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8017060:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8017064:	4770      	bx	lr

08017066 <_ZN8touchgfx13ScalableImageD1Ev>:
 8017066:	4770      	bx	lr

08017068 <_ZN8touchgfx13ScalableImageD0Ev>:
 8017068:	b510      	push	{r4, lr}
 801706a:	4604      	mov	r4, r0
 801706c:	212c      	movs	r1, #44	@ 0x2c
 801706e:	f011 ff93 	bl	8028f98 <_ZdlPvj>
 8017072:	4620      	mov	r0, r4
 8017074:	bd10      	pop	{r4, pc}

08017076 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8017076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017078:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801707c:	b085      	sub	sp, #20
 801707e:	4604      	mov	r4, r0
 8017080:	460d      	mov	r5, r1
 8017082:	2bff      	cmp	r3, #255	@ 0xff
 8017084:	d128      	bne.n	80170d8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8017086:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 801708a:	4668      	mov	r0, sp
 801708c:	4631      	mov	r1, r6
 801708e:	f007 f9d1 	bl	801e434 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017092:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8017096:	4630      	mov	r0, r6
 8017098:	f007 f964 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801709c:	4287      	cmp	r7, r0
 801709e:	d11b      	bne.n	80170d8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80170a0:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80170a4:	4630      	mov	r0, r6
 80170a6:	f007 f991 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80170aa:	4287      	cmp	r7, r0
 80170ac:	d114      	bne.n	80170d8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80170ae:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80170b2:	2100      	movs	r1, #0
 80170b4:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80170b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80170bc:	466b      	mov	r3, sp
 80170be:	9102      	str	r1, [sp, #8]
 80170c0:	f8ad 200c 	strh.w	r2, [sp, #12]
 80170c4:	cb03      	ldmia	r3!, {r0, r1}
 80170c6:	6020      	str	r0, [r4, #0]
 80170c8:	4620      	mov	r0, r4
 80170ca:	6061      	str	r1, [r4, #4]
 80170cc:	4619      	mov	r1, r3
 80170ce:	f7fb ff33 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 80170d2:	4620      	mov	r0, r4
 80170d4:	b005      	add	sp, #20
 80170d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170d8:	2300      	movs	r3, #0
 80170da:	8023      	strh	r3, [r4, #0]
 80170dc:	8063      	strh	r3, [r4, #2]
 80170de:	80a3      	strh	r3, [r4, #4]
 80170e0:	80e3      	strh	r3, [r4, #6]
 80170e2:	e7f6      	b.n	80170d2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

080170e4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 80170e4:	b538      	push	{r3, r4, r5, lr}
 80170e6:	2300      	movs	r3, #0
 80170e8:	2501      	movs	r5, #1
 80170ea:	4604      	mov	r4, r0
 80170ec:	8083      	strh	r3, [r0, #4]
 80170ee:	80c3      	strh	r3, [r0, #6]
 80170f0:	8103      	strh	r3, [r0, #8]
 80170f2:	8143      	strh	r3, [r0, #10]
 80170f4:	8183      	strh	r3, [r0, #12]
 80170f6:	81c3      	strh	r3, [r0, #14]
 80170f8:	8203      	strh	r3, [r0, #16]
 80170fa:	8243      	strh	r3, [r0, #18]
 80170fc:	61c3      	str	r3, [r0, #28]
 80170fe:	8403      	strh	r3, [r0, #32]
 8017100:	8443      	strh	r3, [r0, #34]	@ 0x22
 8017102:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8017106:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 801710a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801710e:	4b07      	ldr	r3, [pc, #28]	@ (801712c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8017110:	6003      	str	r3, [r0, #0]
 8017112:	880b      	ldrh	r3, [r1, #0]
 8017114:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017116:	23ff      	movs	r3, #255	@ 0xff
 8017118:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801711c:	f000 febd 	bl	8017e9a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017120:	4b03      	ldr	r3, [pc, #12]	@ (8017130 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8017122:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8017126:	4620      	mov	r0, r4
 8017128:	6023      	str	r3, [r4, #0]
 801712a:	bd38      	pop	{r3, r4, r5, pc}
 801712c:	0802e3c4 	.word	0x0802e3c4
 8017130:	0802e1e4 	.word	0x0802e1e4

08017134 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8017134:	4603      	mov	r3, r0
 8017136:	3026      	adds	r0, #38	@ 0x26
 8017138:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801713c:	b90b      	cbnz	r3, 8017142 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801713e:	f005 b88d 	b.w	801c25c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8017142:	f005 b89b 	b.w	801c27c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08017148 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8017148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714c:	4604      	mov	r4, r0
 801714e:	b0b3      	sub	sp, #204	@ 0xcc
 8017150:	469b      	mov	fp, r3
 8017152:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8017156:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801715a:	2500      	movs	r5, #0
 801715c:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8017160:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8017164:	ab11      	add	r3, sp, #68	@ 0x44
 8017166:	9206      	str	r2, [sp, #24]
 8017168:	4618      	mov	r0, r3
 801716a:	9511      	str	r5, [sp, #68]	@ 0x44
 801716c:	9307      	str	r3, [sp, #28]
 801716e:	ad13      	add	r5, sp, #76	@ 0x4c
 8017170:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 8017174:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 8017178:	f7fb fede 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801717c:	9b07      	ldr	r3, [sp, #28]
 801717e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017182:	e885 0003 	stmia.w	r5, {r0, r1}
 8017186:	6821      	ldr	r1, [r4, #0]
 8017188:	4620      	mov	r0, r4
 801718a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801718c:	4629      	mov	r1, r5
 801718e:	47b0      	blx	r6
 8017190:	4621      	mov	r1, r4
 8017192:	a815      	add	r0, sp, #84	@ 0x54
 8017194:	1d26      	adds	r6, r4, #4
 8017196:	f004 fc99 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801719a:	a815      	add	r0, sp, #84	@ 0x54
 801719c:	f003 f9ca 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80171a0:	9b07      	ldr	r3, [sp, #28]
 80171a2:	4631      	mov	r1, r6
 80171a4:	4618      	mov	r0, r3
 80171a6:	f003 fa09 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80171aa:	4628      	mov	r0, r5
 80171ac:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 80171b0:	f003 f9c0 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80171b4:	4628      	mov	r0, r5
 80171b6:	f007 f9c7 	bl	801e548 <_ZNK8touchgfx6Bitmap7getDataEv>
 80171ba:	9007      	str	r0, [sp, #28]
 80171bc:	2800      	cmp	r0, #0
 80171be:	f000 80ce 	beq.w	801735e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 80171c2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80171c6:	a809      	add	r0, sp, #36	@ 0x24
 80171c8:	f8db 1000 	ldr.w	r1, [fp]
 80171cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80171ce:	f8da 2000 	ldr.w	r2, [sl]
 80171d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80171d4:	920d      	str	r2, [sp, #52]	@ 0x34
 80171d6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80171da:	f8db 1004 	ldr.w	r1, [fp, #4]
 80171de:	920e      	str	r2, [sp, #56]	@ 0x38
 80171e0:	f8da 2008 	ldr.w	r2, [sl, #8]
 80171e4:	910a      	str	r1, [sp, #40]	@ 0x28
 80171e6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80171e8:	f8db 1008 	ldr.w	r1, [fp, #8]
 80171ec:	f8da 200c 	ldr.w	r2, [sl, #12]
 80171f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80171f2:	a90d      	add	r1, sp, #52	@ 0x34
 80171f4:	9210      	str	r2, [sp, #64]	@ 0x40
 80171f6:	4632      	mov	r2, r6
 80171f8:	f003 f9c4 	bl	801a584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80171fc:	4632      	mov	r2, r6
 80171fe:	a90e      	add	r1, sp, #56	@ 0x38
 8017200:	a80a      	add	r0, sp, #40	@ 0x28
 8017202:	f003 f9bf 	bl	801a584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017206:	4632      	mov	r2, r6
 8017208:	a90f      	add	r1, sp, #60	@ 0x3c
 801720a:	a80b      	add	r0, sp, #44	@ 0x2c
 801720c:	f003 f9ba 	bl	801a584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8017210:	4632      	mov	r2, r6
 8017212:	a910      	add	r1, sp, #64	@ 0x40
 8017214:	a80c      	add	r0, sp, #48	@ 0x30
 8017216:	f003 f9b5 	bl	801a584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801721a:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 801721e:	ed97 3a00 	vldr	s6, [r7]
 8017222:	eef0 6a67 	vmov.f32	s13, s15
 8017226:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801722a:	edd7 4a01 	vldr	s9, [r7, #4]
 801722e:	eeb0 7a67 	vmov.f32	s14, s15
 8017232:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8017236:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801723a:	ed99 2a00 	vldr	s4, [r9]
 801723e:	eeb0 6a67 	vmov.f32	s12, s15
 8017242:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8017246:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801724a:	edd8 2a00 	vldr	s5, [r8]
 801724e:	edd9 3a01 	vldr	s7, [r9, #4]
 8017252:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017256:	ed98 4a01 	vldr	s8, [r8, #4]
 801725a:	ed99 5a02 	vldr	s10, [r9, #8]
 801725e:	edd8 5a02 	vldr	s11, [r8, #8]
 8017262:	ee16 6a10 	vmov	r6, s12
 8017266:	eeb0 6a67 	vmov.f32	s12, s15
 801726a:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 801726e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8017272:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017276:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801727a:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801727e:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 8017282:	ee16 0a10 	vmov	r0, s12
 8017286:	eeb0 6a67 	vmov.f32	s12, s15
 801728a:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801728e:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 8017292:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8017296:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 801729a:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 801729e:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 80172a2:	ee16 1a10 	vmov	r1, s12
 80172a6:	eeb0 6a67 	vmov.f32	s12, s15
 80172aa:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 80172ae:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 80172b2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80172b6:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 80172ba:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80172be:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80172c2:	68ff      	ldr	r7, [r7, #12]
 80172c4:	ee16 2a10 	vmov	r2, s12
 80172c8:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 80172cc:	9624      	str	r6, [sp, #144]	@ 0x90
 80172ce:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80172d2:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 80172d6:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 80172da:	4628      	mov	r0, r5
 80172dc:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 80172e0:	9b06      	ldr	r3, [sp, #24]
 80172e2:	922d      	str	r2, [sp, #180]	@ 0xb4
 80172e4:	4a1f      	ldr	r2, [pc, #124]	@ (8017364 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 80172e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80172e8:	8812      	ldrh	r2, [r2, #0]
 80172ea:	9b07      	ldr	r3, [sp, #28]
 80172ec:	9218      	str	r2, [sp, #96]	@ 0x60
 80172ee:	9319      	str	r3, [sp, #100]	@ 0x64
 80172f0:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 80172f4:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 80172f8:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 80172fc:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8017300:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8017304:	9731      	str	r7, [sp, #196]	@ 0xc4
 8017306:	f007 f94f 	bl	801e5a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801730a:	901a      	str	r0, [sp, #104]	@ 0x68
 801730c:	4628      	mov	r0, r5
 801730e:	f007 f829 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017312:	901b      	str	r0, [sp, #108]	@ 0x6c
 8017314:	4628      	mov	r0, r5
 8017316:	f007 f859 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801731a:	901c      	str	r0, [sp, #112]	@ 0x70
 801731c:	4628      	mov	r0, r5
 801731e:	f007 f821 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017322:	4b11      	ldr	r3, [pc, #68]	@ (8017368 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8017324:	901d      	str	r0, [sp, #116]	@ 0x74
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801732c:	b10a      	cbz	r2, 8017332 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 801732e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8017330:	b905      	cbnz	r5, 8017334 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 8017332:	689d      	ldr	r5, [r3, #8]
 8017334:	682b      	ldr	r3, [r5, #0]
 8017336:	4620      	mov	r0, r4
 8017338:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 801733a:	f7ff fefb 	bl	8017134 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801733e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017342:	aa1e      	add	r2, sp, #120	@ 0x78
 8017344:	a917      	add	r1, sp, #92	@ 0x5c
 8017346:	9304      	str	r3, [sp, #16]
 8017348:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801734c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8017350:	ab13      	add	r3, sp, #76	@ 0x4c
 8017352:	4628      	mov	r0, r5
 8017354:	9301      	str	r3, [sp, #4]
 8017356:	ab15      	add	r3, sp, #84	@ 0x54
 8017358:	9300      	str	r3, [sp, #0]
 801735a:	ab19      	add	r3, sp, #100	@ 0x64
 801735c:	47b0      	blx	r6
 801735e:	b033      	add	sp, #204	@ 0xcc
 8017360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017364:	240285ae 	.word	0x240285ae
 8017368:	240285b4 	.word	0x240285b4

0801736c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801736c:	b570      	push	{r4, r5, r6, lr}
 801736e:	ed2d 8b04 	vpush	{d8-d9}
 8017372:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8017376:	b098      	sub	sp, #96	@ 0x60
 8017378:	4604      	mov	r4, r0
 801737a:	460e      	mov	r6, r1
 801737c:	2b00      	cmp	r3, #0
 801737e:	d065      	beq.n	801744c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8017380:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017384:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8017388:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 8017468 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801738c:	ee09 3a10 	vmov	s18, r3
 8017390:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017394:	4628      	mov	r0, r5
 8017396:	ee08 3a90 	vmov	s17, r3
 801739a:	4b34      	ldr	r3, [pc, #208]	@ (801746c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 801739c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80173a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80173a2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80173a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80173a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80173aa:	ee39 9a08 	vadd.f32	s18, s18, s16
 80173ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80173b0:	f006 ffd8 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80173b4:	ee07 0a90 	vmov	s15, r0
 80173b8:	4628      	mov	r0, r5
 80173ba:	ee78 8a88 	vadd.f32	s17, s17, s16
 80173be:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80173c2:	f007 f803 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80173c6:	4b2a      	ldr	r3, [pc, #168]	@ (8017470 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 80173c8:	ee07 0a90 	vmov	s15, r0
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80173d2:	eef0 7a48 	vmov.f32	s15, s16
 80173d6:	2b01      	cmp	r3, #1
 80173d8:	d13c      	bne.n	8017454 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 80173da:	eef0 6a69 	vmov.f32	s13, s19
 80173de:	ee19 3a90 	vmov	r3, s19
 80173e2:	eeb0 6a47 	vmov.f32	s12, s14
 80173e6:	eef0 5a47 	vmov.f32	s11, s14
 80173ea:	eef0 9a48 	vmov.f32	s19, s16
 80173ee:	eeb0 7a48 	vmov.f32	s14, s16
 80173f2:	9314      	str	r3, [sp, #80]	@ 0x50
 80173f4:	ab14      	add	r3, sp, #80	@ 0x50
 80173f6:	2200      	movs	r2, #0
 80173f8:	4631      	mov	r1, r6
 80173fa:	9303      	str	r3, [sp, #12]
 80173fc:	ab10      	add	r3, sp, #64	@ 0x40
 80173fe:	4620      	mov	r0, r4
 8017400:	edcd 7a04 	vstr	s15, [sp, #16]
 8017404:	9302      	str	r3, [sp, #8]
 8017406:	ab0c      	add	r3, sp, #48	@ 0x30
 8017408:	ed8d 9a05 	vstr	s18, [sp, #20]
 801740c:	9301      	str	r3, [sp, #4]
 801740e:	ab08      	add	r3, sp, #32
 8017410:	ed8d 9a06 	vstr	s18, [sp, #24]
 8017414:	9300      	str	r3, [sp, #0]
 8017416:	ab04      	add	r3, sp, #16
 8017418:	edcd 7a07 	vstr	s15, [sp, #28]
 801741c:	edcd 7a08 	vstr	s15, [sp, #32]
 8017420:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 8017424:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 8017428:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 801742c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8017430:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 8017434:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8017438:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 801743c:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8017440:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 8017444:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 8017448:	f7ff fe7e 	bl	8017148 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801744c:	b018      	add	sp, #96	@ 0x60
 801744e:	ecbd 8b04 	vpop	{d8-d9}
 8017452:	bd70      	pop	{r4, r5, r6, pc}
 8017454:	eef0 6a47 	vmov.f32	s13, s14
 8017458:	ee18 3a10 	vmov	r3, s16
 801745c:	eef0 5a69 	vmov.f32	s11, s19
 8017460:	eeb0 6a48 	vmov.f32	s12, s16
 8017464:	e7c5      	b.n	80173f2 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8017466:	bf00      	nop
 8017468:	00000000 	.word	0x00000000
 801746c:	42c80000 	.word	0x42c80000
 8017470:	240285ac 	.word	0x240285ac

08017474 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017474:	2000      	movs	r0, #0
 8017476:	4770      	bx	lr

08017478 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017478:	4b07      	ldr	r3, [pc, #28]	@ (8017498 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801747a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801747c:	881b      	ldrh	r3, [r3, #0]
 801747e:	4293      	cmp	r3, r2
 8017480:	bf81      	itttt	hi
 8017482:	4b06      	ldrhi	r3, [pc, #24]	@ (801749c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017484:	681b      	ldrhi	r3, [r3, #0]
 8017486:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801748a:	7858      	ldrbhi	r0, [r3, #1]
 801748c:	bf8c      	ite	hi
 801748e:	f000 0003 	andhi.w	r0, r0, #3
 8017492:	2000      	movls	r0, #0
 8017494:	4770      	bx	lr
 8017496:	bf00      	nop
 8017498:	24028610 	.word	0x24028610
 801749c:	2402860c 	.word	0x2402860c

080174a0 <_ZN8touchgfx8TextAreaD1Ev>:
 80174a0:	4770      	bx	lr
	...

080174a4 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80174a4:	4b11      	ldr	r3, [pc, #68]	@ (80174ec <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80174a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174aa:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80174ac:	4604      	mov	r4, r0
 80174ae:	881b      	ldrh	r3, [r3, #0]
 80174b0:	428b      	cmp	r3, r1
 80174b2:	d918      	bls.n	80174e6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80174b4:	6803      	ldr	r3, [r0, #0]
 80174b6:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 80174b8:	4b0d      	ldr	r3, [pc, #52]	@ (80174f0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80174ba:	6818      	ldr	r0, [r3, #0]
 80174bc:	f7f1 faa2 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 80174c0:	6823      	ldr	r3, [r4, #0]
 80174c2:	4606      	mov	r6, r0
 80174c4:	4620      	mov	r0, r4
 80174c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80174c8:	4798      	blx	r3
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	4607      	mov	r7, r0
 80174ce:	4620      	mov	r0, r4
 80174d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80174d4:	4798      	blx	r3
 80174d6:	463a      	mov	r2, r7
 80174d8:	4603      	mov	r3, r0
 80174da:	4631      	mov	r1, r6
 80174dc:	4620      	mov	r0, r4
 80174de:	46ac      	mov	ip, r5
 80174e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174e4:	4760      	bx	ip
 80174e6:	2000      	movs	r0, #0
 80174e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ec:	24028610 	.word	0x24028610
 80174f0:	24028618 	.word	0x24028618

080174f4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80174f4:	4b18      	ldr	r3, [pc, #96]	@ (8017558 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80174f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80174fa:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80174fc:	4604      	mov	r4, r0
 80174fe:	881b      	ldrh	r3, [r3, #0]
 8017500:	428b      	cmp	r3, r1
 8017502:	d926      	bls.n	8017552 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017504:	4b15      	ldr	r3, [pc, #84]	@ (801755c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801750c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017510:	4b13      	ldr	r3, [pc, #76]	@ (8017560 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017512:	7855      	ldrb	r5, [r2, #1]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801751a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801751e:	6833      	ldr	r3, [r6, #0]
 8017520:	69df      	ldr	r7, [r3, #28]
 8017522:	4b10      	ldr	r3, [pc, #64]	@ (8017564 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017524:	6818      	ldr	r0, [r3, #0]
 8017526:	f7f1 fa6d 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 801752a:	6823      	ldr	r3, [r4, #0]
 801752c:	4680      	mov	r8, r0
 801752e:	4620      	mov	r0, r4
 8017530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017532:	4798      	blx	r3
 8017534:	6823      	ldr	r3, [r4, #0]
 8017536:	4681      	mov	r9, r0
 8017538:	4620      	mov	r0, r4
 801753a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801753e:	4798      	blx	r3
 8017540:	464b      	mov	r3, r9
 8017542:	9000      	str	r0, [sp, #0]
 8017544:	4642      	mov	r2, r8
 8017546:	4629      	mov	r1, r5
 8017548:	4630      	mov	r0, r6
 801754a:	47b8      	blx	r7
 801754c:	b003      	add	sp, #12
 801754e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017552:	2000      	movs	r0, #0
 8017554:	e7fa      	b.n	801754c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017556:	bf00      	nop
 8017558:	24028610 	.word	0x24028610
 801755c:	2402860c 	.word	0x2402860c
 8017560:	24028614 	.word	0x24028614
 8017564:	24028618 	.word	0x24028618

08017568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017568:	b40e      	push	{r1, r2, r3}
 801756a:	4b30      	ldr	r3, [pc, #192]	@ (801762c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017570:	881a      	ldrh	r2, [r3, #0]
 8017572:	b09d      	sub	sp, #116	@ 0x74
 8017574:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8017576:	4604      	mov	r4, r0
 8017578:	429a      	cmp	r2, r3
 801757a:	d954      	bls.n	8017626 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801757c:	aa26      	add	r2, sp, #152	@ 0x98
 801757e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8017630 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017582:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8017634 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017586:	9202      	str	r2, [sp, #8]
 8017588:	f8d9 2000 	ldr.w	r2, [r9]
 801758c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017590:	f8d8 3000 	ldr.w	r3, [r8]
 8017594:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017598:	682b      	ldr	r3, [r5, #0]
 801759a:	4628      	mov	r0, r5
 801759c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801759e:	4798      	blx	r3
 80175a0:	4606      	mov	r6, r0
 80175a2:	b207      	sxth	r7, r0
 80175a4:	a803      	add	r0, sp, #12
 80175a6:	f005 fa82 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 80175aa:	682b      	ldr	r3, [r5, #0]
 80175ac:	4628      	mov	r0, r5
 80175ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80175b0:	4798      	blx	r3
 80175b2:	682b      	ldr	r3, [r5, #0]
 80175b4:	4682      	mov	sl, r0
 80175b6:	4628      	mov	r0, r5
 80175b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80175ba:	4798      	blx	r3
 80175bc:	4653      	mov	r3, sl
 80175be:	9000      	str	r0, [sp, #0]
 80175c0:	a803      	add	r0, sp, #12
 80175c2:	9a02      	ldr	r2, [sp, #8]
 80175c4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80175c6:	f005 facd 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80175ca:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80175cc:	f8d9 3000 	ldr.w	r3, [r9]
 80175d0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80175d4:	8925      	ldrh	r5, [r4, #8]
 80175d6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80175da:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80175de:	eba5 050c 	sub.w	r5, r5, ip
 80175e2:	784a      	ldrb	r2, [r1, #1]
 80175e4:	f8d8 3000 	ldr.w	r3, [r8]
 80175e8:	b22d      	sxth	r5, r5
 80175ea:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 80175ee:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80175f2:	9500      	str	r5, [sp, #0]
 80175f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80175f8:	a803      	add	r0, sp, #12
 80175fa:	f002 fca1 	bl	8019f40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80175fe:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8017602:	b203      	sxth	r3, r0
 8017604:	18b9      	adds	r1, r7, r2
 8017606:	2900      	cmp	r1, #0
 8017608:	dd0b      	ble.n	8017622 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801760a:	3b01      	subs	r3, #1
 801760c:	fb13 f302 	smulbb	r3, r3, r2
 8017610:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017614:	b21f      	sxth	r7, r3
 8017616:	4638      	mov	r0, r7
 8017618:	b01d      	add	sp, #116	@ 0x74
 801761a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801761e:	b003      	add	sp, #12
 8017620:	4770      	bx	lr
 8017622:	2b00      	cmp	r3, #0
 8017624:	dcf7      	bgt.n	8017616 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017626:	2700      	movs	r7, #0
 8017628:	e7f5      	b.n	8017616 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801762a:	bf00      	nop
 801762c:	24028610 	.word	0x24028610
 8017630:	2402860c 	.word	0x2402860c
 8017634:	24028614 	.word	0x24028614

08017638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017638:	4bbd      	ldr	r3, [pc, #756]	@ (8017930 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801763a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801763e:	460c      	mov	r4, r1
 8017640:	881b      	ldrh	r3, [r3, #0]
 8017642:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8017644:	b0a9      	sub	sp, #164	@ 0xa4
 8017646:	4680      	mov	r8, r0
 8017648:	428b      	cmp	r3, r1
 801764a:	d809      	bhi.n	8017660 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801764c:	2300      	movs	r3, #0
 801764e:	f04f 32ff 	mov.w	r2, #4294967295
 8017652:	6083      	str	r3, [r0, #8]
 8017654:	e9c0 3200 	strd	r3, r2, [r0]
 8017658:	4640      	mov	r0, r8
 801765a:	b029      	add	sp, #164	@ 0xa4
 801765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017660:	4eb4      	ldr	r6, [pc, #720]	@ (8017934 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8017662:	6833      	ldr	r3, [r6, #0]
 8017664:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017668:	4bb3      	ldr	r3, [pc, #716]	@ (8017938 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017670:	4bb2      	ldr	r3, [pc, #712]	@ (801793c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8017672:	6818      	ldr	r0, [r3, #0]
 8017674:	f7f1 f9c6 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 8017678:	682b      	ldr	r3, [r5, #0]
 801767a:	4681      	mov	r9, r0
 801767c:	4628      	mov	r0, r5
 801767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017680:	4798      	blx	r3
 8017682:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8017684:	b203      	sxth	r3, r0
 8017686:	4682      	mov	sl, r0
 8017688:	4407      	add	r7, r0
 801768a:	a80f      	add	r0, sp, #60	@ 0x3c
 801768c:	9304      	str	r3, [sp, #16]
 801768e:	b2bb      	uxth	r3, r7
 8017690:	9303      	str	r3, [sp, #12]
 8017692:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8017696:	2b00      	cmp	r3, #0
 8017698:	f040 80a5 	bne.w	80177e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 801769c:	f005 fa07 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	4628      	mov	r0, r5
 80176a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176a6:	4798      	blx	r3
 80176a8:	682b      	ldr	r3, [r5, #0]
 80176aa:	4606      	mov	r6, r0
 80176ac:	4628      	mov	r0, r5
 80176ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80176b0:	4798      	blx	r3
 80176b2:	6823      	ldr	r3, [r4, #0]
 80176b4:	4607      	mov	r7, r0
 80176b6:	4620      	mov	r0, r4
 80176b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80176ba:	4798      	blx	r3
 80176bc:	6823      	ldr	r3, [r4, #0]
 80176be:	4683      	mov	fp, r0
 80176c0:	4620      	mov	r0, r4
 80176c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80176c6:	4798      	blx	r3
 80176c8:	463b      	mov	r3, r7
 80176ca:	4649      	mov	r1, r9
 80176cc:	4632      	mov	r2, r6
 80176ce:	2600      	movs	r6, #0
 80176d0:	e9cd b000 	strd	fp, r0, [sp]
 80176d4:	a80f      	add	r0, sp, #60	@ 0x3c
 80176d6:	4637      	mov	r7, r6
 80176d8:	f005 fa59 	bl	801cb8e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80176dc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80176e0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8017934 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80176e4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80176e8:	bf0c      	ite	eq
 80176ea:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80176ee:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80176f2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80176f4:	4629      	mov	r1, r5
 80176f6:	f8db 3000 	ldr.w	r3, [fp]
 80176fa:	a80f      	add	r0, sp, #60	@ 0x3c
 80176fc:	3701      	adds	r7, #1
 80176fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017702:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017706:	b2bf      	uxth	r7, r7
 8017708:	785b      	ldrb	r3, [r3, #1]
 801770a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801770e:	f002 f91e 	bl	801994e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017712:	9b03      	ldr	r3, [sp, #12]
 8017714:	4286      	cmp	r6, r0
 8017716:	eba9 0903 	sub.w	r9, r9, r3
 801771a:	bfb8      	it	lt
 801771c:	4606      	movlt	r6, r0
 801771e:	a80f      	add	r0, sp, #60	@ 0x3c
 8017720:	fa0f f989 	sxth.w	r9, r9
 8017724:	b236      	sxth	r6, r6
 8017726:	f005 f9e9 	bl	801cafc <_ZN8touchgfx12TextProvider11endOfStringEv>
 801772a:	b918      	cbnz	r0, 8017734 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801772c:	7a2b      	ldrb	r3, [r5, #8]
 801772e:	444b      	add	r3, r9
 8017730:	2b00      	cmp	r3, #0
 8017732:	dcde      	bgt.n	80176f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8017734:	9b03      	ldr	r3, [sp, #12]
 8017736:	4620      	mov	r0, r4
 8017738:	9a04      	ldr	r2, [sp, #16]
 801773a:	fb13 f707 	smulbb	r7, r3, r7
 801773e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017740:	f895 9009 	ldrb.w	r9, [r5, #9]
 8017744:	1aff      	subs	r7, r7, r3
 8017746:	b2bf      	uxth	r7, r7
 8017748:	b23b      	sxth	r3, r7
 801774a:	429a      	cmp	r2, r3
 801774c:	bfa8      	it	ge
 801774e:	4657      	movge	r7, sl
 8017750:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017754:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017758:	6823      	ldr	r3, [r4, #0]
 801775a:	444f      	add	r7, r9
 801775c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801775e:	bf08      	it	eq
 8017760:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8017764:	fa1f f987 	uxth.w	r9, r7
 8017768:	bf18      	it	ne
 801776a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 801776e:	4798      	blx	r3
 8017770:	2801      	cmp	r0, #1
 8017772:	fa0f f789 	sxth.w	r7, r9
 8017776:	b2b3      	uxth	r3, r6
 8017778:	f000 80e2 	beq.w	8017940 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 801777c:	2802      	cmp	r0, #2
 801777e:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8017782:	f000 80e3 	beq.w	801794c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8017786:	7aea      	ldrb	r2, [r5, #11]
 8017788:	b236      	sxth	r6, r6
 801778a:	7b2d      	ldrb	r5, [r5, #12]
 801778c:	1ab6      	subs	r6, r6, r2
 801778e:	442a      	add	r2, r5
 8017790:	fa1f fa86 	uxth.w	sl, r6
 8017794:	4413      	add	r3, r2
 8017796:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801779a:	fa0f fb8a 	sxth.w	fp, sl
 801779e:	b29b      	uxth	r3, r3
 80177a0:	2a02      	cmp	r2, #2
 80177a2:	b21e      	sxth	r6, r3
 80177a4:	f000 80d6 	beq.w	8017954 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80177a8:	2a03      	cmp	r2, #3
 80177aa:	f000 80de 	beq.w	801796a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80177ae:	2a01      	cmp	r2, #1
 80177b0:	f040 80e6 	bne.w	8017980 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80177b4:	8925      	ldrh	r5, [r4, #8]
 80177b6:	4633      	mov	r3, r6
 80177b8:	463e      	mov	r6, r7
 80177ba:	eba5 0909 	sub.w	r9, r5, r9
 80177be:	461f      	mov	r7, r3
 80177c0:	465d      	mov	r5, fp
 80177c2:	fa0f fb89 	sxth.w	fp, r9
 80177c6:	4b5d      	ldr	r3, [pc, #372]	@ (801793c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80177c8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	f7f1 f91a 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 80177d0:	f8a8 b000 	strh.w	fp, [r8]
 80177d4:	f8a8 5002 	strh.w	r5, [r8, #2]
 80177d8:	f8a8 6004 	strh.w	r6, [r8, #4]
 80177dc:	f8a8 7006 	strh.w	r7, [r8, #6]
 80177e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80177e4:	e738      	b.n	8017658 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80177e6:	f005 f962 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 80177ea:	682b      	ldr	r3, [r5, #0]
 80177ec:	4628      	mov	r0, r5
 80177ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80177f0:	4798      	blx	r3
 80177f2:	682b      	ldr	r3, [r5, #0]
 80177f4:	4607      	mov	r7, r0
 80177f6:	4628      	mov	r0, r5
 80177f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177fa:	4798      	blx	r3
 80177fc:	6823      	ldr	r3, [r4, #0]
 80177fe:	4683      	mov	fp, r0
 8017800:	4620      	mov	r0, r4
 8017802:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017804:	4798      	blx	r3
 8017806:	6822      	ldr	r2, [r4, #0]
 8017808:	9005      	str	r0, [sp, #20]
 801780a:	4620      	mov	r0, r4
 801780c:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017810:	4790      	blx	r2
 8017812:	9b05      	ldr	r3, [sp, #20]
 8017814:	463a      	mov	r2, r7
 8017816:	4649      	mov	r1, r9
 8017818:	9001      	str	r0, [sp, #4]
 801781a:	a80f      	add	r0, sp, #60	@ 0x3c
 801781c:	9300      	str	r3, [sp, #0]
 801781e:	465b      	mov	r3, fp
 8017820:	f005 f9b5 	bl	801cb8e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017824:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017828:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801782c:	af0f      	add	r7, sp, #60	@ 0x3c
 801782e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017832:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017836:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8017838:	bf0a      	itet	eq
 801783a:	464a      	moveq	r2, r9
 801783c:	461a      	movne	r2, r3
 801783e:	4699      	moveq	r9, r3
 8017840:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8017844:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8017848:	1ad2      	subs	r2, r2, r3
 801784a:	6833      	ldr	r3, [r6, #0]
 801784c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8017850:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017854:	7859      	ldrb	r1, [r3, #1]
 8017856:	2300      	movs	r3, #0
 8017858:	9707      	str	r7, [sp, #28]
 801785a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801785e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017862:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8017866:	f88d 1020 	strb.w	r1, [sp, #32]
 801786a:	9509      	str	r5, [sp, #36]	@ 0x24
 801786c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017870:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8017874:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8017878:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801787c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8017880:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017884:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8017888:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801788c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8017890:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017894:	b350      	cbz	r0, 80178ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017896:	682b      	ldr	r3, [r5, #0]
 8017898:	4628      	mov	r0, r5
 801789a:	695b      	ldr	r3, [r3, #20]
 801789c:	4798      	blx	r3
 801789e:	4607      	mov	r7, r0
 80178a0:	b320      	cbz	r0, 80178ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80178a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80178a4:	4639      	mov	r1, r7
 80178a6:	6803      	ldr	r3, [r0, #0]
 80178a8:	68db      	ldr	r3, [r3, #12]
 80178aa:	4798      	blx	r3
 80178ac:	4606      	mov	r6, r0
 80178ae:	b1e8      	cbz	r0, 80178ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80178b0:	7b43      	ldrb	r3, [r0, #13]
 80178b2:	7a82      	ldrb	r2, [r0, #10]
 80178b4:	005b      	lsls	r3, r3, #1
 80178b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80178ba:	4313      	orrs	r3, r2
 80178bc:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80178c0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80178c4:	2b06      	cmp	r3, #6
 80178c6:	d111      	bne.n	80178ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80178c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80178ca:	4632      	mov	r2, r6
 80178cc:	4639      	mov	r1, r7
 80178ce:	6803      	ldr	r3, [r0, #0]
 80178d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178d2:	4798      	blx	r3
 80178d4:	7b73      	ldrb	r3, [r6, #13]
 80178d6:	005b      	lsls	r3, r3, #1
 80178d8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80178dc:	7ab3      	ldrb	r3, [r6, #10]
 80178de:	4313      	orrs	r3, r2
 80178e0:	4418      	add	r0, r3
 80178e2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80178e6:	4418      	add	r0, r3
 80178e8:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80178ec:	2600      	movs	r6, #0
 80178ee:	4637      	mov	r7, r6
 80178f0:	a806      	add	r0, sp, #24
 80178f2:	3701      	adds	r7, #1
 80178f4:	f002 fa21 	bl	8019d3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80178f8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 80178fc:	9b03      	ldr	r3, [sp, #12]
 80178fe:	b2bf      	uxth	r7, r7
 8017900:	4286      	cmp	r6, r0
 8017902:	eba9 0903 	sub.w	r9, r9, r3
 8017906:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801790a:	bfb8      	it	lt
 801790c:	4606      	movlt	r6, r0
 801790e:	fa0f f989 	sxth.w	r9, r9
 8017912:	b236      	sxth	r6, r6
 8017914:	2b00      	cmp	r3, #0
 8017916:	f43f af0d 	beq.w	8017734 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801791a:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801791e:	2b00      	cmp	r3, #0
 8017920:	f47f af08 	bne.w	8017734 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017924:	7a2b      	ldrb	r3, [r5, #8]
 8017926:	444b      	add	r3, r9
 8017928:	2b00      	cmp	r3, #0
 801792a:	dce1      	bgt.n	80178f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801792c:	e702      	b.n	8017734 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801792e:	bf00      	nop
 8017930:	24028610 	.word	0x24028610
 8017934:	2402860c 	.word	0x2402860c
 8017938:	24028614 	.word	0x24028614
 801793c:	24028618 	.word	0x24028618
 8017940:	ebaa 0606 	sub.w	r6, sl, r6
 8017944:	2002      	movs	r0, #2
 8017946:	fb96 f6f0 	sdiv	r6, r6, r0
 801794a:	e71c      	b.n	8017786 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801794c:	441e      	add	r6, r3
 801794e:	ebaa 0606 	sub.w	r6, sl, r6
 8017952:	e718      	b.n	8017786 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017954:	8925      	ldrh	r5, [r4, #8]
 8017956:	1aed      	subs	r5, r5, r3
 8017958:	eba5 050a 	sub.w	r5, r5, sl
 801795c:	fa0f fb85 	sxth.w	fp, r5
 8017960:	8965      	ldrh	r5, [r4, #10]
 8017962:	eba5 0509 	sub.w	r5, r5, r9
 8017966:	b22d      	sxth	r5, r5
 8017968:	e72d      	b.n	80177c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801796a:	8965      	ldrh	r5, [r4, #10]
 801796c:	f04f 0b00 	mov.w	fp, #0
 8017970:	1aed      	subs	r5, r5, r3
 8017972:	4633      	mov	r3, r6
 8017974:	463e      	mov	r6, r7
 8017976:	eba5 050a 	sub.w	r5, r5, sl
 801797a:	461f      	mov	r7, r3
 801797c:	b22d      	sxth	r5, r5
 801797e:	e722      	b.n	80177c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017980:	2500      	movs	r5, #0
 8017982:	e720      	b.n	80177c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08017984 <_ZN8touchgfx8TextAreaD0Ev>:
 8017984:	b510      	push	{r4, lr}
 8017986:	4604      	mov	r4, r0
 8017988:	2148      	movs	r1, #72	@ 0x48
 801798a:	f011 fb05 	bl	8028f98 <_ZdlPvj>
 801798e:	4620      	mov	r0, r4
 8017990:	bd10      	pop	{r4, pc}
	...

08017994 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8017994:	b513      	push	{r0, r1, r4, lr}
 8017996:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 801799a:	4604      	mov	r4, r0
 801799c:	b1fb      	cbz	r3, 80179de <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801799e:	4b16      	ldr	r3, [pc, #88]	@ (80179f8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80179a0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80179a2:	881b      	ldrh	r3, [r3, #0]
 80179a4:	428b      	cmp	r3, r1
 80179a6:	d91a      	bls.n	80179de <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80179a8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	dd16      	ble.n	80179de <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80179b0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	dd12      	ble.n	80179de <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80179b8:	4b10      	ldr	r3, [pc, #64]	@ (80179fc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80179ba:	6818      	ldr	r0, [r3, #0]
 80179bc:	f7f1 f822 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 80179c0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80179c4:	6822      	ldr	r2, [r4, #0]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	db06      	blt.n	80179d8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80179ca:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	db02      	blt.n	80179d8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80179d2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80179d4:	4298      	cmp	r0, r3
 80179d6:	d004      	beq.n	80179e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80179d8:	6953      	ldr	r3, [r2, #20]
 80179da:	4620      	mov	r0, r4
 80179dc:	4798      	blx	r3
 80179de:	b002      	add	sp, #8
 80179e0:	bd10      	pop	{r4, pc}
 80179e2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80179e6:	466b      	mov	r3, sp
 80179e8:	6912      	ldr	r2, [r2, #16]
 80179ea:	c903      	ldmia	r1, {r0, r1}
 80179ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80179f0:	4619      	mov	r1, r3
 80179f2:	4620      	mov	r0, r4
 80179f4:	4790      	blx	r2
 80179f6:	e7f2      	b.n	80179de <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80179f8:	24028610 	.word	0x24028610
 80179fc:	24028618 	.word	0x24028618

08017a00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017a00:	4b45      	ldr	r3, [pc, #276]	@ (8017b18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8017a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a06:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017a08:	b08e      	sub	sp, #56	@ 0x38
 8017a0a:	881b      	ldrh	r3, [r3, #0]
 8017a0c:	4604      	mov	r4, r0
 8017a0e:	4293      	cmp	r3, r2
 8017a10:	d97e      	bls.n	8017b10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017a12:	6808      	ldr	r0, [r1, #0]
 8017a14:	ab05      	add	r3, sp, #20
 8017a16:	6849      	ldr	r1, [r1, #4]
 8017a18:	4d40      	ldr	r5, [pc, #256]	@ (8017b1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8017a1a:	c303      	stmia	r3!, {r0, r1}
 8017a1c:	4611      	mov	r1, r2
 8017a1e:	6828      	ldr	r0, [r5, #0]
 8017a20:	f7f0 fff0 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 8017a24:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	db11      	blt.n	8017a50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017a2c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	db0d      	blt.n	8017a50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017a34:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017a36:	4298      	cmp	r0, r3
 8017a38:	d10a      	bne.n	8017a50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017a3a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8017a3e:	ab09      	add	r3, sp, #36	@ 0x24
 8017a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a48:	4619      	mov	r1, r3
 8017a4a:	a805      	add	r0, sp, #20
 8017a4c:	f7fb fa74 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8017a50:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	dd5b      	ble.n	8017b10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017a58:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	dd57      	ble.n	8017b10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017a60:	4f2f      	ldr	r7, [pc, #188]	@ (8017b20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8017a62:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8017b24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017a72:	2e00      	cmp	r6, #0
 8017a74:	d04c      	beq.n	8017b10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017a76:	6823      	ldr	r3, [r4, #0]
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8017a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a80:	4798      	blx	r3
 8017a82:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8017a8a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017a8e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8017a92:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8017a96:	785b      	ldrb	r3, [r3, #1]
 8017a98:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8017a9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017aa0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017aa2:	9609      	str	r6, [sp, #36]	@ 0x24
 8017aa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8017b28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8017aaa:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8017ab4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017ab6:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8017aba:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8017abe:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8017ac2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8017ac6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017aca:	b10a      	cbz	r2, 8017ad0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8017acc:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8017ace:	b906      	cbnz	r6, 8017ad2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8017ad0:	689e      	ldr	r6, [r3, #8]
 8017ad2:	af07      	add	r7, sp, #28
 8017ad4:	4621      	mov	r1, r4
 8017ad6:	4638      	mov	r0, r7
 8017ad8:	f003 fff8 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017adc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8017ade:	6828      	ldr	r0, [r5, #0]
 8017ae0:	f7f0 ff90 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 8017ae4:	6823      	ldr	r3, [r4, #0]
 8017ae6:	4605      	mov	r5, r0
 8017ae8:	4620      	mov	r0, r4
 8017aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017aec:	4798      	blx	r3
 8017aee:	6823      	ldr	r3, [r4, #0]
 8017af0:	4680      	mov	r8, r0
 8017af2:	4620      	mov	r0, r4
 8017af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017af8:	4798      	blx	r3
 8017afa:	ab09      	add	r3, sp, #36	@ 0x24
 8017afc:	9501      	str	r5, [sp, #4]
 8017afe:	9300      	str	r3, [sp, #0]
 8017b00:	ab05      	add	r3, sp, #20
 8017b02:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8017b06:	4630      	mov	r0, r6
 8017b08:	e897 0006 	ldmia.w	r7, {r1, r2}
 8017b0c:	f7f0 ff2c 	bl	8008968 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017b10:	b00e      	add	sp, #56	@ 0x38
 8017b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b16:	bf00      	nop
 8017b18:	24028610 	.word	0x24028610
 8017b1c:	24028618 	.word	0x24028618
 8017b20:	2402860c 	.word	0x2402860c
 8017b24:	24028614 	.word	0x24028614
 8017b28:	240285b4 	.word	0x240285b4

08017b2c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017b2c:	b538      	push	{r3, r4, r5, lr}
 8017b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8017b68 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8017b30:	4604      	mov	r4, r0
 8017b32:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017b34:	881b      	ldrh	r3, [r3, #0]
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d214      	bcs.n	8017b64 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017b3a:	6803      	ldr	r3, [r0, #0]
 8017b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017b3e:	4798      	blx	r3
 8017b40:	6823      	ldr	r3, [r4, #0]
 8017b42:	4605      	mov	r5, r0
 8017b44:	4620      	mov	r0, r4
 8017b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b48:	4798      	blx	r3
 8017b4a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017b4e:	b22d      	sxth	r5, r5
 8017b50:	4601      	mov	r1, r0
 8017b52:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017b56:	bf06      	itte	eq
 8017b58:	4602      	moveq	r2, r0
 8017b5a:	4629      	moveq	r1, r5
 8017b5c:	462a      	movne	r2, r5
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f7fb fde4 	bl	801372c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017b64:	bd38      	pop	{r3, r4, r5, pc}
 8017b66:	bf00      	nop
 8017b68:	24028610 	.word	0x24028610

08017b6c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8017b6c:	b530      	push	{r4, r5, lr}
 8017b6e:	888b      	ldrh	r3, [r1, #4]
 8017b70:	b085      	sub	sp, #20
 8017b72:	4604      	mov	r4, r0
 8017b74:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017b76:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017b7a:	b923      	cbnz	r3, 8017b86 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8017b7c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017b80:	b90b      	cbnz	r3, 8017b86 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8017b82:	f7ff ffd3 	bl	8017b2c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017b86:	6823      	ldr	r3, [r4, #0]
 8017b88:	466d      	mov	r5, sp
 8017b8a:	4621      	mov	r1, r4
 8017b8c:	343c      	adds	r4, #60	@ 0x3c
 8017b8e:	4628      	mov	r0, r5
 8017b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017b94:	4798      	blx	r3
 8017b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017b9e:	b005      	add	sp, #20
 8017ba0:	bd30      	pop	{r4, r5, pc}

08017ba2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	8083      	strh	r3, [r0, #4]
 8017ba6:	80c3      	strh	r3, [r0, #6]
 8017ba8:	8003      	strh	r3, [r0, #0]
 8017baa:	8043      	strh	r3, [r0, #2]
 8017bac:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8017bb0:	2bff      	cmp	r3, #255	@ 0xff
 8017bb2:	bf01      	itttt	eq
 8017bb4:	890b      	ldrheq	r3, [r1, #8]
 8017bb6:	8083      	strheq	r3, [r0, #4]
 8017bb8:	894b      	ldrheq	r3, [r1, #10]
 8017bba:	80c3      	strheq	r3, [r0, #6]
 8017bbc:	4770      	bx	lr
	...

08017bc0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bc2:	4604      	mov	r4, r0
 8017bc4:	466b      	mov	r3, sp
 8017bc6:	6808      	ldr	r0, [r1, #0]
 8017bc8:	6849      	ldr	r1, [r1, #4]
 8017bca:	c303      	stmia	r3!, {r0, r1}
 8017bcc:	6823      	ldr	r3, [r4, #0]
 8017bce:	4669      	mov	r1, sp
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bd4:	4798      	blx	r3
 8017bd6:	4b08      	ldr	r3, [pc, #32]	@ (8017bf8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017bde:	b10a      	cbz	r2, 8017be4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017be0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8017be2:	b900      	cbnz	r0, 8017be6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017be4:	6898      	ldr	r0, [r3, #8]
 8017be6:	6803      	ldr	r3, [r0, #0]
 8017be8:	4669      	mov	r1, sp
 8017bea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8017bec:	6a1d      	ldr	r5, [r3, #32]
 8017bee:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8017bf2:	47a8      	blx	r5
 8017bf4:	b003      	add	sp, #12
 8017bf6:	bd30      	pop	{r4, r5, pc}
 8017bf8:	240285b4 	.word	0x240285b4

08017bfc <_ZN8touchgfx3BoxD1Ev>:
 8017bfc:	4770      	bx	lr

08017bfe <_ZN8touchgfx3BoxD0Ev>:
 8017bfe:	b510      	push	{r4, lr}
 8017c00:	4604      	mov	r4, r0
 8017c02:	212c      	movs	r1, #44	@ 0x2c
 8017c04:	f011 f9c8 	bl	8028f98 <_ZdlPvj>
 8017c08:	4620      	mov	r0, r4
 8017c0a:	bd10      	pop	{r4, pc}

08017c0c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017c0c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8017c10:	b12a      	cbz	r2, 8017c1e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017c12:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8017c16:	b112      	cbz	r2, 8017c1e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017c18:	6803      	ldr	r3, [r0, #0]
 8017c1a:	695b      	ldr	r3, [r3, #20]
 8017c1c:	4718      	bx	r3
 8017c1e:	4770      	bx	lr

08017c20 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017c20:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8017c24:	4770      	bx	lr

08017c26 <_ZN8touchgfx6ButtonD1Ev>:
 8017c26:	4770      	bx	lr

08017c28 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017c28:	b570      	push	{r4, r5, r6, lr}
 8017c2a:	880b      	ldrh	r3, [r1, #0]
 8017c2c:	4605      	mov	r5, r0
 8017c2e:	4604      	mov	r4, r0
 8017c30:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8017c32:	8813      	ldrh	r3, [r2, #0]
 8017c34:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017c38:	4628      	mov	r0, r5
 8017c3a:	f006 fb93 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c3e:	4606      	mov	r6, r0
 8017c40:	4628      	mov	r0, r5
 8017c42:	f006 fbc3 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c46:	6823      	ldr	r3, [r4, #0]
 8017c48:	4605      	mov	r5, r0
 8017c4a:	4631      	mov	r1, r6
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c50:	4798      	blx	r3
 8017c52:	6823      	ldr	r3, [r4, #0]
 8017c54:	4629      	mov	r1, r5
 8017c56:	4620      	mov	r0, r4
 8017c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c5e:	4718      	bx	r3

08017c60 <_ZN8touchgfx6ButtonD0Ev>:
 8017c60:	b510      	push	{r4, lr}
 8017c62:	4604      	mov	r4, r0
 8017c64:	2134      	movs	r1, #52	@ 0x34
 8017c66:	f011 f997 	bl	8028f98 <_ZdlPvj>
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	bd10      	pop	{r4, pc}

08017c6e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8017c6e:	b510      	push	{r4, lr}
 8017c70:	4604      	mov	r4, r0
 8017c72:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8017c74:	b150      	cbz	r0, 8017c8c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017c76:	6803      	ldr	r3, [r0, #0]
 8017c78:	68db      	ldr	r3, [r3, #12]
 8017c7a:	4798      	blx	r3
 8017c7c:	b130      	cbz	r0, 8017c8c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017c7e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017c80:	4621      	mov	r1, r4
 8017c82:	6803      	ldr	r3, [r0, #0]
 8017c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c88:	689b      	ldr	r3, [r3, #8]
 8017c8a:	4718      	bx	r3
 8017c8c:	bd10      	pop	{r4, pc}

08017c8e <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017c8e:	b510      	push	{r4, lr}
 8017c90:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8017c94:	4604      	mov	r4, r0
 8017c96:	2bff      	cmp	r3, #255	@ 0xff
 8017c98:	d006      	beq.n	8017ca8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	8003      	strh	r3, [r0, #0]
 8017c9e:	8043      	strh	r3, [r0, #2]
 8017ca0:	8083      	strh	r3, [r0, #4]
 8017ca2:	80c3      	strh	r3, [r0, #6]
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	bd10      	pop	{r4, pc}
 8017ca8:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8017cac:	b11b      	cbz	r3, 8017cb6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017cae:	3130      	adds	r1, #48	@ 0x30
 8017cb0:	f006 fbc0 	bl	801e434 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017cb4:	e7f6      	b.n	8017ca4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8017cb6:	312e      	adds	r1, #46	@ 0x2e
 8017cb8:	e7fa      	b.n	8017cb0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08017cbc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8017cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8017cc4:	b08a      	sub	sp, #40	@ 0x28
 8017cc6:	4604      	mov	r4, r0
 8017cc8:	4688      	mov	r8, r1
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d066      	beq.n	8017d9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8017cce:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8017cd0:	a805      	add	r0, sp, #20
 8017cd2:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cd6:	f006 fb45 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017cda:	4607      	mov	r7, r0
 8017cdc:	a805      	add	r0, sp, #20
 8017cde:	f006 fb75 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017ce2:	f9b8 6000 	ldrsh.w	r6, [r8]
 8017ce6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8017cea:	2300      	movs	r3, #0
 8017cec:	4432      	add	r2, r6
 8017cee:	9306      	str	r3, [sp, #24]
 8017cf0:	b292      	uxth	r2, r2
 8017cf2:	fa0f fc82 	sxth.w	ip, r2
 8017cf6:	459c      	cmp	ip, r3
 8017cf8:	dd52      	ble.n	8017da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8017cfa:	42b7      	cmp	r7, r6
 8017cfc:	dd50      	ble.n	8017da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8017cfe:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8017d02:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8017d06:	442b      	add	r3, r5
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	b219      	sxth	r1, r3
 8017d0c:	2900      	cmp	r1, #0
 8017d0e:	dd47      	ble.n	8017da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8017d10:	42a8      	cmp	r0, r5
 8017d12:	dd45      	ble.n	8017da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8017d14:	4567      	cmp	r7, ip
 8017d16:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8017d1a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8017d1e:	bfb8      	it	lt
 8017d20:	b2ba      	uxthlt	r2, r7
 8017d22:	4288      	cmp	r0, r1
 8017d24:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017d28:	bfb8      	it	lt
 8017d2a:	b283      	uxthlt	r3, r0
 8017d2c:	1b92      	subs	r2, r2, r6
 8017d2e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017d32:	1b5b      	subs	r3, r3, r5
 8017d34:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017d38:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017d3c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017d40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d026      	beq.n	8017d96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8017d48:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	dd22      	ble.n	8017d96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8017d50:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	dd1e      	ble.n	8017d96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8017d58:	2300      	movs	r3, #0
 8017d5a:	a908      	add	r1, sp, #32
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017d62:	6823      	ldr	r3, [r4, #0]
 8017d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d66:	4798      	blx	r3
 8017d68:	4b0f      	ldr	r3, [pc, #60]	@ (8017da8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017d70:	b10a      	cbz	r2, 8017d76 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8017d72:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8017d74:	b900      	cbnz	r0, 8017d78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8017d76:	6898      	ldr	r0, [r3, #8]
 8017d78:	2501      	movs	r5, #1
 8017d7a:	6801      	ldr	r1, [r0, #0]
 8017d7c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017d80:	9502      	str	r5, [sp, #8]
 8017d82:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8017d86:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017d8a:	9401      	str	r4, [sp, #4]
 8017d8c:	ac06      	add	r4, sp, #24
 8017d8e:	9400      	str	r4, [sp, #0]
 8017d90:	688c      	ldr	r4, [r1, #8]
 8017d92:	a905      	add	r1, sp, #20
 8017d94:	47a0      	blx	r4
 8017d96:	b00a      	add	sp, #40	@ 0x28
 8017d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d9c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8017d9e:	e797      	b.n	8017cd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8017da0:	2300      	movs	r3, #0
 8017da2:	9307      	str	r3, [sp, #28]
 8017da4:	e7ca      	b.n	8017d3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8017da6:	bf00      	nop
 8017da8:	240285b4 	.word	0x240285b4

08017dac <_ZNK8touchgfx6Button17invalidateContentEv>:
 8017dac:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8017db0:	b12a      	cbz	r2, 8017dbe <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8017db2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8017db6:	b112      	cbz	r2, 8017dbe <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8017db8:	6803      	ldr	r3, [r0, #0]
 8017dba:	695b      	ldr	r3, [r3, #20]
 8017dbc:	4718      	bx	r3
 8017dbe:	4770      	bx	lr

08017dc0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8017dc0:	4b30      	ldr	r3, [pc, #192]	@ (8017e84 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8017dc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dc6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017dc8:	b08d      	sub	sp, #52	@ 0x34
 8017dca:	881b      	ldrh	r3, [r3, #0]
 8017dcc:	4604      	mov	r4, r0
 8017dce:	460f      	mov	r7, r1
 8017dd0:	4293      	cmp	r3, r2
 8017dd2:	d954      	bls.n	8017e7e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8017dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8017e88 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8017dd6:	6819      	ldr	r1, [r3, #0]
 8017dd8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8017ddc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8017de0:	4a2a      	ldr	r2, [pc, #168]	@ (8017e8c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8017de2:	6812      	ldr	r2, [r2, #0]
 8017de4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8017de8:	2900      	cmp	r1, #0
 8017dea:	d048      	beq.n	8017e7e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8017dec:	785a      	ldrb	r2, [r3, #1]
 8017dee:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8017df2:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8017df6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017dfa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017dfe:	4b24      	ldr	r3, [pc, #144]	@ (8017e90 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8017e00:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8017e04:	681a      	ldr	r2, [r3, #0]
 8017e06:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8017e0a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8017e0e:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8017e12:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8017e14:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8017e18:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8017e1c:	9107      	str	r1, [sp, #28]
 8017e1e:	f88d 8020 	strb.w	r8, [sp, #32]
 8017e22:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8017e26:	9609      	str	r6, [sp, #36]	@ 0x24
 8017e28:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8017e2c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8017e30:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8017e34:	b10b      	cbz	r3, 8017e3a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8017e36:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8017e38:	b905      	cbnz	r5, 8017e3c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8017e3a:	6895      	ldr	r5, [r2, #8]
 8017e3c:	ae05      	add	r6, sp, #20
 8017e3e:	4621      	mov	r1, r4
 8017e40:	4630      	mov	r0, r6
 8017e42:	f003 fe43 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e46:	4b13      	ldr	r3, [pc, #76]	@ (8017e94 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8017e48:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8017e4a:	6818      	ldr	r0, [r3, #0]
 8017e4c:	f7f0 fdda 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 8017e50:	6823      	ldr	r3, [r4, #0]
 8017e52:	4680      	mov	r8, r0
 8017e54:	4620      	mov	r0, r4
 8017e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e58:	4798      	blx	r3
 8017e5a:	6823      	ldr	r3, [r4, #0]
 8017e5c:	4681      	mov	r9, r0
 8017e5e:	4620      	mov	r0, r4
 8017e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e64:	4798      	blx	r3
 8017e66:	ab07      	add	r3, sp, #28
 8017e68:	f8cd 8004 	str.w	r8, [sp, #4]
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	463b      	mov	r3, r7
 8017e70:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8017e74:	4628      	mov	r0, r5
 8017e76:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017e7a:	f7f0 fd75 	bl	8008968 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017e7e:	b00d      	add	sp, #52	@ 0x34
 8017e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e84:	24028610 	.word	0x24028610
 8017e88:	2402860c 	.word	0x2402860c
 8017e8c:	24028614 	.word	0x24028614
 8017e90:	240285b4 	.word	0x240285b4
 8017e94:	24028618 	.word	0x24028618

08017e98 <_ZN8touchgfx5ImageD1Ev>:
 8017e98:	4770      	bx	lr

08017e9a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017e9a:	b570      	push	{r4, r5, r6, lr}
 8017e9c:	880b      	ldrh	r3, [r1, #0]
 8017e9e:	460d      	mov	r5, r1
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017ea4:	4608      	mov	r0, r1
 8017ea6:	f006 fa5d 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017eaa:	4606      	mov	r6, r0
 8017eac:	4628      	mov	r0, r5
 8017eae:	f006 fa8d 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	4605      	mov	r5, r0
 8017eb6:	4631      	mov	r1, r6
 8017eb8:	4620      	mov	r0, r4
 8017eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ebc:	4798      	blx	r3
 8017ebe:	6823      	ldr	r3, [r4, #0]
 8017ec0:	4629      	mov	r1, r5
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017eca:	4718      	bx	r3

08017ecc <_ZN8touchgfx5ImageD0Ev>:
 8017ecc:	b510      	push	{r4, lr}
 8017ece:	4604      	mov	r4, r0
 8017ed0:	212c      	movs	r1, #44	@ 0x2c
 8017ed2:	f011 f861 	bl	8028f98 <_ZdlPvj>
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	bd10      	pop	{r4, pc}

08017eda <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017eda:	b510      	push	{r4, lr}
 8017edc:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8017ee0:	4604      	mov	r4, r0
 8017ee2:	2bff      	cmp	r3, #255	@ 0xff
 8017ee4:	d006      	beq.n	8017ef4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	8003      	strh	r3, [r0, #0]
 8017eea:	8043      	strh	r3, [r0, #2]
 8017eec:	8083      	strh	r3, [r0, #4]
 8017eee:	80c3      	strh	r3, [r0, #6]
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	bd10      	pop	{r4, pc}
 8017ef4:	3126      	adds	r1, #38	@ 0x26
 8017ef6:	f006 fa9d 	bl	801e434 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017efa:	e7f9      	b.n	8017ef0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08017efc <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f00:	4604      	mov	r4, r0
 8017f02:	b088      	sub	sp, #32
 8017f04:	2500      	movs	r5, #0
 8017f06:	460f      	mov	r7, r1
 8017f08:	f854 3b26 	ldr.w	r3, [r4], #38
 8017f0c:	a904      	add	r1, sp, #16
 8017f0e:	4606      	mov	r6, r0
 8017f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017f16:	4798      	blx	r3
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f006 fa23 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017f1e:	4680      	mov	r8, r0
 8017f20:	4620      	mov	r0, r4
 8017f22:	f006 fa53 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017f26:	9506      	str	r5, [sp, #24]
 8017f28:	ad06      	add	r5, sp, #24
 8017f2a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017f2e:	4639      	mov	r1, r7
 8017f30:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017f34:	4628      	mov	r0, r5
 8017f36:	f7fa ffff 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8017f3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	dd19      	ble.n	8017f76 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8017f42:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	dd15      	ble.n	8017f76 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8017f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8017f7c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8017f52:	b10a      	cbz	r2, 8017f58 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8017f54:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8017f56:	b900      	cbnz	r0, 8017f5a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8017f58:	6898      	ldr	r0, [r3, #8]
 8017f5a:	2701      	movs	r7, #1
 8017f5c:	6801      	ldr	r1, [r0, #0]
 8017f5e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017f62:	9702      	str	r7, [sp, #8]
 8017f64:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8017f68:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017f6c:	e9cd 5600 	strd	r5, r6, [sp]
 8017f70:	688d      	ldr	r5, [r1, #8]
 8017f72:	4621      	mov	r1, r4
 8017f74:	47a8      	blx	r5
 8017f76:	b008      	add	sp, #32
 8017f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f7c:	240285b4 	.word	0x240285b4

08017f80 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8017f80:	4770      	bx	lr

08017f82 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8017f82:	b510      	push	{r4, lr}
 8017f84:	4604      	mov	r4, r0
 8017f86:	2148      	movs	r1, #72	@ 0x48
 8017f88:	f011 f806 	bl	8028f98 <_ZdlPvj>
 8017f8c:	4620      	mov	r0, r4
 8017f8e:	bd10      	pop	{r4, pc}

08017f90 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8017f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f94:	b08d      	sub	sp, #52	@ 0x34
 8017f96:	4604      	mov	r4, r0
 8017f98:	460f      	mov	r7, r1
 8017f9a:	f7ff fe8f 	bl	8017cbc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8017f9e:	4a55      	ldr	r2, [pc, #340]	@ (80180f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8017fa0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017fa2:	8812      	ldrh	r2, [r2, #0]
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	f240 8082 	bls.w	80180ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8017faa:	4d53      	ldr	r5, [pc, #332]	@ (80180f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8017fac:	682a      	ldr	r2, [r5, #0]
 8017fae:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017fb2:	4b52      	ldr	r3, [pc, #328]	@ (80180fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017fba:	2200      	movs	r2, #0
 8017fbc:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8017fc0:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8017fc4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8017fc8:	2a03      	cmp	r2, #3
 8017fca:	d811      	bhi.n	8017ff0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8017fcc:	e8df f002 	tbb	[pc, r2]
 8017fd0:	89727902 	.word	0x89727902
 8017fd4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017fd8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8017fdc:	1ad2      	subs	r2, r2, r3
 8017fde:	2002      	movs	r0, #2
 8017fe0:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017fe4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017fe8:	fb92 f2f0 	sdiv	r2, r2, r0
 8017fec:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017ff0:	f10d 080c 	add.w	r8, sp, #12
 8017ff4:	f10d 0914 	add.w	r9, sp, #20
 8017ff8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8017ffc:	e889 0003 	stmia.w	r9, {r0, r1}
 8018000:	4639      	mov	r1, r7
 8018002:	4648      	mov	r0, r9
 8018004:	f7fa ff98 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8018008:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801800c:	2b00      	cmp	r3, #0
 801800e:	dd4e      	ble.n	80180ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8018010:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018014:	2b00      	cmp	r3, #0
 8018016:	dd4a      	ble.n	80180ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8018018:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801801c:	4641      	mov	r1, r8
 801801e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018022:	4620      	mov	r0, r4
 8018024:	1a9b      	subs	r3, r3, r2
 8018026:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801802a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801802e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8018032:	1a9b      	subs	r3, r3, r2
 8018034:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018038:	6823      	ldr	r3, [r4, #0]
 801803a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801803c:	4798      	blx	r3
 801803e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018042:	2b00      	cmp	r3, #0
 8018044:	d053      	beq.n	80180ee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8018046:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8018048:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801804a:	682b      	ldr	r3, [r5, #0]
 801804c:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8018050:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8018054:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8018058:	785b      	ldrb	r3, [r3, #1]
 801805a:	9209      	str	r2, [sp, #36]	@ 0x24
 801805c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8018060:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018064:	9607      	str	r6, [sp, #28]
 8018066:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801806a:	2300      	movs	r3, #0
 801806c:	f88d 5020 	strb.w	r5, [sp, #32]
 8018070:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8018074:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8018078:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801807c:	4b20      	ldr	r3, [pc, #128]	@ (8018100 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801807e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8018088:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801808c:	b10a      	cbz	r2, 8018092 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801808e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018090:	b904      	cbnz	r4, 8018094 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8018092:	689c      	ldr	r4, [r3, #8]
 8018094:	4b1b      	ldr	r3, [pc, #108]	@ (8018104 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8018096:	6818      	ldr	r0, [r3, #0]
 8018098:	f7f0 fcb4 	bl	8008a04 <_ZNK8touchgfx5Texts7getTextEt>
 801809c:	ab07      	add	r3, sp, #28
 801809e:	9001      	str	r0, [sp, #4]
 80180a0:	4620      	mov	r0, r4
 80180a2:	9300      	str	r3, [sp, #0]
 80180a4:	464b      	mov	r3, r9
 80180a6:	e898 0006 	ldmia.w	r8, {r1, r2}
 80180aa:	f7f0 fc5d 	bl	8008968 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80180ae:	b00d      	add	sp, #52	@ 0x34
 80180b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180b4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80180b8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80180bc:	1ad2      	subs	r2, r2, r3
 80180be:	3201      	adds	r2, #1
 80180c0:	e78d      	b.n	8017fde <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80180c2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80180c6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80180ca:	1ad2      	subs	r2, r2, r3
 80180cc:	3201      	adds	r2, #1
 80180ce:	2002      	movs	r0, #2
 80180d0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80180d4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80180d8:	fb92 f2f0 	sdiv	r2, r2, r0
 80180dc:	f8ad 200c 	strh.w	r2, [sp, #12]
 80180e0:	e786      	b.n	8017ff0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80180e2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80180e6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80180ea:	1ad2      	subs	r2, r2, r3
 80180ec:	e7ef      	b.n	80180ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80180ee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80180f0:	e7aa      	b.n	8018048 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80180f2:	bf00      	nop
 80180f4:	24028610 	.word	0x24028610
 80180f8:	2402860c 	.word	0x2402860c
 80180fc:	24028614 	.word	0x24028614
 8018100:	240285b4 	.word	0x240285b4
 8018104:	24028618 	.word	0x24028618

08018108 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8018108:	2101      	movs	r1, #1
 801810a:	2200      	movs	r2, #0
 801810c:	b510      	push	{r4, lr}
 801810e:	4c13      	ldr	r4, [pc, #76]	@ (801815c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8018110:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8018114:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8018118:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801811c:	6004      	str	r4, [r0, #0]
 801811e:	4c10      	ldr	r4, [pc, #64]	@ (8018160 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8018120:	8082      	strh	r2, [r0, #4]
 8018122:	80c2      	strh	r2, [r0, #6]
 8018124:	8102      	strh	r2, [r0, #8]
 8018126:	8142      	strh	r2, [r0, #10]
 8018128:	8182      	strh	r2, [r0, #12]
 801812a:	81c2      	strh	r2, [r0, #14]
 801812c:	8202      	strh	r2, [r0, #16]
 801812e:	8242      	strh	r2, [r0, #18]
 8018130:	61c2      	str	r2, [r0, #28]
 8018132:	8402      	strh	r2, [r0, #32]
 8018134:	8442      	strh	r2, [r0, #34]	@ 0x22
 8018136:	6282      	str	r2, [r0, #40]	@ 0x28
 8018138:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 801813c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801813e:	8601      	strh	r1, [r0, #48]	@ 0x30
 8018140:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8018144:	6344      	str	r4, [r0, #52]	@ 0x34
 8018146:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018148:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801814c:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8018150:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018154:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8018158:	bd10      	pop	{r4, pc}
 801815a:	bf00      	nop
 801815c:	0802e430 	.word	0x0802e430
 8018160:	0802c798 	.word	0x0802c798

08018164 <_ZN8touchgfx7OutlineD1Ev>:
 8018164:	4770      	bx	lr

08018166 <_ZN8touchgfx7OutlineD0Ev>:
 8018166:	b510      	push	{r4, lr}
 8018168:	4604      	mov	r4, r0
 801816a:	2130      	movs	r1, #48	@ 0x30
 801816c:	f010 ff14 	bl	8028f98 <_ZdlPvj>
 8018170:	4620      	mov	r0, r4
 8018172:	bd10      	pop	{r4, pc}

08018174 <_ZN8touchgfx7Outline5resetEv>:
 8018174:	b510      	push	{r4, lr}
 8018176:	4604      	mov	r4, r0
 8018178:	f000 fe86 	bl	8018e88 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801817c:	60e0      	str	r0, [r4, #12]
 801817e:	f000 fe89 	bl	8018e94 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8018182:	68e3      	ldr	r3, [r4, #12]
 8018184:	08c0      	lsrs	r0, r0, #3
 8018186:	2200      	movs	r2, #0
 8018188:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801818c:	6123      	str	r3, [r4, #16]
 801818e:	3801      	subs	r0, #1
 8018190:	60a2      	str	r2, [r4, #8]
 8018192:	6060      	str	r0, [r4, #4]
 8018194:	8019      	strh	r1, [r3, #0]
 8018196:	8059      	strh	r1, [r3, #2]
 8018198:	809a      	strh	r2, [r3, #4]
 801819a:	80da      	strh	r2, [r3, #6]
 801819c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801819e:	f023 0301 	bic.w	r3, r3, #1
 80181a2:	f043 0302 	orr.w	r3, r3, #2
 80181a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80181a8:	bd10      	pop	{r4, pc}
	...

080181ac <_ZN8touchgfx7OutlineC1Ev>:
 80181ac:	4b0a      	ldr	r3, [pc, #40]	@ (80181d8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80181ae:	b510      	push	{r4, lr}
 80181b0:	6003      	str	r3, [r0, #0]
 80181b2:	2300      	movs	r3, #0
 80181b4:	4604      	mov	r4, r0
 80181b6:	6243      	str	r3, [r0, #36]	@ 0x24
 80181b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80181bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80181c0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80181c4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80181c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80181cc:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80181d0:	f7ff ffd0 	bl	8018174 <_ZN8touchgfx7Outline5resetEv>
 80181d4:	4620      	mov	r0, r4
 80181d6:	bd10      	pop	{r4, pc}
 80181d8:	0802e4a4 	.word	0x0802e4a4

080181dc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80181dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e0:	b093      	sub	sp, #76	@ 0x4c
 80181e2:	1156      	asrs	r6, r2, #5
 80181e4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80181e6:	9305      	str	r3, [sp, #20]
 80181e8:	1153      	asrs	r3, r2, #5
 80181ea:	f004 051f 	and.w	r5, r4, #31
 80181ee:	9303      	str	r3, [sp, #12]
 80181f0:	1163      	asrs	r3, r4, #5
 80181f2:	9504      	str	r5, [sp, #16]
 80181f4:	1165      	asrs	r5, r4, #5
 80181f6:	9306      	str	r3, [sp, #24]
 80181f8:	f002 031f 	and.w	r3, r2, #31
 80181fc:	42ae      	cmp	r6, r5
 80181fe:	f040 80f4 	bne.w	80183ea <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8018202:	9c04      	ldr	r4, [sp, #16]
 8018204:	9a05      	ldr	r2, [sp, #20]
 8018206:	42a3      	cmp	r3, r4
 8018208:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801820c:	6902      	ldr	r2, [r0, #16]
 801820e:	d125      	bne.n	801825c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8018210:	f9b2 3000 	ldrsh.w	r3, [r2]
 8018214:	459e      	cmp	lr, r3
 8018216:	d103      	bne.n	8018220 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8018218:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801821c:	429e      	cmp	r6, r3
 801821e:	d035      	beq.n	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018220:	88d1      	ldrh	r1, [r2, #6]
 8018222:	8893      	ldrh	r3, [r2, #4]
 8018224:	430b      	orrs	r3, r1
 8018226:	d010      	beq.n	801824a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018228:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801822c:	2b00      	cmp	r3, #0
 801822e:	db0c      	blt.n	801824a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018230:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8018232:	428b      	cmp	r3, r1
 8018234:	da09      	bge.n	801824a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018236:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801823a:	428b      	cmp	r3, r1
 801823c:	f103 0301 	add.w	r3, r3, #1
 8018240:	bf38      	it	cc
 8018242:	3208      	addcc	r2, #8
 8018244:	6083      	str	r3, [r0, #8]
 8018246:	bf38      	it	cc
 8018248:	6102      	strcc	r2, [r0, #16]
 801824a:	6903      	ldr	r3, [r0, #16]
 801824c:	9a03      	ldr	r2, [sp, #12]
 801824e:	f8a3 e000 	strh.w	lr, [r3]
 8018252:	805a      	strh	r2, [r3, #2]
 8018254:	2200      	movs	r2, #0
 8018256:	809a      	strh	r2, [r3, #4]
 8018258:	80da      	strh	r2, [r3, #6]
 801825a:	e017      	b.n	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801825c:	9c05      	ldr	r4, [sp, #20]
 801825e:	114e      	asrs	r6, r1, #5
 8018260:	f001 0c1f 	and.w	ip, r1, #31
 8018264:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8018268:	f004 041f 	and.w	r4, r4, #31
 801826c:	4576      	cmp	r6, lr
 801826e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8018272:	9402      	str	r4, [sp, #8]
 8018274:	9c04      	ldr	r4, [sp, #16]
 8018276:	eba4 0403 	sub.w	r4, r4, r3
 801827a:	d10a      	bne.n	8018292 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801827c:	9b02      	ldr	r3, [sp, #8]
 801827e:	44a0      	add	r8, r4
 8018280:	449c      	add	ip, r3
 8018282:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018286:	fb04 a40c 	mla	r4, r4, ip, sl
 801828a:	80d4      	strh	r4, [r2, #6]
 801828c:	b013      	add	sp, #76	@ 0x4c
 801828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018292:	9d05      	ldr	r5, [sp, #20]
 8018294:	1a69      	subs	r1, r5, r1
 8018296:	bf51      	iteee	pl
 8018298:	f1cc 0520 	rsbpl	r5, ip, #32
 801829c:	fb04 f40c 	mulmi.w	r4, r4, ip
 80182a0:	4249      	negmi	r1, r1
 80182a2:	2500      	movmi	r5, #0
 80182a4:	bf5d      	ittte	pl
 80182a6:	436c      	mulpl	r4, r5
 80182a8:	2520      	movpl	r5, #32
 80182aa:	f04f 0901 	movpl.w	r9, #1
 80182ae:	f04f 39ff 	movmi.w	r9, #4294967295
 80182b2:	9501      	str	r5, [sp, #4]
 80182b4:	9f01      	ldr	r7, [sp, #4]
 80182b6:	444e      	add	r6, r9
 80182b8:	fb94 f5f1 	sdiv	r5, r4, r1
 80182bc:	fb01 4415 	mls	r4, r1, r5, r4
 80182c0:	44bc      	add	ip, r7
 80182c2:	2c00      	cmp	r4, #0
 80182c4:	bfbc      	itt	lt
 80182c6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80182ca:	1864      	addlt	r4, r4, r1
 80182cc:	44a8      	add	r8, r5
 80182ce:	fb05 ac0c 	mla	ip, r5, ip, sl
 80182d2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80182d6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80182da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80182de:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80182e2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80182e6:	ea58 0202 	orrs.w	r2, r8, r2
 80182ea:	d011      	beq.n	8018310 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80182ec:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80182f0:	f1b8 0f00 	cmp.w	r8, #0
 80182f4:	db0c      	blt.n	8018310 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80182f6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80182f8:	4590      	cmp	r8, r2
 80182fa:	da09      	bge.n	8018310 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80182fc:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8018300:	4590      	cmp	r8, r2
 8018302:	bf3c      	itt	cc
 8018304:	f10c 0208 	addcc.w	r2, ip, #8
 8018308:	6102      	strcc	r2, [r0, #16]
 801830a:	f108 0201 	add.w	r2, r8, #1
 801830e:	6082      	str	r2, [r0, #8]
 8018310:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018314:	2700      	movs	r7, #0
 8018316:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801831a:	45b6      	cmp	lr, r6
 801831c:	f8ac 6000 	strh.w	r6, [ip]
 8018320:	442b      	add	r3, r5
 8018322:	f8ac 2002 	strh.w	r2, [ip, #2]
 8018326:	f8ac 7004 	strh.w	r7, [ip, #4]
 801832a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801832e:	d04b      	beq.n	80183c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8018330:	9f04      	ldr	r7, [sp, #16]
 8018332:	1a64      	subs	r4, r4, r1
 8018334:	f04f 0a00 	mov.w	sl, #0
 8018338:	1aff      	subs	r7, r7, r3
 801833a:	443d      	add	r5, r7
 801833c:	016d      	lsls	r5, r5, #5
 801833e:	fb95 f8f1 	sdiv	r8, r5, r1
 8018342:	fb01 5518 	mls	r5, r1, r8, r5
 8018346:	2d00      	cmp	r5, #0
 8018348:	bfbc      	itt	lt
 801834a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801834e:	186d      	addlt	r5, r5, r1
 8018350:	f108 0701 	add.w	r7, r8, #1
 8018354:	9703      	str	r7, [sp, #12]
 8018356:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801835a:	1964      	adds	r4, r4, r5
 801835c:	444e      	add	r6, r9
 801835e:	bf54      	ite	pl
 8018360:	9f03      	ldrpl	r7, [sp, #12]
 8018362:	4647      	movmi	r7, r8
 8018364:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018368:	bf58      	it	pl
 801836a:	1a64      	subpl	r4, r4, r1
 801836c:	443b      	add	r3, r7
 801836e:	44bb      	add	fp, r7
 8018370:	f8ac b004 	strh.w	fp, [ip, #4]
 8018374:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018378:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801837c:	f8ac b006 	strh.w	fp, [ip, #6]
 8018380:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018384:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018388:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801838c:	ea5b 0707 	orrs.w	r7, fp, r7
 8018390:	d011      	beq.n	80183b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018392:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018396:	f1bb 0f00 	cmp.w	fp, #0
 801839a:	db0c      	blt.n	80183b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801839c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801839e:	45bb      	cmp	fp, r7
 80183a0:	da09      	bge.n	80183b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80183a2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80183a6:	45bb      	cmp	fp, r7
 80183a8:	bf3c      	itt	cc
 80183aa:	f10c 0708 	addcc.w	r7, ip, #8
 80183ae:	6107      	strcc	r7, [r0, #16]
 80183b0:	f10b 0701 	add.w	r7, fp, #1
 80183b4:	6087      	str	r7, [r0, #8]
 80183b6:	6907      	ldr	r7, [r0, #16]
 80183b8:	45b6      	cmp	lr, r6
 80183ba:	803e      	strh	r6, [r7, #0]
 80183bc:	807a      	strh	r2, [r7, #2]
 80183be:	f8a7 a004 	strh.w	sl, [r7, #4]
 80183c2:	f8a7 a006 	strh.w	sl, [r7, #6]
 80183c6:	d1c6      	bne.n	8018356 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80183c8:	9a04      	ldr	r2, [sp, #16]
 80183ca:	1ad3      	subs	r3, r2, r3
 80183cc:	6902      	ldr	r2, [r0, #16]
 80183ce:	8891      	ldrh	r1, [r2, #4]
 80183d0:	88d6      	ldrh	r6, [r2, #6]
 80183d2:	4419      	add	r1, r3
 80183d4:	8091      	strh	r1, [r2, #4]
 80183d6:	9902      	ldr	r1, [sp, #8]
 80183d8:	f101 0c20 	add.w	ip, r1, #32
 80183dc:	9901      	ldr	r1, [sp, #4]
 80183de:	ebac 0c01 	sub.w	ip, ip, r1
 80183e2:	fb03 630c 	mla	r3, r3, ip, r6
 80183e6:	80d3      	strh	r3, [r2, #6]
 80183e8:	e750      	b.n	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80183ea:	9d05      	ldr	r5, [sp, #20]
 80183ec:	1aa2      	subs	r2, r4, r2
 80183ee:	eba5 0501 	sub.w	r5, r5, r1
 80183f2:	9202      	str	r2, [sp, #8]
 80183f4:	9508      	str	r5, [sp, #32]
 80183f6:	f140 8128 	bpl.w	801864a <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80183fa:	9a03      	ldr	r2, [sp, #12]
 80183fc:	2a00      	cmp	r2, #0
 80183fe:	f6ff af45 	blt.w	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018402:	9a02      	ldr	r2, [sp, #8]
 8018404:	f04f 34ff 	mov.w	r4, #4294967295
 8018408:	4252      	negs	r2, r2
 801840a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801840c:	2400      	movs	r4, #0
 801840e:	9202      	str	r2, [sp, #8]
 8018410:	9a06      	ldr	r2, [sp, #24]
 8018412:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8018416:	9206      	str	r2, [sp, #24]
 8018418:	462a      	mov	r2, r5
 801841a:	435a      	muls	r2, r3
 801841c:	9401      	str	r4, [sp, #4]
 801841e:	9c02      	ldr	r4, [sp, #8]
 8018420:	9d02      	ldr	r5, [sp, #8]
 8018422:	fb92 f4f4 	sdiv	r4, r2, r4
 8018426:	fb05 2214 	mls	r2, r5, r4, r2
 801842a:	2a00      	cmp	r2, #0
 801842c:	9207      	str	r2, [sp, #28]
 801842e:	bfbc      	itt	lt
 8018430:	1952      	addlt	r2, r2, r5
 8018432:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018436:	6905      	ldr	r5, [r0, #16]
 8018438:	bfb8      	it	lt
 801843a:	9207      	strlt	r2, [sp, #28]
 801843c:	eb04 0901 	add.w	r9, r4, r1
 8018440:	9a01      	ldr	r2, [sp, #4]
 8018442:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018446:	429a      	cmp	r2, r3
 8018448:	f040 8111 	bne.w	801866e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801844c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018450:	429e      	cmp	r6, r3
 8018452:	d104      	bne.n	801845e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8018454:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018458:	9a03      	ldr	r2, [sp, #12]
 801845a:	429a      	cmp	r2, r3
 801845c:	d01b      	beq.n	8018496 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801845e:	88ea      	ldrh	r2, [r5, #6]
 8018460:	88ab      	ldrh	r3, [r5, #4]
 8018462:	4313      	orrs	r3, r2
 8018464:	d010      	beq.n	8018488 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018466:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801846a:	2a00      	cmp	r2, #0
 801846c:	db0c      	blt.n	8018488 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801846e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018470:	429a      	cmp	r2, r3
 8018472:	da09      	bge.n	8018488 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018474:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018478:	429a      	cmp	r2, r3
 801847a:	f102 0201 	add.w	r2, r2, #1
 801847e:	bf38      	it	cc
 8018480:	3508      	addcc	r5, #8
 8018482:	6082      	str	r2, [r0, #8]
 8018484:	bf38      	it	cc
 8018486:	6105      	strcc	r5, [r0, #16]
 8018488:	6903      	ldr	r3, [r0, #16]
 801848a:	9a03      	ldr	r2, [sp, #12]
 801848c:	801e      	strh	r6, [r3, #0]
 801848e:	805a      	strh	r2, [r3, #2]
 8018490:	2200      	movs	r2, #0
 8018492:	809a      	strh	r2, [r3, #4]
 8018494:	80da      	strh	r2, [r3, #6]
 8018496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018498:	9a03      	ldr	r2, [sp, #12]
 801849a:	6901      	ldr	r1, [r0, #16]
 801849c:	441a      	add	r2, r3
 801849e:	f9b1 3000 	ldrsh.w	r3, [r1]
 80184a2:	42b3      	cmp	r3, r6
 80184a4:	d103      	bne.n	80184ae <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80184a6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80184aa:	429a      	cmp	r2, r3
 80184ac:	d01a      	beq.n	80184e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80184ae:	88cc      	ldrh	r4, [r1, #6]
 80184b0:	888b      	ldrh	r3, [r1, #4]
 80184b2:	4323      	orrs	r3, r4
 80184b4:	d010      	beq.n	80184d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80184b6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80184ba:	2c00      	cmp	r4, #0
 80184bc:	db0c      	blt.n	80184d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80184be:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80184c0:	429c      	cmp	r4, r3
 80184c2:	da09      	bge.n	80184d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80184c4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80184c8:	429c      	cmp	r4, r3
 80184ca:	f104 0401 	add.w	r4, r4, #1
 80184ce:	bf38      	it	cc
 80184d0:	3108      	addcc	r1, #8
 80184d2:	6084      	str	r4, [r0, #8]
 80184d4:	bf38      	it	cc
 80184d6:	6101      	strcc	r1, [r0, #16]
 80184d8:	6903      	ldr	r3, [r0, #16]
 80184da:	2100      	movs	r1, #0
 80184dc:	801e      	strh	r6, [r3, #0]
 80184de:	805a      	strh	r2, [r3, #2]
 80184e0:	8099      	strh	r1, [r3, #4]
 80184e2:	80d9      	strh	r1, [r3, #6]
 80184e4:	9b06      	ldr	r3, [sp, #24]
 80184e6:	4293      	cmp	r3, r2
 80184e8:	f000 8082 	beq.w	80185f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80184ec:	9b08      	ldr	r3, [sp, #32]
 80184ee:	9902      	ldr	r1, [sp, #8]
 80184f0:	015b      	lsls	r3, r3, #5
 80184f2:	9c02      	ldr	r4, [sp, #8]
 80184f4:	fb93 f1f1 	sdiv	r1, r3, r1
 80184f8:	fb04 3311 	mls	r3, r4, r1, r3
 80184fc:	9103      	str	r1, [sp, #12]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	9308      	str	r3, [sp, #32]
 8018502:	da04      	bge.n	801850e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8018504:	1e4b      	subs	r3, r1, #1
 8018506:	9303      	str	r3, [sp, #12]
 8018508:	9b08      	ldr	r3, [sp, #32]
 801850a:	4423      	add	r3, r4
 801850c:	9308      	str	r3, [sp, #32]
 801850e:	9b07      	ldr	r3, [sp, #28]
 8018510:	464f      	mov	r7, r9
 8018512:	9902      	ldr	r1, [sp, #8]
 8018514:	2600      	movs	r6, #0
 8018516:	1a5b      	subs	r3, r3, r1
 8018518:	9307      	str	r3, [sp, #28]
 801851a:	9b01      	ldr	r3, [sp, #4]
 801851c:	f1c3 0320 	rsb	r3, r3, #32
 8018520:	930e      	str	r3, [sp, #56]	@ 0x38
 8018522:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018524:	9b01      	ldr	r3, [sp, #4]
 8018526:	1a5b      	subs	r3, r3, r1
 8018528:	930a      	str	r3, [sp, #40]	@ 0x28
 801852a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801852e:	185b      	adds	r3, r3, r1
 8018530:	bf58      	it	pl
 8018532:	9902      	ldrpl	r1, [sp, #8]
 8018534:	9307      	str	r3, [sp, #28]
 8018536:	bf57      	itett	pl
 8018538:	1a5b      	subpl	r3, r3, r1
 801853a:	9903      	ldrmi	r1, [sp, #12]
 801853c:	9307      	strpl	r3, [sp, #28]
 801853e:	9b03      	ldrpl	r3, [sp, #12]
 8018540:	bf58      	it	pl
 8018542:	1c59      	addpl	r1, r3, #1
 8018544:	2a00      	cmp	r2, #0
 8018546:	4489      	add	r9, r1
 8018548:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801854c:	db2e      	blt.n	80185ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801854e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8018550:	4293      	cmp	r3, r2
 8018552:	dd2b      	ble.n	80185ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018554:	9c01      	ldr	r4, [sp, #4]
 8018556:	6905      	ldr	r5, [r0, #16]
 8018558:	46a0      	mov	r8, r4
 801855a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801855c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018560:	45a0      	cmp	r8, r4
 8018562:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018566:	f040 814c 	bne.w	8018802 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801856a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801856e:	4551      	cmp	r1, sl
 8018570:	d103      	bne.n	801857a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8018572:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018576:	4291      	cmp	r1, r2
 8018578:	d018      	beq.n	80185ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801857a:	ea5c 010e 	orrs.w	r1, ip, lr
 801857e:	d00f      	beq.n	80185a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018580:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018584:	2900      	cmp	r1, #0
 8018586:	db0b      	blt.n	80185a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018588:	428b      	cmp	r3, r1
 801858a:	dd09      	ble.n	80185a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801858c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8018590:	4299      	cmp	r1, r3
 8018592:	f101 0101 	add.w	r1, r1, #1
 8018596:	bf38      	it	cc
 8018598:	3508      	addcc	r5, #8
 801859a:	6081      	str	r1, [r0, #8]
 801859c:	bf38      	it	cc
 801859e:	6105      	strcc	r5, [r0, #16]
 80185a0:	6903      	ldr	r3, [r0, #16]
 80185a2:	f8a3 a000 	strh.w	sl, [r3]
 80185a6:	805a      	strh	r2, [r3, #2]
 80185a8:	809e      	strh	r6, [r3, #4]
 80185aa:	80de      	strh	r6, [r3, #6]
 80185ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80185ae:	6901      	ldr	r1, [r0, #16]
 80185b0:	441a      	add	r2, r3
 80185b2:	88cc      	ldrh	r4, [r1, #6]
 80185b4:	888b      	ldrh	r3, [r1, #4]
 80185b6:	4323      	orrs	r3, r4
 80185b8:	d010      	beq.n	80185dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80185ba:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80185be:	2c00      	cmp	r4, #0
 80185c0:	db0c      	blt.n	80185dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80185c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80185c4:	429c      	cmp	r4, r3
 80185c6:	da09      	bge.n	80185dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80185c8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80185cc:	429c      	cmp	r4, r3
 80185ce:	f104 0401 	add.w	r4, r4, #1
 80185d2:	bf38      	it	cc
 80185d4:	3108      	addcc	r1, #8
 80185d6:	6084      	str	r4, [r0, #8]
 80185d8:	bf38      	it	cc
 80185da:	6101      	strcc	r1, [r0, #16]
 80185dc:	6903      	ldr	r3, [r0, #16]
 80185de:	464f      	mov	r7, r9
 80185e0:	f8a3 a000 	strh.w	sl, [r3]
 80185e4:	805a      	strh	r2, [r3, #2]
 80185e6:	809e      	strh	r6, [r3, #4]
 80185e8:	80de      	strh	r6, [r3, #6]
 80185ea:	9b06      	ldr	r3, [sp, #24]
 80185ec:	4293      	cmp	r3, r2
 80185ee:	d19c      	bne.n	801852a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80185f0:	9b01      	ldr	r3, [sp, #4]
 80185f2:	6907      	ldr	r7, [r0, #16]
 80185f4:	f1c3 0620 	rsb	r6, r3, #32
 80185f8:	9b05      	ldr	r3, [sp, #20]
 80185fa:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80185fe:	9b04      	ldr	r3, [sp, #16]
 8018600:	429e      	cmp	r6, r3
 8018602:	f040 81c7 	bne.w	8018994 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8018606:	f9b7 3000 	ldrsh.w	r3, [r7]
 801860a:	459e      	cmp	lr, r3
 801860c:	d104      	bne.n	8018618 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801860e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018612:	429a      	cmp	r2, r3
 8018614:	f43f ae3a 	beq.w	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018618:	88f9      	ldrh	r1, [r7, #6]
 801861a:	88bb      	ldrh	r3, [r7, #4]
 801861c:	430b      	orrs	r3, r1
 801861e:	d010      	beq.n	8018642 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018620:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018624:	2b00      	cmp	r3, #0
 8018626:	db0c      	blt.n	8018642 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018628:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801862a:	428b      	cmp	r3, r1
 801862c:	da09      	bge.n	8018642 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801862e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018632:	428b      	cmp	r3, r1
 8018634:	f103 0301 	add.w	r3, r3, #1
 8018638:	bf38      	it	cc
 801863a:	3708      	addcc	r7, #8
 801863c:	6083      	str	r3, [r0, #8]
 801863e:	bf38      	it	cc
 8018640:	6107      	strcc	r7, [r0, #16]
 8018642:	6903      	ldr	r3, [r0, #16]
 8018644:	f8a3 e000 	strh.w	lr, [r3]
 8018648:	e603      	b.n	8018252 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801864a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801864c:	9c03      	ldr	r4, [sp, #12]
 801864e:	42a2      	cmp	r2, r4
 8018650:	f6ff ae1c 	blt.w	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018654:	9c06      	ldr	r4, [sp, #24]
 8018656:	42a2      	cmp	r2, r4
 8018658:	9c08      	ldr	r4, [sp, #32]
 801865a:	bfbc      	itt	lt
 801865c:	3201      	addlt	r2, #1
 801865e:	9206      	strlt	r2, [sp, #24]
 8018660:	f1c3 0220 	rsb	r2, r3, #32
 8018664:	4362      	muls	r2, r4
 8018666:	2401      	movs	r4, #1
 8018668:	940b      	str	r4, [sp, #44]	@ 0x2c
 801866a:	2420      	movs	r4, #32
 801866c:	e6d6      	b.n	801841c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801866e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018672:	f009 021f 	and.w	r2, r9, #31
 8018676:	f001 011f 	and.w	r1, r1, #31
 801867a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801867e:	920c      	str	r2, [sp, #48]	@ 0x30
 8018680:	45b0      	cmp	r8, r6
 8018682:	9a01      	ldr	r2, [sp, #4]
 8018684:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018688:	eba2 0203 	sub.w	r2, r2, r3
 801868c:	d108      	bne.n	80186a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801868e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018690:	4496      	add	lr, r2
 8018692:	4419      	add	r1, r3
 8018694:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018698:	fb02 a101 	mla	r1, r2, r1, sl
 801869c:	80e9      	strh	r1, [r5, #6]
 801869e:	e6fa      	b.n	8018496 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80186a0:	2c00      	cmp	r4, #0
 80186a2:	f2c0 80a7 	blt.w	80187f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80186a6:	2701      	movs	r7, #1
 80186a8:	f1c1 0c20 	rsb	ip, r1, #32
 80186ac:	970a      	str	r7, [sp, #40]	@ 0x28
 80186ae:	2720      	movs	r7, #32
 80186b0:	fb02 f20c 	mul.w	r2, r2, ip
 80186b4:	9709      	str	r7, [sp, #36]	@ 0x24
 80186b6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80186b8:	fb92 fcf4 	sdiv	ip, r2, r4
 80186bc:	fb04 221c 	mls	r2, r4, ip, r2
 80186c0:	4439      	add	r1, r7
 80186c2:	2a00      	cmp	r2, #0
 80186c4:	bfbc      	itt	lt
 80186c6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80186ca:	1912      	addlt	r2, r2, r4
 80186cc:	fb0c a101 	mla	r1, ip, r1, sl
 80186d0:	44e6      	add	lr, ip
 80186d2:	80e9      	strh	r1, [r5, #6]
 80186d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80186d6:	f8a5 e004 	strh.w	lr, [r5, #4]
 80186da:	eb08 0501 	add.w	r5, r8, r1
 80186de:	6901      	ldr	r1, [r0, #16]
 80186e0:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80186e4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80186e8:	ea58 070e 	orrs.w	r7, r8, lr
 80186ec:	d010      	beq.n	8018710 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80186ee:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80186f2:	f1be 0f00 	cmp.w	lr, #0
 80186f6:	db0b      	blt.n	8018710 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80186f8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80186fa:	45be      	cmp	lr, r7
 80186fc:	da08      	bge.n	8018710 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80186fe:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018702:	45be      	cmp	lr, r7
 8018704:	bf3c      	itt	cc
 8018706:	3108      	addcc	r1, #8
 8018708:	6101      	strcc	r1, [r0, #16]
 801870a:	f10e 0101 	add.w	r1, lr, #1
 801870e:	6081      	str	r1, [r0, #8]
 8018710:	6901      	ldr	r1, [r0, #16]
 8018712:	f04f 0e00 	mov.w	lr, #0
 8018716:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801871a:	42ae      	cmp	r6, r5
 801871c:	800d      	strh	r5, [r1, #0]
 801871e:	4463      	add	r3, ip
 8018720:	f8a1 8002 	strh.w	r8, [r1, #2]
 8018724:	f8a1 e004 	strh.w	lr, [r1, #4]
 8018728:	f8a1 e006 	strh.w	lr, [r1, #6]
 801872c:	d053      	beq.n	80187d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801872e:	9901      	ldr	r1, [sp, #4]
 8018730:	1b12      	subs	r2, r2, r4
 8018732:	1ac9      	subs	r1, r1, r3
 8018734:	4461      	add	r1, ip
 8018736:	0149      	lsls	r1, r1, #5
 8018738:	fb91 fef4 	sdiv	lr, r1, r4
 801873c:	fb04 111e 	mls	r1, r4, lr, r1
 8018740:	2900      	cmp	r1, #0
 8018742:	bfbc      	itt	lt
 8018744:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8018748:	1909      	addlt	r1, r1, r4
 801874a:	f10e 0701 	add.w	r7, lr, #1
 801874e:	970d      	str	r7, [sp, #52]	@ 0x34
 8018750:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8018754:	1852      	adds	r2, r2, r1
 8018756:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018758:	bf54      	ite	pl
 801875a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801875e:	46f4      	movmi	ip, lr
 8018760:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8018764:	bf58      	it	pl
 8018766:	1b12      	subpl	r2, r2, r4
 8018768:	4463      	add	r3, ip
 801876a:	443d      	add	r5, r7
 801876c:	44e3      	add	fp, ip
 801876e:	f8aa b004 	strh.w	fp, [sl, #4]
 8018772:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8018776:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801877a:	f8aa b006 	strh.w	fp, [sl, #6]
 801877e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018782:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018786:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801878a:	ea5b 070a 	orrs.w	r7, fp, sl
 801878e:	d014      	beq.n	80187ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018790:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8018794:	f1ba 0f00 	cmp.w	sl, #0
 8018798:	db0f      	blt.n	80187ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801879a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801879c:	45ba      	cmp	sl, r7
 801879e:	da0c      	bge.n	80187ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80187a0:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80187a4:	45ba      	cmp	sl, r7
 80187a6:	f10a 0a01 	add.w	sl, sl, #1
 80187aa:	bf38      	it	cc
 80187ac:	f10c 0c08 	addcc.w	ip, ip, #8
 80187b0:	f8c0 a008 	str.w	sl, [r0, #8]
 80187b4:	bf38      	it	cc
 80187b6:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80187ba:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80187be:	f04f 0700 	mov.w	r7, #0
 80187c2:	42ae      	cmp	r6, r5
 80187c4:	f8ac 5000 	strh.w	r5, [ip]
 80187c8:	f8ac 8002 	strh.w	r8, [ip, #2]
 80187cc:	f8ac 7004 	strh.w	r7, [ip, #4]
 80187d0:	f8ac 7006 	strh.w	r7, [ip, #6]
 80187d4:	d1bc      	bne.n	8018750 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80187d6:	6904      	ldr	r4, [r0, #16]
 80187d8:	9a01      	ldr	r2, [sp, #4]
 80187da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80187dc:	1ad3      	subs	r3, r2, r3
 80187de:	88a2      	ldrh	r2, [r4, #4]
 80187e0:	3120      	adds	r1, #32
 80187e2:	441a      	add	r2, r3
 80187e4:	80a2      	strh	r2, [r4, #4]
 80187e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187e8:	1a89      	subs	r1, r1, r2
 80187ea:	88e2      	ldrh	r2, [r4, #6]
 80187ec:	fb03 2301 	mla	r3, r3, r1, r2
 80187f0:	80e3      	strh	r3, [r4, #6]
 80187f2:	e650      	b.n	8018496 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80187f4:	f04f 37ff 	mov.w	r7, #4294967295
 80187f8:	434a      	muls	r2, r1
 80187fa:	4264      	negs	r4, r4
 80187fc:	970a      	str	r7, [sp, #40]	@ 0x28
 80187fe:	2700      	movs	r7, #0
 8018800:	e758      	b.n	80186b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8018802:	ea4f 1867 	mov.w	r8, r7, asr #5
 8018806:	f009 031f 	and.w	r3, r9, #31
 801880a:	f007 071f 	and.w	r7, r7, #31
 801880e:	fa1f fc8c 	uxth.w	ip, ip
 8018812:	45d0      	cmp	r8, sl
 8018814:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018816:	fa1f fe8e 	uxth.w	lr, lr
 801881a:	d10a      	bne.n	8018832 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801881c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801881e:	449c      	add	ip, r3
 8018820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018822:	441f      	add	r7, r3
 8018824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018826:	f8a5 c004 	strh.w	ip, [r5, #4]
 801882a:	fb03 e707 	mla	r7, r3, r7, lr
 801882e:	80ef      	strh	r7, [r5, #6]
 8018830:	e6bc      	b.n	80185ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018832:	2900      	cmp	r1, #0
 8018834:	f2c0 80a6 	blt.w	8018984 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8018838:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801883a:	f1c7 0320 	rsb	r3, r7, #32
 801883e:	4363      	muls	r3, r4
 8018840:	2401      	movs	r4, #1
 8018842:	940d      	str	r4, [sp, #52]	@ 0x34
 8018844:	2420      	movs	r4, #32
 8018846:	940c      	str	r4, [sp, #48]	@ 0x30
 8018848:	fb93 f4f1 	sdiv	r4, r3, r1
 801884c:	fb01 3b14 	mls	fp, r1, r4, r3
 8018850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018852:	f1bb 0f00 	cmp.w	fp, #0
 8018856:	441f      	add	r7, r3
 8018858:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801885a:	bfbc      	itt	lt
 801885c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018860:	448b      	addlt	fp, r1
 8018862:	fb04 e707 	mla	r7, r4, r7, lr
 8018866:	44a4      	add	ip, r4
 8018868:	80ef      	strh	r7, [r5, #6]
 801886a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801886e:	eb08 0503 	add.w	r5, r8, r3
 8018872:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018876:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801887a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801887e:	ea5e 0307 	orrs.w	r3, lr, r7
 8018882:	d011      	beq.n	80188a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018884:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8018888:	f1be 0f00 	cmp.w	lr, #0
 801888c:	db0c      	blt.n	80188a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801888e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018890:	45be      	cmp	lr, r7
 8018892:	da09      	bge.n	80188a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018894:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018898:	45be      	cmp	lr, r7
 801889a:	bf3c      	itt	cc
 801889c:	f10c 0708 	addcc.w	r7, ip, #8
 80188a0:	6107      	strcc	r7, [r0, #16]
 80188a2:	f10e 0701 	add.w	r7, lr, #1
 80188a6:	6087      	str	r7, [r0, #8]
 80188a8:	6907      	ldr	r7, [r0, #16]
 80188aa:	b213      	sxth	r3, r2
 80188ac:	4555      	cmp	r5, sl
 80188ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80188b0:	807b      	strh	r3, [r7, #2]
 80188b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80188b4:	803d      	strh	r5, [r7, #0]
 80188b6:	80be      	strh	r6, [r7, #4]
 80188b8:	eb04 0c03 	add.w	ip, r4, r3
 80188bc:	80fe      	strh	r6, [r7, #6]
 80188be:	d050      	beq.n	8018962 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80188c0:	9b01      	ldr	r3, [sp, #4]
 80188c2:	eba3 070c 	sub.w	r7, r3, ip
 80188c6:	ebab 0301 	sub.w	r3, fp, r1
 80188ca:	443c      	add	r4, r7
 80188cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80188ce:	0164      	lsls	r4, r4, #5
 80188d0:	fb94 f8f1 	sdiv	r8, r4, r1
 80188d4:	fb01 4418 	mls	r4, r1, r8, r4
 80188d8:	2c00      	cmp	r4, #0
 80188da:	bfbc      	itt	lt
 80188dc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80188e0:	1864      	addlt	r4, r4, r1
 80188e2:	f108 0701 	add.w	r7, r8, #1
 80188e6:	9711      	str	r7, [sp, #68]	@ 0x44
 80188e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188ea:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80188ee:	191b      	adds	r3, r3, r4
 80188f0:	f8be b004 	ldrh.w	fp, [lr, #4]
 80188f4:	bf54      	ite	pl
 80188f6:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80188f8:	4647      	movmi	r7, r8
 80188fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80188fc:	bf58      	it	pl
 80188fe:	1a5b      	subpl	r3, r3, r1
 8018900:	44bb      	add	fp, r7
 8018902:	44bc      	add	ip, r7
 8018904:	bf58      	it	pl
 8018906:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8018908:	f8ae b004 	strh.w	fp, [lr, #4]
 801890c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8018910:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018914:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018916:	f8ae b006 	strh.w	fp, [lr, #6]
 801891a:	443d      	add	r5, r7
 801891c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018920:	f8be b006 	ldrh.w	fp, [lr, #6]
 8018924:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8018928:	ea5b 0307 	orrs.w	r3, fp, r7
 801892c:	d011      	beq.n	8018952 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801892e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8018932:	f1bb 0f00 	cmp.w	fp, #0
 8018936:	db0c      	blt.n	8018952 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018938:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801893a:	45bb      	cmp	fp, r7
 801893c:	da09      	bge.n	8018952 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801893e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018942:	45bb      	cmp	fp, r7
 8018944:	bf3c      	itt	cc
 8018946:	f10e 0708 	addcc.w	r7, lr, #8
 801894a:	6107      	strcc	r7, [r0, #16]
 801894c:	f10b 0701 	add.w	r7, fp, #1
 8018950:	6087      	str	r7, [r0, #8]
 8018952:	6907      	ldr	r7, [r0, #16]
 8018954:	4555      	cmp	r5, sl
 8018956:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018958:	803d      	strh	r5, [r7, #0]
 801895a:	807b      	strh	r3, [r7, #2]
 801895c:	80be      	strh	r6, [r7, #4]
 801895e:	80fe      	strh	r6, [r7, #6]
 8018960:	d1c2      	bne.n	80188e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8018962:	9b01      	ldr	r3, [sp, #4]
 8018964:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018966:	eba3 0c0c 	sub.w	ip, r3, ip
 801896a:	6903      	ldr	r3, [r0, #16]
 801896c:	3720      	adds	r7, #32
 801896e:	8899      	ldrh	r1, [r3, #4]
 8018970:	4461      	add	r1, ip
 8018972:	8099      	strh	r1, [r3, #4]
 8018974:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018976:	1a7f      	subs	r7, r7, r1
 8018978:	88d9      	ldrh	r1, [r3, #6]
 801897a:	fb0c 1c07 	mla	ip, ip, r7, r1
 801897e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8018982:	e613      	b.n	80185ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018984:	f04f 34ff 	mov.w	r4, #4294967295
 8018988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801898a:	4249      	negs	r1, r1
 801898c:	940d      	str	r4, [sp, #52]	@ 0x34
 801898e:	2400      	movs	r4, #0
 8018990:	437b      	muls	r3, r7
 8018992:	e758      	b.n	8018846 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8018994:	9905      	ldr	r1, [sp, #20]
 8018996:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801899a:	f009 0c1f 	and.w	ip, r9, #31
 801899e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80189a2:	f001 011f 	and.w	r1, r1, #31
 80189a6:	45f3      	cmp	fp, lr
 80189a8:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80189ac:	9102      	str	r1, [sp, #8]
 80189ae:	9904      	ldr	r1, [sp, #16]
 80189b0:	eba1 0406 	sub.w	r4, r1, r6
 80189b4:	d108      	bne.n	80189c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80189b6:	9b02      	ldr	r3, [sp, #8]
 80189b8:	44a0      	add	r8, r4
 80189ba:	449c      	add	ip, r3
 80189bc:	f8a7 8004 	strh.w	r8, [r7, #4]
 80189c0:	fb04 a40c 	mla	r4, r4, ip, sl
 80189c4:	80fc      	strh	r4, [r7, #6]
 80189c6:	e461      	b.n	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80189c8:	9905      	ldr	r1, [sp, #20]
 80189ca:	ebb1 0109 	subs.w	r1, r1, r9
 80189ce:	bf51      	iteee	pl
 80189d0:	f1cc 0520 	rsbpl	r5, ip, #32
 80189d4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80189d8:	4249      	negmi	r1, r1
 80189da:	2500      	movmi	r5, #0
 80189dc:	bf5d      	ittte	pl
 80189de:	436c      	mulpl	r4, r5
 80189e0:	2520      	movpl	r5, #32
 80189e2:	f04f 0901 	movpl.w	r9, #1
 80189e6:	f04f 39ff 	movmi.w	r9, #4294967295
 80189ea:	9501      	str	r5, [sp, #4]
 80189ec:	9b01      	ldr	r3, [sp, #4]
 80189ee:	fb94 f5f1 	sdiv	r5, r4, r1
 80189f2:	fb01 4415 	mls	r4, r1, r5, r4
 80189f6:	449c      	add	ip, r3
 80189f8:	eb0b 0309 	add.w	r3, fp, r9
 80189fc:	2c00      	cmp	r4, #0
 80189fe:	bfbc      	itt	lt
 8018a00:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018a04:	1864      	addlt	r4, r4, r1
 8018a06:	44a8      	add	r8, r5
 8018a08:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018a0c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018a10:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018a14:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a18:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018a1c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018a20:	ea58 0707 	orrs.w	r7, r8, r7
 8018a24:	d011      	beq.n	8018a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018a26:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018a2a:	f1b8 0f00 	cmp.w	r8, #0
 8018a2e:	db0c      	blt.n	8018a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018a30:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018a32:	45b8      	cmp	r8, r7
 8018a34:	da09      	bge.n	8018a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018a36:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8018a3a:	45b8      	cmp	r8, r7
 8018a3c:	bf3c      	itt	cc
 8018a3e:	f10c 0708 	addcc.w	r7, ip, #8
 8018a42:	6107      	strcc	r7, [r0, #16]
 8018a44:	f108 0701 	add.w	r7, r8, #1
 8018a48:	6087      	str	r7, [r0, #8]
 8018a4a:	6907      	ldr	r7, [r0, #16]
 8018a4c:	f04f 0c00 	mov.w	ip, #0
 8018a50:	b212      	sxth	r2, r2
 8018a52:	459e      	cmp	lr, r3
 8018a54:	803b      	strh	r3, [r7, #0]
 8018a56:	442e      	add	r6, r5
 8018a58:	807a      	strh	r2, [r7, #2]
 8018a5a:	f8a7 c004 	strh.w	ip, [r7, #4]
 8018a5e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018a62:	d04b      	beq.n	8018afc <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8018a64:	9f04      	ldr	r7, [sp, #16]
 8018a66:	1a64      	subs	r4, r4, r1
 8018a68:	f04f 0a00 	mov.w	sl, #0
 8018a6c:	1bbf      	subs	r7, r7, r6
 8018a6e:	443d      	add	r5, r7
 8018a70:	016d      	lsls	r5, r5, #5
 8018a72:	fb95 f8f1 	sdiv	r8, r5, r1
 8018a76:	fb01 5518 	mls	r5, r1, r8, r5
 8018a7a:	4565      	cmp	r5, ip
 8018a7c:	bfbc      	itt	lt
 8018a7e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018a82:	186d      	addlt	r5, r5, r1
 8018a84:	f108 0701 	add.w	r7, r8, #1
 8018a88:	9703      	str	r7, [sp, #12]
 8018a8a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a8e:	1964      	adds	r4, r4, r5
 8018a90:	444b      	add	r3, r9
 8018a92:	bf54      	ite	pl
 8018a94:	9f03      	ldrpl	r7, [sp, #12]
 8018a96:	4647      	movmi	r7, r8
 8018a98:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018a9c:	bf58      	it	pl
 8018a9e:	1a64      	subpl	r4, r4, r1
 8018aa0:	443e      	add	r6, r7
 8018aa2:	44bb      	add	fp, r7
 8018aa4:	f8ac b004 	strh.w	fp, [ip, #4]
 8018aa8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018aac:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018ab0:	f8ac b006 	strh.w	fp, [ip, #6]
 8018ab4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018ab8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018abc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018ac0:	ea5b 0707 	orrs.w	r7, fp, r7
 8018ac4:	d011      	beq.n	8018aea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8018ac6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018aca:	f1bb 0f00 	cmp.w	fp, #0
 8018ace:	db0c      	blt.n	8018aea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8018ad0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018ad2:	45bb      	cmp	fp, r7
 8018ad4:	da09      	bge.n	8018aea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8018ad6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018ada:	45bb      	cmp	fp, r7
 8018adc:	bf3c      	itt	cc
 8018ade:	f10c 0708 	addcc.w	r7, ip, #8
 8018ae2:	6107      	strcc	r7, [r0, #16]
 8018ae4:	f10b 0701 	add.w	r7, fp, #1
 8018ae8:	6087      	str	r7, [r0, #8]
 8018aea:	6907      	ldr	r7, [r0, #16]
 8018aec:	459e      	cmp	lr, r3
 8018aee:	803b      	strh	r3, [r7, #0]
 8018af0:	807a      	strh	r2, [r7, #2]
 8018af2:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018af6:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018afa:	d1c6      	bne.n	8018a8a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8018afc:	9b04      	ldr	r3, [sp, #16]
 8018afe:	1b9e      	subs	r6, r3, r6
 8018b00:	6903      	ldr	r3, [r0, #16]
 8018b02:	889a      	ldrh	r2, [r3, #4]
 8018b04:	4432      	add	r2, r6
 8018b06:	809a      	strh	r2, [r3, #4]
 8018b08:	9a02      	ldr	r2, [sp, #8]
 8018b0a:	f102 0c20 	add.w	ip, r2, #32
 8018b0e:	9a01      	ldr	r2, [sp, #4]
 8018b10:	ebac 0c02 	sub.w	ip, ip, r2
 8018b14:	88da      	ldrh	r2, [r3, #6]
 8018b16:	fb06 260c 	mla	r6, r6, ip, r2
 8018b1a:	80de      	strh	r6, [r3, #6]
 8018b1c:	f7ff bbb6 	b.w	801828c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08018b20 <_ZN8touchgfx7Outline6lineToEii>:
 8018b20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018b22:	079b      	lsls	r3, r3, #30
 8018b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b26:	460e      	mov	r6, r1
 8018b28:	4615      	mov	r5, r2
 8018b2a:	d511      	bpl.n	8018b50 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018b2c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8018b30:	ea86 0701 	eor.w	r7, r6, r1
 8018b34:	ea85 0302 	eor.w	r3, r5, r2
 8018b38:	433b      	orrs	r3, r7
 8018b3a:	d009      	beq.n	8018b50 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018b3c:	4633      	mov	r3, r6
 8018b3e:	9500      	str	r5, [sp, #0]
 8018b40:	f7ff fb4c 	bl	80181dc <_ZN8touchgfx7Outline10renderLineEiiii>
 8018b44:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018b46:	f043 0301 	orr.w	r3, r3, #1
 8018b4a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8018b4e:	6243      	str	r3, [r0, #36]	@ 0x24
 8018b50:	b003      	add	sp, #12
 8018b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b54 <_ZN8touchgfx7Outline6moveToEii>:
 8018b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b56:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018b58:	4615      	mov	r5, r2
 8018b5a:	4604      	mov	r4, r0
 8018b5c:	460e      	mov	r6, r1
 8018b5e:	079a      	lsls	r2, r3, #30
 8018b60:	d401      	bmi.n	8018b66 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8018b62:	f7ff fb07 	bl	8018174 <_ZN8touchgfx7Outline5resetEv>
 8018b66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018b68:	07db      	lsls	r3, r3, #31
 8018b6a:	d504      	bpl.n	8018b76 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8018b72:	f7ff ffd5 	bl	8018b20 <_ZN8touchgfx7Outline6lineToEii>
 8018b76:	6923      	ldr	r3, [r4, #16]
 8018b78:	1170      	asrs	r0, r6, #5
 8018b7a:	1169      	asrs	r1, r5, #5
 8018b7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b80:	4290      	cmp	r0, r2
 8018b82:	d103      	bne.n	8018b8c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8018b84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018b88:	4291      	cmp	r1, r2
 8018b8a:	d01a      	beq.n	8018bc2 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8018b8c:	88df      	ldrh	r7, [r3, #6]
 8018b8e:	889a      	ldrh	r2, [r3, #4]
 8018b90:	433a      	orrs	r2, r7
 8018b92:	d010      	beq.n	8018bb6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018b94:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018b98:	2a00      	cmp	r2, #0
 8018b9a:	db0c      	blt.n	8018bb6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018b9c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8018b9e:	42ba      	cmp	r2, r7
 8018ba0:	da09      	bge.n	8018bb6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018ba2:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8018ba6:	42ba      	cmp	r2, r7
 8018ba8:	f102 0201 	add.w	r2, r2, #1
 8018bac:	bf38      	it	cc
 8018bae:	3308      	addcc	r3, #8
 8018bb0:	60a2      	str	r2, [r4, #8]
 8018bb2:	bf38      	it	cc
 8018bb4:	6123      	strcc	r3, [r4, #16]
 8018bb6:	6923      	ldr	r3, [r4, #16]
 8018bb8:	2200      	movs	r2, #0
 8018bba:	8018      	strh	r0, [r3, #0]
 8018bbc:	8059      	strh	r1, [r3, #2]
 8018bbe:	809a      	strh	r2, [r3, #4]
 8018bc0:	80da      	strh	r2, [r3, #6]
 8018bc2:	6166      	str	r6, [r4, #20]
 8018bc4:	6225      	str	r5, [r4, #32]
 8018bc6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018bcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bd0:	b0d0      	sub	sp, #320	@ 0x140
 8018bd2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018bd6:	466c      	mov	r4, sp
 8018bd8:	4627      	mov	r7, r4
 8018bda:	1a0d      	subs	r5, r1, r0
 8018bdc:	f100 0308 	add.w	r3, r0, #8
 8018be0:	2d48      	cmp	r5, #72	@ 0x48
 8018be2:	f340 80d5 	ble.w	8018d90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018be6:	112d      	asrs	r5, r5, #4
 8018be8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018bec:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018bf0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8018bf4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8018bf8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018bfc:	6816      	ldr	r6, [r2, #0]
 8018bfe:	6006      	str	r6, [r0, #0]
 8018c00:	6856      	ldr	r6, [r2, #4]
 8018c02:	6046      	str	r6, [r0, #4]
 8018c04:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018c08:	f8a2 8002 	strh.w	r8, [r2, #2]
 8018c0c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018c10:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018c14:	f1a1 0208 	sub.w	r2, r1, #8
 8018c18:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018c1c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8018c20:	4565      	cmp	r5, ip
 8018c22:	db06      	blt.n	8018c32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8018c24:	d119      	bne.n	8018c5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8018c26:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8018c2a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8018c2e:	42ae      	cmp	r6, r5
 8018c30:	dd13      	ble.n	8018c5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8018c32:	460e      	mov	r6, r1
 8018c34:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8018c38:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8018c3c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018c40:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8018c44:	601d      	str	r5, [r3, #0]
 8018c46:	6875      	ldr	r5, [r6, #4]
 8018c48:	605d      	str	r5, [r3, #4]
 8018c4a:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018c4e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018c52:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018c56:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018c5a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018c5e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8018c62:	42ae      	cmp	r6, r5
 8018c64:	db06      	blt.n	8018c74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8018c66:	d116      	bne.n	8018c96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018c68:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018c6c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8018c70:	45ac      	cmp	ip, r5
 8018c72:	da10      	bge.n	8018c96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018c74:	681d      	ldr	r5, [r3, #0]
 8018c76:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018c7a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018c7e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018c82:	6005      	str	r5, [r0, #0]
 8018c84:	685d      	ldr	r5, [r3, #4]
 8018c86:	f8a0 8008 	strh.w	r8, [r0, #8]
 8018c8a:	6045      	str	r5, [r0, #4]
 8018c8c:	8146      	strh	r6, [r0, #10]
 8018c8e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8018c92:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018c96:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018c9a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018c9e:	4565      	cmp	r5, ip
 8018ca0:	db06      	blt.n	8018cb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8018ca2:	d119      	bne.n	8018cd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018ca4:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018ca8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018cac:	42ae      	cmp	r6, r5
 8018cae:	da13      	bge.n	8018cd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018cb0:	460e      	mov	r6, r1
 8018cb2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018cb6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018cba:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018cbe:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8018cc2:	6005      	str	r5, [r0, #0]
 8018cc4:	6875      	ldr	r5, [r6, #4]
 8018cc6:	6045      	str	r5, [r0, #4]
 8018cc8:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018ccc:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018cd0:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018cd4:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018cd8:	3308      	adds	r3, #8
 8018cda:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018cde:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8018ce2:	45e6      	cmp	lr, ip
 8018ce4:	dbf8      	blt.n	8018cd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018ce6:	d105      	bne.n	8018cf4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018ce8:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018cec:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018cf0:	42ae      	cmp	r6, r5
 8018cf2:	dbf1      	blt.n	8018cd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018cf4:	4615      	mov	r5, r2
 8018cf6:	3a08      	subs	r2, #8
 8018cf8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8018cfc:	45b4      	cmp	ip, r6
 8018cfe:	dbf9      	blt.n	8018cf4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018d00:	d105      	bne.n	8018d0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8018d02:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018d06:	f9b2 6000 	ldrsh.w	r6, [r2]
 8018d0a:	45b0      	cmp	r8, r6
 8018d0c:	dbf2      	blt.n	8018cf4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018d0e:	4293      	cmp	r3, r2
 8018d10:	f1a5 0608 	sub.w	r6, r5, #8
 8018d14:	d816      	bhi.n	8018d44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8018d16:	f8d6 c000 	ldr.w	ip, [r6]
 8018d1a:	f9b3 a000 	ldrsh.w	sl, [r3]
 8018d1e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8018d22:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8018d26:	f8c3 c000 	str.w	ip, [r3]
 8018d2a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018d2e:	f8c3 c004 	str.w	ip, [r3, #4]
 8018d32:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018d36:	f825 ec06 	strh.w	lr, [r5, #-6]
 8018d3a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018d3e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8018d42:	e7c9      	b.n	8018cd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018d44:	f8d6 e000 	ldr.w	lr, [r6]
 8018d48:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018d4c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8018d50:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8018d54:	f8c0 e000 	str.w	lr, [r0]
 8018d58:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8018d5c:	1a16      	subs	r6, r2, r0
 8018d5e:	f8c0 e004 	str.w	lr, [r0, #4]
 8018d62:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018d66:	f825 cc06 	strh.w	ip, [r5, #-6]
 8018d6a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018d6e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8018d72:	1acd      	subs	r5, r1, r3
 8018d74:	10ed      	asrs	r5, r5, #3
 8018d76:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8018d7a:	bfb5      	itete	lt
 8018d7c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8018d80:	e9c4 3100 	strdge	r3, r1, [r4]
 8018d84:	460a      	movlt	r2, r1
 8018d86:	4603      	movge	r3, r0
 8018d88:	3408      	adds	r4, #8
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	4611      	mov	r1, r2
 8018d8e:	e724      	b.n	8018bda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018d90:	4299      	cmp	r1, r3
 8018d92:	d927      	bls.n	8018de4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8018d94:	f1a3 0210 	sub.w	r2, r3, #16
 8018d98:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8018d9c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8018da0:	45ac      	cmp	ip, r5
 8018da2:	db06      	blt.n	8018db2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8018da4:	d11c      	bne.n	8018de0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8018da6:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8018daa:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8018dae:	42ae      	cmp	r6, r5
 8018db0:	da16      	bge.n	8018de0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8018db2:	4615      	mov	r5, r2
 8018db4:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018db8:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8018dbc:	3a08      	subs	r2, #8
 8018dbe:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018dc2:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8018dc6:	6196      	str	r6, [r2, #24]
 8018dc8:	42a8      	cmp	r0, r5
 8018dca:	686e      	ldr	r6, [r5, #4]
 8018dcc:	f8a2 9010 	strh.w	r9, [r2, #16]
 8018dd0:	61d6      	str	r6, [r2, #28]
 8018dd2:	f8a2 c012 	strh.w	ip, [r2, #18]
 8018dd6:	f8a2 8014 	strh.w	r8, [r2, #20]
 8018dda:	f8a2 e016 	strh.w	lr, [r2, #22]
 8018dde:	d1db      	bne.n	8018d98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8018de0:	3308      	adds	r3, #8
 8018de2:	e7d5      	b.n	8018d90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018de4:	42bc      	cmp	r4, r7
 8018de6:	d903      	bls.n	8018df0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8018de8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8018dec:	3c08      	subs	r4, #8
 8018dee:	e6f4      	b.n	8018bda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018df0:	b050      	add	sp, #320	@ 0x140
 8018df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018df6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8018df6:	b510      	push	{r4, lr}
 8018df8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018dfa:	4604      	mov	r4, r0
 8018dfc:	07da      	lsls	r2, r3, #31
 8018dfe:	d507      	bpl.n	8018e10 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8018e00:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8018e04:	f7ff fe8c 	bl	8018b20 <_ZN8touchgfx7Outline6lineToEii>
 8018e08:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018e0a:	f023 0301 	bic.w	r3, r3, #1
 8018e0e:	6243      	str	r3, [r0, #36]	@ 0x24
 8018e10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018e12:	079b      	lsls	r3, r3, #30
 8018e14:	d521      	bpl.n	8018e5a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8018e16:	6923      	ldr	r3, [r4, #16]
 8018e18:	88d9      	ldrh	r1, [r3, #6]
 8018e1a:	889a      	ldrh	r2, [r3, #4]
 8018e1c:	430a      	orrs	r2, r1
 8018e1e:	d010      	beq.n	8018e42 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018e20:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018e24:	2a00      	cmp	r2, #0
 8018e26:	db0c      	blt.n	8018e42 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018e28:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018e2a:	428a      	cmp	r2, r1
 8018e2c:	da09      	bge.n	8018e42 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018e2e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8018e32:	4291      	cmp	r1, r2
 8018e34:	f102 0201 	add.w	r2, r2, #1
 8018e38:	bf88      	it	hi
 8018e3a:	3308      	addhi	r3, #8
 8018e3c:	60a2      	str	r2, [r4, #8]
 8018e3e:	bf88      	it	hi
 8018e40:	6123      	strhi	r3, [r4, #16]
 8018e42:	68a1      	ldr	r1, [r4, #8]
 8018e44:	b129      	cbz	r1, 8018e52 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018e46:	6863      	ldr	r3, [r4, #4]
 8018e48:	4299      	cmp	r1, r3
 8018e4a:	d802      	bhi.n	8018e52 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018e4c:	68e0      	ldr	r0, [r4, #12]
 8018e4e:	f7ff febd 	bl	8018bcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8018e52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018e54:	f023 0302 	bic.w	r3, r3, #2
 8018e58:	6263      	str	r3, [r4, #36]	@ 0x24
 8018e5a:	68e0      	ldr	r0, [r4, #12]
 8018e5c:	bd10      	pop	{r4, pc}
	...

08018e60 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8018e60:	4b02      	ldr	r3, [pc, #8]	@ (8018e6c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8018e62:	6018      	str	r0, [r3, #0]
 8018e64:	4b02      	ldr	r3, [pc, #8]	@ (8018e70 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8018e66:	6019      	str	r1, [r3, #0]
 8018e68:	4770      	bx	lr
 8018e6a:	bf00      	nop
 8018e6c:	240285bc 	.word	0x240285bc
 8018e70:	240285c0 	.word	0x240285c0

08018e74 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8018e74:	2300      	movs	r3, #0
 8018e76:	4a02      	ldr	r2, [pc, #8]	@ (8018e80 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8018e78:	6013      	str	r3, [r2, #0]
 8018e7a:	4a02      	ldr	r2, [pc, #8]	@ (8018e84 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8018e7c:	6013      	str	r3, [r2, #0]
 8018e7e:	4770      	bx	lr
 8018e80:	240285bc 	.word	0x240285bc
 8018e84:	240285c0 	.word	0x240285c0

08018e88 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018e88:	4b01      	ldr	r3, [pc, #4]	@ (8018e90 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018e8a:	6818      	ldr	r0, [r3, #0]
 8018e8c:	4770      	bx	lr
 8018e8e:	bf00      	nop
 8018e90:	240285bc 	.word	0x240285bc

08018e94 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018e94:	4b01      	ldr	r3, [pc, #4]	@ (8018e9c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8018e96:	6818      	ldr	r0, [r3, #0]
 8018e98:	4770      	bx	lr
 8018e9a:	bf00      	nop
 8018e9c:	240285c0 	.word	0x240285c0

08018ea0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018ea0:	b510      	push	{r4, lr}
 8018ea2:	6803      	ldr	r3, [r0, #0]
 8018ea4:	460c      	mov	r4, r1
 8018ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ea8:	4798      	blx	r3
 8018eaa:	1b03      	subs	r3, r0, r4
 8018eac:	4258      	negs	r0, r3
 8018eae:	4158      	adcs	r0, r3
 8018eb0:	bd10      	pop	{r4, pc}
	...

08018eb4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018eb4:	4b01      	ldr	r3, [pc, #4]	@ (8018ebc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018eb6:	6019      	str	r1, [r3, #0]
 8018eb8:	4770      	bx	lr
 8018eba:	bf00      	nop
 8018ebc:	240285c4 	.word	0x240285c4

08018ec0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec4:	4696      	mov	lr, r2
 8018ec6:	b097      	sub	sp, #92	@ 0x5c
 8018ec8:	4605      	mov	r5, r0
 8018eca:	4614      	mov	r4, r2
 8018ecc:	460e      	mov	r6, r1
 8018ece:	461f      	mov	r7, r3
 8018ed0:	f10d 0c1c 	add.w	ip, sp, #28
 8018ed4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8018ed8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8018edc:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8018ee0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ee4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ee8:	f8de 3000 	ldr.w	r3, [lr]
 8018eec:	f104 0e14 	add.w	lr, r4, #20
 8018ef0:	f8cc 3000 	str.w	r3, [ip]
 8018ef4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018ef8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018efc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f00:	f8de 3000 	ldr.w	r3, [lr]
 8018f04:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8018f08:	f8cc 3000 	str.w	r3, [ip]
 8018f0c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8018f10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f18:	f8de 3000 	ldr.w	r3, [lr]
 8018f1c:	4631      	mov	r1, r6
 8018f1e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018f20:	4628      	mov	r0, r5
 8018f22:	f8cc 3000 	str.w	r3, [ip]
 8018f26:	682b      	ldr	r3, [r5, #0]
 8018f28:	9201      	str	r2, [sp, #4]
 8018f2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018f2c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018f30:	9200      	str	r2, [sp, #0]
 8018f32:	aa07      	add	r2, sp, #28
 8018f34:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018f38:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8018f3c:	463b      	mov	r3, r7
 8018f3e:	47d8      	blx	fp
 8018f40:	46a6      	mov	lr, r4
 8018f42:	f10d 0c1c 	add.w	ip, sp, #28
 8018f46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f4e:	f8de 3000 	ldr.w	r3, [lr]
 8018f52:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8018f56:	343c      	adds	r4, #60	@ 0x3c
 8018f58:	f8cc 3000 	str.w	r3, [ip]
 8018f5c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018f60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f68:	f8de 3000 	ldr.w	r3, [lr]
 8018f6c:	f8cc 3000 	str.w	r3, [ip]
 8018f70:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8018f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f7a:	6823      	ldr	r3, [r4, #0]
 8018f7c:	4631      	mov	r1, r6
 8018f7e:	4628      	mov	r0, r5
 8018f80:	f8cc 3000 	str.w	r3, [ip]
 8018f84:	682b      	ldr	r3, [r5, #0]
 8018f86:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018f8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018f8c:	f8cd 8008 	str.w	r8, [sp, #8]
 8018f90:	9201      	str	r2, [sp, #4]
 8018f92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018f94:	9200      	str	r2, [sp, #0]
 8018f96:	aa07      	add	r2, sp, #28
 8018f98:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8018f9a:	463b      	mov	r3, r7
 8018f9c:	47a0      	blx	r4
 8018f9e:	b017      	add	sp, #92	@ 0x5c
 8018fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018fa4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8018fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa8:	b08d      	sub	sp, #52	@ 0x34
 8018faa:	4688      	mov	r8, r1
 8018fac:	f8d3 c000 	ldr.w	ip, [r3]
 8018fb0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018fb2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8018fb6:	680f      	ldr	r7, [r1, #0]
 8018fb8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8018fbc:	eba7 070c 	sub.w	r7, r7, ip
 8018fc0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8018fc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8018fc8:	42bc      	cmp	r4, r7
 8018fca:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018fcc:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8018fd0:	bfa8      	it	ge
 8018fd2:	463c      	movge	r4, r7
 8018fd4:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018fd8:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018fdc:	ee07 4a90 	vmov	s15, r4
 8018fe0:	eb09 0e0c 	add.w	lr, r9, ip
 8018fe4:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8018fe8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018fec:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8018ff0:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8018ff4:	4571      	cmp	r1, lr
 8018ff6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018ffa:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018ffe:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019002:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019006:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801900a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801900e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019012:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019016:	ee61 1a87 	vmul.f32	s3, s3, s14
 801901a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801901e:	f340 808c 	ble.w	801913a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019022:	eba1 060e 	sub.w	r6, r1, lr
 8019026:	fb96 f5f4 	sdiv	r5, r6, r4
 801902a:	ee07 5a10 	vmov	s14, r5
 801902e:	2d00      	cmp	r5, #0
 8019030:	fb04 6615 	mls	r6, r4, r5, r6
 8019034:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019038:	eea7 0a04 	vfma.f32	s0, s14, s8
 801903c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019040:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019044:	dd12      	ble.n	801906c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019046:	ee70 6a44 	vsub.f32	s13, s0, s8
 801904a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801904e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019052:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801905a:	bf14      	ite	ne
 801905c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019060:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019064:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019068:	ee22 2a07 	vmul.f32	s4, s4, s14
 801906c:	fb05 f204 	mul.w	r2, r5, r4
 8019070:	1abf      	subs	r7, r7, r2
 8019072:	4494      	add	ip, r2
 8019074:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019078:	4411      	add	r1, r2
 801907a:	eb09 020c 	add.w	r2, r9, ip
 801907e:	b209      	sxth	r1, r1
 8019080:	443a      	add	r2, r7
 8019082:	428a      	cmp	r2, r1
 8019084:	bfc4      	itt	gt
 8019086:	eba1 0209 	subgt.w	r2, r1, r9
 801908a:	eba2 070c 	subgt.w	r7, r2, ip
 801908e:	2f00      	cmp	r7, #0
 8019090:	dd50      	ble.n	8019134 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019092:	fb97 f1f4 	sdiv	r1, r7, r4
 8019096:	fb04 7211 	mls	r2, r4, r1, r7
 801909a:	b90a      	cbnz	r2, 80190a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801909c:	3901      	subs	r1, #1
 801909e:	4622      	mov	r2, r4
 80190a0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80190a4:	6840      	ldr	r0, [r0, #4]
 80190a6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80190aa:	44b6      	add	lr, r6
 80190ac:	f8d0 a000 	ldr.w	sl, [r0]
 80190b0:	2900      	cmp	r1, #0
 80190b2:	bfcc      	ite	gt
 80190b4:	46a1      	movgt	r9, r4
 80190b6:	4691      	movle	r9, r2
 80190b8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80190ba:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80190bc:	fb04 e505 	mla	r5, r4, r5, lr
 80190c0:	eef0 6a42 	vmov.f32	s13, s4
 80190c4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80190c8:	9008      	str	r0, [sp, #32]
 80190ca:	eeb0 7a61 	vmov.f32	s14, s3
 80190ce:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80190d0:	695b      	ldr	r3, [r3, #20]
 80190d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80190d6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80190da:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80190de:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80190e0:	445b      	add	r3, fp
 80190e2:	9307      	str	r3, [sp, #28]
 80190e4:	ee16 3a90 	vmov	r3, s13
 80190e8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80190ec:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80190f0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80190f4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80190f8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80190fc:	ee17 7a90 	vmov	r7, s15
 8019100:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019104:	fb97 f7f4 	sdiv	r7, r7, r4
 8019108:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801910c:	ee17 ca90 	vmov	ip, s15
 8019110:	fb9c fcf4 	sdiv	ip, ip, r4
 8019114:	fb0c 3306 	mla	r3, ip, r6, r3
 8019118:	9302      	str	r3, [sp, #8]
 801911a:	ee17 3a10 	vmov	r3, s14
 801911e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019122:	fb07 3706 	mla	r7, r7, r6, r3
 8019126:	eba9 0306 	sub.w	r3, r9, r6
 801912a:	e9cd 4700 	strd	r4, r7, [sp]
 801912e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019132:	47a0      	blx	r4
 8019134:	b00d      	add	sp, #52	@ 0x34
 8019136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801913a:	2500      	movs	r5, #0
 801913c:	462e      	mov	r6, r5
 801913e:	e799      	b.n	8019074 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019144:	b0db      	sub	sp, #364	@ 0x16c
 8019146:	461d      	mov	r5, r3
 8019148:	4614      	mov	r4, r2
 801914a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801914e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8019150:	4629      	mov	r1, r5
 8019152:	930a      	str	r3, [sp, #40]	@ 0x28
 8019154:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8019158:	9009      	str	r0, [sp, #36]	@ 0x24
 801915a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801915c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8019160:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8019164:	9310      	str	r3, [sp, #64]	@ 0x40
 8019166:	6803      	ldr	r3, [r0, #0]
 8019168:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801916a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801916e:	47b8      	blx	r7
 8019170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019172:	6058      	str	r0, [r3, #4]
 8019174:	2800      	cmp	r0, #0
 8019176:	f000 83a1 	beq.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801917a:	682b      	ldr	r3, [r5, #0]
 801917c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019180:	ed94 7a02 	vldr	s14, [r4, #8]
 8019184:	9314      	str	r3, [sp, #80]	@ 0x50
 8019186:	686b      	ldr	r3, [r5, #4]
 8019188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801918c:	9315      	str	r3, [sp, #84]	@ 0x54
 801918e:	4bc1      	ldr	r3, [pc, #772]	@ (8019494 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019190:	7819      	ldrb	r1, [r3, #0]
 8019192:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019196:	2900      	cmp	r1, #0
 8019198:	bf16      	itet	ne
 801919a:	4619      	movne	r1, r3
 801919c:	4611      	moveq	r1, r2
 801919e:	4613      	movne	r3, r2
 80191a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191a4:	9116      	str	r1, [sp, #88]	@ 0x58
 80191a6:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80191aa:	f240 8387 	bls.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80191ae:	ed94 7a07 	vldr	s14, [r4, #28]
 80191b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80191b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ba:	f240 837f 	bls.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80191be:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80191c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80191c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ca:	f240 8377 	bls.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80191ce:	6822      	ldr	r2, [r4, #0]
 80191d0:	4bb1      	ldr	r3, [pc, #708]	@ (8019498 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80191d2:	429a      	cmp	r2, r3
 80191d4:	f2c0 8372 	blt.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80191d8:	49b0      	ldr	r1, [pc, #704]	@ (801949c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80191da:	6963      	ldr	r3, [r4, #20]
 80191dc:	428a      	cmp	r2, r1
 80191de:	f300 836d 	bgt.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80191e2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80191e6:	48ae      	ldr	r0, [pc, #696]	@ (80194a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80191e8:	33ff      	adds	r3, #255	@ 0xff
 80191ea:	4283      	cmp	r3, r0
 80191ec:	f200 8366 	bhi.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80191f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80191f2:	4dac      	ldr	r5, [pc, #688]	@ (80194a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80191f4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80191f8:	33ff      	adds	r3, #255	@ 0xff
 80191fa:	42ab      	cmp	r3, r5
 80191fc:	f200 835e 	bhi.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019200:	6862      	ldr	r2, [r4, #4]
 8019202:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8019206:	33ff      	adds	r3, #255	@ 0xff
 8019208:	4283      	cmp	r3, r0
 801920a:	f200 8357 	bhi.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801920e:	69a1      	ldr	r1, [r4, #24]
 8019210:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8019214:	33ff      	adds	r3, #255	@ 0xff
 8019216:	4283      	cmp	r3, r0
 8019218:	f200 8350 	bhi.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801921c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801921e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8019222:	30ff      	adds	r0, #255	@ 0xff
 8019224:	42a8      	cmp	r0, r5
 8019226:	f200 8349 	bhi.w	80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801922a:	428a      	cmp	r2, r1
 801922c:	f280 8110 	bge.w	8019450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019230:	429a      	cmp	r2, r3
 8019232:	f300 8119 	bgt.w	8019468 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019236:	4299      	cmp	r1, r3
 8019238:	f280 811d 	bge.w	8019476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801923c:	2502      	movs	r5, #2
 801923e:	2701      	movs	r7, #1
 8019240:	46a9      	mov	r9, r5
 8019242:	46b8      	mov	r8, r7
 8019244:	f04f 0a00 	mov.w	sl, #0
 8019248:	4621      	mov	r1, r4
 801924a:	a849      	add	r0, sp, #292	@ 0x124
 801924c:	f004 f97a 	bl	801d544 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019250:	4622      	mov	r2, r4
 8019252:	4653      	mov	r3, sl
 8019254:	a949      	add	r1, sp, #292	@ 0x124
 8019256:	f8cd 9000 	str.w	r9, [sp]
 801925a:	a819      	add	r0, sp, #100	@ 0x64
 801925c:	f004 faa2 	bl	801d7a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019260:	4622      	mov	r2, r4
 8019262:	4653      	mov	r3, sl
 8019264:	a949      	add	r1, sp, #292	@ 0x124
 8019266:	f8cd 8000 	str.w	r8, [sp]
 801926a:	a829      	add	r0, sp, #164	@ 0xa4
 801926c:	f004 fa9a 	bl	801d7a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019270:	4643      	mov	r3, r8
 8019272:	4622      	mov	r2, r4
 8019274:	a949      	add	r1, sp, #292	@ 0x124
 8019276:	f8cd 9000 	str.w	r9, [sp]
 801927a:	a839      	add	r0, sp, #228	@ 0xe4
 801927c:	f004 fa92 	bl	801d7a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019280:	42af      	cmp	r7, r5
 8019282:	af12      	add	r7, sp, #72	@ 0x48
 8019284:	bfb7      	itett	lt
 8019286:	2300      	movlt	r3, #0
 8019288:	2301      	movge	r3, #1
 801928a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801928c:	ac19      	addlt	r4, sp, #100	@ 0x64
 801928e:	bfb1      	iteee	lt
 8019290:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8019292:	ad19      	addge	r5, sp, #100	@ 0x64
 8019294:	930e      	strge	r3, [sp, #56]	@ 0x38
 8019296:	ac29      	addge	r4, sp, #164	@ 0xa4
 8019298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801929a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801929e:	e887 0003 	stmia.w	r7, {r0, r1}
 80192a2:	b928      	cbnz	r0, 80192b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80192a4:	4b80      	ldr	r3, [pc, #512]	@ (80194a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80192a6:	6818      	ldr	r0, [r3, #0]
 80192a8:	6803      	ldr	r3, [r0, #0]
 80192aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192ac:	4798      	blx	r3
 80192ae:	6038      	str	r0, [r7, #0]
 80192b0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80192b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80192b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80192ba:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80192bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80192be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80192c0:	6963      	ldr	r3, [r4, #20]
 80192c2:	440b      	add	r3, r1
 80192c4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80192c8:	4408      	add	r0, r1
 80192ca:	b200      	sxth	r0, r0
 80192cc:	4283      	cmp	r3, r0
 80192ce:	900d      	str	r0, [sp, #52]	@ 0x34
 80192d0:	f280 80dd 	bge.w	801948e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80192d4:	428b      	cmp	r3, r1
 80192d6:	da08      	bge.n	80192ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80192d8:	2a00      	cmp	r2, #0
 80192da:	dd06      	ble.n	80192ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80192dc:	1acb      	subs	r3, r1, r3
 80192de:	429a      	cmp	r2, r3
 80192e0:	f2c0 80e4 	blt.w	80194ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	f300 80e2 	bgt.w	80194ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80192ea:	6967      	ldr	r7, [r4, #20]
 80192ec:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80192f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192f2:	443b      	add	r3, r7
 80192f4:	461f      	mov	r7, r3
 80192f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80192f8:	1bdf      	subs	r7, r3, r7
 80192fa:	4297      	cmp	r7, r2
 80192fc:	bfa8      	it	ge
 80192fe:	4617      	movge	r7, r2
 8019300:	2f00      	cmp	r7, #0
 8019302:	f340 8166 	ble.w	80195d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019306:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019308:	6829      	ldr	r1, [r5, #0]
 801930a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801930e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019312:	4411      	add	r1, r2
 8019314:	6820      	ldr	r0, [r4, #0]
 8019316:	4299      	cmp	r1, r3
 8019318:	dd1a      	ble.n	8019350 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801931a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801931e:	4402      	add	r2, r0
 8019320:	440b      	add	r3, r1
 8019322:	b21b      	sxth	r3, r3
 8019324:	429a      	cmp	r2, r3
 8019326:	dc13      	bgt.n	8019350 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019328:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801932a:	a912      	add	r1, sp, #72	@ 0x48
 801932c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801932e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	9206      	str	r2, [sp, #24]
 8019334:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019336:	9500      	str	r5, [sp, #0]
 8019338:	9205      	str	r2, [sp, #20]
 801933a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801933c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019340:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019342:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019346:	aa49      	add	r2, sp, #292	@ 0x124
 8019348:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801934c:	4623      	mov	r3, r4
 801934e:	47c8      	blx	r9
 8019350:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019354:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019358:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801935c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019360:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019364:	68a1      	ldr	r1, [r4, #8]
 8019366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801936a:	ed94 6a08 	vldr	s12, [r4, #32]
 801936e:	edd4 6a07 	vldr	s13, [r4, #28]
 8019372:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019376:	ee76 6a86 	vadd.f32	s13, s13, s12
 801937a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801937e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019382:	edc4 6a07 	vstr	s13, [r4, #28]
 8019386:	441a      	add	r2, r3
 8019388:	6963      	ldr	r3, [r4, #20]
 801938a:	3301      	adds	r3, #1
 801938c:	6022      	str	r2, [r4, #0]
 801938e:	6163      	str	r3, [r4, #20]
 8019390:	69a3      	ldr	r3, [r4, #24]
 8019392:	3b01      	subs	r3, #1
 8019394:	61a3      	str	r3, [r4, #24]
 8019396:	6923      	ldr	r3, [r4, #16]
 8019398:	440b      	add	r3, r1
 801939a:	68e1      	ldr	r1, [r4, #12]
 801939c:	428b      	cmp	r3, r1
 801939e:	6123      	str	r3, [r4, #16]
 80193a0:	db15      	blt.n	80193ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80193a2:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80193a6:	3201      	adds	r2, #1
 80193a8:	1a5b      	subs	r3, r3, r1
 80193aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80193ae:	6022      	str	r2, [r4, #0]
 80193b0:	6123      	str	r3, [r4, #16]
 80193b2:	edc4 6a07 	vstr	s13, [r4, #28]
 80193b6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80193ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 80193be:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80193c2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80193c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80193ca:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80193ce:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80193d2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80193d6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80193da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80193de:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80193e2:	68a9      	ldr	r1, [r5, #8]
 80193e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80193e8:	ed95 6a08 	vldr	s12, [r5, #32]
 80193ec:	edd5 6a07 	vldr	s13, [r5, #28]
 80193f0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80193f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80193f8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80193fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019400:	edc5 6a07 	vstr	s13, [r5, #28]
 8019404:	441a      	add	r2, r3
 8019406:	696b      	ldr	r3, [r5, #20]
 8019408:	3301      	adds	r3, #1
 801940a:	602a      	str	r2, [r5, #0]
 801940c:	616b      	str	r3, [r5, #20]
 801940e:	69ab      	ldr	r3, [r5, #24]
 8019410:	3b01      	subs	r3, #1
 8019412:	61ab      	str	r3, [r5, #24]
 8019414:	692b      	ldr	r3, [r5, #16]
 8019416:	440b      	add	r3, r1
 8019418:	68e9      	ldr	r1, [r5, #12]
 801941a:	428b      	cmp	r3, r1
 801941c:	612b      	str	r3, [r5, #16]
 801941e:	db15      	blt.n	801944c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019420:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019424:	3201      	adds	r2, #1
 8019426:	1a5b      	subs	r3, r3, r1
 8019428:	ee76 6a26 	vadd.f32	s13, s12, s13
 801942c:	602a      	str	r2, [r5, #0]
 801942e:	612b      	str	r3, [r5, #16]
 8019430:	edc5 6a07 	vstr	s13, [r5, #28]
 8019434:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019438:	ee36 7a87 	vadd.f32	s14, s13, s14
 801943c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019440:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019448:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801944c:	3f01      	subs	r7, #1
 801944e:	e757      	b.n	8019300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019450:	4299      	cmp	r1, r3
 8019452:	dc13      	bgt.n	801947c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019454:	429a      	cmp	r2, r3
 8019456:	da14      	bge.n	8019482 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019458:	2502      	movs	r5, #2
 801945a:	2703      	movs	r7, #3
 801945c:	f04f 0800 	mov.w	r8, #0
 8019460:	46a9      	mov	r9, r5
 8019462:	f04f 0a01 	mov.w	sl, #1
 8019466:	e6ef      	b.n	8019248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019468:	2501      	movs	r5, #1
 801946a:	2700      	movs	r7, #0
 801946c:	46a9      	mov	r9, r5
 801946e:	46b8      	mov	r8, r7
 8019470:	f04f 0a02 	mov.w	sl, #2
 8019474:	e6e8      	b.n	8019248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019476:	2501      	movs	r5, #1
 8019478:	2702      	movs	r7, #2
 801947a:	e6e1      	b.n	8019240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801947c:	2500      	movs	r5, #0
 801947e:	2701      	movs	r7, #1
 8019480:	e7f4      	b.n	801946c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019482:	2702      	movs	r7, #2
 8019484:	2503      	movs	r5, #3
 8019486:	f04f 0900 	mov.w	r9, #0
 801948a:	46b8      	mov	r8, r7
 801948c:	e7e9      	b.n	8019462 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801948e:	4613      	mov	r3, r2
 8019490:	e728      	b.n	80192e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019492:	bf00      	nop
 8019494:	240285ac 	.word	0x240285ac
 8019498:	fffd8f01 	.word	0xfffd8f01
 801949c:	00027100 	.word	0x00027100
 80194a0:	0004e1ff 	.word	0x0004e1ff
 80194a4:	0004e1fe 	.word	0x0004e1fe
 80194a8:	240285b4 	.word	0x240285b4
 80194ac:	4613      	mov	r3, r2
 80194ae:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80194b0:	469e      	mov	lr, r3
 80194b2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80194b4:	469c      	mov	ip, r3
 80194b6:	9111      	str	r1, [sp, #68]	@ 0x44
 80194b8:	f04f 0900 	mov.w	r9, #0
 80194bc:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80194c0:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80194c4:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80194c8:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80194cc:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80194d0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80194d4:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80194d8:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80194dc:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80194e0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80194e4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80194e8:	f1bc 0f00 	cmp.w	ip, #0
 80194ec:	d147      	bne.n	801957e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80194ee:	eb03 0c07 	add.w	ip, r3, r7
 80194f2:	1ad7      	subs	r7, r2, r3
 80194f4:	f1b9 0f00 	cmp.w	r9, #0
 80194f8:	d009      	beq.n	801950e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80194fa:	9029      	str	r0, [sp, #164]	@ 0xa4
 80194fc:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8019500:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8019504:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8019508:	912d      	str	r1, [sp, #180]	@ 0xb4
 801950a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801950e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019510:	f04f 0800 	mov.w	r8, #0
 8019514:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8019518:	9111      	str	r1, [sp, #68]	@ 0x44
 801951a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801951e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019522:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019526:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801952a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801952e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019532:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019536:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801953a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801953e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8019542:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019546:	f1be 0f00 	cmp.w	lr, #0
 801954a:	d031      	beq.n	80195b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801954c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801954e:	4450      	add	r0, sl
 8019550:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019554:	4431      	add	r1, r6
 8019556:	ee37 7a04 	vadd.f32	s14, s14, s8
 801955a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801955e:	4549      	cmp	r1, r9
 8019560:	db08      	blt.n	8019574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019562:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019566:	3001      	adds	r0, #1
 8019568:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801956c:	eba1 0109 	sub.w	r1, r1, r9
 8019570:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019574:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019578:	f04f 0801 	mov.w	r8, #1
 801957c:	e7e3      	b.n	8019546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801957e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019580:	4450      	add	r0, sl
 8019582:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019586:	4431      	add	r1, r6
 8019588:	ee77 7a84 	vadd.f32	s15, s15, s8
 801958c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019590:	4541      	cmp	r1, r8
 8019592:	db08      	blt.n	80195a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019594:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019598:	3001      	adds	r0, #1
 801959a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801959e:	eba1 0108 	sub.w	r1, r1, r8
 80195a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80195a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80195aa:	f04f 0901 	mov.w	r9, #1
 80195ae:	e79b      	b.n	80194e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80195b0:	449c      	add	ip, r3
 80195b2:	1aff      	subs	r7, r7, r3
 80195b4:	f1b8 0f00 	cmp.w	r8, #0
 80195b8:	d009      	beq.n	80195ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80195ba:	9019      	str	r0, [sp, #100]	@ 0x64
 80195bc:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80195c0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80195c4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80195c8:	911d      	str	r1, [sp, #116]	@ 0x74
 80195ca:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80195ce:	1ad2      	subs	r2, r2, r3
 80195d0:	e68b      	b.n	80192ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80195d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80195d4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	f000 80d1 	beq.w	801977e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80195dc:	ad19      	add	r5, sp, #100	@ 0x64
 80195de:	ac39      	add	r4, sp, #228	@ 0xe4
 80195e0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80195e2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80195e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80195ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80195ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80195ee:	6963      	ldr	r3, [r4, #20]
 80195f0:	440b      	add	r3, r1
 80195f2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80195f6:	4408      	add	r0, r1
 80195f8:	b200      	sxth	r0, r0
 80195fa:	4283      	cmp	r3, r0
 80195fc:	900d      	str	r0, [sp, #52]	@ 0x34
 80195fe:	f280 80c1 	bge.w	8019784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019602:	428b      	cmp	r3, r1
 8019604:	da08      	bge.n	8019618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019606:	2a00      	cmp	r2, #0
 8019608:	dd06      	ble.n	8019618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801960a:	1acb      	subs	r3, r1, r3
 801960c:	429a      	cmp	r2, r3
 801960e:	f2c0 80bb 	blt.w	8019788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019612:	2b00      	cmp	r3, #0
 8019614:	f300 80b9 	bgt.w	801978a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019618:	6967      	ldr	r7, [r4, #20]
 801961a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801961e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019620:	443b      	add	r3, r7
 8019622:	461f      	mov	r7, r3
 8019624:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019626:	1bdf      	subs	r7, r3, r7
 8019628:	4297      	cmp	r7, r2
 801962a:	bfa8      	it	ge
 801962c:	4617      	movge	r7, r2
 801962e:	2f00      	cmp	r7, #0
 8019630:	f340 813c 	ble.w	80198ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019634:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019636:	6829      	ldr	r1, [r5, #0]
 8019638:	f9b3 2000 	ldrsh.w	r2, [r3]
 801963c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019640:	4411      	add	r1, r2
 8019642:	6820      	ldr	r0, [r4, #0]
 8019644:	4299      	cmp	r1, r3
 8019646:	dd1a      	ble.n	801967e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019648:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801964c:	4402      	add	r2, r0
 801964e:	440b      	add	r3, r1
 8019650:	b21b      	sxth	r3, r3
 8019652:	429a      	cmp	r2, r3
 8019654:	dc13      	bgt.n	801967e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019656:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019658:	a912      	add	r1, sp, #72	@ 0x48
 801965a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801965c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	9206      	str	r2, [sp, #24]
 8019662:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019664:	9500      	str	r5, [sp, #0]
 8019666:	9205      	str	r2, [sp, #20]
 8019668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801966a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801966e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019670:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019674:	aa49      	add	r2, sp, #292	@ 0x124
 8019676:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801967a:	4623      	mov	r3, r4
 801967c:	47c8      	blx	r9
 801967e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019682:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8019686:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801968a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801968e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019692:	68a1      	ldr	r1, [r4, #8]
 8019694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019698:	ed94 6a08 	vldr	s12, [r4, #32]
 801969c:	edd4 6a07 	vldr	s13, [r4, #28]
 80196a0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80196a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80196a8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80196ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80196b0:	edc4 6a07 	vstr	s13, [r4, #28]
 80196b4:	441a      	add	r2, r3
 80196b6:	6963      	ldr	r3, [r4, #20]
 80196b8:	3301      	adds	r3, #1
 80196ba:	6022      	str	r2, [r4, #0]
 80196bc:	6163      	str	r3, [r4, #20]
 80196be:	69a3      	ldr	r3, [r4, #24]
 80196c0:	3b01      	subs	r3, #1
 80196c2:	61a3      	str	r3, [r4, #24]
 80196c4:	6923      	ldr	r3, [r4, #16]
 80196c6:	440b      	add	r3, r1
 80196c8:	68e1      	ldr	r1, [r4, #12]
 80196ca:	428b      	cmp	r3, r1
 80196cc:	6123      	str	r3, [r4, #16]
 80196ce:	db15      	blt.n	80196fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80196d0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80196d4:	3201      	adds	r2, #1
 80196d6:	1a5b      	subs	r3, r3, r1
 80196d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80196dc:	6022      	str	r2, [r4, #0]
 80196de:	6123      	str	r3, [r4, #16]
 80196e0:	edc4 6a07 	vstr	s13, [r4, #28]
 80196e4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80196e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80196ec:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80196f0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80196f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196f8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80196fc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8019700:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8019704:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8019708:	ee37 7a27 	vadd.f32	s14, s14, s15
 801970c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8019710:	68a9      	ldr	r1, [r5, #8]
 8019712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019716:	ed95 6a08 	vldr	s12, [r5, #32]
 801971a:	edd5 6a07 	vldr	s13, [r5, #28]
 801971e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019722:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019726:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801972a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801972e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019732:	441a      	add	r2, r3
 8019734:	696b      	ldr	r3, [r5, #20]
 8019736:	3301      	adds	r3, #1
 8019738:	602a      	str	r2, [r5, #0]
 801973a:	616b      	str	r3, [r5, #20]
 801973c:	69ab      	ldr	r3, [r5, #24]
 801973e:	3b01      	subs	r3, #1
 8019740:	61ab      	str	r3, [r5, #24]
 8019742:	692b      	ldr	r3, [r5, #16]
 8019744:	440b      	add	r3, r1
 8019746:	68e9      	ldr	r1, [r5, #12]
 8019748:	428b      	cmp	r3, r1
 801974a:	612b      	str	r3, [r5, #16]
 801974c:	db15      	blt.n	801977a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801974e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019752:	3201      	adds	r2, #1
 8019754:	1a5b      	subs	r3, r3, r1
 8019756:	ee76 6a26 	vadd.f32	s13, s12, s13
 801975a:	602a      	str	r2, [r5, #0]
 801975c:	612b      	str	r3, [r5, #16]
 801975e:	edc5 6a07 	vstr	s13, [r5, #28]
 8019762:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019766:	ee36 7a87 	vadd.f32	s14, s13, s14
 801976a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801976e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8019772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019776:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801977a:	3f01      	subs	r7, #1
 801977c:	e757      	b.n	801962e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801977e:	ad39      	add	r5, sp, #228	@ 0xe4
 8019780:	ac19      	add	r4, sp, #100	@ 0x64
 8019782:	e72d      	b.n	80195e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019784:	4613      	mov	r3, r2
 8019786:	e744      	b.n	8019612 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019788:	4613      	mov	r3, r2
 801978a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801978c:	469e      	mov	lr, r3
 801978e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8019792:	461f      	mov	r7, r3
 8019794:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8019798:	f04f 0900 	mov.w	r9, #0
 801979c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80197a0:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80197a4:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80197a8:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80197ac:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80197b0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80197b2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80197b6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80197ba:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80197be:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80197c2:	960e      	str	r6, [sp, #56]	@ 0x38
 80197c4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80197c8:	2f00      	cmp	r7, #0
 80197ca:	d146      	bne.n	801985a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80197cc:	449c      	add	ip, r3
 80197ce:	1ad7      	subs	r7, r2, r3
 80197d0:	f1b9 0f00 	cmp.w	r9, #0
 80197d4:	d009      	beq.n	80197ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80197d6:	9039      	str	r0, [sp, #228]	@ 0xe4
 80197d8:	913d      	str	r1, [sp, #244]	@ 0xf4
 80197da:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80197de:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80197e2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80197e6:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80197ea:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80197ec:	f04f 0800 	mov.w	r8, #0
 80197f0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80197f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80197f6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80197fa:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80197fe:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019802:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8019806:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801980a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801980e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019812:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8019816:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801981a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801981e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019822:	f1be 0f00 	cmp.w	lr, #0
 8019826:	d030      	beq.n	801988a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019828:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801982a:	4450      	add	r0, sl
 801982c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019830:	4431      	add	r1, r6
 8019832:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019836:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801983a:	4549      	cmp	r1, r9
 801983c:	db08      	blt.n	8019850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801983e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019842:	3001      	adds	r0, #1
 8019844:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019848:	eba1 0109 	sub.w	r1, r1, r9
 801984c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019850:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019854:	f04f 0801 	mov.w	r8, #1
 8019858:	e7e3      	b.n	8019822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801985a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801985c:	4450      	add	r0, sl
 801985e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019862:	4431      	add	r1, r6
 8019864:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019868:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801986c:	4541      	cmp	r1, r8
 801986e:	db08      	blt.n	8019882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019870:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019874:	3001      	adds	r0, #1
 8019876:	ee37 7a25 	vadd.f32	s14, s14, s11
 801987a:	eba1 0108 	sub.w	r1, r1, r8
 801987e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019882:	3f01      	subs	r7, #1
 8019884:	f04f 0901 	mov.w	r9, #1
 8019888:	e79e      	b.n	80197c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801988a:	449c      	add	ip, r3
 801988c:	1aff      	subs	r7, r7, r3
 801988e:	f1b8 0f00 	cmp.w	r8, #0
 8019892:	d009      	beq.n	80198a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019894:	9019      	str	r0, [sp, #100]	@ 0x64
 8019896:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801989a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801989e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80198a2:	911d      	str	r1, [sp, #116]	@ 0x74
 80198a4:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80198a8:	1ad2      	subs	r2, r2, r3
 80198aa:	e6b5      	b.n	8019618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80198ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	b923      	cbnz	r3, 80198bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198b2:	4b04      	ldr	r3, [pc, #16]	@ (80198c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80198b4:	6818      	ldr	r0, [r3, #0]
 80198b6:	6803      	ldr	r3, [r0, #0]
 80198b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198ba:	4798      	blx	r3
 80198bc:	b05b      	add	sp, #364	@ 0x16c
 80198be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198c2:	bf00      	nop
 80198c4:	240285b4 	.word	0x240285b4

080198c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80198c8:	b570      	push	{r4, r5, r6, lr}
 80198ca:	4604      	mov	r4, r0
 80198cc:	2500      	movs	r5, #0
 80198ce:	9805      	ldr	r0, [sp, #20]
 80198d0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80198d4:	6061      	str	r1, [r4, #4]
 80198d6:	8263      	strh	r3, [r4, #18]
 80198d8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80198dc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80198e0:	8025      	strh	r5, [r4, #0]
 80198e2:	7221      	strb	r1, [r4, #8]
 80198e4:	7266      	strb	r6, [r4, #9]
 80198e6:	60e0      	str	r0, [r4, #12]
 80198e8:	8222      	strh	r2, [r4, #16]
 80198ea:	82a3      	strh	r3, [r4, #20]
 80198ec:	82e5      	strh	r5, [r4, #22]
 80198ee:	8325      	strh	r5, [r4, #24]
 80198f0:	8365      	strh	r5, [r4, #26]
 80198f2:	83a5      	strh	r5, [r4, #28]
 80198f4:	83e5      	strh	r5, [r4, #30]
 80198f6:	8425      	strh	r5, [r4, #32]
 80198f8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 80198fc:	b32e      	cbz	r6, 801994a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80198fe:	6803      	ldr	r3, [r0, #0]
 8019900:	695b      	ldr	r3, [r3, #20]
 8019902:	4798      	blx	r3
 8019904:	4606      	mov	r6, r0
 8019906:	b300      	cbz	r0, 801994a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019908:	68e0      	ldr	r0, [r4, #12]
 801990a:	4631      	mov	r1, r6
 801990c:	6803      	ldr	r3, [r0, #0]
 801990e:	68db      	ldr	r3, [r3, #12]
 8019910:	4798      	blx	r3
 8019912:	4605      	mov	r5, r0
 8019914:	b1c8      	cbz	r0, 801994a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019916:	7b43      	ldrb	r3, [r0, #13]
 8019918:	7a82      	ldrb	r2, [r0, #10]
 801991a:	005b      	lsls	r3, r3, #1
 801991c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019920:	4313      	orrs	r3, r2
 8019922:	8423      	strh	r3, [r4, #32]
 8019924:	7a63      	ldrb	r3, [r4, #9]
 8019926:	2b06      	cmp	r3, #6
 8019928:	d10f      	bne.n	801994a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801992a:	68e0      	ldr	r0, [r4, #12]
 801992c:	462a      	mov	r2, r5
 801992e:	4631      	mov	r1, r6
 8019930:	6803      	ldr	r3, [r0, #0]
 8019932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019934:	4798      	blx	r3
 8019936:	7b6b      	ldrb	r3, [r5, #13]
 8019938:	005b      	lsls	r3, r3, #1
 801993a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801993e:	7aab      	ldrb	r3, [r5, #10]
 8019940:	4313      	orrs	r3, r2
 8019942:	4418      	add	r0, r3
 8019944:	8c23      	ldrh	r3, [r4, #32]
 8019946:	4418      	add	r0, r3
 8019948:	8420      	strh	r0, [r4, #32]
 801994a:	4620      	mov	r0, r4
 801994c:	bd70      	pop	{r4, r5, r6, pc}

0801994e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801994e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019952:	2400      	movs	r4, #0
 8019954:	b085      	sub	sp, #20
 8019956:	4681      	mov	r9, r0
 8019958:	4688      	mov	r8, r1
 801995a:	4692      	mov	sl, r2
 801995c:	469b      	mov	fp, r3
 801995e:	4627      	mov	r7, r4
 8019960:	4625      	mov	r5, r4
 8019962:	4626      	mov	r6, r4
 8019964:	4554      	cmp	r4, sl
 8019966:	da2a      	bge.n	80199be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019968:	2300      	movs	r3, #0
 801996a:	9303      	str	r3, [sp, #12]
 801996c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019970:	429d      	cmp	r5, r3
 8019972:	d004      	beq.n	801997e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019974:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019978:	429d      	cmp	r5, r3
 801997a:	bf18      	it	ne
 801997c:	462f      	movne	r7, r5
 801997e:	ab03      	add	r3, sp, #12
 8019980:	4642      	mov	r2, r8
 8019982:	4659      	mov	r1, fp
 8019984:	4648      	mov	r0, r9
 8019986:	f003 fbf3 	bl	801d170 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801998a:	4605      	mov	r5, r0
 801998c:	b1b8      	cbz	r0, 80199be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801998e:	280a      	cmp	r0, #10
 8019990:	d015      	beq.n	80199be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019992:	9a03      	ldr	r2, [sp, #12]
 8019994:	b18a      	cbz	r2, 80199ba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019996:	7b50      	ldrb	r0, [r2, #13]
 8019998:	4639      	mov	r1, r7
 801999a:	7a93      	ldrb	r3, [r2, #10]
 801999c:	0040      	lsls	r0, r0, #1
 801999e:	8895      	ldrh	r5, [r2, #4]
 80199a0:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80199a4:	4303      	orrs	r3, r0
 80199a6:	4640      	mov	r0, r8
 80199a8:	9301      	str	r3, [sp, #4]
 80199aa:	f8d8 3000 	ldr.w	r3, [r8]
 80199ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80199b0:	4798      	blx	r3
 80199b2:	9b01      	ldr	r3, [sp, #4]
 80199b4:	4418      	add	r0, r3
 80199b6:	4406      	add	r6, r0
 80199b8:	b2b6      	uxth	r6, r6
 80199ba:	3401      	adds	r4, #1
 80199bc:	e7d2      	b.n	8019964 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80199be:	4630      	mov	r0, r6
 80199c0:	b005      	add	sp, #20
 80199c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080199c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80199c6:	2a02      	cmp	r2, #2
 80199c8:	b530      	push	{r4, r5, lr}
 80199ca:	d011      	beq.n	80199f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80199cc:	2a03      	cmp	r2, #3
 80199ce:	d01c      	beq.n	8019a0a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80199d0:	2a01      	cmp	r2, #1
 80199d2:	d10c      	bne.n	80199ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80199d4:	888b      	ldrh	r3, [r1, #4]
 80199d6:	8801      	ldrh	r1, [r0, #0]
 80199d8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80199dc:	1a5b      	subs	r3, r3, r1
 80199de:	8844      	ldrh	r4, [r0, #2]
 80199e0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80199e4:	1a9b      	subs	r3, r3, r2
 80199e6:	8004      	strh	r4, [r0, #0]
 80199e8:	8081      	strh	r1, [r0, #4]
 80199ea:	8043      	strh	r3, [r0, #2]
 80199ec:	80c2      	strh	r2, [r0, #6]
 80199ee:	bd30      	pop	{r4, r5, pc}
 80199f0:	88cb      	ldrh	r3, [r1, #6]
 80199f2:	8842      	ldrh	r2, [r0, #2]
 80199f4:	1a9b      	subs	r3, r3, r2
 80199f6:	88c2      	ldrh	r2, [r0, #6]
 80199f8:	1a9b      	subs	r3, r3, r2
 80199fa:	888a      	ldrh	r2, [r1, #4]
 80199fc:	8801      	ldrh	r1, [r0, #0]
 80199fe:	8043      	strh	r3, [r0, #2]
 8019a00:	1a52      	subs	r2, r2, r1
 8019a02:	8881      	ldrh	r1, [r0, #4]
 8019a04:	1a52      	subs	r2, r2, r1
 8019a06:	8002      	strh	r2, [r0, #0]
 8019a08:	e7f1      	b.n	80199ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019a0a:	88cb      	ldrh	r3, [r1, #6]
 8019a0c:	8841      	ldrh	r1, [r0, #2]
 8019a0e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019a12:	1a5b      	subs	r3, r3, r1
 8019a14:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019a18:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019a1c:	1a9b      	subs	r3, r3, r2
 8019a1e:	8045      	strh	r5, [r0, #2]
 8019a20:	8082      	strh	r2, [r0, #4]
 8019a22:	8003      	strh	r3, [r0, #0]
 8019a24:	80c4      	strh	r4, [r0, #6]
 8019a26:	e7e2      	b.n	80199ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019a28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a2c:	b09f      	sub	sp, #124	@ 0x7c
 8019a2e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019a30:	9312      	str	r3, [sp, #72]	@ 0x48
 8019a32:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8019a34:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019a36:	8812      	ldrh	r2, [r2, #0]
 8019a38:	889b      	ldrh	r3, [r3, #4]
 8019a3a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8019a3c:	4413      	add	r3, r2
 8019a3e:	900e      	str	r0, [sp, #56]	@ 0x38
 8019a40:	6828      	ldr	r0, [r5, #0]
 8019a42:	b21b      	sxth	r3, r3
 8019a44:	9117      	str	r1, [sp, #92]	@ 0x5c
 8019a46:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8019a4a:	9311      	str	r3, [sp, #68]	@ 0x44
 8019a4c:	6803      	ldr	r3, [r0, #0]
 8019a4e:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8019a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019a54:	4798      	blx	r3
 8019a56:	682b      	ldr	r3, [r5, #0]
 8019a58:	9013      	str	r0, [sp, #76]	@ 0x4c
 8019a5a:	7b1a      	ldrb	r2, [r3, #12]
 8019a5c:	7adb      	ldrb	r3, [r3, #11]
 8019a5e:	9215      	str	r2, [sp, #84]	@ 0x54
 8019a60:	9316      	str	r3, [sp, #88]	@ 0x58
 8019a62:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8019a66:	2c00      	cmp	r4, #0
 8019a68:	d067      	beq.n	8019b3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019a6a:	7c2b      	ldrb	r3, [r5, #16]
 8019a6c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8019a6e:	2b06      	cmp	r3, #6
 8019a70:	bf14      	ite	ne
 8019a72:	2301      	movne	r3, #1
 8019a74:	2302      	moveq	r3, #2
 8019a76:	4413      	add	r3, r2
 8019a78:	f04f 0900 	mov.w	r9, #0
 8019a7c:	9310      	str	r3, [sp, #64]	@ 0x40
 8019a7e:	464c      	mov	r4, r9
 8019a80:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8019a84:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8019a88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019a8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019a8c:	4293      	cmp	r3, r2
 8019a8e:	f280 808b 	bge.w	8019ba8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019a92:	2300      	movs	r3, #0
 8019a94:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8019a98:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8019a9c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019aa0:	429c      	cmp	r4, r3
 8019aa2:	d006      	beq.n	8019ab2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8019aa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019aa6:	f242 020b 	movw	r2, #8203	@ 0x200b
 8019aaa:	4294      	cmp	r4, r2
 8019aac:	bf18      	it	ne
 8019aae:	4623      	movne	r3, r4
 8019ab0:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019ab4:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8019ab6:	682a      	ldr	r2, [r5, #0]
 8019ab8:	428b      	cmp	r3, r1
 8019aba:	db40      	blt.n	8019b3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8019abc:	6813      	ldr	r3, [r2, #0]
 8019abe:	4610      	mov	r0, r2
 8019ac0:	695b      	ldr	r3, [r3, #20]
 8019ac2:	4798      	blx	r3
 8019ac4:	4604      	mov	r4, r0
 8019ac6:	6828      	ldr	r0, [r5, #0]
 8019ac8:	aa1d      	add	r2, sp, #116	@ 0x74
 8019aca:	4621      	mov	r1, r4
 8019acc:	6803      	ldr	r3, [r0, #0]
 8019ace:	689f      	ldr	r7, [r3, #8]
 8019ad0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8019ad4:	47b8      	blx	r7
 8019ad6:	901c      	str	r0, [sp, #112]	@ 0x70
 8019ad8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019adc:	429c      	cmp	r4, r3
 8019ade:	f000 80eb 	beq.w	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019ae2:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019ae6:	429c      	cmp	r4, r3
 8019ae8:	f000 80e6 	beq.w	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019aec:	2c00      	cmp	r4, #0
 8019aee:	f000 810d 	beq.w	8019d0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8019af2:	2c0a      	cmp	r4, #10
 8019af4:	d05e      	beq.n	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019af6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019af8:	b36a      	cbz	r2, 8019b56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8019afa:	8894      	ldrh	r4, [r2, #4]
 8019afc:	f1bb 0f00 	cmp.w	fp, #0
 8019b00:	d03a      	beq.n	8019b78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019b02:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019b06:	f1bb 0f01 	cmp.w	fp, #1
 8019b0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019b0e:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8019b12:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019b16:	ea49 0903 	orr.w	r9, r9, r3
 8019b1a:	d133      	bne.n	8019b84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8019b1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b1e:	eba6 0609 	sub.w	r6, r6, r9
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d14d      	bne.n	8019bc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019b26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019b28:	eb09 0306 	add.w	r3, r9, r6
 8019b2c:	4413      	add	r3, r2
 8019b2e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8019b30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019b34:	4293      	cmp	r3, r2
 8019b36:	da4e      	bge.n	8019bd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8019b38:	e036      	b.n	8019ba8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019b3a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8019b3c:	e79c      	b.n	8019a78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8019b3e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8019b42:	4659      	mov	r1, fp
 8019b44:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8019b46:	9301      	str	r3, [sp, #4]
 8019b48:	ab1d      	add	r3, sp, #116	@ 0x74
 8019b4a:	9300      	str	r3, [sp, #0]
 8019b4c:	ab1c      	add	r3, sp, #112	@ 0x70
 8019b4e:	f003 fb58 	bl	801d202 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019b52:	4604      	mov	r4, r0
 8019b54:	e7c0      	b.n	8019ad8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019b56:	6828      	ldr	r0, [r5, #0]
 8019b58:	6803      	ldr	r3, [r0, #0]
 8019b5a:	691b      	ldr	r3, [r3, #16]
 8019b5c:	4798      	blx	r3
 8019b5e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019b62:	4298      	cmp	r0, r3
 8019b64:	f000 80a8 	beq.w	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019b68:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019b6c:	4298      	cmp	r0, r3
 8019b6e:	f000 80a3 	beq.w	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019b72:	f1bb 0f00 	cmp.w	fp, #0
 8019b76:	d100      	bne.n	8019b7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019b78:	444e      	add	r6, r9
 8019b7a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019b7c:	2a00      	cmp	r2, #0
 8019b7e:	d1c0      	bne.n	8019b02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019b80:	4691      	mov	r9, r2
 8019b82:	e099      	b.n	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019b84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	f000 80c2 	beq.w	8019d10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8019b8c:	f1bb 0f00 	cmp.w	fp, #0
 8019b90:	d117      	bne.n	8019bc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019b92:	6828      	ldr	r0, [r5, #0]
 8019b94:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019b96:	6803      	ldr	r3, [r0, #0]
 8019b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019b9a:	4798      	blx	r3
 8019b9c:	4406      	add	r6, r0
 8019b9e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019ba0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019ba2:	1af3      	subs	r3, r6, r3
 8019ba4:	4293      	cmp	r3, r2
 8019ba6:	dd16      	ble.n	8019bd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8019ba8:	2c00      	cmp	r4, #0
 8019baa:	f000 80af 	beq.w	8019d0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8019bae:	2c0a      	cmp	r4, #10
 8019bb0:	f040 809d 	bne.w	8019cee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8019bb4:	240a      	movs	r4, #10
 8019bb6:	fab4 f084 	clz	r0, r4
 8019bba:	0940      	lsrs	r0, r0, #5
 8019bbc:	b01f      	add	sp, #124	@ 0x7c
 8019bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bc2:	6828      	ldr	r0, [r5, #0]
 8019bc4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019bc6:	6803      	ldr	r3, [r0, #0]
 8019bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019bca:	4798      	blx	r3
 8019bcc:	f1bb 0f01 	cmp.w	fp, #1
 8019bd0:	eba6 0600 	sub.w	r6, r6, r0
 8019bd4:	d0a7      	beq.n	8019b26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8019bd6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8019bd8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019bda:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019bde:	f9b3 8000 	ldrsh.w	r8, [r3]
 8019be2:	7b43      	ldrb	r3, [r0, #13]
 8019be4:	4431      	add	r1, r6
 8019be6:	015b      	lsls	r3, r3, #5
 8019be8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019bec:	7983      	ldrb	r3, [r0, #6]
 8019bee:	4313      	orrs	r3, r2
 8019bf0:	440b      	add	r3, r1
 8019bf2:	4543      	cmp	r3, r8
 8019bf4:	db60      	blt.n	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019bf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019bf8:	4299      	cmp	r1, r3
 8019bfa:	da5d      	bge.n	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019bfc:	6828      	ldr	r0, [r5, #0]
 8019bfe:	45b0      	cmp	r8, r6
 8019c00:	6803      	ldr	r3, [r0, #0]
 8019c02:	bfcc      	ite	gt
 8019c04:	eba8 0806 	subgt.w	r8, r8, r6
 8019c08:	f04f 0800 	movle.w	r8, #0
 8019c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c0e:	bfc8      	it	gt
 8019c10:	fa1f f888 	uxthgt.w	r8, r8
 8019c14:	4798      	blx	r3
 8019c16:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019c18:	7b53      	ldrb	r3, [r2, #13]
 8019c1a:	00d9      	lsls	r1, r3, #3
 8019c1c:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8019c20:	7a11      	ldrb	r1, [r2, #8]
 8019c22:	4339      	orrs	r1, r7
 8019c24:	065f      	lsls	r7, r3, #25
 8019c26:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8019c28:	bf48      	it	mi
 8019c2a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8019c2e:	4407      	add	r7, r0
 8019c30:	bf48      	it	mi
 8019c32:	b209      	sxthmi	r1, r1
 8019c34:	1a7f      	subs	r7, r7, r1
 8019c36:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8019c38:	b2bf      	uxth	r7, r7
 8019c3a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019c3e:	fa0f fa87 	sxth.w	sl, r7
 8019c42:	4551      	cmp	r1, sl
 8019c44:	dd3c      	ble.n	8019cc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8019c46:	011b      	lsls	r3, r3, #4
 8019c48:	79d0      	ldrb	r0, [r2, #7]
 8019c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019c4e:	4303      	orrs	r3, r0
 8019c50:	449a      	add	sl, r3
 8019c52:	4551      	cmp	r1, sl
 8019c54:	dc30      	bgt.n	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019c56:	1bcf      	subs	r7, r1, r7
 8019c58:	468a      	mov	sl, r1
 8019c5a:	b23f      	sxth	r7, r7
 8019c5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019c60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c62:	6828      	ldr	r0, [r5, #0]
 8019c64:	2a00      	cmp	r2, #0
 8019c66:	d12d      	bne.n	8019cc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8019c68:	9318      	str	r3, [sp, #96]	@ 0x60
 8019c6a:	b2bf      	uxth	r7, r7
 8019c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019c6e:	6819      	ldr	r1, [r3, #0]
 8019c70:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8019c72:	6801      	ldr	r1, [r0, #0]
 8019c74:	9314      	str	r3, [sp, #80]	@ 0x50
 8019c76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019c78:	4788      	blx	r1
 8019c7a:	79a9      	ldrb	r1, [r5, #6]
 8019c7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019c7e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019c80:	7ba9      	ldrb	r1, [r5, #14]
 8019c82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019c84:	910a      	str	r1, [sp, #40]	@ 0x28
 8019c86:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8019c8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8019c8c:	68a9      	ldr	r1, [r5, #8]
 8019c8e:	9306      	str	r3, [sp, #24]
 8019c90:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019c92:	9205      	str	r2, [sp, #20]
 8019c94:	9304      	str	r3, [sp, #16]
 8019c96:	f8cd a004 	str.w	sl, [sp, #4]
 8019c9a:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8019c9e:	44b0      	add	r8, r6
 8019ca0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8019ca2:	fa0f f388 	sxth.w	r3, r8
 8019ca6:	9300      	str	r3, [sp, #0]
 8019ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019caa:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019cae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8019cb0:	681a      	ldr	r2, [r3, #0]
 8019cb2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019cb4:	685b      	ldr	r3, [r3, #4]
 8019cb6:	47b8      	blx	r7
 8019cb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019cba:	3301      	adds	r3, #1
 8019cbc:	930d      	str	r3, [sp, #52]	@ 0x34
 8019cbe:	e6e3      	b.n	8019a88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8019cc0:	2700      	movs	r7, #0
 8019cc2:	e7cb      	b.n	8019c5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8019cc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019cc6:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8019cca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019ccc:	f8dc 1000 	ldr.w	r1, [ip]
 8019cd0:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8019cd4:	79aa      	ldrb	r2, [r5, #6]
 8019cd6:	9203      	str	r2, [sp, #12]
 8019cd8:	7baa      	ldrb	r2, [r5, #14]
 8019cda:	9202      	str	r2, [sp, #8]
 8019cdc:	68aa      	ldr	r2, [r5, #8]
 8019cde:	e9cd 0200 	strd	r0, r2, [sp]
 8019ce2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8019ce4:	4660      	mov	r0, ip
 8019ce6:	688f      	ldr	r7, [r1, #8]
 8019ce8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019cea:	47b8      	blx	r7
 8019cec:	e7e4      	b.n	8019cb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8019cee:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019cf0:	3501      	adds	r5, #1
 8019cf2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8019cf4:	429d      	cmp	r5, r3
 8019cf6:	f6bf af5e 	bge.w	8019bb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019cfa:	4659      	mov	r1, fp
 8019cfc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8019cfe:	f7ee fdef 	bl	80088e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019d02:	4604      	mov	r4, r0
 8019d04:	b110      	cbz	r0, 8019d0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8019d06:	280a      	cmp	r0, #10
 8019d08:	d1f2      	bne.n	8019cf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8019d0a:	e753      	b.n	8019bb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019d0c:	2400      	movs	r4, #0
 8019d0e:	e752      	b.n	8019bb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019d10:	f1bb 0f00 	cmp.w	fp, #0
 8019d14:	f43f af43 	beq.w	8019b9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019d18:	e75d      	b.n	8019bd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08019d1a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019d1a:	b530      	push	{r4, r5, lr}
 8019d1c:	8ac4      	ldrh	r4, [r0, #22]
 8019d1e:	8b45      	ldrh	r5, [r0, #26]
 8019d20:	8343      	strh	r3, [r0, #26]
 8019d22:	442c      	add	r4, r5
 8019d24:	1ae4      	subs	r4, r4, r3
 8019d26:	8b83      	ldrh	r3, [r0, #28]
 8019d28:	82c4      	strh	r4, [r0, #22]
 8019d2a:	8b04      	ldrh	r4, [r0, #24]
 8019d2c:	4422      	add	r2, r4
 8019d2e:	440c      	add	r4, r1
 8019d30:	1a59      	subs	r1, r3, r1
 8019d32:	83c2      	strh	r2, [r0, #30]
 8019d34:	8304      	strh	r4, [r0, #24]
 8019d36:	8381      	strh	r1, [r0, #28]
 8019d38:	bd30      	pop	{r4, r5, pc}

08019d3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8019d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d3e:	4604      	mov	r4, r0
 8019d40:	8a47      	ldrh	r7, [r0, #18]
 8019d42:	68c0      	ldr	r0, [r0, #12]
 8019d44:	b085      	sub	sp, #20
 8019d46:	6803      	ldr	r3, [r0, #0]
 8019d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d4a:	4798      	blx	r3
 8019d4c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8019d50:	7a63      	ldrb	r3, [r4, #9]
 8019d52:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8019d56:	3b01      	subs	r3, #1
 8019d58:	42b7      	cmp	r7, r6
 8019d5a:	bfac      	ite	ge
 8019d5c:	f04f 0900 	movge.w	r9, #0
 8019d60:	f04f 0901 	movlt.w	r9, #1
 8019d64:	2b05      	cmp	r3, #5
 8019d66:	d804      	bhi.n	8019d72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8019d68:	e8df f003 	tbb	[pc, r3]
 8019d6c:	470f0854 	.word	0x470f0854
 8019d70:	4c4c      	.short	0x4c4c
 8019d72:	2500      	movs	r5, #0
 8019d74:	46a9      	mov	r9, r5
 8019d76:	462e      	mov	r6, r5
 8019d78:	462f      	mov	r7, r5
 8019d7a:	e00e      	b.n	8019d9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019d7c:	42b7      	cmp	r7, r6
 8019d7e:	f04f 0500 	mov.w	r5, #0
 8019d82:	bfb4      	ite	lt
 8019d84:	2600      	movlt	r6, #0
 8019d86:	2601      	movge	r6, #1
 8019d88:	e7f6      	b.n	8019d78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8019d8a:	42b7      	cmp	r7, r6
 8019d8c:	464d      	mov	r5, r9
 8019d8e:	f04f 0900 	mov.w	r9, #0
 8019d92:	bfb4      	ite	lt
 8019d94:	2600      	movlt	r6, #0
 8019d96:	2601      	movge	r6, #1
 8019d98:	464f      	mov	r7, r9
 8019d9a:	f04f 0800 	mov.w	r8, #0
 8019d9e:	f8a4 8016 	strh.w	r8, [r4, #22]
 8019da2:	f8a4 8018 	strh.w	r8, [r4, #24]
 8019da6:	f8cd 8004 	str.w	r8, [sp, #4]
 8019daa:	2300      	movs	r3, #0
 8019dac:	9303      	str	r3, [sp, #12]
 8019dae:	8823      	ldrh	r3, [r4, #0]
 8019db0:	2b20      	cmp	r3, #32
 8019db2:	d033      	beq.n	8019e1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8019db4:	f242 010b 	movw	r1, #8203	@ 0x200b
 8019db8:	1a5a      	subs	r2, r3, r1
 8019dba:	f1d2 0a00 	rsbs	sl, r2, #0
 8019dbe:	eb4a 0a02 	adc.w	sl, sl, r2
 8019dc2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8019dc6:	4293      	cmp	r3, r2
 8019dc8:	d008      	beq.n	8019ddc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8019dca:	428b      	cmp	r3, r1
 8019dcc:	9a01      	ldr	r2, [sp, #4]
 8019dce:	bf0e      	itee	eq
 8019dd0:	f04f 0a01 	moveq.w	sl, #1
 8019dd4:	461a      	movne	r2, r3
 8019dd6:	f04f 0a00 	movne.w	sl, #0
 8019dda:	9201      	str	r2, [sp, #4]
 8019ddc:	ab03      	add	r3, sp, #12
 8019dde:	68e2      	ldr	r2, [r4, #12]
 8019de0:	7a21      	ldrb	r1, [r4, #8]
 8019de2:	6860      	ldr	r0, [r4, #4]
 8019de4:	f003 f9c4 	bl	801d170 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019de8:	8020      	strh	r0, [r4, #0]
 8019dea:	b9d8      	cbnz	r0, 8019e24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8019dec:	8ba2      	ldrh	r2, [r4, #28]
 8019dee:	2300      	movs	r3, #0
 8019df0:	4611      	mov	r1, r2
 8019df2:	4620      	mov	r0, r4
 8019df4:	f7ff ff91 	bl	8019d1a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019df8:	e06e      	b.n	8019ed8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8019dfa:	2500      	movs	r5, #0
 8019dfc:	2701      	movs	r7, #1
 8019dfe:	46a9      	mov	r9, r5
 8019e00:	462e      	mov	r6, r5
 8019e02:	e7ca      	b.n	8019d9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019e04:	42b7      	cmp	r7, r6
 8019e06:	f04f 0500 	mov.w	r5, #0
 8019e0a:	bfb4      	ite	lt
 8019e0c:	2700      	movlt	r7, #0
 8019e0e:	2701      	movge	r7, #1
 8019e10:	462e      	mov	r6, r5
 8019e12:	e7c2      	b.n	8019d9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019e14:	2500      	movs	r5, #0
 8019e16:	2601      	movs	r6, #1
 8019e18:	46a9      	mov	r9, r5
 8019e1a:	e7ad      	b.n	8019d78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8019e1c:	9301      	str	r3, [sp, #4]
 8019e1e:	f04f 0a01 	mov.w	sl, #1
 8019e22:	e7db      	b.n	8019ddc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8019e24:	8b63      	ldrh	r3, [r4, #26]
 8019e26:	280a      	cmp	r0, #10
 8019e28:	f103 0301 	add.w	r3, r3, #1
 8019e2c:	8363      	strh	r3, [r4, #26]
 8019e2e:	d0dd      	beq.n	8019dec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8019e30:	9a03      	ldr	r2, [sp, #12]
 8019e32:	bb62      	cbnz	r2, 8019e8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8019e34:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019e38:	4298      	cmp	r0, r3
 8019e3a:	d003      	beq.n	8019e44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8019e3c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019e40:	4298      	cmp	r0, r3
 8019e42:	d1b2      	bne.n	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019e44:	8823      	ldrh	r3, [r4, #0]
 8019e46:	8ba1      	ldrh	r1, [r4, #28]
 8019e48:	2b20      	cmp	r3, #32
 8019e4a:	d003      	beq.n	8019e54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8019e4c:	f242 000b 	movw	r0, #8203	@ 0x200b
 8019e50:	4283      	cmp	r3, r0
 8019e52:	d131      	bne.n	8019eb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8019e54:	f1ba 0f00 	cmp.w	sl, #0
 8019e58:	bf0a      	itet	eq
 8019e5a:	4688      	moveq	r8, r1
 8019e5c:	4650      	movne	r0, sl
 8019e5e:	2001      	moveq	r0, #1
 8019e60:	440a      	add	r2, r1
 8019e62:	8b23      	ldrh	r3, [r4, #24]
 8019e64:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019e68:	b292      	uxth	r2, r2
 8019e6a:	83a2      	strh	r2, [r4, #28]
 8019e6c:	4413      	add	r3, r2
 8019e6e:	f1b9 0f00 	cmp.w	r9, #0
 8019e72:	d102      	bne.n	8019e7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8019e74:	2d00      	cmp	r5, #0
 8019e76:	d042      	beq.n	8019efe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8019e78:	b300      	cbz	r0, 8019ebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8019e7a:	8c21      	ldrh	r1, [r4, #32]
 8019e7c:	4419      	add	r1, r3
 8019e7e:	458c      	cmp	ip, r1
 8019e80:	da37      	bge.n	8019ef2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8019e82:	8ae1      	ldrh	r1, [r4, #22]
 8019e84:	2900      	cmp	r1, #0
 8019e86:	d034      	beq.n	8019ef2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8019e88:	4563      	cmp	r3, ip
 8019e8a:	dd8e      	ble.n	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019e8c:	e01d      	b.n	8019eca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8019e8e:	8893      	ldrh	r3, [r2, #4]
 8019e90:	9901      	ldr	r1, [sp, #4]
 8019e92:	8023      	strh	r3, [r4, #0]
 8019e94:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8019e98:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8019e9c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8019ea0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8019ea4:	ea4b 0b00 	orr.w	fp, fp, r0
 8019ea8:	68e0      	ldr	r0, [r4, #12]
 8019eaa:	6803      	ldr	r3, [r0, #0]
 8019eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019eae:	4798      	blx	r3
 8019eb0:	eb0b 0200 	add.w	r2, fp, r0
 8019eb4:	b292      	uxth	r2, r2
 8019eb6:	e7c5      	b.n	8019e44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8019eb8:	2000      	movs	r0, #0
 8019eba:	e7d1      	b.n	8019e60 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8019ebc:	4563      	cmp	r3, ip
 8019ebe:	f77f af74 	ble.w	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019ec2:	8ae3      	ldrh	r3, [r4, #22]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	f43f af70 	beq.w	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019eca:	2301      	movs	r3, #1
 8019ecc:	8c22      	ldrh	r2, [r4, #32]
 8019ece:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8019ed2:	8be3      	ldrh	r3, [r4, #30]
 8019ed4:	4413      	add	r3, r2
 8019ed6:	83e3      	strh	r3, [r4, #30]
 8019ed8:	68e0      	ldr	r0, [r4, #12]
 8019eda:	6803      	ldr	r3, [r0, #0]
 8019edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019ede:	4798      	blx	r3
 8019ee0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8019ee4:	4418      	add	r0, r3
 8019ee6:	8a63      	ldrh	r3, [r4, #18]
 8019ee8:	1a18      	subs	r0, r3, r0
 8019eea:	8260      	strh	r0, [r4, #18]
 8019eec:	b005      	add	sp, #20
 8019eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	4611      	mov	r1, r2
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	f7ff ff0f 	bl	8019d1a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019efc:	e755      	b.n	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019efe:	4563      	cmp	r3, ip
 8019f00:	dd14      	ble.n	8019f2c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8019f02:	b117      	cbz	r7, 8019f0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8019f04:	2301      	movs	r3, #1
 8019f06:	460a      	mov	r2, r1
 8019f08:	e772      	b.n	8019df0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8019f0a:	2e00      	cmp	r6, #0
 8019f0c:	f43f af4d 	beq.w	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f10:	2800      	cmp	r0, #0
 8019f12:	f47f af4a 	bne.w	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f16:	f1ba 0f00 	cmp.w	sl, #0
 8019f1a:	d002      	beq.n	8019f22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	4642      	mov	r2, r8
 8019f20:	e767      	b.n	8019df2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8019f22:	8ae3      	ldrh	r3, [r4, #22]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	f43f af40 	beq.w	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f2a:	e7d5      	b.n	8019ed8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8019f2c:	2800      	cmp	r0, #0
 8019f2e:	f47f af3c 	bne.w	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f32:	f1ba 0f00 	cmp.w	sl, #0
 8019f36:	f43f af38 	beq.w	8019daa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f3a:	2301      	movs	r3, #1
 8019f3c:	4642      	mov	r2, r8
 8019f3e:	e7da      	b.n	8019ef6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08019f40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f42:	4605      	mov	r5, r0
 8019f44:	b08f      	sub	sp, #60	@ 0x3c
 8019f46:	4617      	mov	r7, r2
 8019f48:	461c      	mov	r4, r3
 8019f4a:	460e      	mov	r6, r1
 8019f4c:	b1d1      	cbz	r1, 8019f84 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	4620      	mov	r0, r4
 8019f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019f54:	4798      	blx	r3
 8019f56:	4240      	negs	r0, r0
 8019f58:	9603      	str	r6, [sp, #12]
 8019f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019f5e:	b200      	sxth	r0, r0
 8019f60:	9700      	str	r7, [sp, #0]
 8019f62:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8019f66:	4629      	mov	r1, r5
 8019f68:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8019f6c:	2401      	movs	r4, #1
 8019f6e:	a805      	add	r0, sp, #20
 8019f70:	f7ff fcaa 	bl	80198c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8019f74:	a805      	add	r0, sp, #20
 8019f76:	f7ff fee0 	bl	8019d3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8019f7a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019f7e:	b163      	cbz	r3, 8019f9a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8019f80:	3401      	adds	r4, #1
 8019f82:	e7f7      	b.n	8019f74 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019f84:	2401      	movs	r4, #1
 8019f86:	f003 f9bf 	bl	801d308 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f8a:	280a      	cmp	r0, #10
 8019f8c:	4628      	mov	r0, r5
 8019f8e:	bf08      	it	eq
 8019f90:	3401      	addeq	r4, #1
 8019f92:	f003 f9b9 	bl	801d308 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f96:	2800      	cmp	r0, #0
 8019f98:	d1f7      	bne.n	8019f8a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8019f9a:	b2a0      	uxth	r0, r4
 8019f9c:	b00f      	add	sp, #60	@ 0x3c
 8019f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019fa0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa4:	b0e3      	sub	sp, #396	@ 0x18c
 8019fa6:	461c      	mov	r4, r3
 8019fa8:	4683      	mov	fp, r0
 8019faa:	4688      	mov	r8, r1
 8019fac:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	f000 8112 	beq.w	801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019fb4:	6823      	ldr	r3, [r4, #0]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	f000 810e 	beq.w	801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019fbc:	7ba3      	ldrb	r3, [r4, #14]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	f000 810a 	beq.w	801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8019fc4:	ad0a      	add	r5, sp, #40	@ 0x28
 8019fc6:	6810      	ldr	r0, [r2, #0]
 8019fc8:	6851      	ldr	r1, [r2, #4]
 8019fca:	462b      	mov	r3, r5
 8019fcc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8019fd0:	c303      	stmia	r3!, {r0, r1}
 8019fd2:	2100      	movs	r1, #0
 8019fd4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8019fd8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8019fdc:	4628      	mov	r0, r5
 8019fde:	910c      	str	r1, [sp, #48]	@ 0x30
 8019fe0:	a90c      	add	r1, sp, #48	@ 0x30
 8019fe2:	79a2      	ldrb	r2, [r4, #6]
 8019fe4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8019fe8:	f7ff fced 	bl	80199c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019fec:	a90c      	add	r1, sp, #48	@ 0x30
 8019fee:	79a2      	ldrb	r2, [r4, #6]
 8019ff0:	4608      	mov	r0, r1
 8019ff2:	f7ff fce8 	bl	80199c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019ff6:	a817      	add	r0, sp, #92	@ 0x5c
 8019ff8:	f002 fd59 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 8019ffc:	6820      	ldr	r0, [r4, #0]
 8019ffe:	6803      	ldr	r3, [r0, #0]
 801a000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a002:	4798      	blx	r3
 801a004:	4606      	mov	r6, r0
 801a006:	6820      	ldr	r0, [r4, #0]
 801a008:	6803      	ldr	r3, [r0, #0]
 801a00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a00c:	4798      	blx	r3
 801a00e:	4633      	mov	r3, r6
 801a010:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a012:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a014:	9000      	str	r0, [sp, #0]
 801a016:	a817      	add	r0, sp, #92	@ 0x5c
 801a018:	f002 fda4 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a01c:	6820      	ldr	r0, [r4, #0]
 801a01e:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a022:	6803      	ldr	r3, [r0, #0]
 801a024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a026:	4798      	blx	r3
 801a028:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a02c:	6823      	ldr	r3, [r4, #0]
 801a02e:	4607      	mov	r7, r0
 801a030:	4406      	add	r6, r0
 801a032:	a830      	add	r0, sp, #192	@ 0xc0
 801a034:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a038:	f002 fd39 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 801a03c:	7c23      	ldrb	r3, [r4, #16]
 801a03e:	b17b      	cbz	r3, 801a060 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a040:	6820      	ldr	r0, [r4, #0]
 801a042:	6803      	ldr	r3, [r0, #0]
 801a044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a046:	4798      	blx	r3
 801a048:	9009      	str	r0, [sp, #36]	@ 0x24
 801a04a:	6820      	ldr	r0, [r4, #0]
 801a04c:	6802      	ldr	r2, [r0, #0]
 801a04e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801a050:	4790      	blx	r2
 801a052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a054:	9000      	str	r0, [sp, #0]
 801a056:	a830      	add	r0, sp, #192	@ 0xc0
 801a058:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a05a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a05c:	f002 fd82 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a060:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a064:	a80e      	add	r0, sp, #56	@ 0x38
 801a066:	7be2      	ldrb	r2, [r4, #15]
 801a068:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a06c:	1a8a      	subs	r2, r1, r2
 801a06e:	7c21      	ldrb	r1, [r4, #16]
 801a070:	9103      	str	r1, [sp, #12]
 801a072:	b292      	uxth	r2, r2
 801a074:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a078:	9102      	str	r1, [sp, #8]
 801a07a:	6821      	ldr	r1, [r4, #0]
 801a07c:	9101      	str	r1, [sp, #4]
 801a07e:	7961      	ldrb	r1, [r4, #5]
 801a080:	9100      	str	r1, [sp, #0]
 801a082:	a930      	add	r1, sp, #192	@ 0xc0
 801a084:	f7ff fc20 	bl	80198c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a088:	2e00      	cmp	r6, #0
 801a08a:	dc5b      	bgt.n	801a144 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a08c:	af17      	add	r7, sp, #92	@ 0x5c
 801a08e:	f04f 0900 	mov.w	r9, #0
 801a092:	7c23      	ldrb	r3, [r4, #16]
 801a094:	2b00      	cmp	r3, #0
 801a096:	f000 80b1 	beq.w	801a1fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a09a:	a80e      	add	r0, sp, #56	@ 0x38
 801a09c:	f7ff fe4d 	bl	8019d3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a0a0:	f1ba 0f00 	cmp.w	sl, #0
 801a0a4:	f000 80a5 	beq.w	801a1f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a0a8:	7c23      	ldrb	r3, [r4, #16]
 801a0aa:	2264      	movs	r2, #100	@ 0x64
 801a0ac:	4639      	mov	r1, r7
 801a0ae:	a849      	add	r0, sp, #292	@ 0x124
 801a0b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0b2:	f00f ff7e 	bl	8029fb2 <memcpy>
 801a0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	f000 80a7 	beq.w	801a20c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a0be:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801a0c2:	7922      	ldrb	r2, [r4, #4]
 801a0c4:	2a01      	cmp	r2, #1
 801a0c6:	f040 808a 	bne.w	801a1de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a0ca:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801a0ce:	1ac0      	subs	r0, r0, r3
 801a0d0:	2302      	movs	r3, #2
 801a0d2:	fb90 f0f3 	sdiv	r0, r0, r3
 801a0d6:	b200      	sxth	r0, r0
 801a0d8:	7c23      	ldrb	r3, [r4, #16]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	f000 808b 	beq.w	801a1f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a0e0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801a0e4:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801a0e8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a0ec:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a0f0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a0f4:	2100      	movs	r1, #0
 801a0f6:	4410      	add	r0, r2
 801a0f8:	4642      	mov	r2, r8
 801a0fa:	b200      	sxth	r0, r0
 801a0fc:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a100:	9000      	str	r0, [sp, #0]
 801a102:	4658      	mov	r0, fp
 801a104:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a108:	f7ff fc8e 	bl	8019a28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a10c:	2800      	cmp	r0, #0
 801a10e:	d163      	bne.n	801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a110:	b2b2      	uxth	r2, r6
 801a112:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a116:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a11a:	4413      	add	r3, r2
 801a11c:	1a8a      	subs	r2, r1, r2
 801a11e:	b21b      	sxth	r3, r3
 801a120:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a124:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801a128:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a12c:	2a00      	cmp	r2, #0
 801a12e:	d153      	bne.n	801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a130:	6822      	ldr	r2, [r4, #0]
 801a132:	8869      	ldrh	r1, [r5, #2]
 801a134:	7a12      	ldrb	r2, [r2, #8]
 801a136:	1a9b      	subs	r3, r3, r2
 801a138:	88ea      	ldrh	r2, [r5, #6]
 801a13a:	440a      	add	r2, r1
 801a13c:	b212      	sxth	r2, r2
 801a13e:	4293      	cmp	r3, r2
 801a140:	dda7      	ble.n	801a092 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801a142:	e049      	b.n	801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a144:	7c23      	ldrb	r3, [r4, #16]
 801a146:	444f      	add	r7, r9
 801a148:	b1c3      	cbz	r3, 801a17c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801a14a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801a14e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a152:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a156:	443b      	add	r3, r7
 801a158:	4293      	cmp	r3, r2
 801a15a:	da97      	bge.n	801a08c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a15c:	a80e      	add	r0, sp, #56	@ 0x38
 801a15e:	f7ff fdec 	bl	8019d3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a162:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801a166:	3b01      	subs	r3, #1
 801a168:	b29b      	uxth	r3, r3
 801a16a:	454b      	cmp	r3, r9
 801a16c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a16e:	d021      	beq.n	801a1b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801a170:	7961      	ldrb	r1, [r4, #5]
 801a172:	a817      	add	r0, sp, #92	@ 0x5c
 801a174:	f7ee fbb4 	bl	80088e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a17a:	e7f4      	b.n	801a166 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801a17c:	fa1f f986 	uxth.w	r9, r6
 801a180:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a184:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a188:	443b      	add	r3, r7
 801a18a:	4293      	cmp	r3, r2
 801a18c:	f6bf af7e 	bge.w	801a08c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a190:	a817      	add	r0, sp, #92	@ 0x5c
 801a192:	f003 f8b9 	bl	801d308 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a196:	b1f8      	cbz	r0, 801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a198:	280a      	cmp	r0, #10
 801a19a:	d1f1      	bne.n	801a180 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a19c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a1a0:	444b      	add	r3, r9
 801a1a2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a1a6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a1aa:	eba3 0309 	sub.w	r3, r3, r9
 801a1ae:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a1b2:	e7e5      	b.n	801a180 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a1b4:	b2b3      	uxth	r3, r6
 801a1b6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a1ba:	441a      	add	r2, r3
 801a1bc:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a1c0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801a1c4:	1ad3      	subs	r3, r2, r3
 801a1c6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a1ca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a1ce:	b11b      	cbz	r3, 801a1d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a1d0:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d0ba      	beq.n	801a14e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a1d8:	b063      	add	sp, #396	@ 0x18c
 801a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1de:	2a02      	cmp	r2, #2
 801a1e0:	d105      	bne.n	801a1ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a1e2:	7be2      	ldrb	r2, [r4, #15]
 801a1e4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a1e8:	1a80      	subs	r0, r0, r2
 801a1ea:	1ac0      	subs	r0, r0, r3
 801a1ec:	e773      	b.n	801a0d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801a1ee:	2000      	movs	r0, #0
 801a1f0:	e772      	b.n	801a0d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a1f2:	7be0      	ldrb	r0, [r4, #15]
 801a1f4:	e770      	b.n	801a0d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a1f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a1fa:	e773      	b.n	801a0e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a1fc:	f1ba 0f00 	cmp.w	sl, #0
 801a200:	d0f7      	beq.n	801a1f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a202:	2264      	movs	r2, #100	@ 0x64
 801a204:	4639      	mov	r1, r7
 801a206:	a849      	add	r0, sp, #292	@ 0x124
 801a208:	f00f fed3 	bl	8029fb2 <memcpy>
 801a20c:	2300      	movs	r3, #0
 801a20e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a212:	6821      	ldr	r1, [r4, #0]
 801a214:	a849      	add	r0, sp, #292	@ 0x124
 801a216:	f7ff fb9a 	bl	801994e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a21a:	b203      	sxth	r3, r0
 801a21c:	e751      	b.n	801a0c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801a21e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a21e:	2b03      	cmp	r3, #3
 801a220:	d818      	bhi.n	801a254 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a222:	e8df f003 	tbb	[pc, r3]
 801a226:	0602      	.short	0x0602
 801a228:	130d      	.short	0x130d
 801a22a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a22e:	1850      	adds	r0, r2, r1
 801a230:	4770      	bx	lr
 801a232:	8803      	ldrh	r3, [r0, #0]
 801a234:	8880      	ldrh	r0, [r0, #4]
 801a236:	4418      	add	r0, r3
 801a238:	b200      	sxth	r0, r0
 801a23a:	1a80      	subs	r0, r0, r2
 801a23c:	3801      	subs	r0, #1
 801a23e:	4770      	bx	lr
 801a240:	8803      	ldrh	r3, [r0, #0]
 801a242:	8880      	ldrh	r0, [r0, #4]
 801a244:	4418      	add	r0, r3
 801a246:	b200      	sxth	r0, r0
 801a248:	1a40      	subs	r0, r0, r1
 801a24a:	e7f7      	b.n	801a23c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a24c:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a250:	4410      	add	r0, r2
 801a252:	4770      	bx	lr
 801a254:	2000      	movs	r0, #0
 801a256:	4770      	bx	lr

0801a258 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a258:	2b03      	cmp	r3, #3
 801a25a:	d817      	bhi.n	801a28c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a25c:	e8df f003 	tbb	[pc, r3]
 801a260:	10090602 	.word	0x10090602
 801a264:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a268:	1850      	adds	r0, r2, r1
 801a26a:	4770      	bx	lr
 801a26c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a270:	e7fa      	b.n	801a268 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a272:	8843      	ldrh	r3, [r0, #2]
 801a274:	88c0      	ldrh	r0, [r0, #6]
 801a276:	4418      	add	r0, r3
 801a278:	b200      	sxth	r0, r0
 801a27a:	1a80      	subs	r0, r0, r2
 801a27c:	3801      	subs	r0, #1
 801a27e:	4770      	bx	lr
 801a280:	8843      	ldrh	r3, [r0, #2]
 801a282:	88c0      	ldrh	r0, [r0, #6]
 801a284:	4418      	add	r0, r3
 801a286:	b200      	sxth	r0, r0
 801a288:	1a40      	subs	r0, r0, r1
 801a28a:	e7f7      	b.n	801a27c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a28c:	2000      	movs	r0, #0
 801a28e:	4770      	bx	lr

0801a290 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a290:	4b01      	ldr	r3, [pc, #4]	@ (801a298 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a292:	2200      	movs	r2, #0
 801a294:	601a      	str	r2, [r3, #0]
 801a296:	4770      	bx	lr
 801a298:	240285c4 	.word	0x240285c4

0801a29c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a29c:	4603      	mov	r3, r0
 801a29e:	b1c8      	cbz	r0, 801a2d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a2a0:	0c02      	lsrs	r2, r0, #16
 801a2a2:	0412      	lsls	r2, r2, #16
 801a2a4:	b9a2      	cbnz	r2, 801a2d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a2a6:	0403      	lsls	r3, r0, #16
 801a2a8:	2010      	movs	r0, #16
 801a2aa:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801a2ae:	bf04      	itt	eq
 801a2b0:	021b      	lsleq	r3, r3, #8
 801a2b2:	3008      	addeq	r0, #8
 801a2b4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801a2b8:	bf04      	itt	eq
 801a2ba:	011b      	lsleq	r3, r3, #4
 801a2bc:	3004      	addeq	r0, #4
 801a2be:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801a2c2:	bf04      	itt	eq
 801a2c4:	009b      	lsleq	r3, r3, #2
 801a2c6:	3002      	addeq	r0, #2
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	db04      	blt.n	801a2d6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a2cc:	3001      	adds	r0, #1
 801a2ce:	4770      	bx	lr
 801a2d0:	2000      	movs	r0, #0
 801a2d2:	e7ea      	b.n	801a2aa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a2d4:	2020      	movs	r0, #32
 801a2d6:	4770      	bx	lr

0801a2d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2dc:	b087      	sub	sp, #28
 801a2de:	460d      	mov	r5, r1
 801a2e0:	4616      	mov	r6, r2
 801a2e2:	4698      	mov	r8, r3
 801a2e4:	4601      	mov	r1, r0
 801a2e6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801a2ea:	b120      	cbz	r0, 801a2f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a2ec:	b11a      	cbz	r2, 801a2f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a2ee:	2d1f      	cmp	r5, #31
 801a2f0:	d801      	bhi.n	801a2f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a2f2:	2b1f      	cmp	r3, #31
 801a2f4:	d904      	bls.n	801a300 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801a2f6:	2000      	movs	r0, #0
 801a2f8:	6038      	str	r0, [r7, #0]
 801a2fa:	b007      	add	sp, #28
 801a2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a300:	b97d      	cbnz	r5, 801a322 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801a302:	b143      	cbz	r3, 801a316 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801a304:	4602      	mov	r2, r0
 801a306:	462b      	mov	r3, r5
 801a308:	4641      	mov	r1, r8
 801a30a:	4630      	mov	r0, r6
 801a30c:	e9cd 4700 	strd	r4, r7, [sp]
 801a310:	f7ff ffe2 	bl	801a2d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a314:	e7f1      	b.n	801a2fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a316:	f04f 33ff 	mov.w	r3, #4294967295
 801a31a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a31e:	603b      	str	r3, [r7, #0]
 801a320:	e7eb      	b.n	801a2fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a322:	fa32 fa05 	lsrs.w	sl, r2, r5
 801a326:	d106      	bne.n	801a336 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801a328:	4346      	muls	r6, r0
 801a32a:	fbb6 f0f4 	udiv	r0, r6, r4
 801a32e:	fb04 6610 	mls	r6, r4, r0, r6
 801a332:	603e      	str	r6, [r7, #0]
 801a334:	e7e1      	b.n	801a2fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a336:	2201      	movs	r2, #1
 801a338:	fa00 fb05 	lsl.w	fp, r0, r5
 801a33c:	40aa      	lsls	r2, r5
 801a33e:	fbbb f9f4 	udiv	r9, fp, r4
 801a342:	3a01      	subs	r2, #1
 801a344:	fb0a f309 	mul.w	r3, sl, r9
 801a348:	fb04 b919 	mls	r9, r4, r9, fp
 801a34c:	4016      	ands	r6, r2
 801a34e:	9303      	str	r3, [sp, #12]
 801a350:	4630      	mov	r0, r6
 801a352:	f7ff ffa3 	bl	801a29c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a356:	462b      	mov	r3, r5
 801a358:	460a      	mov	r2, r1
 801a35a:	4601      	mov	r1, r0
 801a35c:	4630      	mov	r0, r6
 801a35e:	e9cd 4700 	strd	r4, r7, [sp]
 801a362:	f7ff ffb9 	bl	801a2d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a366:	4606      	mov	r6, r0
 801a368:	4648      	mov	r0, r9
 801a36a:	eb05 0108 	add.w	r1, r5, r8
 801a36e:	f7ff ff95 	bl	801a29c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a372:	ab05      	add	r3, sp, #20
 801a374:	464a      	mov	r2, r9
 801a376:	e9cd 4300 	strd	r4, r3, [sp]
 801a37a:	4603      	mov	r3, r0
 801a37c:	4650      	mov	r0, sl
 801a37e:	f7ff ffab 	bl	801a2d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a382:	6839      	ldr	r1, [r7, #0]
 801a384:	9a05      	ldr	r2, [sp, #20]
 801a386:	9b03      	ldr	r3, [sp, #12]
 801a388:	4411      	add	r1, r2
 801a38a:	fbb1 f2f4 	udiv	r2, r1, r4
 801a38e:	18d3      	adds	r3, r2, r3
 801a390:	fb04 1412 	mls	r4, r4, r2, r1
 801a394:	441e      	add	r6, r3
 801a396:	603c      	str	r4, [r7, #0]
 801a398:	4430      	add	r0, r6
 801a39a:	e7ae      	b.n	801a2fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801a39c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3a0:	b085      	sub	sp, #20
 801a3a2:	f1b0 0900 	subs.w	r9, r0, #0
 801a3a6:	461d      	mov	r5, r3
 801a3a8:	4617      	mov	r7, r2
 801a3aa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801a3ac:	bfbb      	ittet	lt
 801a3ae:	f1c9 0900 	rsblt	r9, r9, #0
 801a3b2:	f04f 36ff 	movlt.w	r6, #4294967295
 801a3b6:	2601      	movge	r6, #1
 801a3b8:	6823      	ldrlt	r3, [r4, #0]
 801a3ba:	bfbc      	itt	lt
 801a3bc:	425b      	neglt	r3, r3
 801a3be:	6023      	strlt	r3, [r4, #0]
 801a3c0:	2a00      	cmp	r2, #0
 801a3c2:	da04      	bge.n	801a3ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a3c4:	6823      	ldr	r3, [r4, #0]
 801a3c6:	4257      	negs	r7, r2
 801a3c8:	4276      	negs	r6, r6
 801a3ca:	425b      	negs	r3, r3
 801a3cc:	6023      	str	r3, [r4, #0]
 801a3ce:	2d00      	cmp	r5, #0
 801a3d0:	4638      	mov	r0, r7
 801a3d2:	bfba      	itte	lt
 801a3d4:	426d      	neglt	r5, r5
 801a3d6:	f04f 38ff 	movlt.w	r8, #4294967295
 801a3da:	f04f 0801 	movge.w	r8, #1
 801a3de:	f7ff ff5d 	bl	801a29c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a3e2:	ab03      	add	r3, sp, #12
 801a3e4:	463a      	mov	r2, r7
 801a3e6:	e9cd 5300 	strd	r5, r3, [sp]
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	4648      	mov	r0, r9
 801a3ee:	f7ff ff73 	bl	801a2d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a3f2:	6823      	ldr	r3, [r4, #0]
 801a3f4:	9a03      	ldr	r2, [sp, #12]
 801a3f6:	4546      	cmp	r6, r8
 801a3f8:	441a      	add	r2, r3
 801a3fa:	fb92 f3f5 	sdiv	r3, r2, r5
 801a3fe:	4418      	add	r0, r3
 801a400:	fb05 2313 	mls	r3, r5, r3, r2
 801a404:	bf18      	it	ne
 801a406:	4240      	negne	r0, r0
 801a408:	1c72      	adds	r2, r6, #1
 801a40a:	6023      	str	r3, [r4, #0]
 801a40c:	d105      	bne.n	801a41a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a40e:	2b00      	cmp	r3, #0
 801a410:	f1c3 0200 	rsb	r2, r3, #0
 801a414:	db0b      	blt.n	801a42e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a416:	6022      	str	r2, [r4, #0]
 801a418:	e006      	b.n	801a428 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a41a:	2e01      	cmp	r6, #1
 801a41c:	d104      	bne.n	801a428 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a41e:	2b00      	cmp	r3, #0
 801a420:	da02      	bge.n	801a428 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a422:	442b      	add	r3, r5
 801a424:	3801      	subs	r0, #1
 801a426:	6023      	str	r3, [r4, #0]
 801a428:	b005      	add	sp, #20
 801a42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a42e:	3801      	subs	r0, #1
 801a430:	1b52      	subs	r2, r2, r5
 801a432:	e7f0      	b.n	801a416 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801a434 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a434:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a438:	4c1c      	ldr	r4, [pc, #112]	@ (801a4ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a43a:	4605      	mov	r5, r0
 801a43c:	6807      	ldr	r7, [r0, #0]
 801a43e:	69a3      	ldr	r3, [r4, #24]
 801a440:	b92b      	cbnz	r3, 801a44e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a442:	6840      	ldr	r0, [r0, #4]
 801a444:	e9c5 7000 	strd	r7, r0, [r5]
 801a448:	b004      	add	sp, #16
 801a44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a44e:	f04f 0802 	mov.w	r8, #2
 801a452:	68a2      	ldr	r2, [r4, #8]
 801a454:	ae04      	add	r6, sp, #16
 801a456:	6820      	ldr	r0, [r4, #0]
 801a458:	fb93 f1f8 	sdiv	r1, r3, r8
 801a45c:	440a      	add	r2, r1
 801a45e:	69e1      	ldr	r1, [r4, #28]
 801a460:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a464:	463a      	mov	r2, r7
 801a466:	9600      	str	r6, [sp, #0]
 801a468:	f7ff ff98 	bl	801a39c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a46c:	69a3      	ldr	r3, [r4, #24]
 801a46e:	4607      	mov	r7, r0
 801a470:	686a      	ldr	r2, [r5, #4]
 801a472:	6a21      	ldr	r1, [r4, #32]
 801a474:	9600      	str	r6, [sp, #0]
 801a476:	6860      	ldr	r0, [r4, #4]
 801a478:	f7ff ff90 	bl	801a39c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a47c:	69a3      	ldr	r3, [r4, #24]
 801a47e:	6962      	ldr	r2, [r4, #20]
 801a480:	4407      	add	r7, r0
 801a482:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a484:	9600      	str	r6, [sp, #0]
 801a486:	68e0      	ldr	r0, [r4, #12]
 801a488:	fb93 f8f8 	sdiv	r8, r3, r8
 801a48c:	4442      	add	r2, r8
 801a48e:	9203      	str	r2, [sp, #12]
 801a490:	682a      	ldr	r2, [r5, #0]
 801a492:	f7ff ff83 	bl	801a39c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a496:	4680      	mov	r8, r0
 801a498:	9600      	str	r6, [sp, #0]
 801a49a:	69a3      	ldr	r3, [r4, #24]
 801a49c:	686a      	ldr	r2, [r5, #4]
 801a49e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a4a0:	6920      	ldr	r0, [r4, #16]
 801a4a2:	f7ff ff7b 	bl	801a39c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a4a6:	4440      	add	r0, r8
 801a4a8:	e7cc      	b.n	801a444 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a4aa:	bf00      	nop
 801a4ac:	240285c8 	.word	0x240285c8

0801a4b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a4b0:	4b07      	ldr	r3, [pc, #28]	@ (801a4d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a4b2:	781b      	ldrb	r3, [r3, #0]
 801a4b4:	2b01      	cmp	r3, #1
 801a4b6:	d109      	bne.n	801a4cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a4b8:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a4bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a4c0:	8003      	strh	r3, [r0, #0]
 801a4c2:	4b04      	ldr	r3, [pc, #16]	@ (801a4d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a4c4:	881b      	ldrh	r3, [r3, #0]
 801a4c6:	3b01      	subs	r3, #1
 801a4c8:	1a9b      	subs	r3, r3, r2
 801a4ca:	800b      	strh	r3, [r1, #0]
 801a4cc:	4770      	bx	lr
 801a4ce:	bf00      	nop
 801a4d0:	240285ac 	.word	0x240285ac
 801a4d4:	240285a8 	.word	0x240285a8

0801a4d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a4d8:	4b07      	ldr	r3, [pc, #28]	@ (801a4f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a4da:	b510      	push	{r4, lr}
 801a4dc:	781b      	ldrb	r3, [r3, #0]
 801a4de:	2b01      	cmp	r3, #1
 801a4e0:	d108      	bne.n	801a4f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a4e2:	4b06      	ldr	r3, [pc, #24]	@ (801a4fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a4e4:	880c      	ldrh	r4, [r1, #0]
 801a4e6:	881b      	ldrh	r3, [r3, #0]
 801a4e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a4ec:	3b01      	subs	r3, #1
 801a4ee:	1b1b      	subs	r3, r3, r4
 801a4f0:	8003      	strh	r3, [r0, #0]
 801a4f2:	800a      	strh	r2, [r1, #0]
 801a4f4:	bd10      	pop	{r4, pc}
 801a4f6:	bf00      	nop
 801a4f8:	240285ac 	.word	0x240285ac
 801a4fc:	240285a8 	.word	0x240285a8

0801a500 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a500:	4b0a      	ldr	r3, [pc, #40]	@ (801a52c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a502:	b510      	push	{r4, lr}
 801a504:	781b      	ldrb	r3, [r3, #0]
 801a506:	2b01      	cmp	r3, #1
 801a508:	d10e      	bne.n	801a528 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a50a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a50e:	8843      	ldrh	r3, [r0, #2]
 801a510:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a514:	18ca      	adds	r2, r1, r3
 801a516:	4b06      	ldr	r3, [pc, #24]	@ (801a530 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a518:	8044      	strh	r4, [r0, #2]
 801a51a:	881b      	ldrh	r3, [r3, #0]
 801a51c:	1a9b      	subs	r3, r3, r2
 801a51e:	8003      	strh	r3, [r0, #0]
 801a520:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a524:	8081      	strh	r1, [r0, #4]
 801a526:	80c3      	strh	r3, [r0, #6]
 801a528:	bd10      	pop	{r4, pc}
 801a52a:	bf00      	nop
 801a52c:	240285ac 	.word	0x240285ac
 801a530:	240285a8 	.word	0x240285a8

0801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a534:	4b08      	ldr	r3, [pc, #32]	@ (801a558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	2b01      	cmp	r3, #1
 801a53a:	d10c      	bne.n	801a556 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a53c:	8803      	ldrh	r3, [r0, #0]
 801a53e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a542:	8842      	ldrh	r2, [r0, #2]
 801a544:	8002      	strh	r2, [r0, #0]
 801a546:	185a      	adds	r2, r3, r1
 801a548:	4b04      	ldr	r3, [pc, #16]	@ (801a55c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a54a:	881b      	ldrh	r3, [r3, #0]
 801a54c:	1a9b      	subs	r3, r3, r2
 801a54e:	8043      	strh	r3, [r0, #2]
 801a550:	88c3      	ldrh	r3, [r0, #6]
 801a552:	80c1      	strh	r1, [r0, #6]
 801a554:	8083      	strh	r3, [r0, #4]
 801a556:	4770      	bx	lr
 801a558:	240285ac 	.word	0x240285ac
 801a55c:	240285a8 	.word	0x240285a8

0801a560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a560:	4b07      	ldr	r3, [pc, #28]	@ (801a580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a562:	b510      	push	{r4, lr}
 801a564:	781b      	ldrb	r3, [r3, #0]
 801a566:	2b01      	cmp	r3, #1
 801a568:	d108      	bne.n	801a57c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a56a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a56e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a572:	8003      	strh	r3, [r0, #0]
 801a574:	8893      	ldrh	r3, [r2, #4]
 801a576:	3b01      	subs	r3, #1
 801a578:	1b1b      	subs	r3, r3, r4
 801a57a:	800b      	strh	r3, [r1, #0]
 801a57c:	bd10      	pop	{r4, pc}
 801a57e:	bf00      	nop
 801a580:	240285ac 	.word	0x240285ac

0801a584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801a584:	4b0b      	ldr	r3, [pc, #44]	@ (801a5b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801a586:	781b      	ldrb	r3, [r3, #0]
 801a588:	2b01      	cmp	r3, #1
 801a58a:	d111      	bne.n	801a5b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801a58c:	680b      	ldr	r3, [r1, #0]
 801a58e:	ed90 7a00 	vldr	s14, [r0]
 801a592:	6003      	str	r3, [r0, #0]
 801a594:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801a598:	eddf 6a07 	vldr	s13, [pc, #28]	@ 801a5b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801a59c:	ee07 3a90 	vmov	s15, r3
 801a5a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a5a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a5ac:	edc1 7a00 	vstr	s15, [r1]
 801a5b0:	4770      	bx	lr
 801a5b2:	bf00      	nop
 801a5b4:	240285ac 	.word	0x240285ac
 801a5b8:	38d1b717 	.word	0x38d1b717

0801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (801a5e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a5be:	460a      	mov	r2, r1
 801a5c0:	b510      	push	{r4, lr}
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	2b01      	cmp	r3, #1
 801a5c6:	d10d      	bne.n	801a5e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a5c8:	8881      	ldrh	r1, [r0, #4]
 801a5ca:	8803      	ldrh	r3, [r0, #0]
 801a5cc:	440b      	add	r3, r1
 801a5ce:	4601      	mov	r1, r0
 801a5d0:	3b01      	subs	r3, #1
 801a5d2:	f821 3b02 	strh.w	r3, [r1], #2
 801a5d6:	f7ff ffc3 	bl	801a560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a5da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a5de:	88c2      	ldrh	r2, [r0, #6]
 801a5e0:	80c3      	strh	r3, [r0, #6]
 801a5e2:	8082      	strh	r2, [r0, #4]
 801a5e4:	bd10      	pop	{r4, pc}
 801a5e6:	bf00      	nop
 801a5e8:	240285ac 	.word	0x240285ac

0801a5ec <_ZN8touchgfx11Application13requestRedrawEv>:
 801a5ec:	4b06      	ldr	r3, [pc, #24]	@ (801a608 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5f4:	4b05      	ldr	r3, [pc, #20]	@ (801a60c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a5f6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801a5fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5fe:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801a602:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801a606:	4770      	bx	lr
 801a608:	240285a8 	.word	0x240285a8
 801a60c:	240285aa 	.word	0x240285aa

0801a610 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a610:	4b03      	ldr	r3, [pc, #12]	@ (801a620 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a612:	6818      	ldr	r0, [r3, #0]
 801a614:	b110      	cbz	r0, 801a61c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a616:	6803      	ldr	r3, [r0, #0]
 801a618:	699b      	ldr	r3, [r3, #24]
 801a61a:	4718      	bx	r3
 801a61c:	4770      	bx	lr
 801a61e:	bf00      	nop
 801a620:	240285f8 	.word	0x240285f8

0801a624 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a624:	4770      	bx	lr
	...

0801a628 <_ZN8touchgfx11Application4drawEv>:
 801a628:	4b09      	ldr	r3, [pc, #36]	@ (801a650 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a62a:	b507      	push	{r0, r1, r2, lr}
 801a62c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a630:	2100      	movs	r1, #0
 801a632:	4b08      	ldr	r3, [pc, #32]	@ (801a654 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a634:	9100      	str	r1, [sp, #0]
 801a636:	4669      	mov	r1, sp
 801a638:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a63c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a640:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a644:	6803      	ldr	r3, [r0, #0]
 801a646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a648:	4798      	blx	r3
 801a64a:	b003      	add	sp, #12
 801a64c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a650:	240285a8 	.word	0x240285a8
 801a654:	240285aa 	.word	0x240285aa

0801a658 <_ZN8touchgfx11Application10invalidateEv>:
 801a658:	4b09      	ldr	r3, [pc, #36]	@ (801a680 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a65a:	b082      	sub	sp, #8
 801a65c:	2100      	movs	r1, #0
 801a65e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a662:	4b08      	ldr	r3, [pc, #32]	@ (801a684 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a664:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a668:	aa02      	add	r2, sp, #8
 801a66a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a66e:	9100      	str	r1, [sp, #0]
 801a670:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a674:	6803      	ldr	r3, [r0, #0]
 801a676:	e912 0006 	ldmdb	r2, {r1, r2}
 801a67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a67c:	b002      	add	sp, #8
 801a67e:	4718      	bx	r3
 801a680:	240285a8 	.word	0x240285a8
 801a684:	240285aa 	.word	0x240285aa

0801a688 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a688:	4b03      	ldr	r3, [pc, #12]	@ (801a698 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a68a:	6818      	ldr	r0, [r3, #0]
 801a68c:	b110      	cbz	r0, 801a694 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a68e:	6803      	ldr	r3, [r0, #0]
 801a690:	69db      	ldr	r3, [r3, #28]
 801a692:	4718      	bx	r3
 801a694:	4770      	bx	lr
 801a696:	bf00      	nop
 801a698:	240285f8 	.word	0x240285f8

0801a69c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a69c:	4b03      	ldr	r3, [pc, #12]	@ (801a6ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a69e:	6818      	ldr	r0, [r3, #0]
 801a6a0:	b110      	cbz	r0, 801a6a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a6a2:	6803      	ldr	r3, [r0, #0]
 801a6a4:	6a1b      	ldr	r3, [r3, #32]
 801a6a6:	4718      	bx	r3
 801a6a8:	4770      	bx	lr
 801a6aa:	bf00      	nop
 801a6ac:	240285f8 	.word	0x240285f8

0801a6b0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801a6b6:	4770      	bx	lr

0801a6b8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a6b8:	4b03      	ldr	r3, [pc, #12]	@ (801a6c8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a6ba:	6818      	ldr	r0, [r3, #0]
 801a6bc:	b110      	cbz	r0, 801a6c4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a6be:	6803      	ldr	r3, [r0, #0]
 801a6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6c2:	4718      	bx	r3
 801a6c4:	4770      	bx	lr
 801a6c6:	bf00      	nop
 801a6c8:	240285f8 	.word	0x240285f8

0801a6cc <_ZN8touchgfx11ApplicationD1Ev>:
 801a6cc:	4770      	bx	lr

0801a6ce <_ZN8touchgfx11ApplicationD0Ev>:
 801a6ce:	b510      	push	{r4, lr}
 801a6d0:	4604      	mov	r4, r0
 801a6d2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801a6d6:	f00e fc5f 	bl	8028f98 <_ZdlPvj>
 801a6da:	4620      	mov	r0, r4
 801a6dc:	bd10      	pop	{r4, pc}

0801a6de <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a6de:	b510      	push	{r4, lr}
 801a6e0:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a6e4:	888a      	ldrh	r2, [r1, #4]
 801a6e6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a6ea:	4422      	add	r2, r4
 801a6ec:	b212      	sxth	r2, r2
 801a6ee:	4293      	cmp	r3, r2
 801a6f0:	da15      	bge.n	801a71e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a6f2:	8882      	ldrh	r2, [r0, #4]
 801a6f4:	4413      	add	r3, r2
 801a6f6:	b21b      	sxth	r3, r3
 801a6f8:	429c      	cmp	r4, r3
 801a6fa:	da10      	bge.n	801a71e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a6fc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a700:	88c9      	ldrh	r1, [r1, #6]
 801a702:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a706:	4419      	add	r1, r3
 801a708:	b209      	sxth	r1, r1
 801a70a:	428a      	cmp	r2, r1
 801a70c:	da07      	bge.n	801a71e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a70e:	88c0      	ldrh	r0, [r0, #6]
 801a710:	4410      	add	r0, r2
 801a712:	b200      	sxth	r0, r0
 801a714:	4283      	cmp	r3, r0
 801a716:	bfac      	ite	ge
 801a718:	2000      	movge	r0, #0
 801a71a:	2001      	movlt	r0, #1
 801a71c:	bd10      	pop	{r4, pc}
 801a71e:	2000      	movs	r0, #0
 801a720:	e7fc      	b.n	801a71c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a722 <_ZN8touchgfx4Rect10restrictToEss>:
 801a722:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a726:	2b00      	cmp	r3, #0
 801a728:	b510      	push	{r4, lr}
 801a72a:	da04      	bge.n	801a736 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801a72c:	8884      	ldrh	r4, [r0, #4]
 801a72e:	4423      	add	r3, r4
 801a730:	8083      	strh	r3, [r0, #4]
 801a732:	2300      	movs	r3, #0
 801a734:	8003      	strh	r3, [r0, #0]
 801a736:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a73a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a73e:	1b09      	subs	r1, r1, r4
 801a740:	428b      	cmp	r3, r1
 801a742:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a746:	bfc8      	it	gt
 801a748:	8081      	strhgt	r1, [r0, #4]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	da04      	bge.n	801a758 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801a74e:	88c1      	ldrh	r1, [r0, #6]
 801a750:	440b      	add	r3, r1
 801a752:	80c3      	strh	r3, [r0, #6]
 801a754:	2300      	movs	r3, #0
 801a756:	8043      	strh	r3, [r0, #2]
 801a758:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a75c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a760:	1a52      	subs	r2, r2, r1
 801a762:	4293      	cmp	r3, r2
 801a764:	bfc8      	it	gt
 801a766:	80c2      	strhgt	r2, [r0, #6]
 801a768:	bd10      	pop	{r4, pc}
	...

0801a76c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a76c:	4b10      	ldr	r3, [pc, #64]	@ (801a7b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801a76e:	b510      	push	{r4, lr}
 801a770:	460c      	mov	r4, r1
 801a772:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a776:	4b0f      	ldr	r3, [pc, #60]	@ (801a7b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801a778:	4620      	mov	r0, r4
 801a77a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a77e:	f7ff ffd0 	bl	801a722 <_ZN8touchgfx4Rect10restrictToEss>
 801a782:	4b0d      	ldr	r3, [pc, #52]	@ (801a7b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801a784:	6818      	ldr	r0, [r3, #0]
 801a786:	b190      	cbz	r0, 801a7ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801a788:	6803      	ldr	r3, [r0, #0]
 801a78a:	4621      	mov	r1, r4
 801a78c:	689b      	ldr	r3, [r3, #8]
 801a78e:	4798      	blx	r3
 801a790:	4b0a      	ldr	r3, [pc, #40]	@ (801a7bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801a792:	6818      	ldr	r0, [r3, #0]
 801a794:	b118      	cbz	r0, 801a79e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801a796:	6803      	ldr	r3, [r0, #0]
 801a798:	4621      	mov	r1, r4
 801a79a:	689b      	ldr	r3, [r3, #8]
 801a79c:	4798      	blx	r3
 801a79e:	4b08      	ldr	r3, [pc, #32]	@ (801a7c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801a7a0:	4621      	mov	r1, r4
 801a7a2:	6818      	ldr	r0, [r3, #0]
 801a7a4:	6803      	ldr	r3, [r0, #0]
 801a7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7aa:	69db      	ldr	r3, [r3, #28]
 801a7ac:	4718      	bx	r3
 801a7ae:	bd10      	pop	{r4, pc}
 801a7b0:	240285aa 	.word	0x240285aa
 801a7b4:	240285a8 	.word	0x240285a8
 801a7b8:	240285f8 	.word	0x240285f8
 801a7bc:	240285f4 	.word	0x240285f4
 801a7c0:	240285b4 	.word	0x240285b4

0801a7c4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7c6:	4606      	mov	r6, r0
 801a7c8:	4608      	mov	r0, r1
 801a7ca:	460f      	mov	r7, r1
 801a7cc:	f7f8 fbf7 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7d0:	b9e8      	cbnz	r0, 801a80e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a7d2:	f9b7 5000 	ldrsh.w	r5, [r7]
 801a7d6:	f9b6 4000 	ldrsh.w	r4, [r6]
 801a7da:	42a5      	cmp	r5, r4
 801a7dc:	db17      	blt.n	801a80e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a7de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801a7e2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	db11      	blt.n	801a80e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a7ea:	88b9      	ldrh	r1, [r7, #4]
 801a7ec:	440d      	add	r5, r1
 801a7ee:	88b1      	ldrh	r1, [r6, #4]
 801a7f0:	440c      	add	r4, r1
 801a7f2:	b22d      	sxth	r5, r5
 801a7f4:	b224      	sxth	r4, r4
 801a7f6:	42a5      	cmp	r5, r4
 801a7f8:	dc09      	bgt.n	801a80e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a7fa:	88f8      	ldrh	r0, [r7, #6]
 801a7fc:	4410      	add	r0, r2
 801a7fe:	88f2      	ldrh	r2, [r6, #6]
 801a800:	4413      	add	r3, r2
 801a802:	b200      	sxth	r0, r0
 801a804:	b21b      	sxth	r3, r3
 801a806:	4298      	cmp	r0, r3
 801a808:	bfcc      	ite	gt
 801a80a:	2000      	movgt	r0, #0
 801a80c:	2001      	movle	r0, #1
 801a80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a810 <_ZN8touchgfx11Application11getInstanceEv>:
 801a810:	4b01      	ldr	r3, [pc, #4]	@ (801a818 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a812:	6818      	ldr	r0, [r3, #0]
 801a814:	4770      	bx	lr
 801a816:	bf00      	nop
 801a818:	24028608 	.word	0x24028608

0801a81c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801a81c:	2300      	movs	r3, #0
 801a81e:	b510      	push	{r4, lr}
 801a820:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801a824:	4604      	mov	r4, r0
 801a826:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a82a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801a82e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801a832:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801a836:	429a      	cmp	r2, r3
 801a838:	d90e      	bls.n	801a858 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801a83a:	18e2      	adds	r2, r4, r3
 801a83c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801a840:	b122      	cbz	r2, 801a84c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801a842:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801a846:	6803      	ldr	r3, [r0, #0]
 801a848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a84a:	4798      	blx	r3
 801a84c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801a850:	3301      	adds	r3, #1
 801a852:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801a856:	e7ea      	b.n	801a82e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801a858:	bd10      	pop	{r4, pc}

0801a85a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801a85a:	b530      	push	{r4, r5, lr}
 801a85c:	2200      	movs	r2, #0
 801a85e:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801a862:	b293      	uxth	r3, r2
 801a864:	429d      	cmp	r5, r3
 801a866:	d90e      	bls.n	801a886 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801a868:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801a86c:	428b      	cmp	r3, r1
 801a86e:	d10b      	bne.n	801a888 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801a870:	1884      	adds	r4, r0, r2
 801a872:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801a876:	b13b      	cbz	r3, 801a888 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801a878:	3b01      	subs	r3, #1
 801a87a:	b2db      	uxtb	r3, r3
 801a87c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 801a880:	b90b      	cbnz	r3, 801a886 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801a882:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a886:	bd30      	pop	{r4, r5, pc}
 801a888:	3201      	adds	r2, #1
 801a88a:	e7ea      	b.n	801a862 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801a88c <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801a88c:	2300      	movs	r3, #0
 801a88e:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801a892:	30a4      	adds	r0, #164	@ 0xa4
 801a894:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a898:	f802 3b01 	strb.w	r3, [r2], #1
 801a89c:	4282      	cmp	r2, r0
 801a89e:	d1fb      	bne.n	801a898 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801a8a0:	4770      	bx	lr
	...

0801a8a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a8a4:	b570      	push	{r4, r5, r6, lr}
 801a8a6:	4c0b      	ldr	r4, [pc, #44]	@ (801a8d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801a8a8:	4605      	mov	r5, r0
 801a8aa:	460e      	mov	r6, r1
 801a8ac:	6820      	ldr	r0, [r4, #0]
 801a8ae:	b110      	cbz	r0, 801a8b6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801a8b0:	6803      	ldr	r3, [r0, #0]
 801a8b2:	695b      	ldr	r3, [r3, #20]
 801a8b4:	4798      	blx	r3
 801a8b6:	1d28      	adds	r0, r5, #4
 801a8b8:	f7ff ffe8 	bl	801a88c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801a8bc:	6026      	str	r6, [r4, #0]
 801a8be:	6833      	ldr	r3, [r6, #0]
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	68db      	ldr	r3, [r3, #12]
 801a8c4:	4798      	blx	r3
 801a8c6:	682b      	ldr	r3, [r5, #0]
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a8cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8d0:	4718      	bx	r3
 801a8d2:	bf00      	nop
 801a8d4:	240285f8 	.word	0x240285f8

0801a8d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801a8d8:	2300      	movs	r3, #0
 801a8da:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801a8de:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801a8e2:	461a      	mov	r2, r3
 801a8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8e6:	461c      	mov	r4, r3
 801a8e8:	461d      	mov	r5, r3
 801a8ea:	459c      	cmp	ip, r3
 801a8ec:	dd1a      	ble.n	801a924 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801a8ee:	18c6      	adds	r6, r0, r3
 801a8f0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801a8f4:	b16e      	cbz	r6, 801a912 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801a8f6:	429a      	cmp	r2, r3
 801a8f8:	d008      	beq.n	801a90c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801a8fa:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801a8fe:	fa1f fe82 	uxth.w	lr, r2
 801a902:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801a906:	1887      	adds	r7, r0, r2
 801a908:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801a90c:	3201      	adds	r2, #1
 801a90e:	3301      	adds	r3, #1
 801a910:	e7eb      	b.n	801a8ea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801a912:	4299      	cmp	r1, r3
 801a914:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801a918:	bfa8      	it	ge
 801a91a:	3501      	addge	r5, #1
 801a91c:	429e      	cmp	r6, r3
 801a91e:	bfc8      	it	gt
 801a920:	3401      	addgt	r4, #1
 801a922:	e7f4      	b.n	801a90e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801a924:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801a928:	1b49      	subs	r1, r1, r5
 801a92a:	1b1b      	subs	r3, r3, r4
 801a92c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801a930:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801a934:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a938:	4293      	cmp	r3, r2
 801a93a:	dd03      	ble.n	801a944 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801a93c:	3b01      	subs	r3, #1
 801a93e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801a942:	e7f7      	b.n	801a934 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801a944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a948 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a948:	b570      	push	{r4, r5, r6, lr}
 801a94a:	4d16      	ldr	r5, [pc, #88]	@ (801a9a4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801a94c:	4604      	mov	r4, r0
 801a94e:	6828      	ldr	r0, [r5, #0]
 801a950:	b140      	cbz	r0, 801a964 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a952:	7a03      	ldrb	r3, [r0, #8]
 801a954:	b933      	cbnz	r3, 801a964 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a956:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801a95a:	6803      	ldr	r3, [r0, #0]
 801a95c:	689b      	ldr	r3, [r3, #8]
 801a95e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a962:	4718      	bx	r3
 801a964:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801a968:	4e0f      	ldr	r6, [pc, #60]	@ (801a9a8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801a96a:	b973      	cbnz	r3, 801a98a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a96c:	b168      	cbz	r0, 801a98a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a96e:	7a03      	ldrb	r3, [r0, #8]
 801a970:	b15b      	cbz	r3, 801a98a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a972:	6830      	ldr	r0, [r6, #0]
 801a974:	b110      	cbz	r0, 801a97c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a976:	6803      	ldr	r3, [r0, #0]
 801a978:	691b      	ldr	r3, [r3, #16]
 801a97a:	4798      	blx	r3
 801a97c:	6828      	ldr	r0, [r5, #0]
 801a97e:	6803      	ldr	r3, [r0, #0]
 801a980:	68db      	ldr	r3, [r3, #12]
 801a982:	4798      	blx	r3
 801a984:	2301      	movs	r3, #1
 801a986:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801a98a:	3404      	adds	r4, #4
 801a98c:	4620      	mov	r0, r4
 801a98e:	f7ff ff45 	bl	801a81c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801a992:	4620      	mov	r0, r4
 801a994:	f7ff ffa0 	bl	801a8d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801a998:	6830      	ldr	r0, [r6, #0]
 801a99a:	b110      	cbz	r0, 801a9a2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801a99c:	6803      	ldr	r3, [r0, #0]
 801a99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9a0:	e7dd      	b.n	801a95e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a9a2:	bd70      	pop	{r4, r5, r6, pc}
 801a9a4:	240285fc 	.word	0x240285fc
 801a9a8:	240285f8 	.word	0x240285f8

0801a9ac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	4604      	mov	r4, r0
 801a9b2:	460d      	mov	r5, r1
 801a9b4:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	b29a      	uxth	r2, r3
 801a9bc:	4291      	cmp	r1, r2
 801a9be:	d912      	bls.n	801a9e6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801a9c0:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801a9c4:	18e6      	adds	r6, r4, r3
 801a9c6:	42af      	cmp	r7, r5
 801a9c8:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 801a9cc:	d105      	bne.n	801a9da <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801a9ce:	2aff      	cmp	r2, #255	@ 0xff
 801a9d0:	d002      	beq.n	801a9d8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801a9d2:	3201      	adds	r2, #1
 801a9d4:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801a9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9da:	2a00      	cmp	r2, #0
 801a9dc:	f103 0301 	add.w	r3, r3, #1
 801a9e0:	bf08      	it	eq
 801a9e2:	2001      	moveq	r0, #1
 801a9e4:	e7e9      	b.n	801a9ba <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801a9e6:	b120      	cbz	r0, 801a9f2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801a9e8:	2920      	cmp	r1, #32
 801a9ea:	d102      	bne.n	801a9f2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801a9ec:	4620      	mov	r0, r4
 801a9ee:	f7ff ff73 	bl	801a8d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801a9f2:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801a9f6:	2b1f      	cmp	r3, #31
 801a9f8:	d8ee      	bhi.n	801a9d8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801a9fa:	18e2      	adds	r2, r4, r3
 801a9fc:	2101      	movs	r1, #1
 801a9fe:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801aa02:	185a      	adds	r2, r3, r1
 801aa04:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801aa08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801aa0c:	e7e4      	b.n	801a9d8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801aa0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801aa0e:	4603      	mov	r3, r0
 801aa10:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801aa14:	2200      	movs	r2, #0
 801aa16:	801a      	strh	r2, [r3, #0]
 801aa18:	3308      	adds	r3, #8
 801aa1a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801aa1e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801aa22:	f823 2c02 	strh.w	r2, [r3, #-2]
 801aa26:	428b      	cmp	r3, r1
 801aa28:	d1f5      	bne.n	801aa16 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801aa2a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801aa2e:	4770      	bx	lr

0801aa30 <_ZN8touchgfx11ApplicationC1Ev>:
 801aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa32:	4b1d      	ldr	r3, [pc, #116]	@ (801aaa8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801aa34:	4606      	mov	r6, r0
 801aa36:	4604      	mov	r4, r0
 801aa38:	2500      	movs	r5, #0
 801aa3a:	f846 3b04 	str.w	r3, [r6], #4
 801aa3e:	22a8      	movs	r2, #168	@ 0xa8
 801aa40:	2100      	movs	r1, #0
 801aa42:	4630      	mov	r0, r6
 801aa44:	f00f f9d4 	bl	8029df0 <memset>
 801aa48:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801aa4c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801aa50:	4f16      	ldr	r7, [pc, #88]	@ (801aaac <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801aa52:	f7ff ffdc 	bl	801aa0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aa56:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801aa5a:	f7ff ffd8 	bl	801aa0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aa5e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801aa62:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801aa66:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801aa6a:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801aa6e:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801aa72:	490f      	ldr	r1, [pc, #60]	@ (801aab0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801aa74:	480f      	ldr	r0, [pc, #60]	@ (801aab4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801aa76:	f00d fbff 	bl	8028278 <CRC_Lock>
 801aa7a:	4b0f      	ldr	r3, [pc, #60]	@ (801aab8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801aa7c:	b158      	cbz	r0, 801aa96 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801aa7e:	801d      	strh	r5, [r3, #0]
 801aa80:	2300      	movs	r3, #0
 801aa82:	4a0e      	ldr	r2, [pc, #56]	@ (801aabc <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801aa84:	4630      	mov	r0, r6
 801aa86:	6013      	str	r3, [r2, #0]
 801aa88:	4a0d      	ldr	r2, [pc, #52]	@ (801aac0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801aa8a:	603b      	str	r3, [r7, #0]
 801aa8c:	6013      	str	r3, [r2, #0]
 801aa8e:	f7ff fefd 	bl	801a88c <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801aa92:	4620      	mov	r0, r4
 801aa94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801aa9a:	2002      	movs	r0, #2
 801aa9c:	801a      	strh	r2, [r3, #0]
 801aa9e:	6038      	str	r0, [r7, #0]
 801aaa0:	f001 fe58 	bl	801c754 <_ZN8touchgfx6Screen4drawEv>
 801aaa4:	e7ec      	b.n	801aa80 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801aaa6:	bf00      	nop
 801aaa8:	0802e4b4 	.word	0x0802e4b4
 801aaac:	240285f8 	.word	0x240285f8
 801aab0:	b5e8b5cd 	.word	0xb5e8b5cd
 801aab4:	f407a5c2 	.word	0xf407a5c2
 801aab8:	2400007c 	.word	0x2400007c
 801aabc:	24028608 	.word	0x24028608
 801aac0:	240285fc 	.word	0x240285fc

0801aac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801aac4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801aac8:	3b01      	subs	r3, #1
 801aaca:	b29b      	uxth	r3, r3
 801aacc:	428b      	cmp	r3, r1
 801aace:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801aad2:	b510      	push	{r4, lr}
 801aad4:	d908      	bls.n	801aae8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801aad6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801aada:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801aade:	681a      	ldr	r2, [r3, #0]
 801aae0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801aae4:	685a      	ldr	r2, [r3, #4]
 801aae6:	6062      	str	r2, [r4, #4]
 801aae8:	bd10      	pop	{r4, pc}
	...

0801aaec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaf0:	b08f      	sub	sp, #60	@ 0x3c
 801aaf2:	4b8f      	ldr	r3, [pc, #572]	@ (801ad30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801aaf4:	4683      	mov	fp, r0
 801aaf6:	ac0a      	add	r4, sp, #40	@ 0x28
 801aaf8:	e884 0006 	stmia.w	r4, {r1, r2}
 801aafc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab00:	4620      	mov	r0, r4
 801ab02:	4b8c      	ldr	r3, [pc, #560]	@ (801ad34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801ab04:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ab08:	f7ff fe0b 	bl	801a722 <_ZN8touchgfx4Rect10restrictToEss>
 801ab0c:	4620      	mov	r0, r4
 801ab0e:	f7f8 fa56 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab12:	2800      	cmp	r0, #0
 801ab14:	d16a      	bne.n	801abec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ab16:	9403      	str	r4, [sp, #12]
 801ab18:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801ab1c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801ab20:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801ab24:	9301      	str	r3, [sp, #4]
 801ab26:	35a4      	adds	r5, #164	@ 0xa4
 801ab28:	b15c      	cbz	r4, 801ab42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ab2a:	4629      	mov	r1, r5
 801ab2c:	9803      	ldr	r0, [sp, #12]
 801ab2e:	f7ff fe49 	bl	801a7c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ab32:	3c01      	subs	r4, #1
 801ab34:	b118      	cbz	r0, 801ab3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801ab36:	b2a1      	uxth	r1, r4
 801ab38:	9801      	ldr	r0, [sp, #4]
 801ab3a:	f7ff ffc3 	bl	801aac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ab3e:	3d08      	subs	r5, #8
 801ab40:	e7f2      	b.n	801ab28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801ab42:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801ab46:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ab4a:	f8cd a010 	str.w	sl, [sp, #16]
 801ab4e:	9302      	str	r3, [sp, #8]
 801ab50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ab54:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801ab58:	9306      	str	r3, [sp, #24]
 801ab5a:	445c      	add	r4, fp
 801ab5c:	2500      	movs	r5, #0
 801ab5e:	4626      	mov	r6, r4
 801ab60:	f8cd a014 	str.w	sl, [sp, #20]
 801ab64:	462f      	mov	r7, r5
 801ab66:	9b05      	ldr	r3, [sp, #20]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d073      	beq.n	801ac54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ab6c:	9903      	ldr	r1, [sp, #12]
 801ab6e:	4630      	mov	r0, r6
 801ab70:	f7ff fdb5 	bl	801a6de <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ab74:	b350      	cbz	r0, 801abcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801ab76:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801ab7a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801ab7e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801ab82:	45e6      	cmp	lr, ip
 801ab84:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801ab88:	db33      	blt.n	801abf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ab8a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801ab8e:	88b3      	ldrh	r3, [r6, #4]
 801ab90:	4472      	add	r2, lr
 801ab92:	4463      	add	r3, ip
 801ab94:	b212      	sxth	r2, r2
 801ab96:	b21b      	sxth	r3, r3
 801ab98:	429a      	cmp	r2, r3
 801ab9a:	dc2a      	bgt.n	801abf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ab9c:	fa1f f289 	uxth.w	r2, r9
 801aba0:	88f3      	ldrh	r3, [r6, #6]
 801aba2:	45c8      	cmp	r8, r9
 801aba4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801aba8:	4413      	add	r3, r2
 801abaa:	fa1f fc88 	uxth.w	ip, r8
 801abae:	b29b      	uxth	r3, r3
 801abb0:	fa0f fe83 	sxth.w	lr, r3
 801abb4:	db0f      	blt.n	801abd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801abb6:	eba3 030c 	sub.w	r3, r3, ip
 801abba:	1ac9      	subs	r1, r1, r3
 801abbc:	b209      	sxth	r1, r1
 801abbe:	2900      	cmp	r1, #0
 801abc0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801abc4:	dd12      	ble.n	801abec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801abc6:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801abca:	4605      	mov	r5, r0
 801abcc:	9b05      	ldr	r3, [sp, #20]
 801abce:	3e08      	subs	r6, #8
 801abd0:	3b01      	subs	r3, #1
 801abd2:	9305      	str	r3, [sp, #20]
 801abd4:	e7c7      	b.n	801ab66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801abd6:	4461      	add	r1, ip
 801abd8:	b209      	sxth	r1, r1
 801abda:	4571      	cmp	r1, lr
 801abdc:	dc38      	bgt.n	801ac50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801abde:	eba2 020c 	sub.w	r2, r2, ip
 801abe2:	b212      	sxth	r2, r2
 801abe4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801abe8:	2a00      	cmp	r2, #0
 801abea:	dcee      	bgt.n	801abca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801abec:	b00f      	add	sp, #60	@ 0x3c
 801abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf2:	45c8      	cmp	r8, r9
 801abf4:	db2c      	blt.n	801ac50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801abf6:	88f3      	ldrh	r3, [r6, #6]
 801abf8:	4499      	add	r9, r3
 801abfa:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801abfe:	4498      	add	r8, r3
 801ac00:	fa0f f989 	sxth.w	r9, r9
 801ac04:	fa0f f888 	sxth.w	r8, r8
 801ac08:	45c1      	cmp	r9, r8
 801ac0a:	db21      	blt.n	801ac50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ac0c:	fa1f f28c 	uxth.w	r2, ip
 801ac10:	88b3      	ldrh	r3, [r6, #4]
 801ac12:	45e6      	cmp	lr, ip
 801ac14:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801ac18:	4413      	add	r3, r2
 801ac1a:	fa1f f88e 	uxth.w	r8, lr
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	fa0f f983 	sxth.w	r9, r3
 801ac24:	db0a      	blt.n	801ac3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801ac26:	eba3 0308 	sub.w	r3, r3, r8
 801ac2a:	1ac9      	subs	r1, r1, r3
 801ac2c:	b209      	sxth	r1, r1
 801ac2e:	2900      	cmp	r1, #0
 801ac30:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801ac34:	ddda      	ble.n	801abec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ac36:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801ac3a:	e7c6      	b.n	801abca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ac3c:	4441      	add	r1, r8
 801ac3e:	b209      	sxth	r1, r1
 801ac40:	4549      	cmp	r1, r9
 801ac42:	dc05      	bgt.n	801ac50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ac44:	eba2 0208 	sub.w	r2, r2, r8
 801ac48:	b212      	sxth	r2, r2
 801ac4a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801ac4e:	e7cb      	b.n	801abe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801ac50:	4607      	mov	r7, r0
 801ac52:	e7bb      	b.n	801abcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801ac54:	2d00      	cmp	r5, #0
 801ac56:	d181      	bne.n	801ab5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801ac58:	2f00      	cmp	r7, #0
 801ac5a:	f000 81dd 	beq.w	801b018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ac5e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801ac62:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801ac66:	b2b3      	uxth	r3, r6
 801ac68:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801ac6c:	9305      	str	r3, [sp, #20]
 801ac6e:	9a05      	ldr	r2, [sp, #20]
 801ac70:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ac74:	4413      	add	r3, r2
 801ac76:	b2ba      	uxth	r2, r7
 801ac78:	4492      	add	sl, r2
 801ac7a:	b29b      	uxth	r3, r3
 801ac7c:	fa1f fa8a 	uxth.w	sl, sl
 801ac80:	fa0f f883 	sxth.w	r8, r3
 801ac84:	fa0f f98a 	sxth.w	r9, sl
 801ac88:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801ac8c:	9b04      	ldr	r3, [sp, #16]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d052      	beq.n	801ad38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801ac92:	9903      	ldr	r1, [sp, #12]
 801ac94:	4620      	mov	r0, r4
 801ac96:	f7ff fd22 	bl	801a6de <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ac9a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac9e:	b1c0      	cbz	r0, 801acd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801aca0:	f9b4 e000 	ldrsh.w	lr, [r4]
 801aca4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801aca8:	4576      	cmp	r6, lr
 801acaa:	dc22      	bgt.n	801acf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801acac:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801acb0:	44f4      	add	ip, lr
 801acb2:	fa0f fc8c 	sxth.w	ip, ip
 801acb6:	45e0      	cmp	r8, ip
 801acb8:	db1b      	blt.n	801acf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801acba:	428f      	cmp	r7, r1
 801acbc:	fa1f fc81 	uxth.w	ip, r1
 801acc0:	88e1      	ldrh	r1, [r4, #6]
 801acc2:	dc0d      	bgt.n	801ace0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801acc4:	ebaa 0c0c 	sub.w	ip, sl, ip
 801acc8:	f8a4 9002 	strh.w	r9, [r4, #2]
 801accc:	eba1 010c 	sub.w	r1, r1, ip
 801acd0:	80e1      	strh	r1, [r4, #6]
 801acd2:	4628      	mov	r0, r5
 801acd4:	9904      	ldr	r1, [sp, #16]
 801acd6:	3c08      	subs	r4, #8
 801acd8:	4605      	mov	r5, r0
 801acda:	3901      	subs	r1, #1
 801acdc:	9104      	str	r1, [sp, #16]
 801acde:	e7d3      	b.n	801ac88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801ace0:	4461      	add	r1, ip
 801ace2:	b209      	sxth	r1, r1
 801ace4:	4549      	cmp	r1, r9
 801ace6:	dcf5      	bgt.n	801acd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ace8:	eba2 0c0c 	sub.w	ip, r2, ip
 801acec:	f8a4 c006 	strh.w	ip, [r4, #6]
 801acf0:	e7ef      	b.n	801acd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801acf2:	428f      	cmp	r7, r1
 801acf4:	dcee      	bgt.n	801acd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801acf6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801acfa:	4461      	add	r1, ip
 801acfc:	b209      	sxth	r1, r1
 801acfe:	4589      	cmp	r9, r1
 801ad00:	dbe8      	blt.n	801acd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ad02:	4576      	cmp	r6, lr
 801ad04:	fa1f fc8e 	uxth.w	ip, lr
 801ad08:	88a1      	ldrh	r1, [r4, #4]
 801ad0a:	dc07      	bgt.n	801ad1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801ad0c:	eba3 0c0c 	sub.w	ip, r3, ip
 801ad10:	f8a4 8000 	strh.w	r8, [r4]
 801ad14:	eba1 010c 	sub.w	r1, r1, ip
 801ad18:	80a1      	strh	r1, [r4, #4]
 801ad1a:	e7da      	b.n	801acd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ad1c:	4461      	add	r1, ip
 801ad1e:	b209      	sxth	r1, r1
 801ad20:	4588      	cmp	r8, r1
 801ad22:	dbd7      	blt.n	801acd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ad24:	9905      	ldr	r1, [sp, #20]
 801ad26:	eba1 0c0c 	sub.w	ip, r1, ip
 801ad2a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801ad2e:	e7d0      	b.n	801acd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ad30:	240285aa 	.word	0x240285aa
 801ad34:	240285a8 	.word	0x240285a8
 801ad38:	2d00      	cmp	r5, #0
 801ad3a:	f000 816d 	beq.w	801b018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ad3e:	9b06      	ldr	r3, [sp, #24]
 801ad40:	445b      	add	r3, fp
 801ad42:	461c      	mov	r4, r3
 801ad44:	9b02      	ldr	r3, [sp, #8]
 801ad46:	3301      	adds	r3, #1
 801ad48:	f000 8166 	beq.w	801b018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801ad4c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801ad50:	9803      	ldr	r0, [sp, #12]
 801ad52:	4629      	mov	r1, r5
 801ad54:	f7ff fd36 	bl	801a7c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ad58:	b120      	cbz	r0, 801ad64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801ad5a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ad5e:	9801      	ldr	r0, [sp, #4]
 801ad60:	f7ff feb0 	bl	801aac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad64:	9903      	ldr	r1, [sp, #12]
 801ad66:	4628      	mov	r0, r5
 801ad68:	f7ff fcb9 	bl	801a6de <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ad6c:	2800      	cmp	r0, #0
 801ad6e:	f000 809c 	beq.w	801aeaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801ad72:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801ad76:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801ad7a:	fa1f f189 	uxth.w	r1, r9
 801ad7e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801ad82:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad84:	eb01 0c03 	add.w	ip, r1, r3
 801ad88:	b283      	uxth	r3, r0
 801ad8a:	4548      	cmp	r0, r9
 801ad8c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801ad90:	fa1f fa8c 	uxth.w	sl, ip
 801ad94:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801ad98:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801ad9c:	eb03 050c 	add.w	r5, r3, ip
 801ada0:	b2ad      	uxth	r5, r5
 801ada2:	9505      	str	r5, [sp, #20]
 801ada4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801ada8:	9504      	str	r5, [sp, #16]
 801adaa:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801adae:	f340 8099 	ble.w	801aee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801adb2:	1a5b      	subs	r3, r3, r1
 801adb4:	4596      	cmp	lr, r2
 801adb6:	fa0f f08a 	sxth.w	r0, sl
 801adba:	b29b      	uxth	r3, r3
 801adbc:	b21e      	sxth	r6, r3
 801adbe:	dd2e      	ble.n	801ae1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801adc0:	9f02      	ldr	r7, [sp, #8]
 801adc2:	fa1f fe8e 	uxth.w	lr, lr
 801adc6:	b292      	uxth	r2, r2
 801adc8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801adcc:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801add0:	9f04      	ldr	r7, [sp, #16]
 801add2:	ebae 0102 	sub.w	r1, lr, r2
 801add6:	44a6      	add	lr, r4
 801add8:	1a3f      	subs	r7, r7, r0
 801adda:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801adde:	b289      	uxth	r1, r1
 801ade0:	4402      	add	r2, r0
 801ade2:	fa0f fe8e 	sxth.w	lr, lr
 801ade6:	b20d      	sxth	r5, r1
 801ade8:	b212      	sxth	r2, r2
 801adea:	436f      	muls	r7, r5
 801adec:	ebae 0202 	sub.w	r2, lr, r2
 801adf0:	4372      	muls	r2, r6
 801adf2:	4297      	cmp	r7, r2
 801adf4:	db09      	blt.n	801ae0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801adf6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801adfa:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801adfe:	449c      	add	ip, r3
 801ae00:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801ae04:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801ae08:	e686      	b.n	801ab18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ae0a:	4421      	add	r1, r4
 801ae0c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801ae10:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801ae14:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ae18:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801ae1c:	e67c      	b.n	801ab18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ae1e:	9f04      	ldr	r7, [sp, #16]
 801ae20:	42b8      	cmp	r0, r7
 801ae22:	da27      	bge.n	801ae74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801ae24:	9902      	ldr	r1, [sp, #8]
 801ae26:	1a3f      	subs	r7, r7, r0
 801ae28:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801ae2c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801ae30:	eb05 010e 	add.w	r1, r5, lr
 801ae34:	fa1f f881 	uxth.w	r8, r1
 801ae38:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801ae3c:	4411      	add	r1, r2
 801ae3e:	fa0f f988 	sxth.w	r9, r8
 801ae42:	eba2 020e 	sub.w	r2, r2, lr
 801ae46:	eba1 0108 	sub.w	r1, r1, r8
 801ae4a:	4372      	muls	r2, r6
 801ae4c:	b289      	uxth	r1, r1
 801ae4e:	fa0f f881 	sxth.w	r8, r1
 801ae52:	fb08 f707 	mul.w	r7, r8, r7
 801ae56:	42ba      	cmp	r2, r7
 801ae58:	dc06      	bgt.n	801ae68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801ae5a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801ae5e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801ae62:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801ae66:	e7ca      	b.n	801adfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801ae68:	4429      	add	r1, r5
 801ae6a:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801ae6e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ae72:	e651      	b.n	801ab18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ae74:	9805      	ldr	r0, [sp, #20]
 801ae76:	2d06      	cmp	r5, #6
 801ae78:	ebaa 0000 	sub.w	r0, sl, r0
 801ae7c:	b280      	uxth	r0, r0
 801ae7e:	fa0f fe80 	sxth.w	lr, r0
 801ae82:	d817      	bhi.n	801aeb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801ae84:	9b04      	ldr	r3, [sp, #16]
 801ae86:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801ae8a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801ae8e:	1c6b      	adds	r3, r5, #1
 801ae90:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801ae94:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801ae98:	9b01      	ldr	r3, [sp, #4]
 801ae9a:	9801      	ldr	r0, [sp, #4]
 801ae9c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aea0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801aea4:	805a      	strh	r2, [r3, #2]
 801aea6:	809e      	strh	r6, [r3, #4]
 801aea8:	80d9      	strh	r1, [r3, #6]
 801aeaa:	9b02      	ldr	r3, [sp, #8]
 801aeac:	3c08      	subs	r4, #8
 801aeae:	3b01      	subs	r3, #1
 801aeb0:	9302      	str	r3, [sp, #8]
 801aeb2:	e747      	b.n	801ad44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801aeb4:	9a02      	ldr	r2, [sp, #8]
 801aeb6:	45b6      	cmp	lr, r6
 801aeb8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801aebc:	db0d      	blt.n	801aeda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801aebe:	449c      	add	ip, r3
 801aec0:	445a      	add	r2, fp
 801aec2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801aec6:	fa1f fc8c 	uxth.w	ip, ip
 801aeca:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801aece:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801aed2:	448c      	add	ip, r1
 801aed4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801aed8:	e61e      	b.n	801ab18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801aeda:	445a      	add	r2, fp
 801aedc:	4484      	add	ip, r0
 801aede:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801aee2:	e78f      	b.n	801ae04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801aee4:	fa1f f18e 	uxth.w	r1, lr
 801aee8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801aeec:	b293      	uxth	r3, r2
 801aeee:	4596      	cmp	lr, r2
 801aef0:	eb01 0806 	add.w	r8, r1, r6
 801aef4:	9306      	str	r3, [sp, #24]
 801aef6:	fa1f f888 	uxth.w	r8, r8
 801aefa:	9f06      	ldr	r7, [sp, #24]
 801aefc:	fa0f f388 	sxth.w	r3, r8
 801af00:	9307      	str	r3, [sp, #28]
 801af02:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801af06:	443b      	add	r3, r7
 801af08:	b29b      	uxth	r3, r3
 801af0a:	9308      	str	r3, [sp, #32]
 801af0c:	da24      	bge.n	801af58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801af0e:	9905      	ldr	r1, [sp, #20]
 801af10:	eba3 0308 	sub.w	r3, r3, r8
 801af14:	eba2 020e 	sub.w	r2, r2, lr
 801af18:	eba9 0000 	sub.w	r0, r9, r0
 801af1c:	ebaa 0401 	sub.w	r4, sl, r1
 801af20:	b29b      	uxth	r3, r3
 801af22:	b2a4      	uxth	r4, r4
 801af24:	b219      	sxth	r1, r3
 801af26:	b225      	sxth	r5, r4
 801af28:	4348      	muls	r0, r1
 801af2a:	436a      	muls	r2, r5
 801af2c:	4282      	cmp	r2, r0
 801af2e:	9a02      	ldr	r2, [sp, #8]
 801af30:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801af34:	445a      	add	r2, fp
 801af36:	dc06      	bgt.n	801af46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801af38:	9b07      	ldr	r3, [sp, #28]
 801af3a:	44a4      	add	ip, r4
 801af3c:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801af40:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801af44:	e75e      	b.n	801ae04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801af46:	9904      	ldr	r1, [sp, #16]
 801af48:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801af4c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801af50:	4433      	add	r3, r6
 801af52:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801af56:	e5df      	b.n	801ab18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801af58:	9f06      	ldr	r7, [sp, #24]
 801af5a:	9b04      	ldr	r3, [sp, #16]
 801af5c:	1bc9      	subs	r1, r1, r7
 801af5e:	fa0f f78a 	sxth.w	r7, sl
 801af62:	b289      	uxth	r1, r1
 801af64:	429f      	cmp	r7, r3
 801af66:	fa0f fe81 	sxth.w	lr, r1
 801af6a:	dd23      	ble.n	801afb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801af6c:	9a05      	ldr	r2, [sp, #20]
 801af6e:	eba9 0000 	sub.w	r0, r9, r0
 801af72:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801af76:	ebaa 0202 	sub.w	r2, sl, r2
 801af7a:	9d07      	ldr	r5, [sp, #28]
 801af7c:	fb0e f000 	mul.w	r0, lr, r0
 801af80:	b292      	uxth	r2, r2
 801af82:	eba5 0a03 	sub.w	sl, r5, r3
 801af86:	9b02      	ldr	r3, [sp, #8]
 801af88:	b214      	sxth	r4, r2
 801af8a:	00db      	lsls	r3, r3, #3
 801af8c:	fb04 fa0a 	mul.w	sl, r4, sl
 801af90:	445b      	add	r3, fp
 801af92:	4550      	cmp	r0, sl
 801af94:	db03      	blt.n	801af9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801af96:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801af9a:	4494      	add	ip, r2
 801af9c:	e732      	b.n	801ae04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801af9e:	9a04      	ldr	r2, [sp, #16]
 801afa0:	4431      	add	r1, r6
 801afa2:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801afa6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801afaa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801afae:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801afb2:	e75c      	b.n	801ae6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801afb4:	9b08      	ldr	r3, [sp, #32]
 801afb6:	2d06      	cmp	r5, #6
 801afb8:	eba3 0308 	sub.w	r3, r3, r8
 801afbc:	b29b      	uxth	r3, r3
 801afbe:	b218      	sxth	r0, r3
 801afc0:	d813      	bhi.n	801afea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801afc2:	9b07      	ldr	r3, [sp, #28]
 801afc4:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801afc8:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801afcc:	1c6b      	adds	r3, r5, #1
 801afce:	9901      	ldr	r1, [sp, #4]
 801afd0:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801afd4:	9b01      	ldr	r3, [sp, #4]
 801afd6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801afda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801afde:	805a      	strh	r2, [r3, #2]
 801afe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801afe2:	f8a3 e006 	strh.w	lr, [r3, #6]
 801afe6:	809a      	strh	r2, [r3, #4]
 801afe8:	e75f      	b.n	801aeaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801afea:	9c02      	ldr	r4, [sp, #8]
 801afec:	4570      	cmp	r0, lr
 801afee:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801aff2:	db0d      	blt.n	801b010 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801aff4:	4431      	add	r1, r6
 801aff6:	9b06      	ldr	r3, [sp, #24]
 801aff8:	445c      	add	r4, fp
 801affa:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801affe:	b289      	uxth	r1, r1
 801b000:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801b004:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801b008:	4419      	add	r1, r3
 801b00a:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801b00e:	e583      	b.n	801ab18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b010:	445c      	add	r4, fp
 801b012:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801b016:	e79b      	b.n	801af50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b018:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b01c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801b020:	1e65      	subs	r5, r4, #1
 801b022:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b026:	b2ad      	uxth	r5, r5
 801b028:	42b5      	cmp	r5, r6
 801b02a:	d044      	beq.n	801b0b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801b02c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b030:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801b034:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b038:	4282      	cmp	r2, r0
 801b03a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801b03e:	d11f      	bne.n	801b080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b040:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801b044:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b048:	459c      	cmp	ip, r3
 801b04a:	d119      	bne.n	801b080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b04c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801b050:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b054:	19d8      	adds	r0, r3, r7
 801b056:	b200      	sxth	r0, r0
 801b058:	4288      	cmp	r0, r1
 801b05a:	d109      	bne.n	801b070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801b05c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801b060:	4413      	add	r3, r2
 801b062:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b066:	4629      	mov	r1, r5
 801b068:	9801      	ldr	r0, [sp, #4]
 801b06a:	f7ff fd2b 	bl	801aac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b06e:	e003      	b.n	801b078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b070:	4411      	add	r1, r2
 801b072:	b209      	sxth	r1, r1
 801b074:	42b9      	cmp	r1, r7
 801b076:	d0f3      	beq.n	801b060 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801b078:	3d01      	subs	r5, #1
 801b07a:	3c08      	subs	r4, #8
 801b07c:	b2ad      	uxth	r5, r5
 801b07e:	e7d3      	b.n	801b028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801b080:	42b9      	cmp	r1, r7
 801b082:	d1f9      	bne.n	801b078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b084:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801b088:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b08c:	4299      	cmp	r1, r3
 801b08e:	d1f3      	bne.n	801b078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b090:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b094:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b098:	181f      	adds	r7, r3, r0
 801b09a:	b23f      	sxth	r7, r7
 801b09c:	42ba      	cmp	r2, r7
 801b09e:	d105      	bne.n	801b0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801b0a0:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801b0a4:	440b      	add	r3, r1
 801b0a6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b0aa:	e7dc      	b.n	801b066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801b0ac:	440a      	add	r2, r1
 801b0ae:	b212      	sxth	r2, r2
 801b0b0:	4290      	cmp	r0, r2
 801b0b2:	d1e1      	bne.n	801b078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801b0b4:	e7f6      	b.n	801b0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801b0b6:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801b0ba:	2e07      	cmp	r6, #7
 801b0bc:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b0c0:	d812      	bhi.n	801b0e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b0c2:	1c75      	adds	r5, r6, #1
 801b0c4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b0c8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801b0cc:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801b0d0:	9d01      	ldr	r5, [sp, #4]
 801b0d2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b0d6:	442c      	add	r4, r5
 801b0d8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b0dc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b0e0:	8061      	strh	r1, [r4, #2]
 801b0e2:	80a2      	strh	r2, [r4, #4]
 801b0e4:	80e3      	strh	r3, [r4, #6]
 801b0e6:	e581      	b.n	801abec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b0e8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b0ec:	3e01      	subs	r6, #1
 801b0ee:	445c      	add	r4, fp
 801b0f0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801b0f4:	f04f 37ff 	mov.w	r7, #4294967295
 801b0f8:	2500      	movs	r5, #0
 801b0fa:	9305      	str	r3, [sp, #20]
 801b0fc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b100:	1e72      	subs	r2, r6, #1
 801b102:	9302      	str	r3, [sp, #8]
 801b104:	4691      	mov	r9, r2
 801b106:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b10a:	9304      	str	r3, [sp, #16]
 801b10c:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801b110:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b114:	6818      	ldr	r0, [r3, #0]
 801b116:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b11a:	9207      	str	r2, [sp, #28]
 801b11c:	bf16      	itet	ne
 801b11e:	9905      	ldrne	r1, [sp, #20]
 801b120:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b124:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b128:	9306      	str	r3, [sp, #24]
 801b12a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b12e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b132:	fb18 f801 	smulbb	r8, r8, r1
 801b136:	6859      	ldr	r1, [r3, #4]
 801b138:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b13c:	4671      	mov	r1, lr
 801b13e:	a80c      	add	r0, sp, #48	@ 0x30
 801b140:	f7f8 fa7c 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b144:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801b148:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801b14c:	f04f 0c08 	mov.w	ip, #8
 801b150:	9b04      	ldr	r3, [sp, #16]
 801b152:	9a02      	ldr	r2, [sp, #8]
 801b154:	fb10 f001 	smulbb	r0, r0, r1
 801b158:	fb02 8803 	mla	r8, r2, r3, r8
 801b15c:	eba0 0108 	sub.w	r1, r0, r8
 801b160:	fb90 f0fc 	sdiv	r0, r0, ip
 801b164:	4288      	cmp	r0, r1
 801b166:	dc20      	bgt.n	801b1aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b168:	4551      	cmp	r1, sl
 801b16a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b16e:	da03      	bge.n	801b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801b170:	b1d9      	cbz	r1, 801b1aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801b172:	468a      	mov	sl, r1
 801b174:	464f      	mov	r7, r9
 801b176:	4635      	mov	r5, r6
 801b178:	f109 39ff 	add.w	r9, r9, #4294967295
 801b17c:	f119 0f02 	cmn.w	r9, #2
 801b180:	d1c6      	bne.n	801b110 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801b182:	4616      	mov	r6, r2
 801b184:	3201      	adds	r2, #1
 801b186:	f1a4 0408 	sub.w	r4, r4, #8
 801b18a:	d1b7      	bne.n	801b0fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801b18c:	9b01      	ldr	r3, [sp, #4]
 801b18e:	b2ac      	uxth	r4, r5
 801b190:	00ed      	lsls	r5, r5, #3
 801b192:	1958      	adds	r0, r3, r5
 801b194:	1c7b      	adds	r3, r7, #1
 801b196:	d10b      	bne.n	801b1b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801b198:	4601      	mov	r1, r0
 801b19a:	9803      	ldr	r0, [sp, #12]
 801b19c:	f7f8 fa4e 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b1a0:	4621      	mov	r1, r4
 801b1a2:	9801      	ldr	r0, [sp, #4]
 801b1a4:	f7ff fc8e 	bl	801aac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b1a8:	e4b6      	b.n	801ab18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b1aa:	464f      	mov	r7, r9
 801b1ac:	4635      	mov	r5, r6
 801b1ae:	e7ed      	b.n	801b18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801b1b0:	9b01      	ldr	r3, [sp, #4]
 801b1b2:	00ff      	lsls	r7, r7, #3
 801b1b4:	445d      	add	r5, fp
 801b1b6:	19d9      	adds	r1, r3, r7
 801b1b8:	445f      	add	r7, fp
 801b1ba:	f7f8 fa3f 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b1be:	9b03      	ldr	r3, [sp, #12]
 801b1c0:	cb03      	ldmia	r3!, {r0, r1}
 801b1c2:	9b03      	ldr	r3, [sp, #12]
 801b1c4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801b1c8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801b1cc:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801b1d0:	6869      	ldr	r1, [r5, #4]
 801b1d2:	c303      	stmia	r3!, {r0, r1}
 801b1d4:	e7e4      	b.n	801b1a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801b1d6:	bf00      	nop

0801b1d8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1dc:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801b1e0:	b09b      	sub	sp, #108	@ 0x6c
 801b1e2:	4604      	mov	r4, r0
 801b1e4:	4630      	mov	r0, r6
 801b1e6:	f7f7 feea 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1ea:	4605      	mov	r5, r0
 801b1ec:	b948      	cbnz	r0, 801b202 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801b1ee:	6823      	ldr	r3, [r4, #0]
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b1f4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b1f8:	4798      	blx	r3
 801b1fa:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801b1fe:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801b202:	4bc5      	ldr	r3, [pc, #788]	@ (801b518 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	2b00      	cmp	r3, #0
 801b208:	d03f      	beq.n	801b28a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b20a:	4dc4      	ldr	r5, [pc, #784]	@ (801b51c <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801b20c:	4628      	mov	r0, r5
 801b20e:	f7f7 fed6 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801b212:	4606      	mov	r6, r0
 801b214:	2800      	cmp	r0, #0
 801b216:	d138      	bne.n	801b28a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b218:	4628      	mov	r0, r5
 801b21a:	f7ff f971 	bl	801a500 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b21e:	6823      	ldr	r3, [r4, #0]
 801b220:	6829      	ldr	r1, [r5, #0]
 801b222:	4620      	mov	r0, r4
 801b224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b226:	686a      	ldr	r2, [r5, #4]
 801b228:	4798      	blx	r3
 801b22a:	802e      	strh	r6, [r5, #0]
 801b22c:	806e      	strh	r6, [r5, #2]
 801b22e:	80ae      	strh	r6, [r5, #4]
 801b230:	80ee      	strh	r6, [r5, #6]
 801b232:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801b236:	4dba      	ldr	r5, [pc, #744]	@ (801b520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801b238:	4640      	mov	r0, r8
 801b23a:	f7ff fbe8 	bl	801aa0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b23e:	882e      	ldrh	r6, [r5, #0]
 801b240:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801b244:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b248:	4633      	mov	r3, r6
 801b24a:	42bb      	cmp	r3, r7
 801b24c:	d224      	bcs.n	801b298 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b24e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801b252:	2907      	cmp	r1, #7
 801b254:	d816      	bhi.n	801b284 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801b256:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b25a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801b25e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801b262:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801b266:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801b26a:	1c4a      	adds	r2, r1, #1
 801b26c:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801b270:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801b274:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801b278:	f8a2 a002 	strh.w	sl, [r2, #2]
 801b27c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b280:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b284:	3301      	adds	r3, #1
 801b286:	b29b      	uxth	r3, r3
 801b288:	e7df      	b.n	801b24a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801b28a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d1cf      	bne.n	801b232 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801b292:	b01b      	add	sp, #108	@ 0x6c
 801b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b298:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801b29c:	42b3      	cmp	r3, r6
 801b29e:	d90c      	bls.n	801b2ba <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801b2a0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b2a4:	6822      	ldr	r2, [r4, #0]
 801b2a6:	3601      	adds	r6, #1
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801b2ac:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801b2b0:	b2b6      	uxth	r6, r6
 801b2b2:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801b2b6:	47b8      	blx	r7
 801b2b8:	e7ee      	b.n	801b298 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b2ba:	4a9a      	ldr	r2, [pc, #616]	@ (801b524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b2bc:	6813      	ldr	r3, [r2, #0]
 801b2be:	4691      	mov	r9, r2
 801b2c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801b2c4:	2b01      	cmp	r3, #1
 801b2c6:	f040 80e0 	bne.w	801b48a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801b2ca:	8829      	ldrh	r1, [r5, #0]
 801b2cc:	2600      	movs	r6, #0
 801b2ce:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801b2d2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801b2d6:	33ae      	adds	r3, #174	@ 0xae
 801b2d8:	428f      	cmp	r7, r1
 801b2da:	f103 0308 	add.w	r3, r3, #8
 801b2de:	dd0a      	ble.n	801b2f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801b2e0:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801b2e4:	3101      	adds	r1, #1
 801b2e6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801b2ea:	4402      	add	r2, r0
 801b2ec:	b212      	sxth	r2, r2
 801b2ee:	4296      	cmp	r6, r2
 801b2f0:	bfb8      	it	lt
 801b2f2:	4616      	movlt	r6, r2
 801b2f4:	e7f0      	b.n	801b2d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801b2f6:	4b8c      	ldr	r3, [pc, #560]	@ (801b528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801b2f8:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801b524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801b2fc:	881b      	ldrh	r3, [r3, #0]
 801b2fe:	2b0f      	cmp	r3, #15
 801b300:	bf8c      	ite	hi
 801b302:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801b306:	f04f 0b01 	movls.w	fp, #1
 801b30a:	2300      	movs	r3, #0
 801b30c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b310:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801b314:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801b318:	4b82      	ldr	r3, [pc, #520]	@ (801b524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b31a:	4438      	add	r0, r7
 801b31c:	b207      	sxth	r7, r0
 801b31e:	6818      	ldr	r0, [r3, #0]
 801b320:	42b7      	cmp	r7, r6
 801b322:	6803      	ldr	r3, [r0, #0]
 801b324:	f280 8083 	bge.w	801b42e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801b328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801b32c:	4798      	blx	r3
 801b32e:	eb07 030b 	add.w	r3, r7, fp
 801b332:	4298      	cmp	r0, r3
 801b334:	da07      	bge.n	801b346 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801b336:	42b0      	cmp	r0, r6
 801b338:	da05      	bge.n	801b346 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801b33a:	4287      	cmp	r7, r0
 801b33c:	dd6c      	ble.n	801b418 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b33e:	2f00      	cmp	r7, #0
 801b340:	dd6a      	ble.n	801b418 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b342:	4630      	mov	r0, r6
 801b344:	e004      	b.n	801b350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801b346:	4287      	cmp	r7, r0
 801b348:	dcfb      	bgt.n	801b342 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801b34a:	42b0      	cmp	r0, r6
 801b34c:	bfa8      	it	ge
 801b34e:	4630      	movge	r0, r6
 801b350:	4b76      	ldr	r3, [pc, #472]	@ (801b52c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801b352:	1bc0      	subs	r0, r0, r7
 801b354:	2200      	movs	r2, #0
 801b356:	f8ad 7016 	strh.w	r7, [sp, #22]
 801b35a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b35e:	882f      	ldrh	r7, [r5, #0]
 801b360:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b364:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b368:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b36c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b370:	42bb      	cmp	r3, r7
 801b372:	d9cd      	bls.n	801b310 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801b374:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801b378:	ab07      	add	r3, sp, #28
 801b37a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b37e:	6851      	ldr	r1, [r2, #4]
 801b380:	c303      	stmia	r3!, {r0, r1}
 801b382:	a905      	add	r1, sp, #20
 801b384:	a807      	add	r0, sp, #28
 801b386:	f7ff f9aa 	bl	801a6de <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b38a:	2800      	cmp	r0, #0
 801b38c:	d04c      	beq.n	801b428 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801b38e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801b392:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b396:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801b39a:	4686      	mov	lr, r0
 801b39c:	4290      	cmp	r0, r2
 801b39e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801b3a2:	4450      	add	r0, sl
 801b3a4:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801b3a8:	bfb8      	it	lt
 801b3aa:	4696      	movlt	lr, r2
 801b3ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b3b0:	4452      	add	r2, sl
 801b3b2:	b280      	uxth	r0, r0
 801b3b4:	4299      	cmp	r1, r3
 801b3b6:	468c      	mov	ip, r1
 801b3b8:	b292      	uxth	r2, r2
 801b3ba:	9302      	str	r3, [sp, #8]
 801b3bc:	bfb8      	it	lt
 801b3be:	469c      	movlt	ip, r3
 801b3c0:	b203      	sxth	r3, r0
 801b3c2:	fa0f fa82 	sxth.w	sl, r2
 801b3c6:	f8ad e01c 	strh.w	lr, [sp, #28]
 801b3ca:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b3ce:	4553      	cmp	r3, sl
 801b3d0:	bfb8      	it	lt
 801b3d2:	4602      	movlt	r2, r0
 801b3d4:	9b02      	ldr	r3, [sp, #8]
 801b3d6:	eba2 020e 	sub.w	r2, r2, lr
 801b3da:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b3de:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801b3e2:	4411      	add	r1, r2
 801b3e4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b3e8:	4413      	add	r3, r2
 801b3ea:	b289      	uxth	r1, r1
 801b3ec:	b29b      	uxth	r3, r3
 801b3ee:	b208      	sxth	r0, r1
 801b3f0:	b21a      	sxth	r2, r3
 801b3f2:	4290      	cmp	r0, r2
 801b3f4:	bfb8      	it	lt
 801b3f6:	460b      	movlt	r3, r1
 801b3f8:	eba3 030c 	sub.w	r3, r3, ip
 801b3fc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801b400:	a807      	add	r0, sp, #28
 801b402:	f7f7 fddc 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801b406:	b920      	cbnz	r0, 801b412 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801b408:	6823      	ldr	r3, [r4, #0]
 801b40a:	a907      	add	r1, sp, #28
 801b40c:	4620      	mov	r0, r4
 801b40e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b410:	4798      	blx	r3
 801b412:	3701      	adds	r7, #1
 801b414:	b2bf      	uxth	r7, r7
 801b416:	e7a9      	b.n	801b36c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801b418:	f8d9 0000 	ldr.w	r0, [r9]
 801b41c:	2101      	movs	r1, #1
 801b41e:	6803      	ldr	r3, [r0, #0]
 801b420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b424:	4798      	blx	r3
 801b426:	e773      	b.n	801b310 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801b428:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801b42c:	e7e8      	b.n	801b400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801b42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b430:	4798      	blx	r3
 801b432:	4b3f      	ldr	r3, [pc, #252]	@ (801b530 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801b434:	781b      	ldrb	r3, [r3, #0]
 801b436:	2b00      	cmp	r3, #0
 801b438:	f43f af2b 	beq.w	801b292 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b43c:	2300      	movs	r3, #0
 801b43e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801b442:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801b446:	882b      	ldrh	r3, [r5, #0]
 801b448:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801b44c:	42ab      	cmp	r3, r5
 801b44e:	f4bf af20 	bcs.w	801b292 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b452:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801b456:	2907      	cmp	r1, #7
 801b458:	d814      	bhi.n	801b484 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801b45a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801b45e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801b462:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801b466:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801b46a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801b46e:	1c4a      	adds	r2, r1, #1
 801b470:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801b474:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801b478:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801b47c:	f8a2 c002 	strh.w	ip, [r2, #2]
 801b480:	8097      	strh	r7, [r2, #4]
 801b482:	80d6      	strh	r6, [r2, #6]
 801b484:	3301      	adds	r3, #1
 801b486:	b29b      	uxth	r3, r3
 801b488:	e7e0      	b.n	801b44c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801b48a:	2b02      	cmp	r3, #2
 801b48c:	f040 8133 	bne.w	801b6f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801b490:	4b28      	ldr	r3, [pc, #160]	@ (801b534 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801b492:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801b496:	781b      	ldrb	r3, [r3, #0]
 801b498:	2b01      	cmp	r3, #1
 801b49a:	f000 8098 	beq.w	801b5ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b49e:	882a      	ldrh	r2, [r5, #0]
 801b4a0:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801b4a4:	3201      	adds	r2, #1
 801b4a6:	b292      	uxth	r2, r2
 801b4a8:	2900      	cmp	r1, #0
 801b4aa:	d0c2      	beq.n	801b432 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b4ac:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801b4b0:	4694      	mov	ip, r2
 801b4b2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801b4b6:	f04f 0900 	mov.w	r9, #0
 801b4ba:	441e      	add	r6, r3
 801b4bc:	b236      	sxth	r6, r6
 801b4be:	fa1f f38c 	uxth.w	r3, ip
 801b4c2:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801b4c6:	4299      	cmp	r1, r3
 801b4c8:	f240 80be 	bls.w	801b648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801b4cc:	4427      	add	r7, r4
 801b4ce:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801b4d2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801b4d6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801b4da:	4283      	cmp	r3, r0
 801b4dc:	f340 80a0 	ble.w	801b620 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801b4e0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801b4e4:	46e1      	mov	r9, ip
 801b4e6:	4406      	add	r6, r0
 801b4e8:	b236      	sxth	r6, r6
 801b4ea:	429e      	cmp	r6, r3
 801b4ec:	bfa8      	it	ge
 801b4ee:	461e      	movge	r6, r3
 801b4f0:	f10c 0c01 	add.w	ip, ip, #1
 801b4f4:	e7e3      	b.n	801b4be <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801b4f6:	d10a      	bne.n	801b50e <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801b4f8:	4562      	cmp	r2, ip
 801b4fa:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801b4fe:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801b502:	bfb8      	it	lt
 801b504:	4662      	movlt	r2, ip
 801b506:	4288      	cmp	r0, r1
 801b508:	bfb8      	it	lt
 801b50a:	461f      	movlt	r7, r3
 801b50c:	e086      	b.n	801b61c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801b50e:	428a      	cmp	r2, r1
 801b510:	bfb8      	it	lt
 801b512:	460a      	movlt	r2, r1
 801b514:	e082      	b.n	801b61c <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801b516:	bf00      	nop
 801b518:	240285f4 	.word	0x240285f4
 801b51c:	24028600 	.word	0x24028600
 801b520:	2400007c 	.word	0x2400007c
 801b524:	240285b4 	.word	0x240285b4
 801b528:	240285aa 	.word	0x240285aa
 801b52c:	240285a8 	.word	0x240285a8
 801b530:	240285b2 	.word	0x240285b2
 801b534:	240285ac 	.word	0x240285ac
 801b538:	19a1      	adds	r1, r4, r6
 801b53a:	ab07      	add	r3, sp, #28
 801b53c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801b540:	6849      	ldr	r1, [r1, #4]
 801b542:	c303      	stmia	r3!, {r0, r1}
 801b544:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b548:	a807      	add	r0, sp, #28
 801b54a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b54e:	2b13      	cmp	r3, #19
 801b550:	440b      	add	r3, r1
 801b552:	bfd8      	it	le
 801b554:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b558:	1a9b      	subs	r3, r3, r2
 801b55a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b55e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b562:	f7fe ffe7 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b566:	a807      	add	r0, sp, #28
 801b568:	f7f7 fd29 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801b56c:	bb78      	cbnz	r0, 801b5ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b56e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801b572:	4426      	add	r6, r4
 801b574:	f8d9 0000 	ldr.w	r0, [r9]
 801b578:	f1bc 0f14 	cmp.w	ip, #20
 801b57c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b580:	f8d0 e000 	ldr.w	lr, [r0]
 801b584:	bfa8      	it	ge
 801b586:	f04f 0c14 	movge.w	ip, #20
 801b58a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b58e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b592:	fa1f fc8c 	uxth.w	ip, ip
 801b596:	f8cd c000 	str.w	ip, [sp]
 801b59a:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801b59e:	47d8      	blx	fp
 801b5a0:	4683      	mov	fp, r0
 801b5a2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801b5a6:	a807      	add	r0, sp, #28
 801b5a8:	f7fe ffaa 	bl	801a500 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b5ac:	6823      	ldr	r3, [r4, #0]
 801b5ae:	4620      	mov	r0, r4
 801b5b0:	a907      	add	r1, sp, #28
 801b5b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b5b4:	4798      	blx	r3
 801b5b6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801b5ba:	eba0 000b 	sub.w	r0, r0, fp
 801b5be:	b200      	sxth	r0, r0
 801b5c0:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801b5c4:	b918      	cbnz	r0, 801b5ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801b5c6:	b2b9      	uxth	r1, r7
 801b5c8:	4650      	mov	r0, sl
 801b5ca:	f7ff fa7b 	bl	801aac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b5ce:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801b5d2:	f1bb 0f00 	cmp.w	fp, #0
 801b5d6:	f43f af2c 	beq.w	801b432 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b5da:	882b      	ldrh	r3, [r5, #0]
 801b5dc:	2700      	movs	r7, #0
 801b5de:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801b5e2:	3301      	adds	r3, #1
 801b5e4:	b29b      	uxth	r3, r3
 801b5e6:	b299      	uxth	r1, r3
 801b5e8:	00fe      	lsls	r6, r7, #3
 801b5ea:	458b      	cmp	fp, r1
 801b5ec:	d9a4      	bls.n	801b538 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801b5ee:	4426      	add	r6, r4
 801b5f0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801b5f4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801b5f8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801b5fc:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801b600:	4408      	add	r0, r1
 801b602:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801b606:	4461      	add	r1, ip
 801b608:	b200      	sxth	r0, r0
 801b60a:	b209      	sxth	r1, r1
 801b60c:	4288      	cmp	r0, r1
 801b60e:	f6bf af72 	bge.w	801b4f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801b612:	4584      	cmp	ip, r0
 801b614:	4662      	mov	r2, ip
 801b616:	461f      	mov	r7, r3
 801b618:	bfb8      	it	lt
 801b61a:	4602      	movlt	r2, r0
 801b61c:	3301      	adds	r3, #1
 801b61e:	e7e2      	b.n	801b5e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801b620:	d10e      	bne.n	801b640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801b622:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801b626:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801b62a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801b62e:	4473      	add	r3, lr
 801b630:	b21b      	sxth	r3, r3
 801b632:	429e      	cmp	r6, r3
 801b634:	bfa8      	it	ge
 801b636:	461e      	movge	r6, r3
 801b638:	4287      	cmp	r7, r0
 801b63a:	bfb8      	it	lt
 801b63c:	46e1      	movlt	r9, ip
 801b63e:	e757      	b.n	801b4f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b640:	4286      	cmp	r6, r0
 801b642:	bfa8      	it	ge
 801b644:	4606      	movge	r6, r0
 801b646:	e753      	b.n	801b4f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801b648:	eb0a 0007 	add.w	r0, sl, r7
 801b64c:	4427      	add	r7, r4
 801b64e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801b652:	f1bb 0f13 	cmp.w	fp, #19
 801b656:	bfdc      	itt	le
 801b658:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801b65c:	445e      	addle	r6, fp
 801b65e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b662:	bfd8      	it	le
 801b664:	b236      	sxthle	r6, r6
 801b666:	f7f7 fcaa 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801b66a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b66e:	2800      	cmp	r0, #0
 801b670:	f47f af1a 	bne.w	801b4a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801b674:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801b678:	fa1f fb8b 	uxth.w	fp, fp
 801b67c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801b680:	1ab6      	subs	r6, r6, r2
 801b682:	4829      	ldr	r0, [pc, #164]	@ (801b728 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801b684:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801b688:	2e14      	cmp	r6, #20
 801b68a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801b68e:	6800      	ldr	r0, [r0, #0]
 801b690:	bfa8      	it	ge
 801b692:	2614      	movge	r6, #20
 801b694:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b698:	f8ad 201e 	strh.w	r2, [sp, #30]
 801b69c:	b289      	uxth	r1, r1
 801b69e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b6a2:	b2b6      	uxth	r6, r6
 801b6a4:	f8d0 c000 	ldr.w	ip, [r0]
 801b6a8:	b292      	uxth	r2, r2
 801b6aa:	455e      	cmp	r6, fp
 801b6ac:	bf94      	ite	ls
 801b6ae:	9600      	strls	r6, [sp, #0]
 801b6b0:	f8cd b000 	strhi.w	fp, [sp]
 801b6b4:	b29b      	uxth	r3, r3
 801b6b6:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801b6ba:	47b0      	blx	r6
 801b6bc:	6823      	ldr	r3, [r4, #0]
 801b6be:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801b6c2:	a907      	add	r1, sp, #28
 801b6c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b6c6:	4620      	mov	r0, r4
 801b6c8:	4798      	blx	r3
 801b6ca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801b6ce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801b6d2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801b6d6:	1a5b      	subs	r3, r3, r1
 801b6d8:	440a      	add	r2, r1
 801b6da:	b21b      	sxth	r3, r3
 801b6dc:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801b6e0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	f47f aeda 	bne.w	801b49e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801b6ea:	fa1f f189 	uxth.w	r1, r9
 801b6ee:	4650      	mov	r0, sl
 801b6f0:	f7ff f9e8 	bl	801aac4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b6f4:	e6d3      	b.n	801b49e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801b6f6:	882e      	ldrh	r6, [r5, #0]
 801b6f8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b6fc:	42b3      	cmp	r3, r6
 801b6fe:	f67f ae98 	bls.w	801b432 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b702:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801b706:	ab07      	add	r3, sp, #28
 801b708:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b70c:	6851      	ldr	r1, [r2, #4]
 801b70e:	c303      	stmia	r3!, {r0, r1}
 801b710:	a807      	add	r0, sp, #28
 801b712:	f7f7 fc54 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801b716:	b920      	cbnz	r0, 801b722 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801b718:	6823      	ldr	r3, [r4, #0]
 801b71a:	a907      	add	r1, sp, #28
 801b71c:	4620      	mov	r0, r4
 801b71e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b720:	4798      	blx	r3
 801b722:	3601      	adds	r6, #1
 801b724:	b2b6      	uxth	r6, r6
 801b726:	e7e7      	b.n	801b6f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801b728:	240285b4 	.word	0x240285b4

0801b72c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b72c:	4b03      	ldr	r3, [pc, #12]	@ (801b73c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b72e:	2200      	movs	r2, #0
 801b730:	801a      	strh	r2, [r3, #0]
 801b732:	805a      	strh	r2, [r3, #2]
 801b734:	809a      	strh	r2, [r3, #4]
 801b736:	80da      	strh	r2, [r3, #6]
 801b738:	4770      	bx	lr
 801b73a:	bf00      	nop
 801b73c:	24028600 	.word	0x24028600

0801b740 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b744:	b09d      	sub	sp, #116	@ 0x74
 801b746:	4606      	mov	r6, r0
 801b748:	4614      	mov	r4, r2
 801b74a:	468a      	mov	sl, r1
 801b74c:	a803      	add	r0, sp, #12
 801b74e:	461d      	mov	r5, r3
 801b750:	f001 f9ad 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 801b754:	6833      	ldr	r3, [r6, #0]
 801b756:	4630      	mov	r0, r6
 801b758:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801b75c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b75e:	4798      	blx	r3
 801b760:	6833      	ldr	r3, [r6, #0]
 801b762:	4607      	mov	r7, r0
 801b764:	4630      	mov	r0, r6
 801b766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b768:	4798      	blx	r3
 801b76a:	462a      	mov	r2, r5
 801b76c:	2500      	movs	r5, #0
 801b76e:	4621      	mov	r1, r4
 801b770:	9000      	str	r0, [sp, #0]
 801b772:	463b      	mov	r3, r7
 801b774:	462c      	mov	r4, r5
 801b776:	46a9      	mov	r9, r5
 801b778:	46a8      	mov	r8, r5
 801b77a:	a803      	add	r0, sp, #12
 801b77c:	f001 f9f2 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b780:	2300      	movs	r3, #0
 801b782:	9302      	str	r3, [sp, #8]
 801b784:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801b788:	429c      	cmp	r4, r3
 801b78a:	d002      	beq.n	801b792 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b78c:	455c      	cmp	r4, fp
 801b78e:	bf18      	it	ne
 801b790:	4625      	movne	r5, r4
 801b792:	ab02      	add	r3, sp, #8
 801b794:	4632      	mov	r2, r6
 801b796:	4651      	mov	r1, sl
 801b798:	a803      	add	r0, sp, #12
 801b79a:	f001 fce9 	bl	801d170 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b79e:	4604      	mov	r4, r0
 801b7a0:	b108      	cbz	r0, 801b7a6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b7a2:	280a      	cmp	r0, #10
 801b7a4:	d10a      	bne.n	801b7bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b7a6:	45c1      	cmp	r9, r8
 801b7a8:	bf38      	it	cc
 801b7aa:	46c1      	movcc	r9, r8
 801b7ac:	f04f 0800 	mov.w	r8, #0
 801b7b0:	2c00      	cmp	r4, #0
 801b7b2:	d1e5      	bne.n	801b780 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b7b4:	4648      	mov	r0, r9
 801b7b6:	b01d      	add	sp, #116	@ 0x74
 801b7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7bc:	9a02      	ldr	r2, [sp, #8]
 801b7be:	2a00      	cmp	r2, #0
 801b7c0:	d0de      	beq.n	801b780 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b7c2:	7b57      	ldrb	r7, [r2, #13]
 801b7c4:	4629      	mov	r1, r5
 801b7c6:	6833      	ldr	r3, [r6, #0]
 801b7c8:	007f      	lsls	r7, r7, #1
 801b7ca:	8894      	ldrh	r4, [r2, #4]
 801b7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b7ce:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801b7d2:	7a97      	ldrb	r7, [r2, #10]
 801b7d4:	4307      	orrs	r7, r0
 801b7d6:	4630      	mov	r0, r6
 801b7d8:	4798      	blx	r3
 801b7da:	4438      	add	r0, r7
 801b7dc:	4480      	add	r8, r0
 801b7de:	fa1f f888 	uxth.w	r8, r8
 801b7e2:	e7e5      	b.n	801b7b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b7e4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b7e4:	b508      	push	{r3, lr}
 801b7e6:	6803      	ldr	r3, [r0, #0]
 801b7e8:	68db      	ldr	r3, [r3, #12]
 801b7ea:	4798      	blx	r3
 801b7ec:	b128      	cbz	r0, 801b7fa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b7ee:	7b43      	ldrb	r3, [r0, #13]
 801b7f0:	7a80      	ldrb	r0, [r0, #10]
 801b7f2:	005b      	lsls	r3, r3, #1
 801b7f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b7f8:	4318      	orrs	r0, r3
 801b7fa:	bd08      	pop	{r3, pc}

0801b7fc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b7fc:	b40e      	push	{r1, r2, r3}
 801b7fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b800:	b09e      	sub	sp, #120	@ 0x78
 801b802:	4605      	mov	r5, r0
 801b804:	ab23      	add	r3, sp, #140	@ 0x8c
 801b806:	a805      	add	r0, sp, #20
 801b808:	f853 4b04 	ldr.w	r4, [r3], #4
 801b80c:	9303      	str	r3, [sp, #12]
 801b80e:	f001 f94e 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 801b812:	682b      	ldr	r3, [r5, #0]
 801b814:	4628      	mov	r0, r5
 801b816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b818:	4798      	blx	r3
 801b81a:	682b      	ldr	r3, [r5, #0]
 801b81c:	4606      	mov	r6, r0
 801b81e:	4628      	mov	r0, r5
 801b820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b822:	4798      	blx	r3
 801b824:	4633      	mov	r3, r6
 801b826:	4621      	mov	r1, r4
 801b828:	ae1e      	add	r6, sp, #120	@ 0x78
 801b82a:	2400      	movs	r4, #0
 801b82c:	9000      	str	r0, [sp, #0]
 801b82e:	9a03      	ldr	r2, [sp, #12]
 801b830:	a805      	add	r0, sp, #20
 801b832:	f001 f997 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b836:	f846 4d68 	str.w	r4, [r6, #-104]!
 801b83a:	462a      	mov	r2, r5
 801b83c:	4633      	mov	r3, r6
 801b83e:	4621      	mov	r1, r4
 801b840:	a805      	add	r0, sp, #20
 801b842:	f001 fc95 	bl	801d170 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b846:	b300      	cbz	r0, 801b88a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801b848:	280a      	cmp	r0, #10
 801b84a:	d01a      	beq.n	801b882 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b84c:	9f04      	ldr	r7, [sp, #16]
 801b84e:	b1c7      	cbz	r7, 801b882 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b850:	7b78      	ldrb	r0, [r7, #13]
 801b852:	7a3b      	ldrb	r3, [r7, #8]
 801b854:	00c1      	lsls	r1, r0, #3
 801b856:	88ea      	ldrh	r2, [r5, #6]
 801b858:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b85c:	4319      	orrs	r1, r3
 801b85e:	0643      	lsls	r3, r0, #25
 801b860:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b864:	bf48      	it	mi
 801b866:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801b86a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801b86e:	bf48      	it	mi
 801b870:	b219      	sxthmi	r1, r3
 801b872:	79fb      	ldrb	r3, [r7, #7]
 801b874:	4303      	orrs	r3, r0
 801b876:	4413      	add	r3, r2
 801b878:	1a5b      	subs	r3, r3, r1
 801b87a:	b21b      	sxth	r3, r3
 801b87c:	429c      	cmp	r4, r3
 801b87e:	bfb8      	it	lt
 801b880:	461c      	movlt	r4, r3
 801b882:	4633      	mov	r3, r6
 801b884:	462a      	mov	r2, r5
 801b886:	2100      	movs	r1, #0
 801b888:	e7da      	b.n	801b840 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b88a:	b2a0      	uxth	r0, r4
 801b88c:	b01e      	add	sp, #120	@ 0x78
 801b88e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b892:	b003      	add	sp, #12
 801b894:	4770      	bx	lr

0801b896 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801b896:	7a43      	ldrb	r3, [r0, #9]
 801b898:	8880      	ldrh	r0, [r0, #4]
 801b89a:	4418      	add	r0, r3
 801b89c:	b280      	uxth	r0, r0
 801b89e:	4770      	bx	lr

0801b8a0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801b8a0:	6803      	ldr	r3, [r0, #0]
 801b8a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b8a4:	4718      	bx	r3

0801b8a6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b8a6:	b40e      	push	{r1, r2, r3}
 801b8a8:	b570      	push	{r4, r5, r6, lr}
 801b8aa:	b09d      	sub	sp, #116	@ 0x74
 801b8ac:	4604      	mov	r4, r0
 801b8ae:	ab21      	add	r3, sp, #132	@ 0x84
 801b8b0:	a803      	add	r0, sp, #12
 801b8b2:	f853 5b04 	ldr.w	r5, [r3], #4
 801b8b6:	9302      	str	r3, [sp, #8]
 801b8b8:	f001 f8f9 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 801b8bc:	6823      	ldr	r3, [r4, #0]
 801b8be:	4620      	mov	r0, r4
 801b8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b8c2:	4798      	blx	r3
 801b8c4:	6823      	ldr	r3, [r4, #0]
 801b8c6:	4606      	mov	r6, r0
 801b8c8:	4620      	mov	r0, r4
 801b8ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b8cc:	2401      	movs	r4, #1
 801b8ce:	4798      	blx	r3
 801b8d0:	4633      	mov	r3, r6
 801b8d2:	9000      	str	r0, [sp, #0]
 801b8d4:	4629      	mov	r1, r5
 801b8d6:	9a02      	ldr	r2, [sp, #8]
 801b8d8:	a803      	add	r0, sp, #12
 801b8da:	f001 f943 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b8de:	a803      	add	r0, sp, #12
 801b8e0:	f001 fd12 	bl	801d308 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b8e4:	b2a3      	uxth	r3, r4
 801b8e6:	b138      	cbz	r0, 801b8f8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801b8e8:	280a      	cmp	r0, #10
 801b8ea:	a803      	add	r0, sp, #12
 801b8ec:	bf04      	itt	eq
 801b8ee:	3301      	addeq	r3, #1
 801b8f0:	b21c      	sxtheq	r4, r3
 801b8f2:	f001 fd09 	bl	801d308 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b8f6:	e7f5      	b.n	801b8e4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	b01d      	add	sp, #116	@ 0x74
 801b8fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b900:	b003      	add	sp, #12
 801b902:	4770      	bx	lr

0801b904 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b904:	b40e      	push	{r1, r2, r3}
 801b906:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b908:	b09e      	sub	sp, #120	@ 0x78
 801b90a:	4604      	mov	r4, r0
 801b90c:	ab23      	add	r3, sp, #140	@ 0x8c
 801b90e:	a805      	add	r0, sp, #20
 801b910:	f853 5b04 	ldr.w	r5, [r3], #4
 801b914:	9303      	str	r3, [sp, #12]
 801b916:	f001 f8ca 	bl	801caae <_ZN8touchgfx12TextProviderC1Ev>
 801b91a:	6823      	ldr	r3, [r4, #0]
 801b91c:	4620      	mov	r0, r4
 801b91e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b920:	4798      	blx	r3
 801b922:	6823      	ldr	r3, [r4, #0]
 801b924:	4606      	mov	r6, r0
 801b926:	4620      	mov	r0, r4
 801b928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b92a:	4798      	blx	r3
 801b92c:	4633      	mov	r3, r6
 801b92e:	4629      	mov	r1, r5
 801b930:	9000      	str	r0, [sp, #0]
 801b932:	9a03      	ldr	r2, [sp, #12]
 801b934:	a805      	add	r0, sp, #20
 801b936:	f001 f915 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b93a:	ad1e      	add	r5, sp, #120	@ 0x78
 801b93c:	2100      	movs	r1, #0
 801b93e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801b942:	4622      	mov	r2, r4
 801b944:	a805      	add	r0, sp, #20
 801b946:	f845 1d68 	str.w	r1, [r5, #-104]!
 801b94a:	462b      	mov	r3, r5
 801b94c:	f001 fc10 	bl	801d170 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b950:	b1d8      	cbz	r0, 801b98a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801b952:	280a      	cmp	r0, #10
 801b954:	d012      	beq.n	801b97c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b956:	9804      	ldr	r0, [sp, #16]
 801b958:	b180      	cbz	r0, 801b97c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b95a:	7b47      	ldrb	r7, [r0, #13]
 801b95c:	88e2      	ldrh	r2, [r4, #6]
 801b95e:	00fb      	lsls	r3, r7, #3
 801b960:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801b964:	7a03      	ldrb	r3, [r0, #8]
 801b966:	430b      	orrs	r3, r1
 801b968:	0679      	lsls	r1, r7, #25
 801b96a:	bf44      	itt	mi
 801b96c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b970:	b21b      	sxthmi	r3, r3
 801b972:	1ad3      	subs	r3, r2, r3
 801b974:	b21b      	sxth	r3, r3
 801b976:	429e      	cmp	r6, r3
 801b978:	bfa8      	it	ge
 801b97a:	461e      	movge	r6, r3
 801b97c:	462b      	mov	r3, r5
 801b97e:	4622      	mov	r2, r4
 801b980:	2100      	movs	r1, #0
 801b982:	a805      	add	r0, sp, #20
 801b984:	f001 fbf4 	bl	801d170 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b988:	e7e2      	b.n	801b950 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801b98a:	4630      	mov	r0, r6
 801b98c:	b01e      	add	sp, #120	@ 0x78
 801b98e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b992:	b003      	add	sp, #12
 801b994:	4770      	bx	lr

0801b996 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b996:	b513      	push	{r0, r1, r4, lr}
 801b998:	6803      	ldr	r3, [r0, #0]
 801b99a:	2400      	movs	r4, #0
 801b99c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b9a0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b9a4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b9a8:	4669      	mov	r1, sp
 801b9aa:	691b      	ldr	r3, [r3, #16]
 801b9ac:	9400      	str	r4, [sp, #0]
 801b9ae:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b9b2:	4798      	blx	r3
 801b9b4:	b002      	add	sp, #8
 801b9b6:	bd10      	pop	{r4, pc}

0801b9b8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b9b8:	b538      	push	{r3, r4, r5, lr}
 801b9ba:	680b      	ldr	r3, [r1, #0]
 801b9bc:	460c      	mov	r4, r1
 801b9be:	4605      	mov	r5, r0
 801b9c0:	68db      	ldr	r3, [r3, #12]
 801b9c2:	4798      	blx	r3
 801b9c4:	6823      	ldr	r3, [r4, #0]
 801b9c6:	4620      	mov	r0, r4
 801b9c8:	4629      	mov	r1, r5
 801b9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9cc:	4798      	blx	r3
 801b9ce:	4628      	mov	r0, r5
 801b9d0:	bd38      	pop	{r3, r4, r5, pc}

0801b9d2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b9d2:	b410      	push	{r4}
 801b9d4:	880a      	ldrh	r2, [r1, #0]
 801b9d6:	8884      	ldrh	r4, [r0, #4]
 801b9d8:	4422      	add	r2, r4
 801b9da:	800a      	strh	r2, [r1, #0]
 801b9dc:	884a      	ldrh	r2, [r1, #2]
 801b9de:	88c4      	ldrh	r4, [r0, #6]
 801b9e0:	4422      	add	r2, r4
 801b9e2:	804a      	strh	r2, [r1, #2]
 801b9e4:	6940      	ldr	r0, [r0, #20]
 801b9e6:	b120      	cbz	r0, 801b9f2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b9e8:	6803      	ldr	r3, [r0, #0]
 801b9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9f0:	4718      	bx	r3
 801b9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9f6:	4770      	bx	lr

0801b9f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b9f8:	b570      	push	{r4, r5, r6, lr}
 801b9fa:	8882      	ldrh	r2, [r0, #4]
 801b9fc:	460c      	mov	r4, r1
 801b9fe:	880b      	ldrh	r3, [r1, #0]
 801ba00:	4605      	mov	r5, r0
 801ba02:	4413      	add	r3, r2
 801ba04:	800b      	strh	r3, [r1, #0]
 801ba06:	884b      	ldrh	r3, [r1, #2]
 801ba08:	88c2      	ldrh	r2, [r0, #6]
 801ba0a:	4413      	add	r3, r2
 801ba0c:	804b      	strh	r3, [r1, #2]
 801ba0e:	1d01      	adds	r1, r0, #4
 801ba10:	4620      	mov	r0, r4
 801ba12:	f7f7 fa91 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801ba16:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	dd0b      	ble.n	801ba36 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba1e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	dd07      	ble.n	801ba36 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba26:	6968      	ldr	r0, [r5, #20]
 801ba28:	b128      	cbz	r0, 801ba36 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba2a:	6803      	ldr	r3, [r0, #0]
 801ba2c:	4621      	mov	r1, r4
 801ba2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba34:	4718      	bx	r3
 801ba36:	bd70      	pop	{r4, r5, r6, pc}

0801ba38 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ba38:	b570      	push	{r4, r5, r6, lr}
 801ba3a:	8882      	ldrh	r2, [r0, #4]
 801ba3c:	460c      	mov	r4, r1
 801ba3e:	880b      	ldrh	r3, [r1, #0]
 801ba40:	4605      	mov	r5, r0
 801ba42:	4413      	add	r3, r2
 801ba44:	800b      	strh	r3, [r1, #0]
 801ba46:	884b      	ldrh	r3, [r1, #2]
 801ba48:	88c2      	ldrh	r2, [r0, #6]
 801ba4a:	4413      	add	r3, r2
 801ba4c:	804b      	strh	r3, [r1, #2]
 801ba4e:	1d01      	adds	r1, r0, #4
 801ba50:	4620      	mov	r0, r4
 801ba52:	f7f7 fa71 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801ba56:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	dd19      	ble.n	801ba92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ba5e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	dd15      	ble.n	801ba92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ba66:	6968      	ldr	r0, [r5, #20]
 801ba68:	b128      	cbz	r0, 801ba76 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ba6a:	6803      	ldr	r3, [r0, #0]
 801ba6c:	4621      	mov	r1, r4
 801ba6e:	691b      	ldr	r3, [r3, #16]
 801ba70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba74:	4718      	bx	r3
 801ba76:	4b07      	ldr	r3, [pc, #28]	@ (801ba94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	3304      	adds	r3, #4
 801ba7c:	429d      	cmp	r5, r3
 801ba7e:	d108      	bne.n	801ba92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ba80:	f7fe fec6 	bl	801a810 <_ZN8touchgfx11Application11getInstanceEv>
 801ba84:	6803      	ldr	r3, [r0, #0]
 801ba86:	6821      	ldr	r1, [r4, #0]
 801ba88:	6862      	ldr	r2, [r4, #4]
 801ba8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba90:	4718      	bx	r3
 801ba92:	bd70      	pop	{r4, r5, r6, pc}
 801ba94:	240285f8 	.word	0x240285f8

0801ba98 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ba98:	b570      	push	{r4, r5, r6, lr}
 801ba9a:	4604      	mov	r4, r0
 801ba9c:	4616      	mov	r6, r2
 801ba9e:	460d      	mov	r5, r1
 801baa0:	b901      	cbnz	r1, 801baa4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801baa2:	b192      	cbz	r2, 801baca <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801baa4:	6823      	ldr	r3, [r4, #0]
 801baa6:	4620      	mov	r0, r4
 801baa8:	699b      	ldr	r3, [r3, #24]
 801baaa:	4798      	blx	r3
 801baac:	88e2      	ldrh	r2, [r4, #6]
 801baae:	88a1      	ldrh	r1, [r4, #4]
 801bab0:	4620      	mov	r0, r4
 801bab2:	4432      	add	r2, r6
 801bab4:	4429      	add	r1, r5
 801bab6:	b212      	sxth	r2, r2
 801bab8:	b209      	sxth	r1, r1
 801baba:	f7e8 fb3d 	bl	8004138 <_ZN8touchgfx8Drawable5setXYEss>
 801babe:	6823      	ldr	r3, [r4, #0]
 801bac0:	4620      	mov	r0, r4
 801bac2:	699b      	ldr	r3, [r3, #24]
 801bac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bac8:	4718      	bx	r3
 801baca:	bd70      	pop	{r4, r5, r6, pc}

0801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bacc:	b510      	push	{r4, lr}
 801bace:	2300      	movs	r3, #0
 801bad0:	4604      	mov	r4, r0
 801bad2:	4608      	mov	r0, r1
 801bad4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bad8:	8023      	strh	r3, [r4, #0]
 801bada:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bade:	8063      	strh	r3, [r4, #2]
 801bae0:	6803      	ldr	r3, [r0, #0]
 801bae2:	80a1      	strh	r1, [r4, #4]
 801bae4:	4621      	mov	r1, r4
 801bae6:	80e2      	strh	r2, [r4, #6]
 801bae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801baea:	4798      	blx	r3
 801baec:	4620      	mov	r0, r4
 801baee:	bd10      	pop	{r4, pc}

0801baf0 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801baf0:	4770      	bx	lr

0801baf2 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801baf2:	b510      	push	{r4, lr}
 801baf4:	4604      	mov	r4, r0
 801baf6:	211c      	movs	r1, #28
 801baf8:	f00d fa4e 	bl	8028f98 <_ZdlPvj>
 801bafc:	4620      	mov	r0, r4
 801bafe:	bd10      	pop	{r4, pc}

0801bb00 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801bb00:	4a04      	ldr	r2, [pc, #16]	@ (801bb14 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801bb02:	6002      	str	r2, [r0, #0]
 801bb04:	2200      	movs	r2, #0
 801bb06:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801bb0a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801bb0e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801bb12:	4770      	bx	lr
 801bb14:	0802e508 	.word	0x0802e508

0801bb18 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb1c:	4604      	mov	r4, r0
 801bb1e:	b087      	sub	sp, #28
 801bb20:	4696      	mov	lr, r2
 801bb22:	6880      	ldr	r0, [r0, #8]
 801bb24:	8b22      	ldrh	r2, [r4, #24]
 801bb26:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801bb2a:	9105      	str	r1, [sp, #20]
 801bb2c:	1c51      	adds	r1, r2, #1
 801bb2e:	8321      	strh	r1, [r4, #24]
 801bb30:	2101      	movs	r1, #1
 801bb32:	5481      	strb	r1, [r0, r2]
 801bb34:	4689      	mov	r9, r1
 801bb36:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb3a:	8b60      	ldrh	r0, [r4, #26]
 801bb3c:	ee06 2a90 	vmov	s13, r2
 801bb40:	68e2      	ldr	r2, [r4, #12]
 801bb42:	1845      	adds	r5, r0, r1
 801bb44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bb48:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801bb4c:	8365      	strh	r5, [r4, #26]
 801bb4e:	edc2 6a00 	vstr	s13, [r2]
 801bb52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801bb56:	8b60      	ldrh	r0, [r4, #26]
 801bb58:	ee07 2a10 	vmov	s14, r2
 801bb5c:	68e2      	ldr	r2, [r4, #12]
 801bb5e:	1845      	adds	r5, r0, r1
 801bb60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bb64:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801bb68:	8365      	strh	r5, [r4, #26]
 801bb6a:	1d18      	adds	r0, r3, #4
 801bb6c:	460d      	mov	r5, r1
 801bb6e:	ed82 7a00 	vstr	s14, [r2]
 801bb72:	f8be 2000 	ldrh.w	r2, [lr]
 801bb76:	9203      	str	r2, [sp, #12]
 801bb78:	2200      	movs	r2, #0
 801bb7a:	4613      	mov	r3, r2
 801bb7c:	4694      	mov	ip, r2
 801bb7e:	9201      	str	r2, [sp, #4]
 801bb80:	9202      	str	r2, [sp, #8]
 801bb82:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801bb86:	9e05      	ldr	r6, [sp, #20]
 801bb88:	f108 0701 	add.w	r7, r8, #1
 801bb8c:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801bb90:	428e      	cmp	r6, r1
 801bb92:	b2bf      	uxth	r7, r7
 801bb94:	eb0a 0b08 	add.w	fp, sl, r8
 801bb98:	f340 80b6 	ble.w	801bd08 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 801bb9c:	9b03      	ldr	r3, [sp, #12]
 801bb9e:	f9b0 c000 	ldrsh.w	ip, [r0]
 801bba2:	fa43 fb05 	asr.w	fp, r3, r5
 801bba6:	f00b 0b01 	and.w	fp, fp, #1
 801bbaa:	fa5f f38b 	uxtb.w	r3, fp
 801bbae:	9304      	str	r3, [sp, #16]
 801bbb0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bbb4:	f1bb 0f00 	cmp.w	fp, #0
 801bbb8:	d057      	beq.n	801bc6a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801bbba:	ee07 ca90 	vmov	s15, ip
 801bbbe:	8327      	strh	r7, [r4, #24]
 801bbc0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801bbc4:	ee07 3a90 	vmov	s15, r3
 801bbc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbcc:	f1b9 0f00 	cmp.w	r9, #0
 801bbd0:	d028      	beq.n	801bc24 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801bbd2:	f04f 0602 	mov.w	r6, #2
 801bbd6:	f80a 6008 	strb.w	r6, [sl, r8]
 801bbda:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bbde:	68e7      	ldr	r7, [r4, #12]
 801bbe0:	f108 0901 	add.w	r9, r8, #1
 801bbe4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bbe8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bbec:	edc7 5a00 	vstr	s11, [r7]
 801bbf0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bbf4:	68e7      	ldr	r7, [r4, #12]
 801bbf6:	f108 0901 	add.w	r9, r8, #1
 801bbfa:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bbfe:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bc02:	edc7 7a00 	vstr	s15, [r7]
 801bc06:	3501      	adds	r5, #1
 801bc08:	2d10      	cmp	r5, #16
 801bc0a:	d106      	bne.n	801bc1a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801bc0c:	9d02      	ldr	r5, [sp, #8]
 801bc0e:	3501      	adds	r5, #1
 801bc10:	9502      	str	r5, [sp, #8]
 801bc12:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801bc16:	9503      	str	r5, [sp, #12]
 801bc18:	2500      	movs	r5, #0
 801bc1a:	3101      	adds	r1, #1
 801bc1c:	3004      	adds	r0, #4
 801bc1e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801bc22:	e7ae      	b.n	801bb82 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801bc24:	f04f 0605 	mov.w	r6, #5
 801bc28:	ed9d 5a01 	vldr	s10, [sp, #4]
 801bc2c:	f80a 6008 	strb.w	r6, [sl, r8]
 801bc30:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bc34:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bc38:	68e7      	ldr	r7, [r4, #12]
 801bc3a:	f108 0901 	add.w	r9, r8, #1
 801bc3e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bc42:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bc46:	ed87 5a00 	vstr	s10, [r7]
 801bc4a:	ee05 2a10 	vmov	s10, r2
 801bc4e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bc52:	68e7      	ldr	r7, [r4, #12]
 801bc54:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801bc58:	f108 0901 	add.w	r9, r8, #1
 801bc5c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bc60:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bc64:	ed87 5a00 	vstr	s10, [r7]
 801bc68:	e7b7      	b.n	801bbda <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 801bc6a:	f1b9 0f00 	cmp.w	r9, #0
 801bc6e:	d147      	bne.n	801bd00 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 801bc70:	f04f 0605 	mov.w	r6, #5
 801bc74:	eddd 7a01 	vldr	s15, [sp, #4]
 801bc78:	8327      	strh	r7, [r4, #24]
 801bc7a:	f80a 6008 	strb.w	r6, [sl, r8]
 801bc7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc82:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bc86:	68e7      	ldr	r7, [r4, #12]
 801bc88:	f108 0901 	add.w	r9, r8, #1
 801bc8c:	9e01      	ldr	r6, [sp, #4]
 801bc8e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bc92:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bc96:	4466      	add	r6, ip
 801bc98:	edc7 7a00 	vstr	s15, [r7]
 801bc9c:	ee07 2a90 	vmov	s15, r2
 801bca0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bca4:	441a      	add	r2, r3
 801bca6:	68e7      	ldr	r7, [r4, #12]
 801bca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bcac:	f108 0901 	add.w	r9, r8, #1
 801bcb0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bcb4:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bcb8:	edc7 7a00 	vstr	s15, [r7]
 801bcbc:	ee07 6a90 	vmov	s15, r6
 801bcc0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bcc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bcc8:	68e7      	ldr	r7, [r4, #12]
 801bcca:	f108 0901 	add.w	r9, r8, #1
 801bcce:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bcd2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bcd6:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bcda:	edc7 7a00 	vstr	s15, [r7]
 801bcde:	ee07 2a90 	vmov	s15, r2
 801bce2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801bce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bcea:	68e7      	ldr	r7, [r4, #12]
 801bcec:	f108 0901 	add.w	r9, r8, #1
 801bcf0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801bcf4:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bcf8:	f8a4 901a 	strh.w	r9, [r4, #26]
 801bcfc:	edc7 7a00 	vstr	s15, [r7]
 801bd00:	461a      	mov	r2, r3
 801bd02:	f8cd c004 	str.w	ip, [sp, #4]
 801bd06:	e77e      	b.n	801bc06 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801bd08:	f1b9 0f00 	cmp.w	r9, #0
 801bd0c:	d028      	beq.n	801bd60 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801bd0e:	ee07 ca90 	vmov	s15, ip
 801bd12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd16:	eef4 6a67 	vcmp.f32	s13, s15
 801bd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd1e:	d108      	bne.n	801bd32 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801bd20:	ee07 3a90 	vmov	s15, r3
 801bd24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd28:	eeb4 7a67 	vcmp.f32	s14, s15
 801bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd30:	d016      	beq.n	801bd60 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801bd32:	2302      	movs	r3, #2
 801bd34:	8327      	strh	r7, [r4, #24]
 801bd36:	f88b 3000 	strb.w	r3, [fp]
 801bd3a:	8b62      	ldrh	r2, [r4, #26]
 801bd3c:	68e3      	ldr	r3, [r4, #12]
 801bd3e:	1c51      	adds	r1, r2, #1
 801bd40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801bd44:	8361      	strh	r1, [r4, #26]
 801bd46:	edc3 6a00 	vstr	s13, [r3]
 801bd4a:	8b62      	ldrh	r2, [r4, #26]
 801bd4c:	68e3      	ldr	r3, [r4, #12]
 801bd4e:	1c51      	adds	r1, r2, #1
 801bd50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801bd54:	8361      	strh	r1, [r4, #26]
 801bd56:	ed83 7a00 	vstr	s14, [r3]
 801bd5a:	b007      	add	sp, #28
 801bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd60:	2305      	movs	r3, #5
 801bd62:	eddd 7a01 	vldr	s15, [sp, #4]
 801bd66:	8327      	strh	r7, [r4, #24]
 801bd68:	f88b 3000 	strb.w	r3, [fp]
 801bd6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd70:	8b61      	ldrh	r1, [r4, #26]
 801bd72:	68e3      	ldr	r3, [r4, #12]
 801bd74:	1c4d      	adds	r5, r1, #1
 801bd76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801bd7a:	8365      	strh	r5, [r4, #26]
 801bd7c:	edc3 7a00 	vstr	s15, [r3]
 801bd80:	ee07 2a90 	vmov	s15, r2
 801bd84:	8b61      	ldrh	r1, [r4, #26]
 801bd86:	68e3      	ldr	r3, [r4, #12]
 801bd88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd8c:	1c4d      	adds	r5, r1, #1
 801bd8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801bd92:	8365      	strh	r5, [r4, #26]
 801bd94:	edc3 7a00 	vstr	s15, [r3]
 801bd98:	e7cf      	b.n	801bd3a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

0801bd9c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801bd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bda0:	4604      	mov	r4, r0
 801bda2:	b08e      	sub	sp, #56	@ 0x38
 801bda4:	4699      	mov	r9, r3
 801bda6:	4688      	mov	r8, r1
 801bda8:	4615      	mov	r5, r2
 801bdaa:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801bdac:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 801bdb0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801bdb2:	f7e7 fee5 	bl	8003b80 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801bdb6:	6060      	str	r0, [r4, #4]
 801bdb8:	f1b9 0f00 	cmp.w	r9, #0
 801bdbc:	f000 80e8 	beq.w	801bf90 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801bdc0:	2800      	cmp	r0, #0
 801bdc2:	f000 80e5 	beq.w	801bf90 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801bdc6:	a805      	add	r0, sp, #20
 801bdc8:	f000 f8f9 	bl	801bfbe <_ZN8touchgfx9Matrix3x3C1Ev>
 801bdcc:	6833      	ldr	r3, [r6, #0]
 801bdce:	4630      	mov	r0, r6
 801bdd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bdd2:	4798      	blx	r3
 801bdd4:	a805      	add	r0, sp, #20
 801bdd6:	eef0 0a40 	vmov.f32	s1, s0
 801bdda:	f000 f8f4 	bl	801bfc6 <_ZN8touchgfx9Matrix3x35scaleEff>
 801bdde:	6860      	ldr	r0, [r4, #4]
 801bde0:	f1ba 0f03 	cmp.w	sl, #3
 801bde4:	d83b      	bhi.n	801be5e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801bde6:	e8df f00a 	tbb	[pc, sl]
 801bdea:	1002      	.short	0x1002
 801bdec:	9f71      	.short	0x9f71
 801bdee:	6803      	ldr	r3, [r0, #0]
 801bdf0:	462a      	mov	r2, r5
 801bdf2:	4641      	mov	r1, r8
 801bdf4:	689b      	ldr	r3, [r3, #8]
 801bdf6:	4798      	blx	r3
 801bdf8:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801bdfc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801be00:	ee07 7a90 	vmov	s15, r7
 801be04:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801be08:	e026      	b.n	801be58 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801be0a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801be0e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801be12:	8869      	ldrh	r1, [r5, #2]
 801be14:	1a9b      	subs	r3, r3, r2
 801be16:	f8ad 2010 	strh.w	r2, [sp, #16]
 801be1a:	aa03      	add	r2, sp, #12
 801be1c:	1a5b      	subs	r3, r3, r1
 801be1e:	4641      	mov	r1, r8
 801be20:	f8ad 300c 	strh.w	r3, [sp, #12]
 801be24:	882b      	ldrh	r3, [r5, #0]
 801be26:	f8ad 300e 	strh.w	r3, [sp, #14]
 801be2a:	88ab      	ldrh	r3, [r5, #4]
 801be2c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801be30:	6803      	ldr	r3, [r0, #0]
 801be32:	689b      	ldr	r3, [r3, #8]
 801be34:	4798      	blx	r3
 801be36:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 801bf98 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801be3a:	a805      	add	r0, sp, #20
 801be3c:	f000 f8e8 	bl	801c010 <_ZN8touchgfx9Matrix3x36rotateEf>
 801be40:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801be44:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801be46:	ee07 7a90 	vmov	s15, r7
 801be4a:	1a9b      	subs	r3, r3, r2
 801be4c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801be50:	ee00 3a10 	vmov	s0, r3
 801be54:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801be58:	a805      	add	r0, sp, #20
 801be5a:	f000 f927 	bl	801c0ac <_ZN8touchgfx9Matrix3x39translateEff>
 801be5e:	6860      	ldr	r0, [r4, #4]
 801be60:	a905      	add	r1, sp, #20
 801be62:	2500      	movs	r5, #0
 801be64:	f109 0602 	add.w	r6, r9, #2
 801be68:	6803      	ldr	r3, [r0, #0]
 801be6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801be6c:	4798      	blx	r3
 801be6e:	6860      	ldr	r0, [r4, #4]
 801be70:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801be72:	6803      	ldr	r3, [r0, #0]
 801be74:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801be78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be7a:	4798      	blx	r3
 801be7c:	6860      	ldr	r0, [r4, #4]
 801be7e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 801be82:	6803      	ldr	r3, [r0, #0]
 801be84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be86:	4798      	blx	r3
 801be88:	6860      	ldr	r0, [r4, #4]
 801be8a:	2101      	movs	r1, #1
 801be8c:	6803      	ldr	r3, [r0, #0]
 801be8e:	68db      	ldr	r3, [r3, #12]
 801be90:	4798      	blx	r3
 801be92:	f8b9 7000 	ldrh.w	r7, [r9]
 801be96:	f104 0310 	add.w	r3, r4, #16
 801be9a:	61a5      	str	r5, [r4, #24]
 801be9c:	f104 0208 	add.w	r2, r4, #8
 801bea0:	f104 0114 	add.w	r1, r4, #20
 801bea4:	f104 000c 	add.w	r0, r4, #12
 801bea8:	f7ec fdd4 	bl	8008a54 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801beac:	42af      	cmp	r7, r5
 801beae:	dd60      	ble.n	801bf72 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 801beb0:	8831      	ldrh	r1, [r6, #0]
 801beb2:	1cb2      	adds	r2, r6, #2
 801beb4:	4620      	mov	r0, r4
 801beb6:	3501      	adds	r5, #1
 801beb8:	f101 030f 	add.w	r3, r1, #15
 801bebc:	f3c3 1307 	ubfx	r3, r3, #4, #8
 801bec0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bec4:	f7ff fe28 	bl	801bb18 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801bec8:	4606      	mov	r6, r0
 801beca:	e7ef      	b.n	801beac <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 801becc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801bed0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801bed4:	8829      	ldrh	r1, [r5, #0]
 801bed6:	1a9b      	subs	r3, r3, r2
 801bed8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bedc:	aa03      	add	r2, sp, #12
 801bede:	1a5b      	subs	r3, r3, r1
 801bee0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bee4:	886d      	ldrh	r5, [r5, #2]
 801bee6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801beea:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801beee:	f8ad 1012 	strh.w	r1, [sp, #18]
 801bef2:	1a5b      	subs	r3, r3, r1
 801bef4:	4641      	mov	r1, r8
 801bef6:	1b5b      	subs	r3, r3, r5
 801bef8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801befc:	6803      	ldr	r3, [r0, #0]
 801befe:	689b      	ldr	r3, [r3, #8]
 801bf00:	4798      	blx	r3
 801bf02:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801bf9c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801bf06:	a805      	add	r0, sp, #20
 801bf08:	f000 f882 	bl	801c010 <_ZN8touchgfx9Matrix3x36rotateEf>
 801bf0c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801bf10:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bf12:	1a9b      	subs	r3, r3, r2
 801bf14:	ee00 3a90 	vmov	s1, r3
 801bf18:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801bf1c:	1bdb      	subs	r3, r3, r7
 801bf1e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bf22:	ee00 3a10 	vmov	s0, r3
 801bf26:	e795      	b.n	801be54 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801bf28:	886b      	ldrh	r3, [r5, #2]
 801bf2a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801bf2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bf32:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801bf36:	8829      	ldrh	r1, [r5, #0]
 801bf38:	1a9b      	subs	r3, r3, r2
 801bf3a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bf3e:	aa03      	add	r2, sp, #12
 801bf40:	1a5b      	subs	r3, r3, r1
 801bf42:	4641      	mov	r1, r8
 801bf44:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bf48:	88eb      	ldrh	r3, [r5, #6]
 801bf4a:	f8ad 3010 	strh.w	r3, [sp, #16]
 801bf4e:	6803      	ldr	r3, [r0, #0]
 801bf50:	689b      	ldr	r3, [r3, #8]
 801bf52:	4798      	blx	r3
 801bf54:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 801bfa0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 801bf58:	a805      	add	r0, sp, #20
 801bf5a:	f000 f859 	bl	801c010 <_ZN8touchgfx9Matrix3x36rotateEf>
 801bf5e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801bf62:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801bf66:	1bdb      	subs	r3, r3, r7
 801bf68:	ee00 3a90 	vmov	s1, r3
 801bf6c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801bf70:	e748      	b.n	801be04 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801bf72:	6860      	ldr	r0, [r4, #4]
 801bf74:	2100      	movs	r1, #0
 801bf76:	8b22      	ldrh	r2, [r4, #24]
 801bf78:	6803      	ldr	r3, [r0, #0]
 801bf7a:	9101      	str	r1, [sp, #4]
 801bf7c:	8b61      	ldrh	r1, [r4, #26]
 801bf7e:	9100      	str	r1, [sp, #0]
 801bf80:	6a1d      	ldr	r5, [r3, #32]
 801bf82:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801bf86:	47a8      	blx	r5
 801bf88:	6860      	ldr	r0, [r4, #4]
 801bf8a:	6803      	ldr	r3, [r0, #0]
 801bf8c:	69db      	ldr	r3, [r3, #28]
 801bf8e:	4798      	blx	r3
 801bf90:	b00e      	add	sp, #56	@ 0x38
 801bf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf96:	bf00      	nop
 801bf98:	42b40000 	.word	0x42b40000
 801bf9c:	43340000 	.word	0x43340000
 801bfa0:	43870000 	.word	0x43870000

0801bfa4 <_ZN8touchgfx9Matrix3x35resetEv>:
 801bfa4:	2300      	movs	r3, #0
 801bfa6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801bfaa:	6043      	str	r3, [r0, #4]
 801bfac:	6002      	str	r2, [r0, #0]
 801bfae:	6083      	str	r3, [r0, #8]
 801bfb0:	60c3      	str	r3, [r0, #12]
 801bfb2:	6102      	str	r2, [r0, #16]
 801bfb4:	6143      	str	r3, [r0, #20]
 801bfb6:	6183      	str	r3, [r0, #24]
 801bfb8:	61c3      	str	r3, [r0, #28]
 801bfba:	6202      	str	r2, [r0, #32]
 801bfbc:	4770      	bx	lr

0801bfbe <_ZN8touchgfx9Matrix3x3C1Ev>:
 801bfbe:	b508      	push	{r3, lr}
 801bfc0:	f7ff fff0 	bl	801bfa4 <_ZN8touchgfx9Matrix3x35resetEv>
 801bfc4:	bd08      	pop	{r3, pc}

0801bfc6 <_ZN8touchgfx9Matrix3x35scaleEff>:
 801bfc6:	edd0 7a00 	vldr	s15, [r0]
 801bfca:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bfce:	edc0 7a00 	vstr	s15, [r0]
 801bfd2:	edd0 7a01 	vldr	s15, [r0, #4]
 801bfd6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bfda:	edc0 7a01 	vstr	s15, [r0, #4]
 801bfde:	edd0 7a02 	vldr	s15, [r0, #8]
 801bfe2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bfe6:	edd0 7a03 	vldr	s15, [r0, #12]
 801bfea:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801bfee:	ed80 0a02 	vstr	s0, [r0, #8]
 801bff2:	edc0 7a03 	vstr	s15, [r0, #12]
 801bff6:	edd0 7a04 	vldr	s15, [r0, #16]
 801bffa:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801bffe:	edc0 7a04 	vstr	s15, [r0, #16]
 801c002:	edd0 7a05 	vldr	s15, [r0, #20]
 801c006:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c00a:	edc0 0a05 	vstr	s1, [r0, #20]
 801c00e:	4770      	bx	lr

0801c010 <_ZN8touchgfx9Matrix3x36rotateEf>:
 801c010:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801c0a4 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801c014:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c018:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801c0a8 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 801c01c:	b510      	push	{r4, lr}
 801c01e:	ed2d 8b02 	vpush	{d8}
 801c022:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801c026:	4604      	mov	r4, r0
 801c028:	eeb0 0a68 	vmov.f32	s0, s17
 801c02c:	f00d f8ec 	bl	8029208 <cosf>
 801c030:	eeb0 8a40 	vmov.f32	s16, s0
 801c034:	eeb0 0a68 	vmov.f32	s0, s17
 801c038:	f00d f822 	bl	8029080 <sinf>
 801c03c:	edd4 6a03 	vldr	s13, [r4, #12]
 801c040:	edd4 4a00 	vldr	s9, [r4]
 801c044:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801c048:	ed94 7a04 	vldr	s14, [r4, #16]
 801c04c:	ed94 5a01 	vldr	s10, [r4, #4]
 801c050:	ee66 6a88 	vmul.f32	s13, s13, s16
 801c054:	edd4 5a02 	vldr	s11, [r4, #8]
 801c058:	eee8 7a24 	vfma.f32	s15, s16, s9
 801c05c:	eee0 6a24 	vfma.f32	s13, s0, s9
 801c060:	edc4 7a00 	vstr	s15, [r4]
 801c064:	ee60 7a47 	vnmul.f32	s15, s0, s14
 801c068:	ee27 7a08 	vmul.f32	s14, s14, s16
 801c06c:	edc4 6a03 	vstr	s13, [r4, #12]
 801c070:	eee8 7a05 	vfma.f32	s15, s16, s10
 801c074:	eea0 7a05 	vfma.f32	s14, s0, s10
 801c078:	edc4 7a01 	vstr	s15, [r4, #4]
 801c07c:	edd4 7a05 	vldr	s15, [r4, #20]
 801c080:	ed84 7a04 	vstr	s14, [r4, #16]
 801c084:	ee20 6a67 	vnmul.f32	s12, s0, s15
 801c088:	ee67 7a88 	vmul.f32	s15, s15, s16
 801c08c:	eea8 6a25 	vfma.f32	s12, s16, s11
 801c090:	eee0 7a25 	vfma.f32	s15, s0, s11
 801c094:	ecbd 8b02 	vpop	{d8}
 801c098:	ed84 6a02 	vstr	s12, [r4, #8]
 801c09c:	edc4 7a05 	vstr	s15, [r4, #20]
 801c0a0:	bd10      	pop	{r4, pc}
 801c0a2:	bf00      	nop
 801c0a4:	40490fdb 	.word	0x40490fdb
 801c0a8:	43340000 	.word	0x43340000

0801c0ac <_ZN8touchgfx9Matrix3x39translateEff>:
 801c0ac:	ed90 6a06 	vldr	s12, [r0, #24]
 801c0b0:	edd0 7a00 	vldr	s15, [r0]
 801c0b4:	edd0 6a07 	vldr	s13, [r0, #28]
 801c0b8:	eee6 7a00 	vfma.f32	s15, s12, s0
 801c0bc:	ed90 7a08 	vldr	s14, [r0, #32]
 801c0c0:	edc0 7a00 	vstr	s15, [r0]
 801c0c4:	edd0 7a01 	vldr	s15, [r0, #4]
 801c0c8:	eee6 7a80 	vfma.f32	s15, s13, s0
 801c0cc:	edc0 7a01 	vstr	s15, [r0, #4]
 801c0d0:	edd0 7a02 	vldr	s15, [r0, #8]
 801c0d4:	eee7 7a00 	vfma.f32	s15, s14, s0
 801c0d8:	edc0 7a02 	vstr	s15, [r0, #8]
 801c0dc:	edd0 7a03 	vldr	s15, [r0, #12]
 801c0e0:	eee6 7a20 	vfma.f32	s15, s12, s1
 801c0e4:	edc0 7a03 	vstr	s15, [r0, #12]
 801c0e8:	edd0 7a04 	vldr	s15, [r0, #16]
 801c0ec:	eee6 7aa0 	vfma.f32	s15, s13, s1
 801c0f0:	edc0 7a04 	vstr	s15, [r0, #16]
 801c0f4:	edd0 7a05 	vldr	s15, [r0, #20]
 801c0f8:	eee7 7a20 	vfma.f32	s15, s14, s1
 801c0fc:	edc0 7a05 	vstr	s15, [r0, #20]
 801c100:	4770      	bx	lr

0801c102 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801c102:	edd0 6a01 	vldr	s13, [r0, #4]
 801c106:	b084      	sub	sp, #16
 801c108:	edd0 7a04 	vldr	s15, [r0, #16]
 801c10c:	ed90 7a03 	vldr	s14, [r0, #12]
 801c110:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801c114:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801c118:	edd0 6a00 	vldr	s13, [r0]
 801c11c:	eee7 7a00 	vfma.f32	s15, s14, s0
 801c120:	ed90 7a05 	vldr	s14, [r0, #20]
 801c124:	eee6 0a80 	vfma.f32	s1, s13, s0
 801c128:	ed90 0a02 	vldr	s0, [r0, #8]
 801c12c:	ee30 0a80 	vadd.f32	s0, s1, s0
 801c130:	ee77 0a87 	vadd.f32	s1, s15, s14
 801c134:	b004      	add	sp, #16
 801c136:	4770      	bx	lr

0801c138 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801c138:	b530      	push	{r4, r5, lr}
 801c13a:	8083      	strh	r3, [r0, #4]
 801c13c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c140:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c144:	80c3      	strh	r3, [r0, #6]
 801c146:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c14a:	6141      	str	r1, [r0, #20]
 801c14c:	7203      	strb	r3, [r0, #8]
 801c14e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c152:	8302      	strh	r2, [r0, #24]
 801c154:	7243      	strb	r3, [r0, #9]
 801c156:	7a83      	ldrb	r3, [r0, #10]
 801c158:	f365 0306 	bfi	r3, r5, #0, #7
 801c15c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801c160:	f365 13c7 	bfi	r3, r5, #7, #1
 801c164:	7283      	strb	r3, [r0, #10]
 801c166:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801c16a:	72c3      	strb	r3, [r0, #11]
 801c16c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801c170:	7303      	strb	r3, [r0, #12]
 801c172:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c176:	81c3      	strh	r3, [r0, #14]
 801c178:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c17c:	8203      	strh	r3, [r0, #16]
 801c17e:	4b01      	ldr	r3, [pc, #4]	@ (801c184 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801c180:	6003      	str	r3, [r0, #0]
 801c182:	bd30      	pop	{r4, r5, pc}
 801c184:	0802e51c 	.word	0x0802e51c

0801c188 <_ZNK8touchgfx9ConstFont4findEt>:
 801c188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c18a:	6944      	ldr	r4, [r0, #20]
 801c18c:	b3bc      	cbz	r4, 801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c18e:	88a3      	ldrh	r3, [r4, #4]
 801c190:	8b02      	ldrh	r2, [r0, #24]
 801c192:	1acb      	subs	r3, r1, r3
 801c194:	f102 32ff 	add.w	r2, r2, #4294967295
 801c198:	d431      	bmi.n	801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c19a:	4293      	cmp	r3, r2
 801c19c:	dd0c      	ble.n	801c1b8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c19e:	230e      	movs	r3, #14
 801c1a0:	fb03 4302 	mla	r3, r3, r2, r4
 801c1a4:	889b      	ldrh	r3, [r3, #4]
 801c1a6:	1a5b      	subs	r3, r3, r1
 801c1a8:	1ad3      	subs	r3, r2, r3
 801c1aa:	429a      	cmp	r2, r3
 801c1ac:	db27      	blt.n	801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	bfbc      	itt	lt
 801c1b2:	2302      	movlt	r3, #2
 801c1b4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c1b8:	2500      	movs	r5, #0
 801c1ba:	260e      	movs	r6, #14
 801c1bc:	4295      	cmp	r5, r2
 801c1be:	dc1e      	bgt.n	801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c1c0:	fb06 4003 	mla	r0, r6, r3, r4
 801c1c4:	8887      	ldrh	r7, [r0, #4]
 801c1c6:	42b9      	cmp	r1, r7
 801c1c8:	d01a      	beq.n	801c200 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c1ca:	d20d      	bcs.n	801c1e8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c1cc:	1e5a      	subs	r2, r3, #1
 801c1ce:	4295      	cmp	r5, r2
 801c1d0:	dc15      	bgt.n	801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c1d2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c1d6:	1a5b      	subs	r3, r3, r1
 801c1d8:	1ad3      	subs	r3, r2, r3
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	db0f      	blt.n	801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c1de:	429d      	cmp	r5, r3
 801c1e0:	ddec      	ble.n	801c1bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c1e2:	1953      	adds	r3, r2, r5
 801c1e4:	105b      	asrs	r3, r3, #1
 801c1e6:	e7e9      	b.n	801c1bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c1e8:	1c5d      	adds	r5, r3, #1
 801c1ea:	42aa      	cmp	r2, r5
 801c1ec:	db07      	blt.n	801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c1ee:	8a43      	ldrh	r3, [r0, #18]
 801c1f0:	1acb      	subs	r3, r1, r3
 801c1f2:	442b      	add	r3, r5
 801c1f4:	429d      	cmp	r5, r3
 801c1f6:	dc02      	bgt.n	801c1fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	dadf      	bge.n	801c1bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c1fc:	e7f1      	b.n	801c1e2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c1fe:	2000      	movs	r0, #0
 801c200:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c202 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c204:	4604      	mov	r4, r0
 801c206:	4617      	mov	r7, r2
 801c208:	461e      	mov	r6, r3
 801c20a:	b911      	cbnz	r1, 801c212 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c20c:	2500      	movs	r5, #0
 801c20e:	4628      	mov	r0, r5
 801c210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c212:	290a      	cmp	r1, #10
 801c214:	d0fa      	beq.n	801c20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c216:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801c21a:	4291      	cmp	r1, r2
 801c21c:	d0f6      	beq.n	801c20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c21e:	f242 020b 	movw	r2, #8203	@ 0x200b
 801c222:	4291      	cmp	r1, r2
 801c224:	d0f2      	beq.n	801c20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c226:	f7ff ffaf 	bl	801c188 <_ZNK8touchgfx9ConstFont4findEt>
 801c22a:	4605      	mov	r5, r0
 801c22c:	b950      	cbnz	r0, 801c244 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c22e:	6823      	ldr	r3, [r4, #0]
 801c230:	4620      	mov	r0, r4
 801c232:	691b      	ldr	r3, [r3, #16]
 801c234:	4798      	blx	r3
 801c236:	4601      	mov	r1, r0
 801c238:	4620      	mov	r0, r4
 801c23a:	f7ff ffa5 	bl	801c188 <_ZNK8touchgfx9ConstFont4findEt>
 801c23e:	4605      	mov	r5, r0
 801c240:	2800      	cmp	r0, #0
 801c242:	d0e3      	beq.n	801c20c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c244:	6823      	ldr	r3, [r4, #0]
 801c246:	4629      	mov	r1, r5
 801c248:	4620      	mov	r0, r4
 801c24a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c24c:	4798      	blx	r3
 801c24e:	6038      	str	r0, [r7, #0]
 801c250:	6823      	ldr	r3, [r4, #0]
 801c252:	4620      	mov	r0, r4
 801c254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c256:	4798      	blx	r3
 801c258:	7030      	strb	r0, [r6, #0]
 801c25a:	e7d8      	b.n	801c20e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c25c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801c25c:	b538      	push	{r3, r4, r5, lr}
 801c25e:	4605      	mov	r5, r0
 801c260:	f002 f9f6 	bl	801e650 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c264:	4604      	mov	r4, r0
 801c266:	4628      	mov	r0, r5
 801c268:	f002 f936 	bl	801e4d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c26c:	2800      	cmp	r0, #0
 801c26e:	bf14      	ite	ne
 801c270:	2002      	movne	r0, #2
 801c272:	2000      	moveq	r0, #0
 801c274:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c278:	b280      	uxth	r0, r0
 801c27a:	bd38      	pop	{r3, r4, r5, pc}

0801c27c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801c27c:	b538      	push	{r3, r4, r5, lr}
 801c27e:	4605      	mov	r5, r0
 801c280:	f002 f9e6 	bl	801e650 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c284:	4604      	mov	r4, r0
 801c286:	4628      	mov	r0, r5
 801c288:	f002 f926 	bl	801e4d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c28c:	2800      	cmp	r0, #0
 801c28e:	bf14      	ite	ne
 801c290:	2002      	movne	r0, #2
 801c292:	2000      	moveq	r0, #0
 801c294:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c298:	f040 0001 	orr.w	r0, r0, #1
 801c29c:	b280      	uxth	r0, r0
 801c29e:	bd38      	pop	{r3, r4, r5, pc}

0801c2a0 <_ZN8touchgfx4clzuEm>:
 801c2a0:	4603      	mov	r3, r0
 801c2a2:	b1c8      	cbz	r0, 801c2d8 <_ZN8touchgfx4clzuEm+0x38>
 801c2a4:	0c02      	lsrs	r2, r0, #16
 801c2a6:	0412      	lsls	r2, r2, #16
 801c2a8:	b9a2      	cbnz	r2, 801c2d4 <_ZN8touchgfx4clzuEm+0x34>
 801c2aa:	0403      	lsls	r3, r0, #16
 801c2ac:	2010      	movs	r0, #16
 801c2ae:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801c2b2:	bf04      	itt	eq
 801c2b4:	021b      	lsleq	r3, r3, #8
 801c2b6:	3008      	addeq	r0, #8
 801c2b8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801c2bc:	bf04      	itt	eq
 801c2be:	011b      	lsleq	r3, r3, #4
 801c2c0:	3004      	addeq	r0, #4
 801c2c2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801c2c6:	bf04      	itt	eq
 801c2c8:	009b      	lsleq	r3, r3, #2
 801c2ca:	3002      	addeq	r0, #2
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	db04      	blt.n	801c2da <_ZN8touchgfx4clzuEm+0x3a>
 801c2d0:	3001      	adds	r0, #1
 801c2d2:	4770      	bx	lr
 801c2d4:	2000      	movs	r0, #0
 801c2d6:	e7ea      	b.n	801c2ae <_ZN8touchgfx4clzuEm+0xe>
 801c2d8:	2020      	movs	r0, #32
 801c2da:	4770      	bx	lr

0801c2dc <_ZN8touchgfx7muldivuEmmmRm>:
 801c2dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c2e0:	460f      	mov	r7, r1
 801c2e2:	4615      	mov	r5, r2
 801c2e4:	461e      	mov	r6, r3
 801c2e6:	4601      	mov	r1, r0
 801c2e8:	b100      	cbz	r0, 801c2ec <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801c2ea:	b927      	cbnz	r7, 801c2f6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801c2ec:	2000      	movs	r0, #0
 801c2ee:	6030      	str	r0, [r6, #0]
 801c2f0:	b002      	add	sp, #8
 801c2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2f6:	f7ff ffd3 	bl	801c2a0 <_ZN8touchgfx4clzuEm>
 801c2fa:	b980      	cbnz	r0, 801c31e <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801c2fc:	4638      	mov	r0, r7
 801c2fe:	f7ff ffcf 	bl	801c2a0 <_ZN8touchgfx4clzuEm>
 801c302:	2800      	cmp	r0, #0
 801c304:	dd05      	ble.n	801c312 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801c306:	4633      	mov	r3, r6
 801c308:	462a      	mov	r2, r5
 801c30a:	4638      	mov	r0, r7
 801c30c:	f7ff ffe6 	bl	801c2dc <_ZN8touchgfx7muldivuEmmmRm>
 801c310:	e7ee      	b.n	801c2f0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c312:	f04f 33ff 	mov.w	r3, #4294967295
 801c316:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c31a:	6033      	str	r3, [r6, #0]
 801c31c:	e7e8      	b.n	801c2f0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c31e:	fa37 f800 	lsrs.w	r8, r7, r0
 801c322:	fb07 f301 	mul.w	r3, r7, r1
 801c326:	d105      	bne.n	801c334 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801c328:	fbb3 f0f5 	udiv	r0, r3, r5
 801c32c:	fb05 3510 	mls	r5, r5, r0, r3
 801c330:	6035      	str	r5, [r6, #0]
 801c332:	e7dd      	b.n	801c2f0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801c334:	2301      	movs	r3, #1
 801c336:	fa01 fa00 	lsl.w	sl, r1, r0
 801c33a:	462a      	mov	r2, r5
 801c33c:	fa03 f000 	lsl.w	r0, r3, r0
 801c340:	4633      	mov	r3, r6
 801c342:	fbba f9f5 	udiv	r9, sl, r5
 801c346:	3801      	subs	r0, #1
 801c348:	fb08 f409 	mul.w	r4, r8, r9
 801c34c:	4038      	ands	r0, r7
 801c34e:	f7ff ffc5 	bl	801c2dc <_ZN8touchgfx7muldivuEmmmRm>
 801c352:	462a      	mov	r2, r5
 801c354:	4607      	mov	r7, r0
 801c356:	ab01      	add	r3, sp, #4
 801c358:	fb05 a119 	mls	r1, r5, r9, sl
 801c35c:	4640      	mov	r0, r8
 801c35e:	f7ff ffbd 	bl	801c2dc <_ZN8touchgfx7muldivuEmmmRm>
 801c362:	9b01      	ldr	r3, [sp, #4]
 801c364:	6832      	ldr	r2, [r6, #0]
 801c366:	441a      	add	r2, r3
 801c368:	fbb2 f3f5 	udiv	r3, r2, r5
 801c36c:	441c      	add	r4, r3
 801c36e:	fb05 2513 	mls	r5, r5, r3, r2
 801c372:	443c      	add	r4, r7
 801c374:	4420      	add	r0, r4
 801c376:	e7db      	b.n	801c330 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801c378 <_ZN8touchgfx6muldivElllRl>:
 801c378:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c37a:	2800      	cmp	r0, #0
 801c37c:	461e      	mov	r6, r3
 801c37e:	bfba      	itte	lt
 801c380:	4240      	neglt	r0, r0
 801c382:	f04f 34ff 	movlt.w	r4, #4294967295
 801c386:	2401      	movge	r4, #1
 801c388:	2900      	cmp	r1, #0
 801c38a:	bfbc      	itt	lt
 801c38c:	4249      	neglt	r1, r1
 801c38e:	4264      	neglt	r4, r4
 801c390:	2a00      	cmp	r2, #0
 801c392:	bfb6      	itet	lt
 801c394:	4265      	neglt	r5, r4
 801c396:	4625      	movge	r5, r4
 801c398:	4252      	neglt	r2, r2
 801c39a:	4288      	cmp	r0, r1
 801c39c:	bfc2      	ittt	gt
 801c39e:	4603      	movgt	r3, r0
 801c3a0:	4608      	movgt	r0, r1
 801c3a2:	4619      	movgt	r1, r3
 801c3a4:	ab01      	add	r3, sp, #4
 801c3a6:	f7ff ff99 	bl	801c2dc <_ZN8touchgfx7muldivuEmmmRm>
 801c3aa:	9b01      	ldr	r3, [sp, #4]
 801c3ac:	4368      	muls	r0, r5
 801c3ae:	435c      	muls	r4, r3
 801c3b0:	6034      	str	r4, [r6, #0]
 801c3b2:	b002      	add	sp, #8
 801c3b4:	bd70      	pop	{r4, r5, r6, pc}

0801c3b6 <_ZN8touchgfx6muldivElll>:
 801c3b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c3b8:	4606      	mov	r6, r0
 801c3ba:	ab01      	add	r3, sp, #4
 801c3bc:	460d      	mov	r5, r1
 801c3be:	4614      	mov	r4, r2
 801c3c0:	f7ff ffda 	bl	801c378 <_ZN8touchgfx6muldivElllRl>
 801c3c4:	2e00      	cmp	r6, #0
 801c3c6:	db20      	blt.n	801c40a <_ZN8touchgfx6muldivElll+0x54>
 801c3c8:	bf14      	ite	ne
 801c3ca:	2301      	movne	r3, #1
 801c3cc:	2300      	moveq	r3, #0
 801c3ce:	2d00      	cmp	r5, #0
 801c3d0:	db1e      	blt.n	801c410 <_ZN8touchgfx6muldivElll+0x5a>
 801c3d2:	bf14      	ite	ne
 801c3d4:	2201      	movne	r2, #1
 801c3d6:	2200      	moveq	r2, #0
 801c3d8:	2c00      	cmp	r4, #0
 801c3da:	fb03 f202 	mul.w	r2, r3, r2
 801c3de:	db1a      	blt.n	801c416 <_ZN8touchgfx6muldivElll+0x60>
 801c3e0:	bf14      	ite	ne
 801c3e2:	2301      	movne	r3, #1
 801c3e4:	2300      	moveq	r3, #0
 801c3e6:	4353      	muls	r3, r2
 801c3e8:	2b01      	cmp	r3, #1
 801c3ea:	d117      	bne.n	801c41c <_ZN8touchgfx6muldivElll+0x66>
 801c3ec:	2c00      	cmp	r4, #0
 801c3ee:	9b01      	ldr	r3, [sp, #4]
 801c3f0:	bfb8      	it	lt
 801c3f2:	4264      	neglt	r4, r4
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	f104 0401 	add.w	r4, r4, #1
 801c3fa:	bfb8      	it	lt
 801c3fc:	425b      	neglt	r3, r3
 801c3fe:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c402:	db00      	blt.n	801c406 <_ZN8touchgfx6muldivElll+0x50>
 801c404:	3001      	adds	r0, #1
 801c406:	b002      	add	sp, #8
 801c408:	bd70      	pop	{r4, r5, r6, pc}
 801c40a:	f04f 33ff 	mov.w	r3, #4294967295
 801c40e:	e7de      	b.n	801c3ce <_ZN8touchgfx6muldivElll+0x18>
 801c410:	f04f 32ff 	mov.w	r2, #4294967295
 801c414:	e7e0      	b.n	801c3d8 <_ZN8touchgfx6muldivElll+0x22>
 801c416:	f04f 33ff 	mov.w	r3, #4294967295
 801c41a:	e7e4      	b.n	801c3e6 <_ZN8touchgfx6muldivElll+0x30>
 801c41c:	3301      	adds	r3, #1
 801c41e:	d1f2      	bne.n	801c406 <_ZN8touchgfx6muldivElll+0x50>
 801c420:	9b01      	ldr	r3, [sp, #4]
 801c422:	2c00      	cmp	r4, #0
 801c424:	bfb8      	it	lt
 801c426:	4264      	neglt	r4, r4
 801c428:	2b00      	cmp	r3, #0
 801c42a:	bfb8      	it	lt
 801c42c:	425b      	neglt	r3, r3
 801c42e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c432:	bfc8      	it	gt
 801c434:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801c438:	e7e5      	b.n	801c406 <_ZN8touchgfx6muldivElll+0x50>

0801c43a <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c43a:	2002      	movs	r0, #2
 801c43c:	4770      	bx	lr

0801c43e <_ZN8touchgfx6ScreenD1Ev>:
 801c43e:	4770      	bx	lr

0801c440 <_ZN8touchgfx12GestureEventD1Ev>:
 801c440:	4770      	bx	lr

0801c442 <_ZN8touchgfx12GestureEventD0Ev>:
 801c442:	b510      	push	{r4, lr}
 801c444:	4604      	mov	r4, r0
 801c446:	210c      	movs	r1, #12
 801c448:	f00c fda6 	bl	8028f98 <_ZdlPvj>
 801c44c:	4620      	mov	r0, r4
 801c44e:	bd10      	pop	{r4, pc}

0801c450 <_ZN8touchgfx6ScreenD0Ev>:
 801c450:	b510      	push	{r4, lr}
 801c452:	4604      	mov	r4, r0
 801c454:	213c      	movs	r1, #60	@ 0x3c
 801c456:	f00c fd9f 	bl	8028f98 <_ZdlPvj>
 801c45a:	4620      	mov	r0, r4
 801c45c:	bd10      	pop	{r4, pc}
	...

0801c460 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c460:	b530      	push	{r4, r5, lr}
 801c462:	460d      	mov	r5, r1
 801c464:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c466:	b087      	sub	sp, #28
 801c468:	4604      	mov	r4, r0
 801c46a:	b301      	cbz	r1, 801c4ae <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c46c:	a801      	add	r0, sp, #4
 801c46e:	f7ff fb2d 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c472:	892a      	ldrh	r2, [r5, #8]
 801c474:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c478:	7928      	ldrb	r0, [r5, #4]
 801c47a:	1ad2      	subs	r2, r2, r3
 801c47c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801c47e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c482:	441a      	add	r2, r3
 801c484:	896b      	ldrh	r3, [r5, #10]
 801c486:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c48a:	f88d 0010 	strb.w	r0, [sp, #16]
 801c48e:	1b5b      	subs	r3, r3, r5
 801c490:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801c492:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c494:	442b      	add	r3, r5
 801c496:	4d07      	ldr	r5, [pc, #28]	@ (801c4b4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c498:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c49c:	a903      	add	r1, sp, #12
 801c49e:	9503      	str	r5, [sp, #12]
 801c4a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c4a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c4a8:	6803      	ldr	r3, [r0, #0]
 801c4aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c4ac:	4798      	blx	r3
 801c4ae:	b007      	add	sp, #28
 801c4b0:	bd30      	pop	{r4, r5, pc}
 801c4b2:	bf00      	nop
 801c4b4:	0802e584 	.word	0x0802e584

0801c4b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c4be:	b08a      	sub	sp, #40	@ 0x28
 801c4c0:	4604      	mov	r4, r0
 801c4c2:	460d      	mov	r5, r1
 801c4c4:	b113      	cbz	r3, 801c4cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c4c6:	790b      	ldrb	r3, [r1, #4]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d044      	beq.n	801c556 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c4cc:	f104 0804 	add.w	r8, r4, #4
 801c4d0:	a803      	add	r0, sp, #12
 801c4d2:	4641      	mov	r1, r8
 801c4d4:	f7ff fafa 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c4d8:	792b      	ldrb	r3, [r5, #4]
 801c4da:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c4de:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c4e2:	b983      	cbnz	r3, 801c506 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c4e4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801c4e8:	892a      	ldrh	r2, [r5, #8]
 801c4ea:	88e9      	ldrh	r1, [r5, #6]
 801c4ec:	4640      	mov	r0, r8
 801c4ee:	1b92      	subs	r2, r2, r6
 801c4f0:	9301      	str	r3, [sp, #4]
 801c4f2:	1bc9      	subs	r1, r1, r7
 801c4f4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801c4f8:	b212      	sxth	r2, r2
 801c4fa:	9300      	str	r3, [sp, #0]
 801c4fc:	b209      	sxth	r1, r1
 801c4fe:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801c502:	f7f6 fc37 	bl	8012d74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c506:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c508:	b329      	cbz	r1, 801c556 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c50a:	a805      	add	r0, sp, #20
 801c50c:	f7ff fade 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c510:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c514:	792b      	ldrb	r3, [r5, #4]
 801c516:	a907      	add	r1, sp, #28
 801c518:	1abf      	subs	r7, r7, r2
 801c51a:	88ea      	ldrh	r2, [r5, #6]
 801c51c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801c51e:	4417      	add	r7, r2
 801c520:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801c522:	f88d 3020 	strb.w	r3, [sp, #32]
 801c526:	4417      	add	r7, r2
 801c528:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c52c:	1ab6      	subs	r6, r6, r2
 801c52e:	892a      	ldrh	r2, [r5, #8]
 801c530:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801c534:	4416      	add	r6, r2
 801c536:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801c538:	4416      	add	r6, r2
 801c53a:	4a08      	ldr	r2, [pc, #32]	@ (801c55c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c53c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801c540:	2600      	movs	r6, #0
 801c542:	9207      	str	r2, [sp, #28]
 801c544:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801c548:	6803      	ldr	r3, [r0, #0]
 801c54a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c54c:	4798      	blx	r3
 801c54e:	792b      	ldrb	r3, [r5, #4]
 801c550:	b10b      	cbz	r3, 801c556 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c552:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801c556:	b00a      	add	sp, #40	@ 0x28
 801c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c55c:	0802dc7c 	.word	0x0802dc7c

0801c560 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c564:	460c      	mov	r4, r1
 801c566:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801c568:	b088      	sub	sp, #32
 801c56a:	4605      	mov	r5, r0
 801c56c:	2900      	cmp	r1, #0
 801c56e:	d06d      	beq.n	801c64c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c570:	4668      	mov	r0, sp
 801c572:	f7ff faab 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c576:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801c578:	88e3      	ldrh	r3, [r4, #6]
 801c57a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c57e:	440b      	add	r3, r1
 801c580:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c584:	b21b      	sxth	r3, r3
 801c586:	4543      	cmp	r3, r8
 801c588:	db31      	blt.n	801c5ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c58a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c58e:	44c4      	add	ip, r8
 801c590:	fa0f fc8c 	sxth.w	ip, ip
 801c594:	4563      	cmp	r3, ip
 801c596:	da2a      	bge.n	801c5ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c598:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801c59a:	8926      	ldrh	r6, [r4, #8]
 801c59c:	4416      	add	r6, r2
 801c59e:	b236      	sxth	r6, r6
 801c5a0:	42be      	cmp	r6, r7
 801c5a2:	db24      	blt.n	801c5ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c5a4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c5a8:	4438      	add	r0, r7
 801c5aa:	b200      	sxth	r0, r0
 801c5ac:	4286      	cmp	r6, r0
 801c5ae:	da1e      	bge.n	801c5ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c5b0:	8963      	ldrh	r3, [r4, #10]
 801c5b2:	4419      	add	r1, r3
 801c5b4:	b209      	sxth	r1, r1
 801c5b6:	4541      	cmp	r1, r8
 801c5b8:	db08      	blt.n	801c5cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c5ba:	4561      	cmp	r1, ip
 801c5bc:	da06      	bge.n	801c5cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c5be:	89a3      	ldrh	r3, [r4, #12]
 801c5c0:	441a      	add	r2, r3
 801c5c2:	b212      	sxth	r2, r2
 801c5c4:	42ba      	cmp	r2, r7
 801c5c6:	db01      	blt.n	801c5cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c5c8:	4282      	cmp	r2, r0
 801c5ca:	db10      	blt.n	801c5ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c5cc:	4b21      	ldr	r3, [pc, #132]	@ (801c654 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c5ce:	a904      	add	r1, sp, #16
 801c5d0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c5d2:	9304      	str	r3, [sp, #16]
 801c5d4:	2302      	movs	r3, #2
 801c5d6:	f88d 3014 	strb.w	r3, [sp, #20]
 801c5da:	2300      	movs	r3, #0
 801c5dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c5e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c5e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c5e8:	6803      	ldr	r3, [r0, #0]
 801c5ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c5ec:	4798      	blx	r3
 801c5ee:	1d29      	adds	r1, r5, #4
 801c5f0:	a802      	add	r0, sp, #8
 801c5f2:	f7ff fa6b 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c5fa:	88e0      	ldrh	r0, [r4, #6]
 801c5fc:	eba3 0808 	sub.w	r8, r3, r8
 801c600:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c604:	7921      	ldrb	r1, [r4, #4]
 801c606:	fa1f f888 	uxth.w	r8, r8
 801c60a:	1bdf      	subs	r7, r3, r7
 801c60c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801c610:	b2bb      	uxth	r3, r7
 801c612:	4440      	add	r0, r8
 801c614:	8922      	ldrh	r2, [r4, #8]
 801c616:	8967      	ldrh	r7, [r4, #10]
 801c618:	4460      	add	r0, ip
 801c61a:	89a4      	ldrh	r4, [r4, #12]
 801c61c:	441a      	add	r2, r3
 801c61e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801c620:	44b8      	add	r8, r7
 801c622:	4423      	add	r3, r4
 801c624:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c628:	4432      	add	r2, r6
 801c62a:	44e0      	add	r8, ip
 801c62c:	4433      	add	r3, r6
 801c62e:	4c0a      	ldr	r4, [pc, #40]	@ (801c658 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c630:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801c632:	f88d 1014 	strb.w	r1, [sp, #20]
 801c636:	a904      	add	r1, sp, #16
 801c638:	9404      	str	r4, [sp, #16]
 801c63a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c63e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c642:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c646:	6803      	ldr	r3, [r0, #0]
 801c648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c64a:	4798      	blx	r3
 801c64c:	b008      	add	sp, #32
 801c64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c652:	bf00      	nop
 801c654:	0802dc7c 	.word	0x0802dc7c
 801c658:	0802dc90 	.word	0x0802dc90

0801c65c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c65c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c65e:	4604      	mov	r4, r0
 801c660:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c664:	3201      	adds	r2, #1
 801c666:	d112      	bne.n	801c68e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c668:	2500      	movs	r5, #0
 801c66a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c66e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c672:	6803      	ldr	r3, [r0, #0]
 801c674:	9500      	str	r5, [sp, #0]
 801c676:	466d      	mov	r5, sp
 801c678:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c67c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c680:	4629      	mov	r1, r5
 801c682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c684:	4798      	blx	r3
 801c686:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c68a:	e884 0003 	stmia.w	r4, {r0, r1}
 801c68e:	4620      	mov	r0, r4
 801c690:	b003      	add	sp, #12
 801c692:	bd30      	pop	{r4, r5, pc}

0801c694 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c694:	b513      	push	{r0, r1, r4, lr}
 801c696:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c69a:	4604      	mov	r4, r0
 801c69c:	3301      	adds	r3, #1
 801c69e:	d109      	bne.n	801c6b4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c6a0:	4601      	mov	r1, r0
 801c6a2:	4668      	mov	r0, sp
 801c6a4:	f7ff fa12 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6a8:	f8bd 3000 	ldrh.w	r3, [sp]
 801c6ac:	8423      	strh	r3, [r4, #32]
 801c6ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c6b2:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c6b4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c6b8:	b002      	add	sp, #8
 801c6ba:	bd10      	pop	{r4, pc}

0801c6bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c6bc:	b513      	push	{r0, r1, r4, lr}
 801c6be:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801c6c2:	4604      	mov	r4, r0
 801c6c4:	3301      	adds	r3, #1
 801c6c6:	d109      	bne.n	801c6dc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c6c8:	4601      	mov	r1, r0
 801c6ca:	4668      	mov	r0, sp
 801c6cc:	f7ff f9fe 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6d0:	f8bd 3000 	ldrh.w	r3, [sp]
 801c6d4:	8423      	strh	r3, [r4, #32]
 801c6d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c6da:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c6dc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801c6e0:	b002      	add	sp, #8
 801c6e2:	bd10      	pop	{r4, pc}

0801c6e4 <_ZN8touchgfx6ScreenC1Ev>:
 801c6e4:	b570      	push	{r4, r5, r6, lr}
 801c6e6:	4b17      	ldr	r3, [pc, #92]	@ (801c744 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c6e8:	4605      	mov	r5, r0
 801c6ea:	4a17      	ldr	r2, [pc, #92]	@ (801c748 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c6ec:	2101      	movs	r1, #1
 801c6ee:	f845 3b04 	str.w	r3, [r5], #4
 801c6f2:	2300      	movs	r3, #0
 801c6f4:	6042      	str	r2, [r0, #4]
 801c6f6:	4604      	mov	r4, r0
 801c6f8:	8103      	strh	r3, [r0, #8]
 801c6fa:	8143      	strh	r3, [r0, #10]
 801c6fc:	8183      	strh	r3, [r0, #12]
 801c6fe:	81c3      	strh	r3, [r0, #14]
 801c700:	8203      	strh	r3, [r0, #16]
 801c702:	8243      	strh	r3, [r0, #18]
 801c704:	8283      	strh	r3, [r0, #20]
 801c706:	82c3      	strh	r3, [r0, #22]
 801c708:	6203      	str	r3, [r0, #32]
 801c70a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801c70c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801c70e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801c712:	6343      	str	r3, [r0, #52]	@ 0x34
 801c714:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801c718:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801c71c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c720:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801c724:	4b09      	ldr	r3, [pc, #36]	@ (801c74c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c726:	4628      	mov	r0, r5
 801c728:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c72c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801c72e:	4a08      	ldr	r2, [pc, #32]	@ (801c750 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c730:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c734:	4798      	blx	r3
 801c736:	6863      	ldr	r3, [r4, #4]
 801c738:	4628      	mov	r0, r5
 801c73a:	4631      	mov	r1, r6
 801c73c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c73e:	4798      	blx	r3
 801c740:	4620      	mov	r0, r4
 801c742:	bd70      	pop	{r4, r5, r6, pc}
 801c744:	0802e598 	.word	0x0802e598
 801c748:	0802dbec 	.word	0x0802dbec
 801c74c:	240285aa 	.word	0x240285aa
 801c750:	240285a8 	.word	0x240285a8

0801c754 <_ZN8touchgfx6Screen4drawEv>:
 801c754:	4b09      	ldr	r3, [pc, #36]	@ (801c77c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c756:	b507      	push	{r0, r1, r2, lr}
 801c758:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c75c:	2100      	movs	r1, #0
 801c75e:	4b08      	ldr	r3, [pc, #32]	@ (801c780 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c760:	9100      	str	r1, [sp, #0]
 801c762:	4669      	mov	r1, sp
 801c764:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c768:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c76c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c770:	6803      	ldr	r3, [r0, #0]
 801c772:	689b      	ldr	r3, [r3, #8]
 801c774:	4798      	blx	r3
 801c776:	b003      	add	sp, #12
 801c778:	f85d fb04 	ldr.w	pc, [sp], #4
 801c77c:	240285a8 	.word	0x240285a8
 801c780:	240285aa 	.word	0x240285aa

0801c784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c788:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c78c:	b089      	sub	sp, #36	@ 0x24
 801c78e:	4680      	mov	r8, r0
 801c790:	460c      	mov	r4, r1
 801c792:	2b00      	cmp	r3, #0
 801c794:	4615      	mov	r5, r2
 801c796:	dd0e      	ble.n	801c7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c798:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	dd0a      	ble.n	801c7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c7a0:	4628      	mov	r0, r5
 801c7a2:	f7ff ff5b 	bl	801c65c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c7a6:	4621      	mov	r1, r4
 801c7a8:	f7fd ff99 	bl	801a6de <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c7ac:	69eb      	ldr	r3, [r5, #28]
 801c7ae:	b928      	cbnz	r0, 801c7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c7b0:	461d      	mov	r5, r3
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d1f4      	bne.n	801c7a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c7b6:	b009      	add	sp, #36	@ 0x24
 801c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7bc:	ae04      	add	r6, sp, #16
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	f000 80b5 	beq.w	801c92e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c7c4:	682b      	ldr	r3, [r5, #0]
 801c7c6:	4629      	mov	r1, r5
 801c7c8:	a802      	add	r0, sp, #8
 801c7ca:	68db      	ldr	r3, [r3, #12]
 801c7cc:	4798      	blx	r3
 801c7ce:	4628      	mov	r0, r5
 801c7d0:	f7ff ff60 	bl	801c694 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c7d4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c7d8:	4407      	add	r7, r0
 801c7da:	4628      	mov	r0, r5
 801c7dc:	f7ff ff6e 	bl	801c6bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c7e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c7e4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c7e8:	b23f      	sxth	r7, r7
 801c7ea:	4418      	add	r0, r3
 801c7ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c7f0:	4621      	mov	r1, r4
 801c7f2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c7f6:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c7fa:	4630      	mov	r0, r6
 801c7fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c800:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c804:	f7f6 fb98 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801c808:	4628      	mov	r0, r5
 801c80a:	f7ff ff27 	bl	801c65c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c80e:	ab06      	add	r3, sp, #24
 801c810:	4602      	mov	r2, r0
 801c812:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c816:	e883 0003 	stmia.w	r3, {r0, r1}
 801c81a:	4611      	mov	r1, r2
 801c81c:	4618      	mov	r0, r3
 801c81e:	f7f6 fb8b 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801c822:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c826:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c82a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c82e:	4299      	cmp	r1, r3
 801c830:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c834:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c838:	d10b      	bne.n	801c852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c83a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c83e:	4552      	cmp	r2, sl
 801c840:	d107      	bne.n	801c852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c842:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c846:	455a      	cmp	r2, fp
 801c848:	d103      	bne.n	801c852 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c84a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c84e:	454a      	cmp	r2, r9
 801c850:	d06d      	beq.n	801c92e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c852:	f1bb 0f00 	cmp.w	fp, #0
 801c856:	dd65      	ble.n	801c924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c858:	f1b9 0f00 	cmp.w	r9, #0
 801c85c:	dd62      	ble.n	801c924 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c85e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c862:	fa1f f08a 	uxth.w	r0, sl
 801c866:	4552      	cmp	r2, sl
 801c868:	9000      	str	r0, [sp, #0]
 801c86a:	da12      	bge.n	801c892 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c86c:	9301      	str	r3, [sp, #4]
 801c86e:	9b00      	ldr	r3, [sp, #0]
 801c870:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c874:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c878:	1a9a      	subs	r2, r3, r2
 801c87a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c87e:	4631      	mov	r1, r6
 801c880:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c884:	4640      	mov	r0, r8
 801c886:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c88a:	69ea      	ldr	r2, [r5, #28]
 801c88c:	f7ff ff7a 	bl	801c784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c890:	9b01      	ldr	r3, [sp, #4]
 801c892:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c896:	b29f      	uxth	r7, r3
 801c898:	429a      	cmp	r2, r3
 801c89a:	da0d      	bge.n	801c8b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c89c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c8a0:	1aba      	subs	r2, r7, r2
 801c8a2:	f8ad a012 	strh.w	sl, [sp, #18]
 801c8a6:	4631      	mov	r1, r6
 801c8a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c8ac:	4640      	mov	r0, r8
 801c8ae:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c8b2:	69ea      	ldr	r2, [r5, #28]
 801c8b4:	f7ff ff66 	bl	801c784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c8b8:	8822      	ldrh	r2, [r4, #0]
 801c8ba:	445f      	add	r7, fp
 801c8bc:	88a3      	ldrh	r3, [r4, #4]
 801c8be:	b2bf      	uxth	r7, r7
 801c8c0:	4413      	add	r3, r2
 801c8c2:	b23a      	sxth	r2, r7
 801c8c4:	b29b      	uxth	r3, r3
 801c8c6:	b219      	sxth	r1, r3
 801c8c8:	4291      	cmp	r1, r2
 801c8ca:	dd0d      	ble.n	801c8e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c8cc:	1bdb      	subs	r3, r3, r7
 801c8ce:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c8d2:	f8ad a012 	strh.w	sl, [sp, #18]
 801c8d6:	4631      	mov	r1, r6
 801c8d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c8dc:	4640      	mov	r0, r8
 801c8de:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c8e2:	69ea      	ldr	r2, [r5, #28]
 801c8e4:	f7ff ff4e 	bl	801c784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c8e8:	88e2      	ldrh	r2, [r4, #6]
 801c8ea:	8863      	ldrh	r3, [r4, #2]
 801c8ec:	4413      	add	r3, r2
 801c8ee:	9a00      	ldr	r2, [sp, #0]
 801c8f0:	444a      	add	r2, r9
 801c8f2:	b29b      	uxth	r3, r3
 801c8f4:	fa1f f982 	uxth.w	r9, r2
 801c8f8:	b219      	sxth	r1, r3
 801c8fa:	fa0f f289 	sxth.w	r2, r9
 801c8fe:	428a      	cmp	r2, r1
 801c900:	da15      	bge.n	801c92e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c902:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c906:	eba3 0309 	sub.w	r3, r3, r9
 801c90a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c90e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c912:	4631      	mov	r1, r6
 801c914:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c918:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c91c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c920:	69ea      	ldr	r2, [r5, #28]
 801c922:	e001      	b.n	801c928 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c924:	69ea      	ldr	r2, [r5, #28]
 801c926:	4621      	mov	r1, r4
 801c928:	4640      	mov	r0, r8
 801c92a:	f7ff ff2b 	bl	801c784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c92e:	4628      	mov	r0, r5
 801c930:	f7ff fe94 	bl	801c65c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c934:	6861      	ldr	r1, [r4, #4]
 801c936:	4602      	mov	r2, r0
 801c938:	4633      	mov	r3, r6
 801c93a:	6820      	ldr	r0, [r4, #0]
 801c93c:	c303      	stmia	r3!, {r0, r1}
 801c93e:	4611      	mov	r1, r2
 801c940:	4630      	mov	r0, r6
 801c942:	f7f6 faf9 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801c946:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	f77f af33 	ble.w	801c7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c950:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c954:	2b00      	cmp	r3, #0
 801c956:	f77f af2e 	ble.w	801c7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c95a:	4628      	mov	r0, r5
 801c95c:	f7ff fe9a 	bl	801c694 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c960:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c964:	1a18      	subs	r0, r3, r0
 801c966:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c96a:	4628      	mov	r0, r5
 801c96c:	f7ff fea6 	bl	801c6bc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c970:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c974:	4631      	mov	r1, r6
 801c976:	1a18      	subs	r0, r3, r0
 801c978:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c97c:	4628      	mov	r0, r5
 801c97e:	682b      	ldr	r3, [r5, #0]
 801c980:	689b      	ldr	r3, [r3, #8]
 801c982:	4798      	blx	r3
 801c984:	e717      	b.n	801c7b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c986 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c986:	b570      	push	{r4, r5, r6, lr}
 801c988:	1d06      	adds	r6, r0, #4
 801c98a:	b086      	sub	sp, #24
 801c98c:	460c      	mov	r4, r1
 801c98e:	2300      	movs	r3, #0
 801c990:	4631      	mov	r1, r6
 801c992:	4605      	mov	r5, r0
 801c994:	a802      	add	r0, sp, #8
 801c996:	9301      	str	r3, [sp, #4]
 801c998:	f7ff f898 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c99c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c9a0:	8822      	ldrh	r2, [r4, #0]
 801c9a2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c9a6:	1ad2      	subs	r2, r2, r3
 801c9a8:	8863      	ldrh	r3, [r4, #2]
 801c9aa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c9ae:	1a5b      	subs	r3, r3, r1
 801c9b0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c9b4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c9b8:	aa01      	add	r2, sp, #4
 801c9ba:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c9be:	4630      	mov	r0, r6
 801c9c0:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c9c4:	a904      	add	r1, sp, #16
 801c9c6:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c9ca:	f7f6 fb8d 	bl	80130e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c9ce:	9a01      	ldr	r2, [sp, #4]
 801c9d0:	b11a      	cbz	r2, 801c9da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c9d2:	4621      	mov	r1, r4
 801c9d4:	4628      	mov	r0, r5
 801c9d6:	f7ff fed5 	bl	801c784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c9da:	b006      	add	sp, #24
 801c9dc:	bd70      	pop	{r4, r5, r6, pc}

0801c9de <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c9de:	4602      	mov	r2, r0
 801c9e0:	b530      	push	{r4, r5, lr}
 801c9e2:	4604      	mov	r4, r0
 801c9e4:	b085      	sub	sp, #20
 801c9e6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c9ea:	460d      	mov	r5, r1
 801c9ec:	466b      	mov	r3, sp
 801c9ee:	6851      	ldr	r1, [r2, #4]
 801c9f0:	c303      	stmia	r3!, {r0, r1}
 801c9f2:	4629      	mov	r1, r5
 801c9f4:	4668      	mov	r0, sp
 801c9f6:	f7f6 fa9f 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 801c9fa:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801c9fe:	b12b      	cbz	r3, 801ca0c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801ca00:	4669      	mov	r1, sp
 801ca02:	4620      	mov	r0, r4
 801ca04:	f7ff ffbf 	bl	801c986 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ca08:	b005      	add	sp, #20
 801ca0a:	bd30      	pop	{r4, r5, pc}
 801ca0c:	3404      	adds	r4, #4
 801ca0e:	a802      	add	r0, sp, #8
 801ca10:	4621      	mov	r1, r4
 801ca12:	f7ff f85b 	bl	801bacc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca16:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca1a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ca1e:	4669      	mov	r1, sp
 801ca20:	4620      	mov	r0, r4
 801ca22:	1a9b      	subs	r3, r3, r2
 801ca24:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ca28:	f8ad 3000 	strh.w	r3, [sp]
 801ca2c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca30:	1a9b      	subs	r3, r3, r2
 801ca32:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ca36:	f7f6 fb1e 	bl	8013076 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ca3a:	e7e5      	b.n	801ca08 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801ca3c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ca3c:	460b      	mov	r3, r1
 801ca3e:	680a      	ldr	r2, [r1, #0]
 801ca40:	1d01      	adds	r1, r0, #4
 801ca42:	6992      	ldr	r2, [r2, #24]
 801ca44:	4618      	mov	r0, r3
 801ca46:	4710      	bx	r2

0801ca48 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801ca48:	4298      	cmp	r0, r3
 801ca4a:	d200      	bcs.n	801ca4e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801ca4c:	b913      	cbnz	r3, 801ca54 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801ca4e:	440a      	add	r2, r1
 801ca50:	b210      	sxth	r0, r2
 801ca52:	4770      	bx	lr
 801ca54:	ee07 0a90 	vmov	s15, r0
 801ca58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ca5c:	ee07 3a90 	vmov	s15, r3
 801ca60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ca68:	ee07 2a90 	vmov	s15, r2
 801ca6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ca70:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801ca74:	ee07 1a90 	vmov	s15, r1
 801ca78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca7c:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ca80:	ee67 5a07 	vmul.f32	s11, s14, s14
 801ca84:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ca88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ca8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ca90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca98:	bfcc      	ite	gt
 801ca9a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801ca9e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801caa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801caa6:	ee17 3a90 	vmov	r3, s15
 801caaa:	b218      	sxth	r0, r3
 801caac:	4770      	bx	lr

0801caae <_ZN8touchgfx12TextProviderC1Ev>:
 801caae:	b538      	push	{r3, r4, r5, lr}
 801cab0:	2500      	movs	r5, #0
 801cab2:	2302      	movs	r3, #2
 801cab4:	4604      	mov	r4, r0
 801cab6:	220e      	movs	r2, #14
 801cab8:	7403      	strb	r3, [r0, #16]
 801caba:	4629      	mov	r1, r5
 801cabc:	6145      	str	r5, [r0, #20]
 801cabe:	7605      	strb	r5, [r0, #24]
 801cac0:	83c5      	strh	r5, [r0, #30]
 801cac2:	8405      	strh	r5, [r0, #32]
 801cac4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801cac6:	8705      	strh	r5, [r0, #56]	@ 0x38
 801cac8:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801caca:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801cace:	e9c0 5500 	strd	r5, r5, [r0]
 801cad2:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801cad6:	304c      	adds	r0, #76	@ 0x4c
 801cad8:	f00d f98a 	bl	8029df0 <memset>
 801cadc:	2301      	movs	r3, #1
 801cade:	4620      	mov	r0, r4
 801cae0:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801cae4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801cae8:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801caec:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801caf0:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801caf4:	f7eb ff36 	bl	8008964 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801caf8:	4620      	mov	r0, r4
 801cafa:	bd38      	pop	{r3, r4, r5, pc}

0801cafc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801cafc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801cafe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801cb02:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801cb04:	fab0 f080 	clz	r0, r0
 801cb08:	0940      	lsrs	r0, r0, #5
 801cb0a:	4770      	bx	lr

0801cb0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cb0c:	b530      	push	{r4, r5, lr}
 801cb0e:	2500      	movs	r5, #0
 801cb10:	2401      	movs	r4, #1
 801cb12:	6843      	ldr	r3, [r0, #4]
 801cb14:	b913      	cbnz	r3, 801cb1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cb16:	6803      	ldr	r3, [r0, #0]
 801cb18:	b313      	cbz	r3, 801cb60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cb1a:	6043      	str	r3, [r0, #4]
 801cb1c:	7e03      	ldrb	r3, [r0, #24]
 801cb1e:	b143      	cbz	r3, 801cb32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cb20:	6943      	ldr	r3, [r0, #20]
 801cb22:	b12b      	cbz	r3, 801cb30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cb24:	881a      	ldrh	r2, [r3, #0]
 801cb26:	b11a      	cbz	r2, 801cb30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cb28:	1c9a      	adds	r2, r3, #2
 801cb2a:	6142      	str	r2, [r0, #20]
 801cb2c:	8818      	ldrh	r0, [r3, #0]
 801cb2e:	bd30      	pop	{r4, r5, pc}
 801cb30:	7605      	strb	r5, [r0, #24]
 801cb32:	6843      	ldr	r3, [r0, #4]
 801cb34:	8819      	ldrh	r1, [r3, #0]
 801cb36:	b199      	cbz	r1, 801cb60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cb38:	1c9a      	adds	r2, r3, #2
 801cb3a:	2902      	cmp	r1, #2
 801cb3c:	6042      	str	r2, [r0, #4]
 801cb3e:	d1f5      	bne.n	801cb2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801cb40:	7c03      	ldrb	r3, [r0, #16]
 801cb42:	2b01      	cmp	r3, #1
 801cb44:	d8e5      	bhi.n	801cb12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cb46:	1c5a      	adds	r2, r3, #1
 801cb48:	3302      	adds	r3, #2
 801cb4a:	7402      	strb	r2, [r0, #16]
 801cb4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cb50:	6143      	str	r3, [r0, #20]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d0dd      	beq.n	801cb12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cb56:	881b      	ldrh	r3, [r3, #0]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d0da      	beq.n	801cb12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cb5c:	7604      	strb	r4, [r0, #24]
 801cb5e:	e7d8      	b.n	801cb12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801cb60:	2000      	movs	r0, #0
 801cb62:	e7e4      	b.n	801cb2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801cb64:	6001      	str	r1, [r0, #0]
 801cb66:	2100      	movs	r1, #0
 801cb68:	b430      	push	{r4, r5}
 801cb6a:	6041      	str	r1, [r0, #4]
 801cb6c:	6815      	ldr	r5, [r2, #0]
 801cb6e:	6085      	str	r5, [r0, #8]
 801cb70:	6852      	ldr	r2, [r2, #4]
 801cb72:	6443      	str	r3, [r0, #68]	@ 0x44
 801cb74:	9b02      	ldr	r3, [sp, #8]
 801cb76:	60c2      	str	r2, [r0, #12]
 801cb78:	7401      	strb	r1, [r0, #16]
 801cb7a:	6141      	str	r1, [r0, #20]
 801cb7c:	7601      	strb	r1, [r0, #24]
 801cb7e:	8701      	strh	r1, [r0, #56]	@ 0x38
 801cb80:	8401      	strh	r1, [r0, #32]
 801cb82:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801cb86:	6483      	str	r3, [r0, #72]	@ 0x48
 801cb88:	bc30      	pop	{r4, r5}
 801cb8a:	f7eb beeb 	b.w	8008964 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801cb8e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801cb8e:	b408      	push	{r3}
 801cb90:	b510      	push	{r4, lr}
 801cb92:	b085      	sub	sp, #20
 801cb94:	ac07      	add	r4, sp, #28
 801cb96:	f854 3b04 	ldr.w	r3, [r4], #4
 801cb9a:	9300      	str	r3, [sp, #0]
 801cb9c:	4613      	mov	r3, r2
 801cb9e:	4622      	mov	r2, r4
 801cba0:	9403      	str	r4, [sp, #12]
 801cba2:	f7ff ffdf 	bl	801cb64 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cba6:	b005      	add	sp, #20
 801cba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbac:	b001      	add	sp, #4
 801cbae:	4770      	bx	lr

0801cbb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801cbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbb2:	4605      	mov	r5, r0
 801cbb4:	4608      	mov	r0, r1
 801cbb6:	b1f1      	cbz	r1, 801cbf6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801cbb8:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801cbbc:	460b      	mov	r3, r1
 801cbbe:	f101 0708 	add.w	r7, r1, #8
 801cbc2:	4622      	mov	r2, r4
 801cbc4:	6818      	ldr	r0, [r3, #0]
 801cbc6:	3308      	adds	r3, #8
 801cbc8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cbcc:	4626      	mov	r6, r4
 801cbce:	42bb      	cmp	r3, r7
 801cbd0:	c603      	stmia	r6!, {r0, r1}
 801cbd2:	4634      	mov	r4, r6
 801cbd4:	d1f6      	bne.n	801cbc4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801cbd6:	6818      	ldr	r0, [r3, #0]
 801cbd8:	6030      	str	r0, [r6, #0]
 801cbda:	4610      	mov	r0, r2
 801cbdc:	889b      	ldrh	r3, [r3, #4]
 801cbde:	80b3      	strh	r3, [r6, #4]
 801cbe0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801cbe4:	015b      	lsls	r3, r3, #5
 801cbe6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801cbea:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801cbee:	430b      	orrs	r3, r1
 801cbf0:	425b      	negs	r3, r3
 801cbf2:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cbf8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801cbf8:	b538      	push	{r3, r4, r5, lr}
 801cbfa:	460c      	mov	r4, r1
 801cbfc:	6811      	ldr	r1, [r2, #0]
 801cbfe:	4610      	mov	r0, r2
 801cc00:	68cd      	ldr	r5, [r1, #12]
 801cc02:	4619      	mov	r1, r3
 801cc04:	47a8      	blx	r5
 801cc06:	2800      	cmp	r0, #0
 801cc08:	bf08      	it	eq
 801cc0a:	4620      	moveq	r0, r4
 801cc0c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801cc10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc14:	468c      	mov	ip, r1
 801cc16:	4604      	mov	r4, r0
 801cc18:	4615      	mov	r5, r2
 801cc1a:	b942      	cbnz	r2, 801cc2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801cc1c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801cc20:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801cc24:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801cc28:	4628      	mov	r0, r5
 801cc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc2e:	7b50      	ldrb	r0, [r2, #13]
 801cc30:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801cc34:	8893      	ldrh	r3, [r2, #4]
 801cc36:	0106      	lsls	r6, r0, #4
 801cc38:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801cc3c:	79ee      	ldrb	r6, [r5, #7]
 801cc3e:	4316      	orrs	r6, r2
 801cc40:	185a      	adds	r2, r3, r1
 801cc42:	b291      	uxth	r1, r2
 801cc44:	b2b7      	uxth	r7, r6
 801cc46:	291d      	cmp	r1, #29
 801cc48:	d87f      	bhi.n	801cd4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801cc4a:	2201      	movs	r2, #1
 801cc4c:	10f6      	asrs	r6, r6, #3
 801cc4e:	408a      	lsls	r2, r1
 801cc50:	4974      	ldr	r1, [pc, #464]	@ (801ce24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801cc52:	420a      	tst	r2, r1
 801cc54:	d12e      	bne.n	801ccb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801cc56:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801cc5a:	d076      	beq.n	801cd4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801cc5c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801cc60:	462b      	mov	r3, r5
 801cc62:	f105 0e08 	add.w	lr, r5, #8
 801cc66:	4615      	mov	r5, r2
 801cc68:	6818      	ldr	r0, [r3, #0]
 801cc6a:	3308      	adds	r3, #8
 801cc6c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cc70:	4694      	mov	ip, r2
 801cc72:	4573      	cmp	r3, lr
 801cc74:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cc78:	4662      	mov	r2, ip
 801cc7a:	d1f5      	bne.n	801cc68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801cc7c:	6818      	ldr	r0, [r3, #0]
 801cc7e:	f8cc 0000 	str.w	r0, [ip]
 801cc82:	889b      	ldrh	r3, [r3, #4]
 801cc84:	f8ac 3004 	strh.w	r3, [ip, #4]
 801cc88:	b2b3      	uxth	r3, r6
 801cc8a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801cc8e:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801cc92:	1aca      	subs	r2, r1, r3
 801cc94:	1bcf      	subs	r7, r1, r7
 801cc96:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801cc9a:	b292      	uxth	r2, r2
 801cc9c:	1afb      	subs	r3, r7, r3
 801cc9e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801cca2:	10d2      	asrs	r2, r2, #3
 801cca4:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801cca8:	4302      	orrs	r2, r0
 801ccaa:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801ccae:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801ccb2:	e7b9      	b.n	801cc28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801ccb4:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801ccb8:	462b      	mov	r3, r5
 801ccba:	f105 0808 	add.w	r8, r5, #8
 801ccbe:	4615      	mov	r5, r2
 801ccc0:	6818      	ldr	r0, [r3, #0]
 801ccc2:	3308      	adds	r3, #8
 801ccc4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ccc8:	4696      	mov	lr, r2
 801ccca:	4543      	cmp	r3, r8
 801cccc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ccd0:	4672      	mov	r2, lr
 801ccd2:	d1f5      	bne.n	801ccc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 801ccd4:	6818      	ldr	r0, [r3, #0]
 801ccd6:	f8ce 0000 	str.w	r0, [lr]
 801ccda:	889b      	ldrh	r3, [r3, #4]
 801ccdc:	f8ae 3004 	strh.w	r3, [lr, #4]
 801cce0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801cce2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cce6:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801cce8:	f640 6333 	movw	r3, #3635	@ 0xe33
 801ccec:	4299      	cmp	r1, r3
 801ccee:	d111      	bne.n	801cd14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801ccf0:	f8dc 3000 	ldr.w	r3, [ip]
 801ccf4:	4660      	mov	r0, ip
 801ccf6:	68db      	ldr	r3, [r3, #12]
 801ccf8:	4798      	blx	r3
 801ccfa:	7b41      	ldrb	r1, [r0, #13]
 801ccfc:	00cb      	lsls	r3, r1, #3
 801ccfe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cd02:	7a03      	ldrb	r3, [r0, #8]
 801cd04:	4313      	orrs	r3, r2
 801cd06:	064a      	lsls	r2, r1, #25
 801cd08:	bf44      	itt	mi
 801cd0a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cd0e:	b21b      	sxthmi	r3, r3
 801cd10:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801cd14:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801cd18:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801cd1c:	443b      	add	r3, r7
 801cd1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801cd22:	4433      	add	r3, r6
 801cd24:	b29b      	uxth	r3, r3
 801cd26:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801cd2a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801cd2e:	10db      	asrs	r3, r3, #3
 801cd30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801cd34:	4313      	orrs	r3, r2
 801cd36:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801cd3a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801cd3e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801cd42:	1a9b      	subs	r3, r3, r2
 801cd44:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801cd48:	e76e      	b.n	801cc28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801cd4a:	f023 0204 	bic.w	r2, r3, #4
 801cd4e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801cd52:	428a      	cmp	r2, r1
 801cd54:	d003      	beq.n	801cd5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801cd56:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801cd5a:	4293      	cmp	r3, r2
 801cd5c:	d120      	bne.n	801cda0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x190>
 801cd5e:	3b01      	subs	r3, #1
 801cd60:	4662      	mov	r2, ip
 801cd62:	4629      	mov	r1, r5
 801cd64:	4620      	mov	r0, r4
 801cd66:	b29b      	uxth	r3, r3
 801cd68:	f7ff ff46 	bl	801cbf8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cd6c:	7b41      	ldrb	r1, [r0, #13]
 801cd6e:	00cb      	lsls	r3, r1, #3
 801cd70:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cd74:	7a03      	ldrb	r3, [r0, #8]
 801cd76:	0648      	lsls	r0, r1, #25
 801cd78:	ea43 0302 	orr.w	r3, r3, r2
 801cd7c:	bf44      	itt	mi
 801cd7e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cd82:	b21b      	sxthmi	r3, r3
 801cd84:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801cd88:	7b6b      	ldrb	r3, [r5, #13]
 801cd8a:	7aaa      	ldrb	r2, [r5, #10]
 801cd8c:	005b      	lsls	r3, r3, #1
 801cd8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cd92:	4313      	orrs	r3, r2
 801cd94:	115a      	asrs	r2, r3, #5
 801cd96:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801cd9a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801cd9e:	e032      	b.n	801ce06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801cda0:	00c2      	lsls	r2, r0, #3
 801cda2:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801cda6:	7a2a      	ldrb	r2, [r5, #8]
 801cda8:	430a      	orrs	r2, r1
 801cdaa:	0641      	lsls	r1, r0, #25
 801cdac:	f640 6109 	movw	r1, #3593	@ 0xe09
 801cdb0:	bf44      	itt	mi
 801cdb2:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801cdb6:	b212      	sxthmi	r2, r2
 801cdb8:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801cdbc:	f023 0210 	bic.w	r2, r3, #16
 801cdc0:	428a      	cmp	r2, r1
 801cdc2:	d003      	beq.n	801cdcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 801cdc4:	f640 6213 	movw	r2, #3603	@ 0xe13
 801cdc8:	4293      	cmp	r3, r2
 801cdca:	d129      	bne.n	801ce20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>
 801cdcc:	7b6e      	ldrb	r6, [r5, #13]
 801cdce:	4629      	mov	r1, r5
 801cdd0:	4620      	mov	r0, r4
 801cdd2:	0076      	lsls	r6, r6, #1
 801cdd4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801cdd8:	7aae      	ldrb	r6, [r5, #10]
 801cdda:	4316      	orrs	r6, r2
 801cddc:	f640 6213 	movw	r2, #3603	@ 0xe13
 801cde0:	4293      	cmp	r3, r2
 801cde2:	4662      	mov	r2, ip
 801cde4:	bf16      	itet	ne
 801cde6:	f103 33ff 	addne.w	r3, r3, #4294967295
 801cdea:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801cdee:	b29b      	uxthne	r3, r3
 801cdf0:	f7ff ff02 	bl	801cbf8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cdf4:	7b43      	ldrb	r3, [r0, #13]
 801cdf6:	7a82      	ldrb	r2, [r0, #10]
 801cdf8:	005b      	lsls	r3, r3, #1
 801cdfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cdfe:	4313      	orrs	r3, r2
 801ce00:	1af6      	subs	r6, r6, r3
 801ce02:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801ce06:	7b69      	ldrb	r1, [r5, #13]
 801ce08:	00cb      	lsls	r3, r1, #3
 801ce0a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ce0e:	7a2b      	ldrb	r3, [r5, #8]
 801ce10:	4313      	orrs	r3, r2
 801ce12:	064a      	lsls	r2, r1, #25
 801ce14:	bf44      	itt	mi
 801ce16:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ce1a:	b21b      	sxthmi	r3, r3
 801ce1c:	1bdb      	subs	r3, r3, r7
 801ce1e:	e746      	b.n	801ccae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801ce20:	2300      	movs	r3, #0
 801ce22:	e7ba      	b.n	801cd9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18a>
 801ce24:	3fc00079 	.word	0x3fc00079

0801ce28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ce28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce2c:	4604      	mov	r4, r0
 801ce2e:	b942      	cbnz	r2, 801ce42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ce30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ce34:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801ce38:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801ce3c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801ce40:	e047      	b.n	801ced2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ce42:	7b51      	ldrb	r1, [r2, #13]
 801ce44:	8893      	ldrh	r3, [r2, #4]
 801ce46:	010d      	lsls	r5, r1, #4
 801ce48:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801ce4c:	79d5      	ldrb	r5, [r2, #7]
 801ce4e:	4305      	orrs	r5, r0
 801ce50:	2d04      	cmp	r5, #4
 801ce52:	bfcc      	ite	gt
 801ce54:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ce58:	f04f 0e01 	movle.w	lr, #1
 801ce5c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801ce60:	f200 80ab 	bhi.w	801cfba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ce64:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801ce68:	4283      	cmp	r3, r0
 801ce6a:	d216      	bcs.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce6c:	f240 605b 	movw	r0, #1627	@ 0x65b
 801ce70:	4283      	cmp	r3, r0
 801ce72:	d859      	bhi.n	801cf28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ce74:	f240 6057 	movw	r0, #1623	@ 0x657
 801ce78:	4283      	cmp	r3, r0
 801ce7a:	d20e      	bcs.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce7c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801ce80:	d24a      	bcs.n	801cf18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ce82:	f240 604e 	movw	r0, #1614	@ 0x64e
 801ce86:	4283      	cmp	r3, r0
 801ce88:	d207      	bcs.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce8a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801ce8e:	4283      	cmp	r3, r0
 801ce90:	d02a      	beq.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ce92:	d821      	bhi.n	801ced8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801ce94:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801ce98:	d35b      	bcc.n	801cf52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ce9a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801ce9e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801cea2:	f040 80d0 	bne.w	801d046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801cea6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801ceaa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ceae:	f040 80ca 	bne.w	801d046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ceb2:	00cb      	lsls	r3, r1, #3
 801ceb4:	0649      	lsls	r1, r1, #25
 801ceb6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801ceba:	7a13      	ldrb	r3, [r2, #8]
 801cebc:	ea43 0300 	orr.w	r3, r3, r0
 801cec0:	bf44      	itt	mi
 801cec2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cec6:	b21b      	sxthmi	r3, r3
 801cec8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801cecc:	1b5d      	subs	r5, r3, r5
 801cece:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801ced2:	4610      	mov	r0, r2
 801ced4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ced8:	f240 604b 	movw	r0, #1611	@ 0x64b
 801cedc:	4283      	cmp	r3, r0
 801cede:	d338      	bcc.n	801cf52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cee0:	f240 604c 	movw	r0, #1612	@ 0x64c
 801cee4:	4283      	cmp	r3, r0
 801cee6:	d9d8      	bls.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cee8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801ceec:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801cef0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801cef4:	f040 80f3 	bne.w	801d0de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801cef8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801cefc:	f040 80ef 	bne.w	801d0de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801cf00:	00cb      	lsls	r3, r1, #3
 801cf02:	064e      	lsls	r6, r1, #25
 801cf04:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801cf08:	7a13      	ldrb	r3, [r2, #8]
 801cf0a:	ea43 0300 	orr.w	r3, r3, r0
 801cf0e:	bf44      	itt	mi
 801cf10:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cf14:	b21b      	sxthmi	r3, r3
 801cf16:	e7d9      	b.n	801cecc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801cf18:	f240 6054 	movw	r0, #1620	@ 0x654
 801cf1c:	4283      	cmp	r3, r0
 801cf1e:	d8e3      	bhi.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cf20:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801cf24:	d9e0      	bls.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cf26:	e7b8      	b.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cf28:	f240 6074 	movw	r0, #1652	@ 0x674
 801cf2c:	4283      	cmp	r3, r0
 801cf2e:	d0b4      	beq.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cf30:	d82d      	bhi.n	801cf8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801cf32:	f240 605e 	movw	r0, #1630	@ 0x65e
 801cf36:	4283      	cmp	r3, r0
 801cf38:	d804      	bhi.n	801cf44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801cf3a:	f240 605d 	movw	r0, #1629	@ 0x65d
 801cf3e:	4283      	cmp	r3, r0
 801cf40:	d3d2      	bcc.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cf42:	e7aa      	b.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cf44:	f240 605f 	movw	r0, #1631	@ 0x65f
 801cf48:	4283      	cmp	r3, r0
 801cf4a:	d0cd      	beq.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cf4c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801cf50:	d0a3      	beq.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cf52:	00cb      	lsls	r3, r1, #3
 801cf54:	0649      	lsls	r1, r1, #25
 801cf56:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801cf5a:	7a13      	ldrb	r3, [r2, #8]
 801cf5c:	ea43 0300 	orr.w	r3, r3, r0
 801cf60:	bf44      	itt	mi
 801cf62:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cf66:	b21b      	sxthmi	r3, r3
 801cf68:	1b5d      	subs	r5, r3, r5
 801cf6a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801cf6e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801cf72:	7b53      	ldrb	r3, [r2, #13]
 801cf74:	015b      	lsls	r3, r3, #5
 801cf76:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801cf7a:	7993      	ldrb	r3, [r2, #6]
 801cf7c:	430b      	orrs	r3, r1
 801cf7e:	2105      	movs	r1, #5
 801cf80:	005b      	lsls	r3, r3, #1
 801cf82:	fb93 f3f1 	sdiv	r3, r3, r1
 801cf86:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801cf8a:	440b      	add	r3, r1
 801cf8c:	e756      	b.n	801ce3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801cf8e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801cf92:	4283      	cmp	r3, r0
 801cf94:	d809      	bhi.n	801cfaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801cf96:	f240 60df 	movw	r0, #1759	@ 0x6df
 801cf9a:	4283      	cmp	r3, r0
 801cf9c:	f4bf af7d 	bcs.w	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfa0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801cfa4:	2b05      	cmp	r3, #5
 801cfa6:	d8d4      	bhi.n	801cf52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cfa8:	e777      	b.n	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfaa:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801cfae:	4283      	cmp	r3, r0
 801cfb0:	d09a      	beq.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cfb2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801cfb6:	4283      	cmp	r3, r0
 801cfb8:	e7ca      	b.n	801cf50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cfba:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801cfbe:	d22b      	bcs.n	801d018 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801cfc0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801cfc4:	4283      	cmp	r3, r0
 801cfc6:	d28f      	bcs.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cfc8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801cfcc:	4283      	cmp	r3, r0
 801cfce:	d816      	bhi.n	801cffe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801cfd0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801cfd4:	4283      	cmp	r3, r0
 801cfd6:	f4bf af60 	bcs.w	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfda:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801cfde:	4283      	cmp	r3, r0
 801cfe0:	d80a      	bhi.n	801cff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801cfe2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801cfe6:	4283      	cmp	r3, r0
 801cfe8:	f4bf af57 	bcs.w	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfec:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801cff0:	4283      	cmp	r3, r0
 801cff2:	f43f af79 	beq.w	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cff6:	e7ac      	b.n	801cf52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cff8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801cffc:	e7f8      	b.n	801cff0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801cffe:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801d002:	4283      	cmp	r3, r0
 801d004:	d802      	bhi.n	801d00c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d006:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801d00a:	e798      	b.n	801cf3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d00c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801d010:	4283      	cmp	r3, r0
 801d012:	f47f af42 	bne.w	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d016:	e767      	b.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d018:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801d01c:	4283      	cmp	r3, r0
 801d01e:	f43f af63 	beq.w	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d022:	d802      	bhi.n	801d02a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d024:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801d028:	e7f2      	b.n	801d010 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d02a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801d02e:	4283      	cmp	r3, r0
 801d030:	d805      	bhi.n	801d03e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d032:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801d036:	4283      	cmp	r3, r0
 801d038:	f4ff af2f 	bcc.w	801ce9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d03c:	e754      	b.n	801cee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d03e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801d042:	4283      	cmp	r3, r0
 801d044:	e7af      	b.n	801cfa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d046:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d04a:	4617      	mov	r7, r2
 801d04c:	f102 0808 	add.w	r8, r2, #8
 801d050:	4666      	mov	r6, ip
 801d052:	6838      	ldr	r0, [r7, #0]
 801d054:	3708      	adds	r7, #8
 801d056:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d05a:	46e6      	mov	lr, ip
 801d05c:	4547      	cmp	r7, r8
 801d05e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d062:	46f4      	mov	ip, lr
 801d064:	d1f5      	bne.n	801d052 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d066:	6838      	ldr	r0, [r7, #0]
 801d068:	f8ce 0000 	str.w	r0, [lr]
 801d06c:	88b9      	ldrh	r1, [r7, #4]
 801d06e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d072:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d076:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d07a:	d009      	beq.n	801d090 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d07c:	7b51      	ldrb	r1, [r2, #13]
 801d07e:	7992      	ldrb	r2, [r2, #6]
 801d080:	0149      	lsls	r1, r1, #5
 801d082:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d086:	4311      	orrs	r1, r2
 801d088:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d08c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d090:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d094:	b2ad      	uxth	r5, r5
 801d096:	d00d      	beq.n	801d0b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d098:	442b      	add	r3, r5
 801d09a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d09e:	b29b      	uxth	r3, r3
 801d0a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d0a4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d0a8:	10db      	asrs	r3, r3, #3
 801d0aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d0ae:	4313      	orrs	r3, r2
 801d0b0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d0b4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d0b8:	00cb      	lsls	r3, r1, #3
 801d0ba:	064f      	lsls	r7, r1, #25
 801d0bc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d0c0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d0c4:	ea43 0302 	orr.w	r3, r3, r2
 801d0c8:	bf44      	itt	mi
 801d0ca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d0ce:	b21b      	sxthmi	r3, r3
 801d0d0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d0d4:	1b5b      	subs	r3, r3, r5
 801d0d6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d0da:	4632      	mov	r2, r6
 801d0dc:	e6f9      	b.n	801ced2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d0de:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801d0e2:	4617      	mov	r7, r2
 801d0e4:	f102 0908 	add.w	r9, r2, #8
 801d0e8:	4666      	mov	r6, ip
 801d0ea:	6838      	ldr	r0, [r7, #0]
 801d0ec:	3708      	adds	r7, #8
 801d0ee:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d0f2:	46e0      	mov	r8, ip
 801d0f4:	454f      	cmp	r7, r9
 801d0f6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d0fa:	46c4      	mov	ip, r8
 801d0fc:	d1f5      	bne.n	801d0ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d0fe:	6838      	ldr	r0, [r7, #0]
 801d100:	f8c8 0000 	str.w	r0, [r8]
 801d104:	88b9      	ldrh	r1, [r7, #4]
 801d106:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d10a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801d10e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801d112:	d009      	beq.n	801d128 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d114:	7b51      	ldrb	r1, [r2, #13]
 801d116:	7992      	ldrb	r2, [r2, #6]
 801d118:	0149      	lsls	r1, r1, #5
 801d11a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d11e:	4311      	orrs	r1, r2
 801d120:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d124:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801d128:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801d12c:	d00e      	beq.n	801d14c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801d12e:	eba3 030e 	sub.w	r3, r3, lr
 801d132:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d136:	b29b      	uxth	r3, r3
 801d138:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d13c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d140:	10db      	asrs	r3, r3, #3
 801d142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d146:	4313      	orrs	r3, r2
 801d148:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d14c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801d150:	00cb      	lsls	r3, r1, #3
 801d152:	0648      	lsls	r0, r1, #25
 801d154:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d158:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801d15c:	ea43 0302 	orr.w	r3, r3, r2
 801d160:	bf44      	itt	mi
 801d162:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d166:	b21b      	sxthmi	r3, r3
 801d168:	1b5d      	subs	r5, r3, r5
 801d16a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d16e:	e7b4      	b.n	801d0da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801d170 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d174:	461e      	mov	r6, r3
 801d176:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d178:	4604      	mov	r4, r0
 801d17a:	4617      	mov	r7, r2
 801d17c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d180:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d184:	f7eb fbac 	bl	80088e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d188:	4605      	mov	r5, r0
 801d18a:	b918      	cbnz	r0, 801d194 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d18c:	6030      	str	r0, [r6, #0]
 801d18e:	4628      	mov	r0, r5
 801d190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d194:	683b      	ldr	r3, [r7, #0]
 801d196:	4601      	mov	r1, r0
 801d198:	4638      	mov	r0, r7
 801d19a:	68db      	ldr	r3, [r3, #12]
 801d19c:	4798      	blx	r3
 801d19e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d1a2:	4602      	mov	r2, r0
 801d1a4:	6030      	str	r0, [r6, #0]
 801d1a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d1aa:	d213      	bcs.n	801d1d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d1ac:	4643      	mov	r3, r8
 801d1ae:	4639      	mov	r1, r7
 801d1b0:	4620      	mov	r0, r4
 801d1b2:	f7ff fe39 	bl	801ce28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d1b6:	6030      	str	r0, [r6, #0]
 801d1b8:	6833      	ldr	r3, [r6, #0]
 801d1ba:	b143      	cbz	r3, 801d1ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d1bc:	7b5a      	ldrb	r2, [r3, #13]
 801d1be:	7a9b      	ldrb	r3, [r3, #10]
 801d1c0:	0052      	lsls	r2, r2, #1
 801d1c2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d1c6:	4313      	orrs	r3, r2
 801d1c8:	bf0c      	ite	eq
 801d1ca:	2301      	moveq	r3, #1
 801d1cc:	2300      	movne	r3, #0
 801d1ce:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d1d2:	e7dc      	b.n	801d18e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d1d4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d1d8:	b29b      	uxth	r3, r3
 801d1da:	2b7f      	cmp	r3, #127	@ 0x7f
 801d1dc:	d804      	bhi.n	801d1e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d1de:	4639      	mov	r1, r7
 801d1e0:	4620      	mov	r0, r4
 801d1e2:	f7ff fd15 	bl	801cc10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d1e6:	e7e6      	b.n	801d1b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d1e8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d0e3      	beq.n	801d1b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d1f0:	f640 1302 	movw	r3, #2306	@ 0x902
 801d1f4:	429d      	cmp	r5, r3
 801d1f6:	d1df      	bne.n	801d1b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d1f8:	4601      	mov	r1, r0
 801d1fa:	4620      	mov	r0, r4
 801d1fc:	f7ff fcd8 	bl	801cbb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d200:	e7d9      	b.n	801d1b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d202 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d202:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d206:	461e      	mov	r6, r3
 801d208:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d20a:	4604      	mov	r4, r0
 801d20c:	4617      	mov	r7, r2
 801d20e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d212:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d216:	f7eb fb63 	bl	80088e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d21a:	4605      	mov	r5, r0
 801d21c:	b918      	cbnz	r0, 801d226 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801d21e:	6030      	str	r0, [r6, #0]
 801d220:	4628      	mov	r0, r5
 801d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d226:	683b      	ldr	r3, [r7, #0]
 801d228:	4601      	mov	r1, r0
 801d22a:	4638      	mov	r0, r7
 801d22c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d230:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d234:	47c8      	blx	r9
 801d236:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801d23a:	4602      	mov	r2, r0
 801d23c:	6030      	str	r0, [r6, #0]
 801d23e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d242:	d213      	bcs.n	801d26c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d244:	4643      	mov	r3, r8
 801d246:	4639      	mov	r1, r7
 801d248:	4620      	mov	r0, r4
 801d24a:	f7ff fded 	bl	801ce28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d24e:	6030      	str	r0, [r6, #0]
 801d250:	6833      	ldr	r3, [r6, #0]
 801d252:	b143      	cbz	r3, 801d266 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801d254:	7b5a      	ldrb	r2, [r3, #13]
 801d256:	7a9b      	ldrb	r3, [r3, #10]
 801d258:	0052      	lsls	r2, r2, #1
 801d25a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801d25e:	4313      	orrs	r3, r2
 801d260:	bf0c      	ite	eq
 801d262:	2301      	moveq	r3, #1
 801d264:	2300      	movne	r3, #0
 801d266:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801d26a:	e7d9      	b.n	801d220 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801d26c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801d270:	b29b      	uxth	r3, r3
 801d272:	2b7f      	cmp	r3, #127	@ 0x7f
 801d274:	d804      	bhi.n	801d280 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801d276:	4639      	mov	r1, r7
 801d278:	4620      	mov	r0, r4
 801d27a:	f7ff fcc9 	bl	801cc10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d27e:	e7e6      	b.n	801d24e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801d280:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801d284:	2b00      	cmp	r3, #0
 801d286:	d0e3      	beq.n	801d250 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d288:	f640 1302 	movw	r3, #2306	@ 0x902
 801d28c:	429d      	cmp	r5, r3
 801d28e:	d1df      	bne.n	801d250 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d290:	4601      	mov	r1, r0
 801d292:	4620      	mov	r0, r4
 801d294:	f7ff fc8c 	bl	801cbb0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d298:	e7d9      	b.n	801d24e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801d29a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d29a:	b510      	push	{r4, lr}
 801d29c:	4604      	mov	r4, r0
 801d29e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801d2a2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d2a4:	b1e1      	cbz	r1, 801d2e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d2a6:	2b0a      	cmp	r3, #10
 801d2a8:	d02d      	beq.n	801d306 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d2aa:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801d2ac:	3901      	subs	r1, #1
 801d2ae:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d2b2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801d2b4:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801d2b8:	1c51      	adds	r1, r2, #1
 801d2ba:	b289      	uxth	r1, r1
 801d2bc:	2901      	cmp	r1, #1
 801d2be:	bf8a      	itet	hi
 801d2c0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d2c4:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801d2c6:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801d2c8:	1c5a      	adds	r2, r3, #1
 801d2ca:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d2cc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d2ce:	4413      	add	r3, r2
 801d2d0:	b29b      	uxth	r3, r3
 801d2d2:	2b09      	cmp	r3, #9
 801d2d4:	bf88      	it	hi
 801d2d6:	3b0a      	subhi	r3, #10
 801d2d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d2dc:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d2de:	e7de      	b.n	801d29e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d2e0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d2e2:	2b0a      	cmp	r3, #10
 801d2e4:	d00f      	beq.n	801d306 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d2e6:	4620      	mov	r0, r4
 801d2e8:	f7ff fc10 	bl	801cb0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d2ec:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d2ee:	1c5a      	adds	r2, r3, #1
 801d2f0:	8722      	strh	r2, [r4, #56]	@ 0x38
 801d2f2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d2f4:	4413      	add	r3, r2
 801d2f6:	b29b      	uxth	r3, r3
 801d2f8:	2b09      	cmp	r3, #9
 801d2fa:	bf88      	it	hi
 801d2fc:	3b0a      	subhi	r3, #10
 801d2fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d302:	8458      	strh	r0, [r3, #34]	@ 0x22
 801d304:	e7ec      	b.n	801d2e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d306:	bd10      	pop	{r4, pc}

0801d308 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d308:	b538      	push	{r3, r4, r5, lr}
 801d30a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801d30c:	4604      	mov	r4, r0
 801d30e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d312:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801d314:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801d316:	3a01      	subs	r2, #1
 801d318:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d31a:	1c5a      	adds	r2, r3, #1
 801d31c:	b292      	uxth	r2, r2
 801d31e:	2a09      	cmp	r2, #9
 801d320:	bf8a      	itet	hi
 801d322:	3b09      	subhi	r3, #9
 801d324:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801d326:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801d328:	f7ff ffb7 	bl	801d29a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d32c:	8c23      	ldrh	r3, [r4, #32]
 801d32e:	2b01      	cmp	r3, #1
 801d330:	bf9c      	itt	ls
 801d332:	3301      	addls	r3, #1
 801d334:	8423      	strhls	r3, [r4, #32]
 801d336:	8be3      	ldrh	r3, [r4, #30]
 801d338:	b90b      	cbnz	r3, 801d33e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d33a:	2302      	movs	r3, #2
 801d33c:	83e3      	strh	r3, [r4, #30]
 801d33e:	8be3      	ldrh	r3, [r4, #30]
 801d340:	4628      	mov	r0, r5
 801d342:	3b01      	subs	r3, #1
 801d344:	b29b      	uxth	r3, r3
 801d346:	83e3      	strh	r3, [r4, #30]
 801d348:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d34c:	8365      	strh	r5, [r4, #26]
 801d34e:	bd38      	pop	{r3, r4, r5, pc}

0801d350 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d350:	428a      	cmp	r2, r1
 801d352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d356:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801d358:	d932      	bls.n	801d3c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d35a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801d35c:	1a54      	subs	r4, r2, r1
 801d35e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801d362:	19ee      	adds	r6, r5, r7
 801d364:	fa1f fe84 	uxth.w	lr, r4
 801d368:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801d36c:	3e01      	subs	r6, #1
 801d36e:	b2b4      	uxth	r4, r6
 801d370:	eba4 090e 	sub.w	r9, r4, lr
 801d374:	fa1f f989 	uxth.w	r9, r9
 801d378:	2c09      	cmp	r4, #9
 801d37a:	4626      	mov	r6, r4
 801d37c:	bf88      	it	hi
 801d37e:	f1a4 060a 	subhi.w	r6, r4, #10
 801d382:	f1bc 0f00 	cmp.w	ip, #0
 801d386:	f104 34ff 	add.w	r4, r4, #4294967295
 801d38a:	bf08      	it	eq
 801d38c:	f04f 0c02 	moveq.w	ip, #2
 801d390:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d394:	b2a4      	uxth	r4, r4
 801d396:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d39a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801d39e:	454c      	cmp	r4, r9
 801d3a0:	fa1f fc8c 	uxth.w	ip, ip
 801d3a4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d3a8:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801d3ac:	d1e4      	bne.n	801d378 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d3ae:	eba5 050e 	sub.w	r5, r5, lr
 801d3b2:	eb0e 0408 	add.w	r4, lr, r8
 801d3b6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801d3ba:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d3bc:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801d3c0:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801d3c2:	250a      	movs	r5, #10
 801d3c4:	1a64      	subs	r4, r4, r1
 801d3c6:	4439      	add	r1, r7
 801d3c8:	b289      	uxth	r1, r1
 801d3ca:	8704      	strh	r4, [r0, #56]	@ 0x38
 801d3cc:	2909      	cmp	r1, #9
 801d3ce:	bf88      	it	hi
 801d3d0:	390a      	subhi	r1, #10
 801d3d2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d3d4:	b18a      	cbz	r2, 801d3fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d3d6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801d3d8:	3a01      	subs	r2, #1
 801d3da:	3101      	adds	r1, #1
 801d3dc:	b292      	uxth	r2, r2
 801d3de:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d3e2:	8701      	strh	r1, [r0, #56]	@ 0x38
 801d3e4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d3e6:	b901      	cbnz	r1, 801d3ea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801d3e8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d3ea:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801d3ec:	3901      	subs	r1, #1
 801d3ee:	b289      	uxth	r1, r1
 801d3f0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801d3f2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d3f6:	844c      	strh	r4, [r1, #34]	@ 0x22
 801d3f8:	e7ec      	b.n	801d3d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801d3fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3fe:	f7ff bf4c 	b.w	801d29a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d402 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d402:	b570      	push	{r4, r5, r6, lr}
 801d404:	2500      	movs	r5, #0
 801d406:	4295      	cmp	r5, r2
 801d408:	d011      	beq.n	801d42e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d40a:	8bc4      	ldrh	r4, [r0, #30]
 801d40c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d410:	4414      	add	r4, r2
 801d412:	3c01      	subs	r4, #1
 801d414:	1b64      	subs	r4, r4, r5
 801d416:	b2a4      	uxth	r4, r4
 801d418:	2c01      	cmp	r4, #1
 801d41a:	bf88      	it	hi
 801d41c:	3c02      	subhi	r4, #2
 801d41e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d422:	8b64      	ldrh	r4, [r4, #26]
 801d424:	42b4      	cmp	r4, r6
 801d426:	d117      	bne.n	801d458 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d428:	3501      	adds	r5, #1
 801d42a:	b2ad      	uxth	r5, r5
 801d42c:	e7eb      	b.n	801d406 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d42e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d432:	2400      	movs	r4, #0
 801d434:	4413      	add	r3, r2
 801d436:	b2a2      	uxth	r2, r4
 801d438:	429a      	cmp	r2, r3
 801d43a:	da0f      	bge.n	801d45c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d43c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801d43e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d442:	3401      	adds	r4, #1
 801d444:	4432      	add	r2, r6
 801d446:	b292      	uxth	r2, r2
 801d448:	2a09      	cmp	r2, #9
 801d44a:	bf88      	it	hi
 801d44c:	3a0a      	subhi	r2, #10
 801d44e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d452:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801d454:	42aa      	cmp	r2, r5
 801d456:	d0ee      	beq.n	801d436 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d458:	2000      	movs	r0, #0
 801d45a:	bd70      	pop	{r4, r5, r6, pc}
 801d45c:	2001      	movs	r0, #1
 801d45e:	e7fc      	b.n	801d45a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d460 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d464:	4605      	mov	r5, r0
 801d466:	4616      	mov	r6, r2
 801d468:	1c8c      	adds	r4, r1, #2
 801d46a:	8809      	ldrh	r1, [r1, #0]
 801d46c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d470:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d474:	42b3      	cmp	r3, r6
 801d476:	d124      	bne.n	801d4c2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d478:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d47c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d480:	f001 070f 	and.w	r7, r1, #15
 801d484:	4652      	mov	r2, sl
 801d486:	f8cd 8000 	str.w	r8, [sp]
 801d48a:	464b      	mov	r3, r9
 801d48c:	4621      	mov	r1, r4
 801d48e:	4628      	mov	r0, r5
 801d490:	f7ff ffb7 	bl	801d402 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d494:	4683      	mov	fp, r0
 801d496:	b168      	cbz	r0, 801d4b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d498:	eb0a 0109 	add.w	r1, sl, r9
 801d49c:	463a      	mov	r2, r7
 801d49e:	4628      	mov	r0, r5
 801d4a0:	4441      	add	r1, r8
 801d4a2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d4a6:	4649      	mov	r1, r9
 801d4a8:	f7ff ff52 	bl	801d350 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d4ac:	4658      	mov	r0, fp
 801d4ae:	b003      	add	sp, #12
 801d4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4b4:	eb07 010a 	add.w	r1, r7, sl
 801d4b8:	4449      	add	r1, r9
 801d4ba:	4441      	add	r1, r8
 801d4bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d4c0:	e7d2      	b.n	801d468 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d4c2:	f04f 0b00 	mov.w	fp, #0
 801d4c6:	e7f1      	b.n	801d4ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d4c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d4c8:	b570      	push	{r4, r5, r6, lr}
 801d4ca:	8810      	ldrh	r0, [r2, #0]
 801d4cc:	4298      	cmp	r0, r3
 801d4ce:	d817      	bhi.n	801d500 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d4d0:	1e48      	subs	r0, r1, #1
 801d4d2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d4d6:	4298      	cmp	r0, r3
 801d4d8:	d312      	bcc.n	801d500 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d4da:	2400      	movs	r4, #0
 801d4dc:	428c      	cmp	r4, r1
 801d4de:	d20f      	bcs.n	801d500 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d4e0:	1860      	adds	r0, r4, r1
 801d4e2:	1040      	asrs	r0, r0, #1
 801d4e4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d4e8:	0085      	lsls	r5, r0, #2
 801d4ea:	42b3      	cmp	r3, r6
 801d4ec:	d902      	bls.n	801d4f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d4ee:	3001      	adds	r0, #1
 801d4f0:	b284      	uxth	r4, r0
 801d4f2:	e7f3      	b.n	801d4dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d4f4:	d201      	bcs.n	801d4fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d4f6:	b281      	uxth	r1, r0
 801d4f8:	e7f0      	b.n	801d4dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d4fa:	442a      	add	r2, r5
 801d4fc:	8850      	ldrh	r0, [r2, #2]
 801d4fe:	bd70      	pop	{r4, r5, r6, pc}
 801d500:	2000      	movs	r0, #0
 801d502:	e7fc      	b.n	801d4fe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d504 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d508:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801d50a:	4604      	mov	r4, r0
 801d50c:	260b      	movs	r6, #11
 801d50e:	886f      	ldrh	r7, [r5, #2]
 801d510:	087f      	lsrs	r7, r7, #1
 801d512:	3e01      	subs	r6, #1
 801d514:	d013      	beq.n	801d53e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d516:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d518:	462a      	mov	r2, r5
 801d51a:	4639      	mov	r1, r7
 801d51c:	4620      	mov	r0, r4
 801d51e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d522:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801d526:	4643      	mov	r3, r8
 801d528:	f7ff ffce 	bl	801d4c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d52c:	b138      	cbz	r0, 801d53e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d52e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d532:	4642      	mov	r2, r8
 801d534:	4620      	mov	r0, r4
 801d536:	f7ff ff93 	bl	801d460 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d53a:	2800      	cmp	r0, #0
 801d53c:	d1e9      	bne.n	801d512 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d544 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d544:	b570      	push	{r4, r5, r6, lr}
 801d546:	694a      	ldr	r2, [r1, #20]
 801d548:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801d54a:	684b      	ldr	r3, [r1, #4]
 801d54c:	1b54      	subs	r4, r2, r5
 801d54e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801d550:	f000 8106 	beq.w	801d760 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d554:	1b9b      	subs	r3, r3, r6
 801d556:	d003      	beq.n	801d560 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d558:	4363      	muls	r3, r4
 801d55a:	2210      	movs	r2, #16
 801d55c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d560:	680c      	ldr	r4, [r1, #0]
 801d562:	698a      	ldr	r2, [r1, #24]
 801d564:	1b65      	subs	r5, r4, r5
 801d566:	f000 80fd 	beq.w	801d764 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d56a:	1b92      	subs	r2, r2, r6
 801d56c:	d003      	beq.n	801d576 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d56e:	436a      	muls	r2, r5
 801d570:	2410      	movs	r4, #16
 801d572:	fb92 f2f4 	sdiv	r2, r2, r4
 801d576:	1a9b      	subs	r3, r3, r2
 801d578:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801d7a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d57c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d580:	460a      	mov	r2, r1
 801d582:	ee07 3a90 	vmov	s15, r3
 801d586:	f100 040c 	add.w	r4, r0, #12
 801d58a:	4603      	mov	r3, r0
 801d58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d590:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d594:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d598:	eeb1 6a43 	vneg.f32	s12, s6
 801d59c:	edd2 7a02 	vldr	s15, [r2, #8]
 801d5a0:	3214      	adds	r2, #20
 801d5a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d5a6:	ece3 6a01 	vstmia	r3!, {s13}
 801d5aa:	429c      	cmp	r4, r3
 801d5ac:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d5b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d5b4:	edc3 7a02 	vstr	s15, [r3, #8]
 801d5b8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d5bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d5c0:	edc3 7a05 	vstr	s15, [r3, #20]
 801d5c4:	d1ea      	bne.n	801d59c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d5c6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d5c8:	698b      	ldr	r3, [r1, #24]
 801d5ca:	edd0 4a02 	vldr	s9, [r0, #8]
 801d5ce:	1a9b      	subs	r3, r3, r2
 801d5d0:	edd0 3a00 	vldr	s7, [r0]
 801d5d4:	edd0 6a01 	vldr	s13, [r0, #4]
 801d5d8:	ee07 3a90 	vmov	s15, r3
 801d5dc:	684b      	ldr	r3, [r1, #4]
 801d5de:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d5e2:	ed90 5a05 	vldr	s10, [r0, #20]
 801d5e6:	1a9b      	subs	r3, r3, r2
 801d5e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5ec:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d5f0:	ed90 2a03 	vldr	s4, [r0, #12]
 801d5f4:	ee07 3a10 	vmov	s14, r3
 801d5f8:	edd0 5a04 	vldr	s11, [r0, #16]
 801d5fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d600:	ed90 1a07 	vldr	s2, [r0, #28]
 801d604:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d608:	edd0 2a06 	vldr	s5, [r0, #24]
 801d60c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d610:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d614:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d618:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d61c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d620:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d624:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801d628:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d62a:	694a      	ldr	r2, [r1, #20]
 801d62c:	1b13      	subs	r3, r2, r4
 801d62e:	ee07 3a10 	vmov	s14, r3
 801d632:	680b      	ldr	r3, [r1, #0]
 801d634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d638:	1b1b      	subs	r3, r3, r4
 801d63a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d63e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d642:	ee07 3a10 	vmov	s14, r3
 801d646:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d64a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d64e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d652:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d656:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801d65a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d65c:	698b      	ldr	r3, [r1, #24]
 801d65e:	1a9b      	subs	r3, r3, r2
 801d660:	ee06 3a90 	vmov	s13, r3
 801d664:	684b      	ldr	r3, [r1, #4]
 801d666:	1a9b      	subs	r3, r3, r2
 801d668:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d66c:	ee07 3a10 	vmov	s14, r3
 801d670:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d678:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d67c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d680:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d684:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d688:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801d68c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d68e:	694a      	ldr	r2, [r1, #20]
 801d690:	1b13      	subs	r3, r2, r4
 801d692:	ee07 3a10 	vmov	s14, r3
 801d696:	680b      	ldr	r3, [r1, #0]
 801d698:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d69c:	1b1b      	subs	r3, r3, r4
 801d69e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d6a2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d6a6:	ee07 3a10 	vmov	s14, r3
 801d6aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d6b2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d6b6:	edd0 5a08 	vldr	s11, [r0, #32]
 801d6ba:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d6be:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d6c2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d6c6:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801d6ca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d6cc:	698b      	ldr	r3, [r1, #24]
 801d6ce:	1a9b      	subs	r3, r3, r2
 801d6d0:	ee07 3a10 	vmov	s14, r3
 801d6d4:	684b      	ldr	r3, [r1, #4]
 801d6d6:	1a9b      	subs	r3, r3, r2
 801d6d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6dc:	ee01 3a90 	vmov	s3, r3
 801d6e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d6e4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d6e8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d6ec:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d6f0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d6f4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d6f8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801d6fc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d6fe:	694a      	ldr	r2, [r1, #20]
 801d700:	1b13      	subs	r3, r2, r4
 801d702:	ee03 3a10 	vmov	s6, r3
 801d706:	680b      	ldr	r3, [r1, #0]
 801d708:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d70c:	1b1b      	subs	r3, r3, r4
 801d70e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d712:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d716:	ee03 3a10 	vmov	s6, r3
 801d71a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d71e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d722:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d726:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d72a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d72e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801d732:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d736:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d73e:	dd13      	ble.n	801d768 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d744:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d748:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801d74a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d74e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d756:	dd15      	ble.n	801d784 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d758:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d75c:	6403      	str	r3, [r0, #64]	@ 0x40
 801d75e:	bd70      	pop	{r4, r5, r6, pc}
 801d760:	4623      	mov	r3, r4
 801d762:	e6fd      	b.n	801d560 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d764:	462a      	mov	r2, r5
 801d766:	e706      	b.n	801d576 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d768:	d502      	bpl.n	801d770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d76a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d76e:	e7e9      	b.n	801d744 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d770:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d774:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d778:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d780:	dade      	bge.n	801d740 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d782:	e7f2      	b.n	801d76a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d784:	d502      	bpl.n	801d78c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d786:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d78a:	e7e7      	b.n	801d75c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d78c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d790:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d794:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d79c:	dadc      	bge.n	801d758 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d79e:	e7f2      	b.n	801d786 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d7a0:	3d800000 	.word	0x3d800000

0801d7a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7a8:	2714      	movs	r7, #20
 801d7aa:	435f      	muls	r7, r3
 801d7ac:	eb02 0c07 	add.w	ip, r2, r7
 801d7b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d7b4:	f115 0e0f 	adds.w	lr, r5, #15
 801d7b8:	f100 80a2 	bmi.w	801d900 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d7bc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d7c0:	9c08      	ldr	r4, [sp, #32]
 801d7c2:	2614      	movs	r6, #20
 801d7c4:	f8c0 e014 	str.w	lr, [r0, #20]
 801d7c8:	4366      	muls	r6, r4
 801d7ca:	eb02 0806 	add.w	r8, r2, r6
 801d7ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d7d2:	f115 040f 	adds.w	r4, r5, #15
 801d7d6:	f100 809f 	bmi.w	801d918 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d7da:	1124      	asrs	r4, r4, #4
 801d7dc:	eba4 040e 	sub.w	r4, r4, lr
 801d7e0:	6184      	str	r4, [r0, #24]
 801d7e2:	2c00      	cmp	r4, #0
 801d7e4:	f000 808a 	beq.w	801d8fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d7e8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d7ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d7f0:	5995      	ldr	r5, [r2, r6]
 801d7f2:	eba4 0809 	sub.w	r8, r4, r9
 801d7f6:	59d4      	ldr	r4, [r2, r7]
 801d7f8:	eba5 0a04 	sub.w	sl, r5, r4
 801d7fc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d800:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d804:	fb0e fe05 	mul.w	lr, lr, r5
 801d808:	fb0a ee19 	mls	lr, sl, r9, lr
 801d80c:	fb08 e404 	mla	r4, r8, r4, lr
 801d810:	3c01      	subs	r4, #1
 801d812:	19a4      	adds	r4, r4, r6
 801d814:	f100 808c 	bmi.w	801d930 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d818:	fb94 fef6 	sdiv	lr, r4, r6
 801d81c:	fb06 441e 	mls	r4, r6, lr, r4
 801d820:	f8c0 e000 	str.w	lr, [r0]
 801d824:	6104      	str	r4, [r0, #16]
 801d826:	2d00      	cmp	r5, #0
 801d828:	f2c0 8095 	blt.w	801d956 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d82c:	fb95 f4f6 	sdiv	r4, r5, r6
 801d830:	fb06 5514 	mls	r5, r6, r4, r5
 801d834:	6044      	str	r4, [r0, #4]
 801d836:	6085      	str	r5, [r0, #8]
 801d838:	60c6      	str	r6, [r0, #12]
 801d83a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d83e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d842:	6945      	ldr	r5, [r0, #20]
 801d844:	59d2      	ldr	r2, [r2, r7]
 801d846:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d84a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801d978 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d84e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801d852:	ee07 4a10 	vmov	s14, r4
 801d856:	6804      	ldr	r4, [r0, #0]
 801d858:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d85c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d860:	ee07 2a90 	vmov	s15, r2
 801d864:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d86c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d870:	edd3 6a00 	vldr	s13, [r3]
 801d874:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d878:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801d87c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d880:	edc0 6a07 	vstr	s13, [r0, #28]
 801d884:	edd0 6a01 	vldr	s13, [r0, #4]
 801d888:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801d88c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d890:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801d894:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d898:	ed80 6a08 	vstr	s12, [r0, #32]
 801d89c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801d89e:	6242      	str	r2, [r0, #36]	@ 0x24
 801d8a0:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801d8a4:	ed93 6a03 	vldr	s12, [r3, #12]
 801d8a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d8ac:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801d8b0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d8b4:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801d8b8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801d8bc:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801d8c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d8c4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801d8c8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d8ca:	6302      	str	r2, [r0, #48]	@ 0x30
 801d8cc:	ed93 6a06 	vldr	s12, [r3, #24]
 801d8d0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801d8d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d8d8:	eeb0 7a46 	vmov.f32	s14, s12
 801d8dc:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801d8e0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d8e4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801d8e8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801d8ec:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801d8f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d8f4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801d8f8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801d8fa:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801d8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d900:	2410      	movs	r4, #16
 801d902:	f1c5 0501 	rsb	r5, r5, #1
 801d906:	fb9e fef4 	sdiv	lr, lr, r4
 801d90a:	f015 050f 	ands.w	r5, r5, #15
 801d90e:	bf18      	it	ne
 801d910:	2501      	movne	r5, #1
 801d912:	ebae 0e05 	sub.w	lr, lr, r5
 801d916:	e753      	b.n	801d7c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801d918:	f04f 0910 	mov.w	r9, #16
 801d91c:	f1c5 0501 	rsb	r5, r5, #1
 801d920:	fb94 f4f9 	sdiv	r4, r4, r9
 801d924:	f015 050f 	ands.w	r5, r5, #15
 801d928:	bf18      	it	ne
 801d92a:	2501      	movne	r5, #1
 801d92c:	1b64      	subs	r4, r4, r5
 801d92e:	e755      	b.n	801d7dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801d930:	4264      	negs	r4, r4
 801d932:	fb94 fef6 	sdiv	lr, r4, r6
 801d936:	f1ce 0800 	rsb	r8, lr, #0
 801d93a:	fb06 441e 	mls	r4, r6, lr, r4
 801d93e:	f8c0 8000 	str.w	r8, [r0]
 801d942:	6104      	str	r4, [r0, #16]
 801d944:	2c00      	cmp	r4, #0
 801d946:	f43f af6e 	beq.w	801d826 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801d94a:	ea6f 0e0e 	mvn.w	lr, lr
 801d94e:	1b34      	subs	r4, r6, r4
 801d950:	f8c0 e000 	str.w	lr, [r0]
 801d954:	e766      	b.n	801d824 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801d956:	426d      	negs	r5, r5
 801d958:	fb95 f4f6 	sdiv	r4, r5, r6
 801d95c:	f1c4 0e00 	rsb	lr, r4, #0
 801d960:	fb06 5514 	mls	r5, r6, r4, r5
 801d964:	f8c0 e004 	str.w	lr, [r0, #4]
 801d968:	6085      	str	r5, [r0, #8]
 801d96a:	2d00      	cmp	r5, #0
 801d96c:	f43f af64 	beq.w	801d838 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801d970:	43e4      	mvns	r4, r4
 801d972:	1b75      	subs	r5, r6, r5
 801d974:	6044      	str	r4, [r0, #4]
 801d976:	e75e      	b.n	801d836 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801d978:	3d800000 	.word	0x3d800000

0801d97c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d97c:	4602      	mov	r2, r0
 801d97e:	b148      	cbz	r0, 801d994 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d980:	2300      	movs	r3, #0
 801d982:	b298      	uxth	r0, r3
 801d984:	3301      	adds	r3, #1
 801d986:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d98a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d98e:	2900      	cmp	r1, #0
 801d990:	d1f7      	bne.n	801d982 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d992:	4770      	bx	lr
 801d994:	4770      	bx	lr

0801d996 <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 801d996:	b530      	push	{r4, r5, lr}
 801d998:	4604      	mov	r4, r0
 801d99a:	b161      	cbz	r1, 801d9b6 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 801d99c:	b150      	cbz	r0, 801d9b4 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801d99e:	2300      	movs	r3, #0
 801d9a0:	b298      	uxth	r0, r3
 801d9a2:	4290      	cmp	r0, r2
 801d9a4:	d206      	bcs.n	801d9b4 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801d9a6:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801d9aa:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d9ae:	3301      	adds	r3, #1
 801d9b0:	2d00      	cmp	r5, #0
 801d9b2:	d1f5      	bne.n	801d9a0 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 801d9b4:	bd30      	pop	{r4, r5, pc}
 801d9b6:	4608      	mov	r0, r1
 801d9b8:	e7fc      	b.n	801d9b4 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

0801d9ba <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d9ba:	b530      	push	{r4, r5, lr}
 801d9bc:	4604      	mov	r4, r0
 801d9be:	b159      	cbz	r1, 801d9d8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d9c0:	b148      	cbz	r0, 801d9d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	b298      	uxth	r0, r3
 801d9c6:	4282      	cmp	r2, r0
 801d9c8:	d905      	bls.n	801d9d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d9ca:	5ccd      	ldrb	r5, [r1, r3]
 801d9cc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d9d0:	3301      	adds	r3, #1
 801d9d2:	2d00      	cmp	r5, #0
 801d9d4:	d1f6      	bne.n	801d9c4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d9d6:	bd30      	pop	{r4, r5, pc}
 801d9d8:	4608      	mov	r0, r1
 801d9da:	e7fc      	b.n	801d9d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d9dc <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801d9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9de:	b08b      	sub	sp, #44	@ 0x2c
 801d9e0:	468c      	mov	ip, r1
 801d9e2:	4604      	mov	r4, r0
 801d9e4:	2100      	movs	r1, #0
 801d9e6:	261f      	movs	r6, #31
 801d9e8:	af01      	add	r7, sp, #4
 801d9ea:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801d9ee:	1e71      	subs	r1, r6, #1
 801d9f0:	fb94 fef3 	sdiv	lr, r4, r3
 801d9f4:	fb03 441e 	mls	r4, r3, lr, r4
 801d9f8:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d9fc:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801da00:	b2ec      	uxtb	r4, r5
 801da02:	2d09      	cmp	r5, #9
 801da04:	bfd4      	ite	le
 801da06:	3430      	addle	r4, #48	@ 0x30
 801da08:	3457      	addgt	r4, #87	@ 0x57
 801da0a:	b2e4      	uxtb	r4, r4
 801da0c:	55bc      	strb	r4, [r7, r6]
 801da0e:	4674      	mov	r4, lr
 801da10:	b974      	cbnz	r4, 801da30 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801da12:	2800      	cmp	r0, #0
 801da14:	da05      	bge.n	801da22 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801da16:	ab0a      	add	r3, sp, #40	@ 0x28
 801da18:	4419      	add	r1, r3
 801da1a:	232d      	movs	r3, #45	@ 0x2d
 801da1c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801da20:	1eb1      	subs	r1, r6, #2
 801da22:	3101      	adds	r1, #1
 801da24:	4660      	mov	r0, ip
 801da26:	4439      	add	r1, r7
 801da28:	f7ff ffc7 	bl	801d9ba <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801da2c:	b00b      	add	sp, #44	@ 0x2c
 801da2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da30:	460e      	mov	r6, r1
 801da32:	e7dc      	b.n	801d9ee <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801da34 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801da34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da36:	468c      	mov	ip, r1
 801da38:	b08b      	sub	sp, #44	@ 0x2c
 801da3a:	2100      	movs	r1, #0
 801da3c:	ae01      	add	r6, sp, #4
 801da3e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801da42:	211f      	movs	r1, #31
 801da44:	fbb0 f7f3 	udiv	r7, r0, r3
 801da48:	fb03 0517 	mls	r5, r3, r7, r0
 801da4c:	4638      	mov	r0, r7
 801da4e:	b2ec      	uxtb	r4, r5
 801da50:	2d09      	cmp	r5, #9
 801da52:	bfd4      	ite	le
 801da54:	3430      	addle	r4, #48	@ 0x30
 801da56:	3457      	addgt	r4, #87	@ 0x57
 801da58:	b2e4      	uxtb	r4, r4
 801da5a:	558c      	strb	r4, [r1, r6]
 801da5c:	1e4c      	subs	r4, r1, #1
 801da5e:	b92f      	cbnz	r7, 801da6c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801da60:	4431      	add	r1, r6
 801da62:	4660      	mov	r0, ip
 801da64:	f7ff ffa9 	bl	801d9ba <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801da68:	b00b      	add	sp, #44	@ 0x2c
 801da6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da6c:	4621      	mov	r1, r4
 801da6e:	e7e9      	b.n	801da44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801da70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da74:	b085      	sub	sp, #20
 801da76:	4691      	mov	r9, r2
 801da78:	6802      	ldr	r2, [r0, #0]
 801da7a:	4688      	mov	r8, r1
 801da7c:	461c      	mov	r4, r3
 801da7e:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801da82:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801da86:	4683      	mov	fp, r0
 801da88:	4610      	mov	r0, r2
 801da8a:	9103      	str	r1, [sp, #12]
 801da8c:	9302      	str	r3, [sp, #8]
 801da8e:	9201      	str	r2, [sp, #4]
 801da90:	f7ff ff74 	bl	801d97c <_ZN8touchgfx7Unicode6strlenEPKt>
 801da94:	f1b8 0f00 	cmp.w	r8, #0
 801da98:	bf0c      	ite	eq
 801da9a:	4684      	moveq	ip, r0
 801da9c:	f100 0c01 	addne.w	ip, r0, #1
 801daa0:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801daa4:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801daa8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801daaa:	fa1f fc8c 	uxth.w	ip, ip
 801daae:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801dab0:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801dab4:	9903      	ldr	r1, [sp, #12]
 801dab6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801daba:	d041      	beq.n	801db40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801dabc:	d834      	bhi.n	801db28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801dabe:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801dac2:	d059      	beq.n	801db78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801dac4:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801dac8:	d03a      	beq.n	801db40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801daca:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801dace:	d034      	beq.n	801db3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801dad0:	2400      	movs	r4, #0
 801dad2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801dad6:	3a01      	subs	r2, #1
 801dad8:	b169      	cbz	r1, 801daf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801dada:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dadc:	458c      	cmp	ip, r1
 801dade:	da09      	bge.n	801daf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801dae0:	eba1 010c 	sub.w	r1, r1, ip
 801dae4:	b289      	uxth	r1, r1
 801dae6:	b933      	cbnz	r3, 801daf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801dae8:	2e00      	cmp	r6, #0
 801daea:	d051      	beq.n	801db90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801daec:	2800      	cmp	r0, #0
 801daee:	d04f      	beq.n	801db90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801daf0:	440c      	add	r4, r1
 801daf2:	b2a4      	uxth	r4, r4
 801daf4:	2100      	movs	r1, #0
 801daf6:	682b      	ldr	r3, [r5, #0]
 801daf8:	4293      	cmp	r3, r2
 801dafa:	da07      	bge.n	801db0c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801dafc:	f1b8 0f00 	cmp.w	r8, #0
 801db00:	d004      	beq.n	801db0c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801db02:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801db06:	682b      	ldr	r3, [r5, #0]
 801db08:	3301      	adds	r3, #1
 801db0a:	602b      	str	r3, [r5, #0]
 801db0c:	2730      	movs	r7, #48	@ 0x30
 801db0e:	2c00      	cmp	r4, #0
 801db10:	d04e      	beq.n	801dbb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801db12:	682e      	ldr	r6, [r5, #0]
 801db14:	3c01      	subs	r4, #1
 801db16:	42b2      	cmp	r2, r6
 801db18:	b2a4      	uxth	r4, r4
 801db1a:	dd49      	ble.n	801dbb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801db1c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801db20:	682b      	ldr	r3, [r5, #0]
 801db22:	3301      	adds	r3, #1
 801db24:	602b      	str	r3, [r5, #0]
 801db26:	e7f2      	b.n	801db0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801db28:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801db2c:	d01d      	beq.n	801db6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801db2e:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801db32:	d002      	beq.n	801db3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801db34:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801db38:	e7c9      	b.n	801dace <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801db3a:	4684      	mov	ip, r0
 801db3c:	f04f 0800 	mov.w	r8, #0
 801db40:	2c00      	cmp	r4, #0
 801db42:	d0c6      	beq.n	801dad2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801db44:	b947      	cbnz	r7, 801db58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801db46:	2801      	cmp	r0, #1
 801db48:	d106      	bne.n	801db58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801db4a:	8814      	ldrh	r4, [r2, #0]
 801db4c:	2c30      	cmp	r4, #48	@ 0x30
 801db4e:	bf02      	ittt	eq
 801db50:	3202      	addeq	r2, #2
 801db52:	4638      	moveq	r0, r7
 801db54:	f8cb 2000 	streq.w	r2, [fp]
 801db58:	45bc      	cmp	ip, r7
 801db5a:	da14      	bge.n	801db86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801db5c:	b2bf      	uxth	r7, r7
 801db5e:	eba7 040c 	sub.w	r4, r7, ip
 801db62:	46bc      	mov	ip, r7
 801db64:	b2a4      	uxth	r4, r4
 801db66:	2600      	movs	r6, #0
 801db68:	e7b3      	b.n	801dad2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801db6a:	4684      	mov	ip, r0
 801db6c:	b16c      	cbz	r4, 801db8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801db6e:	42b8      	cmp	r0, r7
 801db70:	dd00      	ble.n	801db74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801db72:	b2b8      	uxth	r0, r7
 801db74:	2400      	movs	r4, #0
 801db76:	e003      	b.n	801db80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801db78:	f04f 0c01 	mov.w	ip, #1
 801db7c:	2400      	movs	r4, #0
 801db7e:	4660      	mov	r0, ip
 801db80:	4626      	mov	r6, r4
 801db82:	46a0      	mov	r8, r4
 801db84:	e7a5      	b.n	801dad2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801db86:	2400      	movs	r4, #0
 801db88:	e7ed      	b.n	801db66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801db8a:	4626      	mov	r6, r4
 801db8c:	46a0      	mov	r8, r4
 801db8e:	e7a0      	b.n	801dad2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801db90:	2900      	cmp	r1, #0
 801db92:	d0b0      	beq.n	801daf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801db94:	2720      	movs	r7, #32
 801db96:	682e      	ldr	r6, [r5, #0]
 801db98:	2900      	cmp	r1, #0
 801db9a:	d0ac      	beq.n	801daf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801db9c:	3901      	subs	r1, #1
 801db9e:	4296      	cmp	r6, r2
 801dba0:	b289      	uxth	r1, r1
 801dba2:	daa7      	bge.n	801daf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801dba4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801dba8:	682b      	ldr	r3, [r5, #0]
 801dbaa:	3301      	adds	r3, #1
 801dbac:	602b      	str	r3, [r5, #0]
 801dbae:	e7f2      	b.n	801db96 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801dbb0:	b188      	cbz	r0, 801dbd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801dbb2:	682b      	ldr	r3, [r5, #0]
 801dbb4:	3801      	subs	r0, #1
 801dbb6:	429a      	cmp	r2, r3
 801dbb8:	b280      	uxth	r0, r0
 801dbba:	dd0c      	ble.n	801dbd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801dbbc:	f8db 3000 	ldr.w	r3, [fp]
 801dbc0:	1c9c      	adds	r4, r3, #2
 801dbc2:	f8cb 4000 	str.w	r4, [fp]
 801dbc6:	881c      	ldrh	r4, [r3, #0]
 801dbc8:	682b      	ldr	r3, [r5, #0]
 801dbca:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801dbce:	682b      	ldr	r3, [r5, #0]
 801dbd0:	3301      	adds	r3, #1
 801dbd2:	602b      	str	r3, [r5, #0]
 801dbd4:	e7ec      	b.n	801dbb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801dbd6:	2620      	movs	r6, #32
 801dbd8:	b151      	cbz	r1, 801dbf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801dbda:	6828      	ldr	r0, [r5, #0]
 801dbdc:	3901      	subs	r1, #1
 801dbde:	4282      	cmp	r2, r0
 801dbe0:	b289      	uxth	r1, r1
 801dbe2:	dd05      	ble.n	801dbf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801dbe4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801dbe8:	682b      	ldr	r3, [r5, #0]
 801dbea:	3301      	adds	r3, #1
 801dbec:	602b      	str	r3, [r5, #0]
 801dbee:	e7f3      	b.n	801dbd8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801dbf0:	b005      	add	sp, #20
 801dbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dbf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801dbf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbfa:	2400      	movs	r4, #0
 801dbfc:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801dc00:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801dc04:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801dc08:	8014      	strh	r4, [r2, #0]
 801dc0a:	701c      	strb	r4, [r3, #0]
 801dc0c:	f888 4000 	strb.w	r4, [r8]
 801dc10:	f88c 4000 	strb.w	r4, [ip]
 801dc14:	f88e 4000 	strb.w	r4, [lr]
 801dc18:	703c      	strb	r4, [r7, #0]
 801dc1a:	6804      	ldr	r4, [r0, #0]
 801dc1c:	b1a4      	cbz	r4, 801dc48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801dc1e:	8824      	ldrh	r4, [r4, #0]
 801dc20:	f04f 0901 	mov.w	r9, #1
 801dc24:	b314      	cbz	r4, 801dc6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801dc26:	2c2b      	cmp	r4, #43	@ 0x2b
 801dc28:	d001      	beq.n	801dc2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801dc2a:	2c20      	cmp	r4, #32
 801dc2c:	d110      	bne.n	801dc50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801dc2e:	8014      	strh	r4, [r2, #0]
 801dc30:	6804      	ldr	r4, [r0, #0]
 801dc32:	b10c      	cbz	r4, 801dc38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801dc34:	3402      	adds	r4, #2
 801dc36:	6004      	str	r4, [r0, #0]
 801dc38:	680c      	ldr	r4, [r1, #0]
 801dc3a:	b10c      	cbz	r4, 801dc40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801dc3c:	3401      	adds	r4, #1
 801dc3e:	600c      	str	r4, [r1, #0]
 801dc40:	6804      	ldr	r4, [r0, #0]
 801dc42:	b17c      	cbz	r4, 801dc64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801dc44:	8824      	ldrh	r4, [r4, #0]
 801dc46:	e7ed      	b.n	801dc24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801dc48:	680c      	ldr	r4, [r1, #0]
 801dc4a:	b17c      	cbz	r4, 801dc6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801dc4c:	7824      	ldrb	r4, [r4, #0]
 801dc4e:	e7e7      	b.n	801dc20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801dc50:	2c2d      	cmp	r4, #45	@ 0x2d
 801dc52:	d102      	bne.n	801dc5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801dc54:	f883 9000 	strb.w	r9, [r3]
 801dc58:	e7ea      	b.n	801dc30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801dc5a:	2c23      	cmp	r4, #35	@ 0x23
 801dc5c:	d107      	bne.n	801dc6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801dc5e:	f888 9000 	strb.w	r9, [r8]
 801dc62:	e7e5      	b.n	801dc30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801dc64:	680c      	ldr	r4, [r1, #0]
 801dc66:	b10c      	cbz	r4, 801dc6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801dc68:	7824      	ldrb	r4, [r4, #0]
 801dc6a:	e7db      	b.n	801dc24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801dc6c:	2400      	movs	r4, #0
 801dc6e:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801dc72:	2b09      	cmp	r3, #9
 801dc74:	d901      	bls.n	801dc7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801dc76:	2c2a      	cmp	r4, #42	@ 0x2a
 801dc78:	d122      	bne.n	801dcc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dc7a:	2301      	movs	r3, #1
 801dc7c:	2c30      	cmp	r4, #48	@ 0x30
 801dc7e:	f88e 3000 	strb.w	r3, [lr]
 801dc82:	d10d      	bne.n	801dca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801dc84:	f88c 3000 	strb.w	r3, [ip]
 801dc88:	6803      	ldr	r3, [r0, #0]
 801dc8a:	b10b      	cbz	r3, 801dc90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801dc8c:	3302      	adds	r3, #2
 801dc8e:	6003      	str	r3, [r0, #0]
 801dc90:	680b      	ldr	r3, [r1, #0]
 801dc92:	b10b      	cbz	r3, 801dc98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801dc94:	3301      	adds	r3, #1
 801dc96:	600b      	str	r3, [r1, #0]
 801dc98:	6803      	ldr	r3, [r0, #0]
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d02f      	beq.n	801dcfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801dc9e:	881c      	ldrh	r4, [r3, #0]
 801dca0:	2c2a      	cmp	r4, #42	@ 0x2a
 801dca2:	d135      	bne.n	801dd10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801dca4:	f04f 33ff 	mov.w	r3, #4294967295
 801dca8:	6033      	str	r3, [r6, #0]
 801dcaa:	6803      	ldr	r3, [r0, #0]
 801dcac:	b10b      	cbz	r3, 801dcb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801dcae:	3302      	adds	r3, #2
 801dcb0:	6003      	str	r3, [r0, #0]
 801dcb2:	680b      	ldr	r3, [r1, #0]
 801dcb4:	b10b      	cbz	r3, 801dcba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801dcb6:	3301      	adds	r3, #1
 801dcb8:	600b      	str	r3, [r1, #0]
 801dcba:	6803      	ldr	r3, [r0, #0]
 801dcbc:	b31b      	cbz	r3, 801dd06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801dcbe:	881c      	ldrh	r4, [r3, #0]
 801dcc0:	2c2e      	cmp	r4, #46	@ 0x2e
 801dcc2:	d11a      	bne.n	801dcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dcc4:	2301      	movs	r3, #1
 801dcc6:	703b      	strb	r3, [r7, #0]
 801dcc8:	6803      	ldr	r3, [r0, #0]
 801dcca:	b10b      	cbz	r3, 801dcd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801dccc:	3302      	adds	r3, #2
 801dcce:	6003      	str	r3, [r0, #0]
 801dcd0:	680b      	ldr	r3, [r1, #0]
 801dcd2:	b10b      	cbz	r3, 801dcd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801dcd4:	3301      	adds	r3, #1
 801dcd6:	600b      	str	r3, [r1, #0]
 801dcd8:	6803      	ldr	r3, [r0, #0]
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	d036      	beq.n	801dd4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801dcde:	881b      	ldrh	r3, [r3, #0]
 801dce0:	2b2a      	cmp	r3, #42	@ 0x2a
 801dce2:	d137      	bne.n	801dd54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801dce4:	f04f 33ff 	mov.w	r3, #4294967295
 801dce8:	602b      	str	r3, [r5, #0]
 801dcea:	6803      	ldr	r3, [r0, #0]
 801dcec:	b10b      	cbz	r3, 801dcf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801dcee:	3302      	adds	r3, #2
 801dcf0:	6003      	str	r3, [r0, #0]
 801dcf2:	680b      	ldr	r3, [r1, #0]
 801dcf4:	b10b      	cbz	r3, 801dcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dcf6:	3301      	adds	r3, #1
 801dcf8:	600b      	str	r3, [r1, #0]
 801dcfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcfe:	680c      	ldr	r4, [r1, #0]
 801dd00:	b134      	cbz	r4, 801dd10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801dd02:	7824      	ldrb	r4, [r4, #0]
 801dd04:	e7cc      	b.n	801dca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801dd06:	680b      	ldr	r3, [r1, #0]
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d0f6      	beq.n	801dcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801dd0c:	781c      	ldrb	r4, [r3, #0]
 801dd0e:	e7d7      	b.n	801dcc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dd10:	2300      	movs	r3, #0
 801dd12:	220a      	movs	r2, #10
 801dd14:	6033      	str	r3, [r6, #0]
 801dd16:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801dd1a:	fa1f f38c 	uxth.w	r3, ip
 801dd1e:	2b09      	cmp	r3, #9
 801dd20:	d8ce      	bhi.n	801dcc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dd22:	6833      	ldr	r3, [r6, #0]
 801dd24:	fb02 c303 	mla	r3, r2, r3, ip
 801dd28:	6033      	str	r3, [r6, #0]
 801dd2a:	6803      	ldr	r3, [r0, #0]
 801dd2c:	b10b      	cbz	r3, 801dd32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801dd2e:	3302      	adds	r3, #2
 801dd30:	6003      	str	r3, [r0, #0]
 801dd32:	680b      	ldr	r3, [r1, #0]
 801dd34:	b10b      	cbz	r3, 801dd3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801dd36:	3301      	adds	r3, #1
 801dd38:	600b      	str	r3, [r1, #0]
 801dd3a:	6803      	ldr	r3, [r0, #0]
 801dd3c:	b10b      	cbz	r3, 801dd42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801dd3e:	881c      	ldrh	r4, [r3, #0]
 801dd40:	e7e9      	b.n	801dd16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801dd42:	680c      	ldr	r4, [r1, #0]
 801dd44:	2c00      	cmp	r4, #0
 801dd46:	d0e6      	beq.n	801dd16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801dd48:	7824      	ldrb	r4, [r4, #0]
 801dd4a:	e7e4      	b.n	801dd16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801dd4c:	680b      	ldr	r3, [r1, #0]
 801dd4e:	b10b      	cbz	r3, 801dd54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801dd50:	781b      	ldrb	r3, [r3, #0]
 801dd52:	e7c5      	b.n	801dce0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801dd54:	2200      	movs	r2, #0
 801dd56:	240a      	movs	r4, #10
 801dd58:	602a      	str	r2, [r5, #0]
 801dd5a:	3b30      	subs	r3, #48	@ 0x30
 801dd5c:	682a      	ldr	r2, [r5, #0]
 801dd5e:	b29e      	uxth	r6, r3
 801dd60:	2e09      	cmp	r6, #9
 801dd62:	d813      	bhi.n	801dd8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801dd64:	fb04 3302 	mla	r3, r4, r2, r3
 801dd68:	602b      	str	r3, [r5, #0]
 801dd6a:	6803      	ldr	r3, [r0, #0]
 801dd6c:	b10b      	cbz	r3, 801dd72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801dd6e:	3302      	adds	r3, #2
 801dd70:	6003      	str	r3, [r0, #0]
 801dd72:	680b      	ldr	r3, [r1, #0]
 801dd74:	b10b      	cbz	r3, 801dd7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801dd76:	3301      	adds	r3, #1
 801dd78:	600b      	str	r3, [r1, #0]
 801dd7a:	6803      	ldr	r3, [r0, #0]
 801dd7c:	b10b      	cbz	r3, 801dd82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801dd7e:	881b      	ldrh	r3, [r3, #0]
 801dd80:	e7eb      	b.n	801dd5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dd82:	680b      	ldr	r3, [r1, #0]
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d0e8      	beq.n	801dd5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dd88:	781b      	ldrb	r3, [r3, #0]
 801dd8a:	e7e6      	b.n	801dd5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dd8c:	2a06      	cmp	r2, #6
 801dd8e:	bfa8      	it	ge
 801dd90:	2206      	movge	r2, #6
 801dd92:	602a      	str	r2, [r5, #0]
 801dd94:	e7b1      	b.n	801dcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801dd96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801dd96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd9a:	b0a3      	sub	sp, #140	@ 0x8c
 801dd9c:	2600      	movs	r6, #0
 801dd9e:	4607      	mov	r7, r0
 801dda0:	4688      	mov	r8, r1
 801dda2:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801dda6:	4631      	mov	r1, r6
 801dda8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801ddaa:	4648      	mov	r0, r9
 801ddac:	960d      	str	r6, [sp, #52]	@ 0x34
 801ddae:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ddb2:	2242      	movs	r2, #66	@ 0x42
 801ddb4:	f00c f81c 	bl	8029df0 <memset>
 801ddb8:	b15f      	cbz	r7, 801ddd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ddba:	f108 3aff 	add.w	sl, r8, #4294967295
 801ddbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ddc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddc2:	b152      	cbz	r2, 801ddda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ddc4:	8812      	ldrh	r2, [r2, #0]
 801ddc6:	b10a      	cbz	r2, 801ddcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ddc8:	459a      	cmp	sl, r3
 801ddca:	dc2e      	bgt.n	801de2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801ddcc:	2200      	movs	r2, #0
 801ddce:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ddd2:	4638      	mov	r0, r7
 801ddd4:	b023      	add	sp, #140	@ 0x8c
 801ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddda:	9a08      	ldr	r2, [sp, #32]
 801dddc:	2a00      	cmp	r2, #0
 801ddde:	d0f5      	beq.n	801ddcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801dde0:	7812      	ldrb	r2, [r2, #0]
 801dde2:	e7f0      	b.n	801ddc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801dde4:	2d00      	cmp	r5, #0
 801dde6:	d0ea      	beq.n	801ddbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dde8:	782a      	ldrb	r2, [r5, #0]
 801ddea:	b142      	cbz	r2, 801ddfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801ddec:	2a25      	cmp	r2, #37	@ 0x25
 801ddee:	d001      	beq.n	801ddf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801ddf0:	459a      	cmp	sl, r3
 801ddf2:	dc08      	bgt.n	801de06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801ddf4:	f1bb 0f00 	cmp.w	fp, #0
 801ddf8:	d121      	bne.n	801de3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ddfa:	2d00      	cmp	r5, #0
 801ddfc:	d0df      	beq.n	801ddbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ddfe:	782a      	ldrb	r2, [r5, #0]
 801de00:	f04f 0b00 	mov.w	fp, #0
 801de04:	e01d      	b.n	801de42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801de06:	f1bb 0f00 	cmp.w	fp, #0
 801de0a:	d077      	beq.n	801defc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801de0c:	f8bb 2000 	ldrh.w	r2, [fp]
 801de10:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801de14:	f1bb 0f00 	cmp.w	fp, #0
 801de18:	d002      	beq.n	801de20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801de1a:	f10b 0202 	add.w	r2, fp, #2
 801de1e:	9209      	str	r2, [sp, #36]	@ 0x24
 801de20:	b10d      	cbz	r5, 801de26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801de22:	3501      	adds	r5, #1
 801de24:	9508      	str	r5, [sp, #32]
 801de26:	3301      	adds	r3, #1
 801de28:	930d      	str	r3, [sp, #52]	@ 0x34
 801de2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de2c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801de30:	f1bb 0f00 	cmp.w	fp, #0
 801de34:	d0d6      	beq.n	801dde4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801de36:	f8bb 2000 	ldrh.w	r2, [fp]
 801de3a:	2a00      	cmp	r2, #0
 801de3c:	d1d6      	bne.n	801ddec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801de3e:	f8bb 2000 	ldrh.w	r2, [fp]
 801de42:	2a00      	cmp	r2, #0
 801de44:	d0bb      	beq.n	801ddbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801de46:	459a      	cmp	sl, r3
 801de48:	ddb9      	ble.n	801ddbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801de4a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801de4e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801de52:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801de56:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801de5a:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801de5e:	960e      	str	r6, [sp, #56]	@ 0x38
 801de60:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801de64:	960f      	str	r6, [sp, #60]	@ 0x3c
 801de66:	f1bb 0f00 	cmp.w	fp, #0
 801de6a:	d002      	beq.n	801de72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801de6c:	f10b 0302 	add.w	r3, fp, #2
 801de70:	9309      	str	r3, [sp, #36]	@ 0x24
 801de72:	b10d      	cbz	r5, 801de78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801de74:	1c6b      	adds	r3, r5, #1
 801de76:	9308      	str	r3, [sp, #32]
 801de78:	ab0f      	add	r3, sp, #60	@ 0x3c
 801de7a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801de7e:	a908      	add	r1, sp, #32
 801de80:	a809      	add	r0, sp, #36	@ 0x24
 801de82:	9305      	str	r3, [sp, #20]
 801de84:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801de88:	9304      	str	r3, [sp, #16]
 801de8a:	ab0e      	add	r3, sp, #56	@ 0x38
 801de8c:	9303      	str	r3, [sp, #12]
 801de8e:	ab0c      	add	r3, sp, #48	@ 0x30
 801de90:	9302      	str	r3, [sp, #8]
 801de92:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801de96:	9301      	str	r3, [sp, #4]
 801de98:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801de9c:	9300      	str	r3, [sp, #0]
 801de9e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801dea2:	f7ff fea8 	bl	801dbf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801dea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	bfbf      	itttt	lt
 801deac:	6823      	ldrlt	r3, [r4, #0]
 801deae:	3404      	addlt	r4, #4
 801deb0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801deb4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801deb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801deb8:	2b00      	cmp	r3, #0
 801deba:	bfbe      	ittt	lt
 801debc:	6823      	ldrlt	r3, [r4, #0]
 801debe:	3404      	addlt	r4, #4
 801dec0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801dec4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801dec8:	bfb8      	it	lt
 801deca:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801decc:	b1d9      	cbz	r1, 801df06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801dece:	880b      	ldrh	r3, [r1, #0]
 801ded0:	2b69      	cmp	r3, #105	@ 0x69
 801ded2:	d01f      	beq.n	801df14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ded4:	d82f      	bhi.n	801df36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801ded6:	2b58      	cmp	r3, #88	@ 0x58
 801ded8:	d01c      	beq.n	801df14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801deda:	d818      	bhi.n	801df0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801dedc:	2b25      	cmp	r3, #37	@ 0x25
 801dede:	d034      	beq.n	801df4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801dee0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dee2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801dee6:	f1bb 0f00 	cmp.w	fp, #0
 801deea:	f000 80b7 	beq.w	801e05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801deee:	f8bb 5000 	ldrh.w	r5, [fp]
 801def2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801def6:	3301      	adds	r3, #1
 801def8:	930d      	str	r3, [sp, #52]	@ 0x34
 801defa:	e029      	b.n	801df50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801defc:	b10d      	cbz	r5, 801df02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801defe:	782a      	ldrb	r2, [r5, #0]
 801df00:	e786      	b.n	801de10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801df02:	462a      	mov	r2, r5
 801df04:	e784      	b.n	801de10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801df06:	2a00      	cmp	r2, #0
 801df08:	d0ea      	beq.n	801dee0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801df0a:	7813      	ldrb	r3, [r2, #0]
 801df0c:	e7e0      	b.n	801ded0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801df0e:	3b63      	subs	r3, #99	@ 0x63
 801df10:	2b01      	cmp	r3, #1
 801df12:	d8e5      	bhi.n	801dee0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801df14:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801df18:	b329      	cbz	r1, 801df66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801df1a:	880b      	ldrh	r3, [r1, #0]
 801df1c:	2b69      	cmp	r3, #105	@ 0x69
 801df1e:	d063      	beq.n	801dfe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801df20:	d825      	bhi.n	801df6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801df22:	2b63      	cmp	r3, #99	@ 0x63
 801df24:	d038      	beq.n	801df98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801df26:	2b64      	cmp	r3, #100	@ 0x64
 801df28:	d05e      	beq.n	801dfe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801df2a:	2b58      	cmp	r3, #88	@ 0x58
 801df2c:	d07a      	beq.n	801e024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801df2e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801df32:	4625      	mov	r5, r4
 801df34:	e036      	b.n	801dfa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801df36:	2b73      	cmp	r3, #115	@ 0x73
 801df38:	d0ec      	beq.n	801df14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801df3a:	d802      	bhi.n	801df42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801df3c:	2b6f      	cmp	r3, #111	@ 0x6f
 801df3e:	d1cf      	bne.n	801dee0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801df40:	e7e8      	b.n	801df14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801df42:	2b75      	cmp	r3, #117	@ 0x75
 801df44:	d0e6      	beq.n	801df14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801df46:	2b78      	cmp	r3, #120	@ 0x78
 801df48:	e7f9      	b.n	801df3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801df4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801df4c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801df50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df52:	b10b      	cbz	r3, 801df58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801df54:	3302      	adds	r3, #2
 801df56:	9309      	str	r3, [sp, #36]	@ 0x24
 801df58:	9b08      	ldr	r3, [sp, #32]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	f43f af2f 	beq.w	801ddbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801df60:	3301      	adds	r3, #1
 801df62:	9308      	str	r3, [sp, #32]
 801df64:	e72b      	b.n	801ddbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801df66:	2a00      	cmp	r2, #0
 801df68:	d0e1      	beq.n	801df2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801df6a:	7813      	ldrb	r3, [r2, #0]
 801df6c:	e7d6      	b.n	801df1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801df6e:	2b73      	cmp	r3, #115	@ 0x73
 801df70:	d036      	beq.n	801dfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801df72:	d807      	bhi.n	801df84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801df74:	2b6f      	cmp	r3, #111	@ 0x6f
 801df76:	d1da      	bne.n	801df2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801df78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801df7a:	1d25      	adds	r5, r4, #4
 801df7c:	2308      	movs	r3, #8
 801df7e:	eba8 0202 	sub.w	r2, r8, r2
 801df82:	e049      	b.n	801e018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801df84:	2b75      	cmp	r3, #117	@ 0x75
 801df86:	d042      	beq.n	801e00e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801df88:	2b78      	cmp	r3, #120	@ 0x78
 801df8a:	d1d0      	bne.n	801df2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801df8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801df8e:	1d25      	adds	r5, r4, #4
 801df90:	2310      	movs	r3, #16
 801df92:	eba8 0202 	sub.w	r2, r8, r2
 801df96:	e03f      	b.n	801e018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801df98:	6823      	ldr	r3, [r4, #0]
 801df9a:	1d25      	adds	r5, r4, #4
 801df9c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801dfa0:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801dfa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfa6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d051      	beq.n	801e052 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801dfae:	881a      	ldrh	r2, [r3, #0]
 801dfb0:	a80d      	add	r0, sp, #52	@ 0x34
 801dfb2:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801dfb6:	462c      	mov	r4, r5
 801dfb8:	9005      	str	r0, [sp, #20]
 801dfba:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801dfbe:	9004      	str	r0, [sp, #16]
 801dfc0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801dfc2:	9003      	str	r0, [sp, #12]
 801dfc4:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801dfc8:	9002      	str	r0, [sp, #8]
 801dfca:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801dfcc:	9001      	str	r0, [sp, #4]
 801dfce:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801dfd2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801dfd6:	9000      	str	r0, [sp, #0]
 801dfd8:	a810      	add	r0, sp, #64	@ 0x40
 801dfda:	f7ff fd49 	bl	801da70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801dfde:	e7b7      	b.n	801df50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801dfe0:	1d25      	adds	r5, r4, #4
 801dfe2:	6823      	ldr	r3, [r4, #0]
 801dfe4:	9310      	str	r3, [sp, #64]	@ 0x40
 801dfe6:	e7dd      	b.n	801dfa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dfe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dfea:	230a      	movs	r3, #10
 801dfec:	4649      	mov	r1, r9
 801dfee:	6820      	ldr	r0, [r4, #0]
 801dff0:	eba8 0202 	sub.w	r2, r8, r2
 801dff4:	1d25      	adds	r5, r4, #4
 801dff6:	b292      	uxth	r2, r2
 801dff8:	f7ff fcf0 	bl	801d9dc <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801dffc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801e000:	2b2d      	cmp	r3, #45	@ 0x2d
 801e002:	d1cf      	bne.n	801dfa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e004:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e00a:	3302      	adds	r3, #2
 801e00c:	e7ea      	b.n	801dfe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e00e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e010:	1d25      	adds	r5, r4, #4
 801e012:	230a      	movs	r3, #10
 801e014:	eba8 0202 	sub.w	r2, r8, r2
 801e018:	b292      	uxth	r2, r2
 801e01a:	4649      	mov	r1, r9
 801e01c:	6820      	ldr	r0, [r4, #0]
 801e01e:	f7ff fd09 	bl	801da34 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e022:	e7bf      	b.n	801dfa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e026:	2310      	movs	r3, #16
 801e028:	4649      	mov	r1, r9
 801e02a:	6820      	ldr	r0, [r4, #0]
 801e02c:	eba8 0202 	sub.w	r2, r8, r2
 801e030:	1d25      	adds	r5, r4, #4
 801e032:	b292      	uxth	r2, r2
 801e034:	f7ff fcfe 	bl	801da34 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801e038:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801e03c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e040:	2b00      	cmp	r3, #0
 801e042:	d0af      	beq.n	801dfa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e044:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801e048:	2919      	cmp	r1, #25
 801e04a:	d8f7      	bhi.n	801e03c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e04c:	3b20      	subs	r3, #32
 801e04e:	8013      	strh	r3, [r2, #0]
 801e050:	e7f4      	b.n	801e03c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e052:	9a08      	ldr	r2, [sp, #32]
 801e054:	2a00      	cmp	r2, #0
 801e056:	d0ab      	beq.n	801dfb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e058:	7812      	ldrb	r2, [r2, #0]
 801e05a:	e7a9      	b.n	801dfb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e05c:	2d00      	cmp	r5, #0
 801e05e:	f43f af48 	beq.w	801def2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e062:	782d      	ldrb	r5, [r5, #0]
 801e064:	e745      	b.n	801def2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e066 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e066:	b507      	push	{r0, r1, r2, lr}
 801e068:	9300      	str	r3, [sp, #0]
 801e06a:	4613      	mov	r3, r2
 801e06c:	2200      	movs	r2, #0
 801e06e:	f7ff fe92 	bl	801dd96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e072:	b003      	add	sp, #12
 801e074:	f85d fb04 	ldr.w	pc, [sp], #4

0801e078 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e078:	b40c      	push	{r2, r3}
 801e07a:	b507      	push	{r0, r1, r2, lr}
 801e07c:	ab04      	add	r3, sp, #16
 801e07e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e082:	9301      	str	r3, [sp, #4]
 801e084:	f7ff ffef 	bl	801e066 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e088:	b003      	add	sp, #12
 801e08a:	f85d eb04 	ldr.w	lr, [sp], #4
 801e08e:	b002      	add	sp, #8
 801e090:	4770      	bx	lr
	...

0801e094 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e094:	4b01      	ldr	r3, [pc, #4]	@ (801e09c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e096:	6018      	str	r0, [r3, #0]
 801e098:	4770      	bx	lr
 801e09a:	bf00      	nop
 801e09c:	2402861c 	.word	0x2402861c

0801e0a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e0a0:	4b06      	ldr	r3, [pc, #24]	@ (801e0bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e0a2:	881a      	ldrh	r2, [r3, #0]
 801e0a4:	4282      	cmp	r2, r0
 801e0a6:	d807      	bhi.n	801e0b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e0a8:	4b05      	ldr	r3, [pc, #20]	@ (801e0c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e0aa:	881b      	ldrh	r3, [r3, #0]
 801e0ac:	4413      	add	r3, r2
 801e0ae:	4298      	cmp	r0, r3
 801e0b0:	bfac      	ite	ge
 801e0b2:	2000      	movge	r0, #0
 801e0b4:	2001      	movlt	r0, #1
 801e0b6:	4770      	bx	lr
 801e0b8:	2000      	movs	r0, #0
 801e0ba:	4770      	bx	lr
 801e0bc:	2402863c 	.word	0x2402863c
 801e0c0:	24028640 	.word	0x24028640

0801e0c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e0c4:	b508      	push	{r3, lr}
 801e0c6:	4601      	mov	r1, r0
 801e0c8:	f7ff ffea 	bl	801e0a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e0cc:	b118      	cbz	r0, 801e0d6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e0ce:	4b02      	ldr	r3, [pc, #8]	@ (801e0d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e0d6:	bd08      	pop	{r3, pc}
 801e0d8:	24028620 	.word	0x24028620

0801e0dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801e0dc:	b538      	push	{r3, r4, r5, lr}
 801e0de:	4604      	mov	r4, r0
 801e0e0:	f7ff ffde 	bl	801e0a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e0e4:	b1d8      	cbz	r0, 801e11e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e0e6:	4b0f      	ldr	r3, [pc, #60]	@ (801e124 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801e0e8:	881b      	ldrh	r3, [r3, #0]
 801e0ea:	1ae4      	subs	r4, r4, r3
 801e0ec:	230e      	movs	r3, #14
 801e0ee:	4363      	muls	r3, r4
 801e0f0:	4c0d      	ldr	r4, [pc, #52]	@ (801e128 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801e0f2:	6825      	ldr	r5, [r4, #0]
 801e0f4:	18ea      	adds	r2, r5, r3
 801e0f6:	7b12      	ldrb	r2, [r2, #12]
 801e0f8:	f012 0220 	ands.w	r2, r2, #32
 801e0fc:	d010      	beq.n	801e120 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801e0fe:	f9b1 2000 	ldrsh.w	r2, [r1]
 801e102:	52ea      	strh	r2, [r5, r3]
 801e104:	6822      	ldr	r2, [r4, #0]
 801e106:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801e10a:	441a      	add	r2, r3
 801e10c:	8055      	strh	r5, [r2, #2]
 801e10e:	6822      	ldr	r2, [r4, #0]
 801e110:	4413      	add	r3, r2
 801e112:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801e116:	809a      	strh	r2, [r3, #4]
 801e118:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801e11c:	80da      	strh	r2, [r3, #6]
 801e11e:	bd38      	pop	{r3, r4, r5, pc}
 801e120:	4610      	mov	r0, r2
 801e122:	e7fc      	b.n	801e11e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801e124:	2402863c 	.word	0x2402863c
 801e128:	24028624 	.word	0x24028624

0801e12c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801e12c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e130:	4606      	mov	r6, r0
 801e132:	460c      	mov	r4, r1
 801e134:	f7ff ffb4 	bl	801e0a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e138:	b918      	cbnz	r0, 801e142 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801e13a:	2000      	movs	r0, #0
 801e13c:	b002      	add	sp, #8
 801e13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e142:	4608      	mov	r0, r1
 801e144:	f7f4 ff3b 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801e148:	2800      	cmp	r0, #0
 801e14a:	d1f6      	bne.n	801e13a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e14c:	4b3f      	ldr	r3, [pc, #252]	@ (801e24c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801e14e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801e250 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801e152:	881d      	ldrh	r5, [r3, #0]
 801e154:	f8d9 a000 	ldr.w	sl, [r9]
 801e158:	46c8      	mov	r8, r9
 801e15a:	1b73      	subs	r3, r6, r5
 801e15c:	250e      	movs	r5, #14
 801e15e:	435d      	muls	r5, r3
 801e160:	eb0a 0705 	add.w	r7, sl, r5
 801e164:	7b3b      	ldrb	r3, [r7, #12]
 801e166:	f013 0f20 	tst.w	r3, #32
 801e16a:	d0e6      	beq.n	801e13a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e16c:	4621      	mov	r1, r4
 801e16e:	4638      	mov	r0, r7
 801e170:	f7fc fb28 	bl	801a7c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e174:	2800      	cmp	r0, #0
 801e176:	d1e1      	bne.n	801e13c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e178:	4639      	mov	r1, r7
 801e17a:	4620      	mov	r0, r4
 801e17c:	f7fc fb22 	bl	801a7c4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e180:	b108      	cbz	r0, 801e186 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801e182:	4621      	mov	r1, r4
 801e184:	e020      	b.n	801e1c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801e186:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e18a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801e18e:	429a      	cmp	r2, r3
 801e190:	d11e      	bne.n	801e1d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e192:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e196:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801e19a:	429a      	cmp	r2, r3
 801e19c:	d118      	bne.n	801e1d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e19e:	6820      	ldr	r0, [r4, #0]
 801e1a0:	466b      	mov	r3, sp
 801e1a2:	6861      	ldr	r1, [r4, #4]
 801e1a4:	c303      	stmia	r3!, {r0, r1}
 801e1a6:	4639      	mov	r1, r7
 801e1a8:	4668      	mov	r0, sp
 801e1aa:	f7f5 fa47 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e1ae:	f8d9 3000 	ldr.w	r3, [r9]
 801e1b2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801e1b6:	442b      	add	r3, r5
 801e1b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e1bc:	4413      	add	r3, r2
 801e1be:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801e1c2:	4293      	cmp	r3, r2
 801e1c4:	dc04      	bgt.n	801e1d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e1c6:	4669      	mov	r1, sp
 801e1c8:	4630      	mov	r0, r6
 801e1ca:	f7ff ff87 	bl	801e0dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801e1ce:	e7b5      	b.n	801e13c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e1d0:	f8d8 3000 	ldr.w	r3, [r8]
 801e1d4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e1d8:	442b      	add	r3, r5
 801e1da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e1de:	4291      	cmp	r1, r2
 801e1e0:	d119      	bne.n	801e216 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e1e2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e1e6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e1ea:	4291      	cmp	r1, r2
 801e1ec:	d113      	bne.n	801e216 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e1ee:	6820      	ldr	r0, [r4, #0]
 801e1f0:	466a      	mov	r2, sp
 801e1f2:	6861      	ldr	r1, [r4, #4]
 801e1f4:	c203      	stmia	r2!, {r0, r1}
 801e1f6:	4619      	mov	r1, r3
 801e1f8:	4668      	mov	r0, sp
 801e1fa:	f7f5 fa1f 	bl	801363c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e1fe:	f8d8 3000 	ldr.w	r3, [r8]
 801e202:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e206:	442b      	add	r3, r5
 801e208:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e20c:	4413      	add	r3, r2
 801e20e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801e212:	4293      	cmp	r3, r2
 801e214:	ddd7      	ble.n	801e1c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801e216:	4620      	mov	r0, r4
 801e218:	f7f4 fed1 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801e21c:	b990      	cbnz	r0, 801e244 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801e21e:	88a7      	ldrh	r7, [r4, #4]
 801e220:	88e3      	ldrh	r3, [r4, #6]
 801e222:	fb17 f703 	smulbb	r7, r7, r3
 801e226:	f8d8 3000 	ldr.w	r3, [r8]
 801e22a:	441d      	add	r5, r3
 801e22c:	4628      	mov	r0, r5
 801e22e:	f7f4 fec6 	bl	8012fbe <_ZNK8touchgfx4Rect7isEmptyEv>
 801e232:	b948      	cbnz	r0, 801e248 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801e234:	88ab      	ldrh	r3, [r5, #4]
 801e236:	88ea      	ldrh	r2, [r5, #6]
 801e238:	fb13 f302 	smulbb	r3, r3, r2
 801e23c:	42bb      	cmp	r3, r7
 801e23e:	f6bf af7c 	bge.w	801e13a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e242:	e79e      	b.n	801e182 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801e244:	2700      	movs	r7, #0
 801e246:	e7ee      	b.n	801e226 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801e248:	2300      	movs	r3, #0
 801e24a:	e7f7      	b.n	801e23c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801e24c:	2402863c 	.word	0x2402863c
 801e250:	24028624 	.word	0x24028624

0801e254 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e254:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e256:	4c24      	ldr	r4, [pc, #144]	@ (801e2e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801e258:	6823      	ldr	r3, [r4, #0]
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d042      	beq.n	801e2e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e25e:	4a23      	ldr	r2, [pc, #140]	@ (801e2ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801e260:	4d23      	ldr	r5, [pc, #140]	@ (801e2f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801e262:	8811      	ldrh	r1, [r2, #0]
 801e264:	f8b5 c000 	ldrh.w	ip, [r5]
 801e268:	4822      	ldr	r0, [pc, #136]	@ (801e2f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e26a:	4461      	add	r1, ip
 801e26c:	1c4a      	adds	r2, r1, #1
 801e26e:	008f      	lsls	r7, r1, #2
 801e270:	f022 0201 	bic.w	r2, r2, #1
 801e274:	19de      	adds	r6, r3, r7
 801e276:	0412      	lsls	r2, r2, #16
 801e278:	6006      	str	r6, [r0, #0]
 801e27a:	4e1f      	ldr	r6, [pc, #124]	@ (801e2f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e27c:	0c12      	lsrs	r2, r2, #16
 801e27e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801e282:	19da      	adds	r2, r3, r7
 801e284:	6032      	str	r2, [r6, #0]
 801e286:	220e      	movs	r2, #14
 801e288:	fb02 f20c 	mul.w	r2, r2, ip
 801e28c:	3203      	adds	r2, #3
 801e28e:	f022 0203 	bic.w	r2, r2, #3
 801e292:	443a      	add	r2, r7
 801e294:	4f19      	ldr	r7, [pc, #100]	@ (801e2fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e296:	4413      	add	r3, r2
 801e298:	603b      	str	r3, [r7, #0]
 801e29a:	2300      	movs	r3, #0
 801e29c:	4f18      	ldr	r7, [pc, #96]	@ (801e300 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e29e:	469c      	mov	ip, r3
 801e2a0:	803b      	strh	r3, [r7, #0]
 801e2a2:	4f18      	ldr	r7, [pc, #96]	@ (801e304 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e2a4:	683f      	ldr	r7, [r7, #0]
 801e2a6:	1aba      	subs	r2, r7, r2
 801e2a8:	4f17      	ldr	r7, [pc, #92]	@ (801e308 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e2aa:	603a      	str	r2, [r7, #0]
 801e2ac:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801e2b0:	4a16      	ldr	r2, [pc, #88]	@ (801e30c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e2b2:	8013      	strh	r3, [r2, #0]
 801e2b4:	428b      	cmp	r3, r1
 801e2b6:	d10d      	bne.n	801e2d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801e2b8:	882d      	ldrh	r5, [r5, #0]
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	6830      	ldr	r0, [r6, #0]
 801e2be:	240e      	movs	r4, #14
 801e2c0:	429d      	cmp	r5, r3
 801e2c2:	d90f      	bls.n	801e2e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e2c4:	fb04 0203 	mla	r2, r4, r3, r0
 801e2c8:	3301      	adds	r3, #1
 801e2ca:	7b11      	ldrb	r1, [r2, #12]
 801e2cc:	f36f 1145 	bfc	r1, #5, #1
 801e2d0:	7311      	strb	r1, [r2, #12]
 801e2d2:	e7f5      	b.n	801e2c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e2d4:	6822      	ldr	r2, [r4, #0]
 801e2d6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e2da:	6802      	ldr	r2, [r0, #0]
 801e2dc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e2e0:	3301      	adds	r3, #1
 801e2e2:	e7e7      	b.n	801e2b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2e6:	bf00      	nop
 801e2e8:	24028620 	.word	0x24028620
 801e2ec:	2402863c 	.word	0x2402863c
 801e2f0:	24028640 	.word	0x24028640
 801e2f4:	24028634 	.word	0x24028634
 801e2f8:	24028624 	.word	0x24028624
 801e2fc:	2402862c 	.word	0x2402862c
 801e300:	2402863e 	.word	0x2402863e
 801e304:	24028628 	.word	0x24028628
 801e308:	24028638 	.word	0x24028638
 801e30c:	24028630 	.word	0x24028630

0801e310 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e310:	4b06      	ldr	r3, [pc, #24]	@ (801e32c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	b943      	cbnz	r3, 801e328 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e316:	b139      	cbz	r1, 801e328 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e318:	4b05      	ldr	r3, [pc, #20]	@ (801e330 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801e31a:	801a      	strh	r2, [r3, #0]
 801e31c:	4b05      	ldr	r3, [pc, #20]	@ (801e334 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801e31e:	6019      	str	r1, [r3, #0]
 801e320:	4b05      	ldr	r3, [pc, #20]	@ (801e338 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801e322:	6018      	str	r0, [r3, #0]
 801e324:	f7ff bf96 	b.w	801e254 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e328:	4770      	bx	lr
 801e32a:	bf00      	nop
 801e32c:	2402862c 	.word	0x2402862c
 801e330:	24028640 	.word	0x24028640
 801e334:	24028628 	.word	0x24028628
 801e338:	24028620 	.word	0x24028620

0801e33c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e33c:	b470      	push	{r4, r5, r6}
 801e33e:	4c07      	ldr	r4, [pc, #28]	@ (801e35c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e340:	4605      	mov	r5, r0
 801e342:	4610      	mov	r0, r2
 801e344:	9a03      	ldr	r2, [sp, #12]
 801e346:	6826      	ldr	r6, [r4, #0]
 801e348:	b936      	cbnz	r6, 801e358 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e34a:	6025      	str	r5, [r4, #0]
 801e34c:	4c04      	ldr	r4, [pc, #16]	@ (801e360 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e34e:	8021      	strh	r1, [r4, #0]
 801e350:	4619      	mov	r1, r3
 801e352:	bc70      	pop	{r4, r5, r6}
 801e354:	f7ff bfdc 	b.w	801e310 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e358:	bc70      	pop	{r4, r5, r6}
 801e35a:	4770      	bx	lr
 801e35c:	24028644 	.word	0x24028644
 801e360:	2402863c 	.word	0x2402863c

0801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e364:	4a12      	ldr	r2, [pc, #72]	@ (801e3b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801e366:	8803      	ldrh	r3, [r0, #0]
 801e368:	8812      	ldrh	r2, [r2, #0]
 801e36a:	4293      	cmp	r3, r2
 801e36c:	d207      	bcs.n	801e37e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801e36e:	4a11      	ldr	r2, [pc, #68]	@ (801e3b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801e370:	2114      	movs	r1, #20
 801e372:	6812      	ldr	r2, [r2, #0]
 801e374:	fb01 2303 	mla	r3, r1, r3, r2
 801e378:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e37c:	4770      	bx	lr
 801e37e:	490e      	ldr	r1, [pc, #56]	@ (801e3b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e380:	8809      	ldrh	r1, [r1, #0]
 801e382:	4411      	add	r1, r2
 801e384:	428b      	cmp	r3, r1
 801e386:	da04      	bge.n	801e392 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801e388:	1a9b      	subs	r3, r3, r2
 801e38a:	4a0c      	ldr	r2, [pc, #48]	@ (801e3bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e38c:	210e      	movs	r1, #14
 801e38e:	6812      	ldr	r2, [r2, #0]
 801e390:	e7f0      	b.n	801e374 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801e392:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e396:	4293      	cmp	r3, r2
 801e398:	d108      	bne.n	801e3ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801e39a:	4b09      	ldr	r3, [pc, #36]	@ (801e3c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e39c:	781b      	ldrb	r3, [r3, #0]
 801e39e:	b91b      	cbnz	r3, 801e3a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801e3a0:	4b08      	ldr	r3, [pc, #32]	@ (801e3c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e3a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e3a6:	4770      	bx	lr
 801e3a8:	4b07      	ldr	r3, [pc, #28]	@ (801e3c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e3aa:	e7fa      	b.n	801e3a2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801e3ac:	2000      	movs	r0, #0
 801e3ae:	4770      	bx	lr
 801e3b0:	2402863c 	.word	0x2402863c
 801e3b4:	24028644 	.word	0x24028644
 801e3b8:	24028640 	.word	0x24028640
 801e3bc:	24028624 	.word	0x24028624
 801e3c0:	240285ac 	.word	0x240285ac
 801e3c4:	240285ae 	.word	0x240285ae
 801e3c8:	240285b0 	.word	0x240285b0

0801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e3cc:	4a12      	ldr	r2, [pc, #72]	@ (801e418 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801e3ce:	8803      	ldrh	r3, [r0, #0]
 801e3d0:	8812      	ldrh	r2, [r2, #0]
 801e3d2:	4293      	cmp	r3, r2
 801e3d4:	d207      	bcs.n	801e3e6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801e3d6:	4a11      	ldr	r2, [pc, #68]	@ (801e41c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801e3d8:	2114      	movs	r1, #20
 801e3da:	6812      	ldr	r2, [r2, #0]
 801e3dc:	fb01 2303 	mla	r3, r1, r3, r2
 801e3e0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801e3e4:	4770      	bx	lr
 801e3e6:	490e      	ldr	r1, [pc, #56]	@ (801e420 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e3e8:	8809      	ldrh	r1, [r1, #0]
 801e3ea:	4411      	add	r1, r2
 801e3ec:	428b      	cmp	r3, r1
 801e3ee:	da04      	bge.n	801e3fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801e3f0:	1a9b      	subs	r3, r3, r2
 801e3f2:	4a0c      	ldr	r2, [pc, #48]	@ (801e424 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e3f4:	210e      	movs	r1, #14
 801e3f6:	6812      	ldr	r2, [r2, #0]
 801e3f8:	e7f0      	b.n	801e3dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801e3fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e3fe:	4293      	cmp	r3, r2
 801e400:	d108      	bne.n	801e414 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801e402:	4b09      	ldr	r3, [pc, #36]	@ (801e428 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e404:	781b      	ldrb	r3, [r3, #0]
 801e406:	b91b      	cbnz	r3, 801e410 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801e408:	4b08      	ldr	r3, [pc, #32]	@ (801e42c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e40a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e40e:	4770      	bx	lr
 801e410:	4b07      	ldr	r3, [pc, #28]	@ (801e430 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e412:	e7fa      	b.n	801e40a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801e414:	2000      	movs	r0, #0
 801e416:	4770      	bx	lr
 801e418:	2402863c 	.word	0x2402863c
 801e41c:	24028644 	.word	0x24028644
 801e420:	24028640 	.word	0x24028640
 801e424:	24028624 	.word	0x24028624
 801e428:	240285ac 	.word	0x240285ac
 801e42c:	240285b0 	.word	0x240285b0
 801e430:	240285ae 	.word	0x240285ae

0801e434 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e434:	4a22      	ldr	r2, [pc, #136]	@ (801e4c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801e436:	b530      	push	{r4, r5, lr}
 801e438:	880b      	ldrh	r3, [r1, #0]
 801e43a:	8812      	ldrh	r2, [r2, #0]
 801e43c:	4293      	cmp	r3, r2
 801e43e:	d213      	bcs.n	801e468 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801e440:	4a20      	ldr	r2, [pc, #128]	@ (801e4c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e442:	2114      	movs	r1, #20
 801e444:	6812      	ldr	r2, [r2, #0]
 801e446:	fb01 2303 	mla	r3, r1, r3, r2
 801e44a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e44e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e452:	8a1a      	ldrh	r2, [r3, #16]
 801e454:	8a5b      	ldrh	r3, [r3, #18]
 801e456:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e45a:	8004      	strh	r4, [r0, #0]
 801e45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e460:	8041      	strh	r1, [r0, #2]
 801e462:	8082      	strh	r2, [r0, #4]
 801e464:	80c3      	strh	r3, [r0, #6]
 801e466:	e024      	b.n	801e4b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801e468:	4917      	ldr	r1, [pc, #92]	@ (801e4c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e46a:	8809      	ldrh	r1, [r1, #0]
 801e46c:	4411      	add	r1, r2
 801e46e:	428b      	cmp	r3, r1
 801e470:	da10      	bge.n	801e494 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801e472:	1a9b      	subs	r3, r3, r2
 801e474:	220e      	movs	r2, #14
 801e476:	4353      	muls	r3, r2
 801e478:	4a14      	ldr	r2, [pc, #80]	@ (801e4cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e47a:	6811      	ldr	r1, [r2, #0]
 801e47c:	18ca      	adds	r2, r1, r3
 801e47e:	5ecd      	ldrsh	r5, [r1, r3]
 801e480:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801e484:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801e488:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801e48c:	8005      	strh	r5, [r0, #0]
 801e48e:	8044      	strh	r4, [r0, #2]
 801e490:	8081      	strh	r1, [r0, #4]
 801e492:	e7e7      	b.n	801e464 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e494:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e498:	4293      	cmp	r3, r2
 801e49a:	d10b      	bne.n	801e4b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801e49c:	4b0c      	ldr	r3, [pc, #48]	@ (801e4d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e49e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e4a2:	4b0c      	ldr	r3, [pc, #48]	@ (801e4d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e4a4:	8081      	strh	r1, [r0, #4]
 801e4a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	80c2      	strh	r2, [r0, #6]
 801e4ae:	8003      	strh	r3, [r0, #0]
 801e4b0:	8043      	strh	r3, [r0, #2]
 801e4b2:	bd30      	pop	{r4, r5, pc}
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	8003      	strh	r3, [r0, #0]
 801e4b8:	8043      	strh	r3, [r0, #2]
 801e4ba:	8083      	strh	r3, [r0, #4]
 801e4bc:	e7d2      	b.n	801e464 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801e4be:	bf00      	nop
 801e4c0:	2402863c 	.word	0x2402863c
 801e4c4:	24028644 	.word	0x24028644
 801e4c8:	24028640 	.word	0x24028640
 801e4cc:	24028624 	.word	0x24028624
 801e4d0:	240285a8 	.word	0x240285a8
 801e4d4:	240285aa 	.word	0x240285aa

0801e4d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e4d8:	4a17      	ldr	r2, [pc, #92]	@ (801e538 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801e4da:	8803      	ldrh	r3, [r0, #0]
 801e4dc:	8812      	ldrh	r2, [r2, #0]
 801e4de:	4293      	cmp	r3, r2
 801e4e0:	d213      	bcs.n	801e50a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801e4e2:	4a16      	ldr	r2, [pc, #88]	@ (801e53c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e4e4:	2114      	movs	r1, #20
 801e4e6:	6812      	ldr	r2, [r2, #0]
 801e4e8:	fb01 2303 	mla	r3, r1, r3, r2
 801e4ec:	8a1a      	ldrh	r2, [r3, #16]
 801e4ee:	8919      	ldrh	r1, [r3, #8]
 801e4f0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e4f4:	428a      	cmp	r2, r1
 801e4f6:	db1d      	blt.n	801e534 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e4f8:	8a58      	ldrh	r0, [r3, #18]
 801e4fa:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e4fe:	895b      	ldrh	r3, [r3, #10]
 801e500:	4298      	cmp	r0, r3
 801e502:	bfac      	ite	ge
 801e504:	2000      	movge	r0, #0
 801e506:	2001      	movlt	r0, #1
 801e508:	4770      	bx	lr
 801e50a:	490d      	ldr	r1, [pc, #52]	@ (801e540 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e50c:	8809      	ldrh	r1, [r1, #0]
 801e50e:	4411      	add	r1, r2
 801e510:	428b      	cmp	r3, r1
 801e512:	da0d      	bge.n	801e530 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801e514:	1a9b      	subs	r3, r3, r2
 801e516:	4a0b      	ldr	r2, [pc, #44]	@ (801e544 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e518:	210e      	movs	r1, #14
 801e51a:	6812      	ldr	r2, [r2, #0]
 801e51c:	fb01 2303 	mla	r3, r1, r3, r2
 801e520:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e524:	891a      	ldrh	r2, [r3, #8]
 801e526:	4291      	cmp	r1, r2
 801e528:	db04      	blt.n	801e534 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e52a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e52e:	e7e6      	b.n	801e4fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801e530:	2000      	movs	r0, #0
 801e532:	4770      	bx	lr
 801e534:	2001      	movs	r0, #1
 801e536:	4770      	bx	lr
 801e538:	2402863c 	.word	0x2402863c
 801e53c:	24028644 	.word	0x24028644
 801e540:	24028640 	.word	0x24028640
 801e544:	24028624 	.word	0x24028624

0801e548 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e548:	4a12      	ldr	r2, [pc, #72]	@ (801e594 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e54a:	8803      	ldrh	r3, [r0, #0]
 801e54c:	8811      	ldrh	r1, [r2, #0]
 801e54e:	428b      	cmp	r3, r1
 801e550:	d20b      	bcs.n	801e56a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801e552:	4a11      	ldr	r2, [pc, #68]	@ (801e598 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e554:	6812      	ldr	r2, [r2, #0]
 801e556:	b112      	cbz	r2, 801e55e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e558:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e55c:	b9c0      	cbnz	r0, 801e590 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801e55e:	4a0f      	ldr	r2, [pc, #60]	@ (801e59c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e560:	6811      	ldr	r1, [r2, #0]
 801e562:	2214      	movs	r2, #20
 801e564:	4353      	muls	r3, r2
 801e566:	58c8      	ldr	r0, [r1, r3]
 801e568:	4770      	bx	lr
 801e56a:	4a0d      	ldr	r2, [pc, #52]	@ (801e5a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e56c:	8812      	ldrh	r2, [r2, #0]
 801e56e:	440a      	add	r2, r1
 801e570:	4293      	cmp	r3, r2
 801e572:	da04      	bge.n	801e57e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801e574:	4a08      	ldr	r2, [pc, #32]	@ (801e598 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e576:	6812      	ldr	r2, [r2, #0]
 801e578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e57c:	4770      	bx	lr
 801e57e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801e582:	4293      	cmp	r3, r2
 801e584:	d103      	bne.n	801e58e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e586:	4b07      	ldr	r3, [pc, #28]	@ (801e5a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801e58c:	4770      	bx	lr
 801e58e:	2000      	movs	r0, #0
 801e590:	4770      	bx	lr
 801e592:	bf00      	nop
 801e594:	2402863c 	.word	0x2402863c
 801e598:	24028620 	.word	0x24028620
 801e59c:	24028644 	.word	0x24028644
 801e5a0:	24028640 	.word	0x24028640
 801e5a4:	240285b4 	.word	0x240285b4

0801e5a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e5a8:	4b24      	ldr	r3, [pc, #144]	@ (801e63c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e5aa:	8802      	ldrh	r2, [r0, #0]
 801e5ac:	8818      	ldrh	r0, [r3, #0]
 801e5ae:	4282      	cmp	r2, r0
 801e5b0:	d221      	bcs.n	801e5f6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801e5b2:	4b23      	ldr	r3, [pc, #140]	@ (801e640 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e5b4:	6819      	ldr	r1, [r3, #0]
 801e5b6:	2314      	movs	r3, #20
 801e5b8:	fb03 1302 	mla	r3, r3, r2, r1
 801e5bc:	6858      	ldr	r0, [r3, #4]
 801e5be:	2800      	cmp	r0, #0
 801e5c0:	d03a      	beq.n	801e638 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e5c2:	4920      	ldr	r1, [pc, #128]	@ (801e644 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e5c4:	6809      	ldr	r1, [r1, #0]
 801e5c6:	2900      	cmp	r1, #0
 801e5c8:	d036      	beq.n	801e638 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e5ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e5ce:	2900      	cmp	r1, #0
 801e5d0:	d032      	beq.n	801e638 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e5d2:	891a      	ldrh	r2, [r3, #8]
 801e5d4:	8958      	ldrh	r0, [r3, #10]
 801e5d6:	4350      	muls	r0, r2
 801e5d8:	7c5a      	ldrb	r2, [r3, #17]
 801e5da:	7cdb      	ldrb	r3, [r3, #19]
 801e5dc:	0952      	lsrs	r2, r2, #5
 801e5de:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e5e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e5e6:	2b0b      	cmp	r3, #11
 801e5e8:	bf18      	it	ne
 801e5ea:	0040      	lslne	r0, r0, #1
 801e5ec:	3003      	adds	r0, #3
 801e5ee:	f020 0003 	bic.w	r0, r0, #3
 801e5f2:	4408      	add	r0, r1
 801e5f4:	4770      	bx	lr
 801e5f6:	4b14      	ldr	r3, [pc, #80]	@ (801e648 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e5f8:	881b      	ldrh	r3, [r3, #0]
 801e5fa:	4403      	add	r3, r0
 801e5fc:	429a      	cmp	r2, r3
 801e5fe:	da1a      	bge.n	801e636 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e600:	4b12      	ldr	r3, [pc, #72]	@ (801e64c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e602:	1a10      	subs	r0, r2, r0
 801e604:	210e      	movs	r1, #14
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	fb01 3000 	mla	r0, r1, r0, r3
 801e60c:	7b03      	ldrb	r3, [r0, #12]
 801e60e:	f003 031f 	and.w	r3, r3, #31
 801e612:	2b0b      	cmp	r3, #11
 801e614:	d10b      	bne.n	801e62e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801e616:	8903      	ldrh	r3, [r0, #8]
 801e618:	8940      	ldrh	r0, [r0, #10]
 801e61a:	4358      	muls	r0, r3
 801e61c:	4b09      	ldr	r3, [pc, #36]	@ (801e644 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e61e:	3003      	adds	r0, #3
 801e620:	6819      	ldr	r1, [r3, #0]
 801e622:	f020 0303 	bic.w	r3, r0, #3
 801e626:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e62a:	4418      	add	r0, r3
 801e62c:	4770      	bx	lr
 801e62e:	2b0d      	cmp	r3, #13
 801e630:	d101      	bne.n	801e636 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e632:	300d      	adds	r0, #13
 801e634:	4770      	bx	lr
 801e636:	2000      	movs	r0, #0
 801e638:	4770      	bx	lr
 801e63a:	bf00      	nop
 801e63c:	2402863c 	.word	0x2402863c
 801e640:	24028644 	.word	0x24028644
 801e644:	24028620 	.word	0x24028620
 801e648:	24028640 	.word	0x24028640
 801e64c:	24028624 	.word	0x24028624

0801e650 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e650:	4b1f      	ldr	r3, [pc, #124]	@ (801e6d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801e652:	b510      	push	{r4, lr}
 801e654:	8802      	ldrh	r2, [r0, #0]
 801e656:	881b      	ldrh	r3, [r3, #0]
 801e658:	429a      	cmp	r2, r3
 801e65a:	d21a      	bcs.n	801e692 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801e65c:	4b1d      	ldr	r3, [pc, #116]	@ (801e6d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801e65e:	2114      	movs	r1, #20
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	fb01 3102 	mla	r1, r1, r2, r3
 801e666:	7c4b      	ldrb	r3, [r1, #17]
 801e668:	0958      	lsrs	r0, r3, #5
 801e66a:	7ccb      	ldrb	r3, [r1, #19]
 801e66c:	491a      	ldr	r1, [pc, #104]	@ (801e6d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801e66e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e672:	6809      	ldr	r1, [r1, #0]
 801e674:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801e678:	b2d8      	uxtb	r0, r3
 801e67a:	b149      	cbz	r1, 801e690 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e67c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e680:	b132      	cbz	r2, 801e690 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e682:	2b0e      	cmp	r3, #14
 801e684:	d021      	beq.n	801e6ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e686:	280f      	cmp	r0, #15
 801e688:	d01d      	beq.n	801e6c6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801e68a:	2810      	cmp	r0, #16
 801e68c:	bf08      	it	eq
 801e68e:	2002      	moveq	r0, #2
 801e690:	bd10      	pop	{r4, pc}
 801e692:	4912      	ldr	r1, [pc, #72]	@ (801e6dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801e694:	8809      	ldrh	r1, [r1, #0]
 801e696:	4419      	add	r1, r3
 801e698:	428a      	cmp	r2, r1
 801e69a:	da09      	bge.n	801e6b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801e69c:	1ad3      	subs	r3, r2, r3
 801e69e:	4a10      	ldr	r2, [pc, #64]	@ (801e6e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801e6a0:	210e      	movs	r1, #14
 801e6a2:	6812      	ldr	r2, [r2, #0]
 801e6a4:	fb01 2303 	mla	r3, r1, r3, r2
 801e6a8:	7b18      	ldrb	r0, [r3, #12]
 801e6aa:	f000 001f 	and.w	r0, r0, #31
 801e6ae:	e7ef      	b.n	801e690 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e6b0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801e6b4:	429a      	cmp	r2, r3
 801e6b6:	d108      	bne.n	801e6ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801e6b8:	f7e9 fa80 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 801e6bc:	6803      	ldr	r3, [r0, #0]
 801e6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e6c4:	4718      	bx	r3
 801e6c6:	2001      	movs	r0, #1
 801e6c8:	e7e2      	b.n	801e690 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e6ca:	2000      	movs	r0, #0
 801e6cc:	e7e0      	b.n	801e690 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801e6ce:	bf00      	nop
 801e6d0:	2402863c 	.word	0x2402863c
 801e6d4:	24028644 	.word	0x24028644
 801e6d8:	24028620 	.word	0x24028620
 801e6dc:	24028640 	.word	0x24028640
 801e6e0:	24028624 	.word	0x24028624

0801e6e4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801e6e4:	2018      	movs	r0, #24
 801e6e6:	4770      	bx	lr

0801e6e8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801e6e8:	2001      	movs	r0, #1
 801e6ea:	4770      	bx	lr

0801e6ec <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e6ec:	4b02      	ldr	r3, [pc, #8]	@ (801e6f8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801e6ee:	8818      	ldrh	r0, [r3, #0]
 801e6f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e6f4:	b280      	uxth	r0, r0
 801e6f6:	4770      	bx	lr
 801e6f8:	240285ae 	.word	0x240285ae

0801e6fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e6fc:	2bff      	cmp	r3, #255	@ 0xff
 801e6fe:	d04c      	beq.n	801e79a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e700:	2a2c      	cmp	r2, #44	@ 0x2c
 801e702:	d030      	beq.n	801e766 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801e704:	d80f      	bhi.n	801e726 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801e706:	2a08      	cmp	r2, #8
 801e708:	d043      	beq.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e70a:	d805      	bhi.n	801e718 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801e70c:	2a04      	cmp	r2, #4
 801e70e:	d03e      	beq.n	801e78e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e710:	2a05      	cmp	r2, #5
 801e712:	d03a      	beq.n	801e78a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e714:	2300      	movs	r3, #0
 801e716:	e024      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e718:	2a0a      	cmp	r2, #10
 801e71a:	d03a      	beq.n	801e792 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e71c:	d301      	bcc.n	801e722 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801e71e:	2a0b      	cmp	r2, #11
 801e720:	d1f8      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e722:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801e724:	e01d      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e726:	2a30      	cmp	r2, #48	@ 0x30
 801e728:	d035      	beq.n	801e796 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e72a:	d80a      	bhi.n	801e742 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801e72c:	2a2e      	cmp	r2, #46	@ 0x2e
 801e72e:	684b      	ldr	r3, [r1, #4]
 801e730:	d023      	beq.n	801e77a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e732:	d90d      	bls.n	801e750 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801e734:	781a      	ldrb	r2, [r3, #0]
 801e736:	785b      	ldrb	r3, [r3, #1]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d1eb      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e73c:	b98a      	cbnz	r2, 801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e73e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801e740:	e00f      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e742:	2a32      	cmp	r2, #50	@ 0x32
 801e744:	d027      	beq.n	801e796 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e746:	d301      	bcc.n	801e74c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801e748:	2a33      	cmp	r2, #51	@ 0x33
 801e74a:	d1e3      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e74c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801e74e:	e008      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e750:	781a      	ldrb	r2, [r3, #0]
 801e752:	785b      	ldrb	r3, [r3, #1]
 801e754:	2b00      	cmp	r3, #0
 801e756:	d1dd      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e758:	2a00      	cmp	r2, #0
 801e75a:	d0f0      	beq.n	801e73e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801e75c:	2a01      	cmp	r2, #1
 801e75e:	d1d9      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e760:	6943      	ldr	r3, [r0, #20]
 801e762:	4618      	mov	r0, r3
 801e764:	4770      	bx	lr
 801e766:	684b      	ldr	r3, [r1, #4]
 801e768:	781a      	ldrb	r2, [r3, #0]
 801e76a:	785b      	ldrb	r3, [r3, #1]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d1d1      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e770:	b14a      	cbz	r2, 801e786 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e772:	2a01      	cmp	r2, #1
 801e774:	bf08      	it	eq
 801e776:	68c3      	ldreq	r3, [r0, #12]
 801e778:	e7f3      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e77a:	781a      	ldrb	r2, [r3, #0]
 801e77c:	785b      	ldrb	r3, [r3, #1]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d1c8      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e782:	2a00      	cmp	r2, #0
 801e784:	d1ed      	bne.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e786:	69c3      	ldr	r3, [r0, #28]
 801e788:	e7eb      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e78a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e78c:	e7e9      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e78e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801e790:	e7e7      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e792:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801e794:	e7e5      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e796:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801e798:	e7e3      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e79a:	2a2c      	cmp	r2, #44	@ 0x2c
 801e79c:	d030      	beq.n	801e800 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801e79e:	d80f      	bhi.n	801e7c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801e7a0:	2a08      	cmp	r2, #8
 801e7a2:	d042      	beq.n	801e82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e7a4:	d805      	bhi.n	801e7b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801e7a6:	2a04      	cmp	r2, #4
 801e7a8:	d03d      	beq.n	801e826 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e7aa:	2a05      	cmp	r2, #5
 801e7ac:	d1b2      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e7ae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801e7b0:	e7d7      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e7b2:	2a0a      	cmp	r2, #10
 801e7b4:	d039      	beq.n	801e82a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e7b6:	d301      	bcc.n	801e7bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801e7b8:	2a0b      	cmp	r2, #11
 801e7ba:	d1ab      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e7bc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801e7be:	e7d0      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e7c0:	2a30      	cmp	r2, #48	@ 0x30
 801e7c2:	d034      	beq.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e7c4:	d80b      	bhi.n	801e7de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801e7c6:	2a2e      	cmp	r2, #46	@ 0x2e
 801e7c8:	684b      	ldr	r3, [r1, #4]
 801e7ca:	d023      	beq.n	801e814 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e7cc:	d90e      	bls.n	801e7ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801e7ce:	781a      	ldrb	r2, [r3, #0]
 801e7d0:	785b      	ldrb	r3, [r3, #1]
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d19e      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e7d6:	2a00      	cmp	r2, #0
 801e7d8:	d1c3      	bne.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e7da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801e7dc:	e7c1      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e7de:	2a32      	cmp	r2, #50	@ 0x32
 801e7e0:	d025      	beq.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e7e2:	d301      	bcc.n	801e7e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e7e4:	2a33      	cmp	r2, #51	@ 0x33
 801e7e6:	d195      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e7e8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801e7ea:	e7ba      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e7ec:	781a      	ldrb	r2, [r3, #0]
 801e7ee:	785b      	ldrb	r3, [r3, #1]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d18f      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e7f4:	2a00      	cmp	r2, #0
 801e7f6:	d0f0      	beq.n	801e7da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801e7f8:	2a01      	cmp	r2, #1
 801e7fa:	d18b      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e7fc:	6983      	ldr	r3, [r0, #24]
 801e7fe:	e7b0      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e800:	684b      	ldr	r3, [r1, #4]
 801e802:	781a      	ldrb	r2, [r3, #0]
 801e804:	785b      	ldrb	r3, [r3, #1]
 801e806:	2b00      	cmp	r3, #0
 801e808:	d184      	bne.n	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e80a:	b152      	cbz	r2, 801e822 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e80c:	2a01      	cmp	r2, #1
 801e80e:	bf08      	it	eq
 801e810:	6903      	ldreq	r3, [r0, #16]
 801e812:	e7a6      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e814:	781a      	ldrb	r2, [r3, #0]
 801e816:	785b      	ldrb	r3, [r3, #1]
 801e818:	2b00      	cmp	r3, #0
 801e81a:	f47f af7b 	bne.w	801e714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e81e:	2a00      	cmp	r2, #0
 801e820:	d19f      	bne.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e822:	6a03      	ldr	r3, [r0, #32]
 801e824:	e79d      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e826:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e828:	e79b      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e82a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801e82c:	e799      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e82e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801e830:	e797      	b.n	801e762 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801e832 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e836:	b085      	sub	sp, #20
 801e838:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e83a:	9203      	str	r2, [sp, #12]
 801e83c:	6870      	ldr	r0, [r6, #4]
 801e83e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801e842:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801e846:	9101      	str	r1, [sp, #4]
 801e848:	fa1f f885 	uxth.w	r8, r5
 801e84c:	43ed      	mvns	r5, r5
 801e84e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e852:	b2ed      	uxtb	r5, r5
 801e854:	fb00 2404 	mla	r4, r0, r4, r2
 801e858:	6832      	ldr	r2, [r6, #0]
 801e85a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e85e:	4414      	add	r4, r2
 801e860:	f8dc 2000 	ldr.w	r2, [ip]
 801e864:	9202      	str	r2, [sp, #8]
 801e866:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e86a:	f102 0e04 	add.w	lr, r2, #4
 801e86e:	9a01      	ldr	r2, [sp, #4]
 801e870:	2a00      	cmp	r2, #0
 801e872:	dc03      	bgt.n	801e87c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e874:	9a03      	ldr	r2, [sp, #12]
 801e876:	2a00      	cmp	r2, #0
 801e878:	f340 8116 	ble.w	801eaa8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e87c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e87e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801e882:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e886:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e888:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801e88c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e890:	2b00      	cmp	r3, #0
 801e892:	dd0e      	ble.n	801e8b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e894:	1406      	asrs	r6, r0, #16
 801e896:	d405      	bmi.n	801e8a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e898:	4556      	cmp	r6, sl
 801e89a:	da03      	bge.n	801e8a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e89c:	1416      	asrs	r6, r2, #16
 801e89e:	d401      	bmi.n	801e8a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e8a0:	454e      	cmp	r6, r9
 801e8a2:	db07      	blt.n	801e8b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e8a4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e8a6:	3b01      	subs	r3, #1
 801e8a8:	3403      	adds	r4, #3
 801e8aa:	4430      	add	r0, r6
 801e8ac:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e8ae:	4432      	add	r2, r6
 801e8b0:	e7ee      	b.n	801e890 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e8b2:	d063      	beq.n	801e97c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e8b4:	1e5e      	subs	r6, r3, #1
 801e8b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801e8b8:	fb07 0706 	mla	r7, r7, r6, r0
 801e8bc:	143f      	asrs	r7, r7, #16
 801e8be:	d454      	bmi.n	801e96a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e8c0:	4557      	cmp	r7, sl
 801e8c2:	da52      	bge.n	801e96a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e8c4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801e8c6:	fb07 2606 	mla	r6, r7, r6, r2
 801e8ca:	1436      	asrs	r6, r6, #16
 801e8cc:	d44d      	bmi.n	801e96a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e8ce:	454e      	cmp	r6, r9
 801e8d0:	da4b      	bge.n	801e96a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e8d2:	1ce6      	adds	r6, r4, #3
 801e8d4:	4699      	mov	r9, r3
 801e8d6:	f1b9 0f00 	cmp.w	r9, #0
 801e8da:	f106 0603 	add.w	r6, r6, #3
 801e8de:	dd48      	ble.n	801e972 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801e8e0:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801e8e4:	1417      	asrs	r7, r2, #16
 801e8e6:	9902      	ldr	r1, [sp, #8]
 801e8e8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e8ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801e8f0:	fb0b 1707 	mla	r7, fp, r7, r1
 801e8f4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e8f8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e8fa:	f817 700a 	ldrb.w	r7, [r7, sl]
 801e8fe:	fb1b fb05 	smulbb	fp, fp, r5
 801e902:	4408      	add	r0, r1
 801e904:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e906:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e90a:	440a      	add	r2, r1
 801e90c:	eb0e 0a07 	add.w	sl, lr, r7
 801e910:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801e914:	fb07 b708 	mla	r7, r7, r8, fp
 801e918:	b2bf      	uxth	r7, r7
 801e91a:	f107 0b01 	add.w	fp, r7, #1
 801e91e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e922:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e926:	fb1b fb05 	smulbb	fp, fp, r5
 801e92a:	123f      	asrs	r7, r7, #8
 801e92c:	f806 7c06 	strb.w	r7, [r6, #-6]
 801e930:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801e934:	fb07 b708 	mla	r7, r7, r8, fp
 801e938:	b2bf      	uxth	r7, r7
 801e93a:	f107 0b01 	add.w	fp, r7, #1
 801e93e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801e942:	123f      	asrs	r7, r7, #8
 801e944:	f806 7c05 	strb.w	r7, [r6, #-5]
 801e948:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801e94c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801e950:	fb1a fa05 	smulbb	sl, sl, r5
 801e954:	fb07 a708 	mla	r7, r7, r8, sl
 801e958:	b2bf      	uxth	r7, r7
 801e95a:	f107 0a01 	add.w	sl, r7, #1
 801e95e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e962:	123f      	asrs	r7, r7, #8
 801e964:	f806 7c04 	strb.w	r7, [r6, #-4]
 801e968:	e7b5      	b.n	801e8d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e96a:	2700      	movs	r7, #0
 801e96c:	1bde      	subs	r6, r3, r7
 801e96e:	2e00      	cmp	r6, #0
 801e970:	dc42      	bgt.n	801e9f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801e972:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e976:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e97a:	441c      	add	r4, r3
 801e97c:	9b01      	ldr	r3, [sp, #4]
 801e97e:	2b00      	cmp	r3, #0
 801e980:	f340 8092 	ble.w	801eaa8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e98a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e98e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e992:	eef0 6a62 	vmov.f32	s13, s5
 801e996:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e99a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e99e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9a2:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801e9a6:	eef0 6a43 	vmov.f32	s13, s6
 801e9aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9ae:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801e9b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e9b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e9be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9ca:	ee12 2a90 	vmov	r2, s5
 801e9ce:	eef0 2a47 	vmov.f32	s5, s14
 801e9d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9d6:	ee13 2a10 	vmov	r2, s6
 801e9da:	9311      	str	r3, [sp, #68]	@ 0x44
 801e9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9de:	eeb0 3a67 	vmov.f32	s6, s15
 801e9e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9e6:	9312      	str	r3, [sp, #72]	@ 0x48
 801e9e8:	9b01      	ldr	r3, [sp, #4]
 801e9ea:	9a03      	ldr	r2, [sp, #12]
 801e9ec:	3b01      	subs	r3, #1
 801e9ee:	9301      	str	r3, [sp, #4]
 801e9f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9f2:	bf08      	it	eq
 801e9f4:	4613      	moveq	r3, r2
 801e9f6:	e73a      	b.n	801e86e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e9f8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e9fc:	d44e      	bmi.n	801ea9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e9fe:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ea02:	4556      	cmp	r6, sl
 801ea04:	dd4a      	ble.n	801ea9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ea06:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ea0a:	d447      	bmi.n	801ea9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ea0c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801ea10:	4559      	cmp	r1, fp
 801ea12:	dd43      	ble.n	801ea9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ea14:	fa0f f986 	sxth.w	r9, r6
 801ea18:	9902      	ldr	r1, [sp, #8]
 801ea1a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801ea1e:	fb0b 1909 	mla	r9, fp, r9, r1
 801ea22:	f814 b006 	ldrb.w	fp, [r4, r6]
 801ea26:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ea2a:	fb1b fb05 	smulbb	fp, fp, r5
 801ea2e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ea32:	eb0e 0a09 	add.w	sl, lr, r9
 801ea36:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801ea3a:	fb09 b908 	mla	r9, r9, r8, fp
 801ea3e:	fa1f f989 	uxth.w	r9, r9
 801ea42:	f109 0b01 	add.w	fp, r9, #1
 801ea46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ea4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea4e:	f804 9006 	strb.w	r9, [r4, r6]
 801ea52:	4426      	add	r6, r4
 801ea54:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ea58:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ea5c:	fb1b fb05 	smulbb	fp, fp, r5
 801ea60:	fb09 b908 	mla	r9, r9, r8, fp
 801ea64:	fa1f f989 	uxth.w	r9, r9
 801ea68:	f109 0b01 	add.w	fp, r9, #1
 801ea6c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ea70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea74:	f886 9001 	strb.w	r9, [r6, #1]
 801ea78:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ea7c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ea80:	fb1a fa05 	smulbb	sl, sl, r5
 801ea84:	fb09 a908 	mla	r9, r9, r8, sl
 801ea88:	fa1f f989 	uxth.w	r9, r9
 801ea8c:	f109 0a01 	add.w	sl, r9, #1
 801ea90:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ea94:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea98:	f886 9002 	strb.w	r9, [r6, #2]
 801ea9c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ea9e:	3701      	adds	r7, #1
 801eaa0:	4408      	add	r0, r1
 801eaa2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801eaa4:	440a      	add	r2, r1
 801eaa6:	e761      	b.n	801e96c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801eaa8:	b005      	add	sp, #20
 801eaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eaae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eaae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eab2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801eab4:	4693      	mov	fp, r2
 801eab6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801eab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eabc:	6868      	ldr	r0, [r5, #4]
 801eabe:	6877      	ldr	r7, [r6, #4]
 801eac0:	9100      	str	r1, [sp, #0]
 801eac2:	3704      	adds	r7, #4
 801eac4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801eac8:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801eacc:	fb00 2404 	mla	r4, r0, r4, r2
 801ead0:	682a      	ldr	r2, [r5, #0]
 801ead2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ead6:	4414      	add	r4, r2
 801ead8:	6832      	ldr	r2, [r6, #0]
 801eada:	9201      	str	r2, [sp, #4]
 801eadc:	9a00      	ldr	r2, [sp, #0]
 801eade:	2a00      	cmp	r2, #0
 801eae0:	dc03      	bgt.n	801eaea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eae2:	f1bb 0f00 	cmp.w	fp, #0
 801eae6:	f340 80bc 	ble.w	801ec62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801eaea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eaec:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801eaf0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801eaf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eaf6:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801eafa:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	dd0c      	ble.n	801eb1c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb02:	1405      	asrs	r5, r0, #16
 801eb04:	d405      	bmi.n	801eb12 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801eb06:	4555      	cmp	r5, sl
 801eb08:	da03      	bge.n	801eb12 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801eb0a:	1415      	asrs	r5, r2, #16
 801eb0c:	d401      	bmi.n	801eb12 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801eb0e:	454d      	cmp	r5, r9
 801eb10:	db05      	blt.n	801eb1e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eb12:	4440      	add	r0, r8
 801eb14:	4472      	add	r2, lr
 801eb16:	3b01      	subs	r3, #1
 801eb18:	3403      	adds	r4, #3
 801eb1a:	e7f0      	b.n	801eafe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801eb1c:	d03f      	beq.n	801eb9e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801eb1e:	1e5d      	subs	r5, r3, #1
 801eb20:	fb08 0c05 	mla	ip, r8, r5, r0
 801eb24:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801eb28:	d42e      	bmi.n	801eb88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801eb2a:	45d4      	cmp	ip, sl
 801eb2c:	da2c      	bge.n	801eb88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801eb2e:	fb0e 2505 	mla	r5, lr, r5, r2
 801eb32:	142d      	asrs	r5, r5, #16
 801eb34:	d428      	bmi.n	801eb88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801eb36:	454d      	cmp	r5, r9
 801eb38:	da26      	bge.n	801eb88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801eb3a:	1ce5      	adds	r5, r4, #3
 801eb3c:	469c      	mov	ip, r3
 801eb3e:	f1bc 0f00 	cmp.w	ip, #0
 801eb42:	f105 0503 	add.w	r5, r5, #3
 801eb46:	dd25      	ble.n	801eb94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801eb48:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801eb4c:	ea4f 4922 	mov.w	r9, r2, asr #16
 801eb50:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eb54:	4472      	add	r2, lr
 801eb56:	468a      	mov	sl, r1
 801eb58:	9901      	ldr	r1, [sp, #4]
 801eb5a:	fb0a 1909 	mla	r9, sl, r9, r1
 801eb5e:	1401      	asrs	r1, r0, #16
 801eb60:	4440      	add	r0, r8
 801eb62:	f819 9001 	ldrb.w	r9, [r9, r1]
 801eb66:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801eb6a:	eb07 0a09 	add.w	sl, r7, r9
 801eb6e:	f817 9009 	ldrb.w	r9, [r7, r9]
 801eb72:	f805 9c06 	strb.w	r9, [r5, #-6]
 801eb76:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801eb7a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801eb7e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801eb82:	f805 9c04 	strb.w	r9, [r5, #-4]
 801eb86:	e7da      	b.n	801eb3e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801eb88:	2500      	movs	r5, #0
 801eb8a:	eba3 0c05 	sub.w	ip, r3, r5
 801eb8e:	f1bc 0f00 	cmp.w	ip, #0
 801eb92:	dc3b      	bgt.n	801ec0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801eb94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb9c:	441c      	add	r4, r3
 801eb9e:	9b00      	ldr	r3, [sp, #0]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	dd5e      	ble.n	801ec62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801eba4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebae:	eeb0 6a62 	vmov.f32	s12, s5
 801ebb2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ebb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebbe:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801ebc2:	eeb0 6a43 	vmov.f32	s12, s6
 801ebc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebca:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801ebce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebe2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebe6:	ee12 2a90 	vmov	r2, s5
 801ebea:	eef0 2a47 	vmov.f32	s5, s14
 801ebee:	fb92 f8f3 	sdiv	r8, r2, r3
 801ebf2:	ee13 2a10 	vmov	r2, s6
 801ebf6:	eeb0 3a67 	vmov.f32	s6, s15
 801ebfa:	fb92 fef3 	sdiv	lr, r2, r3
 801ebfe:	9b00      	ldr	r3, [sp, #0]
 801ec00:	3b01      	subs	r3, #1
 801ec02:	9300      	str	r3, [sp, #0]
 801ec04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec06:	bf08      	it	eq
 801ec08:	465b      	moveq	r3, fp
 801ec0a:	e767      	b.n	801eadc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ec0c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ec10:	d423      	bmi.n	801ec5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ec12:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801ec16:	45cc      	cmp	ip, r9
 801ec18:	dd1f      	ble.n	801ec5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ec1a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ec1e:	d41c      	bmi.n	801ec5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ec20:	68f1      	ldr	r1, [r6, #12]
 801ec22:	4551      	cmp	r1, sl
 801ec24:	dd19      	ble.n	801ec5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ec26:	fa0f fc8c 	sxth.w	ip, ip
 801ec2a:	9901      	ldr	r1, [sp, #4]
 801ec2c:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801ec30:	f81c c009 	ldrb.w	ip, [ip, r9]
 801ec34:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ec38:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801ec3c:	eb07 090c 	add.w	r9, r7, ip
 801ec40:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801ec44:	f804 a00c 	strb.w	sl, [r4, ip]
 801ec48:	44a4      	add	ip, r4
 801ec4a:	f899 a001 	ldrb.w	sl, [r9, #1]
 801ec4e:	f88c a001 	strb.w	sl, [ip, #1]
 801ec52:	f899 9002 	ldrb.w	r9, [r9, #2]
 801ec56:	f88c 9002 	strb.w	r9, [ip, #2]
 801ec5a:	4440      	add	r0, r8
 801ec5c:	4472      	add	r2, lr
 801ec5e:	3501      	adds	r5, #1
 801ec60:	e793      	b.n	801eb8a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801ec62:	b003      	add	sp, #12
 801ec64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec6c:	b085      	sub	sp, #20
 801ec6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ec74:	9202      	str	r2, [sp, #8]
 801ec76:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801ec7a:	6860      	ldr	r0, [r4, #4]
 801ec7c:	9203      	str	r2, [sp, #12]
 801ec7e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ec82:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ec86:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801ec8a:	fb00 2505 	mla	r5, r0, r5, r2
 801ec8e:	6822      	ldr	r2, [r4, #0]
 801ec90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec94:	4415      	add	r5, r2
 801ec96:	f8dc 2000 	ldr.w	r2, [ip]
 801ec9a:	9200      	str	r2, [sp, #0]
 801ec9c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801eca0:	3204      	adds	r2, #4
 801eca2:	9201      	str	r2, [sp, #4]
 801eca4:	2900      	cmp	r1, #0
 801eca6:	dc03      	bgt.n	801ecb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801eca8:	9a02      	ldr	r2, [sp, #8]
 801ecaa:	2a00      	cmp	r2, #0
 801ecac:	f340 8127 	ble.w	801eefe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ecb0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ecb2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ecb6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ecba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ecbc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ecc0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	dd0d      	ble.n	801ece4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ecc8:	1422      	asrs	r2, r4, #16
 801ecca:	d405      	bmi.n	801ecd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eccc:	4542      	cmp	r2, r8
 801ecce:	da03      	bge.n	801ecd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ecd0:	1402      	asrs	r2, r0, #16
 801ecd2:	d401      	bmi.n	801ecd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ecd4:	42ba      	cmp	r2, r7
 801ecd6:	db06      	blt.n	801ece6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ecd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ecda:	4474      	add	r4, lr
 801ecdc:	3b01      	subs	r3, #1
 801ecde:	3503      	adds	r5, #3
 801ece0:	4410      	add	r0, r2
 801ece2:	e7ef      	b.n	801ecc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ece4:	d075      	beq.n	801edd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ece6:	1e5a      	subs	r2, r3, #1
 801ece8:	fb0e 4602 	mla	r6, lr, r2, r4
 801ecec:	1436      	asrs	r6, r6, #16
 801ecee:	d465      	bmi.n	801edbc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ecf0:	4546      	cmp	r6, r8
 801ecf2:	da63      	bge.n	801edbc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ecf4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ecf6:	fb06 0202 	mla	r2, r6, r2, r0
 801ecfa:	1412      	asrs	r2, r2, #16
 801ecfc:	d45e      	bmi.n	801edbc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ecfe:	42ba      	cmp	r2, r7
 801ed00:	da5c      	bge.n	801edbc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ed02:	1cef      	adds	r7, r5, #3
 801ed04:	4699      	mov	r9, r3
 801ed06:	f1b9 0f00 	cmp.w	r9, #0
 801ed0a:	dd5d      	ble.n	801edc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ed0c:	1402      	asrs	r2, r0, #16
 801ed0e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ed12:	1426      	asrs	r6, r4, #16
 801ed14:	4692      	mov	sl, r2
 801ed16:	9a00      	ldr	r2, [sp, #0]
 801ed18:	fb08 220a 	mla	r2, r8, sl, r2
 801ed1c:	5d92      	ldrb	r2, [r2, r6]
 801ed1e:	9e01      	ldr	r6, [sp, #4]
 801ed20:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ed24:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ed28:	d041      	beq.n	801edae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ed2a:	9a03      	ldr	r2, [sp, #12]
 801ed2c:	fa5f fb86 	uxtb.w	fp, r6
 801ed30:	fb02 f808 	mul.w	r8, r2, r8
 801ed34:	f108 0201 	add.w	r2, r8, #1
 801ed38:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801ed3c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ed40:	1212      	asrs	r2, r2, #8
 801ed42:	fa1f fa82 	uxth.w	sl, r2
 801ed46:	43d2      	mvns	r2, r2
 801ed48:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed4c:	b2d2      	uxtb	r2, r2
 801ed4e:	fb08 b802 	mla	r8, r8, r2, fp
 801ed52:	fa1f f888 	uxth.w	r8, r8
 801ed56:	f108 0b01 	add.w	fp, r8, #1
 801ed5a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ed5e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ed62:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ed66:	fb1b fb0a 	smulbb	fp, fp, sl
 801ed6a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed6e:	fb16 fa0a 	smulbb	sl, r6, sl
 801ed72:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ed76:	f807 8c03 	strb.w	r8, [r7, #-3]
 801ed7a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801ed7e:	fb06 aa02 	mla	sl, r6, r2, sl
 801ed82:	fb08 b802 	mla	r8, r8, r2, fp
 801ed86:	fa1f fa8a 	uxth.w	sl, sl
 801ed8a:	fa1f f888 	uxth.w	r8, r8
 801ed8e:	f10a 0601 	add.w	r6, sl, #1
 801ed92:	f108 0b01 	add.w	fp, r8, #1
 801ed96:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ed9a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ed9e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eda2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eda6:	f807 ac01 	strb.w	sl, [r7, #-1]
 801edaa:	f807 8c02 	strb.w	r8, [r7, #-2]
 801edae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801edb0:	4474      	add	r4, lr
 801edb2:	3703      	adds	r7, #3
 801edb4:	f109 39ff 	add.w	r9, r9, #4294967295
 801edb8:	4410      	add	r0, r2
 801edba:	e7a4      	b.n	801ed06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801edbc:	f04f 0800 	mov.w	r8, #0
 801edc0:	eba3 0208 	sub.w	r2, r3, r8
 801edc4:	2a00      	cmp	r2, #0
 801edc6:	dc3b      	bgt.n	801ee40 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801edc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801edcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edd0:	441d      	add	r5, r3
 801edd2:	2900      	cmp	r1, #0
 801edd4:	f340 8093 	ble.w	801eefe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801edd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eddc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801edde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ede2:	3901      	subs	r1, #1
 801ede4:	eeb0 6a62 	vmov.f32	s12, s5
 801ede8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801edec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edf0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edf4:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801edf8:	eeb0 6a43 	vmov.f32	s12, s6
 801edfc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee00:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ee04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee08:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee1c:	ee12 2a90 	vmov	r2, s5
 801ee20:	eef0 2a47 	vmov.f32	s5, s14
 801ee24:	fb92 fef3 	sdiv	lr, r2, r3
 801ee28:	ee13 2a10 	vmov	r2, s6
 801ee2c:	eeb0 3a67 	vmov.f32	s6, s15
 801ee30:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee34:	9a02      	ldr	r2, [sp, #8]
 801ee36:	9312      	str	r3, [sp, #72]	@ 0x48
 801ee38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee3a:	bf08      	it	eq
 801ee3c:	4613      	moveq	r3, r2
 801ee3e:	e731      	b.n	801eca4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ee40:	1427      	asrs	r7, r4, #16
 801ee42:	d456      	bmi.n	801eef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ee44:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ee48:	42be      	cmp	r6, r7
 801ee4a:	dd52      	ble.n	801eef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ee4c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ee50:	d44f      	bmi.n	801eef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ee52:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ee56:	454a      	cmp	r2, r9
 801ee58:	dd4b      	ble.n	801eef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ee5a:	9a00      	ldr	r2, [sp, #0]
 801ee5c:	b236      	sxth	r6, r6
 801ee5e:	fb09 2606 	mla	r6, r9, r6, r2
 801ee62:	5df2      	ldrb	r2, [r6, r7]
 801ee64:	9e01      	ldr	r6, [sp, #4]
 801ee66:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ee6a:	0e3a      	lsrs	r2, r7, #24
 801ee6c:	d041      	beq.n	801eef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ee6e:	9e03      	ldr	r6, [sp, #12]
 801ee70:	fa5f fb87 	uxtb.w	fp, r7
 801ee74:	4372      	muls	r2, r6
 801ee76:	1c56      	adds	r6, r2, #1
 801ee78:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ee7c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801ee80:	1212      	asrs	r2, r2, #8
 801ee82:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ee86:	fa1f fa82 	uxth.w	sl, r2
 801ee8a:	43d2      	mvns	r2, r2
 801ee8c:	fb1b fb0a 	smulbb	fp, fp, sl
 801ee90:	b2d2      	uxtb	r2, r2
 801ee92:	fb09 b902 	mla	r9, r9, r2, fp
 801ee96:	fa1f f989 	uxth.w	r9, r9
 801ee9a:	f109 0b01 	add.w	fp, r9, #1
 801ee9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eea2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801eea6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801eeaa:	fb1b fb0a 	smulbb	fp, fp, sl
 801eeae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eeb2:	fb17 fa0a 	smulbb	sl, r7, sl
 801eeb6:	f805 9006 	strb.w	r9, [r5, r6]
 801eeba:	442e      	add	r6, r5
 801eebc:	78b7      	ldrb	r7, [r6, #2]
 801eebe:	f896 9001 	ldrb.w	r9, [r6, #1]
 801eec2:	fb07 aa02 	mla	sl, r7, r2, sl
 801eec6:	fb09 b902 	mla	r9, r9, r2, fp
 801eeca:	fa1f fa8a 	uxth.w	sl, sl
 801eece:	fa1f f989 	uxth.w	r9, r9
 801eed2:	f10a 0701 	add.w	r7, sl, #1
 801eed6:	f109 0b01 	add.w	fp, r9, #1
 801eeda:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eede:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eee2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eee6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eeea:	f886 a002 	strb.w	sl, [r6, #2]
 801eeee:	f886 9001 	strb.w	r9, [r6, #1]
 801eef2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801eef4:	4474      	add	r4, lr
 801eef6:	f108 0801 	add.w	r8, r8, #1
 801eefa:	4410      	add	r0, r2
 801eefc:	e760      	b.n	801edc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801eefe:	b005      	add	sp, #20
 801ef00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef04 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef08:	b085      	sub	sp, #20
 801ef0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef0e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ef10:	9203      	str	r2, [sp, #12]
 801ef12:	6868      	ldr	r0, [r5, #4]
 801ef14:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ef18:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ef1c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ef20:	fb00 2404 	mla	r4, r0, r4, r2
 801ef24:	682a      	ldr	r2, [r5, #0]
 801ef26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef2a:	4414      	add	r4, r2
 801ef2c:	f8dc 2000 	ldr.w	r2, [ip]
 801ef30:	9201      	str	r2, [sp, #4]
 801ef32:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ef36:	3204      	adds	r2, #4
 801ef38:	9202      	str	r2, [sp, #8]
 801ef3a:	2900      	cmp	r1, #0
 801ef3c:	dc03      	bgt.n	801ef46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ef3e:	9a03      	ldr	r2, [sp, #12]
 801ef40:	2a00      	cmp	r2, #0
 801ef42:	f340 8137 	ble.w	801f1b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ef46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ef48:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ef4c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ef50:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ef52:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ef56:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	dd0d      	ble.n	801ef7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef5e:	1405      	asrs	r5, r0, #16
 801ef60:	d405      	bmi.n	801ef6e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef62:	4545      	cmp	r5, r8
 801ef64:	da03      	bge.n	801ef6e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef66:	1415      	asrs	r5, r2, #16
 801ef68:	d401      	bmi.n	801ef6e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ef6a:	42bd      	cmp	r5, r7
 801ef6c:	db06      	blt.n	801ef7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ef6e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ef70:	4470      	add	r0, lr
 801ef72:	3b01      	subs	r3, #1
 801ef74:	3403      	adds	r4, #3
 801ef76:	442a      	add	r2, r5
 801ef78:	e7ef      	b.n	801ef5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ef7a:	d070      	beq.n	801f05e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ef7c:	1e5d      	subs	r5, r3, #1
 801ef7e:	fb0e 0605 	mla	r6, lr, r5, r0
 801ef82:	1436      	asrs	r6, r6, #16
 801ef84:	d462      	bmi.n	801f04c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ef86:	4546      	cmp	r6, r8
 801ef88:	da60      	bge.n	801f04c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ef8a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ef8c:	fb06 2505 	mla	r5, r6, r5, r2
 801ef90:	142d      	asrs	r5, r5, #16
 801ef92:	d45b      	bmi.n	801f04c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ef94:	42bd      	cmp	r5, r7
 801ef96:	da59      	bge.n	801f04c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801ef98:	1ce5      	adds	r5, r4, #3
 801ef9a:	469a      	mov	sl, r3
 801ef9c:	f1ba 0f00 	cmp.w	sl, #0
 801efa0:	dd58      	ble.n	801f054 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801efa2:	1416      	asrs	r6, r2, #16
 801efa4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801efa8:	1407      	asrs	r7, r0, #16
 801efaa:	46b1      	mov	r9, r6
 801efac:	9e01      	ldr	r6, [sp, #4]
 801efae:	fb08 6609 	mla	r6, r8, r9, r6
 801efb2:	5df6      	ldrb	r6, [r6, r7]
 801efb4:	9f02      	ldr	r7, [sp, #8]
 801efb6:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801efba:	0e37      	lsrs	r7, r6, #24
 801efbc:	2fff      	cmp	r7, #255	@ 0xff
 801efbe:	f000 80f0 	beq.w	801f1a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801efc2:	fa5f f887 	uxtb.w	r8, r7
 801efc6:	b3d7      	cbz	r7, 801f03e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801efc8:	fa1f f788 	uxth.w	r7, r8
 801efcc:	ea6f 0808 	mvn.w	r8, r8
 801efd0:	fa5f fb86 	uxtb.w	fp, r6
 801efd4:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801efd8:	fa5f f888 	uxtb.w	r8, r8
 801efdc:	fb1b fb07 	smulbb	fp, fp, r7
 801efe0:	fb09 b908 	mla	r9, r9, r8, fp
 801efe4:	fa1f f989 	uxth.w	r9, r9
 801efe8:	f109 0b01 	add.w	fp, r9, #1
 801efec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eff0:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801eff4:	fb1b fb08 	smulbb	fp, fp, r8
 801eff8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801effc:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f000:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f004:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f008:	fb09 b907 	mla	r9, r9, r7, fp
 801f00c:	fa1f f989 	uxth.w	r9, r9
 801f010:	f109 0b01 	add.w	fp, r9, #1
 801f014:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f018:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f01c:	f805 9c02 	strb.w	r9, [r5, #-2]
 801f020:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f024:	fb19 f808 	smulbb	r8, r9, r8
 801f028:	fb06 8607 	mla	r6, r6, r7, r8
 801f02c:	b2b6      	uxth	r6, r6
 801f02e:	f106 0801 	add.w	r8, r6, #1
 801f032:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801f036:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f03a:	f805 8c01 	strb.w	r8, [r5, #-1]
 801f03e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f040:	4470      	add	r0, lr
 801f042:	3503      	adds	r5, #3
 801f044:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f048:	4432      	add	r2, r6
 801f04a:	e7a7      	b.n	801ef9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f04c:	2600      	movs	r6, #0
 801f04e:	1b9d      	subs	r5, r3, r6
 801f050:	2d00      	cmp	r5, #0
 801f052:	dc3b      	bgt.n	801f0cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f05c:	441c      	add	r4, r3
 801f05e:	2900      	cmp	r1, #0
 801f060:	f340 80a8 	ble.w	801f1b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f064:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f06a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f06e:	3901      	subs	r1, #1
 801f070:	eeb0 6a62 	vmov.f32	s12, s5
 801f074:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f078:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f07c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f080:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f084:	eeb0 6a43 	vmov.f32	s12, s6
 801f088:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f08c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f090:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f094:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f098:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f09c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0a8:	ee12 2a90 	vmov	r2, s5
 801f0ac:	eef0 2a47 	vmov.f32	s5, s14
 801f0b0:	fb92 fef3 	sdiv	lr, r2, r3
 801f0b4:	ee13 2a10 	vmov	r2, s6
 801f0b8:	eeb0 3a67 	vmov.f32	s6, s15
 801f0bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0c0:	9a03      	ldr	r2, [sp, #12]
 801f0c2:	9312      	str	r3, [sp, #72]	@ 0x48
 801f0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0c6:	bf08      	it	eq
 801f0c8:	4613      	moveq	r3, r2
 801f0ca:	e736      	b.n	801ef3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f0cc:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f0d0:	d457      	bmi.n	801f182 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f0d2:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801f0d6:	4547      	cmp	r7, r8
 801f0d8:	dd53      	ble.n	801f182 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f0da:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f0de:	d450      	bmi.n	801f182 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f0e0:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801f0e4:	454d      	cmp	r5, r9
 801f0e6:	dd4c      	ble.n	801f182 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f0e8:	9d01      	ldr	r5, [sp, #4]
 801f0ea:	b23f      	sxth	r7, r7
 801f0ec:	fb09 5707 	mla	r7, r9, r7, r5
 801f0f0:	f817 5008 	ldrb.w	r5, [r7, r8]
 801f0f4:	9f02      	ldr	r7, [sp, #8]
 801f0f6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801f0fa:	0e2f      	lsrs	r7, r5, #24
 801f0fc:	2fff      	cmp	r7, #255	@ 0xff
 801f0fe:	d045      	beq.n	801f18c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f100:	fa5f f987 	uxtb.w	r9, r7
 801f104:	b3ef      	cbz	r7, 801f182 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f106:	fa1f f889 	uxth.w	r8, r9
 801f10a:	ea6f 0909 	mvn.w	r9, r9
 801f10e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f112:	fa5f fb85 	uxtb.w	fp, r5
 801f116:	f814 a007 	ldrb.w	sl, [r4, r7]
 801f11a:	fa5f f989 	uxtb.w	r9, r9
 801f11e:	fb1b fb08 	smulbb	fp, fp, r8
 801f122:	fb0a ba09 	mla	sl, sl, r9, fp
 801f126:	fa1f fa8a 	uxth.w	sl, sl
 801f12a:	f10a 0b01 	add.w	fp, sl, #1
 801f12e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f132:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f136:	f804 a007 	strb.w	sl, [r4, r7]
 801f13a:	4427      	add	r7, r4
 801f13c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f140:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801f144:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f148:	fb1b fb09 	smulbb	fp, fp, r9
 801f14c:	fb0a ba08 	mla	sl, sl, r8, fp
 801f150:	fa1f fa8a 	uxth.w	sl, sl
 801f154:	f10a 0b01 	add.w	fp, sl, #1
 801f158:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f15c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f160:	f887 a001 	strb.w	sl, [r7, #1]
 801f164:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f168:	fb1a f909 	smulbb	r9, sl, r9
 801f16c:	fb05 9508 	mla	r5, r5, r8, r9
 801f170:	b2ad      	uxth	r5, r5
 801f172:	f105 0901 	add.w	r9, r5, #1
 801f176:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801f17a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f17e:	f887 9002 	strb.w	r9, [r7, #2]
 801f182:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f184:	4470      	add	r0, lr
 801f186:	3601      	adds	r6, #1
 801f188:	442a      	add	r2, r5
 801f18a:	e760      	b.n	801f04e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f18c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f190:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801f194:	55e5      	strb	r5, [r4, r7]
 801f196:	4427      	add	r7, r4
 801f198:	0c2d      	lsrs	r5, r5, #16
 801f19a:	f887 8001 	strb.w	r8, [r7, #1]
 801f19e:	70bd      	strb	r5, [r7, #2]
 801f1a0:	e7ef      	b.n	801f182 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f1a2:	0a37      	lsrs	r7, r6, #8
 801f1a4:	f805 6c03 	strb.w	r6, [r5, #-3]
 801f1a8:	0c36      	lsrs	r6, r6, #16
 801f1aa:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f1ae:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f1b2:	e744      	b.n	801f03e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801f1b4:	b005      	add	sp, #20
 801f1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1be:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f1c0:	9201      	str	r2, [sp, #4]
 801f1c2:	6870      	ldr	r0, [r6, #4]
 801f1c4:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801f1c8:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801f1cc:	fa1f fe85 	uxth.w	lr, r5
 801f1d0:	43ed      	mvns	r5, r5
 801f1d2:	f8dc 8000 	ldr.w	r8, [ip]
 801f1d6:	b2ed      	uxtb	r5, r5
 801f1d8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f1dc:	fb00 2404 	mla	r4, r0, r4, r2
 801f1e0:	6832      	ldr	r2, [r6, #0]
 801f1e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f1e6:	4414      	add	r4, r2
 801f1e8:	2900      	cmp	r1, #0
 801f1ea:	dc03      	bgt.n	801f1f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f1ec:	9a01      	ldr	r2, [sp, #4]
 801f1ee:	2a00      	cmp	r2, #0
 801f1f0:	f340 810d 	ble.w	801f40e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f1f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f1f6:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801f1fa:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f1fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f200:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801f204:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f208:	2b00      	cmp	r3, #0
 801f20a:	dd0e      	ble.n	801f22a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f20c:	1406      	asrs	r6, r0, #16
 801f20e:	d405      	bmi.n	801f21c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f210:	4556      	cmp	r6, sl
 801f212:	da03      	bge.n	801f21c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f214:	1416      	asrs	r6, r2, #16
 801f216:	d401      	bmi.n	801f21c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f218:	454e      	cmp	r6, r9
 801f21a:	db07      	blt.n	801f22c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f21c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801f21e:	3b01      	subs	r3, #1
 801f220:	3403      	adds	r4, #3
 801f222:	4430      	add	r0, r6
 801f224:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801f226:	4432      	add	r2, r6
 801f228:	e7ee      	b.n	801f208 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f22a:	d060      	beq.n	801f2ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801f22c:	1e5e      	subs	r6, r3, #1
 801f22e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f230:	fb07 0706 	mla	r7, r7, r6, r0
 801f234:	143f      	asrs	r7, r7, #16
 801f236:	d451      	bmi.n	801f2dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f238:	4557      	cmp	r7, sl
 801f23a:	da4f      	bge.n	801f2dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f23c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f23e:	fb07 2606 	mla	r6, r7, r6, r2
 801f242:	1436      	asrs	r6, r6, #16
 801f244:	d44a      	bmi.n	801f2dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f246:	454e      	cmp	r6, r9
 801f248:	da48      	bge.n	801f2dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f24a:	1ce6      	adds	r6, r4, #3
 801f24c:	4699      	mov	r9, r3
 801f24e:	f1b9 0f00 	cmp.w	r9, #0
 801f252:	f106 0603 	add.w	r6, r6, #3
 801f256:	dd45      	ble.n	801f2e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801f258:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801f25c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f260:	1417      	asrs	r7, r2, #16
 801f262:	f109 39ff 	add.w	r9, r9, #4294967295
 801f266:	fb0b a707 	mla	r7, fp, r7, sl
 801f26a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f26e:	fb1b fb05 	smulbb	fp, fp, r5
 801f272:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f276:	eb08 0a07 	add.w	sl, r8, r7
 801f27a:	f818 7007 	ldrb.w	r7, [r8, r7]
 801f27e:	fb07 b70e 	mla	r7, r7, lr, fp
 801f282:	b2bf      	uxth	r7, r7
 801f284:	f107 0b01 	add.w	fp, r7, #1
 801f288:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f28c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f290:	fb1b fb05 	smulbb	fp, fp, r5
 801f294:	123f      	asrs	r7, r7, #8
 801f296:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f29a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f29e:	fb07 b70e 	mla	r7, r7, lr, fp
 801f2a2:	b2bf      	uxth	r7, r7
 801f2a4:	f107 0b01 	add.w	fp, r7, #1
 801f2a8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f2ac:	123f      	asrs	r7, r7, #8
 801f2ae:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f2b2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f2b6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f2ba:	fb1a fa05 	smulbb	sl, sl, r5
 801f2be:	fb07 a70e 	mla	r7, r7, lr, sl
 801f2c2:	b2bf      	uxth	r7, r7
 801f2c4:	f107 0a01 	add.w	sl, r7, #1
 801f2c8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f2cc:	123f      	asrs	r7, r7, #8
 801f2ce:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f2d2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f2d4:	4438      	add	r0, r7
 801f2d6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f2d8:	443a      	add	r2, r7
 801f2da:	e7b8      	b.n	801f24e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f2dc:	2700      	movs	r7, #0
 801f2de:	1bde      	subs	r6, r3, r7
 801f2e0:	2e00      	cmp	r6, #0
 801f2e2:	dc3f      	bgt.n	801f364 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f2e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2ec:	441c      	add	r4, r3
 801f2ee:	2900      	cmp	r1, #0
 801f2f0:	f340 808d 	ble.w	801f40e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801f2f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f2f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f2fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2fe:	3901      	subs	r1, #1
 801f300:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f304:	eef0 6a62 	vmov.f32	s13, s5
 801f308:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f30c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f310:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f314:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801f318:	eef0 6a43 	vmov.f32	s13, s6
 801f31c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f320:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801f324:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f328:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f32c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f330:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f334:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f338:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f33c:	ee12 2a90 	vmov	r2, s5
 801f340:	eef0 2a47 	vmov.f32	s5, s14
 801f344:	fb92 f3f3 	sdiv	r3, r2, r3
 801f348:	ee13 2a10 	vmov	r2, s6
 801f34c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f34e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f350:	eeb0 3a67 	vmov.f32	s6, s15
 801f354:	fb92 f3f3 	sdiv	r3, r2, r3
 801f358:	9a01      	ldr	r2, [sp, #4]
 801f35a:	9310      	str	r3, [sp, #64]	@ 0x40
 801f35c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f35e:	bf08      	it	eq
 801f360:	4613      	moveq	r3, r2
 801f362:	e741      	b.n	801f1e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f364:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f368:	d44b      	bmi.n	801f402 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f36a:	f8dc b008 	ldr.w	fp, [ip, #8]
 801f36e:	45cb      	cmp	fp, r9
 801f370:	dd47      	ble.n	801f402 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f372:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f376:	d444      	bmi.n	801f402 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f378:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801f37c:	4556      	cmp	r6, sl
 801f37e:	dd40      	ble.n	801f402 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f380:	fa0f f68b 	sxth.w	r6, fp
 801f384:	fb0a 9906 	mla	r9, sl, r6, r9
 801f388:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f38c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f390:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f394:	fb1b fb05 	smulbb	fp, fp, r5
 801f398:	eb08 0a09 	add.w	sl, r8, r9
 801f39c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801f3a0:	fb09 b90e 	mla	r9, r9, lr, fp
 801f3a4:	fa1f f989 	uxth.w	r9, r9
 801f3a8:	f109 0b01 	add.w	fp, r9, #1
 801f3ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f3b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3b4:	f804 9006 	strb.w	r9, [r4, r6]
 801f3b8:	4426      	add	r6, r4
 801f3ba:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f3be:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f3c2:	fb1b fb05 	smulbb	fp, fp, r5
 801f3c6:	fb09 b90e 	mla	r9, r9, lr, fp
 801f3ca:	fa1f f989 	uxth.w	r9, r9
 801f3ce:	f109 0b01 	add.w	fp, r9, #1
 801f3d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f3d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3da:	f886 9001 	strb.w	r9, [r6, #1]
 801f3de:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f3e2:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f3e6:	fb1a fa05 	smulbb	sl, sl, r5
 801f3ea:	fb09 a90e 	mla	r9, r9, lr, sl
 801f3ee:	fa1f f989 	uxth.w	r9, r9
 801f3f2:	f109 0a01 	add.w	sl, r9, #1
 801f3f6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f3fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3fe:	f886 9002 	strb.w	r9, [r6, #2]
 801f402:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801f404:	3701      	adds	r7, #1
 801f406:	4430      	add	r0, r6
 801f408:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801f40a:	4432      	add	r2, r6
 801f40c:	e767      	b.n	801f2de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f40e:	b003      	add	sp, #12
 801f410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f414 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f418:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f41a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f41e:	9201      	str	r2, [sp, #4]
 801f420:	6868      	ldr	r0, [r5, #4]
 801f422:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801f424:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801f428:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801f42c:	fb00 2404 	mla	r4, r0, r4, r2
 801f430:	682a      	ldr	r2, [r5, #0]
 801f432:	f8d7 8000 	ldr.w	r8, [r7]
 801f436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f43a:	4414      	add	r4, r2
 801f43c:	2900      	cmp	r1, #0
 801f43e:	dc03      	bgt.n	801f448 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f440:	9a01      	ldr	r2, [sp, #4]
 801f442:	2a00      	cmp	r2, #0
 801f444:	f340 80af 	ble.w	801f5a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f448:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f44a:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801f44e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f452:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f454:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801f458:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	dd0c      	ble.n	801f47a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f460:	1405      	asrs	r5, r0, #16
 801f462:	d405      	bmi.n	801f470 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f464:	4555      	cmp	r5, sl
 801f466:	da03      	bge.n	801f470 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f468:	1415      	asrs	r5, r2, #16
 801f46a:	d401      	bmi.n	801f470 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f46c:	454d      	cmp	r5, r9
 801f46e:	db05      	blt.n	801f47c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f470:	4470      	add	r0, lr
 801f472:	4462      	add	r2, ip
 801f474:	3b01      	subs	r3, #1
 801f476:	3403      	adds	r4, #3
 801f478:	e7f0      	b.n	801f45c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f47a:	d038      	beq.n	801f4ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f47c:	1e5d      	subs	r5, r3, #1
 801f47e:	fb0e 0605 	mla	r6, lr, r5, r0
 801f482:	1436      	asrs	r6, r6, #16
 801f484:	d42a      	bmi.n	801f4dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f486:	4556      	cmp	r6, sl
 801f488:	da28      	bge.n	801f4dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f48a:	fb0c 2505 	mla	r5, ip, r5, r2
 801f48e:	142d      	asrs	r5, r5, #16
 801f490:	d424      	bmi.n	801f4dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f492:	454d      	cmp	r5, r9
 801f494:	da22      	bge.n	801f4dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f496:	1ce6      	adds	r6, r4, #3
 801f498:	4699      	mov	r9, r3
 801f49a:	f1b9 0f00 	cmp.w	r9, #0
 801f49e:	f106 0603 	add.w	r6, r6, #3
 801f4a2:	dd1f      	ble.n	801f4e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801f4a4:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801f4a8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f4ac:	1415      	asrs	r5, r2, #16
 801f4ae:	4470      	add	r0, lr
 801f4b0:	4462      	add	r2, ip
 801f4b2:	f109 39ff 	add.w	r9, r9, #4294967295
 801f4b6:	fb0b a505 	mla	r5, fp, r5, sl
 801f4ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4be:	eb08 0a05 	add.w	sl, r8, r5
 801f4c2:	f818 5005 	ldrb.w	r5, [r8, r5]
 801f4c6:	f806 5c06 	strb.w	r5, [r6, #-6]
 801f4ca:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801f4ce:	f806 5c05 	strb.w	r5, [r6, #-5]
 801f4d2:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801f4d6:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f4da:	e7de      	b.n	801f49a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f4dc:	2600      	movs	r6, #0
 801f4de:	1b9d      	subs	r5, r3, r6
 801f4e0:	2d00      	cmp	r5, #0
 801f4e2:	dc38      	bgt.n	801f556 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f4e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4ec:	441c      	add	r4, r3
 801f4ee:	2900      	cmp	r1, #0
 801f4f0:	dd59      	ble.n	801f5a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801f4f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f4f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4fc:	3901      	subs	r1, #1
 801f4fe:	eeb0 6a62 	vmov.f32	s12, s5
 801f502:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f506:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f50a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f50e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f512:	eeb0 6a43 	vmov.f32	s12, s6
 801f516:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f51a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f51e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f522:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f526:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f52a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f52e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f532:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f536:	ee12 2a90 	vmov	r2, s5
 801f53a:	eef0 2a47 	vmov.f32	s5, s14
 801f53e:	fb92 fef3 	sdiv	lr, r2, r3
 801f542:	ee13 2a10 	vmov	r2, s6
 801f546:	eeb0 3a67 	vmov.f32	s6, s15
 801f54a:	fb92 fcf3 	sdiv	ip, r2, r3
 801f54e:	9a01      	ldr	r2, [sp, #4]
 801f550:	bf08      	it	eq
 801f552:	4613      	moveq	r3, r2
 801f554:	e772      	b.n	801f43c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801f556:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f55a:	d420      	bmi.n	801f59e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f55c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801f560:	45cb      	cmp	fp, r9
 801f562:	dd1c      	ble.n	801f59e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f564:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f568:	d419      	bmi.n	801f59e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f56a:	68fd      	ldr	r5, [r7, #12]
 801f56c:	4555      	cmp	r5, sl
 801f56e:	dd16      	ble.n	801f59e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801f570:	fa0f f58b 	sxth.w	r5, fp
 801f574:	fb0a 9505 	mla	r5, sl, r5, r9
 801f578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f57c:	f818 9005 	ldrb.w	r9, [r8, r5]
 801f580:	eb08 0b05 	add.w	fp, r8, r5
 801f584:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801f588:	f804 9005 	strb.w	r9, [r4, r5]
 801f58c:	4425      	add	r5, r4
 801f58e:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801f592:	f885 9001 	strb.w	r9, [r5, #1]
 801f596:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f59a:	f885 9002 	strb.w	r9, [r5, #2]
 801f59e:	4470      	add	r0, lr
 801f5a0:	4462      	add	r2, ip
 801f5a2:	3601      	adds	r6, #1
 801f5a4:	e79b      	b.n	801f4de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801f5a6:	b003      	add	sp, #12
 801f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5b0:	b085      	sub	sp, #20
 801f5b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f5b6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f5b8:	9202      	str	r2, [sp, #8]
 801f5ba:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f5be:	6860      	ldr	r0, [r4, #4]
 801f5c0:	9203      	str	r2, [sp, #12]
 801f5c2:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801f5c6:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801f5ca:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801f5ce:	fb00 2505 	mla	r5, r0, r5, r2
 801f5d2:	6822      	ldr	r2, [r4, #0]
 801f5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f5d8:	4415      	add	r5, r2
 801f5da:	f8dc 2000 	ldr.w	r2, [ip]
 801f5de:	9201      	str	r2, [sp, #4]
 801f5e0:	2900      	cmp	r1, #0
 801f5e2:	dc03      	bgt.n	801f5ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f5e4:	9a02      	ldr	r2, [sp, #8]
 801f5e6:	2a00      	cmp	r2, #0
 801f5e8:	f340 8122 	ble.w	801f830 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f5ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f5ee:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f5f2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801f5f6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f5f8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f5fc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f600:	2b00      	cmp	r3, #0
 801f602:	dd0d      	ble.n	801f620 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f604:	1422      	asrs	r2, r4, #16
 801f606:	d405      	bmi.n	801f614 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f608:	4542      	cmp	r2, r8
 801f60a:	da03      	bge.n	801f614 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f60c:	1402      	asrs	r2, r0, #16
 801f60e:	d401      	bmi.n	801f614 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f610:	42ba      	cmp	r2, r7
 801f612:	db06      	blt.n	801f622 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f614:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f616:	4474      	add	r4, lr
 801f618:	3b01      	subs	r3, #1
 801f61a:	3503      	adds	r5, #3
 801f61c:	4410      	add	r0, r2
 801f61e:	e7ef      	b.n	801f600 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f620:	d072      	beq.n	801f708 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f622:	1e5a      	subs	r2, r3, #1
 801f624:	fb0e 4602 	mla	r6, lr, r2, r4
 801f628:	1436      	asrs	r6, r6, #16
 801f62a:	d462      	bmi.n	801f6f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f62c:	4546      	cmp	r6, r8
 801f62e:	da60      	bge.n	801f6f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f630:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801f632:	fb06 0202 	mla	r2, r6, r2, r0
 801f636:	1412      	asrs	r2, r2, #16
 801f638:	d45b      	bmi.n	801f6f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f63a:	42ba      	cmp	r2, r7
 801f63c:	da59      	bge.n	801f6f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f63e:	1cef      	adds	r7, r5, #3
 801f640:	4699      	mov	r9, r3
 801f642:	f1b9 0f00 	cmp.w	r9, #0
 801f646:	dd5a      	ble.n	801f6fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f648:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801f64c:	1426      	asrs	r6, r4, #16
 801f64e:	1402      	asrs	r2, r0, #16
 801f650:	fb08 6202 	mla	r2, r8, r2, r6
 801f654:	9e01      	ldr	r6, [sp, #4]
 801f656:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801f65a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801f65e:	d041      	beq.n	801f6e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801f660:	9a03      	ldr	r2, [sp, #12]
 801f662:	fa5f fb86 	uxtb.w	fp, r6
 801f666:	fb02 f808 	mul.w	r8, r2, r8
 801f66a:	f108 0201 	add.w	r2, r8, #1
 801f66e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801f672:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801f676:	1212      	asrs	r2, r2, #8
 801f678:	fa1f fa82 	uxth.w	sl, r2
 801f67c:	43d2      	mvns	r2, r2
 801f67e:	fb1b fb0a 	smulbb	fp, fp, sl
 801f682:	b2d2      	uxtb	r2, r2
 801f684:	fb08 b802 	mla	r8, r8, r2, fp
 801f688:	fa1f f888 	uxth.w	r8, r8
 801f68c:	f108 0b01 	add.w	fp, r8, #1
 801f690:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f694:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f698:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f69c:	fb1b fb0a 	smulbb	fp, fp, sl
 801f6a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f6a4:	fb16 fa0a 	smulbb	sl, r6, sl
 801f6a8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f6ac:	f807 8c03 	strb.w	r8, [r7, #-3]
 801f6b0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801f6b4:	fb06 aa02 	mla	sl, r6, r2, sl
 801f6b8:	fb08 b802 	mla	r8, r8, r2, fp
 801f6bc:	fa1f fa8a 	uxth.w	sl, sl
 801f6c0:	fa1f f888 	uxth.w	r8, r8
 801f6c4:	f10a 0601 	add.w	r6, sl, #1
 801f6c8:	f108 0b01 	add.w	fp, r8, #1
 801f6cc:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f6d0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801f6d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f6d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f6dc:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f6e0:	f807 8c02 	strb.w	r8, [r7, #-2]
 801f6e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f6e6:	4474      	add	r4, lr
 801f6e8:	3703      	adds	r7, #3
 801f6ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801f6ee:	4410      	add	r0, r2
 801f6f0:	e7a7      	b.n	801f642 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f6f2:	f04f 0800 	mov.w	r8, #0
 801f6f6:	eba3 0208 	sub.w	r2, r3, r8
 801f6fa:	2a00      	cmp	r2, #0
 801f6fc:	dc3b      	bgt.n	801f776 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f6fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f702:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f706:	441d      	add	r5, r3
 801f708:	2900      	cmp	r1, #0
 801f70a:	f340 8091 	ble.w	801f830 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f70e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f714:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f718:	3901      	subs	r1, #1
 801f71a:	eeb0 6a62 	vmov.f32	s12, s5
 801f71e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f722:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f726:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f72a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f72e:	eeb0 6a43 	vmov.f32	s12, s6
 801f732:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f736:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f73a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f73e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f742:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f746:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f74a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f74e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f752:	ee12 2a90 	vmov	r2, s5
 801f756:	eef0 2a47 	vmov.f32	s5, s14
 801f75a:	fb92 fef3 	sdiv	lr, r2, r3
 801f75e:	ee13 2a10 	vmov	r2, s6
 801f762:	eeb0 3a67 	vmov.f32	s6, s15
 801f766:	fb92 f3f3 	sdiv	r3, r2, r3
 801f76a:	9a02      	ldr	r2, [sp, #8]
 801f76c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f76e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f770:	bf08      	it	eq
 801f772:	4613      	moveq	r3, r2
 801f774:	e734      	b.n	801f5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f776:	1427      	asrs	r7, r4, #16
 801f778:	d454      	bmi.n	801f824 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f77a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f77e:	42be      	cmp	r6, r7
 801f780:	dd50      	ble.n	801f824 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f782:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f786:	d44d      	bmi.n	801f824 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f788:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f78c:	454a      	cmp	r2, r9
 801f78e:	dd49      	ble.n	801f824 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f790:	b236      	sxth	r6, r6
 801f792:	9a01      	ldr	r2, [sp, #4]
 801f794:	fb09 7606 	mla	r6, r9, r6, r7
 801f798:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801f79c:	0e3a      	lsrs	r2, r7, #24
 801f79e:	d041      	beq.n	801f824 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801f7a0:	9e03      	ldr	r6, [sp, #12]
 801f7a2:	fa5f fb87 	uxtb.w	fp, r7
 801f7a6:	4372      	muls	r2, r6
 801f7a8:	1c56      	adds	r6, r2, #1
 801f7aa:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f7ae:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801f7b2:	1212      	asrs	r2, r2, #8
 801f7b4:	f815 9006 	ldrb.w	r9, [r5, r6]
 801f7b8:	fa1f fa82 	uxth.w	sl, r2
 801f7bc:	43d2      	mvns	r2, r2
 801f7be:	fb1b fb0a 	smulbb	fp, fp, sl
 801f7c2:	b2d2      	uxtb	r2, r2
 801f7c4:	fb09 b902 	mla	r9, r9, r2, fp
 801f7c8:	fa1f f989 	uxth.w	r9, r9
 801f7cc:	f109 0b01 	add.w	fp, r9, #1
 801f7d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f7d4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f7d8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f7dc:	fb1b fb0a 	smulbb	fp, fp, sl
 801f7e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7e4:	fb17 fa0a 	smulbb	sl, r7, sl
 801f7e8:	f805 9006 	strb.w	r9, [r5, r6]
 801f7ec:	442e      	add	r6, r5
 801f7ee:	78b7      	ldrb	r7, [r6, #2]
 801f7f0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f7f4:	fb07 aa02 	mla	sl, r7, r2, sl
 801f7f8:	fb09 b902 	mla	r9, r9, r2, fp
 801f7fc:	fa1f fa8a 	uxth.w	sl, sl
 801f800:	fa1f f989 	uxth.w	r9, r9
 801f804:	f10a 0701 	add.w	r7, sl, #1
 801f808:	f109 0b01 	add.w	fp, r9, #1
 801f80c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f810:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f814:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f818:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f81c:	f886 a002 	strb.w	sl, [r6, #2]
 801f820:	f886 9001 	strb.w	r9, [r6, #1]
 801f824:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f826:	4474      	add	r4, lr
 801f828:	f108 0801 	add.w	r8, r8, #1
 801f82c:	4410      	add	r0, r2
 801f82e:	e762      	b.n	801f6f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801f830:	b005      	add	sp, #20
 801f832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f836 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f836:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f83a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f83c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f840:	9201      	str	r2, [sp, #4]
 801f842:	6860      	ldr	r0, [r4, #4]
 801f844:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801f848:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801f84c:	fb00 2505 	mla	r5, r0, r5, r2
 801f850:	6822      	ldr	r2, [r4, #0]
 801f852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f856:	4415      	add	r5, r2
 801f858:	f8dc 2000 	ldr.w	r2, [ip]
 801f85c:	9200      	str	r2, [sp, #0]
 801f85e:	2900      	cmp	r1, #0
 801f860:	dc03      	bgt.n	801f86a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f862:	9a01      	ldr	r2, [sp, #4]
 801f864:	2a00      	cmp	r2, #0
 801f866:	f340 812b 	ble.w	801fac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f86a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f86c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f870:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801f874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f876:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f87a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f87e:	2b00      	cmp	r3, #0
 801f880:	dd0e      	ble.n	801f8a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f882:	1422      	asrs	r2, r4, #16
 801f884:	d405      	bmi.n	801f892 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f886:	4572      	cmp	r2, lr
 801f888:	da03      	bge.n	801f892 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f88a:	1402      	asrs	r2, r0, #16
 801f88c:	d401      	bmi.n	801f892 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f88e:	42ba      	cmp	r2, r7
 801f890:	db07      	blt.n	801f8a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f892:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f894:	3b01      	subs	r3, #1
 801f896:	3503      	adds	r5, #3
 801f898:	4414      	add	r4, r2
 801f89a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f89c:	4410      	add	r0, r2
 801f89e:	e7ee      	b.n	801f87e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f8a0:	d06f      	beq.n	801f982 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f8a2:	1e5a      	subs	r2, r3, #1
 801f8a4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801f8a6:	fb06 4602 	mla	r6, r6, r2, r4
 801f8aa:	1436      	asrs	r6, r6, #16
 801f8ac:	d45e      	bmi.n	801f96c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f8ae:	4576      	cmp	r6, lr
 801f8b0:	da5c      	bge.n	801f96c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f8b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801f8b4:	fb06 0202 	mla	r2, r6, r2, r0
 801f8b8:	1412      	asrs	r2, r2, #16
 801f8ba:	d457      	bmi.n	801f96c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f8bc:	42ba      	cmp	r2, r7
 801f8be:	da55      	bge.n	801f96c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801f8c0:	1cee      	adds	r6, r5, #3
 801f8c2:	469a      	mov	sl, r3
 801f8c4:	f1ba 0f00 	cmp.w	sl, #0
 801f8c8:	dd56      	ble.n	801f978 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801f8ca:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f8ce:	1427      	asrs	r7, r4, #16
 801f8d0:	1402      	asrs	r2, r0, #16
 801f8d2:	fb0e 7202 	mla	r2, lr, r2, r7
 801f8d6:	9f00      	ldr	r7, [sp, #0]
 801f8d8:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801f8dc:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801f8e0:	d03c      	beq.n	801f95c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f8e2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f8e6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f8ea:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f8ee:	fa5f f28e 	uxtb.w	r2, lr
 801f8f2:	b2ff      	uxtb	r7, r7
 801f8f4:	f000 80dd 	beq.w	801fab2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f8f8:	fa1f f882 	uxth.w	r8, r2
 801f8fc:	43d2      	mvns	r2, r2
 801f8fe:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801f902:	fb17 f708 	smulbb	r7, r7, r8
 801f906:	b2d2      	uxtb	r2, r2
 801f908:	fb19 f908 	smulbb	r9, r9, r8
 801f90c:	fb0e 7702 	mla	r7, lr, r2, r7
 801f910:	fb1b f808 	smulbb	r8, fp, r8
 801f914:	b2bf      	uxth	r7, r7
 801f916:	f107 0e01 	add.w	lr, r7, #1
 801f91a:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801f91e:	123f      	asrs	r7, r7, #8
 801f920:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f924:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801f928:	fb07 9902 	mla	r9, r7, r2, r9
 801f92c:	fa1f f989 	uxth.w	r9, r9
 801f930:	f109 0701 	add.w	r7, r9, #1
 801f934:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f938:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f93c:	fb07 8802 	mla	r8, r7, r2, r8
 801f940:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f944:	fa1f f888 	uxth.w	r8, r8
 801f948:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f94c:	f108 0201 	add.w	r2, r8, #1
 801f950:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f954:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f958:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f95c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f95e:	3603      	adds	r6, #3
 801f960:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f964:	4414      	add	r4, r2
 801f966:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f968:	4410      	add	r0, r2
 801f96a:	e7ab      	b.n	801f8c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f96c:	f04f 0e00 	mov.w	lr, #0
 801f970:	eba3 020e 	sub.w	r2, r3, lr
 801f974:	2a00      	cmp	r2, #0
 801f976:	dc3d      	bgt.n	801f9f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f97c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f980:	441d      	add	r5, r3
 801f982:	2900      	cmp	r1, #0
 801f984:	f340 809c 	ble.w	801fac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f988:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f98c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f98e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f992:	3901      	subs	r1, #1
 801f994:	eeb0 6a62 	vmov.f32	s12, s5
 801f998:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f99c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9a4:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801f9a8:	eeb0 6a43 	vmov.f32	s12, s6
 801f9ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9b0:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801f9b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9cc:	ee12 2a90 	vmov	r2, s5
 801f9d0:	eef0 2a47 	vmov.f32	s5, s14
 801f9d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9d8:	ee13 2a10 	vmov	r2, s6
 801f9dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f9de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9e0:	eeb0 3a67 	vmov.f32	s6, s15
 801f9e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9e8:	9a01      	ldr	r2, [sp, #4]
 801f9ea:	9310      	str	r3, [sp, #64]	@ 0x40
 801f9ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9ee:	bf08      	it	eq
 801f9f0:	4613      	moveq	r3, r2
 801f9f2:	e734      	b.n	801f85e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801f9f4:	1427      	asrs	r7, r4, #16
 801f9f6:	d44d      	bmi.n	801fa94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801f9f8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f9fc:	42be      	cmp	r6, r7
 801f9fe:	dd49      	ble.n	801fa94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801fa00:	ea5f 4820 	movs.w	r8, r0, asr #16
 801fa04:	d446      	bmi.n	801fa94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801fa06:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fa0a:	4542      	cmp	r2, r8
 801fa0c:	dd42      	ble.n	801fa94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801fa0e:	b236      	sxth	r6, r6
 801fa10:	9a00      	ldr	r2, [sp, #0]
 801fa12:	fb08 7606 	mla	r6, r8, r6, r7
 801fa16:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801fa1a:	0e3a      	lsrs	r2, r7, #24
 801fa1c:	d03a      	beq.n	801fa94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801fa1e:	2aff      	cmp	r2, #255	@ 0xff
 801fa20:	b2d6      	uxtb	r6, r2
 801fa22:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fa26:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801fa2a:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801fa2e:	b2ff      	uxtb	r7, r7
 801fa30:	d037      	beq.n	801faa2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801fa32:	fa1f f986 	uxth.w	r9, r6
 801fa36:	4472      	add	r2, lr
 801fa38:	43f6      	mvns	r6, r6
 801fa3a:	f815 8002 	ldrb.w	r8, [r5, r2]
 801fa3e:	fb17 f709 	smulbb	r7, r7, r9
 801fa42:	fb1a fa09 	smulbb	sl, sl, r9
 801fa46:	b2f6      	uxtb	r6, r6
 801fa48:	fb1b f909 	smulbb	r9, fp, r9
 801fa4c:	fb08 7706 	mla	r7, r8, r6, r7
 801fa50:	b2bf      	uxth	r7, r7
 801fa52:	f107 0801 	add.w	r8, r7, #1
 801fa56:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801fa5a:	123f      	asrs	r7, r7, #8
 801fa5c:	54af      	strb	r7, [r5, r2]
 801fa5e:	442a      	add	r2, r5
 801fa60:	7857      	ldrb	r7, [r2, #1]
 801fa62:	fb07 aa06 	mla	sl, r7, r6, sl
 801fa66:	fa1f fa8a 	uxth.w	sl, sl
 801fa6a:	f10a 0701 	add.w	r7, sl, #1
 801fa6e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa72:	7897      	ldrb	r7, [r2, #2]
 801fa74:	fb07 9906 	mla	r9, r7, r6, r9
 801fa78:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fa7c:	fa1f f989 	uxth.w	r9, r9
 801fa80:	f882 a001 	strb.w	sl, [r2, #1]
 801fa84:	f109 0601 	add.w	r6, r9, #1
 801fa88:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fa8c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa90:	f882 9002 	strb.w	r9, [r2, #2]
 801fa94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fa96:	f10e 0e01 	add.w	lr, lr, #1
 801fa9a:	4414      	add	r4, r2
 801fa9c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fa9e:	4410      	add	r0, r2
 801faa0:	e766      	b.n	801f970 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801faa2:	4472      	add	r2, lr
 801faa4:	54af      	strb	r7, [r5, r2]
 801faa6:	442a      	add	r2, r5
 801faa8:	f882 a001 	strb.w	sl, [r2, #1]
 801faac:	f882 b002 	strb.w	fp, [r2, #2]
 801fab0:	e7f0      	b.n	801fa94 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801fab2:	f806 7c03 	strb.w	r7, [r6, #-3]
 801fab6:	f806 9c02 	strb.w	r9, [r6, #-2]
 801faba:	f806 bc01 	strb.w	fp, [r6, #-1]
 801fabe:	e74d      	b.n	801f95c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fac0:	b003      	add	sp, #12
 801fac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801facc:	b087      	sub	sp, #28
 801face:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fad2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fad4:	9204      	str	r2, [sp, #16]
 801fad6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801fada:	6860      	ldr	r0, [r4, #4]
 801fadc:	9205      	str	r2, [sp, #20]
 801fade:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801fae2:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801fae6:	9101      	str	r1, [sp, #4]
 801fae8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801faec:	fb00 2505 	mla	r5, r0, r5, r2
 801faf0:	6822      	ldr	r2, [r4, #0]
 801faf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801faf6:	4415      	add	r5, r2
 801faf8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fafc:	3201      	adds	r2, #1
 801fafe:	f022 0201 	bic.w	r2, r2, #1
 801fb02:	9202      	str	r2, [sp, #8]
 801fb04:	f8dc 2000 	ldr.w	r2, [ip]
 801fb08:	9203      	str	r2, [sp, #12]
 801fb0a:	9a01      	ldr	r2, [sp, #4]
 801fb0c:	2a00      	cmp	r2, #0
 801fb0e:	dc03      	bgt.n	801fb18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801fb10:	9a04      	ldr	r2, [sp, #16]
 801fb12:	2a00      	cmp	r2, #0
 801fb14:	f340 8135 	ble.w	801fd82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801fb18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fb1a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801fb1e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801fb22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fb24:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fb28:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	dd0d      	ble.n	801fb4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fb30:	1422      	asrs	r2, r4, #16
 801fb32:	d405      	bmi.n	801fb40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb34:	4542      	cmp	r2, r8
 801fb36:	da03      	bge.n	801fb40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb38:	1402      	asrs	r2, r0, #16
 801fb3a:	d401      	bmi.n	801fb40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb3c:	42ba      	cmp	r2, r7
 801fb3e:	db06      	blt.n	801fb4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fb40:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fb42:	4474      	add	r4, lr
 801fb44:	3b01      	subs	r3, #1
 801fb46:	3503      	adds	r5, #3
 801fb48:	4410      	add	r0, r2
 801fb4a:	e7ef      	b.n	801fb2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fb4c:	d077      	beq.n	801fc3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801fb4e:	1e5a      	subs	r2, r3, #1
 801fb50:	fb0e 4602 	mla	r6, lr, r2, r4
 801fb54:	1436      	asrs	r6, r6, #16
 801fb56:	d469      	bmi.n	801fc2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fb58:	4546      	cmp	r6, r8
 801fb5a:	da67      	bge.n	801fc2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fb5c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fb5e:	fb06 0202 	mla	r2, r6, r2, r0
 801fb62:	1412      	asrs	r2, r2, #16
 801fb64:	d462      	bmi.n	801fc2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fb66:	42ba      	cmp	r2, r7
 801fb68:	da60      	bge.n	801fc2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fb6a:	1cee      	adds	r6, r5, #3
 801fb6c:	4699      	mov	r9, r3
 801fb6e:	f1b9 0f00 	cmp.w	r9, #0
 801fb72:	dd5f      	ble.n	801fc34 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fb74:	1422      	asrs	r2, r4, #16
 801fb76:	9902      	ldr	r1, [sp, #8]
 801fb78:	1407      	asrs	r7, r0, #16
 801fb7a:	fb01 2707 	mla	r7, r1, r7, r2
 801fb7e:	9903      	ldr	r1, [sp, #12]
 801fb80:	087a      	lsrs	r2, r7, #1
 801fb82:	5c8a      	ldrb	r2, [r1, r2]
 801fb84:	07f9      	lsls	r1, r7, #31
 801fb86:	bf54      	ite	pl
 801fb88:	f002 020f 	andpl.w	r2, r2, #15
 801fb8c:	1112      	asrmi	r2, r2, #4
 801fb8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fb92:	b2d2      	uxtb	r2, r2
 801fb94:	2a00      	cmp	r2, #0
 801fb96:	d042      	beq.n	801fc1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fb98:	497b      	ldr	r1, [pc, #492]	@ (801fd88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801fb9a:	680f      	ldr	r7, [r1, #0]
 801fb9c:	9905      	ldr	r1, [sp, #20]
 801fb9e:	fa5f fb87 	uxtb.w	fp, r7
 801fba2:	434a      	muls	r2, r1
 801fba4:	f102 0801 	add.w	r8, r2, #1
 801fba8:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801fbac:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801fbb0:	1212      	asrs	r2, r2, #8
 801fbb2:	fa1f fa82 	uxth.w	sl, r2
 801fbb6:	43d2      	mvns	r2, r2
 801fbb8:	fb1b fb0a 	smulbb	fp, fp, sl
 801fbbc:	b2d2      	uxtb	r2, r2
 801fbbe:	fb08 b802 	mla	r8, r8, r2, fp
 801fbc2:	fa1f f888 	uxth.w	r8, r8
 801fbc6:	f108 0b01 	add.w	fp, r8, #1
 801fbca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fbce:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fbd2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fbd6:	fb1b fb0a 	smulbb	fp, fp, sl
 801fbda:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbde:	fb17 fa0a 	smulbb	sl, r7, sl
 801fbe2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801fbe6:	f806 8c03 	strb.w	r8, [r6, #-3]
 801fbea:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801fbee:	fb07 aa02 	mla	sl, r7, r2, sl
 801fbf2:	fb08 b802 	mla	r8, r8, r2, fp
 801fbf6:	fa1f fa8a 	uxth.w	sl, sl
 801fbfa:	fa1f f888 	uxth.w	r8, r8
 801fbfe:	f10a 0701 	add.w	r7, sl, #1
 801fc02:	f108 0b01 	add.w	fp, r8, #1
 801fc06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fc0a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801fc0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fc12:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fc16:	f806 ac01 	strb.w	sl, [r6, #-1]
 801fc1a:	f806 8c02 	strb.w	r8, [r6, #-2]
 801fc1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fc20:	4474      	add	r4, lr
 801fc22:	3603      	adds	r6, #3
 801fc24:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc28:	4410      	add	r0, r2
 801fc2a:	e7a0      	b.n	801fb6e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fc2c:	2700      	movs	r7, #0
 801fc2e:	1bda      	subs	r2, r3, r7
 801fc30:	2a00      	cmp	r2, #0
 801fc32:	dc3e      	bgt.n	801fcb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fc34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc3c:	441d      	add	r5, r3
 801fc3e:	9b01      	ldr	r3, [sp, #4]
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	f340 809e 	ble.w	801fd82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801fc46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc50:	eeb0 6a62 	vmov.f32	s12, s5
 801fc54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc58:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc60:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fc64:	eeb0 6a43 	vmov.f32	s12, s6
 801fc68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc6c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801fc70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc74:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc78:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc88:	ee12 2a90 	vmov	r2, s5
 801fc8c:	eef0 2a47 	vmov.f32	s5, s14
 801fc90:	fb92 fef3 	sdiv	lr, r2, r3
 801fc94:	ee13 2a10 	vmov	r2, s6
 801fc98:	eeb0 3a67 	vmov.f32	s6, s15
 801fc9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fca0:	9314      	str	r3, [sp, #80]	@ 0x50
 801fca2:	9b01      	ldr	r3, [sp, #4]
 801fca4:	9a04      	ldr	r2, [sp, #16]
 801fca6:	3b01      	subs	r3, #1
 801fca8:	9301      	str	r3, [sp, #4]
 801fcaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fcac:	bf08      	it	eq
 801fcae:	4613      	moveq	r3, r2
 801fcb0:	e72b      	b.n	801fb0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801fcb2:	1426      	asrs	r6, r4, #16
 801fcb4:	d460      	bmi.n	801fd78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fcb6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fcba:	42b2      	cmp	r2, r6
 801fcbc:	dd5c      	ble.n	801fd78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fcbe:	ea5f 4820 	movs.w	r8, r0, asr #16
 801fcc2:	d459      	bmi.n	801fd78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fcc4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fcc8:	4542      	cmp	r2, r8
 801fcca:	dd55      	ble.n	801fd78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fccc:	9a02      	ldr	r2, [sp, #8]
 801fcce:	9903      	ldr	r1, [sp, #12]
 801fcd0:	fb08 6602 	mla	r6, r8, r2, r6
 801fcd4:	0872      	lsrs	r2, r6, #1
 801fcd6:	07f6      	lsls	r6, r6, #31
 801fcd8:	5c8a      	ldrb	r2, [r1, r2]
 801fcda:	bf54      	ite	pl
 801fcdc:	f002 020f 	andpl.w	r2, r2, #15
 801fce0:	1112      	asrmi	r2, r2, #4
 801fce2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fce6:	b2d2      	uxtb	r2, r2
 801fce8:	2a00      	cmp	r2, #0
 801fcea:	d045      	beq.n	801fd78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fcec:	4926      	ldr	r1, [pc, #152]	@ (801fd88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801fcee:	f8d1 8000 	ldr.w	r8, [r1]
 801fcf2:	9905      	ldr	r1, [sp, #20]
 801fcf4:	fa5f fb88 	uxtb.w	fp, r8
 801fcf8:	434a      	muls	r2, r1
 801fcfa:	1c56      	adds	r6, r2, #1
 801fcfc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fd00:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801fd04:	1212      	asrs	r2, r2, #8
 801fd06:	f815 9006 	ldrb.w	r9, [r5, r6]
 801fd0a:	fa1f fa82 	uxth.w	sl, r2
 801fd0e:	43d2      	mvns	r2, r2
 801fd10:	fb1b fb0a 	smulbb	fp, fp, sl
 801fd14:	b2d2      	uxtb	r2, r2
 801fd16:	fb09 b902 	mla	r9, r9, r2, fp
 801fd1a:	fa1f f989 	uxth.w	r9, r9
 801fd1e:	f109 0b01 	add.w	fp, r9, #1
 801fd22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fd26:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801fd2a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801fd2e:	fb1b fb0a 	smulbb	fp, fp, sl
 801fd32:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fd36:	fb18 fa0a 	smulbb	sl, r8, sl
 801fd3a:	f805 9006 	strb.w	r9, [r5, r6]
 801fd3e:	442e      	add	r6, r5
 801fd40:	f896 8002 	ldrb.w	r8, [r6, #2]
 801fd44:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fd48:	fb08 aa02 	mla	sl, r8, r2, sl
 801fd4c:	fb09 b902 	mla	r9, r9, r2, fp
 801fd50:	fa1f fa8a 	uxth.w	sl, sl
 801fd54:	fa1f f989 	uxth.w	r9, r9
 801fd58:	f10a 0801 	add.w	r8, sl, #1
 801fd5c:	f109 0b01 	add.w	fp, r9, #1
 801fd60:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801fd64:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fd68:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd6c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fd70:	f886 a002 	strb.w	sl, [r6, #2]
 801fd74:	f886 9001 	strb.w	r9, [r6, #1]
 801fd78:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fd7a:	4474      	add	r4, lr
 801fd7c:	3701      	adds	r7, #1
 801fd7e:	4410      	add	r0, r2
 801fd80:	e755      	b.n	801fc2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801fd82:	b007      	add	sp, #28
 801fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd88:	240285c4 	.word	0x240285c4

0801fd8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd90:	b085      	sub	sp, #20
 801fd92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fd96:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fd98:	9203      	str	r2, [sp, #12]
 801fd9a:	6860      	ldr	r0, [r4, #4]
 801fd9c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801fda0:	9100      	str	r1, [sp, #0]
 801fda2:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801fda6:	fb00 2606 	mla	r6, r0, r6, r2
 801fdaa:	6822      	ldr	r2, [r4, #0]
 801fdac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fdb0:	4416      	add	r6, r2
 801fdb2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801fdb6:	3201      	adds	r2, #1
 801fdb8:	f022 0201 	bic.w	r2, r2, #1
 801fdbc:	9201      	str	r2, [sp, #4]
 801fdbe:	f8dc 2000 	ldr.w	r2, [ip]
 801fdc2:	9202      	str	r2, [sp, #8]
 801fdc4:	9a00      	ldr	r2, [sp, #0]
 801fdc6:	2a00      	cmp	r2, #0
 801fdc8:	dc03      	bgt.n	801fdd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fdca:	9a03      	ldr	r2, [sp, #12]
 801fdcc:	2a00      	cmp	r2, #0
 801fdce:	f340 8140 	ble.w	8020052 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801fdd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fdd4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801fdd8:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801fddc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fdde:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801fde2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	dd0e      	ble.n	801fe08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fdea:	142a      	asrs	r2, r5, #16
 801fdec:	d405      	bmi.n	801fdfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fdee:	4572      	cmp	r2, lr
 801fdf0:	da03      	bge.n	801fdfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fdf2:	1422      	asrs	r2, r4, #16
 801fdf4:	d401      	bmi.n	801fdfa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fdf6:	42ba      	cmp	r2, r7
 801fdf8:	db07      	blt.n	801fe0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fdfa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fdfc:	3b01      	subs	r3, #1
 801fdfe:	3603      	adds	r6, #3
 801fe00:	4415      	add	r5, r2
 801fe02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fe04:	4414      	add	r4, r2
 801fe06:	e7ee      	b.n	801fde6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fe08:	d072      	beq.n	801fef0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe0a:	1e5a      	subs	r2, r3, #1
 801fe0c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fe0e:	fb00 5002 	mla	r0, r0, r2, r5
 801fe12:	1400      	asrs	r0, r0, #16
 801fe14:	d463      	bmi.n	801fede <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fe16:	4570      	cmp	r0, lr
 801fe18:	da61      	bge.n	801fede <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fe1a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fe1c:	fb00 4202 	mla	r2, r0, r2, r4
 801fe20:	1412      	asrs	r2, r2, #16
 801fe22:	d45c      	bmi.n	801fede <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fe24:	42ba      	cmp	r2, r7
 801fe26:	da5a      	bge.n	801fede <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fe28:	1cf0      	adds	r0, r6, #3
 801fe2a:	469a      	mov	sl, r3
 801fe2c:	f1ba 0f00 	cmp.w	sl, #0
 801fe30:	dd59      	ble.n	801fee6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801fe32:	142a      	asrs	r2, r5, #16
 801fe34:	9901      	ldr	r1, [sp, #4]
 801fe36:	1427      	asrs	r7, r4, #16
 801fe38:	fb01 2707 	mla	r7, r1, r7, r2
 801fe3c:	9902      	ldr	r1, [sp, #8]
 801fe3e:	087a      	lsrs	r2, r7, #1
 801fe40:	5c8a      	ldrb	r2, [r1, r2]
 801fe42:	07f9      	lsls	r1, r7, #31
 801fe44:	bf54      	ite	pl
 801fe46:	f002 020f 	andpl.w	r2, r2, #15
 801fe4a:	1112      	asrmi	r2, r2, #4
 801fe4c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fe50:	b2d2      	uxtb	r2, r2
 801fe52:	2a00      	cmp	r2, #0
 801fe54:	d03b      	beq.n	801fece <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801fe56:	4980      	ldr	r1, [pc, #512]	@ (8020058 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801fe58:	2aff      	cmp	r2, #255	@ 0xff
 801fe5a:	680f      	ldr	r7, [r1, #0]
 801fe5c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fe60:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801fe64:	b2ff      	uxtb	r7, r7
 801fe66:	f000 80ed 	beq.w	8020044 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801fe6a:	fa1f f882 	uxth.w	r8, r2
 801fe6e:	43d2      	mvns	r2, r2
 801fe70:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801fe74:	fb17 f708 	smulbb	r7, r7, r8
 801fe78:	b2d2      	uxtb	r2, r2
 801fe7a:	fb19 f908 	smulbb	r9, r9, r8
 801fe7e:	fb0e 7702 	mla	r7, lr, r2, r7
 801fe82:	fb1b f808 	smulbb	r8, fp, r8
 801fe86:	b2bf      	uxth	r7, r7
 801fe88:	f107 0e01 	add.w	lr, r7, #1
 801fe8c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801fe90:	123f      	asrs	r7, r7, #8
 801fe92:	f800 7c03 	strb.w	r7, [r0, #-3]
 801fe96:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801fe9a:	fb07 9902 	mla	r9, r7, r2, r9
 801fe9e:	fa1f f989 	uxth.w	r9, r9
 801fea2:	f109 0701 	add.w	r7, r9, #1
 801fea6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801feaa:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801feae:	fb07 8802 	mla	r8, r7, r2, r8
 801feb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801feb6:	fa1f f888 	uxth.w	r8, r8
 801feba:	f800 9c02 	strb.w	r9, [r0, #-2]
 801febe:	f108 0201 	add.w	r2, r8, #1
 801fec2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fec6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801feca:	f800 8c01 	strb.w	r8, [r0, #-1]
 801fece:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fed0:	3003      	adds	r0, #3
 801fed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fed6:	4415      	add	r5, r2
 801fed8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801feda:	4414      	add	r4, r2
 801fedc:	e7a6      	b.n	801fe2c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fede:	2700      	movs	r7, #0
 801fee0:	1bda      	subs	r2, r3, r7
 801fee2:	2a00      	cmp	r2, #0
 801fee4:	dc40      	bgt.n	801ff68 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801feea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801feee:	441e      	add	r6, r3
 801fef0:	9b00      	ldr	r3, [sp, #0]
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	f340 80ad 	ble.w	8020052 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801fef8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fefc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fefe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff02:	eeb0 6a62 	vmov.f32	s12, s5
 801ff06:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff12:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ff16:	eeb0 6a43 	vmov.f32	s12, s6
 801ff1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff1e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ff22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff26:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff3a:	ee12 2a90 	vmov	r2, s5
 801ff3e:	eef0 2a47 	vmov.f32	s5, s14
 801ff42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff46:	ee13 2a10 	vmov	r2, s6
 801ff4a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ff4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff4e:	eeb0 3a67 	vmov.f32	s6, s15
 801ff52:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff56:	9312      	str	r3, [sp, #72]	@ 0x48
 801ff58:	9b00      	ldr	r3, [sp, #0]
 801ff5a:	9a03      	ldr	r2, [sp, #12]
 801ff5c:	3b01      	subs	r3, #1
 801ff5e:	9300      	str	r3, [sp, #0]
 801ff60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff62:	bf08      	it	eq
 801ff64:	4613      	moveq	r3, r2
 801ff66:	e72d      	b.n	801fdc4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ff68:	1428      	asrs	r0, r5, #16
 801ff6a:	d45c      	bmi.n	8020026 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ff6c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ff70:	4282      	cmp	r2, r0
 801ff72:	dd58      	ble.n	8020026 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ff74:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ff78:	d455      	bmi.n	8020026 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ff7a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ff7e:	4572      	cmp	r2, lr
 801ff80:	dd51      	ble.n	8020026 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ff82:	9a01      	ldr	r2, [sp, #4]
 801ff84:	9902      	ldr	r1, [sp, #8]
 801ff86:	fb0e 0002 	mla	r0, lr, r2, r0
 801ff8a:	0842      	lsrs	r2, r0, #1
 801ff8c:	07c0      	lsls	r0, r0, #31
 801ff8e:	5c8a      	ldrb	r2, [r1, r2]
 801ff90:	bf54      	ite	pl
 801ff92:	f002 020f 	andpl.w	r2, r2, #15
 801ff96:	1112      	asrmi	r2, r2, #4
 801ff98:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ff9c:	b2d2      	uxtb	r2, r2
 801ff9e:	2a00      	cmp	r2, #0
 801ffa0:	d041      	beq.n	8020026 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ffa2:	492d      	ldr	r1, [pc, #180]	@ (8020058 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801ffa4:	2aff      	cmp	r2, #255	@ 0xff
 801ffa6:	6808      	ldr	r0, [r1, #0]
 801ffa8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801ffac:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ffb0:	fa5f fe80 	uxtb.w	lr, r0
 801ffb4:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ffb8:	d03b      	beq.n	8020032 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ffba:	fa1f f982 	uxth.w	r9, r2
 801ffbe:	4438      	add	r0, r7
 801ffc0:	43d2      	mvns	r2, r2
 801ffc2:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ffc6:	fb1e fe09 	smulbb	lr, lr, r9
 801ffca:	fb1a fa09 	smulbb	sl, sl, r9
 801ffce:	b2d2      	uxtb	r2, r2
 801ffd0:	fb1b f909 	smulbb	r9, fp, r9
 801ffd4:	fb08 ee02 	mla	lr, r8, r2, lr
 801ffd8:	fa1f fe8e 	uxth.w	lr, lr
 801ffdc:	f10e 0801 	add.w	r8, lr, #1
 801ffe0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801ffe4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ffe8:	f806 e000 	strb.w	lr, [r6, r0]
 801ffec:	4430      	add	r0, r6
 801ffee:	f890 e001 	ldrb.w	lr, [r0, #1]
 801fff2:	fb0e aa02 	mla	sl, lr, r2, sl
 801fff6:	fa1f fa8a 	uxth.w	sl, sl
 801fffa:	f10a 0e01 	add.w	lr, sl, #1
 801fffe:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8020002:	f890 e002 	ldrb.w	lr, [r0, #2]
 8020006:	fb0e 9902 	mla	r9, lr, r2, r9
 802000a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802000e:	fa1f f989 	uxth.w	r9, r9
 8020012:	f880 a001 	strb.w	sl, [r0, #1]
 8020016:	f109 0201 	add.w	r2, r9, #1
 802001a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802001e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020022:	f880 9002 	strb.w	r9, [r0, #2]
 8020026:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020028:	3701      	adds	r7, #1
 802002a:	4415      	add	r5, r2
 802002c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802002e:	4414      	add	r4, r2
 8020030:	e756      	b.n	801fee0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020032:	4438      	add	r0, r7
 8020034:	f806 e000 	strb.w	lr, [r6, r0]
 8020038:	4430      	add	r0, r6
 802003a:	f880 a001 	strb.w	sl, [r0, #1]
 802003e:	f880 b002 	strb.w	fp, [r0, #2]
 8020042:	e7f0      	b.n	8020026 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020044:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020048:	f800 9c02 	strb.w	r9, [r0, #-2]
 802004c:	f800 bc01 	strb.w	fp, [r0, #-1]
 8020050:	e73d      	b.n	801fece <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020052:	b005      	add	sp, #20
 8020054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020058:	240285c4 	.word	0x240285c4

0802005c <_ZN8touchgfx8LCD24bppD1Ev>:
 802005c:	4770      	bx	lr

0802005e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 802005e:	4770      	bx	lr

08020060 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8020060:	4770      	bx	lr

08020062 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8020062:	4770      	bx	lr

08020064 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8020064:	4770      	bx	lr

08020066 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020066:	4770      	bx	lr

08020068 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020068:	4770      	bx	lr

0802006a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 802006a:	4770      	bx	lr

0802006c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802006c:	4770      	bx	lr

0802006e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802006e:	4770      	bx	lr

08020070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020070:	4770      	bx	lr

08020072 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020072:	4770      	bx	lr

08020074 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020074:	4770      	bx	lr

08020076 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020076:	4770      	bx	lr

08020078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020078:	4770      	bx	lr

0802007a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802007a:	4770      	bx	lr

0802007c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802007c:	4770      	bx	lr

0802007e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802007e:	4770      	bx	lr

08020080 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020080:	4770      	bx	lr

08020082 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020082:	4770      	bx	lr

08020084 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020084:	4770      	bx	lr

08020086 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020086:	4770      	bx	lr

08020088 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020088:	4770      	bx	lr

0802008a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802008a:	4770      	bx	lr

0802008c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802008c:	4770      	bx	lr
	...

08020090 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020092:	4606      	mov	r6, r0
 8020094:	b087      	sub	sp, #28
 8020096:	4615      	mov	r5, r2
 8020098:	461f      	mov	r7, r3
 802009a:	b353      	cbz	r3, 80200f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802009c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	dd26      	ble.n	80200f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80200a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	dd22      	ble.n	80200f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80200ac:	6808      	ldr	r0, [r1, #0]
 80200ae:	aa04      	add	r2, sp, #16
 80200b0:	6849      	ldr	r1, [r1, #4]
 80200b2:	4c1b      	ldr	r4, [pc, #108]	@ (8020120 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80200b4:	c203      	stmia	r2!, {r0, r1}
 80200b6:	a804      	add	r0, sp, #16
 80200b8:	f7fa fa3c 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80200bc:	6820      	ldr	r0, [r4, #0]
 80200be:	6803      	ldr	r3, [r0, #0]
 80200c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80200c2:	4798      	blx	r3
 80200c4:	2fff      	cmp	r7, #255	@ 0xff
 80200c6:	d016      	beq.n	80200f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80200c8:	f010 0f08 	tst.w	r0, #8
 80200cc:	6820      	ldr	r0, [r4, #0]
 80200ce:	d015      	beq.n	80200fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80200d0:	2400      	movs	r4, #0
 80200d2:	6801      	ldr	r1, [r0, #0]
 80200d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80200d8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80200dc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80200e0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80200e4:	9401      	str	r4, [sp, #4]
 80200e6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80200ea:	9400      	str	r4, [sp, #0]
 80200ec:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 80200ee:	4629      	mov	r1, r5
 80200f0:	47a0      	blx	r4
 80200f2:	b007      	add	sp, #28
 80200f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200f6:	f010 0f02 	tst.w	r0, #2
 80200fa:	e7e7      	b.n	80200cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80200fc:	6803      	ldr	r3, [r0, #0]
 80200fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020100:	4798      	blx	r3
 8020102:	4b08      	ldr	r3, [pc, #32]	@ (8020124 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8020104:	4601      	mov	r1, r0
 8020106:	4630      	mov	r0, r6
 8020108:	881a      	ldrh	r2, [r3, #0]
 802010a:	6833      	ldr	r3, [r6, #0]
 802010c:	e9cd 5700 	strd	r5, r7, [sp]
 8020110:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8020112:	ab04      	add	r3, sp, #16
 8020114:	47a8      	blx	r5
 8020116:	6820      	ldr	r0, [r4, #0]
 8020118:	6803      	ldr	r3, [r0, #0]
 802011a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802011c:	4798      	blx	r3
 802011e:	e7e8      	b.n	80200f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020120:	240285b4 	.word	0x240285b4
 8020124:	240285ae 	.word	0x240285ae

08020128 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802012c:	b08b      	sub	sp, #44	@ 0x2c
 802012e:	460d      	mov	r5, r1
 8020130:	4616      	mov	r6, r2
 8020132:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8020136:	f1b8 0f00 	cmp.w	r8, #0
 802013a:	d047      	beq.n	80201cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 802013c:	6810      	ldr	r0, [r2, #0]
 802013e:	ac06      	add	r4, sp, #24
 8020140:	6851      	ldr	r1, [r2, #4]
 8020142:	4f51      	ldr	r7, [pc, #324]	@ (8020288 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8020144:	c403      	stmia	r4!, {r0, r1}
 8020146:	6818      	ldr	r0, [r3, #0]
 8020148:	ac08      	add	r4, sp, #32
 802014a:	6859      	ldr	r1, [r3, #4]
 802014c:	c403      	stmia	r4!, {r0, r1}
 802014e:	a806      	add	r0, sp, #24
 8020150:	f7fa f9f0 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020154:	4631      	mov	r1, r6
 8020156:	a808      	add	r0, sp, #32
 8020158:	f7fa fa30 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802015c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020160:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8020164:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020168:	6838      	ldr	r0, [r7, #0]
 802016a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802016e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8020172:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8020176:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802017a:	440d      	add	r5, r1
 802017c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020180:	440a      	add	r2, r1
 8020182:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020186:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802018a:	4413      	add	r3, r2
 802018c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8020190:	6803      	ldr	r3, [r0, #0]
 8020192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020194:	4798      	blx	r3
 8020196:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802019a:	d01a      	beq.n	80201d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 802019c:	f010 0f04 	tst.w	r0, #4
 80201a0:	6838      	ldr	r0, [r7, #0]
 80201a2:	d019      	beq.n	80201d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80201a4:	2100      	movs	r1, #0
 80201a6:	6807      	ldr	r7, [r0, #0]
 80201a8:	b2a4      	uxth	r4, r4
 80201aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80201ae:	b2b6      	uxth	r6, r6
 80201b0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80201b4:	9401      	str	r4, [sp, #4]
 80201b6:	9600      	str	r6, [sp, #0]
 80201b8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80201bc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80201c0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80201c4:	9102      	str	r1, [sp, #8]
 80201c6:	4629      	mov	r1, r5
 80201c8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80201ca:	47a0      	blx	r4
 80201cc:	b00b      	add	sp, #44	@ 0x2c
 80201ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80201d2:	f010 0f01 	tst.w	r0, #1
 80201d6:	e7e3      	b.n	80201a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80201d8:	6803      	ldr	r3, [r0, #0]
 80201da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80201dc:	4798      	blx	r3
 80201de:	4a2b      	ldr	r2, [pc, #172]	@ (802028c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80201e0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80201e4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80201e8:	8813      	ldrh	r3, [r2, #0]
 80201ea:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80201ee:	fb03 f404 	mul.w	r4, r3, r4
 80201f2:	fb03 c101 	mla	r1, r3, r1, ip
 80201f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80201fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80201fe:	4408      	add	r0, r1
 8020200:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8020204:	4404      	add	r4, r0
 8020206:	d02e      	beq.n	8020266 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020208:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802020c:	1b9b      	subs	r3, r3, r6
 802020e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8020212:	1b96      	subs	r6, r2, r6
 8020214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020218:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802021c:	42a0      	cmp	r0, r4
 802021e:	d22d      	bcs.n	802027c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8020220:	eb00 0e01 	add.w	lr, r0, r1
 8020224:	4570      	cmp	r0, lr
 8020226:	d210      	bcs.n	802024a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8020228:	f890 9000 	ldrb.w	r9, [r0]
 802022c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8020230:	fb19 f90c 	smulbb	r9, r9, ip
 8020234:	fb02 9208 	mla	r2, r2, r8, r9
 8020238:	b292      	uxth	r2, r2
 802023a:	f102 0901 	add.w	r9, r2, #1
 802023e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8020242:	1212      	asrs	r2, r2, #8
 8020244:	f800 2b01 	strb.w	r2, [r0], #1
 8020248:	e7ec      	b.n	8020224 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 802024a:	4418      	add	r0, r3
 802024c:	4435      	add	r5, r6
 802024e:	e7e5      	b.n	802021c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8020250:	8813      	ldrh	r3, [r2, #0]
 8020252:	1b9b      	subs	r3, r3, r6
 8020254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020258:	4418      	add	r0, r3
 802025a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802025e:	1b9b      	subs	r3, r3, r6
 8020260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020264:	441d      	add	r5, r3
 8020266:	42a0      	cmp	r0, r4
 8020268:	d208      	bcs.n	802027c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 802026a:	eb00 0c01 	add.w	ip, r0, r1
 802026e:	4560      	cmp	r0, ip
 8020270:	d2ee      	bcs.n	8020250 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8020272:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020276:	f800 3b01 	strb.w	r3, [r0], #1
 802027a:	e7f8      	b.n	802026e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 802027c:	6838      	ldr	r0, [r7, #0]
 802027e:	6803      	ldr	r3, [r0, #0]
 8020280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020282:	4798      	blx	r3
 8020284:	e7a2      	b.n	80201cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8020286:	bf00      	nop
 8020288:	240285b4 	.word	0x240285b4
 802028c:	240285ae 	.word	0x240285ae

08020290 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020292:	2300      	movs	r3, #0
 8020294:	b085      	sub	sp, #20
 8020296:	9300      	str	r3, [sp, #0]
 8020298:	4b41      	ldr	r3, [pc, #260]	@ (80203a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 802029a:	781b      	ldrb	r3, [r3, #0]
 802029c:	2b00      	cmp	r3, #0
 802029e:	d136      	bne.n	802030e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80202a0:	4a40      	ldr	r2, [pc, #256]	@ (80203a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80202a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80202a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80202aa:	2b00      	cmp	r3, #0
 80202ac:	d131      	bne.n	8020312 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80202ae:	4b3e      	ldr	r3, [pc, #248]	@ (80203a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80202b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80202b4:	ac02      	add	r4, sp, #8
 80202b6:	6808      	ldr	r0, [r1, #0]
 80202b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80202bc:	ab02      	add	r3, sp, #8
 80202be:	6849      	ldr	r1, [r1, #4]
 80202c0:	4d3a      	ldr	r5, [pc, #232]	@ (80203ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80202c2:	c303      	stmia	r3!, {r0, r1}
 80202c4:	4669      	mov	r1, sp
 80202c6:	4620      	mov	r0, r4
 80202c8:	f7fa f978 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80202cc:	4668      	mov	r0, sp
 80202ce:	f7fa f931 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80202d6:	f8bd 2000 	ldrh.w	r2, [sp]
 80202da:	462e      	mov	r6, r5
 80202dc:	6828      	ldr	r0, [r5, #0]
 80202de:	4413      	add	r3, r2
 80202e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80202e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80202e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80202ec:	4413      	add	r3, r2
 80202ee:	f8ad 300a 	strh.w	r3, [sp, #10]
 80202f2:	6803      	ldr	r3, [r0, #0]
 80202f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80202f6:	4798      	blx	r3
 80202f8:	f010 0f01 	tst.w	r0, #1
 80202fc:	d00b      	beq.n	8020316 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80202fe:	6828      	ldr	r0, [r5, #0]
 8020300:	6803      	ldr	r3, [r0, #0]
 8020302:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020308:	4798      	blx	r3
 802030a:	b005      	add	sp, #20
 802030c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802030e:	4a26      	ldr	r2, [pc, #152]	@ (80203a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8020310:	e7c7      	b.n	80202a2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020312:	4b24      	ldr	r3, [pc, #144]	@ (80203a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020314:	e7cc      	b.n	80202b0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020316:	6830      	ldr	r0, [r6, #0]
 8020318:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 802031c:	6803      	ldr	r3, [r0, #0]
 802031e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8020322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020324:	4798      	blx	r3
 8020326:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802032a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802032e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8020332:	fb14 3402 	smlabb	r4, r4, r2, r3
 8020336:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802033a:	4404      	add	r4, r0
 802033c:	6830      	ldr	r0, [r6, #0]
 802033e:	6803      	ldr	r3, [r0, #0]
 8020340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020342:	4798      	blx	r3
 8020344:	4917      	ldr	r1, [pc, #92]	@ (80203a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8020346:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802034a:	880b      	ldrh	r3, [r1, #0]
 802034c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8020350:	fb03 c202 	mla	r2, r3, r2, ip
 8020354:	437b      	muls	r3, r7
 8020356:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 802035a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802035e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020362:	4410      	add	r0, r2
 8020364:	18c2      	adds	r2, r0, r3
 8020366:	4290      	cmp	r0, r2
 8020368:	d214      	bcs.n	8020394 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 802036a:	eb00 0c07 	add.w	ip, r0, r7
 802036e:	4560      	cmp	r0, ip
 8020370:	d204      	bcs.n	802037c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8020372:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020376:	f800 3b01 	strb.w	r3, [r0], #1
 802037a:	e7f8      	b.n	802036e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 802037c:	880b      	ldrh	r3, [r1, #0]
 802037e:	1b5b      	subs	r3, r3, r5
 8020380:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020384:	4418      	add	r0, r3
 8020386:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802038a:	1b5b      	subs	r3, r3, r5
 802038c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020390:	441c      	add	r4, r3
 8020392:	e7e8      	b.n	8020366 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8020394:	6830      	ldr	r0, [r6, #0]
 8020396:	6803      	ldr	r3, [r0, #0]
 8020398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802039a:	4798      	blx	r3
 802039c:	e7b5      	b.n	802030a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 802039e:	bf00      	nop
 80203a0:	240285ac 	.word	0x240285ac
 80203a4:	240285ae 	.word	0x240285ae
 80203a8:	240285b0 	.word	0x240285b0
 80203ac:	240285b4 	.word	0x240285b4

080203b0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80203b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203b4:	b08f      	sub	sp, #60	@ 0x3c
 80203b6:	461c      	mov	r4, r3
 80203b8:	9203      	str	r2, [sp, #12]
 80203ba:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80203be:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80203c0:	6820      	ldr	r0, [r4, #0]
 80203c2:	9100      	str	r1, [sp, #0]
 80203c4:	9204      	str	r2, [sp, #16]
 80203c6:	aa0a      	add	r2, sp, #40	@ 0x28
 80203c8:	6861      	ldr	r1, [r4, #4]
 80203ca:	c203      	stmia	r2!, {r0, r1}
 80203cc:	6818      	ldr	r0, [r3, #0]
 80203ce:	aa0c      	add	r2, sp, #48	@ 0x30
 80203d0:	6859      	ldr	r1, [r3, #4]
 80203d2:	c203      	stmia	r2!, {r0, r1}
 80203d4:	a80a      	add	r0, sp, #40	@ 0x28
 80203d6:	f7fa f8ad 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80203da:	4621      	mov	r1, r4
 80203dc:	a80c      	add	r0, sp, #48	@ 0x30
 80203de:	f7fa f8ed 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80203e2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80203e6:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80203ea:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80203ee:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80203f2:	bfdb      	ittet	le
 80203f4:	b2b3      	uxthle	r3, r6
 80203f6:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80203fa:	2301      	movgt	r3, #1
 80203fc:	fb92 f3f3 	sdivle	r3, r2, r3
 8020400:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020404:	441d      	add	r5, r3
 8020406:	fb92 f1f3 	sdiv	r1, r2, r3
 802040a:	fa1f fc81 	uxth.w	ip, r1
 802040e:	3d01      	subs	r5, #1
 8020410:	fb0c 2413 	mls	r4, ip, r3, r2
 8020414:	4661      	mov	r1, ip
 8020416:	fb14 f406 	smulbb	r4, r4, r6
 802041a:	4404      	add	r4, r0
 802041c:	fb95 f5f3 	sdiv	r5, r5, r3
 8020420:	b2a4      	uxth	r4, r4
 8020422:	b131      	cbz	r1, 8020432 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8020424:	9b03      	ldr	r3, [sp, #12]
 8020426:	9900      	ldr	r1, [sp, #0]
 8020428:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802042c:	ba1b      	rev	r3, r3
 802042e:	4419      	add	r1, r3
 8020430:	9100      	str	r1, [sp, #0]
 8020432:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020436:	b2ad      	uxth	r5, r5
 8020438:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802043c:	4418      	add	r0, r3
 802043e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020442:	00ad      	lsls	r5, r5, #2
 8020444:	441a      	add	r2, r3
 8020446:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802044a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 802044e:	9301      	str	r3, [sp, #4]
 8020450:	4b79      	ldr	r3, [pc, #484]	@ (8020638 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8020452:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020456:	6818      	ldr	r0, [r3, #0]
 8020458:	6803      	ldr	r3, [r0, #0]
 802045a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802045c:	4798      	blx	r3
 802045e:	4a77      	ldr	r2, [pc, #476]	@ (802063c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8020460:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8020464:	2c00      	cmp	r4, #0
 8020466:	8813      	ldrh	r3, [r2, #0]
 8020468:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 802046c:	9209      	str	r2, [sp, #36]	@ 0x24
 802046e:	fb03 c101 	mla	r1, r3, r1, ip
 8020472:	fb06 f303 	mul.w	r3, r6, r3
 8020476:	bf18      	it	ne
 8020478:	2600      	movne	r6, #0
 802047a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802047e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020482:	4408      	add	r0, r1
 8020484:	4403      	add	r3, r0
 8020486:	9306      	str	r3, [sp, #24]
 8020488:	f105 0304 	add.w	r3, r5, #4
 802048c:	9305      	str	r3, [sp, #20]
 802048e:	9b01      	ldr	r3, [sp, #4]
 8020490:	bf08      	it	eq
 8020492:	461e      	moveq	r6, r3
 8020494:	2300      	movs	r3, #0
 8020496:	b2b6      	uxth	r6, r6
 8020498:	9302      	str	r3, [sp, #8]
 802049a:	9a06      	ldr	r2, [sp, #24]
 802049c:	4290      	cmp	r0, r2
 802049e:	f080 80c2 	bcs.w	8020626 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 80204a2:	b963      	cbnz	r3, 80204be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80204a4:	9b00      	ldr	r3, [sp, #0]
 80204a6:	781a      	ldrb	r2, [r3, #0]
 80204a8:	0993      	lsrs	r3, r2, #6
 80204aa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80204ae:	9202      	str	r2, [sp, #8]
 80204b0:	1e5a      	subs	r2, r3, #1
 80204b2:	2a02      	cmp	r2, #2
 80204b4:	d815      	bhi.n	80204e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 80204b6:	9a00      	ldr	r2, [sp, #0]
 80204b8:	b29b      	uxth	r3, r3
 80204ba:	3201      	adds	r2, #1
 80204bc:	9200      	str	r2, [sp, #0]
 80204be:	b1b4      	cbz	r4, 80204ee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80204c0:	429c      	cmp	r4, r3
 80204c2:	bf91      	iteee	ls
 80204c4:	1b1c      	subls	r4, r3, r4
 80204c6:	1ae4      	subhi	r4, r4, r3
 80204c8:	4635      	movhi	r5, r6
 80204ca:	f04f 0e00 	movhi.w	lr, #0
 80204ce:	bf9b      	ittet	ls
 80204d0:	fa1f fe84 	uxthls.w	lr, r4
 80204d4:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 80204d8:	b2a4      	uxthhi	r4, r4
 80204da:	2400      	movls	r4, #0
 80204dc:	4673      	mov	r3, lr
 80204de:	462e      	mov	r6, r5
 80204e0:	e7db      	b.n	802049a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 80204e2:	9a00      	ldr	r2, [sp, #0]
 80204e4:	9b00      	ldr	r3, [sp, #0]
 80204e6:	3202      	adds	r2, #2
 80204e8:	785b      	ldrb	r3, [r3, #1]
 80204ea:	9200      	str	r2, [sp, #0]
 80204ec:	e7e7      	b.n	80204be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80204ee:	2204      	movs	r2, #4
 80204f0:	9905      	ldr	r1, [sp, #20]
 80204f2:	429e      	cmp	r6, r3
 80204f4:	4615      	mov	r5, r2
 80204f6:	9a02      	ldr	r2, [sp, #8]
 80204f8:	bf94      	ite	ls
 80204fa:	eba3 0e06 	subls.w	lr, r3, r6
 80204fe:	46a6      	movhi	lr, r4
 8020500:	fb15 1202 	smlabb	r2, r5, r2, r1
 8020504:	9903      	ldr	r1, [sp, #12]
 8020506:	bf8c      	ite	hi
 8020508:	1af5      	subhi	r5, r6, r3
 802050a:	fa1f fe8e 	uxthls.w	lr, lr
 802050e:	f851 c002 	ldr.w	ip, [r1, r2]
 8020512:	bf9a      	itte	ls
 8020514:	4625      	movls	r5, r4
 8020516:	4632      	movls	r2, r6
 8020518:	b2ad      	uxthhi	r5, r5
 802051a:	ea4f 611c 	mov.w	r1, ip, lsr #24
 802051e:	bf88      	it	hi
 8020520:	461a      	movhi	r2, r3
 8020522:	b179      	cbz	r1, 8020544 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8020524:	29ff      	cmp	r1, #255	@ 0xff
 8020526:	fa5f f98c 	uxtb.w	r9, ip
 802052a:	f3cc 2807 	ubfx	r8, ip, #8, #8
 802052e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8020532:	d126      	bne.n	8020582 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8020534:	9f04      	ldr	r7, [sp, #16]
 8020536:	2fff      	cmp	r7, #255	@ 0xff
 8020538:	d123      	bne.n	8020582 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 802053a:	4682      	mov	sl, r0
 802053c:	4611      	mov	r1, r2
 802053e:	f10a 0a03 	add.w	sl, sl, #3
 8020542:	b9a9      	cbnz	r1, 8020570 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8020544:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020548:	429e      	cmp	r6, r3
 802054a:	4410      	add	r0, r2
 802054c:	d8c6      	bhi.n	80204dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 802054e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8020552:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020558:	1b64      	subs	r4, r4, r5
 802055a:	9a01      	ldr	r2, [sp, #4]
 802055c:	881b      	ldrh	r3, [r3, #0]
 802055e:	b2a4      	uxth	r4, r4
 8020560:	1a9b      	subs	r3, r3, r2
 8020562:	2c00      	cmp	r4, #0
 8020564:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020568:	bf18      	it	ne
 802056a:	2500      	movne	r5, #0
 802056c:	4418      	add	r0, r3
 802056e:	e7b5      	b.n	80204dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8020570:	3901      	subs	r1, #1
 8020572:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8020576:	f80a 8c02 	strb.w	r8, [sl, #-2]
 802057a:	f80a cc01 	strb.w	ip, [sl, #-1]
 802057e:	b289      	uxth	r1, r1
 8020580:	e7dd      	b.n	802053e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8020582:	9f04      	ldr	r7, [sp, #16]
 8020584:	fb07 fa01 	mul.w	sl, r7, r1
 8020588:	f10a 0101 	add.w	r1, sl, #1
 802058c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8020590:	1209      	asrs	r1, r1, #8
 8020592:	ea6f 0a01 	mvn.w	sl, r1
 8020596:	b289      	uxth	r1, r1
 8020598:	fb19 f901 	smulbb	r9, r9, r1
 802059c:	fa5f fa8a 	uxtb.w	sl, sl
 80205a0:	fb18 f801 	smulbb	r8, r8, r1
 80205a4:	fb1c f101 	smulbb	r1, ip, r1
 80205a8:	fa1f f789 	uxth.w	r7, r9
 80205ac:	4684      	mov	ip, r0
 80205ae:	4691      	mov	r9, r2
 80205b0:	9707      	str	r7, [sp, #28]
 80205b2:	b289      	uxth	r1, r1
 80205b4:	fa1f f788 	uxth.w	r7, r8
 80205b8:	9708      	str	r7, [sp, #32]
 80205ba:	f10c 0c03 	add.w	ip, ip, #3
 80205be:	f1b9 0f00 	cmp.w	r9, #0
 80205c2:	d0bf      	beq.n	8020544 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80205c4:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 80205c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80205cc:	9f07      	ldr	r7, [sp, #28]
 80205ce:	fa1f f989 	uxth.w	r9, r9
 80205d2:	fb08 780a 	mla	r8, r8, sl, r7
 80205d6:	9f08      	ldr	r7, [sp, #32]
 80205d8:	fa1f f888 	uxth.w	r8, r8
 80205dc:	f108 0b01 	add.w	fp, r8, #1
 80205e0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80205e4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80205e8:	f80c 8c03 	strb.w	r8, [ip, #-3]
 80205ec:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 80205f0:	fb08 780a 	mla	r8, r8, sl, r7
 80205f4:	fa1f f888 	uxth.w	r8, r8
 80205f8:	f108 0b01 	add.w	fp, r8, #1
 80205fc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020600:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020604:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8020608:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 802060c:	fb08 180a 	mla	r8, r8, sl, r1
 8020610:	fa1f f888 	uxth.w	r8, r8
 8020614:	f108 0b01 	add.w	fp, r8, #1
 8020618:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 802061c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020620:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8020624:	e7c9      	b.n	80205ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8020626:	4b04      	ldr	r3, [pc, #16]	@ (8020638 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8020628:	6818      	ldr	r0, [r3, #0]
 802062a:	6803      	ldr	r3, [r0, #0]
 802062c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802062e:	4798      	blx	r3
 8020630:	b00f      	add	sp, #60	@ 0x3c
 8020632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020636:	bf00      	nop
 8020638:	240285b4 	.word	0x240285b4
 802063c:	240285ae 	.word	0x240285ae

08020640 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020644:	b089      	sub	sp, #36	@ 0x24
 8020646:	4607      	mov	r7, r0
 8020648:	4689      	mov	r9, r1
 802064a:	4692      	mov	sl, r2
 802064c:	ac08      	add	r4, sp, #32
 802064e:	461e      	mov	r6, r3
 8020650:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020654:	4620      	mov	r0, r4
 8020656:	f7fd ff77 	bl	801e548 <_ZNK8touchgfx6Bitmap7getDataEv>
 802065a:	683b      	ldr	r3, [r7, #0]
 802065c:	4605      	mov	r5, r0
 802065e:	4620      	mov	r0, r4
 8020660:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020664:	f7fd fe7e 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020668:	4683      	mov	fp, r0
 802066a:	4620      	mov	r0, r4
 802066c:	f7fd feae 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020670:	4653      	mov	r3, sl
 8020672:	464a      	mov	r2, r9
 8020674:	4639      	mov	r1, r7
 8020676:	9500      	str	r5, [sp, #0]
 8020678:	e9cd b001 	strd	fp, r0, [sp, #4]
 802067c:	a806      	add	r0, sp, #24
 802067e:	47c0      	blx	r8
 8020680:	a906      	add	r1, sp, #24
 8020682:	4630      	mov	r0, r6
 8020684:	f7fd fd52 	bl	801e12c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8020688:	4628      	mov	r0, r5
 802068a:	b009      	add	sp, #36	@ 0x24
 802068c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020690 <_ZN8touchgfx8LCD24bppD0Ev>:
 8020690:	b510      	push	{r4, lr}
 8020692:	4604      	mov	r4, r0
 8020694:	216c      	movs	r1, #108	@ 0x6c
 8020696:	f008 fc7f 	bl	8028f98 <_ZdlPvj>
 802069a:	4620      	mov	r0, r4
 802069c:	bd10      	pop	{r4, pc}

0802069e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 802069e:	b510      	push	{r4, lr}
 80206a0:	4604      	mov	r4, r0
 80206a2:	2104      	movs	r1, #4
 80206a4:	f008 fc78 	bl	8028f98 <_ZdlPvj>
 80206a8:	4620      	mov	r0, r4
 80206aa:	bd10      	pop	{r4, pc}

080206ac <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 80206ac:	b510      	push	{r4, lr}
 80206ae:	4604      	mov	r4, r0
 80206b0:	2104      	movs	r1, #4
 80206b2:	f008 fc71 	bl	8028f98 <_ZdlPvj>
 80206b6:	4620      	mov	r0, r4
 80206b8:	bd10      	pop	{r4, pc}

080206ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 80206ba:	b510      	push	{r4, lr}
 80206bc:	4604      	mov	r4, r0
 80206be:	f640 0144 	movw	r1, #2116	@ 0x844
 80206c2:	f008 fc69 	bl	8028f98 <_ZdlPvj>
 80206c6:	4620      	mov	r0, r4
 80206c8:	bd10      	pop	{r4, pc}

080206ca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 80206ca:	b510      	push	{r4, lr}
 80206cc:	4604      	mov	r4, r0
 80206ce:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80206d2:	f008 fc61 	bl	8028f98 <_ZdlPvj>
 80206d6:	4620      	mov	r0, r4
 80206d8:	bd10      	pop	{r4, pc}

080206da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80206da:	b510      	push	{r4, lr}
 80206dc:	4604      	mov	r4, r0
 80206de:	2104      	movs	r1, #4
 80206e0:	f008 fc5a 	bl	8028f98 <_ZdlPvj>
 80206e4:	4620      	mov	r0, r4
 80206e6:	bd10      	pop	{r4, pc}

080206e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80206e8:	b510      	push	{r4, lr}
 80206ea:	4604      	mov	r4, r0
 80206ec:	2104      	movs	r1, #4
 80206ee:	f008 fc53 	bl	8028f98 <_ZdlPvj>
 80206f2:	4620      	mov	r0, r4
 80206f4:	bd10      	pop	{r4, pc}

080206f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80206f6:	b510      	push	{r4, lr}
 80206f8:	4604      	mov	r4, r0
 80206fa:	2104      	movs	r1, #4
 80206fc:	f008 fc4c 	bl	8028f98 <_ZdlPvj>
 8020700:	4620      	mov	r0, r4
 8020702:	bd10      	pop	{r4, pc}

08020704 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020704:	b510      	push	{r4, lr}
 8020706:	4604      	mov	r4, r0
 8020708:	2104      	movs	r1, #4
 802070a:	f008 fc45 	bl	8028f98 <_ZdlPvj>
 802070e:	4620      	mov	r0, r4
 8020710:	bd10      	pop	{r4, pc}

08020712 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020712:	b510      	push	{r4, lr}
 8020714:	4604      	mov	r4, r0
 8020716:	2104      	movs	r1, #4
 8020718:	f008 fc3e 	bl	8028f98 <_ZdlPvj>
 802071c:	4620      	mov	r0, r4
 802071e:	bd10      	pop	{r4, pc}

08020720 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020720:	b510      	push	{r4, lr}
 8020722:	4604      	mov	r4, r0
 8020724:	2104      	movs	r1, #4
 8020726:	f008 fc37 	bl	8028f98 <_ZdlPvj>
 802072a:	4620      	mov	r0, r4
 802072c:	bd10      	pop	{r4, pc}

0802072e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802072e:	b510      	push	{r4, lr}
 8020730:	4604      	mov	r4, r0
 8020732:	2104      	movs	r1, #4
 8020734:	f008 fc30 	bl	8028f98 <_ZdlPvj>
 8020738:	4620      	mov	r0, r4
 802073a:	bd10      	pop	{r4, pc}

0802073c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802073c:	b510      	push	{r4, lr}
 802073e:	4604      	mov	r4, r0
 8020740:	2104      	movs	r1, #4
 8020742:	f008 fc29 	bl	8028f98 <_ZdlPvj>
 8020746:	4620      	mov	r0, r4
 8020748:	bd10      	pop	{r4, pc}

0802074a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802074a:	b510      	push	{r4, lr}
 802074c:	4604      	mov	r4, r0
 802074e:	2104      	movs	r1, #4
 8020750:	f008 fc22 	bl	8028f98 <_ZdlPvj>
 8020754:	4620      	mov	r0, r4
 8020756:	bd10      	pop	{r4, pc}

08020758 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020758:	b510      	push	{r4, lr}
 802075a:	4604      	mov	r4, r0
 802075c:	2104      	movs	r1, #4
 802075e:	f008 fc1b 	bl	8028f98 <_ZdlPvj>
 8020762:	4620      	mov	r0, r4
 8020764:	bd10      	pop	{r4, pc}

08020766 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020766:	b510      	push	{r4, lr}
 8020768:	4604      	mov	r4, r0
 802076a:	2104      	movs	r1, #4
 802076c:	f008 fc14 	bl	8028f98 <_ZdlPvj>
 8020770:	4620      	mov	r0, r4
 8020772:	bd10      	pop	{r4, pc}

08020774 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020774:	b510      	push	{r4, lr}
 8020776:	4604      	mov	r4, r0
 8020778:	2104      	movs	r1, #4
 802077a:	f008 fc0d 	bl	8028f98 <_ZdlPvj>
 802077e:	4620      	mov	r0, r4
 8020780:	bd10      	pop	{r4, pc}

08020782 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020782:	b510      	push	{r4, lr}
 8020784:	4604      	mov	r4, r0
 8020786:	2104      	movs	r1, #4
 8020788:	f008 fc06 	bl	8028f98 <_ZdlPvj>
 802078c:	4620      	mov	r0, r4
 802078e:	bd10      	pop	{r4, pc}

08020790 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020790:	b510      	push	{r4, lr}
 8020792:	4604      	mov	r4, r0
 8020794:	2104      	movs	r1, #4
 8020796:	f008 fbff 	bl	8028f98 <_ZdlPvj>
 802079a:	4620      	mov	r0, r4
 802079c:	bd10      	pop	{r4, pc}

0802079e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802079e:	b510      	push	{r4, lr}
 80207a0:	4604      	mov	r4, r0
 80207a2:	2104      	movs	r1, #4
 80207a4:	f008 fbf8 	bl	8028f98 <_ZdlPvj>
 80207a8:	4620      	mov	r0, r4
 80207aa:	bd10      	pop	{r4, pc}

080207ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80207ac:	b510      	push	{r4, lr}
 80207ae:	4604      	mov	r4, r0
 80207b0:	2104      	movs	r1, #4
 80207b2:	f008 fbf1 	bl	8028f98 <_ZdlPvj>
 80207b6:	4620      	mov	r0, r4
 80207b8:	bd10      	pop	{r4, pc}

080207ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80207ba:	b510      	push	{r4, lr}
 80207bc:	4604      	mov	r4, r0
 80207be:	2104      	movs	r1, #4
 80207c0:	f008 fbea 	bl	8028f98 <_ZdlPvj>
 80207c4:	4620      	mov	r0, r4
 80207c6:	bd10      	pop	{r4, pc}

080207c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80207c8:	b510      	push	{r4, lr}
 80207ca:	4604      	mov	r4, r0
 80207cc:	2104      	movs	r1, #4
 80207ce:	f008 fbe3 	bl	8028f98 <_ZdlPvj>
 80207d2:	4620      	mov	r0, r4
 80207d4:	bd10      	pop	{r4, pc}

080207d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80207d6:	b510      	push	{r4, lr}
 80207d8:	4604      	mov	r4, r0
 80207da:	2104      	movs	r1, #4
 80207dc:	f008 fbdc 	bl	8028f98 <_ZdlPvj>
 80207e0:	4620      	mov	r0, r4
 80207e2:	bd10      	pop	{r4, pc}

080207e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80207e4:	b510      	push	{r4, lr}
 80207e6:	4604      	mov	r4, r0
 80207e8:	2104      	movs	r1, #4
 80207ea:	f008 fbd5 	bl	8028f98 <_ZdlPvj>
 80207ee:	4620      	mov	r0, r4
 80207f0:	bd10      	pop	{r4, pc}
	...

080207f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80207f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207f8:	b08f      	sub	sp, #60	@ 0x3c
 80207fa:	461c      	mov	r4, r3
 80207fc:	460e      	mov	r6, r1
 80207fe:	9206      	str	r2, [sp, #24]
 8020800:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020804:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020806:	9202      	str	r2, [sp, #8]
 8020808:	2a00      	cmp	r2, #0
 802080a:	f000 8128 	beq.w	8020a5e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 802080e:	6820      	ldr	r0, [r4, #0]
 8020810:	aa0a      	add	r2, sp, #40	@ 0x28
 8020812:	6861      	ldr	r1, [r4, #4]
 8020814:	c203      	stmia	r2!, {r0, r1}
 8020816:	6818      	ldr	r0, [r3, #0]
 8020818:	aa0c      	add	r2, sp, #48	@ 0x30
 802081a:	6859      	ldr	r1, [r3, #4]
 802081c:	c203      	stmia	r2!, {r0, r1}
 802081e:	a80a      	add	r0, sp, #40	@ 0x28
 8020820:	f7f9 fe88 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020824:	4621      	mov	r1, r4
 8020826:	a80c      	add	r0, sp, #48	@ 0x30
 8020828:	f7f9 fec8 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802082c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8020830:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020834:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8020838:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 802083c:	bfdb      	ittet	le
 802083e:	b2bb      	uxthle	r3, r7
 8020840:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020844:	2301      	movgt	r3, #1
 8020846:	fb92 f3f3 	sdivle	r3, r2, r3
 802084a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 802084e:	441d      	add	r5, r3
 8020850:	fb92 f1f3 	sdiv	r1, r2, r3
 8020854:	fa1f fc81 	uxth.w	ip, r1
 8020858:	3d01      	subs	r5, #1
 802085a:	fb0c 2413 	mls	r4, ip, r3, r2
 802085e:	4661      	mov	r1, ip
 8020860:	fb14 f407 	smulbb	r4, r4, r7
 8020864:	4404      	add	r4, r0
 8020866:	fb95 f5f3 	sdiv	r5, r5, r3
 802086a:	b2a4      	uxth	r4, r4
 802086c:	b121      	cbz	r1, 8020878 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 802086e:	9b06      	ldr	r3, [sp, #24]
 8020870:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020874:	ba1b      	rev	r3, r3
 8020876:	441e      	add	r6, r3
 8020878:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802087c:	b2ad      	uxth	r5, r5
 802087e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8020882:	4418      	add	r0, r3
 8020884:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020888:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 802088c:	00ad      	lsls	r5, r5, #2
 802088e:	441a      	add	r2, r3
 8020890:	4b74      	ldr	r3, [pc, #464]	@ (8020a64 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8020892:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020896:	6818      	ldr	r0, [r3, #0]
 8020898:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 802089c:	6803      	ldr	r3, [r0, #0]
 802089e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80208a0:	4798      	blx	r3
 80208a2:	4a71      	ldr	r2, [pc, #452]	@ (8020a68 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 80208a4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80208a8:	2c00      	cmp	r4, #0
 80208aa:	8813      	ldrh	r3, [r2, #0]
 80208ac:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80208b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80208b2:	fb03 c101 	mla	r1, r3, r1, ip
 80208b6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80208ba:	fb03 f307 	mul.w	r3, r3, r7
 80208be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80208c2:	9204      	str	r2, [sp, #16]
 80208c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80208c8:	9a02      	ldr	r2, [sp, #8]
 80208ca:	4408      	add	r0, r1
 80208cc:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 80208d0:	4403      	add	r3, r0
 80208d2:	b292      	uxth	r2, r2
 80208d4:	9307      	str	r3, [sp, #28]
 80208d6:	f105 0304 	add.w	r3, r5, #4
 80208da:	bf0c      	ite	eq
 80208dc:	4645      	moveq	r5, r8
 80208de:	2500      	movne	r5, #0
 80208e0:	9308      	str	r3, [sp, #32]
 80208e2:	2300      	movs	r3, #0
 80208e4:	b2ad      	uxth	r5, r5
 80208e6:	9205      	str	r2, [sp, #20]
 80208e8:	9303      	str	r3, [sp, #12]
 80208ea:	9a07      	ldr	r2, [sp, #28]
 80208ec:	4282      	cmp	r2, r0
 80208ee:	f240 80b1 	bls.w	8020a54 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80208f2:	b95b      	cbnz	r3, 802090c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 80208f4:	7832      	ldrb	r2, [r6, #0]
 80208f6:	0993      	lsrs	r3, r2, #6
 80208f8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80208fc:	9203      	str	r2, [sp, #12]
 80208fe:	1e5a      	subs	r2, r3, #1
 8020900:	2a02      	cmp	r2, #2
 8020902:	bf8d      	iteet	hi
 8020904:	7873      	ldrbhi	r3, [r6, #1]
 8020906:	3601      	addls	r6, #1
 8020908:	b29b      	uxthls	r3, r3
 802090a:	3602      	addhi	r6, #2
 802090c:	b184      	cbz	r4, 8020930 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 802090e:	429c      	cmp	r4, r3
 8020910:	bf91      	iteee	ls
 8020912:	1b1c      	subls	r4, r3, r4
 8020914:	1ae4      	subhi	r4, r4, r3
 8020916:	4629      	movhi	r1, r5
 8020918:	f04f 0e00 	movhi.w	lr, #0
 802091c:	bf9b      	ittet	ls
 802091e:	fa1f fe84 	uxthls.w	lr, r4
 8020922:	2400      	movls	r4, #0
 8020924:	b2a4      	uxthhi	r4, r4
 8020926:	fa1f f188 	uxthls.w	r1, r8
 802092a:	4673      	mov	r3, lr
 802092c:	460d      	mov	r5, r1
 802092e:	e7dc      	b.n	80208ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8020930:	2203      	movs	r2, #3
 8020932:	9908      	ldr	r1, [sp, #32]
 8020934:	42ab      	cmp	r3, r5
 8020936:	4617      	mov	r7, r2
 8020938:	9a03      	ldr	r2, [sp, #12]
 802093a:	bf24      	itt	cs
 802093c:	eba3 0e05 	subcs.w	lr, r3, r5
 8020940:	9501      	strcs	r5, [sp, #4]
 8020942:	fb17 1702 	smlabb	r7, r7, r2, r1
 8020946:	9a06      	ldr	r2, [sp, #24]
 8020948:	bf34      	ite	cc
 802094a:	1ae9      	subcc	r1, r5, r3
 802094c:	fa1f fe8e 	uxthcs.w	lr, lr
 8020950:	4417      	add	r7, r2
 8020952:	9a02      	ldr	r2, [sp, #8]
 8020954:	bf2f      	iteee	cs
 8020956:	4621      	movcs	r1, r4
 8020958:	b289      	uxthcc	r1, r1
 802095a:	9301      	strcc	r3, [sp, #4]
 802095c:	46a6      	movcc	lr, r4
 802095e:	2aff      	cmp	r2, #255	@ 0xff
 8020960:	d11e      	bne.n	80209a0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8020962:	4681      	mov	r9, r0
 8020964:	f8dd c004 	ldr.w	ip, [sp, #4]
 8020968:	f109 0903 	add.w	r9, r9, #3
 802096c:	f1bc 0f00 	cmp.w	ip, #0
 8020970:	d15f      	bne.n	8020a32 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8020972:	9a01      	ldr	r2, [sp, #4]
 8020974:	42ab      	cmp	r3, r5
 8020976:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802097a:	4410      	add	r0, r2
 802097c:	d3d5      	bcc.n	802092a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 802097e:	fa1f f188 	uxth.w	r1, r8
 8020982:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020988:	1a64      	subs	r4, r4, r1
 802098a:	881b      	ldrh	r3, [r3, #0]
 802098c:	b2a4      	uxth	r4, r4
 802098e:	eba3 0308 	sub.w	r3, r3, r8
 8020992:	2c00      	cmp	r4, #0
 8020994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020998:	bf18      	it	ne
 802099a:	2100      	movne	r1, #0
 802099c:	4418      	add	r0, r3
 802099e:	e7c4      	b.n	802092a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80209a0:	4684      	mov	ip, r0
 80209a2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80209a6:	f10c 0c03 	add.w	ip, ip, #3
 80209aa:	f1ba 0f00 	cmp.w	sl, #0
 80209ae:	d0e0      	beq.n	8020972 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 80209b0:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 80209b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80209b8:	9a05      	ldr	r2, [sp, #20]
 80209ba:	f897 9000 	ldrb.w	r9, [r7]
 80209be:	fa1f fa8a 	uxth.w	sl, sl
 80209c2:	fb1b fb02 	smulbb	fp, fp, r2
 80209c6:	9a04      	ldr	r2, [sp, #16]
 80209c8:	fb09 b902 	mla	r9, r9, r2, fp
 80209cc:	9a05      	ldr	r2, [sp, #20]
 80209ce:	fa1f f989 	uxth.w	r9, r9
 80209d2:	f109 0b01 	add.w	fp, r9, #1
 80209d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80209da:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 80209de:	fb1b fb02 	smulbb	fp, fp, r2
 80209e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209e6:	9a04      	ldr	r2, [sp, #16]
 80209e8:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80209ec:	f897 9001 	ldrb.w	r9, [r7, #1]
 80209f0:	fb09 b902 	mla	r9, r9, r2, fp
 80209f4:	9a05      	ldr	r2, [sp, #20]
 80209f6:	fa1f f989 	uxth.w	r9, r9
 80209fa:	f109 0b01 	add.w	fp, r9, #1
 80209fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020a02:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8020a06:	fb1b fb02 	smulbb	fp, fp, r2
 8020a0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a0e:	9a04      	ldr	r2, [sp, #16]
 8020a10:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8020a14:	f897 9002 	ldrb.w	r9, [r7, #2]
 8020a18:	fb09 b902 	mla	r9, r9, r2, fp
 8020a1c:	fa1f f989 	uxth.w	r9, r9
 8020a20:	f109 0b01 	add.w	fp, r9, #1
 8020a24:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020a28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020a2c:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8020a30:	e7b9      	b.n	80209a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8020a32:	f897 a000 	ldrb.w	sl, [r7]
 8020a36:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020a3a:	f809 ac03 	strb.w	sl, [r9, #-3]
 8020a3e:	fa1f fc8c 	uxth.w	ip, ip
 8020a42:	f897 a001 	ldrb.w	sl, [r7, #1]
 8020a46:	f809 ac02 	strb.w	sl, [r9, #-2]
 8020a4a:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020a4e:	f809 ac01 	strb.w	sl, [r9, #-1]
 8020a52:	e789      	b.n	8020968 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8020a54:	4b03      	ldr	r3, [pc, #12]	@ (8020a64 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8020a56:	6818      	ldr	r0, [r3, #0]
 8020a58:	6803      	ldr	r3, [r0, #0]
 8020a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a5c:	4798      	blx	r3
 8020a5e:	b00f      	add	sp, #60	@ 0x3c
 8020a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a64:	240285b4 	.word	0x240285b4
 8020a68:	240285ae 	.word	0x240285ae

08020a6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a70:	b09b      	sub	sp, #108	@ 0x6c
 8020a72:	461d      	mov	r5, r3
 8020a74:	4604      	mov	r4, r0
 8020a76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020a78:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8020a7c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8020a80:	9208      	str	r2, [sp, #32]
 8020a82:	2a00      	cmp	r2, #0
 8020a84:	f000 81f3 	beq.w	8020e6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8020a88:	6828      	ldr	r0, [r5, #0]
 8020a8a:	aa16      	add	r2, sp, #88	@ 0x58
 8020a8c:	6869      	ldr	r1, [r5, #4]
 8020a8e:	c203      	stmia	r2!, {r0, r1}
 8020a90:	6818      	ldr	r0, [r3, #0]
 8020a92:	aa18      	add	r2, sp, #96	@ 0x60
 8020a94:	6859      	ldr	r1, [r3, #4]
 8020a96:	c203      	stmia	r2!, {r0, r1}
 8020a98:	a816      	add	r0, sp, #88	@ 0x58
 8020a9a:	f7f9 fd4b 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a9e:	4629      	mov	r1, r5
 8020aa0:	a818      	add	r0, sp, #96	@ 0x60
 8020aa2:	f7f9 fd8b 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020aa6:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8020aaa:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8020aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020ab2:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8020ab6:	bfdb      	ittet	le
 8020ab8:	b29a      	uxthle	r2, r3
 8020aba:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020abe:	f04f 0a01 	movgt.w	sl, #1
 8020ac2:	fb91 faf2 	sdivle	sl, r1, r2
 8020ac6:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8020aca:	4456      	add	r6, sl
 8020acc:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8020ad0:	3e01      	subs	r6, #1
 8020ad2:	fb92 f0fa 	sdiv	r0, r2, sl
 8020ad6:	b280      	uxth	r0, r0
 8020ad8:	fb00 281a 	mls	r8, r0, sl, r2
 8020adc:	900e      	str	r0, [sp, #56]	@ 0x38
 8020ade:	fb18 f803 	smulbb	r8, r8, r3
 8020ae2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8020ae6:	4488      	add	r8, r1
 8020ae8:	4419      	add	r1, r3
 8020aea:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8020aee:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8020af2:	fa1f f888 	uxth.w	r8, r8
 8020af6:	441a      	add	r2, r3
 8020af8:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8020afc:	9303      	str	r3, [sp, #12]
 8020afe:	4b9c      	ldr	r3, [pc, #624]	@ (8020d70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8020b00:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8020b04:	6818      	ldr	r0, [r3, #0]
 8020b06:	6803      	ldr	r3, [r0, #0]
 8020b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020b0a:	4798      	blx	r3
 8020b0c:	4b99      	ldr	r3, [pc, #612]	@ (8020d74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8020b0e:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8020b12:	f1b8 0f00 	cmp.w	r8, #0
 8020b16:	881a      	ldrh	r2, [r3, #0]
 8020b18:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8020b1c:	fb02 f505 	mul.w	r5, r2, r5
 8020b20:	fb02 7101 	mla	r1, r2, r1, r7
 8020b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020b28:	9314      	str	r3, [sp, #80]	@ 0x50
 8020b2a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020b2e:	9b08      	ldr	r3, [sp, #32]
 8020b30:	fb96 f6fa 	sdiv	r6, r6, sl
 8020b34:	4408      	add	r0, r1
 8020b36:	f106 0601 	add.w	r6, r6, #1
 8020b3a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8020b3e:	f04f 0100 	mov.w	r1, #0
 8020b42:	eb00 0205 	add.w	r2, r0, r5
 8020b46:	b2b6      	uxth	r6, r6
 8020b48:	b29b      	uxth	r3, r3
 8020b4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8020b4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b50:	930d      	str	r3, [sp, #52]	@ 0x34
 8020b52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020b56:	4b88      	ldr	r3, [pc, #544]	@ (8020d78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8020b58:	f106 0204 	add.w	r2, r6, #4
 8020b5c:	eba3 0304 	sub.w	r3, r3, r4
 8020b60:	9205      	str	r2, [sp, #20]
 8020b62:	9a03      	ldr	r2, [sp, #12]
 8020b64:	bf18      	it	ne
 8020b66:	2200      	movne	r2, #0
 8020b68:	9315      	str	r3, [sp, #84]	@ 0x54
 8020b6a:	b292      	uxth	r2, r2
 8020b6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020b70:	fa11 f383 	uxtah	r3, r1, r3
 8020b74:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020b76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020b7a:	3304      	adds	r3, #4
 8020b7c:	9306      	str	r3, [sp, #24]
 8020b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b80:	4283      	cmp	r3, r0
 8020b82:	f240 816f 	bls.w	8020e64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8020b86:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8020b8a:	f04f 0900 	mov.w	r9, #0
 8020b8e:	9d06      	ldr	r5, [sp, #24]
 8020b90:	fbb8 f3f3 	udiv	r3, r8, r3
 8020b94:	ebaa 0303 	sub.w	r3, sl, r3
 8020b98:	782d      	ldrb	r5, [r5, #0]
 8020b9a:	b29b      	uxth	r3, r3
 8020b9c:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020b9e:	3501      	adds	r5, #1
 8020ba0:	9312      	str	r3, [sp, #72]	@ 0x48
 8020ba2:	9b06      	ldr	r3, [sp, #24]
 8020ba4:	9504      	str	r5, [sp, #16]
 8020ba6:	7859      	ldrb	r1, [r3, #1]
 8020ba8:	789b      	ldrb	r3, [r3, #2]
 8020baa:	021b      	lsls	r3, r3, #8
 8020bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020bb0:	9906      	ldr	r1, [sp, #24]
 8020bb2:	78c9      	ldrb	r1, [r1, #3]
 8020bb4:	430b      	orrs	r3, r1
 8020bb6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020bb8:	4419      	add	r1, r3
 8020bba:	1c4d      	adds	r5, r1, #1
 8020bbc:	7849      	ldrb	r1, [r1, #1]
 8020bbe:	9502      	str	r5, [sp, #8]
 8020bc0:	0209      	lsls	r1, r1, #8
 8020bc2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020bc4:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8020bc8:	5ceb      	ldrb	r3, [r5, r3]
 8020bca:	4319      	orrs	r1, r3
 8020bcc:	b28b      	uxth	r3, r1
 8020bce:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8020bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8020bd4:	2300      	movs	r3, #0
 8020bd6:	9307      	str	r3, [sp, #28]
 8020bd8:	2301      	movs	r3, #1
 8020bda:	e9cd 3300 	strd	r3, r3, [sp]
 8020bde:	469c      	mov	ip, r3
 8020be0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020be6:	f1b8 0f00 	cmp.w	r8, #0
 8020bea:	f000 8082 	beq.w	8020cf2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8020bee:	45c4      	cmp	ip, r8
 8020bf0:	d270      	bcs.n	8020cd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8020bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bf4:	eba8 080c 	sub.w	r8, r8, ip
 8020bf8:	4611      	mov	r1, r2
 8020bfa:	4283      	cmp	r3, r0
 8020bfc:	fa1f f888 	uxth.w	r8, r8
 8020c00:	d802      	bhi.n	8020c08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8020c02:	e074      	b.n	8020cee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	d15f      	bne.n	8020cc8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8020c08:	9b02      	ldr	r3, [sp, #8]
 8020c0a:	9a01      	ldr	r2, [sp, #4]
 8020c0c:	785b      	ldrb	r3, [r3, #1]
 8020c0e:	f1c2 0207 	rsb	r2, r2, #7
 8020c12:	9d01      	ldr	r5, [sp, #4]
 8020c14:	4093      	lsls	r3, r2
 8020c16:	005b      	lsls	r3, r3, #1
 8020c18:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8020c1c:	9b02      	ldr	r3, [sp, #8]
 8020c1e:	781b      	ldrb	r3, [r3, #0]
 8020c20:	412b      	asrs	r3, r5
 8020c22:	b2db      	uxtb	r3, r3
 8020c24:	4313      	orrs	r3, r2
 8020c26:	462a      	mov	r2, r5
 8020c28:	3201      	adds	r2, #1
 8020c2a:	b29e      	uxth	r6, r3
 8020c2c:	b2d2      	uxtb	r2, r2
 8020c2e:	2a08      	cmp	r2, #8
 8020c30:	9201      	str	r2, [sp, #4]
 8020c32:	9a02      	ldr	r2, [sp, #8]
 8020c34:	bf09      	itett	eq
 8020c36:	3202      	addeq	r2, #2
 8020c38:	3201      	addne	r2, #1
 8020c3a:	9202      	streq	r2, [sp, #8]
 8020c3c:	2200      	moveq	r2, #0
 8020c3e:	bf14      	ite	ne
 8020c40:	9202      	strne	r2, [sp, #8]
 8020c42:	9201      	streq	r2, [sp, #4]
 8020c44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020c46:	42b2      	cmp	r2, r6
 8020c48:	d309      	bcc.n	8020c5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8020c4a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8020c4e:	2301      	movs	r3, #1
 8020c50:	9a04      	ldr	r2, [sp, #16]
 8020c52:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8020c56:	d30e      	bcc.n	8020c76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8020c58:	9300      	str	r3, [sp, #0]
 8020c5a:	2500      	movs	r5, #0
 8020c5c:	e035      	b.n	8020cca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8020c5e:	9b04      	ldr	r3, [sp, #16]
 8020c60:	429e      	cmp	r6, r3
 8020c62:	d318      	bcc.n	8020c96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8020c64:	9b00      	ldr	r3, [sp, #0]
 8020c66:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8020c6a:	18e3      	adds	r3, r4, r3
 8020c6c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8020c70:	9b00      	ldr	r3, [sp, #0]
 8020c72:	3301      	adds	r3, #1
 8020c74:	b29b      	uxth	r3, r3
 8020c76:	9a04      	ldr	r2, [sp, #16]
 8020c78:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8020c7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020c80:	9f00      	ldr	r7, [sp, #0]
 8020c82:	7115      	strb	r5, [r2, #4]
 8020c84:	3701      	adds	r7, #1
 8020c86:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020c88:	7157      	strb	r7, [r2, #5]
 8020c8a:	80d5      	strh	r5, [r2, #6]
 8020c8c:	9a04      	ldr	r2, [sp, #16]
 8020c8e:	3201      	adds	r2, #1
 8020c90:	b292      	uxth	r2, r2
 8020c92:	9204      	str	r2, [sp, #16]
 8020c94:	e7e0      	b.n	8020c58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8020c96:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020c9a:	4632      	mov	r2, r6
 8020c9c:	795b      	ldrb	r3, [r3, #5]
 8020c9e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8020ca2:	4425      	add	r5, r4
 8020ca4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8020ca6:	eb07 0c05 	add.w	ip, r7, r5
 8020caa:	f1bc 0f00 	cmp.w	ip, #0
 8020cae:	dd07      	ble.n	8020cc0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8020cb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020cb4:	f892 c004 	ldrb.w	ip, [r2, #4]
 8020cb8:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8020cbc:	88d2      	ldrh	r2, [r2, #6]
 8020cbe:	e7f1      	b.n	8020ca4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8020cc0:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8020cc4:	b29b      	uxth	r3, r3
 8020cc6:	e7c3      	b.n	8020c50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8020cc8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020cca:	460a      	mov	r2, r1
 8020ccc:	960a      	str	r6, [sp, #40]	@ 0x28
 8020cce:	46a9      	mov	r9, r5
 8020cd0:	469c      	mov	ip, r3
 8020cd2:	e788      	b.n	8020be6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8020cd4:	ebac 0308 	sub.w	r3, ip, r8
 8020cd8:	eb09 0508 	add.w	r5, r9, r8
 8020cdc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020ce0:	b29b      	uxth	r3, r3
 8020ce2:	b2ad      	uxth	r5, r5
 8020ce4:	f04f 0800 	mov.w	r8, #0
 8020ce8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020cea:	4282      	cmp	r2, r0
 8020cec:	d88a      	bhi.n	8020c04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8020cee:	460a      	mov	r2, r1
 8020cf0:	e745      	b.n	8020b7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8020cf2:	4594      	cmp	ip, r2
 8020cf4:	9d08      	ldr	r5, [sp, #32]
 8020cf6:	4686      	mov	lr, r0
 8020cf8:	bf27      	ittee	cs
 8020cfa:	ebac 0302 	subcs.w	r3, ip, r2
 8020cfe:	4616      	movcs	r6, r2
 8020d00:	eba2 010c 	subcc.w	r1, r2, ip
 8020d04:	4666      	movcc	r6, ip
 8020d06:	bf27      	ittee	cs
 8020d08:	b29b      	uxthcs	r3, r3
 8020d0a:	4641      	movcs	r1, r8
 8020d0c:	b289      	uxthcc	r1, r1
 8020d0e:	4643      	movcc	r3, r8
 8020d10:	2dff      	cmp	r5, #255	@ 0xff
 8020d12:	eb09 0506 	add.w	r5, r9, r6
 8020d16:	b2ad      	uxth	r5, r5
 8020d18:	d130      	bne.n	8020d7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8020d1a:	45a9      	cmp	r9, r5
 8020d1c:	f10e 0e03 	add.w	lr, lr, #3
 8020d20:	d17a      	bne.n	8020e18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8020d22:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020d26:	4594      	cmp	ip, r2
 8020d28:	4430      	add	r0, r6
 8020d2a:	d3db      	bcc.n	8020ce4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8020d2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020d2e:	9903      	ldr	r1, [sp, #12]
 8020d30:	8812      	ldrh	r2, [r2, #0]
 8020d32:	1a52      	subs	r2, r2, r1
 8020d34:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020d36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d3a:	4410      	add	r0, r2
 8020d3c:	9a07      	ldr	r2, [sp, #28]
 8020d3e:	3201      	adds	r2, #1
 8020d40:	428a      	cmp	r2, r1
 8020d42:	9207      	str	r2, [sp, #28]
 8020d44:	f040 8081 	bne.w	8020e4a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8020d48:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8020d4c:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8020d50:	9b03      	ldr	r3, [sp, #12]
 8020d52:	eba8 080c 	sub.w	r8, r8, ip
 8020d56:	fa1f f888 	uxth.w	r8, r8
 8020d5a:	f1b8 0f00 	cmp.w	r8, #0
 8020d5e:	bf08      	it	eq
 8020d60:	461a      	moveq	r2, r3
 8020d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d64:	bf18      	it	ne
 8020d66:	2200      	movne	r2, #0
 8020d68:	3301      	adds	r3, #1
 8020d6a:	b292      	uxth	r2, r2
 8020d6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d6e:	e6fd      	b.n	8020b6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8020d70:	240285b4 	.word	0x240285b4
 8020d74:	240285ae 	.word	0x240285ae
 8020d78:	fffff7fb 	.word	0xfffff7fb
 8020d7c:	45a9      	cmp	r9, r5
 8020d7e:	f10e 0e03 	add.w	lr, lr, #3
 8020d82:	d0ce      	beq.n	8020d22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8020d84:	f109 0701 	add.w	r7, r9, #1
 8020d88:	44a1      	add	r9, r4
 8020d8a:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8020d8e:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8020d92:	9713      	str	r7, [sp, #76]	@ 0x4c
 8020d94:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020d98:	9f05      	ldr	r7, [sp, #20]
 8020d9a:	eb07 0908 	add.w	r9, r7, r8
 8020d9e:	f817 8008 	ldrb.w	r8, [r7, r8]
 8020da2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8020da4:	fb1b fb07 	smulbb	fp, fp, r7
 8020da8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020daa:	fb08 b807 	mla	r8, r8, r7, fp
 8020dae:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8020db0:	fa1f f888 	uxth.w	r8, r8
 8020db4:	f108 0b01 	add.w	fp, r8, #1
 8020db8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020dbc:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8020dc0:	fb1b fb07 	smulbb	fp, fp, r7
 8020dc4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020dc8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020dca:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8020dce:	f899 8001 	ldrb.w	r8, [r9, #1]
 8020dd2:	fb08 b807 	mla	r8, r8, r7, fp
 8020dd6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8020dd8:	fa1f f888 	uxth.w	r8, r8
 8020ddc:	f108 0b01 	add.w	fp, r8, #1
 8020de0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020de4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020de8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8020dec:	f899 8002 	ldrb.w	r8, [r9, #2]
 8020df0:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8020df4:	fb19 f907 	smulbb	r9, r9, r7
 8020df8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020dfa:	fb08 9807 	mla	r8, r8, r7, r9
 8020dfe:	fa1f f888 	uxth.w	r8, r8
 8020e02:	f108 0901 	add.w	r9, r8, #1
 8020e06:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8020e0a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8020e0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020e12:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8020e16:	e7b1      	b.n	8020d7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8020e18:	f109 0b01 	add.w	fp, r9, #1
 8020e1c:	44a1      	add	r9, r4
 8020e1e:	9f05      	ldr	r7, [sp, #20]
 8020e20:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8020e24:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020e28:	eb07 0908 	add.w	r9, r7, r8
 8020e2c:	f817 8008 	ldrb.w	r8, [r7, r8]
 8020e30:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8020e34:	f899 8001 	ldrb.w	r8, [r9, #1]
 8020e38:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8020e3c:	f899 8002 	ldrb.w	r8, [r9, #2]
 8020e40:	fa1f f98b 	uxth.w	r9, fp
 8020e44:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8020e48:	e767      	b.n	8020d1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8020e4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020e4e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8020e52:	eba8 0801 	sub.w	r8, r8, r1
 8020e56:	fa1f f888 	uxth.w	r8, r8
 8020e5a:	f1b8 0f00 	cmp.w	r8, #0
 8020e5e:	bf18      	it	ne
 8020e60:	2100      	movne	r1, #0
 8020e62:	e741      	b.n	8020ce8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8020e64:	4b03      	ldr	r3, [pc, #12]	@ (8020e74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8020e66:	6818      	ldr	r0, [r3, #0]
 8020e68:	6803      	ldr	r3, [r0, #0]
 8020e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020e6c:	4798      	blx	r3
 8020e6e:	b01b      	add	sp, #108	@ 0x6c
 8020e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e74:	240285b4 	.word	0x240285b4

08020e78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e7c:	b09d      	sub	sp, #116	@ 0x74
 8020e7e:	461d      	mov	r5, r3
 8020e80:	4604      	mov	r4, r0
 8020e82:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020e84:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8020e88:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8020e8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8020e8e:	2a00      	cmp	r2, #0
 8020e90:	f000 81de 	beq.w	8021250 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8020e94:	6828      	ldr	r0, [r5, #0]
 8020e96:	aa18      	add	r2, sp, #96	@ 0x60
 8020e98:	6869      	ldr	r1, [r5, #4]
 8020e9a:	c203      	stmia	r2!, {r0, r1}
 8020e9c:	6818      	ldr	r0, [r3, #0]
 8020e9e:	aa1a      	add	r2, sp, #104	@ 0x68
 8020ea0:	6859      	ldr	r1, [r3, #4]
 8020ea2:	c203      	stmia	r2!, {r0, r1}
 8020ea4:	a818      	add	r0, sp, #96	@ 0x60
 8020ea6:	f7f9 fb45 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020eaa:	4629      	mov	r1, r5
 8020eac:	a81a      	add	r0, sp, #104	@ 0x68
 8020eae:	f7f9 fb85 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020eb2:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8020eb6:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8020eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020ebe:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8020ec2:	bfdb      	ittet	le
 8020ec4:	b29a      	uxthle	r2, r3
 8020ec6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8020eca:	2201      	movgt	r2, #1
 8020ecc:	fb91 f2f2 	sdivle	r2, r1, r2
 8020ed0:	9201      	str	r2, [sp, #4]
 8020ed2:	9801      	ldr	r0, [sp, #4]
 8020ed4:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8020ed8:	9901      	ldr	r1, [sp, #4]
 8020eda:	fb92 f0f0 	sdiv	r0, r2, r0
 8020ede:	b280      	uxth	r0, r0
 8020ee0:	440f      	add	r7, r1
 8020ee2:	900d      	str	r0, [sp, #52]	@ 0x34
 8020ee4:	3f01      	subs	r7, #1
 8020ee6:	9801      	ldr	r0, [sp, #4]
 8020ee8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8020eea:	fb05 2510 	mls	r5, r5, r0, r2
 8020eee:	fb97 f7f1 	sdiv	r7, r7, r1
 8020ef2:	fb15 f503 	smulbb	r5, r5, r3
 8020ef6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8020efa:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8020efe:	3701      	adds	r7, #1
 8020f00:	440d      	add	r5, r1
 8020f02:	4419      	add	r1, r3
 8020f04:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8020f08:	b2bf      	uxth	r7, r7
 8020f0a:	441a      	add	r2, r3
 8020f0c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8020f10:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8020f14:	00bf      	lsls	r7, r7, #2
 8020f16:	9304      	str	r3, [sp, #16]
 8020f18:	b2ad      	uxth	r5, r5
 8020f1a:	4bb0      	ldr	r3, [pc, #704]	@ (80211dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8020f1c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8020f20:	6818      	ldr	r0, [r3, #0]
 8020f22:	6803      	ldr	r3, [r0, #0]
 8020f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020f26:	4798      	blx	r3
 8020f28:	4bad      	ldr	r3, [pc, #692]	@ (80211e0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8020f2a:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8020f2e:	2d00      	cmp	r5, #0
 8020f30:	881a      	ldrh	r2, [r3, #0]
 8020f32:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8020f36:	fb02 f606 	mul.w	r6, r2, r6
 8020f3a:	fb02 c101 	mla	r1, r2, r1, ip
 8020f3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020f42:	9316      	str	r3, [sp, #88]	@ 0x58
 8020f44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020f48:	4ba6      	ldr	r3, [pc, #664]	@ (80211e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8020f4a:	eb00 0801 	add.w	r8, r0, r1
 8020f4e:	bf18      	it	ne
 8020f50:	2100      	movne	r1, #0
 8020f52:	eba3 0304 	sub.w	r3, r3, r4
 8020f56:	eb08 0206 	add.w	r2, r8, r6
 8020f5a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020f5c:	9208      	str	r2, [sp, #32]
 8020f5e:	f107 0204 	add.w	r2, r7, #4
 8020f62:	9211      	str	r2, [sp, #68]	@ 0x44
 8020f64:	9a04      	ldr	r2, [sp, #16]
 8020f66:	bf08      	it	eq
 8020f68:	4611      	moveq	r1, r2
 8020f6a:	2200      	movs	r2, #0
 8020f6c:	b289      	uxth	r1, r1
 8020f6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020f70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020f74:	fa12 f383 	uxtah	r3, r2, r3
 8020f78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020f7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020f7e:	3304      	adds	r3, #4
 8020f80:	9306      	str	r3, [sp, #24]
 8020f82:	9b08      	ldr	r3, [sp, #32]
 8020f84:	4543      	cmp	r3, r8
 8020f86:	f240 815e 	bls.w	8021246 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8020f8a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8020f8e:	f04f 0b01 	mov.w	fp, #1
 8020f92:	9a01      	ldr	r2, [sp, #4]
 8020f94:	9806      	ldr	r0, [sp, #24]
 8020f96:	465e      	mov	r6, fp
 8020f98:	f8cd b008 	str.w	fp, [sp, #8]
 8020f9c:	7800      	ldrb	r0, [r0, #0]
 8020f9e:	fbb5 f3f3 	udiv	r3, r5, r3
 8020fa2:	1ad3      	subs	r3, r2, r3
 8020fa4:	900e      	str	r0, [sp, #56]	@ 0x38
 8020fa6:	3001      	adds	r0, #1
 8020fa8:	b29b      	uxth	r3, r3
 8020faa:	9005      	str	r0, [sp, #20]
 8020fac:	9312      	str	r3, [sp, #72]	@ 0x48
 8020fae:	9b06      	ldr	r3, [sp, #24]
 8020fb0:	785a      	ldrb	r2, [r3, #1]
 8020fb2:	789b      	ldrb	r3, [r3, #2]
 8020fb4:	021b      	lsls	r3, r3, #8
 8020fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020fba:	9a06      	ldr	r2, [sp, #24]
 8020fbc:	78d2      	ldrb	r2, [r2, #3]
 8020fbe:	4313      	orrs	r3, r2
 8020fc0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020fc2:	441a      	add	r2, r3
 8020fc4:	1c50      	adds	r0, r2, #1
 8020fc6:	7852      	ldrb	r2, [r2, #1]
 8020fc8:	9003      	str	r0, [sp, #12]
 8020fca:	0212      	lsls	r2, r2, #8
 8020fcc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020fce:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020fd2:	5cc3      	ldrb	r3, [r0, r3]
 8020fd4:	431a      	orrs	r2, r3
 8020fd6:	b293      	uxth	r3, r2
 8020fd8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8020fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8020fde:	2300      	movs	r3, #0
 8020fe0:	461a      	mov	r2, r3
 8020fe2:	9307      	str	r3, [sp, #28]
 8020fe4:	2d00      	cmp	r5, #0
 8020fe6:	d07c      	beq.n	80210e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8020fe8:	42ae      	cmp	r6, r5
 8020fea:	d26c      	bcs.n	80210c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8020fec:	9b08      	ldr	r3, [sp, #32]
 8020fee:	1bad      	subs	r5, r5, r6
 8020ff0:	4608      	mov	r0, r1
 8020ff2:	4543      	cmp	r3, r8
 8020ff4:	b2ad      	uxth	r5, r5
 8020ff6:	d802      	bhi.n	8020ffe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8020ff8:	e071      	b.n	80210de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d15d      	bne.n	80210ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8020ffe:	9b03      	ldr	r3, [sp, #12]
 8021000:	9a02      	ldr	r2, [sp, #8]
 8021002:	785b      	ldrb	r3, [r3, #1]
 8021004:	f1c2 0207 	rsb	r2, r2, #7
 8021008:	9902      	ldr	r1, [sp, #8]
 802100a:	4093      	lsls	r3, r2
 802100c:	005b      	lsls	r3, r3, #1
 802100e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021012:	9b03      	ldr	r3, [sp, #12]
 8021014:	781b      	ldrb	r3, [r3, #0]
 8021016:	410b      	asrs	r3, r1
 8021018:	3101      	adds	r1, #1
 802101a:	b2c9      	uxtb	r1, r1
 802101c:	b2db      	uxtb	r3, r3
 802101e:	2908      	cmp	r1, #8
 8021020:	9102      	str	r1, [sp, #8]
 8021022:	9903      	ldr	r1, [sp, #12]
 8021024:	ea43 0302 	orr.w	r3, r3, r2
 8021028:	bf0c      	ite	eq
 802102a:	3102      	addeq	r1, #2
 802102c:	3101      	addne	r1, #1
 802102e:	b29a      	uxth	r2, r3
 8021030:	bf05      	ittet	eq
 8021032:	9103      	streq	r1, [sp, #12]
 8021034:	2100      	moveq	r1, #0
 8021036:	9103      	strne	r1, [sp, #12]
 8021038:	9102      	streq	r1, [sp, #8]
 802103a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802103c:	4291      	cmp	r1, r2
 802103e:	d30a      	bcc.n	8021056 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8021040:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8021044:	2301      	movs	r3, #1
 8021046:	9905      	ldr	r1, [sp, #20]
 8021048:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802104c:	d30f      	bcc.n	802106e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 802104e:	469b      	mov	fp, r3
 8021050:	f04f 0c00 	mov.w	ip, #0
 8021054:	e032      	b.n	80210bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8021056:	9b05      	ldr	r3, [sp, #20]
 8021058:	429a      	cmp	r2, r3
 802105a:	d318      	bcc.n	802108e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 802105c:	eb04 030b 	add.w	r3, r4, fp
 8021060:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8021064:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8021068:	f10b 0301 	add.w	r3, fp, #1
 802106c:	b29b      	uxth	r3, r3
 802106e:	9905      	ldr	r1, [sp, #20]
 8021070:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8021074:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8021078:	710e      	strb	r6, [r1, #4]
 802107a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802107c:	80ce      	strh	r6, [r1, #6]
 802107e:	f10b 0601 	add.w	r6, fp, #1
 8021082:	714e      	strb	r6, [r1, #5]
 8021084:	9905      	ldr	r1, [sp, #20]
 8021086:	3101      	adds	r1, #1
 8021088:	b289      	uxth	r1, r1
 802108a:	9105      	str	r1, [sp, #20]
 802108c:	e7df      	b.n	802104e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802108e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021092:	4611      	mov	r1, r2
 8021094:	795b      	ldrb	r3, [r3, #5]
 8021096:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 802109a:	4426      	add	r6, r4
 802109c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 802109e:	4437      	add	r7, r6
 80210a0:	2f00      	cmp	r7, #0
 80210a2:	dd06      	ble.n	80210b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 80210a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80210a8:	790f      	ldrb	r7, [r1, #4]
 80210aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80210ae:	88c9      	ldrh	r1, [r1, #6]
 80210b0:	e7f4      	b.n	802109c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 80210b2:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80210b6:	b29b      	uxth	r3, r3
 80210b8:	e7c5      	b.n	8021046 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 80210ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80210bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80210be:	4601      	mov	r1, r0
 80210c0:	4662      	mov	r2, ip
 80210c2:	461e      	mov	r6, r3
 80210c4:	e78e      	b.n	8020fe4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 80210c6:	1b73      	subs	r3, r6, r5
 80210c8:	eb02 0c05 	add.w	ip, r2, r5
 80210cc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80210d0:	b29b      	uxth	r3, r3
 80210d2:	fa1f fc8c 	uxth.w	ip, ip
 80210d6:	2500      	movs	r5, #0
 80210d8:	9a08      	ldr	r2, [sp, #32]
 80210da:	4542      	cmp	r2, r8
 80210dc:	d88d      	bhi.n	8020ffa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 80210de:	4601      	mov	r1, r0
 80210e0:	e74f      	b.n	8020f82 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 80210e2:	428e      	cmp	r6, r1
 80210e4:	bf2b      	itete	cs
 80210e6:	468e      	movcs	lr, r1
 80210e8:	46b6      	movcc	lr, r6
 80210ea:	1a73      	subcs	r3, r6, r1
 80210ec:	1b88      	subcc	r0, r1, r6
 80210ee:	eb02 0c0e 	add.w	ip, r2, lr
 80210f2:	bf2b      	itete	cs
 80210f4:	4628      	movcs	r0, r5
 80210f6:	462b      	movcc	r3, r5
 80210f8:	b29b      	uxthcs	r3, r3
 80210fa:	b280      	uxthcc	r0, r0
 80210fc:	f108 0503 	add.w	r5, r8, #3
 8021100:	fa1f fc8c 	uxth.w	ip, ip
 8021104:	4562      	cmp	r2, ip
 8021106:	d06f      	beq.n	80211e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8021108:	1c57      	adds	r7, r2, #1
 802110a:	4422      	add	r2, r4
 802110c:	b2bf      	uxth	r7, r7
 802110e:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8021112:	9713      	str	r7, [sp, #76]	@ 0x4c
 8021114:	2704      	movs	r7, #4
 8021116:	46b9      	mov	r9, r7
 8021118:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 802111a:	fb19 7202 	smlabb	r2, r9, r2, r7
 802111e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021120:	58bf      	ldr	r7, [r7, r2]
 8021122:	0e3a      	lsrs	r2, r7, #24
 8021124:	9209      	str	r2, [sp, #36]	@ 0x24
 8021126:	d016      	beq.n	8021156 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8021128:	f3c7 2907 	ubfx	r9, r7, #8, #8
 802112c:	fa5f fa87 	uxtb.w	sl, r7
 8021130:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8021134:	fa5f f289 	uxtb.w	r2, r9
 8021138:	9214      	str	r2, [sp, #80]	@ 0x50
 802113a:	b2fa      	uxtb	r2, r7
 802113c:	9215      	str	r2, [sp, #84]	@ 0x54
 802113e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021140:	2aff      	cmp	r2, #255	@ 0xff
 8021142:	d10b      	bne.n	802115c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8021144:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021146:	2aff      	cmp	r2, #255	@ 0xff
 8021148:	d108      	bne.n	802115c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 802114a:	f805 ac03 	strb.w	sl, [r5, #-3]
 802114e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8021152:	f805 7c01 	strb.w	r7, [r5, #-1]
 8021156:	3503      	adds	r5, #3
 8021158:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802115a:	e7d3      	b.n	8021104 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 802115c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802115e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021160:	437a      	muls	r2, r7
 8021162:	1c57      	adds	r7, r2, #1
 8021164:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8021168:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 802116c:	1212      	asrs	r2, r2, #8
 802116e:	fa1f f982 	uxth.w	r9, r2
 8021172:	43d2      	mvns	r2, r2
 8021174:	fb1a fa09 	smulbb	sl, sl, r9
 8021178:	b2d2      	uxtb	r2, r2
 802117a:	fb07 a702 	mla	r7, r7, r2, sl
 802117e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021180:	b2bf      	uxth	r7, r7
 8021182:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021184:	f107 0a01 	add.w	sl, r7, #1
 8021188:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 802118c:	fb12 fa09 	smulbb	sl, r2, r9
 8021190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021192:	123f      	asrs	r7, r7, #8
 8021194:	f805 7c03 	strb.w	r7, [r5, #-3]
 8021198:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 802119c:	fb07 aa02 	mla	sl, r7, r2, sl
 80211a0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80211a2:	fb12 f909 	smulbb	r9, r2, r9
 80211a6:	fa1f fa8a 	uxth.w	sl, sl
 80211aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80211ac:	f10a 0701 	add.w	r7, sl, #1
 80211b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80211b4:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 80211b8:	fb07 9902 	mla	r9, r7, r2, r9
 80211bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80211c0:	fa1f f989 	uxth.w	r9, r9
 80211c4:	f805 ac02 	strb.w	sl, [r5, #-2]
 80211c8:	f109 0201 	add.w	r2, r9, #1
 80211cc:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80211d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80211d4:	f805 9c01 	strb.w	r9, [r5, #-1]
 80211d8:	e7bd      	b.n	8021156 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80211da:	bf00      	nop
 80211dc:	240285b4 	.word	0x240285b4
 80211e0:	240285ae 	.word	0x240285ae
 80211e4:	fffff7fb 	.word	0xfffff7fb
 80211e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80211ec:	428e      	cmp	r6, r1
 80211ee:	44f0      	add	r8, lr
 80211f0:	f4ff af71 	bcc.w	80210d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80211f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80211f6:	9904      	ldr	r1, [sp, #16]
 80211f8:	8812      	ldrh	r2, [r2, #0]
 80211fa:	1a52      	subs	r2, r2, r1
 80211fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80211fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021202:	4490      	add	r8, r2
 8021204:	9a07      	ldr	r2, [sp, #28]
 8021206:	3201      	adds	r2, #1
 8021208:	428a      	cmp	r2, r1
 802120a:	9207      	str	r2, [sp, #28]
 802120c:	d111      	bne.n	8021232 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 802120e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8021212:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 8021216:	9b04      	ldr	r3, [sp, #16]
 8021218:	eba5 050c 	sub.w	r5, r5, ip
 802121c:	b2ad      	uxth	r5, r5
 802121e:	2d00      	cmp	r5, #0
 8021220:	bf08      	it	eq
 8021222:	4619      	moveq	r1, r3
 8021224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021226:	bf18      	it	ne
 8021228:	2100      	movne	r1, #0
 802122a:	3301      	adds	r3, #1
 802122c:	b289      	uxth	r1, r1
 802122e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021230:	e69e      	b.n	8020f70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8021232:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021236:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 802123a:	1a2d      	subs	r5, r5, r0
 802123c:	b2ad      	uxth	r5, r5
 802123e:	2d00      	cmp	r5, #0
 8021240:	bf18      	it	ne
 8021242:	2000      	movne	r0, #0
 8021244:	e748      	b.n	80210d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8021246:	4b04      	ldr	r3, [pc, #16]	@ (8021258 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8021248:	6818      	ldr	r0, [r3, #0]
 802124a:	6803      	ldr	r3, [r0, #0]
 802124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802124e:	4798      	blx	r3
 8021250:	b01d      	add	sp, #116	@ 0x74
 8021252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021256:	bf00      	nop
 8021258:	240285b4 	.word	0x240285b4

0802125c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 802125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021260:	b08f      	sub	sp, #60	@ 0x3c
 8021262:	4616      	mov	r6, r2
 8021264:	4681      	mov	r9, r0
 8021266:	460d      	mov	r5, r1
 8021268:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 802126c:	9205      	str	r2, [sp, #20]
 802126e:	2a00      	cmp	r2, #0
 8021270:	f000 82a8 	beq.w	80217c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8021274:	6830      	ldr	r0, [r6, #0]
 8021276:	ac0a      	add	r4, sp, #40	@ 0x28
 8021278:	6871      	ldr	r1, [r6, #4]
 802127a:	c403      	stmia	r4!, {r0, r1}
 802127c:	6818      	ldr	r0, [r3, #0]
 802127e:	ac0c      	add	r4, sp, #48	@ 0x30
 8021280:	6859      	ldr	r1, [r3, #4]
 8021282:	c403      	stmia	r4!, {r0, r1}
 8021284:	a80a      	add	r0, sp, #40	@ 0x28
 8021286:	f7f9 f955 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802128a:	4631      	mov	r1, r6
 802128c:	a80c      	add	r0, sp, #48	@ 0x30
 802128e:	f7f9 f995 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021292:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8021296:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 802129a:	bfdb      	ittet	le
 802129c:	b293      	uxthle	r3, r2
 802129e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80212a2:	2301      	movgt	r3, #1
 80212a4:	fb91 f3f3 	sdivle	r3, r1, r3
 80212a8:	9300      	str	r3, [sp, #0]
 80212aa:	f105 0308 	add.w	r3, r5, #8
 80212ae:	9900      	ldr	r1, [sp, #0]
 80212b0:	9306      	str	r3, [sp, #24]
 80212b2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80212b6:	440b      	add	r3, r1
 80212b8:	3b01      	subs	r3, #1
 80212ba:	fb93 f3f1 	sdiv	r3, r3, r1
 80212be:	3b01      	subs	r3, #1
 80212c0:	9906      	ldr	r1, [sp, #24]
 80212c2:	b29b      	uxth	r3, r3
 80212c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80212c8:	9900      	ldr	r1, [sp, #0]
 80212ca:	9307      	str	r3, [sp, #28]
 80212cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80212d0:	fb93 f0f1 	sdiv	r0, r3, r1
 80212d4:	b284      	uxth	r4, r0
 80212d6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80212da:	b280      	uxth	r0, r0
 80212dc:	9402      	str	r4, [sp, #8]
 80212de:	9d02      	ldr	r5, [sp, #8]
 80212e0:	9c00      	ldr	r4, [sp, #0]
 80212e2:	fb05 3514 	mls	r5, r5, r4, r3
 80212e6:	fb15 f502 	smulbb	r5, r5, r2
 80212ea:	440d      	add	r5, r1
 80212ec:	b2ad      	uxth	r5, r5
 80212ee:	2800      	cmp	r0, #0
 80212f0:	d071      	beq.n	80213d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 80212f2:	1e42      	subs	r2, r0, #1
 80212f4:	9806      	ldr	r0, [sp, #24]
 80212f6:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 80212fa:	9a07      	ldr	r2, [sp, #28]
 80212fc:	fa98 f888 	rev.w	r8, r8
 8021300:	4490      	add	r8, r2
 8021302:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8021306:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 802130a:	4411      	add	r1, r2
 802130c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021310:	f8df b348 	ldr.w	fp, [pc, #840]	@ 802165c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8021314:	4413      	add	r3, r2
 8021316:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 802131a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 802131e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8021322:	9301      	str	r3, [sp, #4]
 8021324:	4bcb      	ldr	r3, [pc, #812]	@ (8021654 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 8021326:	6818      	ldr	r0, [r3, #0]
 8021328:	6803      	ldr	r3, [r0, #0]
 802132a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802132c:	4798      	blx	r3
 802132e:	4bca      	ldr	r3, [pc, #808]	@ (8021658 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 8021330:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8021334:	881b      	ldrh	r3, [r3, #0]
 8021336:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 802133a:	fb03 2707 	mla	r7, r3, r7, r2
 802133e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021342:	4363      	muls	r3, r4
 8021344:	2400      	movs	r4, #0
 8021346:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802134a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802134e:	4621      	mov	r1, r4
 8021350:	4407      	add	r7, r0
 8021352:	18fb      	adds	r3, r7, r3
 8021354:	9309      	str	r3, [sp, #36]	@ 0x24
 8021356:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802135a:	fb95 f3f3 	sdiv	r3, r5, r3
 802135e:	9304      	str	r3, [sp, #16]
 8021360:	f109 0304 	add.w	r3, r9, #4
 8021364:	4618      	mov	r0, r3
 8021366:	9308      	str	r3, [sp, #32]
 8021368:	f008 fd42 	bl	8029df0 <memset>
 802136c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802136e:	42bb      	cmp	r3, r7
 8021370:	f240 8223 	bls.w	80217ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8021374:	2003      	movs	r0, #3
 8021376:	f04f 0c07 	mov.w	ip, #7
 802137a:	f04f 0e0b 	mov.w	lr, #11
 802137e:	2d00      	cmp	r5, #0
 8021380:	f000 813c 	beq.w	80215fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8021384:	f898 3000 	ldrb.w	r3, [r8]
 8021388:	b2db      	uxtb	r3, r3
 802138a:	2bfe      	cmp	r3, #254	@ 0xfe
 802138c:	d126      	bne.n	80213dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 802138e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021392:	f108 0604 	add.w	r6, r8, #4
 8021396:	f898 2002 	ldrb.w	r2, [r8, #2]
 802139a:	3d01      	subs	r5, #1
 802139c:	b2c9      	uxtb	r1, r1
 802139e:	f898 8003 	ldrb.w	r8, [r8, #3]
 80213a2:	b2d2      	uxtb	r2, r2
 80213a4:	f361 0407 	bfi	r4, r1, #0, #8
 80213a8:	fa5f f888 	uxtb.w	r8, r8
 80213ac:	b2ad      	uxth	r5, r5
 80213ae:	f362 240f 	bfi	r4, r2, #8, #8
 80213b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80213b6:	fb10 2208 	smlabb	r2, r0, r8, r2
 80213ba:	f368 4417 	bfi	r4, r8, #16, #8
 80213be:	fb1c 2201 	smlabb	r2, ip, r1, r2
 80213c2:	0e23      	lsrs	r3, r4, #24
 80213c4:	fb1e 2303 	smlabb	r3, lr, r3, r2
 80213c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80213cc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80213d0:	605c      	str	r4, [r3, #4]
 80213d2:	46b0      	mov	r8, r6
 80213d4:	e7d3      	b.n	802137e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 80213d6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80213da:	e792      	b.n	8021302 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 80213dc:	2bff      	cmp	r3, #255	@ 0xff
 80213de:	d127      	bne.n	8021430 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 80213e0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80213e4:	f108 0605 	add.w	r6, r8, #5
 80213e8:	f898 3002 	ldrb.w	r3, [r8, #2]
 80213ec:	3d01      	subs	r5, #1
 80213ee:	b2d2      	uxtb	r2, r2
 80213f0:	f898 1003 	ldrb.w	r1, [r8, #3]
 80213f4:	b2db      	uxtb	r3, r3
 80213f6:	f898 8004 	ldrb.w	r8, [r8, #4]
 80213fa:	f362 0407 	bfi	r4, r2, #0, #8
 80213fe:	b2c9      	uxtb	r1, r1
 8021400:	fa5f f888 	uxtb.w	r8, r8
 8021404:	f363 240f 	bfi	r4, r3, #8, #8
 8021408:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802140c:	b2ad      	uxth	r5, r5
 802140e:	fb10 3301 	smlabb	r3, r0, r1, r3
 8021412:	f361 4417 	bfi	r4, r1, #16, #8
 8021416:	fb1c 3302 	smlabb	r3, ip, r2, r3
 802141a:	f368 641f 	bfi	r4, r8, #24, #8
 802141e:	fb1e 3808 	smlabb	r8, lr, r8, r3
 8021422:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8021426:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 802142a:	f8c8 4004 	str.w	r4, [r8, #4]
 802142e:	e7d0      	b.n	80213d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021430:	119a      	asrs	r2, r3, #6
 8021432:	f108 0601 	add.w	r6, r8, #1
 8021436:	d107      	bne.n	8021448 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8021438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802143c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021440:	685c      	ldr	r4, [r3, #4]
 8021442:	3d01      	subs	r5, #1
 8021444:	b2ad      	uxth	r5, r5
 8021446:	e7c4      	b.n	80213d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8021448:	2a01      	cmp	r2, #1
 802144a:	d129      	bne.n	80214a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 802144c:	f003 0203 	and.w	r2, r3, #3
 8021450:	1ea1      	subs	r1, r4, #2
 8021452:	4411      	add	r1, r2
 8021454:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8021458:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802145c:	b2c9      	uxtb	r1, r1
 802145e:	3a02      	subs	r2, #2
 8021460:	3b02      	subs	r3, #2
 8021462:	f361 0407 	bfi	r4, r1, #0, #8
 8021466:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802146a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802146e:	f362 240f 	bfi	r4, r2, #8, #8
 8021472:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021476:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802147a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 802147e:	fb10 2203 	smlabb	r2, r0, r3, r2
 8021482:	f363 4417 	bfi	r4, r3, #16, #8
 8021486:	fb1c 2201 	smlabb	r2, ip, r1, r2
 802148a:	ea4f 6814 	mov.w	r8, r4, lsr #24
 802148e:	fb1e 2808 	smlabb	r8, lr, r8, r2
 8021492:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8021496:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 802149a:	f8c8 4004 	str.w	r4, [r8, #4]
 802149e:	e7d0      	b.n	8021442 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80214a0:	2a02      	cmp	r2, #2
 80214a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80214a6:	d12e      	bne.n	8021506 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 80214a8:	f898 2001 	ldrb.w	r2, [r8, #1]
 80214ac:	f1a3 0a20 	sub.w	sl, r3, #32
 80214b0:	f108 0602 	add.w	r6, r8, #2
 80214b4:	b2d2      	uxtb	r2, r2
 80214b6:	f002 010f 	and.w	r1, r2, #15
 80214ba:	1112      	asrs	r2, r2, #4
 80214bc:	3908      	subs	r1, #8
 80214be:	3a08      	subs	r2, #8
 80214c0:	4451      	add	r1, sl
 80214c2:	4492      	add	sl, r2
 80214c4:	4421      	add	r1, r4
 80214c6:	b2c9      	uxtb	r1, r1
 80214c8:	f361 0407 	bfi	r4, r1, #0, #8
 80214cc:	f3c4 2807 	ubfx	r8, r4, #8, #8
 80214d0:	f1a8 0820 	sub.w	r8, r8, #32
 80214d4:	4443      	add	r3, r8
 80214d6:	b2db      	uxtb	r3, r3
 80214d8:	f363 240f 	bfi	r4, r3, #8, #8
 80214dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80214e0:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 80214e4:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 80214e8:	fb10 330a 	smlabb	r3, r0, sl, r3
 80214ec:	f36a 4417 	bfi	r4, sl, #16, #8
 80214f0:	fb1c 3301 	smlabb	r3, ip, r1, r3
 80214f4:	0e22      	lsrs	r2, r4, #24
 80214f6:	fb1e 3202 	smlabb	r2, lr, r2, r3
 80214fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80214fe:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8021502:	6054      	str	r4, [r2, #4]
 8021504:	e79d      	b.n	8021442 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8021506:	3301      	adds	r3, #1
 8021508:	42ab      	cmp	r3, r5
 802150a:	dd59      	ble.n	80215c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 802150c:	1b5d      	subs	r5, r3, r5
 802150e:	2d00      	cmp	r5, #0
 8021510:	dc58      	bgt.n	80215c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 8021512:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021516:	f04f 0800 	mov.w	r8, #0
 802151a:	f1ba 0f00 	cmp.w	sl, #0
 802151e:	f340 8108 	ble.w	8021732 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 8021522:	1c73      	adds	r3, r6, #1
 8021524:	9303      	str	r3, [sp, #12]
 8021526:	7833      	ldrb	r3, [r6, #0]
 8021528:	b2db      	uxtb	r3, r3
 802152a:	2bfe      	cmp	r3, #254	@ 0xfe
 802152c:	d16a      	bne.n	8021604 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 802152e:	7871      	ldrb	r1, [r6, #1]
 8021530:	1d33      	adds	r3, r6, #4
 8021532:	78b2      	ldrb	r2, [r6, #2]
 8021534:	b2c9      	uxtb	r1, r1
 8021536:	78f0      	ldrb	r0, [r6, #3]
 8021538:	b2d2      	uxtb	r2, r2
 802153a:	9303      	str	r3, [sp, #12]
 802153c:	f361 0407 	bfi	r4, r1, #0, #8
 8021540:	b2c0      	uxtb	r0, r0
 8021542:	2303      	movs	r3, #3
 8021544:	f362 240f 	bfi	r4, r2, #8, #8
 8021548:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802154c:	fb13 2200 	smlabb	r2, r3, r0, r2
 8021550:	f360 4417 	bfi	r4, r0, #16, #8
 8021554:	2307      	movs	r3, #7
 8021556:	0e25      	lsrs	r5, r4, #24
 8021558:	fb13 2101 	smlabb	r1, r3, r1, r2
 802155c:	230b      	movs	r3, #11
 802155e:	fb13 1305 	smlabb	r3, r3, r5, r1
 8021562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021566:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 802156a:	605c      	str	r4, [r3, #4]
 802156c:	2501      	movs	r5, #1
 802156e:	462e      	mov	r6, r5
 8021570:	eb06 0308 	add.w	r3, r6, r8
 8021574:	ebaa 0a06 	sub.w	sl, sl, r6
 8021578:	1bad      	subs	r5, r5, r6
 802157a:	2b40      	cmp	r3, #64	@ 0x40
 802157c:	dd16      	ble.n	80215ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 802157e:	4658      	mov	r0, fp
 8021580:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021584:	f7e1 fe8c 	bl	80032a0 <_ZN8touchgfx5paint9flushLineEPmi>
 8021588:	4659      	mov	r1, fp
 802158a:	9b05      	ldr	r3, [sp, #20]
 802158c:	4642      	mov	r2, r8
 802158e:	4638      	mov	r0, r7
 8021590:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021594:	f7e1 feec 	bl	8003370 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8021598:	4b30      	ldr	r3, [pc, #192]	@ (802165c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 802159a:	4447      	add	r7, r8
 802159c:	f04f 0800 	mov.w	r8, #0
 80215a0:	459b      	cmp	fp, r3
 80215a2:	bf0c      	ite	eq
 80215a4:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8021660 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 80215a8:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 802165c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80215ac:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 80215b0:	4633      	mov	r3, r6
 80215b2:	3b01      	subs	r3, #1
 80215b4:	f842 4b04 	str.w	r4, [r2], #4
 80215b8:	d1fb      	bne.n	80215b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 80215ba:	44b0      	add	r8, r6
 80215bc:	9e03      	ldr	r6, [sp, #12]
 80215be:	e7ac      	b.n	802151a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 80215c0:	1aed      	subs	r5, r5, r3
 80215c2:	e73f      	b.n	8021444 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 80215c4:	9b01      	ldr	r3, [sp, #4]
 80215c6:	42ab      	cmp	r3, r5
 80215c8:	bfa8      	it	ge
 80215ca:	462b      	movge	r3, r5
 80215cc:	4698      	mov	r8, r3
 80215ce:	9b01      	ldr	r3, [sp, #4]
 80215d0:	eba3 0a08 	sub.w	sl, r3, r8
 80215d4:	0e23      	lsrs	r3, r4, #24
 80215d6:	eba5 0508 	sub.w	r5, r5, r8
 80215da:	d00b      	beq.n	80215f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 80215dc:	9a05      	ldr	r2, [sp, #20]
 80215de:	4641      	mov	r1, r8
 80215e0:	4638      	mov	r0, r7
 80215e2:	4353      	muls	r3, r2
 80215e4:	1c5a      	adds	r2, r3, #1
 80215e6:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80215ea:	4622      	mov	r2, r4
 80215ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215f0:	f7e1 fe70 	bl	80032d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 80215f4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80215f8:	4447      	add	r7, r8
 80215fa:	e78c      	b.n	8021516 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80215fc:	f8dd a004 	ldr.w	sl, [sp, #4]
 8021600:	4646      	mov	r6, r8
 8021602:	e788      	b.n	8021516 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 8021604:	2bff      	cmp	r3, #255	@ 0xff
 8021606:	d11d      	bne.n	8021644 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8021608:	7870      	ldrb	r0, [r6, #1]
 802160a:	1d73      	adds	r3, r6, #5
 802160c:	78b2      	ldrb	r2, [r6, #2]
 802160e:	b2c0      	uxtb	r0, r0
 8021610:	78f5      	ldrb	r5, [r6, #3]
 8021612:	b2d2      	uxtb	r2, r2
 8021614:	9303      	str	r3, [sp, #12]
 8021616:	f360 0407 	bfi	r4, r0, #0, #8
 802161a:	7933      	ldrb	r3, [r6, #4]
 802161c:	b2ed      	uxtb	r5, r5
 802161e:	b2d9      	uxtb	r1, r3
 8021620:	f362 240f 	bfi	r4, r2, #8, #8
 8021624:	2303      	movs	r3, #3
 8021626:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802162a:	f365 4417 	bfi	r4, r5, #16, #8
 802162e:	fb13 2205 	smlabb	r2, r3, r5, r2
 8021632:	2307      	movs	r3, #7
 8021634:	f361 641f 	bfi	r4, r1, #24, #8
 8021638:	fb13 2000 	smlabb	r0, r3, r0, r2
 802163c:	230b      	movs	r3, #11
 802163e:	fb13 0301 	smlabb	r3, r3, r1, r0
 8021642:	e78e      	b.n	8021562 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8021644:	119d      	asrs	r5, r3, #6
 8021646:	d10d      	bne.n	8021664 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8021648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802164c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8021650:	685c      	ldr	r4, [r3, #4]
 8021652:	e78b      	b.n	802156c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8021654:	240285b4 	.word	0x240285b4
 8021658:	240285ae 	.word	0x240285ae
 802165c:	24000140 	.word	0x24000140
 8021660:	24000240 	.word	0x24000240
 8021664:	2d01      	cmp	r5, #1
 8021666:	d12a      	bne.n	80216be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 8021668:	f003 0203 	and.w	r2, r3, #3
 802166c:	1ea1      	subs	r1, r4, #2
 802166e:	2603      	movs	r6, #3
 8021670:	4411      	add	r1, r2
 8021672:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8021676:	f3c3 1301 	ubfx	r3, r3, #4, #2
 802167a:	b2c9      	uxtb	r1, r1
 802167c:	3a02      	subs	r2, #2
 802167e:	3b02      	subs	r3, #2
 8021680:	f361 0407 	bfi	r4, r1, #0, #8
 8021684:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021688:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 802168c:	f362 240f 	bfi	r4, r2, #8, #8
 8021690:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021694:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8021698:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 802169c:	fb16 2203 	smlabb	r2, r6, r3, r2
 80216a0:	f363 4417 	bfi	r4, r3, #16, #8
 80216a4:	2307      	movs	r3, #7
 80216a6:	0e20      	lsrs	r0, r4, #24
 80216a8:	fb13 2101 	smlabb	r1, r3, r1, r2
 80216ac:	230b      	movs	r3, #11
 80216ae:	fb13 1300 	smlabb	r3, r3, r0, r1
 80216b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80216b6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80216ba:	605c      	str	r4, [r3, #4]
 80216bc:	e757      	b.n	802156e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 80216be:	2d02      	cmp	r5, #2
 80216c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80216c4:	d12f      	bne.n	8021726 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 80216c6:	1cb2      	adds	r2, r6, #2
 80216c8:	f1a3 0020 	sub.w	r0, r3, #32
 80216cc:	9203      	str	r2, [sp, #12]
 80216ce:	7872      	ldrb	r2, [r6, #1]
 80216d0:	b2d2      	uxtb	r2, r2
 80216d2:	f002 010f 	and.w	r1, r2, #15
 80216d6:	1112      	asrs	r2, r2, #4
 80216d8:	3908      	subs	r1, #8
 80216da:	3a08      	subs	r2, #8
 80216dc:	4401      	add	r1, r0
 80216de:	4402      	add	r2, r0
 80216e0:	4421      	add	r1, r4
 80216e2:	b2c9      	uxtb	r1, r1
 80216e4:	f361 0407 	bfi	r4, r1, #0, #8
 80216e8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80216ec:	3d20      	subs	r5, #32
 80216ee:	442b      	add	r3, r5
 80216f0:	2503      	movs	r5, #3
 80216f2:	b2db      	uxtb	r3, r3
 80216f4:	f363 240f 	bfi	r4, r3, #8, #8
 80216f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80216fc:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 8021700:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8021704:	fb15 3302 	smlabb	r3, r5, r2, r3
 8021708:	f362 4417 	bfi	r4, r2, #16, #8
 802170c:	2207      	movs	r2, #7
 802170e:	0e20      	lsrs	r0, r4, #24
 8021710:	fb12 3201 	smlabb	r2, r2, r1, r3
 8021714:	210b      	movs	r1, #11
 8021716:	fb11 2100 	smlabb	r1, r1, r0, r2
 802171a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802171e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8021722:	604c      	str	r4, [r1, #4]
 8021724:	e722      	b.n	802156c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8021726:	1c5d      	adds	r5, r3, #1
 8021728:	4656      	mov	r6, sl
 802172a:	45aa      	cmp	sl, r5
 802172c:	bfa8      	it	ge
 802172e:	462e      	movge	r6, r5
 8021730:	e71e      	b.n	8021570 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 8021732:	f1b8 0f00 	cmp.w	r8, #0
 8021736:	d00d      	beq.n	8021754 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8021738:	ea4f 0188 	mov.w	r1, r8, lsl #2
 802173c:	4658      	mov	r0, fp
 802173e:	f7e1 fdaf 	bl	80032a0 <_ZN8touchgfx5paint9flushLineEPmi>
 8021742:	4642      	mov	r2, r8
 8021744:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021748:	4638      	mov	r0, r7
 802174a:	9b05      	ldr	r3, [sp, #20]
 802174c:	4659      	mov	r1, fp
 802174e:	4447      	add	r7, r8
 8021750:	f7e1 fe0e 	bl	8003370 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8021754:	4b1d      	ldr	r3, [pc, #116]	@ (80217cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 8021756:	9a01      	ldr	r2, [sp, #4]
 8021758:	881b      	ldrh	r3, [r3, #0]
 802175a:	1a9b      	subs	r3, r3, r2
 802175c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021760:	441f      	add	r7, r3
 8021762:	9b04      	ldr	r3, [sp, #16]
 8021764:	3301      	adds	r3, #1
 8021766:	9304      	str	r3, [sp, #16]
 8021768:	9a04      	ldr	r2, [sp, #16]
 802176a:	9b00      	ldr	r3, [sp, #0]
 802176c:	4293      	cmp	r3, r2
 802176e:	d11d      	bne.n	80217ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8021770:	9b02      	ldr	r3, [sp, #8]
 8021772:	2400      	movs	r4, #0
 8021774:	9a02      	ldr	r2, [sp, #8]
 8021776:	f103 0801 	add.w	r8, r3, #1
 802177a:	9b06      	ldr	r3, [sp, #24]
 802177c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8021780:	4621      	mov	r1, r4
 8021782:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802178a:	9b07      	ldr	r3, [sp, #28]
 802178c:	ba36      	rev	r6, r6
 802178e:	9808      	ldr	r0, [sp, #32]
 8021790:	441e      	add	r6, r3
 8021792:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021796:	1aed      	subs	r5, r5, r3
 8021798:	f008 fb2a 	bl	8029df0 <memset>
 802179c:	f8cd 8008 	str.w	r8, [sp, #8]
 80217a0:	b2ad      	uxth	r5, r5
 80217a2:	9404      	str	r4, [sp, #16]
 80217a4:	f7e1 fd72 	bl	800328c <_ZN8touchgfx5paint8tearDownEv>
 80217a8:	46b0      	mov	r8, r6
 80217aa:	e5df      	b.n	802136c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 80217ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80217b0:	9a01      	ldr	r2, [sp, #4]
 80217b2:	1a9b      	subs	r3, r3, r2
 80217b4:	1b5d      	subs	r5, r3, r5
 80217b6:	b2ad      	uxth	r5, r5
 80217b8:	e7f4      	b.n	80217a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 80217ba:	4b05      	ldr	r3, [pc, #20]	@ (80217d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 80217bc:	6818      	ldr	r0, [r3, #0]
 80217be:	6803      	ldr	r3, [r0, #0]
 80217c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80217c2:	4798      	blx	r3
 80217c4:	b00f      	add	sp, #60	@ 0x3c
 80217c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217ca:	bf00      	nop
 80217cc:	240285ae 	.word	0x240285ae
 80217d0:	240285b4 	.word	0x240285b4

080217d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 80217d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217d8:	b093      	sub	sp, #76	@ 0x4c
 80217da:	460d      	mov	r5, r1
 80217dc:	4616      	mov	r6, r2
 80217de:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 80217e2:	9000      	str	r0, [sp, #0]
 80217e4:	f1bb 0f00 	cmp.w	fp, #0
 80217e8:	f000 82ac 	beq.w	8021d44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 80217ec:	6810      	ldr	r0, [r2, #0]
 80217ee:	ac0e      	add	r4, sp, #56	@ 0x38
 80217f0:	6851      	ldr	r1, [r2, #4]
 80217f2:	c403      	stmia	r4!, {r0, r1}
 80217f4:	6818      	ldr	r0, [r3, #0]
 80217f6:	ac10      	add	r4, sp, #64	@ 0x40
 80217f8:	6859      	ldr	r1, [r3, #4]
 80217fa:	c403      	stmia	r4!, {r0, r1}
 80217fc:	a80e      	add	r0, sp, #56	@ 0x38
 80217fe:	f7f8 fe99 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021802:	4631      	mov	r1, r6
 8021804:	a810      	add	r0, sp, #64	@ 0x40
 8021806:	f7f8 fed9 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802180a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802180e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8021812:	bfdb      	ittet	le
 8021814:	b293      	uxthle	r3, r2
 8021816:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 802181a:	2301      	movgt	r3, #1
 802181c:	fb91 f3f3 	sdivle	r3, r1, r3
 8021820:	9301      	str	r3, [sp, #4]
 8021822:	f105 0308 	add.w	r3, r5, #8
 8021826:	9901      	ldr	r1, [sp, #4]
 8021828:	9305      	str	r3, [sp, #20]
 802182a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802182e:	440b      	add	r3, r1
 8021830:	3b01      	subs	r3, #1
 8021832:	fb93 f3f1 	sdiv	r3, r3, r1
 8021836:	3b01      	subs	r3, #1
 8021838:	9905      	ldr	r1, [sp, #20]
 802183a:	b29b      	uxth	r3, r3
 802183c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021840:	9901      	ldr	r1, [sp, #4]
 8021842:	9306      	str	r3, [sp, #24]
 8021844:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8021848:	fb93 f0f1 	sdiv	r0, r3, r1
 802184c:	b284      	uxth	r4, r0
 802184e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8021852:	9403      	str	r4, [sp, #12]
 8021854:	9d03      	ldr	r5, [sp, #12]
 8021856:	9c01      	ldr	r4, [sp, #4]
 8021858:	fb05 3714 	mls	r7, r5, r4, r3
 802185c:	fb17 f702 	smulbb	r7, r7, r2
 8021860:	440f      	add	r7, r1
 8021862:	b2bf      	uxth	r7, r7
 8021864:	2d00      	cmp	r5, #0
 8021866:	d06b      	beq.n	8021940 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8021868:	1e6a      	subs	r2, r5, #1
 802186a:	9805      	ldr	r0, [sp, #20]
 802186c:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8021870:	9a06      	ldr	r2, [sp, #24]
 8021872:	fa99 f989 	rev.w	r9, r9
 8021876:	4491      	add	r9, r2
 8021878:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 802187c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8021880:	4411      	add	r1, r2
 8021882:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8021886:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8021be4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 802188a:	4413      	add	r3, r2
 802188c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8021890:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8021894:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8021898:	9302      	str	r3, [sp, #8]
 802189a:	4bd0      	ldr	r3, [pc, #832]	@ (8021bdc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 802189c:	6818      	ldr	r0, [r3, #0]
 802189e:	6803      	ldr	r3, [r0, #0]
 80218a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218a2:	4798      	blx	r3
 80218a4:	4bce      	ldr	r3, [pc, #824]	@ (8021be0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 80218a6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80218aa:	881b      	ldrh	r3, [r3, #0]
 80218ac:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 80218b0:	fb03 2404 	mla	r4, r3, r4, r2
 80218b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80218b8:	436b      	muls	r3, r5
 80218ba:	2500      	movs	r5, #0
 80218bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80218c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218c4:	4629      	mov	r1, r5
 80218c6:	4404      	add	r4, r0
 80218c8:	18e3      	adds	r3, r4, r3
 80218ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80218cc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80218d0:	fb97 f3f3 	sdiv	r3, r7, r3
 80218d4:	9304      	str	r3, [sp, #16]
 80218d6:	9b00      	ldr	r3, [sp, #0]
 80218d8:	3304      	adds	r3, #4
 80218da:	4618      	mov	r0, r3
 80218dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80218de:	f008 fa87 	bl	8029df0 <memset>
 80218e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80218e4:	42a3      	cmp	r3, r4
 80218e6:	f240 8228 	bls.w	8021d3a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 80218ea:	2003      	movs	r0, #3
 80218ec:	2607      	movs	r6, #7
 80218ee:	2f00      	cmp	r7, #0
 80218f0:	f000 80cb 	beq.w	8021a8a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 80218f4:	f899 3000 	ldrb.w	r3, [r9]
 80218f8:	b2db      	uxtb	r3, r3
 80218fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80218fc:	d123      	bne.n	8021946 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 80218fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021902:	3f01      	subs	r7, #1
 8021904:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021908:	f109 0804 	add.w	r8, r9, #4
 802190c:	b2db      	uxtb	r3, r3
 802190e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8021912:	b2d2      	uxtb	r2, r2
 8021914:	f363 0507 	bfi	r5, r3, #0, #8
 8021918:	b2c9      	uxtb	r1, r1
 802191a:	b2bf      	uxth	r7, r7
 802191c:	f362 250f 	bfi	r5, r2, #8, #8
 8021920:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021924:	fb10 2201 	smlabb	r2, r0, r1, r2
 8021928:	f361 4517 	bfi	r5, r1, #16, #8
 802192c:	fb16 2303 	smlabb	r3, r6, r3, r2
 8021930:	9a00      	ldr	r2, [sp, #0]
 8021932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021936:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802193a:	605d      	str	r5, [r3, #4]
 802193c:	46c1      	mov	r9, r8
 802193e:	e7d6      	b.n	80218ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8021940:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8021944:	e798      	b.n	8021878 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8021946:	119a      	asrs	r2, r3, #6
 8021948:	f109 0801 	add.w	r8, r9, #1
 802194c:	d108      	bne.n	8021960 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 802194e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021952:	9a00      	ldr	r2, [sp, #0]
 8021954:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021958:	685d      	ldr	r5, [r3, #4]
 802195a:	3f01      	subs	r7, #1
 802195c:	b2bf      	uxth	r7, r7
 802195e:	e7ed      	b.n	802193c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8021960:	2a01      	cmp	r2, #1
 8021962:	d125      	bne.n	80219b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8021964:	f003 0103 	and.w	r1, r3, #3
 8021968:	1eaa      	subs	r2, r5, #2
 802196a:	440a      	add	r2, r1
 802196c:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8021970:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8021974:	b2d2      	uxtb	r2, r2
 8021976:	3902      	subs	r1, #2
 8021978:	3b02      	subs	r3, #2
 802197a:	f362 0507 	bfi	r5, r2, #0, #8
 802197e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021982:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8021986:	f361 250f 	bfi	r5, r1, #8, #8
 802198a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802198e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8021992:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8021996:	fb10 1103 	smlabb	r1, r0, r3, r1
 802199a:	f363 4517 	bfi	r5, r3, #16, #8
 802199e:	9b00      	ldr	r3, [sp, #0]
 80219a0:	fb16 1202 	smlabb	r2, r6, r2, r1
 80219a4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80219a8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80219ac:	6055      	str	r5, [r2, #4]
 80219ae:	e7d4      	b.n	802195a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 80219b0:	2a02      	cmp	r2, #2
 80219b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80219b6:	d12c      	bne.n	8021a12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 80219b8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80219bc:	f1a3 0c20 	sub.w	ip, r3, #32
 80219c0:	f109 0802 	add.w	r8, r9, #2
 80219c4:	b2d2      	uxtb	r2, r2
 80219c6:	f002 010f 	and.w	r1, r2, #15
 80219ca:	1112      	asrs	r2, r2, #4
 80219cc:	3908      	subs	r1, #8
 80219ce:	3a08      	subs	r2, #8
 80219d0:	4461      	add	r1, ip
 80219d2:	4494      	add	ip, r2
 80219d4:	4429      	add	r1, r5
 80219d6:	b2c9      	uxtb	r1, r1
 80219d8:	f361 0507 	bfi	r5, r1, #0, #8
 80219dc:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80219e0:	f1ae 0e20 	sub.w	lr, lr, #32
 80219e4:	4473      	add	r3, lr
 80219e6:	b2db      	uxtb	r3, r3
 80219e8:	f363 250f 	bfi	r5, r3, #8, #8
 80219ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80219f0:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 80219f4:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 80219f8:	fb10 330c 	smlabb	r3, r0, ip, r3
 80219fc:	f36c 4517 	bfi	r5, ip, #16, #8
 8021a00:	fb16 3101 	smlabb	r1, r6, r1, r3
 8021a04:	9b00      	ldr	r3, [sp, #0]
 8021a06:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8021a0a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021a0e:	604d      	str	r5, [r1, #4]
 8021a10:	e7a3      	b.n	802195a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8021a12:	3301      	adds	r3, #1
 8021a14:	42bb      	cmp	r3, r7
 8021a16:	dd23      	ble.n	8021a60 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8021a18:	eba3 0907 	sub.w	r9, r3, r7
 8021a1c:	f1b9 0f00 	cmp.w	r9, #0
 8021a20:	dc20      	bgt.n	8021a64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8021a22:	9e02      	ldr	r6, [sp, #8]
 8021a24:	2700      	movs	r7, #0
 8021a26:	2e00      	cmp	r6, #0
 8021a28:	f340 8142 	ble.w	8021cb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8021a2c:	f108 0301 	add.w	r3, r8, #1
 8021a30:	9307      	str	r3, [sp, #28]
 8021a32:	f898 3000 	ldrb.w	r3, [r8]
 8021a36:	b2db      	uxtb	r3, r3
 8021a38:	119a      	asrs	r2, r3, #6
 8021a3a:	d12a      	bne.n	8021a92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8021a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021a40:	9a00      	ldr	r2, [sp, #0]
 8021a42:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021a46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021a4a:	685d      	ldr	r5, [r3, #4]
 8021a4c:	f040 811f 	bne.w	8021c8e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8021a50:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021a54:	7025      	strb	r5, [r4, #0]
 8021a56:	7063      	strb	r3, [r4, #1]
 8021a58:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8021a5c:	70a3      	strb	r3, [r4, #2]
 8021a5e:	e04e      	b.n	8021afe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8021a60:	1aff      	subs	r7, r7, r3
 8021a62:	e77b      	b.n	802195c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8021a64:	9b02      	ldr	r3, [sp, #8]
 8021a66:	4620      	mov	r0, r4
 8021a68:	462a      	mov	r2, r5
 8021a6a:	454b      	cmp	r3, r9
 8021a6c:	bfa8      	it	ge
 8021a6e:	464b      	movge	r3, r9
 8021a70:	461f      	mov	r7, r3
 8021a72:	9b02      	ldr	r3, [sp, #8]
 8021a74:	4639      	mov	r1, r7
 8021a76:	1bde      	subs	r6, r3, r7
 8021a78:	eba9 0907 	sub.w	r9, r9, r7
 8021a7c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021a80:	465b      	mov	r3, fp
 8021a82:	f7e1 fc27 	bl	80032d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8021a86:	443c      	add	r4, r7
 8021a88:	e7cc      	b.n	8021a24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8021a8a:	46c8      	mov	r8, r9
 8021a8c:	9e02      	ldr	r6, [sp, #8]
 8021a8e:	46b9      	mov	r9, r7
 8021a90:	e7c8      	b.n	8021a24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8021a92:	2a01      	cmp	r2, #1
 8021a94:	d136      	bne.n	8021b04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8021a96:	f003 0103 	and.w	r1, r3, #3
 8021a9a:	1ea8      	subs	r0, r5, #2
 8021a9c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021aa0:	4408      	add	r0, r1
 8021aa2:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8021aa6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8021aaa:	b2c0      	uxtb	r0, r0
 8021aac:	f1a1 0102 	sub.w	r1, r1, #2
 8021ab0:	f1a3 0302 	sub.w	r3, r3, #2
 8021ab4:	f360 0507 	bfi	r5, r0, #0, #8
 8021ab8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021abc:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8021ac0:	f361 250f 	bfi	r5, r1, #8, #8
 8021ac4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8021ac8:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8021acc:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8021ad0:	f04f 0303 	mov.w	r3, #3
 8021ad4:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8021ad8:	f04f 0c07 	mov.w	ip, #7
 8021adc:	9b00      	ldr	r3, [sp, #0]
 8021ade:	f368 4517 	bfi	r5, r8, #16, #8
 8021ae2:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8021ae6:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8021aea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8021aee:	f8cc 5004 	str.w	r5, [ip, #4]
 8021af2:	f040 80cd 	bne.w	8021c90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8021af6:	7020      	strb	r0, [r4, #0]
 8021af8:	7061      	strb	r1, [r4, #1]
 8021afa:	f884 8002 	strb.w	r8, [r4, #2]
 8021afe:	3e01      	subs	r6, #1
 8021b00:	3403      	adds	r4, #3
 8021b02:	e0c1      	b.n	8021c88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8021b04:	2a02      	cmp	r2, #2
 8021b06:	d13d      	bne.n	8021b84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8021b08:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021b10:	f108 0202 	add.w	r2, r8, #2
 8021b14:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021b18:	b2c9      	uxtb	r1, r1
 8021b1a:	f1a3 0c20 	sub.w	ip, r3, #32
 8021b1e:	9207      	str	r2, [sp, #28]
 8021b20:	f001 000f 	and.w	r0, r1, #15
 8021b24:	f1a0 0008 	sub.w	r0, r0, #8
 8021b28:	4460      	add	r0, ip
 8021b2a:	4428      	add	r0, r5
 8021b2c:	b2c0      	uxtb	r0, r0
 8021b2e:	f360 0507 	bfi	r5, r0, #0, #8
 8021b32:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8021b36:	f1a2 0220 	sub.w	r2, r2, #32
 8021b3a:	4413      	add	r3, r2
 8021b3c:	ea4f 1221 	mov.w	r2, r1, asr #4
 8021b40:	b2db      	uxtb	r3, r3
 8021b42:	f1a2 0208 	sub.w	r2, r2, #8
 8021b46:	f363 250f 	bfi	r5, r3, #8, #8
 8021b4a:	4462      	add	r2, ip
 8021b4c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8021b50:	f04f 0c03 	mov.w	ip, #3
 8021b54:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8021b58:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8021b5c:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8021b60:	f04f 0107 	mov.w	r1, #7
 8021b64:	f362 4517 	bfi	r5, r2, #16, #8
 8021b68:	fb11 c100 	smlabb	r1, r1, r0, ip
 8021b6c:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8021b70:	9900      	ldr	r1, [sp, #0]
 8021b72:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8021b76:	604d      	str	r5, [r1, #4]
 8021b78:	f040 8089 	bne.w	8021c8e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8021b7c:	7020      	strb	r0, [r4, #0]
 8021b7e:	7063      	strb	r3, [r4, #1]
 8021b80:	70a2      	strb	r2, [r4, #2]
 8021b82:	e7bc      	b.n	8021afe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8021b84:	2bfe      	cmp	r3, #254	@ 0xfe
 8021b86:	d12f      	bne.n	8021be8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8021b88:	f898 0001 	ldrb.w	r0, [r8, #1]
 8021b8c:	f108 0304 	add.w	r3, r8, #4
 8021b90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8021b94:	f04f 0c03 	mov.w	ip, #3
 8021b98:	f898 1003 	ldrb.w	r1, [r8, #3]
 8021b9c:	b2c0      	uxtb	r0, r0
 8021b9e:	b2d2      	uxtb	r2, r2
 8021ba0:	9307      	str	r3, [sp, #28]
 8021ba2:	b2c9      	uxtb	r1, r1
 8021ba4:	f360 0507 	bfi	r5, r0, #0, #8
 8021ba8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8021bac:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021bb0:	f362 250f 	bfi	r5, r2, #8, #8
 8021bb4:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8021bb8:	f04f 0307 	mov.w	r3, #7
 8021bbc:	f361 4517 	bfi	r5, r1, #16, #8
 8021bc0:	fb13 c300 	smlabb	r3, r3, r0, ip
 8021bc4:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8021bc8:	9b00      	ldr	r3, [sp, #0]
 8021bca:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8021bce:	605d      	str	r5, [r3, #4]
 8021bd0:	d15d      	bne.n	8021c8e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8021bd2:	7020      	strb	r0, [r4, #0]
 8021bd4:	7062      	strb	r2, [r4, #1]
 8021bd6:	70a1      	strb	r1, [r4, #2]
 8021bd8:	e791      	b.n	8021afe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8021bda:	bf00      	nop
 8021bdc:	240285b4 	.word	0x240285b4
 8021be0:	240285ae 	.word	0x240285ae
 8021be4:	24000140 	.word	0x24000140
 8021be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021bec:	1c5a      	adds	r2, r3, #1
 8021bee:	b94b      	cbnz	r3, 8021c04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8021bf0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021bf4:	d14c      	bne.n	8021c90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8021bf6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8021bfa:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8021bfe:	7025      	strb	r5, [r4, #0]
 8021c00:	7062      	strb	r2, [r4, #1]
 8021c02:	e72b      	b.n	8021a5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8021c04:	4296      	cmp	r6, r2
 8021c06:	46b0      	mov	r8, r6
 8021c08:	bfa8      	it	ge
 8021c0a:	4690      	movge	r8, r2
 8021c0c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8021c10:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021c14:	eba6 0608 	sub.w	r6, r6, r8
 8021c18:	eba2 0908 	sub.w	r9, r2, r8
 8021c1c:	9308      	str	r3, [sp, #32]
 8021c1e:	b2eb      	uxtb	r3, r5
 8021c20:	930c      	str	r3, [sp, #48]	@ 0x30
 8021c22:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021c26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c28:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8021c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c2e:	9b08      	ldr	r3, [sp, #32]
 8021c30:	d030      	beq.n	8021c94 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8021c32:	18fb      	adds	r3, r7, r3
 8021c34:	2bc0      	cmp	r3, #192	@ 0xc0
 8021c36:	dd15      	ble.n	8021c64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8021c38:	4650      	mov	r0, sl
 8021c3a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8021c3e:	f7e1 fb2f 	bl	80032a0 <_ZN8touchgfx5paint9flushLineEPmi>
 8021c42:	2203      	movs	r2, #3
 8021c44:	4651      	mov	r1, sl
 8021c46:	465b      	mov	r3, fp
 8021c48:	4620      	mov	r0, r4
 8021c4a:	443c      	add	r4, r7
 8021c4c:	fb97 f2f2 	sdiv	r2, r7, r2
 8021c50:	f7e1 fb6a 	bl	8003328 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8021c54:	4b3d      	ldr	r3, [pc, #244]	@ (8021d4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8021c56:	2700      	movs	r7, #0
 8021c58:	459a      	cmp	sl, r3
 8021c5a:	bf0c      	ite	eq
 8021c5c:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8021d58 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8021c60:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8021d4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8021c64:	eb0a 0307 	add.w	r3, sl, r7
 8021c68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021c6a:	f1b8 0801 	subs.w	r8, r8, #1
 8021c6e:	f103 0303 	add.w	r3, r3, #3
 8021c72:	f803 2c03 	strb.w	r2, [r3, #-3]
 8021c76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021c78:	f803 2c02 	strb.w	r2, [r3, #-2]
 8021c7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021c7e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021c82:	d1f1      	bne.n	8021c68 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8021c84:	9b08      	ldr	r3, [sp, #32]
 8021c86:	441f      	add	r7, r3
 8021c88:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021c8c:	e6cb      	b.n	8021a26 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8021c8e:	2201      	movs	r2, #1
 8021c90:	4690      	mov	r8, r2
 8021c92:	e7bb      	b.n	8021c0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8021c94:	4423      	add	r3, r4
 8021c96:	42a3      	cmp	r3, r4
 8021c98:	d9f6      	bls.n	8021c88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8021c9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021c9c:	3403      	adds	r4, #3
 8021c9e:	f804 2c03 	strb.w	r2, [r4, #-3]
 8021ca2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021ca4:	f804 2c02 	strb.w	r2, [r4, #-2]
 8021ca8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021caa:	f804 2c01 	strb.w	r2, [r4, #-1]
 8021cae:	e7f2      	b.n	8021c96 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8021cb0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8021cb4:	d00e      	beq.n	8021cd4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8021cb6:	b16f      	cbz	r7, 8021cd4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8021cb8:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8021cbc:	4650      	mov	r0, sl
 8021cbe:	f7e1 faef 	bl	80032a0 <_ZN8touchgfx5paint9flushLineEPmi>
 8021cc2:	2203      	movs	r2, #3
 8021cc4:	4620      	mov	r0, r4
 8021cc6:	443c      	add	r4, r7
 8021cc8:	465b      	mov	r3, fp
 8021cca:	4651      	mov	r1, sl
 8021ccc:	fb97 f2f2 	sdiv	r2, r7, r2
 8021cd0:	f7e1 fb2a 	bl	8003328 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8021cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8021d50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8021cd6:	9a02      	ldr	r2, [sp, #8]
 8021cd8:	881b      	ldrh	r3, [r3, #0]
 8021cda:	1a9b      	subs	r3, r3, r2
 8021cdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ce0:	441c      	add	r4, r3
 8021ce2:	9b04      	ldr	r3, [sp, #16]
 8021ce4:	3301      	adds	r3, #1
 8021ce6:	9304      	str	r3, [sp, #16]
 8021ce8:	9a04      	ldr	r2, [sp, #16]
 8021cea:	9b01      	ldr	r3, [sp, #4]
 8021cec:	4293      	cmp	r3, r2
 8021cee:	d11c      	bne.n	8021d2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8021cf0:	9b03      	ldr	r3, [sp, #12]
 8021cf2:	2500      	movs	r5, #0
 8021cf4:	9a03      	ldr	r2, [sp, #12]
 8021cf6:	1c5e      	adds	r6, r3, #1
 8021cf8:	9b05      	ldr	r3, [sp, #20]
 8021cfa:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8021cfe:	4629      	mov	r1, r5
 8021d00:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8021d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021d08:	9b06      	ldr	r3, [sp, #24]
 8021d0a:	fa98 f888 	rev.w	r8, r8
 8021d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021d10:	4498      	add	r8, r3
 8021d12:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021d16:	1aff      	subs	r7, r7, r3
 8021d18:	f008 f86a 	bl	8029df0 <memset>
 8021d1c:	b2bf      	uxth	r7, r7
 8021d1e:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8021d22:	f7e1 fab3 	bl	800328c <_ZN8touchgfx5paint8tearDownEv>
 8021d26:	46c1      	mov	r9, r8
 8021d28:	e5db      	b.n	80218e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8021d2a:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8021d2e:	9b02      	ldr	r3, [sp, #8]
 8021d30:	1aff      	subs	r7, r7, r3
 8021d32:	eba7 0709 	sub.w	r7, r7, r9
 8021d36:	b2bf      	uxth	r7, r7
 8021d38:	e7f3      	b.n	8021d22 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8021d3a:	4b06      	ldr	r3, [pc, #24]	@ (8021d54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8021d3c:	6818      	ldr	r0, [r3, #0]
 8021d3e:	6803      	ldr	r3, [r0, #0]
 8021d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021d42:	4798      	blx	r3
 8021d44:	b013      	add	sp, #76	@ 0x4c
 8021d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d4a:	bf00      	nop
 8021d4c:	24000140 	.word	0x24000140
 8021d50:	240285ae 	.word	0x240285ae
 8021d54:	240285b4 	.word	0x240285b4
 8021d58:	24000240 	.word	0x24000240

08021d5c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d60:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8021d64:	9c06      	ldr	r4, [sp, #24]
 8021d66:	2800      	cmp	r0, #0
 8021d68:	d06e      	beq.n	8021e48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021d6a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8021d6e:	2d00      	cmp	r5, #0
 8021d70:	dd6a      	ble.n	8021e48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021d72:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8021d76:	f1bc 0f00 	cmp.w	ip, #0
 8021d7a:	dd65      	ble.n	8021e48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021d7c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8021d80:	28ff      	cmp	r0, #255	@ 0xff
 8021d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021d86:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8021d8a:	fb02 3306 	mla	r3, r2, r6, r3
 8021d8e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8021d92:	b2e4      	uxtb	r4, r4
 8021d94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d98:	4419      	add	r1, r3
 8021d9a:	fb02 f30c 	mul.w	r3, r2, ip
 8021d9e:	eba2 0205 	sub.w	r2, r2, r5
 8021da2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021da6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021daa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021dae:	440b      	add	r3, r1
 8021db0:	d03e      	beq.n	8021e30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8021db2:	fa1f fc80 	uxth.w	ip, r0
 8021db6:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8021dba:	fb06 f60c 	mul.w	r6, r6, ip
 8021dbe:	b280      	uxth	r0, r0
 8021dc0:	fb07 f70c 	mul.w	r7, r7, ip
 8021dc4:	fb04 f40c 	mul.w	r4, r4, ip
 8021dc8:	4299      	cmp	r1, r3
 8021dca:	d23d      	bcs.n	8021e48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021dcc:	eb01 0c05 	add.w	ip, r1, r5
 8021dd0:	458c      	cmp	ip, r1
 8021dd2:	f101 0e03 	add.w	lr, r1, #3
 8021dd6:	d928      	bls.n	8021e2a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8021dd8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021ddc:	fb11 f100 	smulbb	r1, r1, r0
 8021de0:	4421      	add	r1, r4
 8021de2:	b289      	uxth	r1, r1
 8021de4:	f101 0801 	add.w	r8, r1, #1
 8021de8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021dec:	1209      	asrs	r1, r1, #8
 8021dee:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021df2:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8021df6:	fb11 f100 	smulbb	r1, r1, r0
 8021dfa:	4439      	add	r1, r7
 8021dfc:	b289      	uxth	r1, r1
 8021dfe:	f101 0801 	add.w	r8, r1, #1
 8021e02:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021e06:	1209      	asrs	r1, r1, #8
 8021e08:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021e0c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021e10:	fb11 f100 	smulbb	r1, r1, r0
 8021e14:	4431      	add	r1, r6
 8021e16:	b289      	uxth	r1, r1
 8021e18:	f101 0801 	add.w	r8, r1, #1
 8021e1c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021e20:	1209      	asrs	r1, r1, #8
 8021e22:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8021e26:	4671      	mov	r1, lr
 8021e28:	e7d2      	b.n	8021dd0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8021e2a:	4411      	add	r1, r2
 8021e2c:	e7cc      	b.n	8021dc8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8021e2e:	4411      	add	r1, r2
 8021e30:	4299      	cmp	r1, r3
 8021e32:	d209      	bcs.n	8021e48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8021e34:	1948      	adds	r0, r1, r5
 8021e36:	4281      	cmp	r1, r0
 8021e38:	d2f9      	bcs.n	8021e2e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8021e3a:	700c      	strb	r4, [r1, #0]
 8021e3c:	3103      	adds	r1, #3
 8021e3e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8021e42:	f801 6c01 	strb.w	r6, [r1, #-1]
 8021e46:	e7f6      	b.n	8021e36 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8021e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021e4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e50:	b093      	sub	sp, #76	@ 0x4c
 8021e52:	4699      	mov	r9, r3
 8021e54:	4617      	mov	r7, r2
 8021e56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021e5a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8021e5e:	4604      	mov	r4, r0
 8021e60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021e64:	a80c      	add	r0, sp, #48	@ 0x30
 8021e66:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8021e6a:	460d      	mov	r5, r1
 8021e6c:	4649      	mov	r1, r9
 8021e6e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8021e72:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021e76:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8021e7a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8021e7e:	f7f1 f85b 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8021e82:	4639      	mov	r1, r7
 8021e84:	a80c      	add	r0, sp, #48	@ 0x30
 8021e86:	f7f1 f857 	bl	8012f38 <_ZN8touchgfx4RectaNERKS0_>
 8021e8a:	4b78      	ldr	r3, [pc, #480]	@ (802206c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021e8c:	8818      	ldrh	r0, [r3, #0]
 8021e8e:	4b78      	ldr	r3, [pc, #480]	@ (8022070 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8021e90:	b202      	sxth	r2, r0
 8021e92:	8819      	ldrh	r1, [r3, #0]
 8021e94:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021e98:	b20f      	sxth	r7, r1
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	da07      	bge.n	8021eae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8021e9e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8021ea2:	4463      	add	r3, ip
 8021ea4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8021ea8:	2300      	movs	r3, #0
 8021eaa:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8021eae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8021eb2:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8021eb6:	1ad2      	subs	r2, r2, r3
 8021eb8:	4594      	cmp	ip, r2
 8021eba:	bfc4      	itt	gt
 8021ebc:	1ac2      	subgt	r2, r0, r3
 8021ebe:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8021ec2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021ec6:	2a00      	cmp	r2, #0
 8021ec8:	da07      	bge.n	8021eda <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8021eca:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8021ece:	4462      	add	r2, ip
 8021ed0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8021ed4:	2200      	movs	r2, #0
 8021ed6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8021eda:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021ede:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8021ee2:	1abf      	subs	r7, r7, r2
 8021ee4:	45bc      	cmp	ip, r7
 8021ee6:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8022078 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8021eea:	bfc8      	it	gt
 8021eec:	1a8f      	subgt	r7, r1, r2
 8021eee:	f89c c000 	ldrb.w	ip, [ip]
 8021ef2:	bfc8      	it	gt
 8021ef4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8021ef8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8021efc:	f1bc 0f00 	cmp.w	ip, #0
 8021f00:	d176      	bne.n	8021ff0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8021f02:	4287      	cmp	r7, r0
 8021f04:	bf14      	ite	ne
 8021f06:	2100      	movne	r1, #0
 8021f08:	2101      	moveq	r1, #1
 8021f0a:	2f00      	cmp	r7, #0
 8021f0c:	9107      	str	r1, [sp, #28]
 8021f0e:	dd73      	ble.n	8021ff8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8021f10:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8021f14:	2900      	cmp	r1, #0
 8021f16:	9104      	str	r1, [sp, #16]
 8021f18:	dd6e      	ble.n	8021ff8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8021f1a:	f8b9 1000 	ldrh.w	r1, [r9]
 8021f1e:	a80e      	add	r0, sp, #56	@ 0x38
 8021f20:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8021f24:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8021f28:	1a5b      	subs	r3, r3, r1
 8021f2a:	a910      	add	r1, sp, #64	@ 0x40
 8021f2c:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8021f30:	b21b      	sxth	r3, r3
 8021f32:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8021f36:	f8df a144 	ldr.w	sl, [pc, #324]	@ 802207c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8021f3a:	9305      	str	r3, [sp, #20]
 8021f3c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8021f40:	1ad2      	subs	r2, r2, r3
 8021f42:	b213      	sxth	r3, r2
 8021f44:	9306      	str	r3, [sp, #24]
 8021f46:	9b05      	ldr	r3, [sp, #20]
 8021f48:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8021f4c:	9b06      	ldr	r3, [sp, #24]
 8021f4e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021f52:	9b04      	ldr	r3, [sp, #16]
 8021f54:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8021f58:	2300      	movs	r3, #0
 8021f5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8021f5c:	f7f8 fb2e 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021f60:	4640      	mov	r0, r8
 8021f62:	f7f8 fae7 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f66:	a810      	add	r0, sp, #64	@ 0x40
 8021f68:	f7f8 fae4 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021f6c:	4b41      	ldr	r3, [pc, #260]	@ (8022074 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8021f6e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8021f72:	4628      	mov	r0, r5
 8021f74:	881b      	ldrh	r3, [r3, #0]
 8021f76:	9308      	str	r3, [sp, #32]
 8021f78:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8021f7c:	b21b      	sxth	r3, r3
 8021f7e:	9303      	str	r3, [sp, #12]
 8021f80:	682b      	ldr	r3, [r5, #0]
 8021f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f84:	4798      	blx	r3
 8021f86:	9a03      	ldr	r2, [sp, #12]
 8021f88:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8021f8c:	4681      	mov	r9, r0
 8021f8e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8021f92:	fb13 f302 	smulbb	r3, r3, r2
 8021f96:	2203      	movs	r2, #3
 8021f98:	f8da 0000 	ldr.w	r0, [sl]
 8021f9c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8021fa0:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8021fa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021fa4:	441d      	add	r5, r3
 8021fa6:	6803      	ldr	r3, [r0, #0]
 8021fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021faa:	4798      	blx	r3
 8021fac:	9009      	str	r0, [sp, #36]	@ 0x24
 8021fae:	f8da 0000 	ldr.w	r0, [sl]
 8021fb2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021fb6:	6803      	ldr	r3, [r0, #0]
 8021fb8:	910a      	str	r1, [sp, #40]	@ 0x28
 8021fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021fbc:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8021fc0:	4798      	blx	r3
 8021fc2:	f010 0f01 	tst.w	r0, #1
 8021fc6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8021fca:	d01e      	beq.n	802200a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8021fcc:	f8da 0000 	ldr.w	r0, [sl]
 8021fd0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021fd4:	6803      	ldr	r3, [r0, #0]
 8021fd6:	9200      	str	r2, [sp, #0]
 8021fd8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8021fda:	462b      	mov	r3, r5
 8021fdc:	e898 0006 	ldmia.w	r8, {r1, r2}
 8021fe0:	47b0      	blx	r6
 8021fe2:	9b05      	ldr	r3, [sp, #20]
 8021fe4:	80a7      	strh	r7, [r4, #4]
 8021fe6:	8023      	strh	r3, [r4, #0]
 8021fe8:	9b06      	ldr	r3, [sp, #24]
 8021fea:	8063      	strh	r3, [r4, #2]
 8021fec:	9b04      	ldr	r3, [sp, #16]
 8021fee:	e007      	b.n	8022000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8021ff0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8021ff4:	4288      	cmp	r0, r1
 8021ff6:	e785      	b.n	8021f04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8021ff8:	2300      	movs	r3, #0
 8021ffa:	8023      	strh	r3, [r4, #0]
 8021ffc:	8063      	strh	r3, [r4, #2]
 8021ffe:	80a3      	strh	r3, [r4, #4]
 8022000:	4620      	mov	r0, r4
 8022002:	80e3      	strh	r3, [r4, #6]
 8022004:	b013      	add	sp, #76	@ 0x4c
 8022006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802200a:	fb09 f606 	mul.w	r6, r9, r6
 802200e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022010:	fb11 6602 	smlabb	r6, r1, r2, r6
 8022014:	9a07      	ldr	r2, [sp, #28]
 8022016:	4433      	add	r3, r6
 8022018:	461e      	mov	r6, r3
 802201a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802201e:	b16a      	cbz	r2, 802203c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022020:	9a08      	ldr	r2, [sp, #32]
 8022022:	4593      	cmp	fp, r2
 8022024:	d10a      	bne.n	802203c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8022026:	f8da 0000 	ldr.w	r0, [sl]
 802202a:	fb09 f303 	mul.w	r3, r9, r3
 802202e:	4629      	mov	r1, r5
 8022030:	6802      	ldr	r2, [r0, #0]
 8022032:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8022036:	4632      	mov	r2, r6
 8022038:	47d0      	blx	sl
 802203a:	e7d2      	b.n	8021fe2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 802203c:	9a03      	ldr	r2, [sp, #12]
 802203e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 802207c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8022042:	fb02 5803 	mla	r8, r2, r3, r5
 8022046:	4545      	cmp	r5, r8
 8022048:	d2cb      	bcs.n	8021fe2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 802204a:	f8db 0000 	ldr.w	r0, [fp]
 802204e:	4629      	mov	r1, r5
 8022050:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8022054:	6802      	ldr	r2, [r0, #0]
 8022056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802205a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 802205e:	4632      	mov	r2, r6
 8022060:	47d0      	blx	sl
 8022062:	9b03      	ldr	r3, [sp, #12]
 8022064:	444e      	add	r6, r9
 8022066:	441d      	add	r5, r3
 8022068:	e7ed      	b.n	8022046 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 802206a:	bf00      	nop
 802206c:	240285a8 	.word	0x240285a8
 8022070:	240285aa 	.word	0x240285aa
 8022074:	240285ae 	.word	0x240285ae
 8022078:	240285ac 	.word	0x240285ac
 802207c:	240285b4 	.word	0x240285b4

08022080 <_ZN8touchgfx8LCD24bppC1Ev>:
 8022080:	2200      	movs	r2, #0
 8022082:	490e      	ldr	r1, [pc, #56]	@ (80220bc <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8022084:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8022088:	6001      	str	r1, [r0, #0]
 802208a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802208e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8022092:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8022096:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 802209a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 802209e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 80220a2:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80220a6:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 80220aa:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 80220ae:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 80220b2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80220b6:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 80220ba:	4770      	bx	lr
 80220bc:	0802e7bc 	.word	0x0802e7bc

080220c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80220c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220c4:	b091      	sub	sp, #68	@ 0x44
 80220c6:	4607      	mov	r7, r0
 80220c8:	4688      	mov	r8, r1
 80220ca:	6810      	ldr	r0, [r2, #0]
 80220cc:	6851      	ldr	r1, [r2, #4]
 80220ce:	ac0c      	add	r4, sp, #48	@ 0x30
 80220d0:	4616      	mov	r6, r2
 80220d2:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 80220d6:	4d64      	ldr	r5, [pc, #400]	@ (8022268 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80220d8:	f8df a190 	ldr.w	sl, [pc, #400]	@ 802226c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80220dc:	c403      	stmia	r4!, {r0, r1}
 80220de:	6818      	ldr	r0, [r3, #0]
 80220e0:	ac0e      	add	r4, sp, #56	@ 0x38
 80220e2:	6859      	ldr	r1, [r3, #4]
 80220e4:	c403      	stmia	r4!, {r0, r1}
 80220e6:	a80c      	add	r0, sp, #48	@ 0x30
 80220e8:	f7f8 fa24 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220ec:	4631      	mov	r1, r6
 80220ee:	a80e      	add	r0, sp, #56	@ 0x38
 80220f0:	f7f8 fa64 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80220f4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80220f8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80220fc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022100:	6828      	ldr	r0, [r5, #0]
 8022102:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022106:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 802210a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 802210e:	440f      	add	r7, r1
 8022110:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022114:	440a      	add	r2, r1
 8022116:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802211a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 802211e:	4413      	add	r3, r2
 8022120:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022124:	6803      	ldr	r3, [r0, #0]
 8022126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022128:	4798      	blx	r3
 802212a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 802212e:	6828      	ldr	r0, [r5, #0]
 8022130:	d01f      	beq.n	8022172 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8022132:	2201      	movs	r2, #1
 8022134:	2500      	movs	r5, #0
 8022136:	6801      	ldr	r1, [r0, #0]
 8022138:	b2a4      	uxth	r4, r4
 802213a:	b2b6      	uxth	r6, r6
 802213c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022140:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8022144:	250b      	movs	r5, #11
 8022146:	9507      	str	r5, [sp, #28]
 8022148:	f8ba 5000 	ldrh.w	r5, [sl]
 802214c:	f8cd 9010 	str.w	r9, [sp, #16]
 8022150:	9602      	str	r6, [sp, #8]
 8022152:	9401      	str	r4, [sp, #4]
 8022154:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8022158:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802215c:	9203      	str	r2, [sp, #12]
 802215e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022162:	9200      	str	r2, [sp, #0]
 8022164:	4642      	mov	r2, r8
 8022166:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8022168:	4639      	mov	r1, r7
 802216a:	47a0      	blx	r4
 802216c:	b011      	add	sp, #68	@ 0x44
 802216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022172:	6803      	ldr	r3, [r0, #0]
 8022174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022176:	4798      	blx	r3
 8022178:	f8ba 5000 	ldrh.w	r5, [sl]
 802217c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8022180:	f04f 0e04 	mov.w	lr, #4
 8022184:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8022188:	436e      	muls	r6, r5
 802218a:	fb05 2303 	mla	r3, r5, r3, r2
 802218e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022192:	1b2d      	subs	r5, r5, r4
 8022194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802219c:	4418      	add	r0, r3
 802219e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80221a2:	1982      	adds	r2, r0, r6
 80221a4:	1b1b      	subs	r3, r3, r4
 80221a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80221aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80221ac:	4290      	cmp	r0, r2
 80221ae:	d254      	bcs.n	802225a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 80221b0:	eb00 0a04 	add.w	sl, r0, r4
 80221b4:	4550      	cmp	r0, sl
 80221b6:	d24c      	bcs.n	8022252 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 80221b8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80221bc:	fb1e e101 	smlabb	r1, lr, r1, lr
 80221c0:	eb08 0c01 	add.w	ip, r8, r1
 80221c4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80221c8:	b173      	cbz	r3, 80221e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80221ca:	2bff      	cmp	r3, #255	@ 0xff
 80221cc:	f818 b001 	ldrb.w	fp, [r8, r1]
 80221d0:	d10c      	bne.n	80221ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80221d2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80221d6:	d109      	bne.n	80221ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80221d8:	f880 b000 	strb.w	fp, [r0]
 80221dc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80221e0:	7043      	strb	r3, [r0, #1]
 80221e2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80221e6:	7083      	strb	r3, [r0, #2]
 80221e8:	3003      	adds	r0, #3
 80221ea:	e7e3      	b.n	80221b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 80221ec:	fb09 f103 	mul.w	r1, r9, r3
 80221f0:	1c4b      	adds	r3, r1, #1
 80221f2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80221f6:	7801      	ldrb	r1, [r0, #0]
 80221f8:	121b      	asrs	r3, r3, #8
 80221fa:	b29e      	uxth	r6, r3
 80221fc:	43db      	mvns	r3, r3
 80221fe:	fb1b fb06 	smulbb	fp, fp, r6
 8022202:	b2db      	uxtb	r3, r3
 8022204:	fb01 b103 	mla	r1, r1, r3, fp
 8022208:	b289      	uxth	r1, r1
 802220a:	f101 0b01 	add.w	fp, r1, #1
 802220e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022212:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022216:	fb1b fb03 	smulbb	fp, fp, r3
 802221a:	1209      	asrs	r1, r1, #8
 802221c:	7001      	strb	r1, [r0, #0]
 802221e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8022222:	fb01 b106 	mla	r1, r1, r6, fp
 8022226:	b289      	uxth	r1, r1
 8022228:	f101 0b01 	add.w	fp, r1, #1
 802222c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022230:	1209      	asrs	r1, r1, #8
 8022232:	7041      	strb	r1, [r0, #1]
 8022234:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8022238:	f890 c002 	ldrb.w	ip, [r0, #2]
 802223c:	fb1c f303 	smulbb	r3, ip, r3
 8022240:	fb01 3606 	mla	r6, r1, r6, r3
 8022244:	b2b6      	uxth	r6, r6
 8022246:	1c73      	adds	r3, r6, #1
 8022248:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802224c:	1236      	asrs	r6, r6, #8
 802224e:	7086      	strb	r6, [r0, #2]
 8022250:	e7ca      	b.n	80221e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8022252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022254:	4428      	add	r0, r5
 8022256:	441f      	add	r7, r3
 8022258:	e7a8      	b.n	80221ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 802225a:	4b03      	ldr	r3, [pc, #12]	@ (8022268 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 802225c:	6818      	ldr	r0, [r3, #0]
 802225e:	6803      	ldr	r3, [r0, #0]
 8022260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022262:	4798      	blx	r3
 8022264:	e782      	b.n	802216c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8022266:	bf00      	nop
 8022268:	240285b4 	.word	0x240285b4
 802226c:	240285ae 	.word	0x240285ae

08022270 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022274:	b091      	sub	sp, #68	@ 0x44
 8022276:	4680      	mov	r8, r0
 8022278:	460e      	mov	r6, r1
 802227a:	6810      	ldr	r0, [r2, #0]
 802227c:	6851      	ldr	r1, [r2, #4]
 802227e:	ad0c      	add	r5, sp, #48	@ 0x30
 8022280:	4614      	mov	r4, r2
 8022282:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 8022286:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8022420 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 802228a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8022424 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802228e:	c503      	stmia	r5!, {r0, r1}
 8022290:	6818      	ldr	r0, [r3, #0]
 8022292:	ad0e      	add	r5, sp, #56	@ 0x38
 8022294:	6859      	ldr	r1, [r3, #4]
 8022296:	c503      	stmia	r5!, {r0, r1}
 8022298:	a80c      	add	r0, sp, #48	@ 0x30
 802229a:	f7f8 f94b 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802229e:	4621      	mov	r1, r4
 80222a0:	a80e      	add	r0, sp, #56	@ 0x38
 80222a2:	f7f8 f98b 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80222a6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80222aa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80222ae:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80222b2:	f8d9 0000 	ldr.w	r0, [r9]
 80222b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80222ba:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 80222be:	eb08 0401 	add.w	r4, r8, r1
 80222c2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80222c6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 80222ca:	440a      	add	r2, r1
 80222cc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80222d0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80222d4:	4413      	add	r3, r2
 80222d6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80222da:	6803      	ldr	r3, [r0, #0]
 80222dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80222de:	4798      	blx	r3
 80222e0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80222e4:	f8d9 0000 	ldr.w	r0, [r9]
 80222e8:	d022      	beq.n	8022330 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80222ea:	2200      	movs	r2, #0
 80222ec:	f04f 0c01 	mov.w	ip, #1
 80222f0:	6801      	ldr	r1, [r0, #0]
 80222f2:	b2ad      	uxth	r5, r5
 80222f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80222f8:	e9cd c208 	strd	ip, r2, [sp, #32]
 80222fc:	f04f 0c0b 	mov.w	ip, #11
 8022300:	f8cd c01c 	str.w	ip, [sp, #28]
 8022304:	f8ba c000 	ldrh.w	ip, [sl]
 8022308:	9704      	str	r7, [sp, #16]
 802230a:	9502      	str	r5, [sp, #8]
 802230c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8022310:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8022314:	9203      	str	r2, [sp, #12]
 8022316:	fa1f f288 	uxth.w	r2, r8
 802231a:	9201      	str	r2, [sp, #4]
 802231c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8022320:	9200      	str	r2, [sp, #0]
 8022322:	4632      	mov	r2, r6
 8022324:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8022326:	4621      	mov	r1, r4
 8022328:	47a8      	blx	r5
 802232a:	b011      	add	sp, #68	@ 0x44
 802232c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022330:	6803      	ldr	r3, [r0, #0]
 8022332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022334:	4798      	blx	r3
 8022336:	f8ba 2000 	ldrh.w	r2, [sl]
 802233a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802233e:	f04f 0e03 	mov.w	lr, #3
 8022342:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8022346:	4355      	muls	r5, r2
 8022348:	fa1f fc87 	uxth.w	ip, r7
 802234c:	fb02 1303 	mla	r3, r2, r3, r1
 8022350:	eba2 0208 	sub.w	r2, r2, r8
 8022354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022358:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802235c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022360:	4418      	add	r0, r3
 8022362:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022364:	1943      	adds	r3, r0, r5
 8022366:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 802236a:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 802236e:	eba2 0208 	sub.w	r2, r2, r8
 8022372:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022376:	b2ad      	uxth	r5, r5
 8022378:	4298      	cmp	r0, r3
 802237a:	d24a      	bcs.n	8022412 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 802237c:	eb00 0908 	add.w	r9, r0, r8
 8022380:	4621      	mov	r1, r4
 8022382:	4548      	cmp	r0, r9
 8022384:	460c      	mov	r4, r1
 8022386:	d240      	bcs.n	802240a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8022388:	f04f 0a04 	mov.w	sl, #4
 802238c:	7824      	ldrb	r4, [r4, #0]
 802238e:	2fff      	cmp	r7, #255	@ 0xff
 8022390:	f101 0101 	add.w	r1, r1, #1
 8022394:	fb1e a404 	smlabb	r4, lr, r4, sl
 8022398:	eb06 0a04 	add.w	sl, r6, r4
 802239c:	f816 b004 	ldrb.w	fp, [r6, r4]
 80223a0:	d02b      	beq.n	80223fa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80223a2:	7804      	ldrb	r4, [r0, #0]
 80223a4:	fb14 f405 	smulbb	r4, r4, r5
 80223a8:	fb0b 440c 	mla	r4, fp, ip, r4
 80223ac:	b2a4      	uxth	r4, r4
 80223ae:	f104 0b01 	add.w	fp, r4, #1
 80223b2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80223b6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80223ba:	fb1b fb05 	smulbb	fp, fp, r5
 80223be:	1224      	asrs	r4, r4, #8
 80223c0:	7004      	strb	r4, [r0, #0]
 80223c2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80223c6:	fb04 b40c 	mla	r4, r4, ip, fp
 80223ca:	b2a4      	uxth	r4, r4
 80223cc:	f104 0b01 	add.w	fp, r4, #1
 80223d0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80223d4:	1224      	asrs	r4, r4, #8
 80223d6:	7044      	strb	r4, [r0, #1]
 80223d8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80223dc:	f890 a002 	ldrb.w	sl, [r0, #2]
 80223e0:	fb1a fa05 	smulbb	sl, sl, r5
 80223e4:	fb04 a40c 	mla	r4, r4, ip, sl
 80223e8:	b2a4      	uxth	r4, r4
 80223ea:	f104 0a01 	add.w	sl, r4, #1
 80223ee:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80223f2:	1224      	asrs	r4, r4, #8
 80223f4:	7084      	strb	r4, [r0, #2]
 80223f6:	3003      	adds	r0, #3
 80223f8:	e7c3      	b.n	8022382 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 80223fa:	f880 b000 	strb.w	fp, [r0]
 80223fe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022402:	7044      	strb	r4, [r0, #1]
 8022404:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8022408:	e7f4      	b.n	80223f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 802240a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802240c:	4420      	add	r0, r4
 802240e:	188c      	adds	r4, r1, r2
 8022410:	e7b2      	b.n	8022378 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8022412:	4b03      	ldr	r3, [pc, #12]	@ (8022420 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022414:	6818      	ldr	r0, [r3, #0]
 8022416:	6803      	ldr	r3, [r0, #0]
 8022418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802241a:	4798      	blx	r3
 802241c:	e785      	b.n	802232a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 802241e:	bf00      	nop
 8022420:	240285b4 	.word	0x240285b4
 8022424:	240285ae 	.word	0x240285ae

08022428 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022428:	b4f0      	push	{r4, r5, r6, r7}
 802242a:	460c      	mov	r4, r1
 802242c:	4611      	mov	r1, r2
 802242e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8022432:	461a      	mov	r2, r3
 8022434:	780f      	ldrb	r7, [r1, #0]
 8022436:	9b04      	ldr	r3, [sp, #16]
 8022438:	784e      	ldrb	r6, [r1, #1]
 802243a:	b11f      	cbz	r7, 8022444 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 802243c:	2f01      	cmp	r7, #1
 802243e:	d01d      	beq.n	802247c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8022440:	bcf0      	pop	{r4, r5, r6, r7}
 8022442:	4770      	bx	lr
 8022444:	2e03      	cmp	r6, #3
 8022446:	d8fb      	bhi.n	8022440 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022448:	e8df f006 	tbb	[pc, r6]
 802244c:	16140702 	.word	0x16140702
 8022450:	9504      	str	r5, [sp, #16]
 8022452:	4620      	mov	r0, r4
 8022454:	bcf0      	pop	{r4, r5, r6, r7}
 8022456:	f7ff be33 	b.w	80220c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802245a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 802245c:	2800      	cmp	r0, #0
 802245e:	d0ef      	beq.n	8022440 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022460:	6806      	ldr	r6, [r0, #0]
 8022462:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8022466:	68f5      	ldr	r5, [r6, #12]
 8022468:	4613      	mov	r3, r2
 802246a:	46ac      	mov	ip, r5
 802246c:	460a      	mov	r2, r1
 802246e:	4621      	mov	r1, r4
 8022470:	bcf0      	pop	{r4, r5, r6, r7}
 8022472:	4760      	bx	ip
 8022474:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8022476:	e7f1      	b.n	802245c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8022478:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 802247a:	e7ef      	b.n	802245c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 802247c:	2e03      	cmp	r6, #3
 802247e:	d8df      	bhi.n	8022440 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022480:	e8df f006 	tbb	[pc, r6]
 8022484:	110f0702 	.word	0x110f0702
 8022488:	9504      	str	r5, [sp, #16]
 802248a:	4620      	mov	r0, r4
 802248c:	bcf0      	pop	{r4, r5, r6, r7}
 802248e:	f7ff beef 	b.w	8022270 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022492:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8022494:	2800      	cmp	r0, #0
 8022496:	d0d3      	beq.n	8022440 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8022498:	6806      	ldr	r6, [r0, #0]
 802249a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 802249e:	68b5      	ldr	r5, [r6, #8]
 80224a0:	e7e2      	b.n	8022468 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80224a2:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80224a4:	e7f6      	b.n	8022494 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 80224a6:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 80224a8:	e7f4      	b.n	8022494 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

080224ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80224ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80224b0:	4605      	mov	r5, r0
 80224b2:	b08f      	sub	sp, #60	@ 0x3c
 80224b4:	460c      	mov	r4, r1
 80224b6:	461f      	mov	r7, r3
 80224b8:	2b00      	cmp	r3, #0
 80224ba:	d052      	beq.n	8022562 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80224bc:	6808      	ldr	r0, [r1, #0]
 80224be:	ab0a      	add	r3, sp, #40	@ 0x28
 80224c0:	6849      	ldr	r1, [r1, #4]
 80224c2:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 802268c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80224c6:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8022690 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80224ca:	c303      	stmia	r3!, {r0, r1}
 80224cc:	6810      	ldr	r0, [r2, #0]
 80224ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80224d0:	6851      	ldr	r1, [r2, #4]
 80224d2:	c303      	stmia	r3!, {r0, r1}
 80224d4:	a80a      	add	r0, sp, #40	@ 0x28
 80224d6:	f7f8 f82d 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224da:	4621      	mov	r1, r4
 80224dc:	a80c      	add	r0, sp, #48	@ 0x30
 80224de:	f7f8 f86d 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80224e2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80224e6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80224ea:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80224ee:	f8d8 0000 	ldr.w	r0, [r8]
 80224f2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80224f6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 80224fa:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80224fe:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8022502:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022506:	440a      	add	r2, r1
 8022508:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802250c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022510:	4413      	add	r3, r2
 8022512:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022516:	6803      	ldr	r3, [r0, #0]
 8022518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802251a:	4798      	blx	r3
 802251c:	2fff      	cmp	r7, #255	@ 0xff
 802251e:	d023      	beq.n	8022568 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8022520:	f010 0f04 	tst.w	r0, #4
 8022524:	f8d8 0000 	ldr.w	r0, [r8]
 8022528:	d021      	beq.n	802256e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 802252a:	2100      	movs	r1, #0
 802252c:	f04f 0e01 	mov.w	lr, #1
 8022530:	f8d0 c000 	ldr.w	ip, [r0]
 8022534:	b2a4      	uxth	r4, r4
 8022536:	9106      	str	r1, [sp, #24]
 8022538:	b2b6      	uxth	r6, r6
 802253a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 802253e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022542:	e9cd e107 	strd	lr, r1, [sp, #28]
 8022546:	f8b9 e000 	ldrh.w	lr, [r9]
 802254a:	9703      	str	r7, [sp, #12]
 802254c:	9401      	str	r4, [sp, #4]
 802254e:	9600      	str	r6, [sp, #0]
 8022550:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022554:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8022558:	9102      	str	r1, [sp, #8]
 802255a:	4629      	mov	r1, r5
 802255c:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8022560:	47a0      	blx	r4
 8022562:	b00f      	add	sp, #60	@ 0x3c
 8022564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022568:	f010 0f01 	tst.w	r0, #1
 802256c:	e7da      	b.n	8022524 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 802256e:	6803      	ldr	r3, [r0, #0]
 8022570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022572:	4798      	blx	r3
 8022574:	f8b9 1000 	ldrh.w	r1, [r9]
 8022578:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 802257c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8022580:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022584:	434c      	muls	r4, r1
 8022586:	2fff      	cmp	r7, #255	@ 0xff
 8022588:	fb01 2303 	mla	r3, r1, r3, r2
 802258c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022590:	eba1 0106 	sub.w	r1, r1, r6
 8022594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022598:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802259c:	4418      	add	r0, r3
 802259e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80225a2:	eba3 0606 	sub.w	r6, r3, r6
 80225a6:	4404      	add	r4, r0
 80225a8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80225ac:	d04a      	beq.n	8022644 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80225ae:	43fa      	mvns	r2, r7
 80225b0:	b2bb      	uxth	r3, r7
 80225b2:	b2d7      	uxtb	r7, r2
 80225b4:	42a0      	cmp	r0, r4
 80225b6:	d263      	bcs.n	8022680 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80225b8:	eb00 0e0c 	add.w	lr, r0, ip
 80225bc:	4586      	cmp	lr, r0
 80225be:	f100 0803 	add.w	r8, r0, #3
 80225c2:	d93a      	bls.n	802263a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80225c4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80225c8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80225cc:	00d0      	lsls	r0, r2, #3
 80225ce:	fb19 f907 	smulbb	r9, r9, r7
 80225d2:	b2c0      	uxtb	r0, r0
 80225d4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80225d8:	fb00 9003 	mla	r0, r0, r3, r9
 80225dc:	b280      	uxth	r0, r0
 80225de:	f100 0901 	add.w	r9, r0, #1
 80225e2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80225e6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80225ea:	fb19 f907 	smulbb	r9, r9, r7
 80225ee:	1200      	asrs	r0, r0, #8
 80225f0:	f808 0c03 	strb.w	r0, [r8, #-3]
 80225f4:	10d0      	asrs	r0, r2, #3
 80225f6:	1212      	asrs	r2, r2, #8
 80225f8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80225fc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8022600:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8022604:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022608:	fb00 9003 	mla	r0, r0, r3, r9
 802260c:	b280      	uxth	r0, r0
 802260e:	f100 0901 	add.w	r9, r0, #1
 8022612:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8022616:	1200      	asrs	r0, r0, #8
 8022618:	f808 0c02 	strb.w	r0, [r8, #-2]
 802261c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8022620:	fb10 f007 	smulbb	r0, r0, r7
 8022624:	fb02 0203 	mla	r2, r2, r3, r0
 8022628:	b292      	uxth	r2, r2
 802262a:	1c50      	adds	r0, r2, #1
 802262c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022630:	4640      	mov	r0, r8
 8022632:	1212      	asrs	r2, r2, #8
 8022634:	f808 2c01 	strb.w	r2, [r8, #-1]
 8022638:	e7c0      	b.n	80225bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 802263a:	4408      	add	r0, r1
 802263c:	4435      	add	r5, r6
 802263e:	e7b9      	b.n	80225b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8022640:	4408      	add	r0, r1
 8022642:	4435      	add	r5, r6
 8022644:	42a0      	cmp	r0, r4
 8022646:	d21b      	bcs.n	8022680 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8022648:	eb00 070c 	add.w	r7, r0, ip
 802264c:	42b8      	cmp	r0, r7
 802264e:	d2f7      	bcs.n	8022640 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8022650:	f835 3b02 	ldrh.w	r3, [r5], #2
 8022654:	3003      	adds	r0, #3
 8022656:	00da      	lsls	r2, r3, #3
 8022658:	b2d2      	uxtb	r2, r2
 802265a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802265e:	f800 2c03 	strb.w	r2, [r0, #-3]
 8022662:	10da      	asrs	r2, r3, #3
 8022664:	121b      	asrs	r3, r3, #8
 8022666:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802266a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802266e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022672:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022676:	f800 2c02 	strb.w	r2, [r0, #-2]
 802267a:	f800 3c01 	strb.w	r3, [r0, #-1]
 802267e:	e7e5      	b.n	802264c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8022680:	4b02      	ldr	r3, [pc, #8]	@ (802268c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8022682:	6818      	ldr	r0, [r3, #0]
 8022684:	6803      	ldr	r3, [r0, #0]
 8022686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022688:	4798      	blx	r3
 802268a:	e76a      	b.n	8022562 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802268c:	240285b4 	.word	0x240285b4
 8022690:	240285ae 	.word	0x240285ae

08022694 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022698:	b08a      	sub	sp, #40	@ 0x28
 802269a:	460d      	mov	r5, r1
 802269c:	4604      	mov	r4, r0
 802269e:	461e      	mov	r6, r3
 80226a0:	6808      	ldr	r0, [r1, #0]
 80226a2:	ab06      	add	r3, sp, #24
 80226a4:	6849      	ldr	r1, [r1, #4]
 80226a6:	4f5d      	ldr	r7, [pc, #372]	@ (802281c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80226a8:	c303      	stmia	r3!, {r0, r1}
 80226aa:	6810      	ldr	r0, [r2, #0]
 80226ac:	ab08      	add	r3, sp, #32
 80226ae:	6851      	ldr	r1, [r2, #4]
 80226b0:	c303      	stmia	r3!, {r0, r1}
 80226b2:	a806      	add	r0, sp, #24
 80226b4:	f7f7 ff3e 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226b8:	4629      	mov	r1, r5
 80226ba:	a808      	add	r0, sp, #32
 80226bc:	f7f7 ff7e 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80226c0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80226c4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80226c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80226cc:	6838      	ldr	r0, [r7, #0]
 80226ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80226d2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80226d6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80226da:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80226de:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80226e2:	440a      	add	r2, r1
 80226e4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80226e8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80226ec:	4413      	add	r3, r2
 80226ee:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80226f2:	6803      	ldr	r3, [r0, #0]
 80226f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80226f6:	4798      	blx	r3
 80226f8:	2eff      	cmp	r6, #255	@ 0xff
 80226fa:	d119      	bne.n	8022730 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80226fc:	f010 0f20 	tst.w	r0, #32
 8022700:	6838      	ldr	r0, [r7, #0]
 8022702:	d018      	beq.n	8022736 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8022704:	b2ad      	uxth	r5, r5
 8022706:	2700      	movs	r7, #0
 8022708:	6801      	ldr	r1, [r0, #0]
 802270a:	9501      	str	r5, [sp, #4]
 802270c:	fa1f f588 	uxth.w	r5, r8
 8022710:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8022714:	9500      	str	r5, [sp, #0]
 8022716:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802271a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 802271e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022722:	9602      	str	r6, [sp, #8]
 8022724:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8022726:	4621      	mov	r1, r4
 8022728:	47a8      	blx	r5
 802272a:	b00a      	add	sp, #40	@ 0x28
 802272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022730:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8022734:	e7e4      	b.n	8022700 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8022736:	6803      	ldr	r3, [r0, #0]
 8022738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802273a:	4798      	blx	r3
 802273c:	4b38      	ldr	r3, [pc, #224]	@ (8022820 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 802273e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022742:	f8b3 c000 	ldrh.w	ip, [r3]
 8022746:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 802274a:	fb0c f505 	mul.w	r5, ip, r5
 802274e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8022752:	fb0c 2303 	mla	r3, ip, r3, r2
 8022756:	ebac 0c08 	sub.w	ip, ip, r8
 802275a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802275e:	ebae 0e08 	sub.w	lr, lr, r8
 8022762:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022766:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802276a:	4418      	add	r0, r3
 802276c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8022770:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8022774:	4405      	add	r5, r0
 8022776:	42a8      	cmp	r0, r5
 8022778:	d24a      	bcs.n	8022810 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 802277a:	eb00 0803 	add.w	r8, r0, r3
 802277e:	4540      	cmp	r0, r8
 8022780:	d243      	bcs.n	802280a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8022782:	78e2      	ldrb	r2, [r4, #3]
 8022784:	b15a      	cbz	r2, 802279e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8022786:	2aff      	cmp	r2, #255	@ 0xff
 8022788:	f894 9000 	ldrb.w	r9, [r4]
 802278c:	d10a      	bne.n	80227a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 802278e:	2eff      	cmp	r6, #255	@ 0xff
 8022790:	d108      	bne.n	80227a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8022792:	f880 9000 	strb.w	r9, [r0]
 8022796:	7862      	ldrb	r2, [r4, #1]
 8022798:	7042      	strb	r2, [r0, #1]
 802279a:	78a2      	ldrb	r2, [r4, #2]
 802279c:	7082      	strb	r2, [r0, #2]
 802279e:	3003      	adds	r0, #3
 80227a0:	3404      	adds	r4, #4
 80227a2:	e7ec      	b.n	802277e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80227a4:	4372      	muls	r2, r6
 80227a6:	1c51      	adds	r1, r2, #1
 80227a8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80227ac:	1209      	asrs	r1, r1, #8
 80227ae:	fa1f fa81 	uxth.w	sl, r1
 80227b2:	43c9      	mvns	r1, r1
 80227b4:	fb19 f90a 	smulbb	r9, r9, sl
 80227b8:	b2ca      	uxtb	r2, r1
 80227ba:	7801      	ldrb	r1, [r0, #0]
 80227bc:	fb01 9902 	mla	r9, r1, r2, r9
 80227c0:	fa1f f989 	uxth.w	r9, r9
 80227c4:	f109 0101 	add.w	r1, r9, #1
 80227c8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80227cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80227d0:	f880 9000 	strb.w	r9, [r0]
 80227d4:	f890 9001 	ldrb.w	r9, [r0, #1]
 80227d8:	7861      	ldrb	r1, [r4, #1]
 80227da:	fb19 f902 	smulbb	r9, r9, r2
 80227de:	fb01 910a 	mla	r1, r1, sl, r9
 80227e2:	b289      	uxth	r1, r1
 80227e4:	f101 0901 	add.w	r9, r1, #1
 80227e8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80227ec:	1209      	asrs	r1, r1, #8
 80227ee:	7041      	strb	r1, [r0, #1]
 80227f0:	7881      	ldrb	r1, [r0, #2]
 80227f2:	f894 9002 	ldrb.w	r9, [r4, #2]
 80227f6:	fb11 f202 	smulbb	r2, r1, r2
 80227fa:	fb09 220a 	mla	r2, r9, sl, r2
 80227fe:	b292      	uxth	r2, r2
 8022800:	1c51      	adds	r1, r2, #1
 8022802:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022806:	1212      	asrs	r2, r2, #8
 8022808:	e7c8      	b.n	802279c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 802280a:	4460      	add	r0, ip
 802280c:	4474      	add	r4, lr
 802280e:	e7b2      	b.n	8022776 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8022810:	6838      	ldr	r0, [r7, #0]
 8022812:	6803      	ldr	r3, [r0, #0]
 8022814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022816:	4798      	blx	r3
 8022818:	e787      	b.n	802272a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 802281a:	bf00      	nop
 802281c:	240285b4 	.word	0x240285b4
 8022820:	240285ae 	.word	0x240285ae

08022824 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022828:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 802282c:	4607      	mov	r7, r0
 802282e:	460c      	mov	r4, r1
 8022830:	4692      	mov	sl, r2
 8022832:	4699      	mov	r9, r3
 8022834:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022836:	b335      	cbz	r5, 8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8022838:	4608      	mov	r0, r1
 802283a:	f7fb fd93 	bl	801e364 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802283e:	4680      	mov	r8, r0
 8022840:	4620      	mov	r0, r4
 8022842:	f7fb fdc3 	bl	801e3cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022846:	f8ad 000e 	strh.w	r0, [sp, #14]
 802284a:	4620      	mov	r0, r4
 802284c:	f8ad a008 	strh.w	sl, [sp, #8]
 8022850:	f8ad 900a 	strh.w	r9, [sp, #10]
 8022854:	f8ad 800c 	strh.w	r8, [sp, #12]
 8022858:	f7fb fefa 	bl	801e650 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802285c:	2810      	cmp	r0, #16
 802285e:	d812      	bhi.n	8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8022860:	e8df f000 	tbb	[pc, r0]
 8022864:	11092d24 	.word	0x11092d24
 8022868:	11111111 	.word	0x11111111
 802286c:	14111111 	.word	0x14111111
 8022870:	4c111111 	.word	0x4c111111
 8022874:	3c          	.byte	0x3c
 8022875:	00          	.byte	0x00
 8022876:	4620      	mov	r0, r4
 8022878:	f7fb fe66 	bl	801e548 <_ZNK8touchgfx6Bitmap7getDataEv>
 802287c:	462b      	mov	r3, r5
 802287e:	4632      	mov	r2, r6
 8022880:	a902      	add	r1, sp, #8
 8022882:	f7ff ff07 	bl	8022694 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022886:	b004      	add	sp, #16
 8022888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802288c:	4620      	mov	r0, r4
 802288e:	f7fb fe5b 	bl	801e548 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022892:	4680      	mov	r8, r0
 8022894:	4620      	mov	r0, r4
 8022896:	f7fb fe87 	bl	801e5a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802289a:	ab02      	add	r3, sp, #8
 802289c:	4602      	mov	r2, r0
 802289e:	4641      	mov	r1, r8
 80228a0:	4638      	mov	r0, r7
 80228a2:	e9cd 6500 	strd	r6, r5, [sp]
 80228a6:	f7ff fdbf 	bl	8022428 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80228aa:	e7ec      	b.n	8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80228ac:	4620      	mov	r0, r4
 80228ae:	f7fb fe4b 	bl	801e548 <_ZNK8touchgfx6Bitmap7getDataEv>
 80228b2:	462b      	mov	r3, r5
 80228b4:	4632      	mov	r2, r6
 80228b6:	a902      	add	r1, sp, #8
 80228b8:	f7ff fdf8 	bl	80224ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80228bc:	e7e3      	b.n	8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80228be:	683b      	ldr	r3, [r7, #0]
 80228c0:	4620      	mov	r0, r4
 80228c2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80228c6:	f7fb fe3f 	bl	801e548 <_ZNK8touchgfx6Bitmap7getDataEv>
 80228ca:	2300      	movs	r3, #0
 80228cc:	4601      	mov	r1, r0
 80228ce:	aa02      	add	r2, sp, #8
 80228d0:	4638      	mov	r0, r7
 80228d2:	e9cd 5300 	strd	r5, r3, [sp]
 80228d6:	4633      	mov	r3, r6
 80228d8:	47c0      	blx	r8
 80228da:	e7d4      	b.n	8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80228dc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80228de:	2f00      	cmp	r7, #0
 80228e0:	d0d1      	beq.n	8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80228e2:	683b      	ldr	r3, [r7, #0]
 80228e4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80228e8:	4620      	mov	r0, r4
 80228ea:	f7fb fe2d 	bl	801e548 <_ZNK8touchgfx6Bitmap7getDataEv>
 80228ee:	9500      	str	r5, [sp, #0]
 80228f0:	4601      	mov	r1, r0
 80228f2:	4633      	mov	r3, r6
 80228f4:	aa02      	add	r2, sp, #8
 80228f6:	4638      	mov	r0, r7
 80228f8:	47c0      	blx	r8
 80228fa:	e7c4      	b.n	8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80228fc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 80228fe:	2f00      	cmp	r7, #0
 8022900:	d0c1      	beq.n	8022886 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8022902:	683b      	ldr	r3, [r7, #0]
 8022904:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8022908:	e7ee      	b.n	80228e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0802290a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802290a:	b4f0      	push	{r4, r5, r6, r7}
 802290c:	4616      	mov	r6, r2
 802290e:	461c      	mov	r4, r3
 8022910:	460d      	mov	r5, r1
 8022912:	9a04      	ldr	r2, [sp, #16]
 8022914:	2e01      	cmp	r6, #1
 8022916:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802291a:	d00e      	beq.n	802293a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 802291c:	d303      	bcc.n	8022926 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 802291e:	2e02      	cmp	r6, #2
 8022920:	d006      	beq.n	8022930 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8022922:	bcf0      	pop	{r4, r5, r6, r7}
 8022924:	4770      	bx	lr
 8022926:	4621      	mov	r1, r4
 8022928:	4628      	mov	r0, r5
 802292a:	bcf0      	pop	{r4, r5, r6, r7}
 802292c:	f7ff bdbe 	b.w	80224ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8022930:	4621      	mov	r1, r4
 8022932:	4628      	mov	r0, r5
 8022934:	bcf0      	pop	{r4, r5, r6, r7}
 8022936:	f7ff bead 	b.w	8022694 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802293a:	6805      	ldr	r5, [r0, #0]
 802293c:	2600      	movs	r6, #0
 802293e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8022942:	68ed      	ldr	r5, [r5, #12]
 8022944:	4613      	mov	r3, r2
 8022946:	4622      	mov	r2, r4
 8022948:	46ac      	mov	ip, r5
 802294a:	bcf0      	pop	{r4, r5, r6, r7}
 802294c:	4760      	bx	ip
	...

08022950 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8022950:	b160      	cbz	r0, 802296c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8022952:	2903      	cmp	r1, #3
 8022954:	d818      	bhi.n	8022988 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8022956:	e8df f001 	tbb	[pc, r1]
 802295a:	1902      	.short	0x1902
 802295c:	1b06      	.short	0x1b06
 802295e:	4b0e      	ldr	r3, [pc, #56]	@ (8022998 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8022960:	8818      	ldrh	r0, [r3, #0]
 8022962:	4240      	negs	r0, r0
 8022964:	4770      	bx	lr
 8022966:	4b0c      	ldr	r3, [pc, #48]	@ (8022998 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8022968:	8818      	ldrh	r0, [r3, #0]
 802296a:	4770      	bx	lr
 802296c:	2903      	cmp	r1, #3
 802296e:	d80b      	bhi.n	8022988 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8022970:	a301      	add	r3, pc, #4	@ (adr r3, 8022978 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8022972:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8022976:	bf00      	nop
 8022978:	0802298d 	.word	0x0802298d
 802297c:	08022967 	.word	0x08022967
 8022980:	08022991 	.word	0x08022991
 8022984:	0802295f 	.word	0x0802295f
 8022988:	2000      	movs	r0, #0
 802298a:	4770      	bx	lr
 802298c:	2001      	movs	r0, #1
 802298e:	4770      	bx	lr
 8022990:	f04f 30ff 	mov.w	r0, #4294967295
 8022994:	4770      	bx	lr
 8022996:	bf00      	nop
 8022998:	240285ae 	.word	0x240285ae

0802299c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 802299c:	b160      	cbz	r0, 80229b8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 802299e:	2903      	cmp	r1, #3
 80229a0:	d818      	bhi.n	80229d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80229a2:	e8df f001 	tbb	[pc, r1]
 80229a6:	0219      	.short	0x0219
 80229a8:	051b      	.short	0x051b
 80229aa:	4b0e      	ldr	r3, [pc, #56]	@ (80229e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80229ac:	8818      	ldrh	r0, [r3, #0]
 80229ae:	4770      	bx	lr
 80229b0:	4b0c      	ldr	r3, [pc, #48]	@ (80229e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80229b2:	8818      	ldrh	r0, [r3, #0]
 80229b4:	4240      	negs	r0, r0
 80229b6:	4770      	bx	lr
 80229b8:	2903      	cmp	r1, #3
 80229ba:	d80b      	bhi.n	80229d4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80229bc:	a301      	add	r3, pc, #4	@ (adr r3, 80229c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 80229be:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80229c2:	bf00      	nop
 80229c4:	080229ab 	.word	0x080229ab
 80229c8:	080229dd 	.word	0x080229dd
 80229cc:	080229b1 	.word	0x080229b1
 80229d0:	080229d9 	.word	0x080229d9
 80229d4:	2000      	movs	r0, #0
 80229d6:	4770      	bx	lr
 80229d8:	2001      	movs	r0, #1
 80229da:	4770      	bx	lr
 80229dc:	f04f 30ff 	mov.w	r0, #4294967295
 80229e0:	4770      	bx	lr
 80229e2:	bf00      	nop
 80229e4:	240285ae 	.word	0x240285ae

080229e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80229e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229ec:	b097      	sub	sp, #92	@ 0x5c
 80229ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 80229f0:	a912      	add	r1, sp, #72	@ 0x48
 80229f2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 80229f6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 80229fa:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 80229fe:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8022a02:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8022a06:	e881 000c 	stmia.w	r1, {r2, r3}
 8022a0a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8022a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a10:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8022a14:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8022a18:	9311      	str	r3, [sp, #68]	@ 0x44
 8022a1a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8022a1e:	798d      	ldrb	r5, [r1, #6]
 8022a20:	930c      	str	r3, [sp, #48]	@ 0x30
 8022a22:	7b4b      	ldrb	r3, [r1, #13]
 8022a24:	0158      	lsls	r0, r3, #5
 8022a26:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8022a2a:	4328      	orrs	r0, r5
 8022a2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8022a2e:	f000 817c 	beq.w	8022d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022a32:	011b      	lsls	r3, r3, #4
 8022a34:	79c8      	ldrb	r0, [r1, #7]
 8022a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022a3a:	4303      	orrs	r3, r0
 8022a3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022a3e:	f000 8174 	beq.w	8022d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022a42:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022a46:	b29b      	uxth	r3, r3
 8022a48:	2f00      	cmp	r7, #0
 8022a4a:	f000 8116 	beq.w	8022c7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8022a4e:	1aff      	subs	r7, r7, r3
 8022a50:	b2bf      	uxth	r7, r7
 8022a52:	043b      	lsls	r3, r7, #16
 8022a54:	d502      	bpl.n	8022a5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8022a56:	1bf6      	subs	r6, r6, r7
 8022a58:	2700      	movs	r7, #0
 8022a5a:	b236      	sxth	r6, r6
 8022a5c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022a60:	a812      	add	r0, sp, #72	@ 0x48
 8022a62:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8022a66:	428e      	cmp	r6, r1
 8022a68:	b28b      	uxth	r3, r1
 8022a6a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8022a6e:	bfbf      	itttt	lt
 8022a70:	18ff      	addlt	r7, r7, r3
 8022a72:	1bbe      	sublt	r6, r7, r6
 8022a74:	b2b7      	uxthlt	r7, r6
 8022a76:	460e      	movlt	r6, r1
 8022a78:	8891      	ldrh	r1, [r2, #4]
 8022a7a:	440b      	add	r3, r1
 8022a7c:	4631      	mov	r1, r6
 8022a7e:	b21b      	sxth	r3, r3
 8022a80:	9310      	str	r3, [sp, #64]	@ 0x40
 8022a82:	88d3      	ldrh	r3, [r2, #6]
 8022a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022a86:	449a      	add	sl, r3
 8022a88:	fa0f f38a 	sxth.w	r3, sl
 8022a8c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8022a90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022a92:	4bb5      	ldr	r3, [pc, #724]	@ (8022d68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8022a94:	f893 b000 	ldrb.w	fp, [r3]
 8022a98:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022a9c:	f1dc 0300 	rsbs	r3, ip, #0
 8022aa0:	eb43 030c 	adc.w	r3, r3, ip
 8022aa4:	930d      	str	r3, [sp, #52]	@ 0x34
 8022aa6:	464b      	mov	r3, r9
 8022aa8:	f7f7 fbb9 	bl	801a21e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022aac:	4631      	mov	r1, r6
 8022aae:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8022ab2:	464b      	mov	r3, r9
 8022ab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022ab6:	a812      	add	r0, sp, #72	@ 0x48
 8022ab8:	f7f7 fbce 	bl	801a258 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022abc:	a916      	add	r1, sp, #88	@ 0x58
 8022abe:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022ac2:	a815      	add	r0, sp, #84	@ 0x54
 8022ac4:	f7f7 fcf4 	bl	801a4b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022ac8:	f1b9 0f00 	cmp.w	r9, #0
 8022acc:	f040 80d8 	bne.w	8022c80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8022ad0:	f1bb 0f01 	cmp.w	fp, #1
 8022ad4:	f040 80dc 	bne.w	8022c90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8022ad8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022ada:	b153      	cbz	r3, 8022af2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8022adc:	2508      	movs	r5, #8
 8022ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022ae0:	fb95 f3f8 	sdiv	r3, r5, r8
 8022ae4:	1e5d      	subs	r5, r3, #1
 8022ae6:	4415      	add	r5, r2
 8022ae8:	fb95 f5f3 	sdiv	r5, r5, r3
 8022aec:	fb15 f503 	smulbb	r5, r5, r3
 8022af0:	b2ad      	uxth	r5, r5
 8022af2:	b907      	cbnz	r7, 8022af6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022af4:	b16c      	cbz	r4, 8022b12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8022af6:	fb04 7305 	mla	r3, r4, r5, r7
 8022afa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022afc:	ebaa 0a04 	sub.w	sl, sl, r4
 8022b00:	fb08 f303 	mul.w	r3, r8, r3
 8022b04:	fa1f fa8a 	uxth.w	sl, sl
 8022b08:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8022b0c:	f003 0407 	and.w	r4, r3, #7
 8022b10:	9226      	str	r2, [sp, #152]	@ 0x98
 8022b12:	4649      	mov	r1, r9
 8022b14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022b16:	f7ff ff1b 	bl	8022950 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8022b1a:	4683      	mov	fp, r0
 8022b1c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022b1e:	f7ff ff3d 	bl	802299c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8022b22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022b26:	4681      	mov	r9, r0
 8022b28:	1a9b      	subs	r3, r3, r2
 8022b2a:	459a      	cmp	sl, r3
 8022b2c:	bfa8      	it	ge
 8022b2e:	469a      	movge	sl, r3
 8022b30:	f1ba 0f00 	cmp.w	sl, #0
 8022b34:	f340 80f9 	ble.w	8022d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022b38:	1bf6      	subs	r6, r6, r7
 8022b3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022b3c:	1b9e      	subs	r6, r3, r6
 8022b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b40:	429e      	cmp	r6, r3
 8022b42:	bfd4      	ite	le
 8022b44:	ebc7 0706 	rsble	r7, r7, r6
 8022b48:	ebc7 0703 	rsbgt	r7, r7, r3
 8022b4c:	2f00      	cmp	r7, #0
 8022b4e:	f340 80ec 	ble.w	8022d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022b52:	1bed      	subs	r5, r5, r7
 8022b54:	fb08 f305 	mul.w	r3, r8, r5
 8022b58:	930d      	str	r3, [sp, #52]	@ 0x34
 8022b5a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022b5c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022b60:	930e      	str	r3, [sp, #56]	@ 0x38
 8022b62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022b64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022b6a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022b6c:	b2db      	uxtb	r3, r3
 8022b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8022b70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	f040 80de 	bne.w	8022d34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8022b78:	4b7c      	ldr	r3, [pc, #496]	@ (8022d6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8022b7a:	6818      	ldr	r0, [r3, #0]
 8022b7c:	6803      	ldr	r3, [r0, #0]
 8022b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022b80:	4798      	blx	r3
 8022b82:	2301      	movs	r3, #1
 8022b84:	4a7a      	ldr	r2, [pc, #488]	@ (8022d70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8022b86:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8022b8a:	fb07 9b1b 	mls	fp, r7, fp, r9
 8022b8e:	fa03 f308 	lsl.w	r3, r3, r8
 8022b92:	8811      	ldrh	r1, [r2, #0]
 8022b94:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8022b98:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8022b9c:	3b01      	subs	r3, #1
 8022b9e:	fb06 bb07 	mla	fp, r6, r7, fp
 8022ba2:	b2db      	uxtb	r3, r3
 8022ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ba6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8022baa:	fb01 2303 	mla	r3, r1, r3, r2
 8022bae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022bb2:	18c3      	adds	r3, r0, r3
 8022bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8022bb6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022bb8:	781a      	ldrb	r2, [r3, #0]
 8022bba:	4122      	asrs	r2, r4
 8022bbc:	b2d2      	uxtb	r2, r2
 8022bbe:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022bc2:	f0c0 80d7 	bcc.w	8022d74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8022bc6:	46be      	mov	lr, r7
 8022bc8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022bca:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022bce:	f0c0 80ba 	bcc.w	8022d46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8022bd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022bd4:	4013      	ands	r3, r2
 8022bd6:	d041      	beq.n	8022c5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8022bd8:	20ff      	movs	r0, #255	@ 0xff
 8022bda:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022bdc:	fb90 f5f5 	sdiv	r5, r0, r5
 8022be0:	436b      	muls	r3, r5
 8022be2:	2bfe      	cmp	r3, #254	@ 0xfe
 8022be4:	dd03      	ble.n	8022bee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8022be6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022be8:	4285      	cmp	r5, r0
 8022bea:	f000 80a5 	beq.w	8022d38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8022bee:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022bf0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022bf2:	fb15 f303 	smulbb	r3, r5, r3
 8022bf6:	b29b      	uxth	r3, r3
 8022bf8:	1c5d      	adds	r5, r3, #1
 8022bfa:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8022bfe:	780d      	ldrb	r5, [r1, #0]
 8022c00:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022c04:	fa1f fc83 	uxth.w	ip, r3
 8022c08:	43db      	mvns	r3, r3
 8022c0a:	fb10 f90c 	smulbb	r9, r0, ip
 8022c0e:	b2db      	uxtb	r3, r3
 8022c10:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022c12:	fb05 9503 	mla	r5, r5, r3, r9
 8022c16:	b2ad      	uxth	r5, r5
 8022c18:	f105 0901 	add.w	r9, r5, #1
 8022c1c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022c20:	fb10 f90c 	smulbb	r9, r0, ip
 8022c24:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022c26:	122d      	asrs	r5, r5, #8
 8022c28:	fb10 fc0c 	smulbb	ip, r0, ip
 8022c2c:	700d      	strb	r5, [r1, #0]
 8022c2e:	784d      	ldrb	r5, [r1, #1]
 8022c30:	fb05 9503 	mla	r5, r5, r3, r9
 8022c34:	b2ad      	uxth	r5, r5
 8022c36:	f105 0901 	add.w	r9, r5, #1
 8022c3a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022c3e:	122d      	asrs	r5, r5, #8
 8022c40:	704d      	strb	r5, [r1, #1]
 8022c42:	788d      	ldrb	r5, [r1, #2]
 8022c44:	fb05 cc03 	mla	ip, r5, r3, ip
 8022c48:	fa1f fc8c 	uxth.w	ip, ip
 8022c4c:	f10c 0301 	add.w	r3, ip, #1
 8022c50:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022c54:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022c58:	f881 c002 	strb.w	ip, [r1, #2]
 8022c5c:	4444      	add	r4, r8
 8022c5e:	4431      	add	r1, r6
 8022c60:	b2a4      	uxth	r4, r4
 8022c62:	2c07      	cmp	r4, #7
 8022c64:	bf89      	itett	hi
 8022c66:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8022c68:	fa42 f208 	asrls.w	r2, r2, r8
 8022c6c:	2400      	movhi	r4, #0
 8022c6e:	785a      	ldrbhi	r2, [r3, #1]
 8022c70:	bf8a      	itet	hi
 8022c72:	3301      	addhi	r3, #1
 8022c74:	b2d2      	uxtbls	r2, r2
 8022c76:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8022c78:	e7a7      	b.n	8022bca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8022c7a:	441e      	add	r6, r3
 8022c7c:	b236      	sxth	r6, r6
 8022c7e:	e6ed      	b.n	8022a5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8022c80:	f1b9 0f01 	cmp.w	r9, #1
 8022c84:	f47f af28 	bne.w	8022ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022c88:	f1bb 0f01 	cmp.w	fp, #1
 8022c8c:	f47f af24 	bne.w	8022ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022c90:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8022d6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8022c94:	f8db 0000 	ldr.w	r0, [fp]
 8022c98:	6803      	ldr	r3, [r0, #0]
 8022c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022c9c:	4798      	blx	r3
 8022c9e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8022ca2:	465a      	mov	r2, fp
 8022ca4:	d006      	beq.n	8022cb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022ca6:	f1b8 0f04 	cmp.w	r8, #4
 8022caa:	d141      	bne.n	8022d30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8022cac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022cae:	3300      	adds	r3, #0
 8022cb0:	bf18      	it	ne
 8022cb2:	2301      	movne	r3, #1
 8022cb4:	0580      	lsls	r0, r0, #22
 8022cb6:	d566      	bpl.n	8022d86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022cb8:	f1b8 0f08 	cmp.w	r8, #8
 8022cbc:	d163      	bne.n	8022d86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	bf0c      	ite	eq
 8022cc2:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8022cc6:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8022cca:	2f00      	cmp	r7, #0
 8022ccc:	f47f af04 	bne.w	8022ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022cd0:	2c00      	cmp	r4, #0
 8022cd2:	f47f af01 	bne.w	8022ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022cd8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022cda:	18f3      	adds	r3, r6, r3
 8022cdc:	4283      	cmp	r3, r0
 8022cde:	f73f aefb 	bgt.w	8022ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022ce2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022ce6:	4403      	add	r3, r0
 8022ce8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8022cea:	4283      	cmp	r3, r0
 8022cec:	f73f aef4 	bgt.w	8022ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022cf0:	f1b8 0f08 	cmp.w	r8, #8
 8022cf4:	6810      	ldr	r0, [r2, #0]
 8022cf6:	f04f 0600 	mov.w	r6, #0
 8022cfa:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8022cfe:	bf18      	it	ne
 8022d00:	3501      	addne	r5, #1
 8022d02:	6804      	ldr	r4, [r0, #0]
 8022d04:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8022d08:	bf18      	it	ne
 8022d0a:	f025 0501 	bicne.w	r5, r5, #1
 8022d0e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8022d12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022d14:	bf18      	it	ne
 8022d16:	b2ad      	uxthne	r5, r5
 8022d18:	9104      	str	r1, [sp, #16]
 8022d1a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022d1c:	e9cd 5a00 	strd	r5, sl, [sp]
 8022d20:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8022d24:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022d26:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8022d28:	47a0      	blx	r4
 8022d2a:	b017      	add	sp, #92	@ 0x5c
 8022d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d30:	2300      	movs	r3, #0
 8022d32:	e7bf      	b.n	8022cb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8022d34:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022d36:	e724      	b.n	8022b82 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8022d38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d3a:	700b      	strb	r3, [r1, #0]
 8022d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022d3e:	704b      	strb	r3, [r1, #1]
 8022d40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022d42:	708b      	strb	r3, [r1, #2]
 8022d44:	e78a      	b.n	8022c5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8022d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022d48:	b153      	cbz	r3, 8022d60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8022d4a:	441c      	add	r4, r3
 8022d4c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022d4e:	b2a4      	uxth	r4, r4
 8022d50:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8022d54:	f004 0407 	and.w	r4, r4, #7
 8022d58:	781a      	ldrb	r2, [r3, #0]
 8022d5a:	9326      	str	r3, [sp, #152]	@ 0x98
 8022d5c:	4122      	asrs	r2, r4
 8022d5e:	b2d2      	uxtb	r2, r2
 8022d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d62:	445b      	add	r3, fp
 8022d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d66:	e72a      	b.n	8022bbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8022d68:	240285ac 	.word	0x240285ac
 8022d6c:	240285b4 	.word	0x240285b4
 8022d70:	240285ae 	.word	0x240285ae
 8022d74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022d76:	2b00      	cmp	r3, #0
 8022d78:	d1d7      	bne.n	8022d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022d7a:	4b06      	ldr	r3, [pc, #24]	@ (8022d94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8022d7c:	6818      	ldr	r0, [r3, #0]
 8022d7e:	6803      	ldr	r3, [r0, #0]
 8022d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d82:	4798      	blx	r3
 8022d84:	e7d1      	b.n	8022d2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	f43f aea6 	beq.w	8022ad8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022d8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8022d90:	e79b      	b.n	8022cca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8022d92:	bf00      	nop
 8022d94:	240285b4 	.word	0x240285b4

08022d98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022d98:	b538      	push	{r3, r4, r5, lr}
 8022d9a:	4c15      	ldr	r4, [pc, #84]	@ (8022df0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022d9c:	4605      	mov	r5, r0
 8022d9e:	7823      	ldrb	r3, [r4, #0]
 8022da0:	f3bf 8f5b 	dmb	ish
 8022da4:	07da      	lsls	r2, r3, #31
 8022da6:	d40b      	bmi.n	8022dc0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022da8:	4620      	mov	r0, r4
 8022daa:	f006 f8f7 	bl	8028f9c <__cxa_guard_acquire>
 8022dae:	b138      	cbz	r0, 8022dc0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022db0:	4620      	mov	r0, r4
 8022db2:	f006 f8ff 	bl	8028fb4 <__cxa_guard_release>
 8022db6:	4a0f      	ldr	r2, [pc, #60]	@ (8022df4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022db8:	490f      	ldr	r1, [pc, #60]	@ (8022df8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8022dba:	4810      	ldr	r0, [pc, #64]	@ (8022dfc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022dbc:	f006 f8e7 	bl	8028f8e <__aeabi_atexit>
 8022dc0:	4c0f      	ldr	r4, [pc, #60]	@ (8022e00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022dc2:	7823      	ldrb	r3, [r4, #0]
 8022dc4:	f3bf 8f5b 	dmb	ish
 8022dc8:	07db      	lsls	r3, r3, #31
 8022dca:	d40b      	bmi.n	8022de4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022dcc:	4620      	mov	r0, r4
 8022dce:	f006 f8e5 	bl	8028f9c <__cxa_guard_acquire>
 8022dd2:	b138      	cbz	r0, 8022de4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022dd4:	4620      	mov	r0, r4
 8022dd6:	f006 f8ed 	bl	8028fb4 <__cxa_guard_release>
 8022dda:	4a06      	ldr	r2, [pc, #24]	@ (8022df4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022ddc:	4909      	ldr	r1, [pc, #36]	@ (8022e04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022dde:	480a      	ldr	r0, [pc, #40]	@ (8022e08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022de0:	f006 f8d5 	bl	8028f8e <__aeabi_atexit>
 8022de4:	4b05      	ldr	r3, [pc, #20]	@ (8022dfc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022de6:	616b      	str	r3, [r5, #20]
 8022de8:	4b07      	ldr	r3, [pc, #28]	@ (8022e08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022dea:	61ab      	str	r3, [r5, #24]
 8022dec:	bd38      	pop	{r3, r4, r5, pc}
 8022dee:	bf00      	nop
 8022df0:	24028698 	.word	0x24028698
 8022df4:	24000000 	.word	0x24000000
 8022df8:	08020089 	.word	0x08020089
 8022dfc:	240000c8 	.word	0x240000c8
 8022e00:	2402869c 	.word	0x2402869c
 8022e04:	08020087 	.word	0x08020087
 8022e08:	240000cc 	.word	0x240000cc

08022e0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022e0c:	b538      	push	{r3, r4, r5, lr}
 8022e0e:	4c15      	ldr	r4, [pc, #84]	@ (8022e64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022e10:	4605      	mov	r5, r0
 8022e12:	7823      	ldrb	r3, [r4, #0]
 8022e14:	f3bf 8f5b 	dmb	ish
 8022e18:	07da      	lsls	r2, r3, #31
 8022e1a:	d40b      	bmi.n	8022e34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022e1c:	4620      	mov	r0, r4
 8022e1e:	f006 f8bd 	bl	8028f9c <__cxa_guard_acquire>
 8022e22:	b138      	cbz	r0, 8022e34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022e24:	4620      	mov	r0, r4
 8022e26:	f006 f8c5 	bl	8028fb4 <__cxa_guard_release>
 8022e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8022e68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022e2c:	490f      	ldr	r1, [pc, #60]	@ (8022e6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022e2e:	4810      	ldr	r0, [pc, #64]	@ (8022e70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022e30:	f006 f8ad 	bl	8028f8e <__aeabi_atexit>
 8022e34:	4c0f      	ldr	r4, [pc, #60]	@ (8022e74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8022e36:	7823      	ldrb	r3, [r4, #0]
 8022e38:	f3bf 8f5b 	dmb	ish
 8022e3c:	07db      	lsls	r3, r3, #31
 8022e3e:	d40b      	bmi.n	8022e58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022e40:	4620      	mov	r0, r4
 8022e42:	f006 f8ab 	bl	8028f9c <__cxa_guard_acquire>
 8022e46:	b138      	cbz	r0, 8022e58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022e48:	4620      	mov	r0, r4
 8022e4a:	f006 f8b3 	bl	8028fb4 <__cxa_guard_release>
 8022e4e:	4a06      	ldr	r2, [pc, #24]	@ (8022e68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022e50:	4909      	ldr	r1, [pc, #36]	@ (8022e78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022e52:	480a      	ldr	r0, [pc, #40]	@ (8022e7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022e54:	f006 f89b 	bl	8028f8e <__aeabi_atexit>
 8022e58:	4b05      	ldr	r3, [pc, #20]	@ (8022e70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022e5a:	60eb      	str	r3, [r5, #12]
 8022e5c:	4b07      	ldr	r3, [pc, #28]	@ (8022e7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022e5e:	612b      	str	r3, [r5, #16]
 8022e60:	bd38      	pop	{r3, r4, r5, pc}
 8022e62:	bf00      	nop
 8022e64:	24028678 	.word	0x24028678
 8022e68:	24000000 	.word	0x24000000
 8022e6c:	0802008d 	.word	0x0802008d
 8022e70:	240000a8 	.word	0x240000a8
 8022e74:	2402867c 	.word	0x2402867c
 8022e78:	0802008b 	.word	0x0802008b
 8022e7c:	240000ac 	.word	0x240000ac

08022e80 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8022e80:	b510      	push	{r4, lr}
 8022e82:	4604      	mov	r4, r0
 8022e84:	f7ff ff88 	bl	8022d98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022e88:	4620      	mov	r0, r4
 8022e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022e8e:	f7ff bfbd 	b.w	8022e0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022e94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022e94:	b538      	push	{r3, r4, r5, lr}
 8022e96:	4c15      	ldr	r4, [pc, #84]	@ (8022eec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022e98:	4605      	mov	r5, r0
 8022e9a:	7823      	ldrb	r3, [r4, #0]
 8022e9c:	f3bf 8f5b 	dmb	ish
 8022ea0:	07da      	lsls	r2, r3, #31
 8022ea2:	d40b      	bmi.n	8022ebc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022ea4:	4620      	mov	r0, r4
 8022ea6:	f006 f879 	bl	8028f9c <__cxa_guard_acquire>
 8022eaa:	b138      	cbz	r0, 8022ebc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022eac:	4620      	mov	r0, r4
 8022eae:	f006 f881 	bl	8028fb4 <__cxa_guard_release>
 8022eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8022ef0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022eb4:	490f      	ldr	r1, [pc, #60]	@ (8022ef4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022eb6:	4810      	ldr	r0, [pc, #64]	@ (8022ef8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022eb8:	f006 f869 	bl	8028f8e <__aeabi_atexit>
 8022ebc:	4c0f      	ldr	r4, [pc, #60]	@ (8022efc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022ebe:	7823      	ldrb	r3, [r4, #0]
 8022ec0:	f3bf 8f5b 	dmb	ish
 8022ec4:	07db      	lsls	r3, r3, #31
 8022ec6:	d40b      	bmi.n	8022ee0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022ec8:	4620      	mov	r0, r4
 8022eca:	f006 f867 	bl	8028f9c <__cxa_guard_acquire>
 8022ece:	b138      	cbz	r0, 8022ee0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022ed0:	4620      	mov	r0, r4
 8022ed2:	f006 f86f 	bl	8028fb4 <__cxa_guard_release>
 8022ed6:	4a06      	ldr	r2, [pc, #24]	@ (8022ef0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022ed8:	4909      	ldr	r1, [pc, #36]	@ (8022f00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022eda:	480a      	ldr	r0, [pc, #40]	@ (8022f04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022edc:	f006 f857 	bl	8028f8e <__aeabi_atexit>
 8022ee0:	4b05      	ldr	r3, [pc, #20]	@ (8022ef8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022ee2:	626b      	str	r3, [r5, #36]	@ 0x24
 8022ee4:	4b07      	ldr	r3, [pc, #28]	@ (8022f04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022ee6:	62ab      	str	r3, [r5, #40]	@ 0x28
 8022ee8:	bd38      	pop	{r3, r4, r5, pc}
 8022eea:	bf00      	nop
 8022eec:	240286a0 	.word	0x240286a0
 8022ef0:	24000000 	.word	0x24000000
 8022ef4:	08020081 	.word	0x08020081
 8022ef8:	240000d0 	.word	0x240000d0
 8022efc:	240286a4 	.word	0x240286a4
 8022f00:	0802007f 	.word	0x0802007f
 8022f04:	240000d4 	.word	0x240000d4

08022f08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022f08:	b538      	push	{r3, r4, r5, lr}
 8022f0a:	4c15      	ldr	r4, [pc, #84]	@ (8022f60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022f0c:	4605      	mov	r5, r0
 8022f0e:	7823      	ldrb	r3, [r4, #0]
 8022f10:	f3bf 8f5b 	dmb	ish
 8022f14:	07da      	lsls	r2, r3, #31
 8022f16:	d40b      	bmi.n	8022f30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022f18:	4620      	mov	r0, r4
 8022f1a:	f006 f83f 	bl	8028f9c <__cxa_guard_acquire>
 8022f1e:	b138      	cbz	r0, 8022f30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022f20:	4620      	mov	r0, r4
 8022f22:	f006 f847 	bl	8028fb4 <__cxa_guard_release>
 8022f26:	4a0f      	ldr	r2, [pc, #60]	@ (8022f64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022f28:	490f      	ldr	r1, [pc, #60]	@ (8022f68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8022f2a:	4810      	ldr	r0, [pc, #64]	@ (8022f6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022f2c:	f006 f82f 	bl	8028f8e <__aeabi_atexit>
 8022f30:	4c0f      	ldr	r4, [pc, #60]	@ (8022f70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022f32:	7823      	ldrb	r3, [r4, #0]
 8022f34:	f3bf 8f5b 	dmb	ish
 8022f38:	07db      	lsls	r3, r3, #31
 8022f3a:	d40b      	bmi.n	8022f54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022f3c:	4620      	mov	r0, r4
 8022f3e:	f006 f82d 	bl	8028f9c <__cxa_guard_acquire>
 8022f42:	b138      	cbz	r0, 8022f54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022f44:	4620      	mov	r0, r4
 8022f46:	f006 f835 	bl	8028fb4 <__cxa_guard_release>
 8022f4a:	4a06      	ldr	r2, [pc, #24]	@ (8022f64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022f4c:	4909      	ldr	r1, [pc, #36]	@ (8022f74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022f4e:	480a      	ldr	r0, [pc, #40]	@ (8022f78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022f50:	f006 f81d 	bl	8028f8e <__aeabi_atexit>
 8022f54:	4b05      	ldr	r3, [pc, #20]	@ (8022f6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022f56:	61eb      	str	r3, [r5, #28]
 8022f58:	4b07      	ldr	r3, [pc, #28]	@ (8022f78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022f5a:	622b      	str	r3, [r5, #32]
 8022f5c:	bd38      	pop	{r3, r4, r5, pc}
 8022f5e:	bf00      	nop
 8022f60:	24028680 	.word	0x24028680
 8022f64:	24000000 	.word	0x24000000
 8022f68:	08020085 	.word	0x08020085
 8022f6c:	240000b0 	.word	0x240000b0
 8022f70:	24028684 	.word	0x24028684
 8022f74:	08020083 	.word	0x08020083
 8022f78:	240000b4 	.word	0x240000b4

08022f7c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022f7c:	b510      	push	{r4, lr}
 8022f7e:	4604      	mov	r4, r0
 8022f80:	f7ff ff88 	bl	8022e94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8022f84:	4620      	mov	r0, r4
 8022f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f8a:	f7ff bfbd 	b.w	8022f08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022f90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8022f90:	b538      	push	{r3, r4, r5, lr}
 8022f92:	4c15      	ldr	r4, [pc, #84]	@ (8022fe8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8022f94:	4605      	mov	r5, r0
 8022f96:	7823      	ldrb	r3, [r4, #0]
 8022f98:	f3bf 8f5b 	dmb	ish
 8022f9c:	07da      	lsls	r2, r3, #31
 8022f9e:	d40b      	bmi.n	8022fb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022fa0:	4620      	mov	r0, r4
 8022fa2:	f005 fffb 	bl	8028f9c <__cxa_guard_acquire>
 8022fa6:	b138      	cbz	r0, 8022fb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8022fa8:	4620      	mov	r0, r4
 8022faa:	f006 f803 	bl	8028fb4 <__cxa_guard_release>
 8022fae:	4a0f      	ldr	r2, [pc, #60]	@ (8022fec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022fb0:	490f      	ldr	r1, [pc, #60]	@ (8022ff0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8022fb2:	4810      	ldr	r0, [pc, #64]	@ (8022ff4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022fb4:	f005 ffeb 	bl	8028f8e <__aeabi_atexit>
 8022fb8:	4c0f      	ldr	r4, [pc, #60]	@ (8022ff8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8022fba:	7823      	ldrb	r3, [r4, #0]
 8022fbc:	f3bf 8f5b 	dmb	ish
 8022fc0:	07db      	lsls	r3, r3, #31
 8022fc2:	d40b      	bmi.n	8022fdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022fc4:	4620      	mov	r0, r4
 8022fc6:	f005 ffe9 	bl	8028f9c <__cxa_guard_acquire>
 8022fca:	b138      	cbz	r0, 8022fdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022fcc:	4620      	mov	r0, r4
 8022fce:	f005 fff1 	bl	8028fb4 <__cxa_guard_release>
 8022fd2:	4a06      	ldr	r2, [pc, #24]	@ (8022fec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022fd4:	4909      	ldr	r1, [pc, #36]	@ (8022ffc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8022fd6:	480a      	ldr	r0, [pc, #40]	@ (8023000 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022fd8:	f005 ffd9 	bl	8028f8e <__aeabi_atexit>
 8022fdc:	4b05      	ldr	r3, [pc, #20]	@ (8022ff4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8022fde:	636b      	str	r3, [r5, #52]	@ 0x34
 8022fe0:	4b07      	ldr	r3, [pc, #28]	@ (8023000 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022fe2:	63ab      	str	r3, [r5, #56]	@ 0x38
 8022fe4:	bd38      	pop	{r3, r4, r5, pc}
 8022fe6:	bf00      	nop
 8022fe8:	24028688 	.word	0x24028688
 8022fec:	24000000 	.word	0x24000000
 8022ff0:	08020079 	.word	0x08020079
 8022ff4:	240000b8 	.word	0x240000b8
 8022ff8:	2402868c 	.word	0x2402868c
 8022ffc:	08020077 	.word	0x08020077
 8023000:	240000bc 	.word	0x240000bc

08023004 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8023004:	b538      	push	{r3, r4, r5, lr}
 8023006:	4c15      	ldr	r4, [pc, #84]	@ (802305c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8023008:	4605      	mov	r5, r0
 802300a:	7823      	ldrb	r3, [r4, #0]
 802300c:	f3bf 8f5b 	dmb	ish
 8023010:	07da      	lsls	r2, r3, #31
 8023012:	d40b      	bmi.n	802302c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023014:	4620      	mov	r0, r4
 8023016:	f005 ffc1 	bl	8028f9c <__cxa_guard_acquire>
 802301a:	b138      	cbz	r0, 802302c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 802301c:	4620      	mov	r0, r4
 802301e:	f005 ffc9 	bl	8028fb4 <__cxa_guard_release>
 8023022:	4a0f      	ldr	r2, [pc, #60]	@ (8023060 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023024:	490f      	ldr	r1, [pc, #60]	@ (8023064 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8023026:	4810      	ldr	r0, [pc, #64]	@ (8023068 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023028:	f005 ffb1 	bl	8028f8e <__aeabi_atexit>
 802302c:	4c0f      	ldr	r4, [pc, #60]	@ (802306c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802302e:	7823      	ldrb	r3, [r4, #0]
 8023030:	f3bf 8f5b 	dmb	ish
 8023034:	07db      	lsls	r3, r3, #31
 8023036:	d40b      	bmi.n	8023050 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023038:	4620      	mov	r0, r4
 802303a:	f005 ffaf 	bl	8028f9c <__cxa_guard_acquire>
 802303e:	b138      	cbz	r0, 8023050 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023040:	4620      	mov	r0, r4
 8023042:	f005 ffb7 	bl	8028fb4 <__cxa_guard_release>
 8023046:	4a06      	ldr	r2, [pc, #24]	@ (8023060 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023048:	4909      	ldr	r1, [pc, #36]	@ (8023070 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 802304a:	480a      	ldr	r0, [pc, #40]	@ (8023074 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 802304c:	f005 ff9f 	bl	8028f8e <__aeabi_atexit>
 8023050:	4b05      	ldr	r3, [pc, #20]	@ (8023068 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023052:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023054:	4b07      	ldr	r3, [pc, #28]	@ (8023074 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023056:	632b      	str	r3, [r5, #48]	@ 0x30
 8023058:	bd38      	pop	{r3, r4, r5, pc}
 802305a:	bf00      	nop
 802305c:	24028660 	.word	0x24028660
 8023060:	24000000 	.word	0x24000000
 8023064:	0802007d 	.word	0x0802007d
 8023068:	24000090 	.word	0x24000090
 802306c:	24028664 	.word	0x24028664
 8023070:	0802007b 	.word	0x0802007b
 8023074:	24000094 	.word	0x24000094

08023078 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8023078:	b510      	push	{r4, lr}
 802307a:	4604      	mov	r4, r0
 802307c:	f7ff ff88 	bl	8022f90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8023080:	4620      	mov	r0, r4
 8023082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023086:	f7ff bfbd 	b.w	8023004 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0802308c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 802308c:	b538      	push	{r3, r4, r5, lr}
 802308e:	4c15      	ldr	r4, [pc, #84]	@ (80230e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023090:	4605      	mov	r5, r0
 8023092:	7823      	ldrb	r3, [r4, #0]
 8023094:	f3bf 8f5b 	dmb	ish
 8023098:	07da      	lsls	r2, r3, #31
 802309a:	d40b      	bmi.n	80230b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802309c:	4620      	mov	r0, r4
 802309e:	f005 ff7d 	bl	8028f9c <__cxa_guard_acquire>
 80230a2:	b138      	cbz	r0, 80230b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80230a4:	4620      	mov	r0, r4
 80230a6:	f005 ff85 	bl	8028fb4 <__cxa_guard_release>
 80230aa:	4a0f      	ldr	r2, [pc, #60]	@ (80230e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80230ac:	490f      	ldr	r1, [pc, #60]	@ (80230ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80230ae:	4810      	ldr	r0, [pc, #64]	@ (80230f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80230b0:	f005 ff6d 	bl	8028f8e <__aeabi_atexit>
 80230b4:	4c0f      	ldr	r4, [pc, #60]	@ (80230f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80230b6:	7823      	ldrb	r3, [r4, #0]
 80230b8:	f3bf 8f5b 	dmb	ish
 80230bc:	07db      	lsls	r3, r3, #31
 80230be:	d40b      	bmi.n	80230d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80230c0:	4620      	mov	r0, r4
 80230c2:	f005 ff6b 	bl	8028f9c <__cxa_guard_acquire>
 80230c6:	b138      	cbz	r0, 80230d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80230c8:	4620      	mov	r0, r4
 80230ca:	f005 ff73 	bl	8028fb4 <__cxa_guard_release>
 80230ce:	4a06      	ldr	r2, [pc, #24]	@ (80230e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80230d0:	4909      	ldr	r1, [pc, #36]	@ (80230f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80230d2:	480a      	ldr	r0, [pc, #40]	@ (80230fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80230d4:	f005 ff5b 	bl	8028f8e <__aeabi_atexit>
 80230d8:	4b05      	ldr	r3, [pc, #20]	@ (80230f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80230da:	646b      	str	r3, [r5, #68]	@ 0x44
 80230dc:	4b07      	ldr	r3, [pc, #28]	@ (80230fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80230de:	64ab      	str	r3, [r5, #72]	@ 0x48
 80230e0:	bd38      	pop	{r3, r4, r5, pc}
 80230e2:	bf00      	nop
 80230e4:	24028690 	.word	0x24028690
 80230e8:	24000000 	.word	0x24000000
 80230ec:	08020071 	.word	0x08020071
 80230f0:	240000c0 	.word	0x240000c0
 80230f4:	24028694 	.word	0x24028694
 80230f8:	0802006f 	.word	0x0802006f
 80230fc:	240000c4 	.word	0x240000c4

08023100 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023100:	b538      	push	{r3, r4, r5, lr}
 8023102:	4c15      	ldr	r4, [pc, #84]	@ (8023158 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023104:	4605      	mov	r5, r0
 8023106:	7823      	ldrb	r3, [r4, #0]
 8023108:	f3bf 8f5b 	dmb	ish
 802310c:	07da      	lsls	r2, r3, #31
 802310e:	d40b      	bmi.n	8023128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023110:	4620      	mov	r0, r4
 8023112:	f005 ff43 	bl	8028f9c <__cxa_guard_acquire>
 8023116:	b138      	cbz	r0, 8023128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023118:	4620      	mov	r0, r4
 802311a:	f005 ff4b 	bl	8028fb4 <__cxa_guard_release>
 802311e:	4a0f      	ldr	r2, [pc, #60]	@ (802315c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023120:	490f      	ldr	r1, [pc, #60]	@ (8023160 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023122:	4810      	ldr	r0, [pc, #64]	@ (8023164 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023124:	f005 ff33 	bl	8028f8e <__aeabi_atexit>
 8023128:	4c0f      	ldr	r4, [pc, #60]	@ (8023168 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802312a:	7823      	ldrb	r3, [r4, #0]
 802312c:	f3bf 8f5b 	dmb	ish
 8023130:	07db      	lsls	r3, r3, #31
 8023132:	d40b      	bmi.n	802314c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023134:	4620      	mov	r0, r4
 8023136:	f005 ff31 	bl	8028f9c <__cxa_guard_acquire>
 802313a:	b138      	cbz	r0, 802314c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802313c:	4620      	mov	r0, r4
 802313e:	f005 ff39 	bl	8028fb4 <__cxa_guard_release>
 8023142:	4a06      	ldr	r2, [pc, #24]	@ (802315c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023144:	4909      	ldr	r1, [pc, #36]	@ (802316c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023146:	480a      	ldr	r0, [pc, #40]	@ (8023170 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023148:	f005 ff21 	bl	8028f8e <__aeabi_atexit>
 802314c:	4b05      	ldr	r3, [pc, #20]	@ (8023164 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802314e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023150:	4b07      	ldr	r3, [pc, #28]	@ (8023170 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023152:	642b      	str	r3, [r5, #64]	@ 0x40
 8023154:	bd38      	pop	{r3, r4, r5, pc}
 8023156:	bf00      	nop
 8023158:	24028670 	.word	0x24028670
 802315c:	24000000 	.word	0x24000000
 8023160:	08020075 	.word	0x08020075
 8023164:	240000a0 	.word	0x240000a0
 8023168:	24028674 	.word	0x24028674
 802316c:	08020073 	.word	0x08020073
 8023170:	240000a4 	.word	0x240000a4

08023174 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8023174:	b510      	push	{r4, lr}
 8023176:	4604      	mov	r4, r0
 8023178:	f7ff ff88 	bl	802308c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 802317c:	4620      	mov	r0, r4
 802317e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023182:	f7ff bfbd 	b.w	8023100 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023188 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023188:	b538      	push	{r3, r4, r5, lr}
 802318a:	4c15      	ldr	r4, [pc, #84]	@ (80231e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 802318c:	4605      	mov	r5, r0
 802318e:	7823      	ldrb	r3, [r4, #0]
 8023190:	f3bf 8f5b 	dmb	ish
 8023194:	07da      	lsls	r2, r3, #31
 8023196:	d40b      	bmi.n	80231b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023198:	4620      	mov	r0, r4
 802319a:	f005 feff 	bl	8028f9c <__cxa_guard_acquire>
 802319e:	b138      	cbz	r0, 80231b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80231a0:	4620      	mov	r0, r4
 80231a2:	f005 ff07 	bl	8028fb4 <__cxa_guard_release>
 80231a6:	4a0f      	ldr	r2, [pc, #60]	@ (80231e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80231a8:	490f      	ldr	r1, [pc, #60]	@ (80231e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80231aa:	4810      	ldr	r0, [pc, #64]	@ (80231ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80231ac:	f005 feef 	bl	8028f8e <__aeabi_atexit>
 80231b0:	4c0f      	ldr	r4, [pc, #60]	@ (80231f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80231b2:	7823      	ldrb	r3, [r4, #0]
 80231b4:	f3bf 8f5b 	dmb	ish
 80231b8:	07db      	lsls	r3, r3, #31
 80231ba:	d40b      	bmi.n	80231d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80231bc:	4620      	mov	r0, r4
 80231be:	f005 feed 	bl	8028f9c <__cxa_guard_acquire>
 80231c2:	b138      	cbz	r0, 80231d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80231c4:	4620      	mov	r0, r4
 80231c6:	f005 fef5 	bl	8028fb4 <__cxa_guard_release>
 80231ca:	4a06      	ldr	r2, [pc, #24]	@ (80231e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80231cc:	4909      	ldr	r1, [pc, #36]	@ (80231f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80231ce:	480a      	ldr	r0, [pc, #40]	@ (80231f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80231d0:	f005 fedd 	bl	8028f8e <__aeabi_atexit>
 80231d4:	4b05      	ldr	r3, [pc, #20]	@ (80231ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80231d6:	656b      	str	r3, [r5, #84]	@ 0x54
 80231d8:	4b07      	ldr	r3, [pc, #28]	@ (80231f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80231da:	65ab      	str	r3, [r5, #88]	@ 0x58
 80231dc:	bd38      	pop	{r3, r4, r5, pc}
 80231de:	bf00      	nop
 80231e0:	24028668 	.word	0x24028668
 80231e4:	24000000 	.word	0x24000000
 80231e8:	08020069 	.word	0x08020069
 80231ec:	24000098 	.word	0x24000098
 80231f0:	2402866c 	.word	0x2402866c
 80231f4:	08020067 	.word	0x08020067
 80231f8:	2400009c 	.word	0x2400009c

080231fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 80231fc:	b538      	push	{r3, r4, r5, lr}
 80231fe:	4c15      	ldr	r4, [pc, #84]	@ (8023254 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023200:	4605      	mov	r5, r0
 8023202:	7823      	ldrb	r3, [r4, #0]
 8023204:	f3bf 8f5b 	dmb	ish
 8023208:	07da      	lsls	r2, r3, #31
 802320a:	d40b      	bmi.n	8023224 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802320c:	4620      	mov	r0, r4
 802320e:	f005 fec5 	bl	8028f9c <__cxa_guard_acquire>
 8023212:	b138      	cbz	r0, 8023224 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023214:	4620      	mov	r0, r4
 8023216:	f005 fecd 	bl	8028fb4 <__cxa_guard_release>
 802321a:	4a0f      	ldr	r2, [pc, #60]	@ (8023258 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802321c:	490f      	ldr	r1, [pc, #60]	@ (802325c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802321e:	4810      	ldr	r0, [pc, #64]	@ (8023260 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023220:	f005 feb5 	bl	8028f8e <__aeabi_atexit>
 8023224:	4c0f      	ldr	r4, [pc, #60]	@ (8023264 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023226:	7823      	ldrb	r3, [r4, #0]
 8023228:	f3bf 8f5b 	dmb	ish
 802322c:	07db      	lsls	r3, r3, #31
 802322e:	d40b      	bmi.n	8023248 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023230:	4620      	mov	r0, r4
 8023232:	f005 feb3 	bl	8028f9c <__cxa_guard_acquire>
 8023236:	b138      	cbz	r0, 8023248 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023238:	4620      	mov	r0, r4
 802323a:	f005 febb 	bl	8028fb4 <__cxa_guard_release>
 802323e:	4a06      	ldr	r2, [pc, #24]	@ (8023258 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023240:	4909      	ldr	r1, [pc, #36]	@ (8023268 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023242:	480a      	ldr	r0, [pc, #40]	@ (802326c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023244:	f005 fea3 	bl	8028f8e <__aeabi_atexit>
 8023248:	4b05      	ldr	r3, [pc, #20]	@ (8023260 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802324a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 802324c:	4b07      	ldr	r3, [pc, #28]	@ (802326c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802324e:	652b      	str	r3, [r5, #80]	@ 0x50
 8023250:	bd38      	pop	{r3, r4, r5, pc}
 8023252:	bf00      	nop
 8023254:	24028658 	.word	0x24028658
 8023258:	24000000 	.word	0x24000000
 802325c:	0802006d 	.word	0x0802006d
 8023260:	24000088 	.word	0x24000088
 8023264:	2402865c 	.word	0x2402865c
 8023268:	0802006b 	.word	0x0802006b
 802326c:	2400008c 	.word	0x2400008c

08023270 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8023270:	b510      	push	{r4, lr}
 8023272:	4604      	mov	r4, r0
 8023274:	f7ff ff88 	bl	8023188 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023278:	4620      	mov	r0, r4
 802327a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802327e:	f7ff bfbd 	b.w	80231fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08023282 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8023282:	b510      	push	{r4, lr}
 8023284:	4604      	mov	r4, r0
 8023286:	f7ff fff3 	bl	8023270 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 802328a:	4620      	mov	r0, r4
 802328c:	f7ff ff72 	bl	8023174 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8023290:	4620      	mov	r0, r4
 8023292:	f7ff fe73 	bl	8022f7c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8023296:	4620      	mov	r0, r4
 8023298:	f7ff fdf2 	bl	8022e80 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 802329c:	4620      	mov	r0, r4
 802329e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80232a2:	f7ff bee9 	b.w	8023078 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080232a8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 80232a8:	b538      	push	{r3, r4, r5, lr}
 80232aa:	4c0b      	ldr	r4, [pc, #44]	@ (80232d8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 80232ac:	4605      	mov	r5, r0
 80232ae:	7823      	ldrb	r3, [r4, #0]
 80232b0:	f3bf 8f5b 	dmb	ish
 80232b4:	07db      	lsls	r3, r3, #31
 80232b6:	d40b      	bmi.n	80232d0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 80232b8:	4620      	mov	r0, r4
 80232ba:	f005 fe6f 	bl	8028f9c <__cxa_guard_acquire>
 80232be:	b138      	cbz	r0, 80232d0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 80232c0:	4620      	mov	r0, r4
 80232c2:	f005 fe77 	bl	8028fb4 <__cxa_guard_release>
 80232c6:	4a05      	ldr	r2, [pc, #20]	@ (80232dc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 80232c8:	4905      	ldr	r1, [pc, #20]	@ (80232e0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 80232ca:	4806      	ldr	r0, [pc, #24]	@ (80232e4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 80232cc:	f005 fe5f 	bl	8028f8e <__aeabi_atexit>
 80232d0:	4b04      	ldr	r3, [pc, #16]	@ (80232e4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 80232d2:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80232d4:	bd38      	pop	{r3, r4, r5, pc}
 80232d6:	bf00      	nop
 80232d8:	2402864c 	.word	0x2402864c
 80232dc:	24000000 	.word	0x24000000
 80232e0:	08020065 	.word	0x08020065
 80232e4:	24000080 	.word	0x24000080

080232e8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 80232e8:	b538      	push	{r3, r4, r5, lr}
 80232ea:	4c0b      	ldr	r4, [pc, #44]	@ (8023318 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 80232ec:	4605      	mov	r5, r0
 80232ee:	7823      	ldrb	r3, [r4, #0]
 80232f0:	f3bf 8f5b 	dmb	ish
 80232f4:	07db      	lsls	r3, r3, #31
 80232f6:	d40b      	bmi.n	8023310 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 80232f8:	4620      	mov	r0, r4
 80232fa:	f005 fe4f 	bl	8028f9c <__cxa_guard_acquire>
 80232fe:	b138      	cbz	r0, 8023310 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8023300:	4620      	mov	r0, r4
 8023302:	f005 fe57 	bl	8028fb4 <__cxa_guard_release>
 8023306:	4a05      	ldr	r2, [pc, #20]	@ (802331c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8023308:	4905      	ldr	r1, [pc, #20]	@ (8023320 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 802330a:	4806      	ldr	r0, [pc, #24]	@ (8023324 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 802330c:	f005 fe3f 	bl	8028f8e <__aeabi_atexit>
 8023310:	4b04      	ldr	r3, [pc, #16]	@ (8023324 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8023312:	662b      	str	r3, [r5, #96]	@ 0x60
 8023314:	bd38      	pop	{r3, r4, r5, pc}
 8023316:	bf00      	nop
 8023318:	24028650 	.word	0x24028650
 802331c:	24000000 	.word	0x24000000
 8023320:	08020063 	.word	0x08020063
 8023324:	24000084 	.word	0x24000084

08023328 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8023328:	b570      	push	{r4, r5, r6, lr}
 802332a:	4d0c      	ldr	r5, [pc, #48]	@ (802335c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 802332c:	4606      	mov	r6, r0
 802332e:	4c0c      	ldr	r4, [pc, #48]	@ (8023360 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8023330:	782b      	ldrb	r3, [r5, #0]
 8023332:	f3bf 8f5b 	dmb	ish
 8023336:	f013 0f01 	tst.w	r3, #1
 802333a:	d10d      	bne.n	8023358 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 802333c:	4628      	mov	r0, r5
 802333e:	f005 fe2d 	bl	8028f9c <__cxa_guard_acquire>
 8023342:	b148      	cbz	r0, 8023358 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8023344:	4b07      	ldr	r3, [pc, #28]	@ (8023364 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8023346:	4628      	mov	r0, r5
 8023348:	6023      	str	r3, [r4, #0]
 802334a:	f005 fe33 	bl	8028fb4 <__cxa_guard_release>
 802334e:	4a06      	ldr	r2, [pc, #24]	@ (8023368 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8023350:	4620      	mov	r0, r4
 8023352:	4906      	ldr	r1, [pc, #24]	@ (802336c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8023354:	f005 fe1b 	bl	8028f8e <__aeabi_atexit>
 8023358:	6674      	str	r4, [r6, #100]	@ 0x64
 802335a:	bd70      	pop	{r4, r5, r6, pc}
 802335c:	24028654 	.word	0x24028654
 8023360:	240287ac 	.word	0x240287ac
 8023364:	0802e5fc 	.word	0x0802e5fc
 8023368:	24000000 	.word	0x24000000
 802336c:	08020061 	.word	0x08020061

08023370 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8023370:	b510      	push	{r4, lr}
 8023372:	4604      	mov	r4, r0
 8023374:	f7ff ff98 	bl	80232a8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8023378:	4620      	mov	r0, r4
 802337a:	f7ff ffb5 	bl	80232e8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 802337e:	4620      	mov	r0, r4
 8023380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023384:	f7ff bfd0 	b.w	8023328 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08023388 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 8023388:	b570      	push	{r4, r5, r6, lr}
 802338a:	4d0c      	ldr	r5, [pc, #48]	@ (80233bc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 802338c:	4606      	mov	r6, r0
 802338e:	4c0c      	ldr	r4, [pc, #48]	@ (80233c0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 8023390:	782b      	ldrb	r3, [r5, #0]
 8023392:	f3bf 8f5b 	dmb	ish
 8023396:	f013 0f01 	tst.w	r3, #1
 802339a:	d10d      	bne.n	80233b8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 802339c:	4628      	mov	r0, r5
 802339e:	f005 fdfd 	bl	8028f9c <__cxa_guard_acquire>
 80233a2:	b148      	cbz	r0, 80233b8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 80233a4:	4b07      	ldr	r3, [pc, #28]	@ (80233c4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 80233a6:	4628      	mov	r0, r5
 80233a8:	6023      	str	r3, [r4, #0]
 80233aa:	f005 fe03 	bl	8028fb4 <__cxa_guard_release>
 80233ae:	4a06      	ldr	r2, [pc, #24]	@ (80233c8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 80233b0:	4620      	mov	r0, r4
 80233b2:	4906      	ldr	r1, [pc, #24]	@ (80233cc <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 80233b4:	f005 fdeb 	bl	8028f8e <__aeabi_atexit>
 80233b8:	66b4      	str	r4, [r6, #104]	@ 0x68
 80233ba:	bd70      	pop	{r4, r5, r6, pc}
 80233bc:	24028648 	.word	0x24028648
 80233c0:	240286a8 	.word	0x240286a8
 80233c4:	0802e614 	.word	0x0802e614
 80233c8:	24000000 	.word	0x24000000
 80233cc:	0802005f 	.word	0x0802005f

080233d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80233d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233d4:	b087      	sub	sp, #28
 80233d6:	788d      	ldrb	r5, [r1, #2]
 80233d8:	f891 9000 	ldrb.w	r9, [r1]
 80233dc:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80233e0:	9501      	str	r5, [sp, #4]
 80233e2:	784d      	ldrb	r5, [r1, #1]
 80233e4:	9203      	str	r2, [sp, #12]
 80233e6:	9502      	str	r5, [sp, #8]
 80233e8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80233ec:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80233f0:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80233f4:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 80233f8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 80233fc:	fb06 0708 	mla	r7, r6, r8, r0
 8023400:	2e00      	cmp	r6, #0
 8023402:	eb02 0a07 	add.w	sl, r2, r7
 8023406:	ea4f 2205 	mov.w	r2, r5, lsl #8
 802340a:	9d01      	ldr	r5, [sp, #4]
 802340c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023410:	ea45 0509 	orr.w	r5, r5, r9
 8023414:	9505      	str	r5, [sp, #20]
 8023416:	f2c0 80b2 	blt.w	802357e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 802341a:	45b3      	cmp	fp, r6
 802341c:	f340 80af 	ble.w	802357e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8023420:	2800      	cmp	r0, #0
 8023422:	f2c0 80aa 	blt.w	802357a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8023426:	4580      	cmp	r8, r0
 8023428:	f340 80a7 	ble.w	802357a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 802342c:	9a03      	ldr	r2, [sp, #12]
 802342e:	5dd7      	ldrb	r7, [r2, r7]
 8023430:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023434:	441f      	add	r7, r3
 8023436:	1c42      	adds	r2, r0, #1
 8023438:	f100 80a4 	bmi.w	8023584 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 802343c:	4590      	cmp	r8, r2
 802343e:	f340 80a1 	ble.w	8023584 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023442:	2c00      	cmp	r4, #0
 8023444:	f000 809e 	beq.w	8023584 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8023448:	f89a 5001 	ldrb.w	r5, [sl, #1]
 802344c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023450:	441d      	add	r5, r3
 8023452:	3601      	adds	r6, #1
 8023454:	f100 809a 	bmi.w	802358c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023458:	45b3      	cmp	fp, r6
 802345a:	f340 8097 	ble.w	802358c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 802345e:	f1bc 0f00 	cmp.w	ip, #0
 8023462:	f000 8093 	beq.w	802358c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8023466:	2800      	cmp	r0, #0
 8023468:	f2c0 808e 	blt.w	8023588 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 802346c:	4580      	cmp	r8, r0
 802346e:	f340 808b 	ble.w	8023588 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8023472:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8023476:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802347a:	441e      	add	r6, r3
 802347c:	3001      	adds	r0, #1
 802347e:	f100 8088 	bmi.w	8023592 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023482:	4580      	cmp	r8, r0
 8023484:	f340 8085 	ble.w	8023592 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8023488:	2c00      	cmp	r4, #0
 802348a:	f000 8082 	beq.w	8023592 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 802348e:	44d0      	add	r8, sl
 8023490:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023494:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023498:	4413      	add	r3, r2
 802349a:	b2a4      	uxth	r4, r4
 802349c:	f895 a000 	ldrb.w	sl, [r5]
 80234a0:	fa1f fc8c 	uxth.w	ip, ip
 80234a4:	fb04 fb0c 	mul.w	fp, r4, ip
 80234a8:	0124      	lsls	r4, r4, #4
 80234aa:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80234ae:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 80234b2:	eba4 040b 	sub.w	r4, r4, fp
 80234b6:	fa1f f08c 	uxth.w	r0, ip
 80234ba:	b2a2      	uxth	r2, r4
 80234bc:	783c      	ldrb	r4, [r7, #0]
 80234be:	eba8 0800 	sub.w	r8, r8, r0
 80234c2:	fa1f fc8e 	uxth.w	ip, lr
 80234c6:	fb02 fa0a 	mul.w	sl, r2, sl
 80234ca:	ea6f 0e0e 	mvn.w	lr, lr
 80234ce:	fa1f f888 	uxth.w	r8, r8
 80234d2:	fa5f fe8e 	uxtb.w	lr, lr
 80234d6:	fb08 aa04 	mla	sl, r8, r4, sl
 80234da:	7834      	ldrb	r4, [r6, #0]
 80234dc:	fb19 f90e 	smulbb	r9, r9, lr
 80234e0:	fb00 aa04 	mla	sl, r0, r4, sl
 80234e4:	781c      	ldrb	r4, [r3, #0]
 80234e6:	fb0b a404 	mla	r4, fp, r4, sl
 80234ea:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80234ee:	fb04 990c 	mla	r9, r4, ip, r9
 80234f2:	fa1f f989 	uxth.w	r9, r9
 80234f6:	f109 0401 	add.w	r4, r9, #1
 80234fa:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80234fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023502:	f881 9000 	strb.w	r9, [r1]
 8023506:	f895 9001 	ldrb.w	r9, [r5, #1]
 802350a:	787c      	ldrb	r4, [r7, #1]
 802350c:	fb02 f909 	mul.w	r9, r2, r9
 8023510:	fb08 9904 	mla	r9, r8, r4, r9
 8023514:	7874      	ldrb	r4, [r6, #1]
 8023516:	fb00 9904 	mla	r9, r0, r4, r9
 802351a:	785c      	ldrb	r4, [r3, #1]
 802351c:	fb0b 9404 	mla	r4, fp, r4, r9
 8023520:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8023524:	9c02      	ldr	r4, [sp, #8]
 8023526:	fb14 f90e 	smulbb	r9, r4, lr
 802352a:	fb0a 940c 	mla	r4, sl, ip, r9
 802352e:	b2a4      	uxth	r4, r4
 8023530:	f104 0901 	add.w	r9, r4, #1
 8023534:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8023538:	1224      	asrs	r4, r4, #8
 802353a:	704c      	strb	r4, [r1, #1]
 802353c:	78ad      	ldrb	r5, [r5, #2]
 802353e:	78bc      	ldrb	r4, [r7, #2]
 8023540:	436a      	muls	r2, r5
 8023542:	789b      	ldrb	r3, [r3, #2]
 8023544:	fb08 2204 	mla	r2, r8, r4, r2
 8023548:	78b4      	ldrb	r4, [r6, #2]
 802354a:	fb00 2004 	mla	r0, r0, r4, r2
 802354e:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023552:	9b01      	ldr	r3, [sp, #4]
 8023554:	fb13 fe0e 	smulbb	lr, r3, lr
 8023558:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802355c:	fb0b ec0c 	mla	ip, fp, ip, lr
 8023560:	fa1f fc8c 	uxth.w	ip, ip
 8023564:	f10c 0e01 	add.w	lr, ip, #1
 8023568:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 802356c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023570:	f881 c002 	strb.w	ip, [r1, #2]
 8023574:	b007      	add	sp, #28
 8023576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802357a:	af05      	add	r7, sp, #20
 802357c:	e75b      	b.n	8023436 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 802357e:	ad05      	add	r5, sp, #20
 8023580:	462f      	mov	r7, r5
 8023582:	e766      	b.n	8023452 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023584:	ad05      	add	r5, sp, #20
 8023586:	e764      	b.n	8023452 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8023588:	ae05      	add	r6, sp, #20
 802358a:	e777      	b.n	802347c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 802358c:	ab05      	add	r3, sp, #20
 802358e:	461e      	mov	r6, r3
 8023590:	e783      	b.n	802349a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8023592:	ab05      	add	r3, sp, #20
 8023594:	e781      	b.n	802349a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08023596 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802359a:	b093      	sub	sp, #76	@ 0x4c
 802359c:	9210      	str	r2, [sp, #64]	@ 0x40
 802359e:	9309      	str	r3, [sp, #36]	@ 0x24
 80235a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80235a2:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 80235a6:	9011      	str	r0, [sp, #68]	@ 0x44
 80235a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80235aa:	6850      	ldr	r0, [r2, #4]
 80235ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80235ae:	6812      	ldr	r2, [r2, #0]
 80235b0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80235b4:	fb00 1303 	mla	r3, r0, r3, r1
 80235b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235bc:	18d3      	adds	r3, r2, r3
 80235be:	930a      	str	r3, [sp, #40]	@ 0x28
 80235c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80235c2:	681b      	ldr	r3, [r3, #0]
 80235c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80235c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80235c8:	685c      	ldr	r4, [r3, #4]
 80235ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80235cc:	3404      	adds	r4, #4
 80235ce:	43db      	mvns	r3, r3
 80235d0:	b2db      	uxtb	r3, r3
 80235d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80235d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80235d6:	2b00      	cmp	r3, #0
 80235d8:	dc03      	bgt.n	80235e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80235da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80235dc:	2b00      	cmp	r3, #0
 80235de:	f340 8250 	ble.w	8023a82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80235e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80235e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80235e8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80235ec:	1e48      	subs	r0, r1, #1
 80235ee:	1e55      	subs	r5, r2, #1
 80235f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	f340 80ee 	ble.w	80237d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80235f8:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80235fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80235fc:	1436      	asrs	r6, r6, #16
 80235fe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023602:	d406      	bmi.n	8023612 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023604:	4286      	cmp	r6, r0
 8023606:	da04      	bge.n	8023612 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023608:	2b00      	cmp	r3, #0
 802360a:	db02      	blt.n	8023612 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802360c:	42ab      	cmp	r3, r5
 802360e:	f2c0 80e2 	blt.w	80237d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023612:	3601      	adds	r6, #1
 8023614:	f100 80cf 	bmi.w	80237b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023618:	42b1      	cmp	r1, r6
 802361a:	f2c0 80cc 	blt.w	80237b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802361e:	3301      	adds	r3, #1
 8023620:	f100 80c9 	bmi.w	80237b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8023624:	429a      	cmp	r2, r3
 8023626:	f2c0 80c6 	blt.w	80237b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802362a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 802362e:	f1bb 0f00 	cmp.w	fp, #0
 8023632:	f340 80f1 	ble.w	8023818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8023636:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023638:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802363a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 802363c:	141d      	asrs	r5, r3, #16
 802363e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023640:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023644:	68c7      	ldr	r7, [r0, #12]
 8023646:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023648:	1418      	asrs	r0, r3, #16
 802364a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 802364e:	6892      	ldr	r2, [r2, #8]
 8023650:	f100 8137 	bmi.w	80238c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023654:	f102 3cff 	add.w	ip, r2, #4294967295
 8023658:	4560      	cmp	r0, ip
 802365a:	f280 8132 	bge.w	80238c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802365e:	2d00      	cmp	r5, #0
 8023660:	f2c0 812f 	blt.w	80238c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023664:	f107 3cff 	add.w	ip, r7, #4294967295
 8023668:	4565      	cmp	r5, ip
 802366a:	f280 812a 	bge.w	80238c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802366e:	b212      	sxth	r2, r2
 8023670:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8023672:	fb05 0002 	mla	r0, r5, r2, r0
 8023676:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023678:	f817 c000 	ldrb.w	ip, [r7, r0]
 802367c:	4405      	add	r5, r0
 802367e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023682:	eb04 0e0c 	add.w	lr, r4, ip
 8023686:	f1b8 0f00 	cmp.w	r8, #0
 802368a:	f000 810c 	beq.w	80238a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 802368e:	786f      	ldrb	r7, [r5, #1]
 8023690:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023694:	4427      	add	r7, r4
 8023696:	2900      	cmp	r1, #0
 8023698:	f000 810d 	beq.w	80238b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802369c:	18a8      	adds	r0, r5, r2
 802369e:	5caa      	ldrb	r2, [r5, r2]
 80236a0:	7840      	ldrb	r0, [r0, #1]
 80236a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80236a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80236aa:	4422      	add	r2, r4
 80236ac:	4420      	add	r0, r4
 80236ae:	fa1f f388 	uxth.w	r3, r8
 80236b2:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80236b6:	b289      	uxth	r1, r1
 80236b8:	f897 c000 	ldrb.w	ip, [r7]
 80236bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80236c0:	fb03 f901 	mul.w	r9, r3, r1
 80236c4:	011b      	lsls	r3, r3, #4
 80236c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80236ca:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80236ce:	eba3 0309 	sub.w	r3, r3, r9
 80236d2:	b289      	uxth	r1, r1
 80236d4:	b29b      	uxth	r3, r3
 80236d6:	eba8 0801 	sub.w	r8, r8, r1
 80236da:	fb03 fc0c 	mul.w	ip, r3, ip
 80236de:	fa1f f888 	uxth.w	r8, r8
 80236e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80236e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80236e6:	fb08 cc0a 	mla	ip, r8, sl, ip
 80236ea:	f892 a000 	ldrb.w	sl, [r2]
 80236ee:	fb01 cc0a 	mla	ip, r1, sl, ip
 80236f2:	f890 a000 	ldrb.w	sl, [r0]
 80236f6:	fb09 cc0a 	mla	ip, r9, sl, ip
 80236fa:	f896 a000 	ldrb.w	sl, [r6]
 80236fe:	fb1a fa03 	smulbb	sl, sl, r3
 8023702:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023708:	fb0c ac05 	mla	ip, ip, r5, sl
 802370c:	fa1f fc8c 	uxth.w	ip, ip
 8023710:	f10c 0a01 	add.w	sl, ip, #1
 8023714:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8023718:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802371c:	f886 a000 	strb.w	sl, [r6]
 8023720:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023724:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023728:	fb03 fc0c 	mul.w	ip, r3, ip
 802372c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802372e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8023732:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023736:	fb01 cc0a 	mla	ip, r1, sl, ip
 802373a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802373e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8023742:	f896 a001 	ldrb.w	sl, [r6, #1]
 8023746:	fb1a fa03 	smulbb	sl, sl, r3
 802374a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802374e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023750:	fb0c ac05 	mla	ip, ip, r5, sl
 8023754:	fa1f fc8c 	uxth.w	ip, ip
 8023758:	f10c 0a01 	add.w	sl, ip, #1
 802375c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8023760:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023764:	f886 c001 	strb.w	ip, [r6, #1]
 8023768:	78bf      	ldrb	r7, [r7, #2]
 802376a:	f89e c002 	ldrb.w	ip, [lr, #2]
 802376e:	437b      	muls	r3, r7
 8023770:	fb08 330c 	mla	r3, r8, ip, r3
 8023774:	f892 c002 	ldrb.w	ip, [r2, #2]
 8023778:	7882      	ldrb	r2, [r0, #2]
 802377a:	fb01 310c 	mla	r1, r1, ip, r3
 802377e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023780:	fb09 1902 	mla	r9, r9, r2, r1
 8023784:	78b1      	ldrb	r1, [r6, #2]
 8023786:	fb11 f103 	smulbb	r1, r1, r3
 802378a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802378e:	fb09 1505 	mla	r5, r9, r5, r1
 8023792:	b2ad      	uxth	r5, r5
 8023794:	1c6b      	adds	r3, r5, #1
 8023796:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802379a:	122d      	asrs	r5, r5, #8
 802379c:	70b5      	strb	r5, [r6, #2]
 802379e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80237a0:	3603      	adds	r6, #3
 80237a2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80237a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80237a8:	4413      	add	r3, r2
 80237aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80237ac:	931d      	str	r3, [sp, #116]	@ 0x74
 80237ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80237b0:	4413      	add	r3, r2
 80237b2:	931e      	str	r3, [sp, #120]	@ 0x78
 80237b4:	e73b      	b.n	802362e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80237b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80237b8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80237ba:	4433      	add	r3, r6
 80237bc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80237be:	931d      	str	r3, [sp, #116]	@ 0x74
 80237c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80237c2:	4433      	add	r3, r6
 80237c4:	931e      	str	r3, [sp, #120]	@ 0x78
 80237c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237c8:	3b01      	subs	r3, #1
 80237ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80237cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80237ce:	3303      	adds	r3, #3
 80237d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80237d2:	e70d      	b.n	80235f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80237d4:	d028      	beq.n	8023828 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80237d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237d8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80237da:	3b01      	subs	r3, #1
 80237dc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80237de:	fb00 5003 	mla	r0, r0, r3, r5
 80237e2:	1400      	asrs	r0, r0, #16
 80237e4:	f53f af21 	bmi.w	802362a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80237e8:	3901      	subs	r1, #1
 80237ea:	4288      	cmp	r0, r1
 80237ec:	f6bf af1d 	bge.w	802362a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80237f0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80237f2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80237f4:	fb01 0303 	mla	r3, r1, r3, r0
 80237f8:	141b      	asrs	r3, r3, #16
 80237fa:	f53f af16 	bmi.w	802362a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80237fe:	3a01      	subs	r2, #1
 8023800:	4293      	cmp	r3, r2
 8023802:	f6bf af12 	bge.w	802362a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023808:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 802380c:	1cdf      	adds	r7, r3, #3
 802380e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8023812:	f1b9 0f00 	cmp.w	r9, #0
 8023816:	dc73      	bgt.n	8023900 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802381a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802381c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023824:	441a      	add	r2, r3
 8023826:	920a      	str	r2, [sp, #40]	@ 0x28
 8023828:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802382a:	2b00      	cmp	r3, #0
 802382c:	f340 8129 	ble.w	8023a82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023834:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023836:	ee30 0a04 	vadd.f32	s0, s0, s8
 802383a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802383e:	eef0 6a62 	vmov.f32	s13, s5
 8023842:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023846:	ee31 1a05 	vadd.f32	s2, s2, s10
 802384a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802384e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8023852:	eef0 6a43 	vmov.f32	s13, s6
 8023856:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802385a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802385e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023862:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023866:	ee77 2a62 	vsub.f32	s5, s14, s5
 802386a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802386e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023872:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023876:	ee12 2a90 	vmov	r2, s5
 802387a:	eef0 2a47 	vmov.f32	s5, s14
 802387e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023882:	ee13 2a10 	vmov	r2, s6
 8023886:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023888:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802388a:	eeb0 3a67 	vmov.f32	s6, s15
 802388e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023892:	9320      	str	r3, [sp, #128]	@ 0x80
 8023894:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023896:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023898:	3b01      	subs	r3, #1
 802389a:	930d      	str	r3, [sp, #52]	@ 0x34
 802389c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802389e:	bf08      	it	eq
 80238a0:	4613      	moveq	r3, r2
 80238a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80238a4:	e696      	b.n	80235d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80238a6:	b149      	cbz	r1, 80238bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80238a8:	5caa      	ldrb	r2, [r5, r2]
 80238aa:	4670      	mov	r0, lr
 80238ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238b0:	4422      	add	r2, r4
 80238b2:	4677      	mov	r7, lr
 80238b4:	e6fb      	b.n	80236ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80238b6:	4670      	mov	r0, lr
 80238b8:	4672      	mov	r2, lr
 80238ba:	e6f8      	b.n	80236ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80238bc:	4670      	mov	r0, lr
 80238be:	4672      	mov	r2, lr
 80238c0:	e7f7      	b.n	80238b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80238c2:	f110 0c01 	adds.w	ip, r0, #1
 80238c6:	f53f af6a 	bmi.w	802379e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80238ca:	4562      	cmp	r2, ip
 80238cc:	f6ff af67 	blt.w	802379e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80238d0:	f115 0c01 	adds.w	ip, r5, #1
 80238d4:	f53f af63 	bmi.w	802379e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80238d8:	4567      	cmp	r7, ip
 80238da:	f6ff af60 	blt.w	802379e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80238de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80238e0:	b23f      	sxth	r7, r7
 80238e2:	b212      	sxth	r2, r2
 80238e4:	9002      	str	r0, [sp, #8]
 80238e6:	9701      	str	r7, [sp, #4]
 80238e8:	9200      	str	r2, [sp, #0]
 80238ea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80238ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80238ee:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80238f2:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80238f6:	4623      	mov	r3, r4
 80238f8:	4631      	mov	r1, r6
 80238fa:	f7ff fd69 	bl	80233d0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80238fe:	e74e      	b.n	802379e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023900:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023902:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8023904:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023908:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802390a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802390c:	1400      	asrs	r0, r0, #16
 802390e:	142d      	asrs	r5, r5, #16
 8023910:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023912:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023916:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802391a:	fb02 5000 	mla	r0, r2, r0, r5
 802391e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023920:	f815 e000 	ldrb.w	lr, [r5, r0]
 8023924:	eb05 0c00 	add.w	ip, r5, r0
 8023928:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802392c:	eb04 060e 	add.w	r6, r4, lr
 8023930:	2b00      	cmp	r3, #0
 8023932:	f000 8097 	beq.w	8023a64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8023936:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802393a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802393e:	4425      	add	r5, r4
 8023940:	2900      	cmp	r1, #0
 8023942:	f000 8098 	beq.w	8023a76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8023946:	eb0c 0002 	add.w	r0, ip, r2
 802394a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802394e:	7840      	ldrb	r0, [r0, #1]
 8023950:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023954:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023958:	4422      	add	r2, r4
 802395a:	4420      	add	r0, r4
 802395c:	b29b      	uxth	r3, r3
 802395e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8023962:	b289      	uxth	r1, r1
 8023964:	f895 e000 	ldrb.w	lr, [r5]
 8023968:	3703      	adds	r7, #3
 802396a:	f109 39ff 	add.w	r9, r9, #4294967295
 802396e:	fb03 f801 	mul.w	r8, r3, r1
 8023972:	011b      	lsls	r3, r3, #4
 8023974:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023978:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 802397c:	eba3 0308 	sub.w	r3, r3, r8
 8023980:	b289      	uxth	r1, r1
 8023982:	b29b      	uxth	r3, r3
 8023984:	ebac 0c01 	sub.w	ip, ip, r1
 8023988:	fb03 fe0e 	mul.w	lr, r3, lr
 802398c:	fa1f fc8c 	uxth.w	ip, ip
 8023990:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023994:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023998:	f892 b000 	ldrb.w	fp, [r2]
 802399c:	fb01 ee0b 	mla	lr, r1, fp, lr
 80239a0:	f890 b000 	ldrb.w	fp, [r0]
 80239a4:	fb08 ee0b 	mla	lr, r8, fp, lr
 80239a8:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80239ac:	fb1b fb03 	smulbb	fp, fp, r3
 80239b0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80239b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80239b6:	fb0e be0a 	mla	lr, lr, sl, fp
 80239ba:	fa1f fe8e 	uxth.w	lr, lr
 80239be:	f10e 0b01 	add.w	fp, lr, #1
 80239c2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80239c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80239ca:	f807 ec06 	strb.w	lr, [r7, #-6]
 80239ce:	f895 e001 	ldrb.w	lr, [r5, #1]
 80239d2:	f896 b001 	ldrb.w	fp, [r6, #1]
 80239d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80239da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80239dc:	fb0c ee0b 	mla	lr, ip, fp, lr
 80239e0:	f892 b001 	ldrb.w	fp, [r2, #1]
 80239e4:	fb01 ee0b 	mla	lr, r1, fp, lr
 80239e8:	f890 b001 	ldrb.w	fp, [r0, #1]
 80239ec:	fb08 ee0b 	mla	lr, r8, fp, lr
 80239f0:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80239f4:	fb1b fb03 	smulbb	fp, fp, r3
 80239f8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80239fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80239fe:	fb0e be0a 	mla	lr, lr, sl, fp
 8023a02:	fa1f fe8e 	uxth.w	lr, lr
 8023a06:	f10e 0b01 	add.w	fp, lr, #1
 8023a0a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8023a0e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023a12:	f807 ec05 	strb.w	lr, [r7, #-5]
 8023a16:	78ad      	ldrb	r5, [r5, #2]
 8023a18:	78b6      	ldrb	r6, [r6, #2]
 8023a1a:	436b      	muls	r3, r5
 8023a1c:	7895      	ldrb	r5, [r2, #2]
 8023a1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023a20:	fb0c 3306 	mla	r3, ip, r6, r3
 8023a24:	fb01 3305 	mla	r3, r1, r5, r3
 8023a28:	7885      	ldrb	r5, [r0, #2]
 8023a2a:	fb08 3805 	mla	r8, r8, r5, r3
 8023a2e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8023a32:	fb13 f302 	smulbb	r3, r3, r2
 8023a36:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023a3a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8023a3c:	fb08 380a 	mla	r8, r8, sl, r3
 8023a40:	fa1f f888 	uxth.w	r8, r8
 8023a44:	f108 0301 	add.w	r3, r8, #1
 8023a48:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8023a4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023a4e:	4413      	add	r3, r2
 8023a50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023a52:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023a56:	931d      	str	r3, [sp, #116]	@ 0x74
 8023a58:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023a5a:	f807 8c04 	strb.w	r8, [r7, #-4]
 8023a5e:	4413      	add	r3, r2
 8023a60:	931e      	str	r3, [sp, #120]	@ 0x78
 8023a62:	e6d6      	b.n	8023812 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023a64:	b151      	cbz	r1, 8023a7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8023a66:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023a6a:	4630      	mov	r0, r6
 8023a6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a70:	4422      	add	r2, r4
 8023a72:	4635      	mov	r5, r6
 8023a74:	e772      	b.n	802395c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023a76:	4630      	mov	r0, r6
 8023a78:	4632      	mov	r2, r6
 8023a7a:	e76f      	b.n	802395c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023a7c:	4630      	mov	r0, r6
 8023a7e:	4632      	mov	r2, r6
 8023a80:	e7f7      	b.n	8023a72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023a82:	b013      	add	sp, #76	@ 0x4c
 8023a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a88 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8023a88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023a8c:	784c      	ldrb	r4, [r1, #1]
 8023a8e:	f891 a002 	ldrb.w	sl, [r1, #2]
 8023a92:	0224      	lsls	r4, r4, #8
 8023a94:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8023a98:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8023a9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8023aa0:	f891 a000 	ldrb.w	sl, [r1]
 8023aa4:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 8023aa8:	ea44 040a 	orr.w	r4, r4, sl
 8023aac:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8023ab0:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8023ab4:	9401      	str	r4, [sp, #4]
 8023ab6:	fb05 c70e 	mla	r7, r5, lr, ip
 8023aba:	2d00      	cmp	r5, #0
 8023abc:	eb02 0807 	add.w	r8, r2, r7
 8023ac0:	db72      	blt.n	8023ba8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8023ac2:	45a9      	cmp	r9, r5
 8023ac4:	dd70      	ble.n	8023ba8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8023ac6:	f1bc 0f00 	cmp.w	ip, #0
 8023aca:	db6b      	blt.n	8023ba4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8023acc:	45e6      	cmp	lr, ip
 8023ace:	dd69      	ble.n	8023ba4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8023ad0:	5dd7      	ldrb	r7, [r2, r7]
 8023ad2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023ad6:	441f      	add	r7, r3
 8023ad8:	f11c 0201 	adds.w	r2, ip, #1
 8023adc:	d467      	bmi.n	8023bae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023ade:	4596      	cmp	lr, r2
 8023ae0:	dd65      	ble.n	8023bae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	d063      	beq.n	8023bae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8023ae6:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023aea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023aee:	441c      	add	r4, r3
 8023af0:	3501      	adds	r5, #1
 8023af2:	d460      	bmi.n	8023bb6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023af4:	45a9      	cmp	r9, r5
 8023af6:	dd5e      	ble.n	8023bb6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023af8:	2e00      	cmp	r6, #0
 8023afa:	d05c      	beq.n	8023bb6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8023afc:	f1bc 0f00 	cmp.w	ip, #0
 8023b00:	db57      	blt.n	8023bb2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023b02:	45e6      	cmp	lr, ip
 8023b04:	dd55      	ble.n	8023bb2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8023b06:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023b0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023b0e:	441d      	add	r5, r3
 8023b10:	f11c 0201 	adds.w	r2, ip, #1
 8023b14:	d452      	bmi.n	8023bbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023b16:	4596      	cmp	lr, r2
 8023b18:	dd50      	ble.n	8023bbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023b1a:	2800      	cmp	r0, #0
 8023b1c:	d04e      	beq.n	8023bbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8023b1e:	44c6      	add	lr, r8
 8023b20:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023b24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b28:	4413      	add	r3, r2
 8023b2a:	b280      	uxth	r0, r0
 8023b2c:	f897 8000 	ldrb.w	r8, [r7]
 8023b30:	b2b2      	uxth	r2, r6
 8023b32:	fb00 f602 	mul.w	r6, r0, r2
 8023b36:	0100      	lsls	r0, r0, #4
 8023b38:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023b3c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8023b40:	1b80      	subs	r0, r0, r6
 8023b42:	fa1f fc82 	uxth.w	ip, r2
 8023b46:	b282      	uxth	r2, r0
 8023b48:	7820      	ldrb	r0, [r4, #0]
 8023b4a:	ebae 0e0c 	sub.w	lr, lr, ip
 8023b4e:	4350      	muls	r0, r2
 8023b50:	fa1f fe8e 	uxth.w	lr, lr
 8023b54:	fb0e 0808 	mla	r8, lr, r8, r0
 8023b58:	7828      	ldrb	r0, [r5, #0]
 8023b5a:	fb0c 8800 	mla	r8, ip, r0, r8
 8023b5e:	7818      	ldrb	r0, [r3, #0]
 8023b60:	fb06 8000 	mla	r0, r6, r0, r8
 8023b64:	1200      	asrs	r0, r0, #8
 8023b66:	7008      	strb	r0, [r1, #0]
 8023b68:	7860      	ldrb	r0, [r4, #1]
 8023b6a:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023b6e:	4350      	muls	r0, r2
 8023b70:	fb0e 0808 	mla	r8, lr, r8, r0
 8023b74:	7868      	ldrb	r0, [r5, #1]
 8023b76:	fb0c 8800 	mla	r8, ip, r0, r8
 8023b7a:	7858      	ldrb	r0, [r3, #1]
 8023b7c:	fb06 8000 	mla	r0, r6, r0, r8
 8023b80:	1200      	asrs	r0, r0, #8
 8023b82:	7048      	strb	r0, [r1, #1]
 8023b84:	78a0      	ldrb	r0, [r4, #2]
 8023b86:	78bf      	ldrb	r7, [r7, #2]
 8023b88:	4350      	muls	r0, r2
 8023b8a:	78aa      	ldrb	r2, [r5, #2]
 8023b8c:	fb0e 0007 	mla	r0, lr, r7, r0
 8023b90:	fb0c 0c02 	mla	ip, ip, r2, r0
 8023b94:	789a      	ldrb	r2, [r3, #2]
 8023b96:	fb06 c202 	mla	r2, r6, r2, ip
 8023b9a:	1212      	asrs	r2, r2, #8
 8023b9c:	708a      	strb	r2, [r1, #2]
 8023b9e:	b002      	add	sp, #8
 8023ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ba4:	af01      	add	r7, sp, #4
 8023ba6:	e797      	b.n	8023ad8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8023ba8:	ac01      	add	r4, sp, #4
 8023baa:	4627      	mov	r7, r4
 8023bac:	e7a0      	b.n	8023af0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023bae:	ac01      	add	r4, sp, #4
 8023bb0:	e79e      	b.n	8023af0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023bb2:	ad01      	add	r5, sp, #4
 8023bb4:	e7ac      	b.n	8023b10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8023bb6:	ab01      	add	r3, sp, #4
 8023bb8:	461d      	mov	r5, r3
 8023bba:	e7b6      	b.n	8023b2a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8023bbc:	ab01      	add	r3, sp, #4
 8023bbe:	e7b4      	b.n	8023b2a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08023bc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bc4:	b08d      	sub	sp, #52	@ 0x34
 8023bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023bca:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 8023bce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023bd0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023bd2:	9306      	str	r3, [sp, #24]
 8023bd4:	6850      	ldr	r0, [r2, #4]
 8023bd6:	6812      	ldr	r2, [r2, #0]
 8023bd8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023bda:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 8023bde:	fb00 1303 	mla	r3, r0, r3, r1
 8023be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023be6:	18d3      	adds	r3, r2, r3
 8023be8:	9307      	str	r3, [sp, #28]
 8023bea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023bec:	681b      	ldr	r3, [r3, #0]
 8023bee:	9308      	str	r3, [sp, #32]
 8023bf0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023bf2:	685d      	ldr	r5, [r3, #4]
 8023bf4:	3504      	adds	r5, #4
 8023bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023bf8:	2b00      	cmp	r3, #0
 8023bfa:	dc03      	bgt.n	8023c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	f340 81e6 	ble.w	8023fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023c04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023c06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c0e:	1e48      	subs	r0, r1, #1
 8023c10:	1e56      	subs	r6, r2, #1
 8023c12:	9b06      	ldr	r3, [sp, #24]
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	f340 80bd 	ble.w	8023d94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8023c1a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023c1c:	1427      	asrs	r7, r4, #16
 8023c1e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023c22:	d406      	bmi.n	8023c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023c24:	4287      	cmp	r7, r0
 8023c26:	da04      	bge.n	8023c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023c28:	2b00      	cmp	r3, #0
 8023c2a:	db02      	blt.n	8023c32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023c2c:	42b3      	cmp	r3, r6
 8023c2e:	f2c0 80b2 	blt.w	8023d96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023c32:	3701      	adds	r7, #1
 8023c34:	f100 80a1 	bmi.w	8023d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023c38:	42b9      	cmp	r1, r7
 8023c3a:	f2c0 809e 	blt.w	8023d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023c3e:	3301      	adds	r3, #1
 8023c40:	f100 809b 	bmi.w	8023d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023c44:	429a      	cmp	r2, r3
 8023c46:	f2c0 8098 	blt.w	8023d7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023c4a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8023c4e:	f1bb 0f00 	cmp.w	fp, #0
 8023c52:	f340 80bf 	ble.w	8023dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023c56:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023c58:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8023c5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023c5c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023c60:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8023c64:	1420      	asrs	r0, r4, #16
 8023c66:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023c68:	ea4f 4723 	mov.w	r7, r3, asr #16
 8023c6c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023c70:	6892      	ldr	r2, [r2, #8]
 8023c72:	f100 8103 	bmi.w	8023e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023c76:	f102 3eff 	add.w	lr, r2, #4294967295
 8023c7a:	4570      	cmp	r0, lr
 8023c7c:	f280 80fe 	bge.w	8023e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023c80:	2f00      	cmp	r7, #0
 8023c82:	f2c0 80fb 	blt.w	8023e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023c86:	f10c 3eff 	add.w	lr, ip, #4294967295
 8023c8a:	4577      	cmp	r7, lr
 8023c8c:	f280 80f6 	bge.w	8023e7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8023c90:	b212      	sxth	r2, r2
 8023c92:	fb07 0002 	mla	r0, r7, r2, r0
 8023c96:	9f08      	ldr	r7, [sp, #32]
 8023c98:	f817 8000 	ldrb.w	r8, [r7, r0]
 8023c9c:	eb07 0e00 	add.w	lr, r7, r0
 8023ca0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023ca4:	eb05 0c08 	add.w	ip, r5, r8
 8023ca8:	2b00      	cmp	r3, #0
 8023caa:	f000 80d8 	beq.w	8023e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023cae:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8023cb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023cb6:	442f      	add	r7, r5
 8023cb8:	2900      	cmp	r1, #0
 8023cba:	f000 80d9 	beq.w	8023e70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023cbe:	eb0e 0002 	add.w	r0, lr, r2
 8023cc2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023cc6:	7840      	ldrb	r0, [r0, #1]
 8023cc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ccc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023cd0:	442a      	add	r2, r5
 8023cd2:	4428      	add	r0, r5
 8023cd4:	b29b      	uxth	r3, r3
 8023cd6:	f815 a008 	ldrb.w	sl, [r5, r8]
 8023cda:	b289      	uxth	r1, r1
 8023cdc:	f897 8000 	ldrb.w	r8, [r7]
 8023ce0:	fb03 f901 	mul.w	r9, r3, r1
 8023ce4:	011b      	lsls	r3, r3, #4
 8023ce6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023cea:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023cee:	eba3 0309 	sub.w	r3, r3, r9
 8023cf2:	b289      	uxth	r1, r1
 8023cf4:	b29b      	uxth	r3, r3
 8023cf6:	ebae 0e01 	sub.w	lr, lr, r1
 8023cfa:	fb03 f808 	mul.w	r8, r3, r8
 8023cfe:	fa1f fe8e 	uxth.w	lr, lr
 8023d02:	fb0e 880a 	mla	r8, lr, sl, r8
 8023d06:	f892 a000 	ldrb.w	sl, [r2]
 8023d0a:	fb01 880a 	mla	r8, r1, sl, r8
 8023d0e:	f890 a000 	ldrb.w	sl, [r0]
 8023d12:	fb09 880a 	mla	r8, r9, sl, r8
 8023d16:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023d1a:	f886 8000 	strb.w	r8, [r6]
 8023d1e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023d22:	f89c a001 	ldrb.w	sl, [ip, #1]
 8023d26:	fb03 f808 	mul.w	r8, r3, r8
 8023d2a:	fb0e 880a 	mla	r8, lr, sl, r8
 8023d2e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023d32:	fb01 880a 	mla	r8, r1, sl, r8
 8023d36:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023d3a:	fb09 880a 	mla	r8, r9, sl, r8
 8023d3e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023d42:	f886 8001 	strb.w	r8, [r6, #1]
 8023d46:	78bf      	ldrb	r7, [r7, #2]
 8023d48:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023d4c:	437b      	muls	r3, r7
 8023d4e:	7892      	ldrb	r2, [r2, #2]
 8023d50:	fb0e 330c 	mla	r3, lr, ip, r3
 8023d54:	fb01 3102 	mla	r1, r1, r2, r3
 8023d58:	7882      	ldrb	r2, [r0, #2]
 8023d5a:	fb09 1902 	mla	r9, r9, r2, r1
 8023d5e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023d62:	f886 9002 	strb.w	r9, [r6, #2]
 8023d66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023d68:	3603      	adds	r6, #3
 8023d6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023d70:	441c      	add	r4, r3
 8023d72:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023d74:	4413      	add	r3, r2
 8023d76:	9318      	str	r3, [sp, #96]	@ 0x60
 8023d78:	e769      	b.n	8023c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023d7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023d7c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8023d7e:	441c      	add	r4, r3
 8023d80:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023d82:	443b      	add	r3, r7
 8023d84:	9318      	str	r3, [sp, #96]	@ 0x60
 8023d86:	9b06      	ldr	r3, [sp, #24]
 8023d88:	3b01      	subs	r3, #1
 8023d8a:	9306      	str	r3, [sp, #24]
 8023d8c:	9b07      	ldr	r3, [sp, #28]
 8023d8e:	3303      	adds	r3, #3
 8023d90:	9307      	str	r3, [sp, #28]
 8023d92:	e73e      	b.n	8023c12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023d94:	d026      	beq.n	8023de4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023d96:	9b06      	ldr	r3, [sp, #24]
 8023d98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8023d9a:	3b01      	subs	r3, #1
 8023d9c:	fb00 4003 	mla	r0, r0, r3, r4
 8023da0:	1400      	asrs	r0, r0, #16
 8023da2:	f53f af52 	bmi.w	8023c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023da6:	3901      	subs	r1, #1
 8023da8:	4288      	cmp	r0, r1
 8023daa:	f6bf af4e 	bge.w	8023c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023dae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8023db0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8023db2:	fb01 0303 	mla	r3, r1, r3, r0
 8023db6:	141b      	asrs	r3, r3, #16
 8023db8:	f53f af47 	bmi.w	8023c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023dbc:	3a01      	subs	r2, #1
 8023dbe:	4293      	cmp	r3, r2
 8023dc0:	f6bf af43 	bge.w	8023c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023dc4:	9b07      	ldr	r3, [sp, #28]
 8023dc6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8023dca:	f103 0803 	add.w	r8, r3, #3
 8023dce:	f1ba 0f00 	cmp.w	sl, #0
 8023dd2:	dc71      	bgt.n	8023eb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023dd4:	9b06      	ldr	r3, [sp, #24]
 8023dd6:	9a07      	ldr	r2, [sp, #28]
 8023dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023de0:	441a      	add	r2, r3
 8023de2:	9207      	str	r2, [sp, #28]
 8023de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	f340 80f2 	ble.w	8023fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8023dec:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023df0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023df2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023df6:	eeb0 6a62 	vmov.f32	s12, s5
 8023dfa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023dfe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023e02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023e06:	ee16 4a10 	vmov	r4, s12
 8023e0a:	eeb0 6a43 	vmov.f32	s12, s6
 8023e0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023e12:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8023e16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023e1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023e1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023e22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023e26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023e2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023e2e:	ee12 2a90 	vmov	r2, s5
 8023e32:	eef0 2a47 	vmov.f32	s5, s14
 8023e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e3a:	ee13 2a10 	vmov	r2, s6
 8023e3e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023e42:	eeb0 3a67 	vmov.f32	s6, s15
 8023e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8023e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023e50:	3b01      	subs	r3, #1
 8023e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023e56:	bf08      	it	eq
 8023e58:	4613      	moveq	r3, r2
 8023e5a:	9306      	str	r3, [sp, #24]
 8023e5c:	e6cb      	b.n	8023bf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023e5e:	b151      	cbz	r1, 8023e76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023e60:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8023e64:	4660      	mov	r0, ip
 8023e66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e6a:	442a      	add	r2, r5
 8023e6c:	4667      	mov	r7, ip
 8023e6e:	e731      	b.n	8023cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8023e70:	4660      	mov	r0, ip
 8023e72:	4662      	mov	r2, ip
 8023e74:	e72e      	b.n	8023cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8023e76:	4660      	mov	r0, ip
 8023e78:	4662      	mov	r2, ip
 8023e7a:	e7f7      	b.n	8023e6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8023e7c:	f110 0e01 	adds.w	lr, r0, #1
 8023e80:	f53f af71 	bmi.w	8023d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023e84:	4572      	cmp	r2, lr
 8023e86:	f6ff af6e 	blt.w	8023d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023e8a:	f117 0e01 	adds.w	lr, r7, #1
 8023e8e:	f53f af6a 	bmi.w	8023d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023e92:	45f4      	cmp	ip, lr
 8023e94:	f6ff af67 	blt.w	8023d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023e98:	b212      	sxth	r2, r2
 8023e9a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023e9e:	fa0f f38c 	sxth.w	r3, ip
 8023ea2:	9200      	str	r2, [sp, #0]
 8023ea4:	4631      	mov	r1, r6
 8023ea6:	9a08      	ldr	r2, [sp, #32]
 8023ea8:	9301      	str	r3, [sp, #4]
 8023eaa:	462b      	mov	r3, r5
 8023eac:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8023eb0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023eb2:	f7ff fde9 	bl	8023a88 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8023eb6:	e756      	b.n	8023d66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8023eb8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023eba:	1426      	asrs	r6, r4, #16
 8023ebc:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8023ebe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023ec2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023ec6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023ec8:	1400      	asrs	r0, r0, #16
 8023eca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023ece:	fb02 6000 	mla	r0, r2, r0, r6
 8023ed2:	9e08      	ldr	r6, [sp, #32]
 8023ed4:	f816 e000 	ldrb.w	lr, [r6, r0]
 8023ed8:	eb06 0c00 	add.w	ip, r6, r0
 8023edc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023ee0:	eb05 070e 	add.w	r7, r5, lr
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	d064      	beq.n	8023fb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023ee8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8023eec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ef0:	442e      	add	r6, r5
 8023ef2:	2900      	cmp	r1, #0
 8023ef4:	d066      	beq.n	8023fc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8023ef6:	eb0c 0002 	add.w	r0, ip, r2
 8023efa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023efe:	7840      	ldrb	r0, [r0, #1]
 8023f00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023f08:	442a      	add	r2, r5
 8023f0a:	4428      	add	r0, r5
 8023f0c:	b29b      	uxth	r3, r3
 8023f0e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8023f12:	b289      	uxth	r1, r1
 8023f14:	f896 e000 	ldrb.w	lr, [r6]
 8023f18:	f108 0803 	add.w	r8, r8, #3
 8023f1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023f20:	fb03 f901 	mul.w	r9, r3, r1
 8023f24:	011b      	lsls	r3, r3, #4
 8023f26:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023f2a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8023f2e:	eba3 0309 	sub.w	r3, r3, r9
 8023f32:	b289      	uxth	r1, r1
 8023f34:	b29b      	uxth	r3, r3
 8023f36:	ebac 0c01 	sub.w	ip, ip, r1
 8023f3a:	fb03 fe0e 	mul.w	lr, r3, lr
 8023f3e:	fa1f fc8c 	uxth.w	ip, ip
 8023f42:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023f46:	f892 b000 	ldrb.w	fp, [r2]
 8023f4a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023f4e:	f890 b000 	ldrb.w	fp, [r0]
 8023f52:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023f56:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023f5a:	f808 ec06 	strb.w	lr, [r8, #-6]
 8023f5e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8023f62:	f897 b001 	ldrb.w	fp, [r7, #1]
 8023f66:	fb03 fe0e 	mul.w	lr, r3, lr
 8023f6a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023f6e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023f72:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023f76:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023f7a:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023f7e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023f82:	f808 ec05 	strb.w	lr, [r8, #-5]
 8023f86:	78b6      	ldrb	r6, [r6, #2]
 8023f88:	78bf      	ldrb	r7, [r7, #2]
 8023f8a:	4373      	muls	r3, r6
 8023f8c:	7896      	ldrb	r6, [r2, #2]
 8023f8e:	7882      	ldrb	r2, [r0, #2]
 8023f90:	fb0c 3307 	mla	r3, ip, r7, r3
 8023f94:	fb01 3306 	mla	r3, r1, r6, r3
 8023f98:	fb09 3902 	mla	r9, r9, r2, r3
 8023f9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023f9e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023fa0:	441c      	add	r4, r3
 8023fa2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023fa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023fa8:	4413      	add	r3, r2
 8023faa:	f808 9c04 	strb.w	r9, [r8, #-4]
 8023fae:	9318      	str	r3, [sp, #96]	@ 0x60
 8023fb0:	e70d      	b.n	8023dce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023fb2:	b151      	cbz	r1, 8023fca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8023fb4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023fb8:	4638      	mov	r0, r7
 8023fba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023fbe:	442a      	add	r2, r5
 8023fc0:	463e      	mov	r6, r7
 8023fc2:	e7a3      	b.n	8023f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023fc4:	4638      	mov	r0, r7
 8023fc6:	463a      	mov	r2, r7
 8023fc8:	e7a0      	b.n	8023f0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8023fca:	4638      	mov	r0, r7
 8023fcc:	463a      	mov	r2, r7
 8023fce:	e7f7      	b.n	8023fc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8023fd0:	b00d      	add	sp, #52	@ 0x34
 8023fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023fd6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8023fd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fda:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8023fde:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8023fe2:	2d00      	cmp	r5, #0
 8023fe4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8023fe8:	fb05 700c 	mla	r0, r5, ip, r7
 8023fec:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8023ff0:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8023ff4:	eb02 0800 	add.w	r8, r2, r0
 8023ff8:	f2c0 8118 	blt.w	802422c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8023ffc:	45a9      	cmp	r9, r5
 8023ffe:	f340 8115 	ble.w	802422c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8024002:	2f00      	cmp	r7, #0
 8024004:	f2c0 8110 	blt.w	8024228 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8024008:	45bc      	cmp	ip, r7
 802400a:	f340 810d 	ble.w	8024228 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 802400e:	5c12      	ldrb	r2, [r2, r0]
 8024010:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024014:	1c7a      	adds	r2, r7, #1
 8024016:	f100 810c 	bmi.w	8024232 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 802401a:	4594      	cmp	ip, r2
 802401c:	f340 8109 	ble.w	8024232 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8024020:	2c00      	cmp	r4, #0
 8024022:	f000 8108 	beq.w	8024236 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8024026:	f898 2001 	ldrb.w	r2, [r8, #1]
 802402a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802402e:	3501      	adds	r5, #1
 8024030:	f100 8105 	bmi.w	802423e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8024034:	45a9      	cmp	r9, r5
 8024036:	f340 8102 	ble.w	802423e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802403a:	f1be 0f00 	cmp.w	lr, #0
 802403e:	f000 8101 	beq.w	8024244 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8024042:	2f00      	cmp	r7, #0
 8024044:	f2c0 80f9 	blt.w	802423a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8024048:	45bc      	cmp	ip, r7
 802404a:	f340 80f6 	ble.w	802423a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802404e:	f818 200c 	ldrb.w	r2, [r8, ip]
 8024052:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024056:	3701      	adds	r7, #1
 8024058:	f100 80f7 	bmi.w	802424a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 802405c:	45bc      	cmp	ip, r7
 802405e:	f340 80f4 	ble.w	802424a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8024062:	2c00      	cmp	r4, #0
 8024064:	f000 80f3 	beq.w	802424e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8024068:	44c4      	add	ip, r8
 802406a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802406e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024072:	fa1f fc84 	uxth.w	ip, r4
 8024076:	fa1f f48e 	uxth.w	r4, lr
 802407a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802407e:	fb04 fe0c 	mul.w	lr, r4, ip
 8024082:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024086:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802408a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 802408e:	ebac 070e 	sub.w	r7, ip, lr
 8024092:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8024096:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802409a:	b2a4      	uxth	r4, r4
 802409c:	b2bf      	uxth	r7, r7
 802409e:	1b1b      	subs	r3, r3, r4
 80240a0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80240a4:	fb07 fc0a 	mul.w	ip, r7, sl
 80240a8:	b29b      	uxth	r3, r3
 80240aa:	fb03 cc0b 	mla	ip, r3, fp, ip
 80240ae:	9300      	str	r3, [sp, #0]
 80240b0:	fb04 cc09 	mla	ip, r4, r9, ip
 80240b4:	fb0e cc08 	mla	ip, lr, r8, ip
 80240b8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80240bc:	9301      	str	r3, [sp, #4]
 80240be:	2b00      	cmp	r3, #0
 80240c0:	f000 80af 	beq.w	8024222 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80240c4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80240c8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80240cc:	fb0b fc0c 	mul.w	ip, fp, ip
 80240d0:	fb0b f606 	mul.w	r6, fp, r6
 80240d4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80240d8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80240dc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80240e0:	44dc      	add	ip, fp
 80240e2:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80240e6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80240ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240ee:	fb0a fb0b 	mul.w	fp, sl, fp
 80240f2:	fb0a fa00 	mul.w	sl, sl, r0
 80240f6:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80240fa:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80240fe:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8024102:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024106:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802410a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802410e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024112:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024116:	0a36      	lsrs	r6, r6, #8
 8024118:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802411c:	44dc      	add	ip, fp
 802411e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8024122:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024126:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802412a:	fb09 fb0b 	mul.w	fp, r9, fp
 802412e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024132:	fb09 f905 	mul.w	r9, r9, r5
 8024136:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802413a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802413e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8024142:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024146:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802414a:	fb0c fc07 	mul.w	ip, ip, r7
 802414e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024152:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8024156:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802415a:	4458      	add	r0, fp
 802415c:	fb08 f505 	mul.w	r5, r8, r5
 8024160:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024164:	fb08 f802 	mul.w	r8, r8, r2
 8024168:	0a00      	lsrs	r0, r0, #8
 802416a:	0a2a      	lsrs	r2, r5, #8
 802416c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8024170:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024174:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024178:	4415      	add	r5, r2
 802417a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802417e:	0a2d      	lsrs	r5, r5, #8
 8024180:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024184:	9a00      	ldr	r2, [sp, #0]
 8024186:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802418a:	fb03 cc02 	mla	ip, r3, r2, ip
 802418e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024192:	9b01      	ldr	r3, [sp, #4]
 8024194:	fb05 c50e 	mla	r5, r5, lr, ip
 8024198:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802419c:	fb00 5004 	mla	r0, r0, r4, r5
 80241a0:	0a00      	lsrs	r0, r0, #8
 80241a2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 80241a6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 80241aa:	4378      	muls	r0, r7
 80241ac:	fb02 0006 	mla	r0, r2, r6, r0
 80241b0:	fb0e 0e08 	mla	lr, lr, r8, r0
 80241b4:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80241b8:	fb04 e000 	mla	r0, r4, r0, lr
 80241bc:	0a00      	lsrs	r0, r0, #8
 80241be:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80241c2:	4328      	orrs	r0, r5
 80241c4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80241c8:	b2ad      	uxth	r5, r5
 80241ca:	b2c4      	uxtb	r4, r0
 80241cc:	436b      	muls	r3, r5
 80241ce:	fb14 f405 	smulbb	r4, r4, r5
 80241d2:	1c5a      	adds	r2, r3, #1
 80241d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80241d8:	780b      	ldrb	r3, [r1, #0]
 80241da:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80241de:	b2d2      	uxtb	r2, r2
 80241e0:	fb03 4302 	mla	r3, r3, r2, r4
 80241e4:	b29b      	uxth	r3, r3
 80241e6:	1c5c      	adds	r4, r3, #1
 80241e8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80241ec:	784c      	ldrb	r4, [r1, #1]
 80241ee:	fb14 f402 	smulbb	r4, r4, r2
 80241f2:	121b      	asrs	r3, r3, #8
 80241f4:	700b      	strb	r3, [r1, #0]
 80241f6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80241fa:	fb03 4305 	mla	r3, r3, r5, r4
 80241fe:	b29b      	uxth	r3, r3
 8024200:	1c5c      	adds	r4, r3, #1
 8024202:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8024206:	0c04      	lsrs	r4, r0, #16
 8024208:	7888      	ldrb	r0, [r1, #2]
 802420a:	121b      	asrs	r3, r3, #8
 802420c:	fb10 f002 	smulbb	r0, r0, r2
 8024210:	704b      	strb	r3, [r1, #1]
 8024212:	fb04 0005 	mla	r0, r4, r5, r0
 8024216:	b280      	uxth	r0, r0
 8024218:	1c43      	adds	r3, r0, #1
 802421a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802421e:	1200      	asrs	r0, r0, #8
 8024220:	7088      	strb	r0, [r1, #2]
 8024222:	b003      	add	sp, #12
 8024224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024228:	2600      	movs	r6, #0
 802422a:	e6f3      	b.n	8024014 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802422c:	2000      	movs	r0, #0
 802422e:	4606      	mov	r6, r0
 8024230:	e6fd      	b.n	802402e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024232:	2000      	movs	r0, #0
 8024234:	e6fb      	b.n	802402e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8024236:	4620      	mov	r0, r4
 8024238:	e6f9      	b.n	802402e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802423a:	2500      	movs	r5, #0
 802423c:	e70b      	b.n	8024056 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 802423e:	2200      	movs	r2, #0
 8024240:	4615      	mov	r5, r2
 8024242:	e716      	b.n	8024072 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8024244:	4672      	mov	r2, lr
 8024246:	4675      	mov	r5, lr
 8024248:	e713      	b.n	8024072 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802424a:	2200      	movs	r2, #0
 802424c:	e711      	b.n	8024072 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802424e:	4622      	mov	r2, r4
 8024250:	e70f      	b.n	8024072 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08024252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024256:	b09f      	sub	sp, #124	@ 0x7c
 8024258:	921b      	str	r2, [sp, #108]	@ 0x6c
 802425a:	9309      	str	r3, [sp, #36]	@ 0x24
 802425c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802425e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8024262:	901d      	str	r0, [sp, #116]	@ 0x74
 8024264:	931c      	str	r3, [sp, #112]	@ 0x70
 8024266:	6850      	ldr	r0, [r2, #4]
 8024268:	9119      	str	r1, [sp, #100]	@ 0x64
 802426a:	6812      	ldr	r2, [r2, #0]
 802426c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 802426e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8024272:	fb00 1303 	mla	r3, r0, r3, r1
 8024276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802427a:	18d3      	adds	r3, r2, r3
 802427c:	930c      	str	r3, [sp, #48]	@ 0x30
 802427e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024280:	681b      	ldr	r3, [r3, #0]
 8024282:	9312      	str	r3, [sp, #72]	@ 0x48
 8024284:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024286:	685e      	ldr	r6, [r3, #4]
 8024288:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802428c:	3604      	adds	r6, #4
 802428e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024292:	2b00      	cmp	r3, #0
 8024294:	dc03      	bgt.n	802429e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024296:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024298:	2b00      	cmp	r3, #0
 802429a:	f340 8378 	ble.w	802498e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802429e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80242a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80242a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80242a8:	1e48      	subs	r0, r1, #1
 80242aa:	1e57      	subs	r7, r2, #1
 80242ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242ae:	2b00      	cmp	r3, #0
 80242b0:	f340 818c 	ble.w	80245cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80242b4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80242b6:	142b      	asrs	r3, r5, #16
 80242b8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80242bc:	d406      	bmi.n	80242cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80242be:	4584      	cmp	ip, r0
 80242c0:	da04      	bge.n	80242cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80242c2:	2b00      	cmp	r3, #0
 80242c4:	db02      	blt.n	80242cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80242c6:	42bb      	cmp	r3, r7
 80242c8:	f2c0 8181 	blt.w	80245ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80242cc:	f11c 0c01 	adds.w	ip, ip, #1
 80242d0:	f100 816f 	bmi.w	80245b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80242d4:	4561      	cmp	r1, ip
 80242d6:	f2c0 816c 	blt.w	80245b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80242da:	3301      	adds	r3, #1
 80242dc:	f100 8169 	bmi.w	80245b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80242e0:	429a      	cmp	r2, r3
 80242e2:	f2c0 8166 	blt.w	80245b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80242e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242e8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80242ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80242ec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80242ee:	2b00      	cmp	r3, #0
 80242f0:	f340 818c 	ble.w	802460c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80242f4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80242f6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80242fa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80242fe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024302:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8024304:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024308:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802430a:	141b      	asrs	r3, r3, #16
 802430c:	f100 81d0 	bmi.w	80246b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024310:	f100 38ff 	add.w	r8, r0, #4294967295
 8024314:	4543      	cmp	r3, r8
 8024316:	f280 81cb 	bge.w	80246b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802431a:	f1bc 0f00 	cmp.w	ip, #0
 802431e:	f2c0 81c7 	blt.w	80246b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024322:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024326:	45c4      	cmp	ip, r8
 8024328:	f280 81c2 	bge.w	80246b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802432c:	b200      	sxth	r0, r0
 802432e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024330:	fb0c 3300 	mla	r3, ip, r0, r3
 8024334:	eb04 0803 	add.w	r8, r4, r3
 8024338:	5ce3      	ldrb	r3, [r4, r3]
 802433a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802433e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024342:	2a00      	cmp	r2, #0
 8024344:	f000 81a9 	beq.w	802469a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8024348:	f898 c001 	ldrb.w	ip, [r8, #1]
 802434c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024350:	940e      	str	r4, [sp, #56]	@ 0x38
 8024352:	0e24      	lsrs	r4, r4, #24
 8024354:	9415      	str	r4, [sp, #84]	@ 0x54
 8024356:	b179      	cbz	r1, 8024378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024358:	eb08 0c00 	add.w	ip, r8, r0
 802435c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024360:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024364:	900a      	str	r0, [sp, #40]	@ 0x28
 8024366:	0e00      	lsrs	r0, r0, #24
 8024368:	9013      	str	r0, [sp, #76]	@ 0x4c
 802436a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802436e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024372:	900f      	str	r0, [sp, #60]	@ 0x3c
 8024374:	0e00      	lsrs	r0, r0, #24
 8024376:	9016      	str	r0, [sp, #88]	@ 0x58
 8024378:	b292      	uxth	r2, r2
 802437a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802437c:	b289      	uxth	r1, r1
 802437e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024380:	fb02 f901 	mul.w	r9, r2, r1
 8024384:	0112      	lsls	r2, r2, #4
 8024386:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802438a:	eba2 0809 	sub.w	r8, r2, r9
 802438e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024392:	b289      	uxth	r1, r1
 8024394:	fa1f f888 	uxth.w	r8, r8
 8024398:	1a52      	subs	r2, r2, r1
 802439a:	fb08 f000 	mul.w	r0, r8, r0
 802439e:	b292      	uxth	r2, r2
 80243a0:	fb02 000e 	mla	r0, r2, lr, r0
 80243a4:	fb01 0004 	mla	r0, r1, r4, r0
 80243a8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80243aa:	fb09 0004 	mla	r0, r9, r4, r0
 80243ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80243b2:	2800      	cmp	r0, #0
 80243b4:	f000 80f2 	beq.w	802459c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80243b8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80243bc:	d01b      	beq.n	80243f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80243be:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80243c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80243c6:	fb0e fa0a 	mul.w	sl, lr, sl
 80243ca:	fb0e fe03 	mul.w	lr, lr, r3
 80243ce:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80243d2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80243d6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80243da:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80243de:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80243e2:	4453      	add	r3, sl
 80243e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243e8:	0a1b      	lsrs	r3, r3, #8
 80243ea:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80243ee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80243f2:	ea43 030c 	orr.w	r3, r3, ip
 80243f6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80243f8:	2cff      	cmp	r4, #255	@ 0xff
 80243fa:	d021      	beq.n	8024440 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80243fc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80243fe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024402:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024404:	fb04 fb0b 	mul.w	fp, r4, fp
 8024408:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802440a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802440e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024410:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024414:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024418:	fb04 fa0a 	mul.w	sl, r4, sl
 802441c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024420:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024424:	44de      	add	lr, fp
 8024426:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802442a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802442e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024432:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024436:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802443a:	ea4e 040a 	orr.w	r4, lr, sl
 802443e:	940e      	str	r4, [sp, #56]	@ 0x38
 8024440:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024442:	2cff      	cmp	r4, #255	@ 0xff
 8024444:	d021      	beq.n	802448a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024446:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024448:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802444c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802444e:	fb04 fb0b 	mul.w	fp, r4, fp
 8024452:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024454:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024458:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802445a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802445e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024462:	fb04 fa0a 	mul.w	sl, r4, sl
 8024466:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802446a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802446e:	44de      	add	lr, fp
 8024470:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024474:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024478:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802447c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024480:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024484:	ea4e 040a 	orr.w	r4, lr, sl
 8024488:	940a      	str	r4, [sp, #40]	@ 0x28
 802448a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802448c:	2cff      	cmp	r4, #255	@ 0xff
 802448e:	d021      	beq.n	80244d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8024490:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024492:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024496:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8024498:	fb04 fb0b 	mul.w	fp, r4, fp
 802449c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802449e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80244a2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80244a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80244a8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80244ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80244b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80244b4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80244b8:	44de      	add	lr, fp
 80244ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80244be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80244c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80244c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80244ca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80244ce:	ea4e 040a 	orr.w	r4, lr, sl
 80244d2:	940f      	str	r4, [sp, #60]	@ 0x3c
 80244d4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80244d6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80244da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80244de:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80244e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80244e4:	fb08 fc0c 	mul.w	ip, r8, ip
 80244e8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80244ec:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80244f0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80244f2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80244f6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80244fa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80244fc:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024500:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8024504:	fb08 f80e 	mul.w	r8, r8, lr
 8024508:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802450c:	fb02 8303 	mla	r3, r2, r3, r8
 8024510:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024512:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024516:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802451a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802451c:	fb01 330a 	mla	r3, r1, sl, r3
 8024520:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8024524:	fb09 3901 	mla	r9, r9, r1, r3
 8024528:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802452a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802452c:	4343      	muls	r3, r0
 802452e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024532:	1c58      	adds	r0, r3, #1
 8024534:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024538:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802453c:	ea4c 0c09 	orr.w	ip, ip, r9
 8024540:	783b      	ldrb	r3, [r7, #0]
 8024542:	fa5f f28c 	uxtb.w	r2, ip
 8024546:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802454a:	fb12 f201 	smulbb	r2, r2, r1
 802454e:	b2c0      	uxtb	r0, r0
 8024550:	fb03 2300 	mla	r3, r3, r0, r2
 8024554:	b29b      	uxth	r3, r3
 8024556:	1c5a      	adds	r2, r3, #1
 8024558:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802455c:	787a      	ldrb	r2, [r7, #1]
 802455e:	fb12 f200 	smulbb	r2, r2, r0
 8024562:	121b      	asrs	r3, r3, #8
 8024564:	703b      	strb	r3, [r7, #0]
 8024566:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802456a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802456e:	fb03 2301 	mla	r3, r3, r1, r2
 8024572:	b29b      	uxth	r3, r3
 8024574:	1c5a      	adds	r2, r3, #1
 8024576:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802457a:	121b      	asrs	r3, r3, #8
 802457c:	707b      	strb	r3, [r7, #1]
 802457e:	78bb      	ldrb	r3, [r7, #2]
 8024580:	fb13 f000 	smulbb	r0, r3, r0
 8024584:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024588:	fa1f fc8c 	uxth.w	ip, ip
 802458c:	f10c 0301 	add.w	r3, ip, #1
 8024590:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024594:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024598:	f887 c002 	strb.w	ip, [r7, #2]
 802459c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802459e:	3703      	adds	r7, #3
 80245a0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80245a2:	441a      	add	r2, r3
 80245a4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80245a6:	441d      	add	r5, r3
 80245a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80245aa:	9229      	str	r2, [sp, #164]	@ 0xa4
 80245ac:	3b01      	subs	r3, #1
 80245ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80245b0:	e69c      	b.n	80242ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80245b2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80245b4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80245b6:	441c      	add	r4, r3
 80245b8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80245ba:	441d      	add	r5, r3
 80245bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245be:	9429      	str	r4, [sp, #164]	@ 0xa4
 80245c0:	3b01      	subs	r3, #1
 80245c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80245c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245c6:	3303      	adds	r3, #3
 80245c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80245ca:	e66f      	b.n	80242ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80245cc:	d026      	beq.n	802461c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80245ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245d0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80245d2:	3b01      	subs	r3, #1
 80245d4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80245d6:	fb00 4003 	mla	r0, r0, r3, r4
 80245da:	1400      	asrs	r0, r0, #16
 80245dc:	f53f ae83 	bmi.w	80242e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80245e0:	3901      	subs	r1, #1
 80245e2:	4288      	cmp	r0, r1
 80245e4:	f6bf ae7f 	bge.w	80242e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80245e8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80245ea:	fb01 5303 	mla	r3, r1, r3, r5
 80245ee:	141b      	asrs	r3, r3, #16
 80245f0:	f53f ae79 	bmi.w	80242e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80245f4:	3a01      	subs	r2, #1
 80245f6:	4293      	cmp	r3, r2
 80245f8:	f6bf ae75 	bge.w	80242e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80245fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245fe:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8024602:	f103 0e03 	add.w	lr, r3, #3
 8024606:	f1bb 0f00 	cmp.w	fp, #0
 802460a:	dc71      	bgt.n	80246f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802460c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802460e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024612:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024614:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024618:	4423      	add	r3, r4
 802461a:	930c      	str	r3, [sp, #48]	@ 0x30
 802461c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802461e:	2b00      	cmp	r3, #0
 8024620:	f340 81b5 	ble.w	802498e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024628:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802462a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802462e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024632:	eef0 6a62 	vmov.f32	s13, s5
 8024636:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802463a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802463e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024642:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8024646:	eef0 6a43 	vmov.f32	s13, s6
 802464a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802464e:	ee16 5a90 	vmov	r5, s13
 8024652:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024656:	ee61 7a27 	vmul.f32	s15, s2, s15
 802465a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802465e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024662:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024666:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802466a:	ee12 2a90 	vmov	r2, s5
 802466e:	eef0 2a47 	vmov.f32	s5, s14
 8024672:	fb92 f3f3 	sdiv	r3, r2, r3
 8024676:	ee13 2a10 	vmov	r2, s6
 802467a:	932b      	str	r3, [sp, #172]	@ 0xac
 802467c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802467e:	eeb0 3a67 	vmov.f32	s6, s15
 8024682:	fb92 f3f3 	sdiv	r3, r2, r3
 8024686:	932c      	str	r3, [sp, #176]	@ 0xb0
 8024688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802468a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802468c:	3b01      	subs	r3, #1
 802468e:	9319      	str	r3, [sp, #100]	@ 0x64
 8024690:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024692:	bf08      	it	eq
 8024694:	4613      	moveq	r3, r2
 8024696:	9309      	str	r3, [sp, #36]	@ 0x24
 8024698:	e5fa      	b.n	8024290 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802469a:	2900      	cmp	r1, #0
 802469c:	f43f ae6c 	beq.w	8024378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80246a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80246a4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80246a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80246aa:	0e00      	lsrs	r0, r0, #24
 80246ac:	9013      	str	r0, [sp, #76]	@ 0x4c
 80246ae:	e663      	b.n	8024378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80246b0:	f113 0801 	adds.w	r8, r3, #1
 80246b4:	f53f af72 	bmi.w	802459c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80246b8:	4540      	cmp	r0, r8
 80246ba:	f6ff af6f 	blt.w	802459c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80246be:	f11c 0801 	adds.w	r8, ip, #1
 80246c2:	f53f af6b 	bmi.w	802459c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80246c6:	45c6      	cmp	lr, r8
 80246c8:	f6ff af68 	blt.w	802459c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80246cc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80246ce:	b200      	sxth	r0, r0
 80246d0:	9302      	str	r3, [sp, #8]
 80246d2:	fa0f f38e 	sxth.w	r3, lr
 80246d6:	9000      	str	r0, [sp, #0]
 80246d8:	9301      	str	r3, [sp, #4]
 80246da:	4633      	mov	r3, r6
 80246dc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80246de:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80246e2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80246e6:	4639      	mov	r1, r7
 80246e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80246ea:	f7ff fc74 	bl	8023fd6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80246ee:	e755      	b.n	802459c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80246f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80246f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80246f6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80246f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80246fc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80246fe:	1427      	asrs	r7, r4, #16
 8024700:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024702:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024706:	142b      	asrs	r3, r5, #16
 8024708:	fb01 7303 	mla	r3, r1, r3, r7
 802470c:	18e7      	adds	r7, r4, r3
 802470e:	5ce3      	ldrb	r3, [r4, r3]
 8024710:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024714:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024718:	2a00      	cmp	r2, #0
 802471a:	f000 812e 	beq.w	802497a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 802471e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024722:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8024726:	9410      	str	r4, [sp, #64]	@ 0x40
 8024728:	0e24      	lsrs	r4, r4, #24
 802472a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802472c:	b170      	cbz	r0, 802474c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802472e:	eb07 0801 	add.w	r8, r7, r1
 8024732:	5c79      	ldrb	r1, [r7, r1]
 8024734:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024738:	910b      	str	r1, [sp, #44]	@ 0x2c
 802473a:	0e09      	lsrs	r1, r1, #24
 802473c:	9114      	str	r1, [sp, #80]	@ 0x50
 802473e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024742:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024746:	9111      	str	r1, [sp, #68]	@ 0x44
 8024748:	0e09      	lsrs	r1, r1, #24
 802474a:	9118      	str	r1, [sp, #96]	@ 0x60
 802474c:	b292      	uxth	r2, r2
 802474e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024750:	b280      	uxth	r0, r0
 8024752:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024754:	fb02 f900 	mul.w	r9, r2, r0
 8024758:	0112      	lsls	r2, r2, #4
 802475a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802475e:	eba2 0809 	sub.w	r8, r2, r9
 8024762:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024766:	b280      	uxth	r0, r0
 8024768:	fa1f f888 	uxth.w	r8, r8
 802476c:	1a12      	subs	r2, r2, r0
 802476e:	fb08 f101 	mul.w	r1, r8, r1
 8024772:	b292      	uxth	r2, r2
 8024774:	fb02 110c 	mla	r1, r2, ip, r1
 8024778:	fb00 1104 	mla	r1, r0, r4, r1
 802477c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802477e:	fb09 1104 	mla	r1, r9, r4, r1
 8024782:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024786:	2900      	cmp	r1, #0
 8024788:	f000 80ec 	beq.w	8024964 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802478c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024790:	d019      	beq.n	80247c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8024792:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024796:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802479a:	fb0c fa0a 	mul.w	sl, ip, sl
 802479e:	fb0c fc03 	mul.w	ip, ip, r3
 80247a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80247a6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80247aa:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80247ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80247b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80247b6:	4453      	add	r3, sl
 80247b8:	0a3f      	lsrs	r7, r7, #8
 80247ba:	0a1b      	lsrs	r3, r3, #8
 80247bc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80247c0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80247c4:	433b      	orrs	r3, r7
 80247c6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80247c8:	2cff      	cmp	r4, #255	@ 0xff
 80247ca:	d020      	beq.n	802480e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80247cc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80247ce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80247d2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80247d4:	4367      	muls	r7, r4
 80247d6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80247d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80247dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80247e0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80247e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80247e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80247ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80247ee:	44bc      	add	ip, r7
 80247f0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80247f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80247fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024800:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024804:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024808:	ea4c 040a 	orr.w	r4, ip, sl
 802480c:	9410      	str	r4, [sp, #64]	@ 0x40
 802480e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024810:	2cff      	cmp	r4, #255	@ 0xff
 8024812:	d020      	beq.n	8024856 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8024814:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024816:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802481a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802481c:	4367      	muls	r7, r4
 802481e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024820:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024824:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024828:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802482a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802482e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024832:	fb04 fa0a 	mul.w	sl, r4, sl
 8024836:	44bc      	add	ip, r7
 8024838:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802483c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024840:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024844:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024848:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802484c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024850:	ea4c 040a 	orr.w	r4, ip, sl
 8024854:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024856:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024858:	2cff      	cmp	r4, #255	@ 0xff
 802485a:	d020      	beq.n	802489e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802485c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802485e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024862:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024864:	4367      	muls	r7, r4
 8024866:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024868:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802486c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024870:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8024872:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024876:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802487a:	fb04 fa0a 	mul.w	sl, r4, sl
 802487e:	44bc      	add	ip, r7
 8024880:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024884:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024888:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802488c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024890:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024894:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024898:	ea4c 040a 	orr.w	r4, ip, sl
 802489c:	9411      	str	r4, [sp, #68]	@ 0x44
 802489e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80248a0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80248a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80248a8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80248ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80248ae:	fb08 f707 	mul.w	r7, r8, r7
 80248b2:	fb02 770c 	mla	r7, r2, ip, r7
 80248b6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80248ba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80248bc:	fb00 770c 	mla	r7, r0, ip, r7
 80248c0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80248c4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80248c6:	fb09 770c 	mla	r7, r9, ip, r7
 80248ca:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80248ce:	fb08 f80c 	mul.w	r8, r8, ip
 80248d2:	0a3f      	lsrs	r7, r7, #8
 80248d4:	fb02 8303 	mla	r3, r2, r3, r8
 80248d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80248da:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80248de:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80248e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80248e4:	fb00 330a 	mla	r3, r0, sl, r3
 80248e8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80248ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80248ee:	fb09 3c0c 	mla	ip, r9, ip, r3
 80248f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80248f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80248f8:	434b      	muls	r3, r1
 80248fa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80248fe:	1c59      	adds	r1, r3, #1
 8024900:	ea47 070c 	orr.w	r7, r7, ip
 8024904:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024908:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802490c:	b2fa      	uxtb	r2, r7
 802490e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024912:	fb12 f200 	smulbb	r2, r2, r0
 8024916:	b2c9      	uxtb	r1, r1
 8024918:	fb03 2301 	mla	r3, r3, r1, r2
 802491c:	b29b      	uxth	r3, r3
 802491e:	1c5a      	adds	r2, r3, #1
 8024920:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024924:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024928:	fb12 f201 	smulbb	r2, r2, r1
 802492c:	121b      	asrs	r3, r3, #8
 802492e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024932:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8024936:	0c3f      	lsrs	r7, r7, #16
 8024938:	fb03 2300 	mla	r3, r3, r0, r2
 802493c:	b29b      	uxth	r3, r3
 802493e:	1c5a      	adds	r2, r3, #1
 8024940:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024944:	121b      	asrs	r3, r3, #8
 8024946:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802494a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802494e:	fb13 f101 	smulbb	r1, r3, r1
 8024952:	fb07 1700 	mla	r7, r7, r0, r1
 8024956:	b2bf      	uxth	r7, r7
 8024958:	1c7b      	adds	r3, r7, #1
 802495a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802495e:	123f      	asrs	r7, r7, #8
 8024960:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8024964:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8024966:	f10e 0e03 	add.w	lr, lr, #3
 802496a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802496c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024970:	441a      	add	r2, r3
 8024972:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024974:	9229      	str	r2, [sp, #164]	@ 0xa4
 8024976:	441d      	add	r5, r3
 8024978:	e645      	b.n	8024606 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802497a:	2800      	cmp	r0, #0
 802497c:	f43f aee6 	beq.w	802474c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8024980:	5c79      	ldrb	r1, [r7, r1]
 8024982:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024986:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024988:	0e09      	lsrs	r1, r1, #24
 802498a:	9114      	str	r1, [sp, #80]	@ 0x50
 802498c:	e6de      	b.n	802474c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802498e:	b01f      	add	sp, #124	@ 0x7c
 8024990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024994 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8024994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024998:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 802499c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80249a0:	2d00      	cmp	r5, #0
 80249a2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80249a6:	fb05 700e 	mla	r0, r5, lr, r7
 80249aa:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80249ae:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 80249b2:	eb02 0800 	add.w	r8, r2, r0
 80249b6:	f2c0 8105 	blt.w	8024bc4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80249ba:	45a9      	cmp	r9, r5
 80249bc:	f340 8102 	ble.w	8024bc4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80249c0:	2f00      	cmp	r7, #0
 80249c2:	f2c0 80fd 	blt.w	8024bc0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80249c6:	45be      	cmp	lr, r7
 80249c8:	f340 80fa 	ble.w	8024bc0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80249cc:	5c12      	ldrb	r2, [r2, r0]
 80249ce:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80249d2:	1c7a      	adds	r2, r7, #1
 80249d4:	f100 80f9 	bmi.w	8024bca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80249d8:	4596      	cmp	lr, r2
 80249da:	f340 80f6 	ble.w	8024bca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80249de:	2c00      	cmp	r4, #0
 80249e0:	f000 80f5 	beq.w	8024bce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80249e4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80249e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80249ec:	3501      	adds	r5, #1
 80249ee:	f100 80f2 	bmi.w	8024bd6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80249f2:	45a9      	cmp	r9, r5
 80249f4:	f340 80ef 	ble.w	8024bd6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80249f8:	f1bc 0f00 	cmp.w	ip, #0
 80249fc:	f000 80ee 	beq.w	8024bdc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8024a00:	2f00      	cmp	r7, #0
 8024a02:	f2c0 80e6 	blt.w	8024bd2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024a06:	45be      	cmp	lr, r7
 8024a08:	f340 80e3 	ble.w	8024bd2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8024a0c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8024a10:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024a14:	3701      	adds	r7, #1
 8024a16:	f100 80e4 	bmi.w	8024be2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024a1a:	45be      	cmp	lr, r7
 8024a1c:	f340 80e1 	ble.w	8024be2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8024a20:	2c00      	cmp	r4, #0
 8024a22:	f000 80e0 	beq.w	8024be6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8024a26:	44c6      	add	lr, r8
 8024a28:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024a2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024a30:	b2a3      	uxth	r3, r4
 8024a32:	fa1f fc8c 	uxth.w	ip, ip
 8024a36:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024a3a:	fb0c fe03 	mul.w	lr, ip, r3
 8024a3e:	011b      	lsls	r3, r3, #4
 8024a40:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024a44:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8024a48:	eba3 070e 	sub.w	r7, r3, lr
 8024a4c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8024a50:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024a54:	fa1f f48c 	uxth.w	r4, ip
 8024a58:	b2bf      	uxth	r7, r7
 8024a5a:	1b1b      	subs	r3, r3, r4
 8024a5c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024a60:	fb07 fc0a 	mul.w	ip, r7, sl
 8024a64:	b29b      	uxth	r3, r3
 8024a66:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024a6a:	9300      	str	r3, [sp, #0]
 8024a6c:	fb04 cc09 	mla	ip, r4, r9, ip
 8024a70:	fb0e cc08 	mla	ip, lr, r8, ip
 8024a74:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024a78:	9301      	str	r3, [sp, #4]
 8024a7a:	2b00      	cmp	r3, #0
 8024a7c:	f000 809d 	beq.w	8024bba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8024a80:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8024a84:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024a88:	fb0b fc0c 	mul.w	ip, fp, ip
 8024a8c:	fb0b f606 	mul.w	r6, fp, r6
 8024a90:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024a94:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8024a98:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8024a9c:	44dc      	add	ip, fp
 8024a9e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8024aa2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024aa6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024aaa:	fb0a fb0b 	mul.w	fp, sl, fp
 8024aae:	fb0a fa00 	mul.w	sl, sl, r0
 8024ab2:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8024ab6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8024aba:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8024abe:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024ac2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024ac6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024aca:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024ace:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024ad2:	0a36      	lsrs	r6, r6, #8
 8024ad4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ad8:	44dc      	add	ip, fp
 8024ada:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8024ade:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8024ae2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8024ae6:	fb09 fb0b 	mul.w	fp, r9, fp
 8024aea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024aee:	fb09 f905 	mul.w	r9, r9, r5
 8024af2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8024af6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024afa:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8024afe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024b02:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024b06:	fb0c fc07 	mul.w	ip, ip, r7
 8024b0a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8024b0e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8024b12:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8024b16:	4458      	add	r0, fp
 8024b18:	fb08 f505 	mul.w	r5, r8, r5
 8024b1c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024b20:	fb08 f802 	mul.w	r8, r8, r2
 8024b24:	0a00      	lsrs	r0, r0, #8
 8024b26:	0a2a      	lsrs	r2, r5, #8
 8024b28:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8024b2c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8024b30:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8024b34:	4415      	add	r5, r2
 8024b36:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8024b3a:	0a2d      	lsrs	r5, r5, #8
 8024b3c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8024b40:	9a00      	ldr	r2, [sp, #0]
 8024b42:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024b46:	fb03 cc02 	mla	ip, r3, r2, ip
 8024b4a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024b4e:	9b01      	ldr	r3, [sp, #4]
 8024b50:	fb05 c50e 	mla	r5, r5, lr, ip
 8024b54:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8024b58:	43db      	mvns	r3, r3
 8024b5a:	fb00 5004 	mla	r0, r0, r4, r5
 8024b5e:	b2db      	uxtb	r3, r3
 8024b60:	0a00      	lsrs	r0, r0, #8
 8024b62:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8024b66:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8024b6a:	4378      	muls	r0, r7
 8024b6c:	fb02 0006 	mla	r0, r2, r6, r0
 8024b70:	780a      	ldrb	r2, [r1, #0]
 8024b72:	fb0e 0e08 	mla	lr, lr, r8, r0
 8024b76:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8024b7a:	fb04 e000 	mla	r0, r4, r0, lr
 8024b7e:	fb02 f403 	mul.w	r4, r2, r3
 8024b82:	0a00      	lsrs	r0, r0, #8
 8024b84:	1c62      	adds	r2, r4, #1
 8024b86:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8024b8a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024b8e:	4328      	orrs	r0, r5
 8024b90:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024b94:	700a      	strb	r2, [r1, #0]
 8024b96:	784a      	ldrb	r2, [r1, #1]
 8024b98:	435a      	muls	r2, r3
 8024b9a:	1c54      	adds	r4, r2, #1
 8024b9c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8024ba0:	0a02      	lsrs	r2, r0, #8
 8024ba2:	0c00      	lsrs	r0, r0, #16
 8024ba4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024ba8:	704a      	strb	r2, [r1, #1]
 8024baa:	788a      	ldrb	r2, [r1, #2]
 8024bac:	4353      	muls	r3, r2
 8024bae:	1c5a      	adds	r2, r3, #1
 8024bb0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024bb4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024bb8:	7088      	strb	r0, [r1, #2]
 8024bba:	b003      	add	sp, #12
 8024bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bc0:	2600      	movs	r6, #0
 8024bc2:	e706      	b.n	80249d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8024bc4:	2000      	movs	r0, #0
 8024bc6:	4606      	mov	r6, r0
 8024bc8:	e710      	b.n	80249ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024bca:	2000      	movs	r0, #0
 8024bcc:	e70e      	b.n	80249ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024bce:	4620      	mov	r0, r4
 8024bd0:	e70c      	b.n	80249ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8024bd2:	2500      	movs	r5, #0
 8024bd4:	e71e      	b.n	8024a14 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8024bd6:	2200      	movs	r2, #0
 8024bd8:	4615      	mov	r5, r2
 8024bda:	e729      	b.n	8024a30 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024bdc:	4662      	mov	r2, ip
 8024bde:	4665      	mov	r5, ip
 8024be0:	e726      	b.n	8024a30 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024be2:	2200      	movs	r2, #0
 8024be4:	e724      	b.n	8024a30 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8024be6:	4622      	mov	r2, r4
 8024be8:	e722      	b.n	8024a30 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08024bea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024bea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bee:	b09b      	sub	sp, #108	@ 0x6c
 8024bf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024bf4:	9218      	str	r2, [sp, #96]	@ 0x60
 8024bf6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024bf8:	9019      	str	r0, [sp, #100]	@ 0x64
 8024bfa:	9116      	str	r1, [sp, #88]	@ 0x58
 8024bfc:	6850      	ldr	r0, [r2, #4]
 8024bfe:	9307      	str	r3, [sp, #28]
 8024c00:	6812      	ldr	r2, [r2, #0]
 8024c02:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8024c04:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8024c08:	fb00 1303 	mla	r3, r0, r3, r1
 8024c0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c10:	18d3      	adds	r3, r2, r3
 8024c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8024c14:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024c16:	681b      	ldr	r3, [r3, #0]
 8024c18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024c1a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024c1c:	685e      	ldr	r6, [r3, #4]
 8024c1e:	3604      	adds	r6, #4
 8024c20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	dc03      	bgt.n	8024c2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8024c26:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	f340 834f 	ble.w	80252cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8024c2e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024c30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c38:	1e48      	subs	r0, r1, #1
 8024c3a:	1e57      	subs	r7, r2, #1
 8024c3c:	9b07      	ldr	r3, [sp, #28]
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	f340 8178 	ble.w	8024f34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8024c44:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024c46:	142b      	asrs	r3, r5, #16
 8024c48:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024c4c:	d406      	bmi.n	8024c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024c4e:	4584      	cmp	ip, r0
 8024c50:	da04      	bge.n	8024c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024c52:	2b00      	cmp	r3, #0
 8024c54:	db02      	blt.n	8024c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024c56:	42bb      	cmp	r3, r7
 8024c58:	f2c0 816d 	blt.w	8024f36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8024c5c:	f11c 0c01 	adds.w	ip, ip, #1
 8024c60:	f100 815b 	bmi.w	8024f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c64:	4561      	cmp	r1, ip
 8024c66:	f2c0 8158 	blt.w	8024f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c6a:	3301      	adds	r3, #1
 8024c6c:	f100 8155 	bmi.w	8024f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c70:	429a      	cmp	r2, r3
 8024c72:	f2c0 8152 	blt.w	8024f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8024c76:	9b07      	ldr	r3, [sp, #28]
 8024c78:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8024c7a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024c7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024c7e:	2b00      	cmp	r3, #0
 8024c80:	f340 8178 	ble.w	8024f74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024c84:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024c86:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024c8a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024c8e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024c92:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024c94:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024c98:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024c9a:	141b      	asrs	r3, r3, #16
 8024c9c:	f100 81ba 	bmi.w	8025014 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024ca0:	f101 38ff 	add.w	r8, r1, #4294967295
 8024ca4:	4543      	cmp	r3, r8
 8024ca6:	f280 81b5 	bge.w	8025014 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024caa:	f1bc 0f00 	cmp.w	ip, #0
 8024cae:	f2c0 81b1 	blt.w	8025014 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024cb2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024cb6:	45c4      	cmp	ip, r8
 8024cb8:	f280 81ac 	bge.w	8025014 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8024cbc:	b209      	sxth	r1, r1
 8024cbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024cc0:	fb0c 3301 	mla	r3, ip, r1, r3
 8024cc4:	eb04 0803 	add.w	r8, r4, r3
 8024cc8:	5ce3      	ldrb	r3, [r4, r3]
 8024cca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024cce:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024cd2:	2a00      	cmp	r2, #0
 8024cd4:	f000 8193 	beq.w	8024ffe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8024cd8:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024cdc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024ce0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024ce2:	0e24      	lsrs	r4, r4, #24
 8024ce4:	9412      	str	r4, [sp, #72]	@ 0x48
 8024ce6:	b178      	cbz	r0, 8024d08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8024ce8:	eb08 0c01 	add.w	ip, r8, r1
 8024cec:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024cf0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024cf4:	9108      	str	r1, [sp, #32]
 8024cf6:	0e09      	lsrs	r1, r1, #24
 8024cf8:	9110      	str	r1, [sp, #64]	@ 0x40
 8024cfa:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024cfe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024d02:	910c      	str	r1, [sp, #48]	@ 0x30
 8024d04:	0e09      	lsrs	r1, r1, #24
 8024d06:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024d08:	b292      	uxth	r2, r2
 8024d0a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024d0c:	b280      	uxth	r0, r0
 8024d0e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024d10:	fb02 f900 	mul.w	r9, r2, r0
 8024d14:	0112      	lsls	r2, r2, #4
 8024d16:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024d1a:	eba2 0809 	sub.w	r8, r2, r9
 8024d1e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8024d22:	b280      	uxth	r0, r0
 8024d24:	fa1f f888 	uxth.w	r8, r8
 8024d28:	1a12      	subs	r2, r2, r0
 8024d2a:	fb08 f101 	mul.w	r1, r8, r1
 8024d2e:	b292      	uxth	r2, r2
 8024d30:	fb02 110e 	mla	r1, r2, lr, r1
 8024d34:	fb00 1104 	mla	r1, r0, r4, r1
 8024d38:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024d3a:	fb09 1104 	mla	r1, r9, r4, r1
 8024d3e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024d42:	2900      	cmp	r1, #0
 8024d44:	f000 80de 	beq.w	8024f04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8024d48:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8024d4c:	d01b      	beq.n	8024d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8024d4e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024d52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024d56:	fb0e fa0a 	mul.w	sl, lr, sl
 8024d5a:	fb0e fe03 	mul.w	lr, lr, r3
 8024d5e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024d62:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024d66:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8024d6a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024d6e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024d72:	4453      	add	r3, sl
 8024d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d78:	0a1b      	lsrs	r3, r3, #8
 8024d7a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024d7e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024d82:	ea43 030c 	orr.w	r3, r3, ip
 8024d86:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024d88:	2cff      	cmp	r4, #255	@ 0xff
 8024d8a:	d021      	beq.n	8024dd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024d8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d8e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024d92:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024d94:	fb04 fb0b 	mul.w	fp, r4, fp
 8024d98:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d9a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024d9e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024da0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024da4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024da8:	fb04 fa0a 	mul.w	sl, r4, sl
 8024dac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024db0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024db4:	44de      	add	lr, fp
 8024db6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024dba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024dbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024dc2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024dc6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024dca:	ea4e 040a 	orr.w	r4, lr, sl
 8024dce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024dd0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024dd2:	2cff      	cmp	r4, #255	@ 0xff
 8024dd4:	d021      	beq.n	8024e1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024dd6:	9c08      	ldr	r4, [sp, #32]
 8024dd8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024ddc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024dde:	fb04 fb0b 	mul.w	fp, r4, fp
 8024de2:	9c08      	ldr	r4, [sp, #32]
 8024de4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024de8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024dea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024dee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024df2:	fb04 fa0a 	mul.w	sl, r4, sl
 8024df6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024dfa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024dfe:	44de      	add	lr, fp
 8024e00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e10:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024e14:	ea4e 040a 	orr.w	r4, lr, sl
 8024e18:	9408      	str	r4, [sp, #32]
 8024e1a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e1c:	2cff      	cmp	r4, #255	@ 0xff
 8024e1e:	d021      	beq.n	8024e64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8024e20:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024e22:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024e26:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e28:	fb04 fb0b 	mul.w	fp, r4, fp
 8024e2c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024e2e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024e32:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024e34:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024e38:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024e3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e40:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e44:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024e48:	44de      	add	lr, fp
 8024e4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024e4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024e5a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024e5e:	ea4e 040a 	orr.w	r4, lr, sl
 8024e62:	940c      	str	r4, [sp, #48]	@ 0x30
 8024e64:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024e66:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8024e6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024e6e:	43c9      	mvns	r1, r1
 8024e70:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024e74:	9c08      	ldr	r4, [sp, #32]
 8024e76:	b2c9      	uxtb	r1, r1
 8024e78:	fb08 fc0c 	mul.w	ip, r8, ip
 8024e7c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024e80:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024e84:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024e86:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024e8a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024e8e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024e90:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024e94:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8024e98:	fb08 f80e 	mul.w	r8, r8, lr
 8024e9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ea0:	fb02 8303 	mla	r3, r2, r3, r8
 8024ea4:	9a08      	ldr	r2, [sp, #32]
 8024ea6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024eaa:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024eae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024eb0:	fb00 330a 	mla	r3, r0, sl, r3
 8024eb4:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8024eb8:	fb09 3900 	mla	r9, r9, r0, r3
 8024ebc:	783b      	ldrb	r3, [r7, #0]
 8024ebe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024ec2:	fb03 f201 	mul.w	r2, r3, r1
 8024ec6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024eca:	1c53      	adds	r3, r2, #1
 8024ecc:	ea4c 0c09 	orr.w	ip, ip, r9
 8024ed0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ed4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024ed8:	703b      	strb	r3, [r7, #0]
 8024eda:	787b      	ldrb	r3, [r7, #1]
 8024edc:	434b      	muls	r3, r1
 8024ede:	1c5a      	adds	r2, r3, #1
 8024ee0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024ee4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024ee8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024eec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ef0:	707b      	strb	r3, [r7, #1]
 8024ef2:	78bb      	ldrb	r3, [r7, #2]
 8024ef4:	4359      	muls	r1, r3
 8024ef6:	1c4b      	adds	r3, r1, #1
 8024ef8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024efc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024f00:	f887 c002 	strb.w	ip, [r7, #2]
 8024f04:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024f06:	3703      	adds	r7, #3
 8024f08:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024f0a:	441a      	add	r2, r3
 8024f0c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024f0e:	441d      	add	r5, r3
 8024f10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024f12:	9225      	str	r2, [sp, #148]	@ 0x94
 8024f14:	3b01      	subs	r3, #1
 8024f16:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024f18:	e6b0      	b.n	8024c7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024f1a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024f1c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024f1e:	441c      	add	r4, r3
 8024f20:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024f22:	441d      	add	r5, r3
 8024f24:	9b07      	ldr	r3, [sp, #28]
 8024f26:	9425      	str	r4, [sp, #148]	@ 0x94
 8024f28:	3b01      	subs	r3, #1
 8024f2a:	9307      	str	r3, [sp, #28]
 8024f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024f2e:	3303      	adds	r3, #3
 8024f30:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f32:	e683      	b.n	8024c3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8024f34:	d026      	beq.n	8024f84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8024f36:	9b07      	ldr	r3, [sp, #28]
 8024f38:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024f3a:	3b01      	subs	r3, #1
 8024f3c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024f3e:	fb00 4003 	mla	r0, r0, r3, r4
 8024f42:	1400      	asrs	r0, r0, #16
 8024f44:	f53f ae97 	bmi.w	8024c76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024f48:	3901      	subs	r1, #1
 8024f4a:	4288      	cmp	r0, r1
 8024f4c:	f6bf ae93 	bge.w	8024c76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024f50:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024f52:	fb01 5303 	mla	r3, r1, r3, r5
 8024f56:	141b      	asrs	r3, r3, #16
 8024f58:	f53f ae8d 	bmi.w	8024c76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024f5c:	3a01      	subs	r2, #1
 8024f5e:	4293      	cmp	r3, r2
 8024f60:	f6bf ae89 	bge.w	8024c76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024f66:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024f6a:	f103 0e03 	add.w	lr, r3, #3
 8024f6e:	f1bb 0f00 	cmp.w	fp, #0
 8024f72:	dc6d      	bgt.n	8025050 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8024f74:	9b07      	ldr	r3, [sp, #28]
 8024f76:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024f7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024f7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024f80:	4423      	add	r3, r4
 8024f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024f86:	2b00      	cmp	r3, #0
 8024f88:	f340 81a0 	ble.w	80252cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8024f8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024f90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024f92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024f96:	eeb0 6a62 	vmov.f32	s12, s5
 8024f9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8024f9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024fa2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024fa6:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8024faa:	eeb0 6a43 	vmov.f32	s12, s6
 8024fae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8024fb2:	ee16 5a10 	vmov	r5, s12
 8024fb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024fba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024fbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024fc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024fc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024fca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024fce:	ee12 2a90 	vmov	r2, s5
 8024fd2:	eef0 2a47 	vmov.f32	s5, s14
 8024fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fda:	ee13 2a10 	vmov	r2, s6
 8024fde:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024fe0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024fe2:	eeb0 3a67 	vmov.f32	s6, s15
 8024fe6:	fb92 f3f3 	sdiv	r3, r2, r3
 8024fea:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024fec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024fee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024ff0:	3b01      	subs	r3, #1
 8024ff2:	9316      	str	r3, [sp, #88]	@ 0x58
 8024ff4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024ff6:	bf08      	it	eq
 8024ff8:	4613      	moveq	r3, r2
 8024ffa:	9307      	str	r3, [sp, #28]
 8024ffc:	e610      	b.n	8024c20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8024ffe:	2800      	cmp	r0, #0
 8025000:	f43f ae82 	beq.w	8024d08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025004:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025008:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802500c:	9108      	str	r1, [sp, #32]
 802500e:	0e09      	lsrs	r1, r1, #24
 8025010:	9110      	str	r1, [sp, #64]	@ 0x40
 8025012:	e679      	b.n	8024d08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025014:	f113 0801 	adds.w	r8, r3, #1
 8025018:	f53f af74 	bmi.w	8024f04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802501c:	4541      	cmp	r1, r8
 802501e:	f6ff af71 	blt.w	8024f04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025022:	f11c 0801 	adds.w	r8, ip, #1
 8025026:	f53f af6d 	bmi.w	8024f04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802502a:	45c6      	cmp	lr, r8
 802502c:	f6ff af6a 	blt.w	8024f04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025030:	b209      	sxth	r1, r1
 8025032:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025036:	fa0f f38e 	sxth.w	r3, lr
 802503a:	9100      	str	r1, [sp, #0]
 802503c:	4639      	mov	r1, r7
 802503e:	9301      	str	r3, [sp, #4]
 8025040:	4633      	mov	r3, r6
 8025042:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025046:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025048:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802504a:	f7ff fca3 	bl	8024994 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802504e:	e759      	b.n	8024f04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8025050:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8025052:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025056:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8025058:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802505c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802505e:	1427      	asrs	r7, r4, #16
 8025060:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025062:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025066:	142b      	asrs	r3, r5, #16
 8025068:	fb01 7303 	mla	r3, r1, r3, r7
 802506c:	18e7      	adds	r7, r4, r3
 802506e:	5ce3      	ldrb	r3, [r4, r3]
 8025070:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025074:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025078:	2a00      	cmp	r2, #0
 802507a:	f000 811d 	beq.w	80252b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 802507e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8025082:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8025086:	940d      	str	r4, [sp, #52]	@ 0x34
 8025088:	0e24      	lsrs	r4, r4, #24
 802508a:	9414      	str	r4, [sp, #80]	@ 0x50
 802508c:	b170      	cbz	r0, 80250ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802508e:	eb07 0801 	add.w	r8, r7, r1
 8025092:	5c79      	ldrb	r1, [r7, r1]
 8025094:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025098:	9109      	str	r1, [sp, #36]	@ 0x24
 802509a:	0e09      	lsrs	r1, r1, #24
 802509c:	9111      	str	r1, [sp, #68]	@ 0x44
 802509e:	f898 1001 	ldrb.w	r1, [r8, #1]
 80250a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80250a6:	910e      	str	r1, [sp, #56]	@ 0x38
 80250a8:	0e09      	lsrs	r1, r1, #24
 80250aa:	9115      	str	r1, [sp, #84]	@ 0x54
 80250ac:	b292      	uxth	r2, r2
 80250ae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80250b0:	b280      	uxth	r0, r0
 80250b2:	fb02 f900 	mul.w	r9, r2, r0
 80250b6:	0112      	lsls	r2, r2, #4
 80250b8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80250bc:	eba2 0809 	sub.w	r8, r2, r9
 80250c0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80250c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80250c6:	b280      	uxth	r0, r0
 80250c8:	fa1f f888 	uxth.w	r8, r8
 80250cc:	1a09      	subs	r1, r1, r0
 80250ce:	fb08 f202 	mul.w	r2, r8, r2
 80250d2:	b289      	uxth	r1, r1
 80250d4:	fb01 220c 	mla	r2, r1, ip, r2
 80250d8:	fb00 2204 	mla	r2, r0, r4, r2
 80250dc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80250de:	fb09 2204 	mla	r2, r9, r4, r2
 80250e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80250e6:	2a00      	cmp	r2, #0
 80250e8:	f000 80db 	beq.w	80252a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80250ec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80250f0:	d019      	beq.n	8025126 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80250f2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80250f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80250fa:	fb0c fa0a 	mul.w	sl, ip, sl
 80250fe:	fb0c fc03 	mul.w	ip, ip, r3
 8025102:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025106:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802510a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802510e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025112:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025116:	4453      	add	r3, sl
 8025118:	0a3f      	lsrs	r7, r7, #8
 802511a:	0a1b      	lsrs	r3, r3, #8
 802511c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025120:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025124:	433b      	orrs	r3, r7
 8025126:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025128:	2cff      	cmp	r4, #255	@ 0xff
 802512a:	d020      	beq.n	802516e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802512c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802512e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025132:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025134:	4367      	muls	r7, r4
 8025136:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025138:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802513c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025140:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025142:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025146:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802514a:	fb04 fa0a 	mul.w	sl, r4, sl
 802514e:	44bc      	add	ip, r7
 8025150:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025158:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802515c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025160:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025164:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025168:	ea4c 040a 	orr.w	r4, ip, sl
 802516c:	940d      	str	r4, [sp, #52]	@ 0x34
 802516e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025170:	2cff      	cmp	r4, #255	@ 0xff
 8025172:	d020      	beq.n	80251b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8025174:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025176:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802517a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802517c:	4367      	muls	r7, r4
 802517e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025180:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025184:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025188:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802518a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802518e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025192:	fb04 fa0a 	mul.w	sl, r4, sl
 8025196:	44bc      	add	ip, r7
 8025198:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802519c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80251a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80251a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80251b0:	ea4c 040a 	orr.w	r4, ip, sl
 80251b4:	9409      	str	r4, [sp, #36]	@ 0x24
 80251b6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80251b8:	2cff      	cmp	r4, #255	@ 0xff
 80251ba:	d020      	beq.n	80251fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80251bc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80251be:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80251c2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80251c4:	4367      	muls	r7, r4
 80251c6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80251c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80251cc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80251d0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80251d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80251d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80251da:	fb04 fa0a 	mul.w	sl, r4, sl
 80251de:	44bc      	add	ip, r7
 80251e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80251e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80251ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80251f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80251f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80251f8:	ea4c 040a 	orr.w	r4, ip, sl
 80251fc:	940e      	str	r4, [sp, #56]	@ 0x38
 80251fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025200:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025204:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025208:	43d2      	mvns	r2, r2
 802520a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802520e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8025210:	b2d2      	uxtb	r2, r2
 8025212:	fb08 f707 	mul.w	r7, r8, r7
 8025216:	fb01 770c 	mla	r7, r1, ip, r7
 802521a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802521e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025220:	fb00 770c 	mla	r7, r0, ip, r7
 8025224:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025228:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802522a:	fb09 770c 	mla	r7, r9, ip, r7
 802522e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025232:	fb08 f80c 	mul.w	r8, r8, ip
 8025236:	0a3f      	lsrs	r7, r7, #8
 8025238:	fb01 8303 	mla	r3, r1, r3, r8
 802523c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802523e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025242:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8025246:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025248:	fb00 330a 	mla	r3, r0, sl, r3
 802524c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8025250:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025254:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8025258:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802525c:	fb03 f102 	mul.w	r1, r3, r2
 8025260:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025264:	1c4b      	adds	r3, r1, #1
 8025266:	ea47 070c 	orr.w	r7, r7, ip
 802526a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802526e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8025272:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8025276:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 802527a:	4353      	muls	r3, r2
 802527c:	1c59      	adds	r1, r3, #1
 802527e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025282:	0a3b      	lsrs	r3, r7, #8
 8025284:	0c3f      	lsrs	r7, r7, #16
 8025286:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802528a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802528e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025292:	435a      	muls	r2, r3
 8025294:	1c53      	adds	r3, r2, #1
 8025296:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802529a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802529e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80252a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80252a4:	f10e 0e03 	add.w	lr, lr, #3
 80252a8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80252aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80252ae:	441a      	add	r2, r3
 80252b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80252b2:	9225      	str	r2, [sp, #148]	@ 0x94
 80252b4:	441d      	add	r5, r3
 80252b6:	e65a      	b.n	8024f6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80252b8:	2800      	cmp	r0, #0
 80252ba:	f43f aef7 	beq.w	80250ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80252be:	5c79      	ldrb	r1, [r7, r1]
 80252c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80252c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80252c6:	0e09      	lsrs	r1, r1, #24
 80252c8:	9111      	str	r1, [sp, #68]	@ 0x44
 80252ca:	e6ef      	b.n	80250ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80252cc:	b01b      	add	sp, #108	@ 0x6c
 80252ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080252d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80252d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252d6:	b08d      	sub	sp, #52	@ 0x34
 80252d8:	468b      	mov	fp, r1
 80252da:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 80252de:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 80252e2:	fb0c 5703 	mla	r7, ip, r3, r5
 80252e6:	f1bc 0f00 	cmp.w	ip, #0
 80252ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 80252ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80252f0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 80252f4:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 80252f8:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 80252fc:	eb02 0607 	add.w	r6, r2, r7
 8025300:	f89b 4000 	ldrb.w	r4, [fp]
 8025304:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8025308:	f89b 1002 	ldrb.w	r1, [fp, #2]
 802530c:	f2c0 80c1 	blt.w	8025492 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025310:	45e6      	cmp	lr, ip
 8025312:	f340 80be 	ble.w	8025492 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8025316:	2d00      	cmp	r5, #0
 8025318:	f2c0 80b7 	blt.w	802548a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802531c:	42ab      	cmp	r3, r5
 802531e:	f340 80b4 	ble.w	802548a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8025322:	5dd2      	ldrb	r2, [r2, r7]
 8025324:	9205      	str	r2, [sp, #20]
 8025326:	7872      	ldrb	r2, [r6, #1]
 8025328:	9206      	str	r2, [sp, #24]
 802532a:	78b2      	ldrb	r2, [r6, #2]
 802532c:	9207      	str	r2, [sp, #28]
 802532e:	1c6a      	adds	r2, r5, #1
 8025330:	f100 80b6 	bmi.w	80254a0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025334:	4293      	cmp	r3, r2
 8025336:	f340 80b3 	ble.w	80254a0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802533a:	f1b8 0f00 	cmp.w	r8, #0
 802533e:	f000 80af 	beq.w	80254a0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8025342:	78f2      	ldrb	r2, [r6, #3]
 8025344:	9201      	str	r2, [sp, #4]
 8025346:	7932      	ldrb	r2, [r6, #4]
 8025348:	9202      	str	r2, [sp, #8]
 802534a:	7972      	ldrb	r2, [r6, #5]
 802534c:	9203      	str	r2, [sp, #12]
 802534e:	f11c 0c01 	adds.w	ip, ip, #1
 8025352:	f100 80ad 	bmi.w	80254b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025356:	45e6      	cmp	lr, ip
 8025358:	f340 80aa 	ble.w	80254b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802535c:	f1ba 0f00 	cmp.w	sl, #0
 8025360:	f000 80a6 	beq.w	80254b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8025364:	2d00      	cmp	r5, #0
 8025366:	f2c0 809f 	blt.w	80254a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802536a:	42ab      	cmp	r3, r5
 802536c:	f340 809c 	ble.w	80254a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8025370:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025374:	f816 9002 	ldrb.w	r9, [r6, r2]
 8025378:	2203      	movs	r2, #3
 802537a:	fb03 6c02 	mla	ip, r3, r2, r6
 802537e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025382:	f89c e002 	ldrb.w	lr, [ip, #2]
 8025386:	9704      	str	r7, [sp, #16]
 8025388:	3501      	adds	r5, #1
 802538a:	f100 8098 	bmi.w	80254be <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802538e:	42ab      	cmp	r3, r5
 8025390:	f340 8095 	ble.w	80254be <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8025394:	f1b8 0f00 	cmp.w	r8, #0
 8025398:	f000 8091 	beq.w	80254be <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802539c:	f04f 0c03 	mov.w	ip, #3
 80253a0:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80253a4:	5cb5      	ldrb	r5, [r6, r2]
 80253a6:	fb03 620c 	mla	r2, r3, ip, r6
 80253aa:	fb03 630c 	mla	r3, r3, ip, r6
 80253ae:	7912      	ldrb	r2, [r2, #4]
 80253b0:	795e      	ldrb	r6, [r3, #5]
 80253b2:	fa1f f388 	uxth.w	r3, r8
 80253b6:	fa1f fc8a 	uxth.w	ip, sl
 80253ba:	fb03 f70c 	mul.w	r7, r3, ip
 80253be:	011b      	lsls	r3, r3, #4
 80253c0:	9708      	str	r7, [sp, #32]
 80253c2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80253c6:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 80253ca:	1bdb      	subs	r3, r3, r7
 80253cc:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 80253d0:	fa1f fc8c 	uxth.w	ip, ip
 80253d4:	b29b      	uxth	r3, r3
 80253d6:	9709      	str	r7, [sp, #36]	@ 0x24
 80253d8:	ebaa 0a0c 	sub.w	sl, sl, ip
 80253dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80253de:	930a      	str	r3, [sp, #40]	@ 0x28
 80253e0:	fa1f fa8a 	uxth.w	sl, sl
 80253e4:	ea6f 0807 	mvn.w	r8, r7
 80253e8:	9f01      	ldr	r7, [sp, #4]
 80253ea:	435f      	muls	r7, r3
 80253ec:	9b05      	ldr	r3, [sp, #20]
 80253ee:	fa5f f888 	uxtb.w	r8, r8
 80253f2:	fb0a 7703 	mla	r7, sl, r3, r7
 80253f6:	9b08      	ldr	r3, [sp, #32]
 80253f8:	fb14 f408 	smulbb	r4, r4, r8
 80253fc:	fb0c 7709 	mla	r7, ip, r9, r7
 8025400:	fb10 f008 	smulbb	r0, r0, r8
 8025404:	fb11 f108 	smulbb	r1, r1, r8
 8025408:	fb03 7705 	mla	r7, r3, r5, r7
 802540c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802540e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025412:	fb07 4703 	mla	r7, r7, r3, r4
 8025416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025418:	b2bf      	uxth	r7, r7
 802541a:	1c7c      	adds	r4, r7, #1
 802541c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8025420:	1224      	asrs	r4, r4, #8
 8025422:	f88b 4000 	strb.w	r4, [fp]
 8025426:	9c02      	ldr	r4, [sp, #8]
 8025428:	435c      	muls	r4, r3
 802542a:	9b06      	ldr	r3, [sp, #24]
 802542c:	fb0a 4403 	mla	r4, sl, r3, r4
 8025430:	9b04      	ldr	r3, [sp, #16]
 8025432:	fb0c 4403 	mla	r4, ip, r3, r4
 8025436:	9b08      	ldr	r3, [sp, #32]
 8025438:	fb03 4402 	mla	r4, r3, r2, r4
 802543c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802543e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025440:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025444:	fb04 0403 	mla	r4, r4, r3, r0
 8025448:	9b03      	ldr	r3, [sp, #12]
 802544a:	435a      	muls	r2, r3
 802544c:	b2a4      	uxth	r4, r4
 802544e:	4613      	mov	r3, r2
 8025450:	9a07      	ldr	r2, [sp, #28]
 8025452:	1c60      	adds	r0, r4, #1
 8025454:	fb0a 3a02 	mla	sl, sl, r2, r3
 8025458:	9b08      	ldr	r3, [sp, #32]
 802545a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802545e:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025462:	1224      	asrs	r4, r4, #8
 8025464:	fb03 c606 	mla	r6, r3, r6, ip
 8025468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802546a:	f88b 4001 	strb.w	r4, [fp, #1]
 802546e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025472:	fb06 1103 	mla	r1, r6, r3, r1
 8025476:	b289      	uxth	r1, r1
 8025478:	1c4e      	adds	r6, r1, #1
 802547a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802547e:	1209      	asrs	r1, r1, #8
 8025480:	f88b 1002 	strb.w	r1, [fp, #2]
 8025484:	b00d      	add	sp, #52	@ 0x34
 8025486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802548a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802548e:	9405      	str	r4, [sp, #20]
 8025490:	e74d      	b.n	802532e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8025492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025496:	9401      	str	r4, [sp, #4]
 8025498:	9405      	str	r4, [sp, #20]
 802549a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802549e:	e756      	b.n	802534e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80254a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254a4:	9401      	str	r4, [sp, #4]
 80254a6:	e752      	b.n	802534e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80254a8:	468e      	mov	lr, r1
 80254aa:	9004      	str	r0, [sp, #16]
 80254ac:	46a1      	mov	r9, r4
 80254ae:	e76b      	b.n	8025388 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80254b0:	460e      	mov	r6, r1
 80254b2:	4602      	mov	r2, r0
 80254b4:	4625      	mov	r5, r4
 80254b6:	468e      	mov	lr, r1
 80254b8:	9004      	str	r0, [sp, #16]
 80254ba:	46a1      	mov	r9, r4
 80254bc:	e779      	b.n	80253b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80254be:	460e      	mov	r6, r1
 80254c0:	4602      	mov	r2, r0
 80254c2:	4625      	mov	r5, r4
 80254c4:	e775      	b.n	80253b2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080254c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80254c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254ca:	b09f      	sub	sp, #124	@ 0x7c
 80254cc:	920e      	str	r2, [sp, #56]	@ 0x38
 80254ce:	9307      	str	r3, [sp, #28]
 80254d0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80254d2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80254d6:	901d      	str	r0, [sp, #116]	@ 0x74
 80254d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80254da:	6850      	ldr	r0, [r2, #4]
 80254dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80254de:	6812      	ldr	r2, [r2, #0]
 80254e0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80254e4:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 80254e8:	fb00 1303 	mla	r3, r0, r3, r1
 80254ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80254f0:	18d3      	adds	r3, r2, r3
 80254f2:	9308      	str	r3, [sp, #32]
 80254f4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80254f6:	681b      	ldr	r3, [r3, #0]
 80254f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80254fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80254fc:	43db      	mvns	r3, r3
 80254fe:	b2db      	uxtb	r3, r3
 8025500:	9309      	str	r3, [sp, #36]	@ 0x24
 8025502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025504:	2b00      	cmp	r3, #0
 8025506:	dc03      	bgt.n	8025510 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802550a:	2b00      	cmp	r3, #0
 802550c:	f340 81f5 	ble.w	80258fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025510:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025512:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025516:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802551a:	1e48      	subs	r0, r1, #1
 802551c:	1e54      	subs	r4, r2, #1
 802551e:	9b07      	ldr	r3, [sp, #28]
 8025520:	2b00      	cmp	r3, #0
 8025522:	f340 80d5 	ble.w	80256d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025526:	ea5f 452a 	movs.w	r5, sl, asr #16
 802552a:	ea4f 4328 	mov.w	r3, r8, asr #16
 802552e:	d406      	bmi.n	802553e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025530:	4285      	cmp	r5, r0
 8025532:	da04      	bge.n	802553e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025534:	2b00      	cmp	r3, #0
 8025536:	db02      	blt.n	802553e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025538:	42a3      	cmp	r3, r4
 802553a:	f2c0 80ca 	blt.w	80256d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802553e:	3501      	adds	r5, #1
 8025540:	f100 80bb 	bmi.w	80256ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025544:	42a9      	cmp	r1, r5
 8025546:	f2c0 80b8 	blt.w	80256ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802554a:	3301      	adds	r3, #1
 802554c:	f100 80b5 	bmi.w	80256ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025550:	429a      	cmp	r2, r3
 8025552:	f2c0 80b2 	blt.w	80256ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8025556:	9b07      	ldr	r3, [sp, #28]
 8025558:	9d08      	ldr	r5, [sp, #32]
 802555a:	930d      	str	r3, [sp, #52]	@ 0x34
 802555c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802555e:	2b00      	cmp	r3, #0
 8025560:	f340 80d6 	ble.w	8025710 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8025564:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8025566:	ea4f 4428 	mov.w	r4, r8, asr #16
 802556a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802556c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8025570:	68c6      	ldr	r6, [r0, #12]
 8025572:	ea5f 402a 	movs.w	r0, sl, asr #16
 8025576:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802557a:	689b      	ldr	r3, [r3, #8]
 802557c:	f100 810f 	bmi.w	802579e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025580:	1e5f      	subs	r7, r3, #1
 8025582:	42b8      	cmp	r0, r7
 8025584:	f280 810b 	bge.w	802579e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025588:	2c00      	cmp	r4, #0
 802558a:	f2c0 8108 	blt.w	802579e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802558e:	1e77      	subs	r7, r6, #1
 8025590:	42bc      	cmp	r4, r7
 8025592:	f280 8104 	bge.w	802579e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8025596:	b21b      	sxth	r3, r3
 8025598:	fb04 0003 	mla	r0, r4, r3, r0
 802559c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802559e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80255a2:	1826      	adds	r6, r4, r0
 80255a4:	5c24      	ldrb	r4, [r4, r0]
 80255a6:	78b7      	ldrb	r7, [r6, #2]
 80255a8:	7870      	ldrb	r0, [r6, #1]
 80255aa:	970f      	str	r7, [sp, #60]	@ 0x3c
 80255ac:	7977      	ldrb	r7, [r6, #5]
 80255ae:	f896 e003 	ldrb.w	lr, [r6, #3]
 80255b2:	f896 c004 	ldrb.w	ip, [r6, #4]
 80255b6:	9710      	str	r7, [sp, #64]	@ 0x40
 80255b8:	b1c9      	cbz	r1, 80255ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80255ba:	f04f 0b03 	mov.w	fp, #3
 80255be:	f06f 0904 	mvn.w	r9, #4
 80255c2:	3605      	adds	r6, #5
 80255c4:	fb13 930b 	smlabb	r3, r3, fp, r9
 80255c8:	eb06 0b03 	add.w	fp, r6, r3
 80255cc:	5cf3      	ldrb	r3, [r6, r3]
 80255ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80255d0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80255d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80255d6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80255da:	9315      	str	r3, [sp, #84]	@ 0x54
 80255dc:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80255e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80255e2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80255e6:	9314      	str	r3, [sp, #80]	@ 0x50
 80255e8:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80255ec:	9316      	str	r3, [sp, #88]	@ 0x58
 80255ee:	b292      	uxth	r2, r2
 80255f0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80255f2:	b289      	uxth	r1, r1
 80255f4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80255f8:	fb02 f601 	mul.w	r6, r2, r1
 80255fc:	0112      	lsls	r2, r2, #4
 80255fe:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8025602:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8025606:	1b92      	subs	r2, r2, r6
 8025608:	b289      	uxth	r1, r1
 802560a:	b292      	uxth	r2, r2
 802560c:	eba9 0901 	sub.w	r9, r9, r1
 8025610:	fb02 fe0e 	mul.w	lr, r2, lr
 8025614:	fa1f f989 	uxth.w	r9, r9
 8025618:	fb02 fc0c 	mul.w	ip, r2, ip
 802561c:	fb09 e404 	mla	r4, r9, r4, lr
 8025620:	f895 e000 	ldrb.w	lr, [r5]
 8025624:	fb09 c000 	mla	r0, r9, r0, ip
 8025628:	fb01 4407 	mla	r4, r1, r7, r4
 802562c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802562e:	fb06 4407 	mla	r4, r6, r7, r4
 8025632:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025634:	fb1e fe07 	smulbb	lr, lr, r7
 8025638:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802563c:	fb04 e403 	mla	r4, r4, r3, lr
 8025640:	b2a4      	uxth	r4, r4
 8025642:	f104 0e01 	add.w	lr, r4, #1
 8025646:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802564a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802564c:	fb01 0004 	mla	r0, r1, r4, r0
 8025650:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025652:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025656:	fb06 0004 	mla	r0, r6, r4, r0
 802565a:	786c      	ldrb	r4, [r5, #1]
 802565c:	f885 e000 	strb.w	lr, [r5]
 8025660:	fb14 f407 	smulbb	r4, r4, r7
 8025664:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025668:	fb00 4003 	mla	r0, r0, r3, r4
 802566c:	b280      	uxth	r0, r0
 802566e:	1c44      	adds	r4, r0, #1
 8025670:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8025674:	1200      	asrs	r0, r0, #8
 8025676:	7068      	strb	r0, [r5, #1]
 8025678:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802567a:	4342      	muls	r2, r0
 802567c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802567e:	fb09 2200 	mla	r2, r9, r0, r2
 8025682:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8025684:	fb01 2100 	mla	r1, r1, r0, r2
 8025688:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802568a:	fb06 1602 	mla	r6, r6, r2, r1
 802568e:	78a9      	ldrb	r1, [r5, #2]
 8025690:	fb11 f107 	smulbb	r1, r1, r7
 8025694:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025698:	fb06 1303 	mla	r3, r6, r3, r1
 802569c:	b29b      	uxth	r3, r3
 802569e:	1c5e      	adds	r6, r3, #1
 80256a0:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80256a4:	121b      	asrs	r3, r3, #8
 80256a6:	70ab      	strb	r3, [r5, #2]
 80256a8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80256aa:	3503      	adds	r5, #3
 80256ac:	449a      	add	sl, r3
 80256ae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80256b0:	4498      	add	r8, r3
 80256b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80256b4:	3b01      	subs	r3, #1
 80256b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80256b8:	e750      	b.n	802555c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80256ba:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80256bc:	449a      	add	sl, r3
 80256be:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80256c0:	4498      	add	r8, r3
 80256c2:	9b07      	ldr	r3, [sp, #28]
 80256c4:	3b01      	subs	r3, #1
 80256c6:	9307      	str	r3, [sp, #28]
 80256c8:	9b08      	ldr	r3, [sp, #32]
 80256ca:	3303      	adds	r3, #3
 80256cc:	9308      	str	r3, [sp, #32]
 80256ce:	e726      	b.n	802551e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80256d0:	d026      	beq.n	8025720 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80256d2:	9b07      	ldr	r3, [sp, #28]
 80256d4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80256d6:	3b01      	subs	r3, #1
 80256d8:	fb00 a003 	mla	r0, r0, r3, sl
 80256dc:	1400      	asrs	r0, r0, #16
 80256de:	f53f af3a 	bmi.w	8025556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80256e2:	3901      	subs	r1, #1
 80256e4:	4288      	cmp	r0, r1
 80256e6:	f6bf af36 	bge.w	8025556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80256ea:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80256ec:	fb01 8303 	mla	r3, r1, r3, r8
 80256f0:	141b      	asrs	r3, r3, #16
 80256f2:	f53f af30 	bmi.w	8025556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80256f6:	3a01      	subs	r2, #1
 80256f8:	4293      	cmp	r3, r2
 80256fa:	f6bf af2c 	bge.w	8025556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80256fe:	9b08      	ldr	r3, [sp, #32]
 8025700:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8025704:	1cdd      	adds	r5, r3, #3
 8025706:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 802570a:	f1bc 0f00 	cmp.w	ip, #0
 802570e:	dc5f      	bgt.n	80257d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8025710:	9b07      	ldr	r3, [sp, #28]
 8025712:	9a08      	ldr	r2, [sp, #32]
 8025714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802571c:	441a      	add	r2, r3
 802571e:	9208      	str	r2, [sp, #32]
 8025720:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025722:	2b00      	cmp	r3, #0
 8025724:	f340 80e9 	ble.w	80258fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802572c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802572e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025732:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025736:	eef0 6a62 	vmov.f32	s13, s5
 802573a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802573e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025742:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025746:	ee16 aa90 	vmov	sl, s13
 802574a:	eef0 6a43 	vmov.f32	s13, s6
 802574e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025752:	ee16 8a90 	vmov	r8, s13
 8025756:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802575a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802575e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025762:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025766:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802576a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802576e:	ee12 2a90 	vmov	r2, s5
 8025772:	eef0 2a47 	vmov.f32	s5, s14
 8025776:	fb92 f3f3 	sdiv	r3, r2, r3
 802577a:	ee13 2a10 	vmov	r2, s6
 802577e:	932b      	str	r3, [sp, #172]	@ 0xac
 8025780:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025782:	eeb0 3a67 	vmov.f32	s6, s15
 8025786:	fb92 f3f3 	sdiv	r3, r2, r3
 802578a:	932c      	str	r3, [sp, #176]	@ 0xb0
 802578c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802578e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025790:	3b01      	subs	r3, #1
 8025792:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025794:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025796:	bf08      	it	eq
 8025798:	4613      	moveq	r3, r2
 802579a:	9307      	str	r3, [sp, #28]
 802579c:	e6b1      	b.n	8025502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802579e:	1c47      	adds	r7, r0, #1
 80257a0:	d482      	bmi.n	80256a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80257a2:	42bb      	cmp	r3, r7
 80257a4:	db80      	blt.n	80256a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80257a6:	1c67      	adds	r7, r4, #1
 80257a8:	f53f af7e 	bmi.w	80256a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80257ac:	42be      	cmp	r6, r7
 80257ae:	f6ff af7b 	blt.w	80256a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80257b2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80257b4:	b236      	sxth	r6, r6
 80257b6:	9001      	str	r0, [sp, #4]
 80257b8:	b21b      	sxth	r3, r3
 80257ba:	9600      	str	r6, [sp, #0]
 80257bc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80257be:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80257c2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80257c6:	4629      	mov	r1, r5
 80257c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80257ca:	f7ff fd82 	bl	80252d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80257ce:	e76b      	b.n	80256a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80257d0:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80257d2:	ea4f 402a 	mov.w	r0, sl, asr #16
 80257d6:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80257da:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80257de:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80257e2:	ea4f 4128 	mov.w	r1, r8, asr #16
 80257e6:	fb07 0101 	mla	r1, r7, r1, r0
 80257ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80257ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80257f0:	1844      	adds	r4, r0, r1
 80257f2:	5c40      	ldrb	r0, [r0, r1]
 80257f4:	78a6      	ldrb	r6, [r4, #2]
 80257f6:	7861      	ldrb	r1, [r4, #1]
 80257f8:	960f      	str	r6, [sp, #60]	@ 0x3c
 80257fa:	78e6      	ldrb	r6, [r4, #3]
 80257fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80257fe:	9610      	str	r6, [sp, #64]	@ 0x40
 8025800:	f894 9004 	ldrb.w	r9, [r4, #4]
 8025804:	f894 b005 	ldrb.w	fp, [r4, #5]
 8025808:	b192      	cbz	r2, 8025830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802580a:	f06f 0604 	mvn.w	r6, #4
 802580e:	2103      	movs	r1, #3
 8025810:	3405      	adds	r4, #5
 8025812:	fb17 6701 	smlabb	r7, r7, r1, r6
 8025816:	19e6      	adds	r6, r4, r7
 8025818:	5de4      	ldrb	r4, [r4, r7]
 802581a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802581c:	7874      	ldrb	r4, [r6, #1]
 802581e:	9419      	str	r4, [sp, #100]	@ 0x64
 8025820:	78b4      	ldrb	r4, [r6, #2]
 8025822:	941b      	str	r4, [sp, #108]	@ 0x6c
 8025824:	78f4      	ldrb	r4, [r6, #3]
 8025826:	9418      	str	r4, [sp, #96]	@ 0x60
 8025828:	7934      	ldrb	r4, [r6, #4]
 802582a:	941a      	str	r4, [sp, #104]	@ 0x68
 802582c:	7974      	ldrb	r4, [r6, #5]
 802582e:	941c      	str	r4, [sp, #112]	@ 0x70
 8025830:	b29b      	uxth	r3, r3
 8025832:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025834:	b292      	uxth	r2, r2
 8025836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025838:	3503      	adds	r5, #3
 802583a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802583e:	fb03 f402 	mul.w	r4, r3, r2
 8025842:	011b      	lsls	r3, r3, #4
 8025844:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8025848:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 802584c:	1b1b      	subs	r3, r3, r4
 802584e:	b292      	uxth	r2, r2
 8025850:	b29b      	uxth	r3, r3
 8025852:	1ab6      	subs	r6, r6, r2
 8025854:	435f      	muls	r7, r3
 8025856:	b2b6      	uxth	r6, r6
 8025858:	fb03 f909 	mul.w	r9, r3, r9
 802585c:	fb03 fb0b 	mul.w	fp, r3, fp
 8025860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025862:	fb06 7000 	mla	r0, r6, r0, r7
 8025866:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8025868:	fb06 bb03 	mla	fp, r6, r3, fp
 802586c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802586e:	fb02 0007 	mla	r0, r2, r7, r0
 8025872:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8025874:	fb02 bb03 	mla	fp, r2, r3, fp
 8025878:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802587a:	fb04 0007 	mla	r0, r4, r7, r0
 802587e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8025882:	fb17 f701 	smulbb	r7, r7, r1
 8025886:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802588a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802588c:	fb00 700e 	mla	r0, r0, lr, r7
 8025890:	fb06 9101 	mla	r1, r6, r1, r9
 8025894:	b280      	uxth	r0, r0
 8025896:	1c47      	adds	r7, r0, #1
 8025898:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802589c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802589e:	1200      	asrs	r0, r0, #8
 80258a0:	f805 0c06 	strb.w	r0, [r5, #-6]
 80258a4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80258a6:	fb02 1100 	mla	r1, r2, r0, r1
 80258aa:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80258ac:	fb04 1100 	mla	r1, r4, r0, r1
 80258b0:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80258b4:	fb04 b403 	mla	r4, r4, r3, fp
 80258b8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80258bc:	fb10 f007 	smulbb	r0, r0, r7
 80258c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80258c4:	fb13 f307 	smulbb	r3, r3, r7
 80258c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80258cc:	fb01 010e 	mla	r1, r1, lr, r0
 80258d0:	fb04 340e 	mla	r4, r4, lr, r3
 80258d4:	b289      	uxth	r1, r1
 80258d6:	b2a4      	uxth	r4, r4
 80258d8:	1c48      	adds	r0, r1, #1
 80258da:	1c63      	adds	r3, r4, #1
 80258dc:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80258e0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80258e4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80258e6:	1209      	asrs	r1, r1, #8
 80258e8:	1224      	asrs	r4, r4, #8
 80258ea:	449a      	add	sl, r3
 80258ec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80258ee:	f805 1c05 	strb.w	r1, [r5, #-5]
 80258f2:	f805 4c04 	strb.w	r4, [r5, #-4]
 80258f6:	4498      	add	r8, r3
 80258f8:	e707      	b.n	802570a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80258fa:	b01f      	add	sp, #124	@ 0x7c
 80258fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025900 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8025900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025904:	b087      	sub	sp, #28
 8025906:	780d      	ldrb	r5, [r1, #0]
 8025908:	784c      	ldrb	r4, [r1, #1]
 802590a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802590e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8025912:	9004      	str	r0, [sp, #16]
 8025914:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8025918:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 802591c:	9005      	str	r0, [sp, #20]
 802591e:	fb06 bc03 	mla	ip, r6, r3, fp
 8025922:	2e00      	cmp	r6, #0
 8025924:	7888      	ldrb	r0, [r1, #2]
 8025926:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802592a:	eb02 090c 	add.w	r9, r2, ip
 802592e:	f2c0 8084 	blt.w	8025a3a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8025932:	42b7      	cmp	r7, r6
 8025934:	f340 8081 	ble.w	8025a3a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8025938:	f1bb 0f00 	cmp.w	fp, #0
 802593c:	db79      	blt.n	8025a32 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802593e:	455b      	cmp	r3, fp
 8025940:	dd77      	ble.n	8025a32 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8025942:	f812 200c 	ldrb.w	r2, [r2, ip]
 8025946:	9201      	str	r2, [sp, #4]
 8025948:	f899 2001 	ldrb.w	r2, [r9, #1]
 802594c:	9202      	str	r2, [sp, #8]
 802594e:	f899 2002 	ldrb.w	r2, [r9, #2]
 8025952:	9203      	str	r2, [sp, #12]
 8025954:	f11b 0201 	adds.w	r2, fp, #1
 8025958:	d476      	bmi.n	8025a48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802595a:	4293      	cmp	r3, r2
 802595c:	dd74      	ble.n	8025a48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802595e:	9a04      	ldr	r2, [sp, #16]
 8025960:	2a00      	cmp	r2, #0
 8025962:	d071      	beq.n	8025a48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8025964:	f899 8003 	ldrb.w	r8, [r9, #3]
 8025968:	f899 c004 	ldrb.w	ip, [r9, #4]
 802596c:	f899 a005 	ldrb.w	sl, [r9, #5]
 8025970:	3601      	adds	r6, #1
 8025972:	d471      	bmi.n	8025a58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8025974:	42b7      	cmp	r7, r6
 8025976:	dd6f      	ble.n	8025a58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8025978:	9a05      	ldr	r2, [sp, #20]
 802597a:	2a00      	cmp	r2, #0
 802597c:	d06c      	beq.n	8025a58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802597e:	f1bb 0f00 	cmp.w	fp, #0
 8025982:	db65      	blt.n	8025a50 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8025984:	455b      	cmp	r3, fp
 8025986:	dd63      	ble.n	8025a50 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8025988:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802598c:	f819 e002 	ldrb.w	lr, [r9, r2]
 8025990:	2203      	movs	r2, #3
 8025992:	fb03 9602 	mla	r6, r3, r2, r9
 8025996:	7877      	ldrb	r7, [r6, #1]
 8025998:	78b6      	ldrb	r6, [r6, #2]
 802599a:	f11b 0b01 	adds.w	fp, fp, #1
 802599e:	d40c      	bmi.n	80259ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80259a0:	455b      	cmp	r3, fp
 80259a2:	dd0a      	ble.n	80259ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80259a4:	9a04      	ldr	r2, [sp, #16]
 80259a6:	b142      	cbz	r2, 80259ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80259a8:	2203      	movs	r2, #3
 80259aa:	fb13 2002 	smlabb	r0, r3, r2, r2
 80259ae:	f819 5000 	ldrb.w	r5, [r9, r0]
 80259b2:	fb03 9002 	mla	r0, r3, r2, r9
 80259b6:	7904      	ldrb	r4, [r0, #4]
 80259b8:	7940      	ldrb	r0, [r0, #5]
 80259ba:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80259be:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80259c2:	fb03 fb02 	mul.w	fp, r3, r2
 80259c6:	011b      	lsls	r3, r3, #4
 80259c8:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80259cc:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 80259d0:	eba3 030b 	sub.w	r3, r3, fp
 80259d4:	b292      	uxth	r2, r2
 80259d6:	b29b      	uxth	r3, r3
 80259d8:	eba9 0902 	sub.w	r9, r9, r2
 80259dc:	9304      	str	r3, [sp, #16]
 80259de:	fa1f f989 	uxth.w	r9, r9
 80259e2:	fb03 f808 	mul.w	r8, r3, r8
 80259e6:	9b01      	ldr	r3, [sp, #4]
 80259e8:	fb09 8803 	mla	r8, r9, r3, r8
 80259ec:	9b04      	ldr	r3, [sp, #16]
 80259ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80259f2:	9b02      	ldr	r3, [sp, #8]
 80259f4:	fb02 880e 	mla	r8, r2, lr, r8
 80259f8:	fb09 cc03 	mla	ip, r9, r3, ip
 80259fc:	9b04      	ldr	r3, [sp, #16]
 80259fe:	fb0b 8805 	mla	r8, fp, r5, r8
 8025a02:	fb02 c707 	mla	r7, r2, r7, ip
 8025a06:	fb03 f30a 	mul.w	r3, r3, sl
 8025a0a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025a0e:	fb0b 7404 	mla	r4, fp, r4, r7
 8025a12:	f881 8000 	strb.w	r8, [r1]
 8025a16:	1224      	asrs	r4, r4, #8
 8025a18:	704c      	strb	r4, [r1, #1]
 8025a1a:	9c03      	ldr	r4, [sp, #12]
 8025a1c:	fb09 3904 	mla	r9, r9, r4, r3
 8025a20:	fb02 9206 	mla	r2, r2, r6, r9
 8025a24:	fb0b 2000 	mla	r0, fp, r0, r2
 8025a28:	1200      	asrs	r0, r0, #8
 8025a2a:	7088      	strb	r0, [r1, #2]
 8025a2c:	b007      	add	sp, #28
 8025a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a32:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025a36:	9501      	str	r5, [sp, #4]
 8025a38:	e78c      	b.n	8025954 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8025a3a:	4682      	mov	sl, r0
 8025a3c:	46a4      	mov	ip, r4
 8025a3e:	46a8      	mov	r8, r5
 8025a40:	9501      	str	r5, [sp, #4]
 8025a42:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8025a46:	e793      	b.n	8025970 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025a48:	4682      	mov	sl, r0
 8025a4a:	46a4      	mov	ip, r4
 8025a4c:	46a8      	mov	r8, r5
 8025a4e:	e78f      	b.n	8025970 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8025a50:	4606      	mov	r6, r0
 8025a52:	4627      	mov	r7, r4
 8025a54:	46ae      	mov	lr, r5
 8025a56:	e7a0      	b.n	802599a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8025a58:	4606      	mov	r6, r0
 8025a5a:	4627      	mov	r7, r4
 8025a5c:	46ae      	mov	lr, r5
 8025a5e:	e7ac      	b.n	80259ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08025a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a64:	b09b      	sub	sp, #108	@ 0x6c
 8025a66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025a68:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025a6a:	9019      	str	r0, [sp, #100]	@ 0x64
 8025a6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8025a6e:	6850      	ldr	r0, [r2, #4]
 8025a70:	9306      	str	r3, [sp, #24]
 8025a72:	6812      	ldr	r2, [r2, #0]
 8025a74:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8025a78:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8025a7c:	fb00 1303 	mla	r3, r0, r3, r1
 8025a80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025a84:	18d3      	adds	r3, r2, r3
 8025a86:	9307      	str	r3, [sp, #28]
 8025a88:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025a8a:	681b      	ldr	r3, [r3, #0]
 8025a8c:	9308      	str	r3, [sp, #32]
 8025a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	dc03      	bgt.n	8025a9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025a96:	2b00      	cmp	r3, #0
 8025a98:	f340 81ab 	ble.w	8025df2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025a9c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025a9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025aa2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025aa6:	1e48      	subs	r0, r1, #1
 8025aa8:	1e55      	subs	r5, r2, #1
 8025aaa:	9b06      	ldr	r3, [sp, #24]
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	f340 80b1 	ble.w	8025c14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8025ab2:	ea5f 462b 	movs.w	r6, fp, asr #16
 8025ab6:	ea4f 4324 	mov.w	r3, r4, asr #16
 8025aba:	d406      	bmi.n	8025aca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025abc:	4286      	cmp	r6, r0
 8025abe:	da04      	bge.n	8025aca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025ac0:	2b00      	cmp	r3, #0
 8025ac2:	db02      	blt.n	8025aca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025ac4:	42ab      	cmp	r3, r5
 8025ac6:	f2c0 80a6 	blt.w	8025c16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8025aca:	3601      	adds	r6, #1
 8025acc:	f100 8097 	bmi.w	8025bfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025ad0:	42b1      	cmp	r1, r6
 8025ad2:	f2c0 8094 	blt.w	8025bfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025ad6:	3301      	adds	r3, #1
 8025ad8:	f100 8091 	bmi.w	8025bfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025adc:	429a      	cmp	r2, r3
 8025ade:	f2c0 808e 	blt.w	8025bfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8025ae2:	9b06      	ldr	r3, [sp, #24]
 8025ae4:	9e07      	ldr	r6, [sp, #28]
 8025ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	f340 80b0 	ble.w	8025c50 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8025af0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8025af2:	1425      	asrs	r5, r4, #16
 8025af4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8025af6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8025afa:	68c7      	ldr	r7, [r0, #12]
 8025afc:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025b00:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025b04:	689b      	ldr	r3, [r3, #8]
 8025b06:	f100 80ea 	bmi.w	8025cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025b0a:	f103 3cff 	add.w	ip, r3, #4294967295
 8025b0e:	4560      	cmp	r0, ip
 8025b10:	f280 80e5 	bge.w	8025cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025b14:	2d00      	cmp	r5, #0
 8025b16:	f2c0 80e2 	blt.w	8025cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025b1a:	f107 3cff 	add.w	ip, r7, #4294967295
 8025b1e:	4565      	cmp	r5, ip
 8025b20:	f280 80dd 	bge.w	8025cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025b24:	b21b      	sxth	r3, r3
 8025b26:	fb05 0003 	mla	r0, r5, r3, r0
 8025b2a:	9d08      	ldr	r5, [sp, #32]
 8025b2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025b30:	182f      	adds	r7, r5, r0
 8025b32:	5c2d      	ldrb	r5, [r5, r0]
 8025b34:	7878      	ldrb	r0, [r7, #1]
 8025b36:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025b3a:	900c      	str	r0, [sp, #48]	@ 0x30
 8025b3c:	f897 9003 	ldrb.w	r9, [r7, #3]
 8025b40:	f897 8004 	ldrb.w	r8, [r7, #4]
 8025b44:	f897 a005 	ldrb.w	sl, [r7, #5]
 8025b48:	b1c9      	cbz	r1, 8025b7e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8025b4a:	f04f 0c03 	mov.w	ip, #3
 8025b4e:	f06f 0004 	mvn.w	r0, #4
 8025b52:	3705      	adds	r7, #5
 8025b54:	fb13 030c 	smlabb	r3, r3, ip, r0
 8025b58:	eb07 0c03 	add.w	ip, r7, r3
 8025b5c:	5cfb      	ldrb	r3, [r7, r3]
 8025b5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025b60:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025b64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025b66:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8025b6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8025b6c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8025b70:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b72:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8025b76:	9310      	str	r3, [sp, #64]	@ 0x40
 8025b78:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8025b7c:	9312      	str	r3, [sp, #72]	@ 0x48
 8025b7e:	b292      	uxth	r2, r2
 8025b80:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025b82:	b289      	uxth	r1, r1
 8025b84:	fb02 f301 	mul.w	r3, r2, r1
 8025b88:	0112      	lsls	r2, r2, #4
 8025b8a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025b8e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8025b92:	1ad2      	subs	r2, r2, r3
 8025b94:	b289      	uxth	r1, r1
 8025b96:	b292      	uxth	r2, r2
 8025b98:	1a7f      	subs	r7, r7, r1
 8025b9a:	fb02 f909 	mul.w	r9, r2, r9
 8025b9e:	b2bf      	uxth	r7, r7
 8025ba0:	fb02 f808 	mul.w	r8, r2, r8
 8025ba4:	fb02 fa0a 	mul.w	sl, r2, sl
 8025ba8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025baa:	fb07 9905 	mla	r9, r7, r5, r9
 8025bae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025bb0:	fb07 8800 	mla	r8, r7, r0, r8
 8025bb4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025bb6:	fb07 aa0e 	mla	sl, r7, lr, sl
 8025bba:	fb01 9905 	mla	r9, r1, r5, r9
 8025bbe:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8025bc0:	fb01 8800 	mla	r8, r1, r0, r8
 8025bc4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025bc6:	fb01 a102 	mla	r1, r1, r2, sl
 8025bca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025bcc:	fb03 9905 	mla	r9, r3, r5, r9
 8025bd0:	fb03 8800 	mla	r8, r3, r0, r8
 8025bd4:	fb03 1302 	mla	r3, r3, r2, r1
 8025bd8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025bdc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025be0:	121b      	asrs	r3, r3, #8
 8025be2:	f886 9000 	strb.w	r9, [r6]
 8025be6:	f886 8001 	strb.w	r8, [r6, #1]
 8025bea:	70b3      	strb	r3, [r6, #2]
 8025bec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025bee:	3603      	adds	r6, #3
 8025bf0:	449b      	add	fp, r3
 8025bf2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025bf4:	441c      	add	r4, r3
 8025bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025bf8:	3b01      	subs	r3, #1
 8025bfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8025bfc:	e774      	b.n	8025ae8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8025bfe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025c00:	449b      	add	fp, r3
 8025c02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025c04:	441c      	add	r4, r3
 8025c06:	9b06      	ldr	r3, [sp, #24]
 8025c08:	3b01      	subs	r3, #1
 8025c0a:	9306      	str	r3, [sp, #24]
 8025c0c:	9b07      	ldr	r3, [sp, #28]
 8025c0e:	3303      	adds	r3, #3
 8025c10:	9307      	str	r3, [sp, #28]
 8025c12:	e74a      	b.n	8025aaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025c14:	d024      	beq.n	8025c60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025c16:	9b06      	ldr	r3, [sp, #24]
 8025c18:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8025c1a:	3b01      	subs	r3, #1
 8025c1c:	fb00 b003 	mla	r0, r0, r3, fp
 8025c20:	1400      	asrs	r0, r0, #16
 8025c22:	f53f af5e 	bmi.w	8025ae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025c26:	3901      	subs	r1, #1
 8025c28:	4288      	cmp	r0, r1
 8025c2a:	f6bf af5a 	bge.w	8025ae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025c2e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8025c30:	fb01 4303 	mla	r3, r1, r3, r4
 8025c34:	141b      	asrs	r3, r3, #16
 8025c36:	f53f af54 	bmi.w	8025ae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025c3a:	3a01      	subs	r2, #1
 8025c3c:	4293      	cmp	r3, r2
 8025c3e:	f6bf af50 	bge.w	8025ae2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8025c42:	9b07      	ldr	r3, [sp, #28]
 8025c44:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025c48:	1cde      	adds	r6, r3, #3
 8025c4a:	f1be 0f00 	cmp.w	lr, #0
 8025c4e:	dc5f      	bgt.n	8025d10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025c50:	9b06      	ldr	r3, [sp, #24]
 8025c52:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025c56:	9b07      	ldr	r3, [sp, #28]
 8025c58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025c5c:	4423      	add	r3, r4
 8025c5e:	9307      	str	r3, [sp, #28]
 8025c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c62:	2b00      	cmp	r3, #0
 8025c64:	f340 80c5 	ble.w	8025df2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025c68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025c6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025c6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025c72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025c76:	eef0 6a62 	vmov.f32	s13, s5
 8025c7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025c7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025c82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c86:	ee16 ba90 	vmov	fp, s13
 8025c8a:	eef0 6a43 	vmov.f32	s13, s6
 8025c8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c92:	ee16 4a90 	vmov	r4, s13
 8025c96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025c9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025c9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025ca2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025ca6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025caa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025cae:	ee12 2a90 	vmov	r2, s5
 8025cb2:	eef0 2a47 	vmov.f32	s5, s14
 8025cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cba:	ee13 2a10 	vmov	r2, s6
 8025cbe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8025cc0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025cc2:	eeb0 3a67 	vmov.f32	s6, s15
 8025cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cca:	9328      	str	r3, [sp, #160]	@ 0xa0
 8025ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025cce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025cd0:	3b01      	subs	r3, #1
 8025cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8025cd4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025cd6:	bf08      	it	eq
 8025cd8:	4613      	moveq	r3, r2
 8025cda:	9306      	str	r3, [sp, #24]
 8025cdc:	e6d7      	b.n	8025a8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025cde:	f110 0c01 	adds.w	ip, r0, #1
 8025ce2:	d483      	bmi.n	8025bec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025ce4:	4563      	cmp	r3, ip
 8025ce6:	db81      	blt.n	8025bec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025ce8:	f115 0c01 	adds.w	ip, r5, #1
 8025cec:	f53f af7e 	bmi.w	8025bec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025cf0:	4567      	cmp	r7, ip
 8025cf2:	f6ff af7b 	blt.w	8025bec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025cf6:	b23f      	sxth	r7, r7
 8025cf8:	b21b      	sxth	r3, r3
 8025cfa:	9700      	str	r7, [sp, #0]
 8025cfc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8025d00:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8025d04:	9a08      	ldr	r2, [sp, #32]
 8025d06:	4631      	mov	r1, r6
 8025d08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8025d0a:	f7ff fdf9 	bl	8025900 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8025d0e:	e76d      	b.n	8025bec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8025d10:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8025d12:	ea4f 402b 	mov.w	r0, fp, asr #16
 8025d16:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025d1a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025d1e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8025d22:	1421      	asrs	r1, r4, #16
 8025d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8025d26:	fb0c 0101 	mla	r1, ip, r1, r0
 8025d2a:	9808      	ldr	r0, [sp, #32]
 8025d2c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025d30:	1845      	adds	r5, r0, r1
 8025d32:	5c40      	ldrb	r0, [r0, r1]
 8025d34:	796f      	ldrb	r7, [r5, #5]
 8025d36:	7869      	ldrb	r1, [r5, #1]
 8025d38:	f895 8002 	ldrb.w	r8, [r5, #2]
 8025d3c:	f895 a003 	ldrb.w	sl, [r5, #3]
 8025d40:	f895 9004 	ldrb.w	r9, [r5, #4]
 8025d44:	970c      	str	r7, [sp, #48]	@ 0x30
 8025d46:	b1a2      	cbz	r2, 8025d72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8025d48:	2703      	movs	r7, #3
 8025d4a:	f06f 0304 	mvn.w	r3, #4
 8025d4e:	3505      	adds	r5, #5
 8025d50:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8025d54:	eb05 070c 	add.w	r7, r5, ip
 8025d58:	f815 500c 	ldrb.w	r5, [r5, ip]
 8025d5c:	9513      	str	r5, [sp, #76]	@ 0x4c
 8025d5e:	787d      	ldrb	r5, [r7, #1]
 8025d60:	9515      	str	r5, [sp, #84]	@ 0x54
 8025d62:	78bd      	ldrb	r5, [r7, #2]
 8025d64:	9517      	str	r5, [sp, #92]	@ 0x5c
 8025d66:	78fd      	ldrb	r5, [r7, #3]
 8025d68:	9514      	str	r5, [sp, #80]	@ 0x50
 8025d6a:	793d      	ldrb	r5, [r7, #4]
 8025d6c:	9516      	str	r5, [sp, #88]	@ 0x58
 8025d6e:	797d      	ldrb	r5, [r7, #5]
 8025d70:	9518      	str	r5, [sp, #96]	@ 0x60
 8025d72:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8025d76:	b292      	uxth	r2, r2
 8025d78:	3603      	adds	r6, #3
 8025d7a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8025d7e:	fb03 f502 	mul.w	r5, r3, r2
 8025d82:	011b      	lsls	r3, r3, #4
 8025d84:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8025d88:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8025d8c:	1b5b      	subs	r3, r3, r5
 8025d8e:	b292      	uxth	r2, r2
 8025d90:	b29b      	uxth	r3, r3
 8025d92:	1abf      	subs	r7, r7, r2
 8025d94:	fb03 f909 	mul.w	r9, r3, r9
 8025d98:	b2bf      	uxth	r7, r7
 8025d9a:	fb03 fa0a 	mul.w	sl, r3, sl
 8025d9e:	fb07 9901 	mla	r9, r7, r1, r9
 8025da2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8025da4:	fb07 aa00 	mla	sl, r7, r0, sl
 8025da8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8025daa:	fb02 9901 	mla	r9, r2, r1, r9
 8025dae:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8025db0:	fb02 aa00 	mla	sl, r2, r0, sl
 8025db4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8025db6:	fb05 9901 	mla	r9, r5, r1, r9
 8025dba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025dbc:	fb05 aa00 	mla	sl, r5, r0, sl
 8025dc0:	434b      	muls	r3, r1
 8025dc2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025dc4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8025dc8:	fb07 3308 	mla	r3, r7, r8, r3
 8025dcc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025dd0:	f806 ac06 	strb.w	sl, [r6, #-6]
 8025dd4:	fb02 3201 	mla	r2, r2, r1, r3
 8025dd8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8025dda:	f806 9c05 	strb.w	r9, [r6, #-5]
 8025dde:	fb05 2503 	mla	r5, r5, r3, r2
 8025de2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8025de4:	122d      	asrs	r5, r5, #8
 8025de6:	449b      	add	fp, r3
 8025de8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025dea:	f806 5c04 	strb.w	r5, [r6, #-4]
 8025dee:	441c      	add	r4, r3
 8025df0:	e72b      	b.n	8025c4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025df2:	b01b      	add	sp, #108	@ 0x6c
 8025df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025df8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8025df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025dfc:	b087      	sub	sp, #28
 8025dfe:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8025e02:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8025e06:	fb05 7003 	mla	r0, r5, r3, r7
 8025e0a:	2d00      	cmp	r5, #0
 8025e0c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8025e10:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8025e14:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8025e18:	f2c0 811f 	blt.w	802605a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8025e1c:	45a8      	cmp	r8, r5
 8025e1e:	f340 811c 	ble.w	802605a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8025e22:	2f00      	cmp	r7, #0
 8025e24:	f2c0 8117 	blt.w	8026056 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025e28:	42bb      	cmp	r3, r7
 8025e2a:	f340 8114 	ble.w	8026056 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8025e2e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8025e32:	1c7a      	adds	r2, r7, #1
 8025e34:	f100 8114 	bmi.w	8026060 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025e38:	4293      	cmp	r3, r2
 8025e3a:	f340 8111 	ble.w	8026060 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8025e3e:	2c00      	cmp	r4, #0
 8025e40:	f000 8110 	beq.w	8026064 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8025e44:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8025e48:	3501      	adds	r5, #1
 8025e4a:	f100 810f 	bmi.w	802606c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025e4e:	45a8      	cmp	r8, r5
 8025e50:	f340 810c 	ble.w	802606c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8025e54:	f1be 0f00 	cmp.w	lr, #0
 8025e58:	f000 810b 	beq.w	8026072 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8025e5c:	2f00      	cmp	r7, #0
 8025e5e:	f2c0 8103 	blt.w	8026068 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8025e62:	42bb      	cmp	r3, r7
 8025e64:	f340 8100 	ble.w	8026068 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8025e68:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8025e6c:	3701      	adds	r7, #1
 8025e6e:	f100 8103 	bmi.w	8026078 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8025e72:	42bb      	cmp	r3, r7
 8025e74:	f340 8100 	ble.w	8026078 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8025e78:	2c00      	cmp	r4, #0
 8025e7a:	f000 80ff 	beq.w	802607c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8025e7e:	3301      	adds	r3, #1
 8025e80:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8025e84:	fa1f fc84 	uxth.w	ip, r4
 8025e88:	fa1f fe8e 	uxth.w	lr, lr
 8025e8c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025e90:	fb0c f90e 	mul.w	r9, ip, lr
 8025e94:	0e13      	lsrs	r3, r2, #24
 8025e96:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8025e9a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8025e9e:	9302      	str	r3, [sp, #8]
 8025ea0:	ebac 0709 	sub.w	r7, ip, r9
 8025ea4:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8025ea8:	fa1f f48e 	uxth.w	r4, lr
 8025eac:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8025eb0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025eb4:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8025eb8:	fb0a fe0e 	mul.w	lr, sl, lr
 8025ebc:	1b1b      	subs	r3, r3, r4
 8025ebe:	fb0a f606 	mul.w	r6, sl, r6
 8025ec2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8025ec6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025eca:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8025ece:	b29b      	uxth	r3, r3
 8025ed0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025ed4:	b2bf      	uxth	r7, r7
 8025ed6:	9301      	str	r3, [sp, #4]
 8025ed8:	44e6      	add	lr, ip
 8025eda:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8025ede:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ee2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025ee6:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8025eea:	9303      	str	r3, [sp, #12]
 8025eec:	0a33      	lsrs	r3, r6, #8
 8025eee:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8025ef2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8025ef6:	9304      	str	r3, [sp, #16]
 8025ef8:	fb0b f606 	mul.w	r6, fp, r6
 8025efc:	fb0b f000 	mul.w	r0, fp, r0
 8025f00:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8025f04:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025f08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025f0c:	44b6      	add	lr, r6
 8025f0e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8025f12:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8025f16:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8025f1a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8025f1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f22:	fb08 f606 	mul.w	r6, r8, r6
 8025f26:	0a03      	lsrs	r3, r0, #8
 8025f28:	fb08 f505 	mul.w	r5, r8, r5
 8025f2c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025f30:	0a30      	lsrs	r0, r6, #8
 8025f32:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025f36:	9305      	str	r3, [sp, #20]
 8025f38:	0e13      	lsrs	r3, r2, #24
 8025f3a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025f3e:	fb0e fe07 	mul.w	lr, lr, r7
 8025f42:	4430      	add	r0, r6
 8025f44:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8025f48:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025f4c:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8025f50:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025f54:	0a00      	lsrs	r0, r0, #8
 8025f56:	435e      	muls	r6, r3
 8025f58:	0a2d      	lsrs	r5, r5, #8
 8025f5a:	435a      	muls	r2, r3
 8025f5c:	9b03      	ldr	r3, [sp, #12]
 8025f5e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8025f62:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8025f66:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8025f6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025f6e:	44b4      	add	ip, r6
 8025f70:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8025f74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f78:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8025f7c:	9e01      	ldr	r6, [sp, #4]
 8025f7e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025f82:	fb03 ee06 	mla	lr, r3, r6, lr
 8025f86:	9b04      	ldr	r3, [sp, #16]
 8025f88:	0a12      	lsrs	r2, r2, #8
 8025f8a:	fb0c ee09 	mla	lr, ip, r9, lr
 8025f8e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8025f92:	9b05      	ldr	r3, [sp, #20]
 8025f94:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025f98:	fb00 ee04 	mla	lr, r0, r4, lr
 8025f9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025fa0:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8025fa4:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8025fa8:	9b01      	ldr	r3, [sp, #4]
 8025faa:	fb07 fe0e 	mul.w	lr, r7, lr
 8025fae:	fb07 f70b 	mul.w	r7, r7, fp
 8025fb2:	fb03 ee06 	mla	lr, r3, r6, lr
 8025fb6:	fb03 730a 	mla	r3, r3, sl, r7
 8025fba:	fb09 e202 	mla	r2, r9, r2, lr
 8025fbe:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8025fc2:	fb04 2e0e 	mla	lr, r4, lr, r2
 8025fc6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8025fca:	fb04 3408 	mla	r4, r4, r8, r3
 8025fce:	9b02      	ldr	r3, [sp, #8]
 8025fd0:	b292      	uxth	r2, r2
 8025fd2:	fb09 4903 	mla	r9, r9, r3, r4
 8025fd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025fda:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8025fde:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8025fe2:	fb09 f902 	mul.w	r9, r9, r2
 8025fe6:	ea40 0e0e 	orr.w	lr, r0, lr
 8025fea:	f109 0301 	add.w	r3, r9, #1
 8025fee:	fa5f f08e 	uxtb.w	r0, lr
 8025ff2:	fb10 f002 	smulbb	r0, r0, r2
 8025ff6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8025ffa:	780b      	ldrb	r3, [r1, #0]
 8025ffc:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8026000:	fa5f f989 	uxtb.w	r9, r9
 8026004:	fb03 0309 	mla	r3, r3, r9, r0
 8026008:	b29b      	uxth	r3, r3
 802600a:	1c58      	adds	r0, r3, #1
 802600c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026010:	7848      	ldrb	r0, [r1, #1]
 8026012:	fb10 f009 	smulbb	r0, r0, r9
 8026016:	121b      	asrs	r3, r3, #8
 8026018:	700b      	strb	r3, [r1, #0]
 802601a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802601e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026022:	fb03 0302 	mla	r3, r3, r2, r0
 8026026:	b29b      	uxth	r3, r3
 8026028:	1c58      	adds	r0, r3, #1
 802602a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802602e:	121b      	asrs	r3, r3, #8
 8026030:	704b      	strb	r3, [r1, #1]
 8026032:	788b      	ldrb	r3, [r1, #2]
 8026034:	fb13 f909 	smulbb	r9, r3, r9
 8026038:	fb0e 9e02 	mla	lr, lr, r2, r9
 802603c:	fa1f fe8e 	uxth.w	lr, lr
 8026040:	f10e 0301 	add.w	r3, lr, #1
 8026044:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026048:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802604c:	f881 e002 	strb.w	lr, [r1, #2]
 8026050:	b007      	add	sp, #28
 8026052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026056:	2600      	movs	r6, #0
 8026058:	e6eb      	b.n	8025e32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 802605a:	2000      	movs	r0, #0
 802605c:	4606      	mov	r6, r0
 802605e:	e6f3      	b.n	8025e48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026060:	2000      	movs	r0, #0
 8026062:	e6f1      	b.n	8025e48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026064:	4620      	mov	r0, r4
 8026066:	e6ef      	b.n	8025e48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8026068:	2500      	movs	r5, #0
 802606a:	e6ff      	b.n	8025e6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 802606c:	2200      	movs	r2, #0
 802606e:	4615      	mov	r5, r2
 8026070:	e708      	b.n	8025e84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026072:	4672      	mov	r2, lr
 8026074:	4675      	mov	r5, lr
 8026076:	e705      	b.n	8025e84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026078:	2200      	movs	r2, #0
 802607a:	e703      	b.n	8025e84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802607c:	4622      	mov	r2, r4
 802607e:	e701      	b.n	8025e84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08026080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026084:	b09d      	sub	sp, #116	@ 0x74
 8026086:	9219      	str	r2, [sp, #100]	@ 0x64
 8026088:	9307      	str	r3, [sp, #28]
 802608a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802608c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8026090:	901b      	str	r0, [sp, #108]	@ 0x6c
 8026092:	931a      	str	r3, [sp, #104]	@ 0x68
 8026094:	6850      	ldr	r0, [r2, #4]
 8026096:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026098:	6812      	ldr	r2, [r2, #0]
 802609a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802609e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 80260a2:	fb00 1303 	mla	r3, r0, r3, r1
 80260a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80260aa:	18d3      	adds	r3, r2, r3
 80260ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80260ae:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80260b0:	681b      	ldr	r3, [r3, #0]
 80260b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80260b4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80260b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80260ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80260bc:	2b00      	cmp	r3, #0
 80260be:	dc03      	bgt.n	80260c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80260c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	f340 8368 	ble.w	8026798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80260c8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80260ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80260ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80260d2:	1e48      	subs	r0, r1, #1
 80260d4:	1e57      	subs	r7, r2, #1
 80260d6:	9b07      	ldr	r3, [sp, #28]
 80260d8:	2b00      	cmp	r3, #0
 80260da:	f340 8187 	ble.w	80263ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80260de:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80260e2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80260e6:	d406      	bmi.n	80260f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80260e8:	4584      	cmp	ip, r0
 80260ea:	da04      	bge.n	80260f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80260ec:	2b00      	cmp	r3, #0
 80260ee:	db02      	blt.n	80260f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80260f0:	42bb      	cmp	r3, r7
 80260f2:	f2c0 817c 	blt.w	80263ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80260f6:	f11c 0c01 	adds.w	ip, ip, #1
 80260fa:	f100 816c 	bmi.w	80263d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80260fe:	4561      	cmp	r1, ip
 8026100:	f2c0 8169 	blt.w	80263d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026104:	3301      	adds	r3, #1
 8026106:	f100 8166 	bmi.w	80263d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802610a:	429a      	cmp	r2, r3
 802610c:	f2c0 8163 	blt.w	80263d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8026110:	9b07      	ldr	r3, [sp, #28]
 8026112:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8026114:	9318      	str	r3, [sp, #96]	@ 0x60
 8026116:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026118:	2b00      	cmp	r3, #0
 802611a:	f340 8186 	ble.w	802642a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802611e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026120:	142a      	asrs	r2, r5, #16
 8026122:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026126:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802612a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802612e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026132:	f100 81cb 	bmi.w	80264cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026136:	f10e 38ff 	add.w	r8, lr, #4294967295
 802613a:	4542      	cmp	r2, r8
 802613c:	f280 81c6 	bge.w	80264cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026140:	2800      	cmp	r0, #0
 8026142:	f2c0 81c3 	blt.w	80264cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026146:	f103 38ff 	add.w	r8, r3, #4294967295
 802614a:	4540      	cmp	r0, r8
 802614c:	f280 81be 	bge.w	80264cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026150:	fa0f f38e 	sxth.w	r3, lr
 8026154:	fb00 2203 	mla	r2, r0, r3, r2
 8026158:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802615a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802615e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8026162:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026166:	2900      	cmp	r1, #0
 8026168:	f000 81a6 	beq.w	80264b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802616c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026170:	900c      	str	r0, [sp, #48]	@ 0x30
 8026172:	0e00      	lsrs	r0, r0, #24
 8026174:	9013      	str	r0, [sp, #76]	@ 0x4c
 8026176:	f1bc 0f00 	cmp.w	ip, #0
 802617a:	d00f      	beq.n	802619c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802617c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026180:	3b01      	subs	r3, #1
 8026182:	009b      	lsls	r3, r3, #2
 8026184:	3304      	adds	r3, #4
 8026186:	eb08 0003 	add.w	r0, r8, r3
 802618a:	f858 3003 	ldr.w	r3, [r8, r3]
 802618e:	9308      	str	r3, [sp, #32]
 8026190:	0e1b      	lsrs	r3, r3, #24
 8026192:	9311      	str	r3, [sp, #68]	@ 0x44
 8026194:	6843      	ldr	r3, [r0, #4]
 8026196:	930d      	str	r3, [sp, #52]	@ 0x34
 8026198:	0e1b      	lsrs	r3, r3, #24
 802619a:	9314      	str	r3, [sp, #80]	@ 0x50
 802619c:	b289      	uxth	r1, r1
 802619e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80261a0:	fa1f fc8c 	uxth.w	ip, ip
 80261a4:	0108      	lsls	r0, r1, #4
 80261a6:	fb01 f90c 	mul.w	r9, r1, ip
 80261aa:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80261ae:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80261b2:	eba0 0809 	sub.w	r8, r0, r9
 80261b6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80261b8:	fa1f f18c 	uxth.w	r1, ip
 80261bc:	fa1f f888 	uxth.w	r8, r8
 80261c0:	1a5b      	subs	r3, r3, r1
 80261c2:	fb08 f000 	mul.w	r0, r8, r0
 80261c6:	b29b      	uxth	r3, r3
 80261c8:	fb03 000e 	mla	r0, r3, lr, r0
 80261cc:	fb01 0004 	mla	r0, r1, r4, r0
 80261d0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80261d2:	fb09 0004 	mla	r0, r9, r4, r0
 80261d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80261da:	2800      	cmp	r0, #0
 80261dc:	f000 80f2 	beq.w	80263c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80261e0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80261e4:	d01b      	beq.n	802621e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80261e6:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80261ea:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80261ee:	fb0e fa0a 	mul.w	sl, lr, sl
 80261f2:	fb0e fe02 	mul.w	lr, lr, r2
 80261f6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80261fa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80261fe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026202:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026206:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802620a:	4452      	add	r2, sl
 802620c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026210:	0a12      	lsrs	r2, r2, #8
 8026212:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026216:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802621a:	ea42 020c 	orr.w	r2, r2, ip
 802621e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026220:	2cff      	cmp	r4, #255	@ 0xff
 8026222:	d021      	beq.n	8026268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8026224:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026226:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802622a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802622c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026230:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026232:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026236:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026238:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802623c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026240:	fb04 fa0a 	mul.w	sl, r4, sl
 8026244:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026248:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802624c:	44de      	add	lr, fp
 802624e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026252:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026256:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802625a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802625e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026262:	ea4e 040a 	orr.w	r4, lr, sl
 8026266:	940c      	str	r4, [sp, #48]	@ 0x30
 8026268:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802626a:	2cff      	cmp	r4, #255	@ 0xff
 802626c:	d021      	beq.n	80262b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802626e:	9c08      	ldr	r4, [sp, #32]
 8026270:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026274:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026276:	fb04 fb0b 	mul.w	fp, r4, fp
 802627a:	9c08      	ldr	r4, [sp, #32]
 802627c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026280:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026282:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026286:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802628a:	fb04 fa0a 	mul.w	sl, r4, sl
 802628e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026292:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026296:	44de      	add	lr, fp
 8026298:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802629c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80262a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80262a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80262ac:	ea4e 040a 	orr.w	r4, lr, sl
 80262b0:	9408      	str	r4, [sp, #32]
 80262b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80262b4:	2cff      	cmp	r4, #255	@ 0xff
 80262b6:	d021      	beq.n	80262fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80262b8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80262ba:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80262be:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80262c0:	fb04 fb0b 	mul.w	fp, r4, fp
 80262c4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80262c6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80262ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80262cc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80262d0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80262d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80262d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80262dc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80262e0:	44de      	add	lr, fp
 80262e2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80262e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80262ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80262f2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80262f6:	ea4e 040a 	orr.w	r4, lr, sl
 80262fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80262fc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80262fe:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8026302:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026306:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802630a:	9c08      	ldr	r4, [sp, #32]
 802630c:	fb08 fc0c 	mul.w	ip, r8, ip
 8026310:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026314:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026318:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802631a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802631e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026322:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026324:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026328:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802632c:	fb08 f80e 	mul.w	r8, r8, lr
 8026330:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026334:	fb03 8202 	mla	r2, r3, r2, r8
 8026338:	9b08      	ldr	r3, [sp, #32]
 802633a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802633e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8026342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026344:	fb01 220a 	mla	r2, r1, sl, r2
 8026348:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 802634c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802634e:	fb09 2901 	mla	r9, r9, r1, r2
 8026352:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026354:	4343      	muls	r3, r0
 8026356:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802635a:	1c58      	adds	r0, r3, #1
 802635c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026360:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026364:	783b      	ldrb	r3, [r7, #0]
 8026366:	ea4c 0c09 	orr.w	ip, ip, r9
 802636a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802636e:	fa5f f28c 	uxtb.w	r2, ip
 8026372:	b2c0      	uxtb	r0, r0
 8026374:	fb12 f201 	smulbb	r2, r2, r1
 8026378:	fb03 2300 	mla	r3, r3, r0, r2
 802637c:	b29b      	uxth	r3, r3
 802637e:	1c5a      	adds	r2, r3, #1
 8026380:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026384:	787a      	ldrb	r2, [r7, #1]
 8026386:	fb12 f200 	smulbb	r2, r2, r0
 802638a:	121b      	asrs	r3, r3, #8
 802638c:	703b      	strb	r3, [r7, #0]
 802638e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8026392:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026396:	fb03 2301 	mla	r3, r3, r1, r2
 802639a:	b29b      	uxth	r3, r3
 802639c:	1c5a      	adds	r2, r3, #1
 802639e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80263a2:	121b      	asrs	r3, r3, #8
 80263a4:	707b      	strb	r3, [r7, #1]
 80263a6:	78bb      	ldrb	r3, [r7, #2]
 80263a8:	fb13 f000 	smulbb	r0, r3, r0
 80263ac:	fb0c 0c01 	mla	ip, ip, r1, r0
 80263b0:	fa1f fc8c 	uxth.w	ip, ip
 80263b4:	f10c 0301 	add.w	r3, ip, #1
 80263b8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80263bc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80263c0:	f887 c002 	strb.w	ip, [r7, #2]
 80263c4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80263c6:	3703      	adds	r7, #3
 80263c8:	441d      	add	r5, r3
 80263ca:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80263cc:	441e      	add	r6, r3
 80263ce:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80263d0:	3b01      	subs	r3, #1
 80263d2:	9318      	str	r3, [sp, #96]	@ 0x60
 80263d4:	e69f      	b.n	8026116 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80263d6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80263d8:	441d      	add	r5, r3
 80263da:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80263dc:	441e      	add	r6, r3
 80263de:	9b07      	ldr	r3, [sp, #28]
 80263e0:	3b01      	subs	r3, #1
 80263e2:	9307      	str	r3, [sp, #28]
 80263e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80263e6:	3303      	adds	r3, #3
 80263e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80263ea:	e674      	b.n	80260d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80263ec:	d025      	beq.n	802643a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80263ee:	9b07      	ldr	r3, [sp, #28]
 80263f0:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80263f2:	3b01      	subs	r3, #1
 80263f4:	fb00 5003 	mla	r0, r0, r3, r5
 80263f8:	1400      	asrs	r0, r0, #16
 80263fa:	f53f ae89 	bmi.w	8026110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80263fe:	3901      	subs	r1, #1
 8026400:	4288      	cmp	r0, r1
 8026402:	f6bf ae85 	bge.w	8026110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026406:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8026408:	fb01 6303 	mla	r3, r1, r3, r6
 802640c:	141b      	asrs	r3, r3, #16
 802640e:	f53f ae7f 	bmi.w	8026110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026412:	3a01      	subs	r2, #1
 8026414:	4293      	cmp	r3, r2
 8026416:	f6bf ae7b 	bge.w	8026110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802641a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802641c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026420:	f103 0e03 	add.w	lr, r3, #3
 8026424:	f1bb 0f00 	cmp.w	fp, #0
 8026428:	dc6e      	bgt.n	8026508 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802642a:	9b07      	ldr	r3, [sp, #28]
 802642c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026432:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026436:	4423      	add	r3, r4
 8026438:	930a      	str	r3, [sp, #40]	@ 0x28
 802643a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802643c:	2b00      	cmp	r3, #0
 802643e:	f340 81ab 	ble.w	8026798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026446:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026448:	ee30 0a04 	vadd.f32	s0, s0, s8
 802644c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026450:	eef0 6a62 	vmov.f32	s13, s5
 8026454:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026458:	ee31 1a05 	vadd.f32	s2, s2, s10
 802645c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026460:	ee16 5a90 	vmov	r5, s13
 8026464:	eef0 6a43 	vmov.f32	s13, s6
 8026468:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802646c:	ee16 6a90 	vmov	r6, s13
 8026470:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026474:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026478:	ee77 2a62 	vsub.f32	s5, s14, s5
 802647c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026480:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026484:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026488:	ee12 2a90 	vmov	r2, s5
 802648c:	eef0 2a47 	vmov.f32	s5, s14
 8026490:	fb92 f3f3 	sdiv	r3, r2, r3
 8026494:	ee13 2a10 	vmov	r2, s6
 8026498:	9329      	str	r3, [sp, #164]	@ 0xa4
 802649a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802649c:	eeb0 3a67 	vmov.f32	s6, s15
 80264a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80264a4:	932a      	str	r3, [sp, #168]	@ 0xa8
 80264a6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80264a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80264aa:	3b01      	subs	r3, #1
 80264ac:	9317      	str	r3, [sp, #92]	@ 0x5c
 80264ae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80264b0:	bf08      	it	eq
 80264b2:	4613      	moveq	r3, r2
 80264b4:	9307      	str	r3, [sp, #28]
 80264b6:	e600      	b.n	80260ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80264b8:	f1bc 0f00 	cmp.w	ip, #0
 80264bc:	f43f ae6e 	beq.w	802619c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80264c0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80264c4:	9308      	str	r3, [sp, #32]
 80264c6:	0e1b      	lsrs	r3, r3, #24
 80264c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80264ca:	e667      	b.n	802619c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80264cc:	f112 0801 	adds.w	r8, r2, #1
 80264d0:	f53f af78 	bmi.w	80263c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80264d4:	45c6      	cmp	lr, r8
 80264d6:	f6ff af75 	blt.w	80263c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80264da:	f110 0801 	adds.w	r8, r0, #1
 80264de:	f53f af71 	bmi.w	80263c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80264e2:	4543      	cmp	r3, r8
 80264e4:	f6ff af6e 	blt.w	80263c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80264e8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80264ea:	b21b      	sxth	r3, r3
 80264ec:	9201      	str	r2, [sp, #4]
 80264ee:	9300      	str	r3, [sp, #0]
 80264f0:	fa0f f38e 	sxth.w	r3, lr
 80264f4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80264f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80264fa:	e9cd c404 	strd	ip, r4, [sp, #16]
 80264fe:	4639      	mov	r1, r7
 8026500:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026502:	f7ff fc79 	bl	8025df8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8026506:	e75d      	b.n	80263c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026508:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802650a:	142f      	asrs	r7, r5, #16
 802650c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802650e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026512:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8026516:	1433      	asrs	r3, r6, #16
 8026518:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802651c:	fb02 7303 	mla	r3, r2, r3, r7
 8026520:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8026524:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026528:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802652c:	2900      	cmp	r1, #0
 802652e:	f000 812a 	beq.w	8026786 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026532:	687c      	ldr	r4, [r7, #4]
 8026534:	940e      	str	r4, [sp, #56]	@ 0x38
 8026536:	0e24      	lsrs	r4, r4, #24
 8026538:	9415      	str	r4, [sp, #84]	@ 0x54
 802653a:	b178      	cbz	r0, 802655c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802653c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8026540:	3a01      	subs	r2, #1
 8026542:	0092      	lsls	r2, r2, #2
 8026544:	3204      	adds	r2, #4
 8026546:	eb07 0802 	add.w	r8, r7, r2
 802654a:	58ba      	ldr	r2, [r7, r2]
 802654c:	9209      	str	r2, [sp, #36]	@ 0x24
 802654e:	0e12      	lsrs	r2, r2, #24
 8026550:	9212      	str	r2, [sp, #72]	@ 0x48
 8026552:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8026556:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026558:	0e12      	lsrs	r2, r2, #24
 802655a:	9216      	str	r2, [sp, #88]	@ 0x58
 802655c:	b289      	uxth	r1, r1
 802655e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026560:	b280      	uxth	r0, r0
 8026562:	fb01 f900 	mul.w	r9, r1, r0
 8026566:	0109      	lsls	r1, r1, #4
 8026568:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802656c:	eba1 0809 	sub.w	r8, r1, r9
 8026570:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8026574:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026576:	b280      	uxth	r0, r0
 8026578:	fa1f f888 	uxth.w	r8, r8
 802657c:	1a12      	subs	r2, r2, r0
 802657e:	fb08 f101 	mul.w	r1, r8, r1
 8026582:	b292      	uxth	r2, r2
 8026584:	fb02 110c 	mla	r1, r2, ip, r1
 8026588:	fb00 1104 	mla	r1, r0, r4, r1
 802658c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802658e:	fb09 1104 	mla	r1, r9, r4, r1
 8026592:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026596:	2900      	cmp	r1, #0
 8026598:	f000 80ec 	beq.w	8026774 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 802659c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80265a0:	d019      	beq.n	80265d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80265a2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80265a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80265aa:	fb0c fa0a 	mul.w	sl, ip, sl
 80265ae:	fb0c fc03 	mul.w	ip, ip, r3
 80265b2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80265b6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80265ba:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80265be:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80265c2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80265c6:	4453      	add	r3, sl
 80265c8:	0a3f      	lsrs	r7, r7, #8
 80265ca:	0a1b      	lsrs	r3, r3, #8
 80265cc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80265d0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80265d4:	433b      	orrs	r3, r7
 80265d6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80265d8:	2cff      	cmp	r4, #255	@ 0xff
 80265da:	d020      	beq.n	802661e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 80265dc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80265de:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80265e2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80265e4:	4367      	muls	r7, r4
 80265e6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80265e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80265ec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80265f0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80265f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80265f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80265fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80265fe:	44bc      	add	ip, r7
 8026600:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026604:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026608:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802660c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026610:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026614:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026618:	ea4c 040a 	orr.w	r4, ip, sl
 802661c:	940e      	str	r4, [sp, #56]	@ 0x38
 802661e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026620:	2cff      	cmp	r4, #255	@ 0xff
 8026622:	d020      	beq.n	8026666 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8026624:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026626:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802662a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802662c:	4367      	muls	r7, r4
 802662e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026630:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026634:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026638:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802663a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802663e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026642:	fb04 fa0a 	mul.w	sl, r4, sl
 8026646:	44bc      	add	ip, r7
 8026648:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802664c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026650:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026654:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026658:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802665c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026660:	ea4c 040a 	orr.w	r4, ip, sl
 8026664:	9409      	str	r4, [sp, #36]	@ 0x24
 8026666:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026668:	2cff      	cmp	r4, #255	@ 0xff
 802666a:	d020      	beq.n	80266ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 802666c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802666e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026672:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026674:	4367      	muls	r7, r4
 8026676:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026678:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802667c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026680:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8026682:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026686:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802668a:	fb04 fa0a 	mul.w	sl, r4, sl
 802668e:	44bc      	add	ip, r7
 8026690:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026694:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026698:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802669c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80266a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80266a8:	ea4c 040a 	orr.w	r4, ip, sl
 80266ac:	940f      	str	r4, [sp, #60]	@ 0x3c
 80266ae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80266b0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80266b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80266b8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80266bc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80266be:	fb08 f707 	mul.w	r7, r8, r7
 80266c2:	fb02 770c 	mla	r7, r2, ip, r7
 80266c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80266ca:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80266cc:	fb00 770c 	mla	r7, r0, ip, r7
 80266d0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80266d4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80266d6:	fb09 770c 	mla	r7, r9, ip, r7
 80266da:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80266de:	fb08 f80c 	mul.w	r8, r8, ip
 80266e2:	0a3f      	lsrs	r7, r7, #8
 80266e4:	fb02 8303 	mla	r3, r2, r3, r8
 80266e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80266ea:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80266ee:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80266f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80266f4:	fb00 330a 	mla	r3, r0, sl, r3
 80266f8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80266fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80266fe:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026704:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026708:	434b      	muls	r3, r1
 802670a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802670e:	1c59      	adds	r1, r3, #1
 8026710:	ea47 070c 	orr.w	r7, r7, ip
 8026714:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026718:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802671c:	b2fa      	uxtb	r2, r7
 802671e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026722:	fb12 f200 	smulbb	r2, r2, r0
 8026726:	b2c9      	uxtb	r1, r1
 8026728:	fb03 2301 	mla	r3, r3, r1, r2
 802672c:	b29b      	uxth	r3, r3
 802672e:	1c5a      	adds	r2, r3, #1
 8026730:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026734:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026738:	fb12 f201 	smulbb	r2, r2, r1
 802673c:	121b      	asrs	r3, r3, #8
 802673e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026742:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8026746:	0c3f      	lsrs	r7, r7, #16
 8026748:	fb03 2300 	mla	r3, r3, r0, r2
 802674c:	b29b      	uxth	r3, r3
 802674e:	1c5a      	adds	r2, r3, #1
 8026750:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026754:	121b      	asrs	r3, r3, #8
 8026756:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802675a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802675e:	fb13 f101 	smulbb	r1, r3, r1
 8026762:	fb07 1700 	mla	r7, r7, r0, r1
 8026766:	b2bf      	uxth	r7, r7
 8026768:	1c79      	adds	r1, r7, #1
 802676a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802676e:	123f      	asrs	r7, r7, #8
 8026770:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8026774:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026776:	f10e 0e03 	add.w	lr, lr, #3
 802677a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802677e:	441d      	add	r5, r3
 8026780:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026782:	441e      	add	r6, r3
 8026784:	e64e      	b.n	8026424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8026786:	2800      	cmp	r0, #0
 8026788:	f43f aee8 	beq.w	802655c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802678c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8026790:	9209      	str	r2, [sp, #36]	@ 0x24
 8026792:	0e12      	lsrs	r2, r2, #24
 8026794:	9212      	str	r2, [sp, #72]	@ 0x48
 8026796:	e6e1      	b.n	802655c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8026798:	b01d      	add	sp, #116	@ 0x74
 802679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802679e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802679e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267a2:	b087      	sub	sp, #28
 80267a4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80267a8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80267ac:	fb05 7003 	mla	r0, r5, r3, r7
 80267b0:	2d00      	cmp	r5, #0
 80267b2:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80267b6:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80267ba:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80267be:	f2c0 810a 	blt.w	80269d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80267c2:	45a8      	cmp	r8, r5
 80267c4:	f340 8107 	ble.w	80269d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80267c8:	2f00      	cmp	r7, #0
 80267ca:	f2c0 8102 	blt.w	80269d2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80267ce:	42bb      	cmp	r3, r7
 80267d0:	f340 80ff 	ble.w	80269d2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80267d4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80267d8:	1c7a      	adds	r2, r7, #1
 80267da:	f100 80ff 	bmi.w	80269dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80267de:	4293      	cmp	r3, r2
 80267e0:	f340 80fc 	ble.w	80269dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80267e4:	2c00      	cmp	r4, #0
 80267e6:	f000 80fb 	beq.w	80269e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 80267ea:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80267ee:	3501      	adds	r5, #1
 80267f0:	f100 80fa 	bmi.w	80269e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80267f4:	45a8      	cmp	r8, r5
 80267f6:	f340 80f7 	ble.w	80269e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80267fa:	f1be 0f00 	cmp.w	lr, #0
 80267fe:	f000 80f6 	beq.w	80269ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8026802:	2f00      	cmp	r7, #0
 8026804:	f2c0 80ee 	blt.w	80269e4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8026808:	42bb      	cmp	r3, r7
 802680a:	f340 80eb 	ble.w	80269e4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802680e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8026812:	3701      	adds	r7, #1
 8026814:	f100 80ee 	bmi.w	80269f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8026818:	42bb      	cmp	r3, r7
 802681a:	f340 80eb 	ble.w	80269f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802681e:	2c00      	cmp	r4, #0
 8026820:	f000 80ea 	beq.w	80269f8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8026824:	3301      	adds	r3, #1
 8026826:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802682a:	fa1f fc84 	uxth.w	ip, r4
 802682e:	fa1f fe8e 	uxth.w	lr, lr
 8026832:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026836:	fb0c f90e 	mul.w	r9, ip, lr
 802683a:	0e13      	lsrs	r3, r2, #24
 802683c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026840:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8026844:	9302      	str	r3, [sp, #8]
 8026846:	ebac 0709 	sub.w	r7, ip, r9
 802684a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802684e:	fa1f f48e 	uxth.w	r4, lr
 8026852:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8026856:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802685a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802685e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026862:	1b1b      	subs	r3, r3, r4
 8026864:	fb0a f606 	mul.w	r6, sl, r6
 8026868:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802686c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026870:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8026874:	b29b      	uxth	r3, r3
 8026876:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802687a:	b2bf      	uxth	r7, r7
 802687c:	9301      	str	r3, [sp, #4]
 802687e:	44e6      	add	lr, ip
 8026880:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8026884:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026888:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802688c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8026890:	9303      	str	r3, [sp, #12]
 8026892:	0a33      	lsrs	r3, r6, #8
 8026894:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8026898:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802689c:	9304      	str	r3, [sp, #16]
 802689e:	fb0b f606 	mul.w	r6, fp, r6
 80268a2:	fb0b f000 	mul.w	r0, fp, r0
 80268a6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80268aa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80268ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80268b2:	44b6      	add	lr, r6
 80268b4:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80268b8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80268bc:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80268c0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80268c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268c8:	fb08 f606 	mul.w	r6, r8, r6
 80268cc:	0a03      	lsrs	r3, r0, #8
 80268ce:	fb08 f505 	mul.w	r5, r8, r5
 80268d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80268d6:	0a30      	lsrs	r0, r6, #8
 80268d8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80268dc:	9305      	str	r3, [sp, #20]
 80268de:	0e13      	lsrs	r3, r2, #24
 80268e0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80268e4:	fb0e fe07 	mul.w	lr, lr, r7
 80268e8:	4430      	add	r0, r6
 80268ea:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80268ee:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80268f2:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80268f6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80268fa:	0a00      	lsrs	r0, r0, #8
 80268fc:	435e      	muls	r6, r3
 80268fe:	0a2d      	lsrs	r5, r5, #8
 8026900:	435a      	muls	r2, r3
 8026902:	9b03      	ldr	r3, [sp, #12]
 8026904:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8026908:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802690c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026910:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026914:	44b4      	add	ip, r6
 8026916:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 802691a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802691e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8026922:	9e01      	ldr	r6, [sp, #4]
 8026924:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026928:	fb03 ee06 	mla	lr, r3, r6, lr
 802692c:	9b04      	ldr	r3, [sp, #16]
 802692e:	0a12      	lsrs	r2, r2, #8
 8026930:	fb0c ee09 	mla	lr, ip, r9, lr
 8026934:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8026938:	9b05      	ldr	r3, [sp, #20]
 802693a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802693e:	fb00 ee04 	mla	lr, r0, r4, lr
 8026942:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026946:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802694a:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802694e:	9b01      	ldr	r3, [sp, #4]
 8026950:	fb07 fe0e 	mul.w	lr, r7, lr
 8026954:	fb07 f70b 	mul.w	r7, r7, fp
 8026958:	fb03 ee06 	mla	lr, r3, r6, lr
 802695c:	fb03 730a 	mla	r3, r3, sl, r7
 8026960:	fb09 e202 	mla	r2, r9, r2, lr
 8026964:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8026968:	fb04 2e0e 	mla	lr, r4, lr, r2
 802696c:	fb04 3408 	mla	r4, r4, r8, r3
 8026970:	9b02      	ldr	r3, [sp, #8]
 8026972:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026976:	fb09 4903 	mla	r9, r9, r3, r4
 802697a:	780b      	ldrb	r3, [r1, #0]
 802697c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8026980:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8026984:	ea40 0e0e 	orr.w	lr, r0, lr
 8026988:	fa5f f989 	uxtb.w	r9, r9
 802698c:	fb03 f209 	mul.w	r2, r3, r9
 8026990:	1c53      	adds	r3, r2, #1
 8026992:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026996:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802699a:	700b      	strb	r3, [r1, #0]
 802699c:	784b      	ldrb	r3, [r1, #1]
 802699e:	fb03 f309 	mul.w	r3, r3, r9
 80269a2:	1c5a      	adds	r2, r3, #1
 80269a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80269a8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80269ac:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80269b0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80269b4:	704b      	strb	r3, [r1, #1]
 80269b6:	788b      	ldrb	r3, [r1, #2]
 80269b8:	fb03 f909 	mul.w	r9, r3, r9
 80269bc:	f109 0301 	add.w	r3, r9, #1
 80269c0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80269c4:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80269c8:	f881 e002 	strb.w	lr, [r1, #2]
 80269cc:	b007      	add	sp, #28
 80269ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269d2:	2600      	movs	r6, #0
 80269d4:	e700      	b.n	80267d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 80269d6:	2000      	movs	r0, #0
 80269d8:	4606      	mov	r6, r0
 80269da:	e708      	b.n	80267ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80269dc:	2000      	movs	r0, #0
 80269de:	e706      	b.n	80267ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80269e0:	4620      	mov	r0, r4
 80269e2:	e704      	b.n	80267ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80269e4:	2500      	movs	r5, #0
 80269e6:	e714      	b.n	8026812 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 80269e8:	2200      	movs	r2, #0
 80269ea:	4615      	mov	r5, r2
 80269ec:	e71d      	b.n	802682a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80269ee:	4672      	mov	r2, lr
 80269f0:	4675      	mov	r5, lr
 80269f2:	e71a      	b.n	802682a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80269f4:	2200      	movs	r2, #0
 80269f6:	e718      	b.n	802682a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80269f8:	4622      	mov	r2, r4
 80269fa:	e716      	b.n	802682a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080269fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80269fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a00:	b099      	sub	sp, #100	@ 0x64
 8026a02:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8026a06:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8026a08:	9017      	str	r0, [sp, #92]	@ 0x5c
 8026a0a:	9306      	str	r3, [sp, #24]
 8026a0c:	6850      	ldr	r0, [r2, #4]
 8026a0e:	6812      	ldr	r2, [r2, #0]
 8026a10:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8026a14:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8026a18:	fb00 1303 	mla	r3, r0, r3, r1
 8026a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026a20:	18d3      	adds	r3, r2, r3
 8026a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a24:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026a26:	681b      	ldr	r3, [r3, #0]
 8026a28:	930e      	str	r3, [sp, #56]	@ 0x38
 8026a2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	dc03      	bgt.n	8026a38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026a30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026a32:	2b00      	cmp	r3, #0
 8026a34:	f340 8360 	ble.w	80270f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8026a38:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026a3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026a42:	1e48      	subs	r0, r1, #1
 8026a44:	1e57      	subs	r7, r2, #1
 8026a46:	9b06      	ldr	r3, [sp, #24]
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	f340 817b 	ble.w	8026d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8026a4e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026a52:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026a56:	d406      	bmi.n	8026a66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026a58:	4584      	cmp	ip, r0
 8026a5a:	da04      	bge.n	8026a66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026a5c:	2b00      	cmp	r3, #0
 8026a5e:	db02      	blt.n	8026a66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8026a60:	42bb      	cmp	r3, r7
 8026a62:	f2c0 8170 	blt.w	8026d46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8026a66:	f11c 0c01 	adds.w	ip, ip, #1
 8026a6a:	f100 8160 	bmi.w	8026d2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026a6e:	4561      	cmp	r1, ip
 8026a70:	f2c0 815d 	blt.w	8026d2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026a74:	3301      	adds	r3, #1
 8026a76:	f100 815a 	bmi.w	8026d2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026a7a:	429a      	cmp	r2, r3
 8026a7c:	f2c0 8157 	blt.w	8026d2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8026a80:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026a84:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026a86:	f1b8 0f00 	cmp.w	r8, #0
 8026a8a:	f340 8179 	ble.w	8026d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8026a8e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8026a90:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026a94:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026a96:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026a9a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026a9e:	142a      	asrs	r2, r5, #16
 8026aa0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026aa4:	689b      	ldr	r3, [r3, #8]
 8026aa6:	f100 81be 	bmi.w	8026e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026aaa:	f103 39ff 	add.w	r9, r3, #4294967295
 8026aae:	454a      	cmp	r2, r9
 8026ab0:	f280 81b9 	bge.w	8026e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026ab4:	f1bc 0f00 	cmp.w	ip, #0
 8026ab8:	f2c0 81b5 	blt.w	8026e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026abc:	f10e 39ff 	add.w	r9, lr, #4294967295
 8026ac0:	45cc      	cmp	ip, r9
 8026ac2:	f280 81b0 	bge.w	8026e26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8026ac6:	b21b      	sxth	r3, r3
 8026ac8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026aca:	fb0c 2203 	mla	r2, ip, r3, r2
 8026ace:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8026ad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026ad6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026ada:	2900      	cmp	r1, #0
 8026adc:	f000 8197 	beq.w	8026e0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026ae0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8026ae4:	940a      	str	r4, [sp, #40]	@ 0x28
 8026ae6:	0e24      	lsrs	r4, r4, #24
 8026ae8:	9411      	str	r4, [sp, #68]	@ 0x44
 8026aea:	b180      	cbz	r0, 8026b0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026aec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026af0:	3b01      	subs	r3, #1
 8026af2:	009b      	lsls	r3, r3, #2
 8026af4:	3304      	adds	r3, #4
 8026af6:	eb09 0c03 	add.w	ip, r9, r3
 8026afa:	f859 3003 	ldr.w	r3, [r9, r3]
 8026afe:	9307      	str	r3, [sp, #28]
 8026b00:	0e1b      	lsrs	r3, r3, #24
 8026b02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026b04:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026b0a:	0e1b      	lsrs	r3, r3, #24
 8026b0c:	9312      	str	r3, [sp, #72]	@ 0x48
 8026b0e:	b289      	uxth	r1, r1
 8026b10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026b12:	b280      	uxth	r0, r0
 8026b14:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026b16:	fb01 fa00 	mul.w	sl, r1, r0
 8026b1a:	0109      	lsls	r1, r1, #4
 8026b1c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8026b20:	eba1 090a 	sub.w	r9, r1, sl
 8026b24:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8026b28:	b280      	uxth	r0, r0
 8026b2a:	fa1f f989 	uxth.w	r9, r9
 8026b2e:	1a09      	subs	r1, r1, r0
 8026b30:	fb09 f303 	mul.w	r3, r9, r3
 8026b34:	b289      	uxth	r1, r1
 8026b36:	fb01 330e 	mla	r3, r1, lr, r3
 8026b3a:	fb00 3304 	mla	r3, r0, r4, r3
 8026b3e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026b40:	fb0a 3304 	mla	r3, sl, r4, r3
 8026b44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b48:	2b00      	cmp	r3, #0
 8026b4a:	f000 80e8 	beq.w	8026d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026b4e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026b52:	d01b      	beq.n	8026b8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8026b54:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8026b58:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026b5c:	fb0e fb0b 	mul.w	fp, lr, fp
 8026b60:	fb0e fe02 	mul.w	lr, lr, r2
 8026b64:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8026b68:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026b6c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026b70:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026b74:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026b78:	445a      	add	r2, fp
 8026b7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b7e:	0a12      	lsrs	r2, r2, #8
 8026b80:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026b84:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026b88:	ea42 020c 	orr.w	r2, r2, ip
 8026b8c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026b8e:	2cff      	cmp	r4, #255	@ 0xff
 8026b90:	d021      	beq.n	8026bd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8026b92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026b94:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026b98:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026b9a:	fb04 fc0c 	mul.w	ip, r4, ip
 8026b9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026ba0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026ba4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026ba8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026baa:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026bae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026bb2:	fb04 fb0b 	mul.w	fp, r4, fp
 8026bb6:	44e6      	add	lr, ip
 8026bb8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8026bbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026bc0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026bc4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026bc8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026bcc:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026bd0:	ea4e 040b 	orr.w	r4, lr, fp
 8026bd4:	940a      	str	r4, [sp, #40]	@ 0x28
 8026bd6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026bd8:	2cff      	cmp	r4, #255	@ 0xff
 8026bda:	d021      	beq.n	8026c20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026bdc:	9c07      	ldr	r4, [sp, #28]
 8026bde:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026be2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026be4:	fb04 fc0c 	mul.w	ip, r4, ip
 8026be8:	9c07      	ldr	r4, [sp, #28]
 8026bea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026bee:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026bf2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026bf4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026bf8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026bfc:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c00:	44e6      	add	lr, ip
 8026c02:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8026c06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c0a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026c0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c12:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026c16:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026c1a:	ea4e 040b 	orr.w	r4, lr, fp
 8026c1e:	9407      	str	r4, [sp, #28]
 8026c20:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026c22:	2cff      	cmp	r4, #255	@ 0xff
 8026c24:	d021      	beq.n	8026c6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8026c26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026c28:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026c2c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026c2e:	fb04 fc0c 	mul.w	ip, r4, ip
 8026c32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026c34:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026c38:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026c3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026c3e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026c42:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c46:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c4a:	44e6      	add	lr, ip
 8026c4c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8026c50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c54:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8026c58:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c5c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026c60:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026c64:	ea4e 040b 	orr.w	r4, lr, fp
 8026c68:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026c6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026c6c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8026c70:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026c74:	2bff      	cmp	r3, #255	@ 0xff
 8026c76:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026c7a:	9c07      	ldr	r4, [sp, #28]
 8026c7c:	fb09 fc0c 	mul.w	ip, r9, ip
 8026c80:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026c84:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026c88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026c8a:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026c8e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026c92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026c94:	fb0a cc0e 	mla	ip, sl, lr, ip
 8026c98:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026c9c:	fb09 f90e 	mul.w	r9, r9, lr
 8026ca0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ca4:	fb01 9202 	mla	r2, r1, r2, r9
 8026ca8:	9907      	ldr	r1, [sp, #28]
 8026caa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026cae:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8026cb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026cb4:	fb00 220b 	mla	r2, r0, fp, r2
 8026cb8:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8026cbc:	fb0a 2a00 	mla	sl, sl, r0, r2
 8026cc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cc4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026cc8:	ea4c 0c0a 	orr.w	ip, ip, sl
 8026ccc:	fa5f f08c 	uxtb.w	r0, ip
 8026cd0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8026cd4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8026cd8:	f000 80a2 	beq.w	8026e20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8026cdc:	43db      	mvns	r3, r3
 8026cde:	783a      	ldrb	r2, [r7, #0]
 8026ce0:	f897 a002 	ldrb.w	sl, [r7, #2]
 8026ce4:	b2db      	uxtb	r3, r3
 8026ce6:	fb02 fe03 	mul.w	lr, r2, r3
 8026cea:	fb0a fa03 	mul.w	sl, sl, r3
 8026cee:	f10e 0201 	add.w	r2, lr, #1
 8026cf2:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8026cf6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026cfa:	703a      	strb	r2, [r7, #0]
 8026cfc:	787a      	ldrb	r2, [r7, #1]
 8026cfe:	fb02 f003 	mul.w	r0, r2, r3
 8026d02:	f10a 0301 	add.w	r3, sl, #1
 8026d06:	1c42      	adds	r2, r0, #1
 8026d08:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026d0c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026d10:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8026d14:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026d18:	707a      	strb	r2, [r7, #1]
 8026d1a:	f887 c002 	strb.w	ip, [r7, #2]
 8026d1e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026d20:	3703      	adds	r7, #3
 8026d22:	f108 38ff 	add.w	r8, r8, #4294967295
 8026d26:	441d      	add	r5, r3
 8026d28:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026d2a:	441e      	add	r6, r3
 8026d2c:	e6ab      	b.n	8026a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026d2e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026d30:	441d      	add	r5, r3
 8026d32:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026d34:	441e      	add	r6, r3
 8026d36:	9b06      	ldr	r3, [sp, #24]
 8026d38:	3b01      	subs	r3, #1
 8026d3a:	9306      	str	r3, [sp, #24]
 8026d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d3e:	3303      	adds	r3, #3
 8026d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d42:	e680      	b.n	8026a46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026d44:	d024      	beq.n	8026d90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026d46:	9b06      	ldr	r3, [sp, #24]
 8026d48:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8026d4a:	3b01      	subs	r3, #1
 8026d4c:	fb00 5003 	mla	r0, r0, r3, r5
 8026d50:	1400      	asrs	r0, r0, #16
 8026d52:	f53f ae95 	bmi.w	8026a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026d56:	3901      	subs	r1, #1
 8026d58:	4288      	cmp	r0, r1
 8026d5a:	f6bf ae91 	bge.w	8026a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026d5e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8026d60:	fb01 6303 	mla	r3, r1, r3, r6
 8026d64:	141b      	asrs	r3, r3, #16
 8026d66:	f53f ae8b 	bmi.w	8026a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026d6a:	3a01      	subs	r2, #1
 8026d6c:	4293      	cmp	r3, r2
 8026d6e:	f6bf ae87 	bge.w	8026a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d74:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026d78:	1cdf      	adds	r7, r3, #3
 8026d7a:	f1bb 0f00 	cmp.w	fp, #0
 8026d7e:	dc6e      	bgt.n	8026e5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8026d80:	9b06      	ldr	r3, [sp, #24]
 8026d82:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d88:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026d8c:	4423      	add	r3, r4
 8026d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d90:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	f340 81b0 	ble.w	80270f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8026d98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026d9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026d9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026da2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026da6:	eef0 6a62 	vmov.f32	s13, s5
 8026daa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026dae:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026db2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026db6:	ee16 5a90 	vmov	r5, s13
 8026dba:	eef0 6a43 	vmov.f32	s13, s6
 8026dbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026dc2:	ee16 6a90 	vmov	r6, s13
 8026dc6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026dca:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026dce:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026dd2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026dd6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026dda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026dde:	ee12 2a90 	vmov	r2, s5
 8026de2:	eef0 2a47 	vmov.f32	s5, s14
 8026de6:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dea:	ee13 2a10 	vmov	r2, s6
 8026dee:	9325      	str	r3, [sp, #148]	@ 0x94
 8026df0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026df2:	eeb0 3a67 	vmov.f32	s6, s15
 8026df6:	fb92 f3f3 	sdiv	r3, r2, r3
 8026dfa:	9326      	str	r3, [sp, #152]	@ 0x98
 8026dfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026dfe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026e00:	3b01      	subs	r3, #1
 8026e02:	9315      	str	r3, [sp, #84]	@ 0x54
 8026e04:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026e06:	bf08      	it	eq
 8026e08:	4613      	moveq	r3, r2
 8026e0a:	9306      	str	r3, [sp, #24]
 8026e0c:	e60d      	b.n	8026a2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8026e0e:	2800      	cmp	r0, #0
 8026e10:	f43f ae7d 	beq.w	8026b0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026e14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026e18:	9307      	str	r3, [sp, #28]
 8026e1a:	0e1b      	lsrs	r3, r3, #24
 8026e1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026e1e:	e676      	b.n	8026b0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8026e20:	7038      	strb	r0, [r7, #0]
 8026e22:	7079      	strb	r1, [r7, #1]
 8026e24:	e779      	b.n	8026d1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026e26:	f112 0901 	adds.w	r9, r2, #1
 8026e2a:	f53f af78 	bmi.w	8026d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026e2e:	454b      	cmp	r3, r9
 8026e30:	f6ff af75 	blt.w	8026d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026e34:	f11c 0901 	adds.w	r9, ip, #1
 8026e38:	f53f af71 	bmi.w	8026d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026e3c:	45ce      	cmp	lr, r9
 8026e3e:	f6ff af6e 	blt.w	8026d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026e42:	b21b      	sxth	r3, r3
 8026e44:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8026e48:	fa0f f28e 	sxth.w	r2, lr
 8026e4c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026e50:	9200      	str	r2, [sp, #0]
 8026e52:	4639      	mov	r1, r7
 8026e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026e56:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8026e58:	f7ff fca1 	bl	802679e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8026e5c:	e75f      	b.n	8026d1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8026e5e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026e60:	1429      	asrs	r1, r5, #16
 8026e62:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026e64:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026e68:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8026e6c:	1433      	asrs	r3, r6, #16
 8026e6e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026e72:	fb0c 1303 	mla	r3, ip, r3, r1
 8026e76:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026e78:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8026e7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026e80:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026e84:	2a00      	cmp	r2, #0
 8026e86:	f000 8129 	beq.w	80270dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8026e8a:	684c      	ldr	r4, [r1, #4]
 8026e8c:	940c      	str	r4, [sp, #48]	@ 0x30
 8026e8e:	0e24      	lsrs	r4, r4, #24
 8026e90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8026e92:	b198      	cbz	r0, 8026ebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8026e94:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8026e98:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026e9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8026ea0:	f10c 0c04 	add.w	ip, ip, #4
 8026ea4:	eb01 080c 	add.w	r8, r1, ip
 8026ea8:	f851 100c 	ldr.w	r1, [r1, ip]
 8026eac:	9108      	str	r1, [sp, #32]
 8026eae:	0e09      	lsrs	r1, r1, #24
 8026eb0:	9110      	str	r1, [sp, #64]	@ 0x40
 8026eb2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026eb6:	910d      	str	r1, [sp, #52]	@ 0x34
 8026eb8:	0e09      	lsrs	r1, r1, #24
 8026eba:	9114      	str	r1, [sp, #80]	@ 0x50
 8026ebc:	b292      	uxth	r2, r2
 8026ebe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026ec0:	b280      	uxth	r0, r0
 8026ec2:	fb02 f900 	mul.w	r9, r2, r0
 8026ec6:	0112      	lsls	r2, r2, #4
 8026ec8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026ecc:	eba2 0809 	sub.w	r8, r2, r9
 8026ed0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8026ed4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026ed6:	b280      	uxth	r0, r0
 8026ed8:	fa1f f888 	uxth.w	r8, r8
 8026edc:	1a09      	subs	r1, r1, r0
 8026ede:	fb08 f202 	mul.w	r2, r8, r2
 8026ee2:	b289      	uxth	r1, r1
 8026ee4:	fb01 220e 	mla	r2, r1, lr, r2
 8026ee8:	fb00 2204 	mla	r2, r0, r4, r2
 8026eec:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026eee:	fb09 2204 	mla	r2, r9, r4, r2
 8026ef2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026ef6:	2a00      	cmp	r2, #0
 8026ef8:	f000 80e8 	beq.w	80270cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8026efc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026f00:	d01b      	beq.n	8026f3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8026f02:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026f06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026f0a:	fb0e fa0a 	mul.w	sl, lr, sl
 8026f0e:	fb0e fe03 	mul.w	lr, lr, r3
 8026f12:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026f16:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026f1a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026f1e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026f22:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026f26:	4453      	add	r3, sl
 8026f28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f2c:	0a1b      	lsrs	r3, r3, #8
 8026f2e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026f32:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026f36:	ea43 030c 	orr.w	r3, r3, ip
 8026f3a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f3c:	2cff      	cmp	r4, #255	@ 0xff
 8026f3e:	d021      	beq.n	8026f84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8026f40:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026f42:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026f46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f48:	fb04 fc0c 	mul.w	ip, r4, ip
 8026f4c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026f4e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026f52:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026f56:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f58:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026f5c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f60:	fb04 fa0a 	mul.w	sl, r4, sl
 8026f64:	44e6      	add	lr, ip
 8026f66:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026f6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f72:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026f76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f7a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026f7e:	ea4e 040a 	orr.w	r4, lr, sl
 8026f82:	940c      	str	r4, [sp, #48]	@ 0x30
 8026f84:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026f86:	2cff      	cmp	r4, #255	@ 0xff
 8026f88:	d021      	beq.n	8026fce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8026f8a:	9c08      	ldr	r4, [sp, #32]
 8026f8c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026f90:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026f92:	fb04 fc0c 	mul.w	ip, r4, ip
 8026f96:	9c08      	ldr	r4, [sp, #32]
 8026f98:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026f9c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026f9e:	fb04 fa0e 	mul.w	sl, r4, lr
 8026fa2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026fa6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026faa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026fae:	44e6      	add	lr, ip
 8026fb0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026fb4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026fb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026fbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026fc0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026fc4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026fc8:	ea4e 040a 	orr.w	r4, lr, sl
 8026fcc:	9408      	str	r4, [sp, #32]
 8026fce:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026fd0:	2cff      	cmp	r4, #255	@ 0xff
 8026fd2:	d021      	beq.n	8027018 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8026fd4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026fd6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026fda:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026fdc:	fb04 fc0c 	mul.w	ip, r4, ip
 8026fe0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026fe2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8026fe6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026fea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026fec:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026ff0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026ff4:	fb04 fa0a 	mul.w	sl, r4, sl
 8026ff8:	44e6      	add	lr, ip
 8026ffa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026ffe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027002:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027006:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802700a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802700e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027012:	ea4e 040a 	orr.w	r4, lr, sl
 8027016:	940d      	str	r4, [sp, #52]	@ 0x34
 8027018:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802701a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802701e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027022:	2aff      	cmp	r2, #255	@ 0xff
 8027024:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8027028:	9c08      	ldr	r4, [sp, #32]
 802702a:	fb08 fc0c 	mul.w	ip, r8, ip
 802702e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027032:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027036:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027038:	fb00 cc0e 	mla	ip, r0, lr, ip
 802703c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8027040:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027042:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027046:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802704a:	fb08 f80e 	mul.w	r8, r8, lr
 802704e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027052:	fb01 8303 	mla	r3, r1, r3, r8
 8027056:	9908      	ldr	r1, [sp, #32]
 8027058:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802705c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027060:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8027062:	fb00 330a 	mla	r3, r0, sl, r3
 8027066:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 802706a:	fb09 3e0e 	mla	lr, r9, lr, r3
 802706e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027072:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027076:	ea4c 0c0e 	orr.w	ip, ip, lr
 802707a:	fa5f f08c 	uxtb.w	r0, ip
 802707e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8027082:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027086:	d032      	beq.n	80270ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8027088:	43d2      	mvns	r2, r2
 802708a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802708e:	b2d2      	uxtb	r2, r2
 8027090:	fb0e fe02 	mul.w	lr, lr, r2
 8027094:	f10e 0301 	add.w	r3, lr, #1
 8027098:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802709c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80270a0:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80270a4:	4350      	muls	r0, r2
 80270a6:	f807 3c03 	strb.w	r3, [r7, #-3]
 80270aa:	1c43      	adds	r3, r0, #1
 80270ac:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80270b0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80270b4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80270b8:	4353      	muls	r3, r2
 80270ba:	f807 1c02 	strb.w	r1, [r7, #-2]
 80270be:	1c5a      	adds	r2, r3, #1
 80270c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80270c4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80270c8:	f807 cc01 	strb.w	ip, [r7, #-1]
 80270cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80270ce:	3703      	adds	r7, #3
 80270d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80270d4:	441d      	add	r5, r3
 80270d6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80270d8:	441e      	add	r6, r3
 80270da:	e64e      	b.n	8026d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80270dc:	2800      	cmp	r0, #0
 80270de:	f43f aeed 	beq.w	8026ebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80270e2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80270e6:	9108      	str	r1, [sp, #32]
 80270e8:	0e09      	lsrs	r1, r1, #24
 80270ea:	9110      	str	r1, [sp, #64]	@ 0x40
 80270ec:	e6e6      	b.n	8026ebc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80270ee:	f807 0c03 	strb.w	r0, [r7, #-3]
 80270f2:	f807 1c02 	strb.w	r1, [r7, #-2]
 80270f6:	e7e7      	b.n	80270c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80270f8:	b019      	add	sp, #100	@ 0x64
 80270fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027100 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8027100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027104:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8027108:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802710c:	2c00      	cmp	r4, #0
 802710e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8027112:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8027116:	fb00 4e03 	mla	lr, r0, r3, r4
 802711a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802711e:	f2c0 80b8 	blt.w	8027292 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027122:	45a1      	cmp	r9, r4
 8027124:	f340 80b5 	ble.w	8027292 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027128:	2800      	cmp	r0, #0
 802712a:	f2c0 80b2 	blt.w	8027292 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802712e:	4580      	cmp	r8, r0
 8027130:	f340 80af 	ble.w	8027292 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8027134:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8027138:	f01e 0f01 	tst.w	lr, #1
 802713c:	5d56      	ldrb	r6, [r2, r5]
 802713e:	bf0c      	ite	eq
 8027140:	f006 060f 	andeq.w	r6, r6, #15
 8027144:	1136      	asrne	r6, r6, #4
 8027146:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802714a:	b2f6      	uxtb	r6, r6
 802714c:	f114 0a01 	adds.w	sl, r4, #1
 8027150:	f100 80a1 	bmi.w	8027296 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027154:	45d1      	cmp	r9, sl
 8027156:	f340 809e 	ble.w	8027296 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802715a:	2800      	cmp	r0, #0
 802715c:	f2c0 809b 	blt.w	8027296 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027160:	4580      	cmp	r8, r0
 8027162:	f340 8098 	ble.w	8027296 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8027166:	2f00      	cmp	r7, #0
 8027168:	f000 8097 	beq.w	802729a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 802716c:	f10e 0b01 	add.w	fp, lr, #1
 8027170:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027174:	f01b 0f01 	tst.w	fp, #1
 8027178:	5d55      	ldrb	r5, [r2, r5]
 802717a:	bf0c      	ite	eq
 802717c:	f005 050f 	andeq.w	r5, r5, #15
 8027180:	112d      	asrne	r5, r5, #4
 8027182:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027186:	b2ed      	uxtb	r5, r5
 8027188:	f1bc 0f00 	cmp.w	ip, #0
 802718c:	f000 8089 	beq.w	80272a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8027190:	2c00      	cmp	r4, #0
 8027192:	f100 0001 	add.w	r0, r0, #1
 8027196:	f2c0 8082 	blt.w	802729e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802719a:	45a1      	cmp	r9, r4
 802719c:	dd7f      	ble.n	802729e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802719e:	2800      	cmp	r0, #0
 80271a0:	db7d      	blt.n	802729e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80271a2:	4580      	cmp	r8, r0
 80271a4:	dd7b      	ble.n	802729e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80271a6:	eb03 0b0e 	add.w	fp, r3, lr
 80271aa:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80271ae:	f01b 0f01 	tst.w	fp, #1
 80271b2:	5d14      	ldrb	r4, [r2, r4]
 80271b4:	bf0c      	ite	eq
 80271b6:	f004 040f 	andeq.w	r4, r4, #15
 80271ba:	1124      	asrne	r4, r4, #4
 80271bc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80271c0:	b2e4      	uxtb	r4, r4
 80271c2:	f1ba 0f00 	cmp.w	sl, #0
 80271c6:	db6f      	blt.n	80272a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80271c8:	45d1      	cmp	r9, sl
 80271ca:	dd6d      	ble.n	80272a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80271cc:	2800      	cmp	r0, #0
 80271ce:	db6b      	blt.n	80272a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80271d0:	4580      	cmp	r8, r0
 80271d2:	dd69      	ble.n	80272a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80271d4:	2f00      	cmp	r7, #0
 80271d6:	d069      	beq.n	80272ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80271d8:	3301      	adds	r3, #1
 80271da:	449e      	add	lr, r3
 80271dc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80271e0:	f01e 0f01 	tst.w	lr, #1
 80271e4:	5cd0      	ldrb	r0, [r2, r3]
 80271e6:	bf0c      	ite	eq
 80271e8:	f000 000f 	andeq.w	r0, r0, #15
 80271ec:	1100      	asrne	r0, r0, #4
 80271ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80271f2:	b2c3      	uxtb	r3, r0
 80271f4:	b2ba      	uxth	r2, r7
 80271f6:	fa1f fc8c 	uxth.w	ip, ip
 80271fa:	fb02 f00c 	mul.w	r0, r2, ip
 80271fe:	0112      	lsls	r2, r2, #4
 8027200:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027204:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8027208:	1a12      	subs	r2, r2, r0
 802720a:	fa1f fc8c 	uxth.w	ip, ip
 802720e:	b292      	uxth	r2, r2
 8027210:	eba7 070c 	sub.w	r7, r7, ip
 8027214:	436a      	muls	r2, r5
 8027216:	b2bf      	uxth	r7, r7
 8027218:	fb06 2207 	mla	r2, r6, r7, r2
 802721c:	fb0c 2404 	mla	r4, ip, r4, r2
 8027220:	fb00 4303 	mla	r3, r0, r3, r4
 8027224:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027228:	b38b      	cbz	r3, 802728e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802722a:	4a21      	ldr	r2, [pc, #132]	@ (80272b0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 802722c:	6814      	ldr	r4, [r2, #0]
 802722e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8027232:	b2e5      	uxtb	r5, r4
 8027234:	4353      	muls	r3, r2
 8027236:	1c5a      	adds	r2, r3, #1
 8027238:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802723c:	1212      	asrs	r2, r2, #8
 802723e:	b290      	uxth	r0, r2
 8027240:	43d2      	mvns	r2, r2
 8027242:	fb15 f500 	smulbb	r5, r5, r0
 8027246:	b2d3      	uxtb	r3, r2
 8027248:	780a      	ldrb	r2, [r1, #0]
 802724a:	fb02 5203 	mla	r2, r2, r3, r5
 802724e:	b292      	uxth	r2, r2
 8027250:	1c55      	adds	r5, r2, #1
 8027252:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027256:	784d      	ldrb	r5, [r1, #1]
 8027258:	fb15 f503 	smulbb	r5, r5, r3
 802725c:	1212      	asrs	r2, r2, #8
 802725e:	700a      	strb	r2, [r1, #0]
 8027260:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8027264:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027268:	fb02 5200 	mla	r2, r2, r0, r5
 802726c:	b292      	uxth	r2, r2
 802726e:	1c55      	adds	r5, r2, #1
 8027270:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027274:	1212      	asrs	r2, r2, #8
 8027276:	704a      	strb	r2, [r1, #1]
 8027278:	788a      	ldrb	r2, [r1, #2]
 802727a:	fb12 f303 	smulbb	r3, r2, r3
 802727e:	fb04 3300 	mla	r3, r4, r0, r3
 8027282:	b29b      	uxth	r3, r3
 8027284:	1c5a      	adds	r2, r3, #1
 8027286:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802728a:	121b      	asrs	r3, r3, #8
 802728c:	708b      	strb	r3, [r1, #2]
 802728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027292:	2600      	movs	r6, #0
 8027294:	e75a      	b.n	802714c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8027296:	2500      	movs	r5, #0
 8027298:	e776      	b.n	8027188 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802729a:	463d      	mov	r5, r7
 802729c:	e774      	b.n	8027188 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802729e:	2400      	movs	r4, #0
 80272a0:	e78f      	b.n	80271c2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80272a2:	4663      	mov	r3, ip
 80272a4:	4664      	mov	r4, ip
 80272a6:	e7a5      	b.n	80271f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80272a8:	2300      	movs	r3, #0
 80272aa:	e7a3      	b.n	80271f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80272ac:	463b      	mov	r3, r7
 80272ae:	e7a1      	b.n	80271f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80272b0:	240285c4 	.word	0x240285c4

080272b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80272b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272b8:	b097      	sub	sp, #92	@ 0x5c
 80272ba:	9214      	str	r2, [sp, #80]	@ 0x50
 80272bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80272be:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80272c0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80272c4:	9015      	str	r0, [sp, #84]	@ 0x54
 80272c6:	910c      	str	r1, [sp, #48]	@ 0x30
 80272c8:	6850      	ldr	r0, [r2, #4]
 80272ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80272cc:	6812      	ldr	r2, [r2, #0]
 80272ce:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80272d2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 80272d6:	fb00 1303 	mla	r3, r0, r3, r1
 80272da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80272de:	eb02 0a03 	add.w	sl, r2, r3
 80272e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80272e4:	689b      	ldr	r3, [r3, #8]
 80272e6:	3301      	adds	r3, #1
 80272e8:	f023 0301 	bic.w	r3, r3, #1
 80272ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80272ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80272f0:	681f      	ldr	r7, [r3, #0]
 80272f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80272f4:	2b00      	cmp	r3, #0
 80272f6:	dc03      	bgt.n	8027300 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80272f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	f340 8247 	ble.w	802778e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027300:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027302:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027306:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802730a:	1e48      	subs	r0, r1, #1
 802730c:	f102 3cff 	add.w	ip, r2, #4294967295
 8027310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027312:	2b00      	cmp	r3, #0
 8027314:	f340 80e5 	ble.w	80274e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027318:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802731c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027320:	d406      	bmi.n	8027330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027322:	4586      	cmp	lr, r0
 8027324:	da04      	bge.n	8027330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027326:	2b00      	cmp	r3, #0
 8027328:	db02      	blt.n	8027330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802732a:	4563      	cmp	r3, ip
 802732c:	f2c0 80da 	blt.w	80274e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027330:	f11e 0e01 	adds.w	lr, lr, #1
 8027334:	f100 80cb 	bmi.w	80274ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027338:	4571      	cmp	r1, lr
 802733a:	f2c0 80c8 	blt.w	80274ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802733e:	3301      	adds	r3, #1
 8027340:	f100 80c5 	bmi.w	80274ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8027344:	429a      	cmp	r2, r3
 8027346:	f2c0 80c2 	blt.w	80274ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802734a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802734c:	46d0      	mov	r8, sl
 802734e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8027352:	930d      	str	r3, [sp, #52]	@ 0x34
 8027354:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027356:	2b00      	cmp	r3, #0
 8027358:	f340 80e3 	ble.w	8027522 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802735c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802735e:	1430      	asrs	r0, r6, #16
 8027360:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027364:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027368:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802736c:	142b      	asrs	r3, r5, #16
 802736e:	f100 812e 	bmi.w	80275ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027372:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027376:	455b      	cmp	r3, fp
 8027378:	f280 8129 	bge.w	80275ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802737c:	2800      	cmp	r0, #0
 802737e:	f2c0 8126 	blt.w	80275ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8027382:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027386:	4558      	cmp	r0, fp
 8027388:	f280 8121 	bge.w	80275ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802738c:	fb00 3309 	mla	r3, r0, r9, r3
 8027390:	0858      	lsrs	r0, r3, #1
 8027392:	07dc      	lsls	r4, r3, #31
 8027394:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027398:	bf54      	ite	pl
 802739a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802739e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80273a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80273a6:	fa5f fc8c 	uxtb.w	ip, ip
 80273aa:	2a00      	cmp	r2, #0
 80273ac:	f000 80fe 	beq.w	80275ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80273b0:	1c58      	adds	r0, r3, #1
 80273b2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80273b6:	07c0      	lsls	r0, r0, #31
 80273b8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80273bc:	bf54      	ite	pl
 80273be:	f00e 0e0f 	andpl.w	lr, lr, #15
 80273c2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80273c6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80273ca:	fa5f f08e 	uxtb.w	r0, lr
 80273ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80273d0:	b1d9      	cbz	r1, 802740a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80273d2:	444b      	add	r3, r9
 80273d4:	0858      	lsrs	r0, r3, #1
 80273d6:	07dc      	lsls	r4, r3, #31
 80273d8:	f103 0301 	add.w	r3, r3, #1
 80273dc:	5c38      	ldrb	r0, [r7, r0]
 80273de:	bf54      	ite	pl
 80273e0:	f000 000f 	andpl.w	r0, r0, #15
 80273e4:	1100      	asrmi	r0, r0, #4
 80273e6:	07dc      	lsls	r4, r3, #31
 80273e8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80273ec:	b2c0      	uxtb	r0, r0
 80273ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80273f0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80273f4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80273f8:	bf54      	ite	pl
 80273fa:	f00e 030f 	andpl.w	r3, lr, #15
 80273fe:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027402:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027406:	b2db      	uxtb	r3, r3
 8027408:	9311      	str	r3, [sp, #68]	@ 0x44
 802740a:	b292      	uxth	r2, r2
 802740c:	b289      	uxth	r1, r1
 802740e:	0113      	lsls	r3, r2, #4
 8027410:	fb02 f001 	mul.w	r0, r2, r1
 8027414:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027416:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802741a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802741e:	1a1b      	subs	r3, r3, r0
 8027420:	b289      	uxth	r1, r1
 8027422:	b29b      	uxth	r3, r3
 8027424:	ebae 0e01 	sub.w	lr, lr, r1
 8027428:	4353      	muls	r3, r2
 802742a:	fa1f fe8e 	uxth.w	lr, lr
 802742e:	fb0c 320e 	mla	r2, ip, lr, r3
 8027432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027434:	fb01 2203 	mla	r2, r1, r3, r2
 8027438:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802743a:	fb00 2203 	mla	r2, r0, r3, r2
 802743e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027442:	2a00      	cmp	r2, #0
 8027444:	d039      	beq.n	80274ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027446:	4bc7      	ldr	r3, [pc, #796]	@ (8027764 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027448:	6819      	ldr	r1, [r3, #0]
 802744a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802744c:	fa5f fc81 	uxtb.w	ip, r1
 8027450:	435a      	muls	r2, r3
 8027452:	1c53      	adds	r3, r2, #1
 8027454:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027458:	1212      	asrs	r2, r2, #8
 802745a:	b290      	uxth	r0, r2
 802745c:	43d2      	mvns	r2, r2
 802745e:	fb1c fc00 	smulbb	ip, ip, r0
 8027462:	b2d3      	uxtb	r3, r2
 8027464:	f898 2000 	ldrb.w	r2, [r8]
 8027468:	fb02 c203 	mla	r2, r2, r3, ip
 802746c:	b292      	uxth	r2, r2
 802746e:	f102 0c01 	add.w	ip, r2, #1
 8027472:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027476:	f898 c001 	ldrb.w	ip, [r8, #1]
 802747a:	fb1c fc03 	smulbb	ip, ip, r3
 802747e:	1212      	asrs	r2, r2, #8
 8027480:	f888 2000 	strb.w	r2, [r8]
 8027484:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8027488:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802748c:	fb02 c200 	mla	r2, r2, r0, ip
 8027490:	b292      	uxth	r2, r2
 8027492:	f102 0c01 	add.w	ip, r2, #1
 8027496:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802749a:	1212      	asrs	r2, r2, #8
 802749c:	f888 2001 	strb.w	r2, [r8, #1]
 80274a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80274a4:	fb12 f303 	smulbb	r3, r2, r3
 80274a8:	fb01 3300 	mla	r3, r1, r0, r3
 80274ac:	b29b      	uxth	r3, r3
 80274ae:	1c5a      	adds	r2, r3, #1
 80274b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80274b4:	121b      	asrs	r3, r3, #8
 80274b6:	f888 3002 	strb.w	r3, [r8, #2]
 80274ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80274bc:	f108 0803 	add.w	r8, r8, #3
 80274c0:	441d      	add	r5, r3
 80274c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274c4:	441e      	add	r6, r3
 80274c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80274c8:	3b01      	subs	r3, #1
 80274ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80274cc:	e742      	b.n	8027354 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80274ce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80274d0:	f10a 0a03 	add.w	sl, sl, #3
 80274d4:	441d      	add	r5, r3
 80274d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274d8:	441e      	add	r6, r3
 80274da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274dc:	3b01      	subs	r3, #1
 80274de:	9309      	str	r3, [sp, #36]	@ 0x24
 80274e0:	e716      	b.n	8027310 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80274e2:	d024      	beq.n	802752e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80274e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80274e6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80274e8:	3b01      	subs	r3, #1
 80274ea:	fb00 5003 	mla	r0, r0, r3, r5
 80274ee:	1400      	asrs	r0, r0, #16
 80274f0:	f53f af2b 	bmi.w	802734a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80274f4:	3901      	subs	r1, #1
 80274f6:	4288      	cmp	r0, r1
 80274f8:	f6bf af27 	bge.w	802734a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80274fc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80274fe:	fb01 6303 	mla	r3, r1, r3, r6
 8027502:	141b      	asrs	r3, r3, #16
 8027504:	f53f af21 	bmi.w	802734a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027508:	3a01      	subs	r2, #1
 802750a:	4293      	cmp	r3, r2
 802750c:	f6bf af1d 	bge.w	802734a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027510:	f10a 0e03 	add.w	lr, sl, #3
 8027514:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8027518:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802751c:	f1b8 0f00 	cmp.w	r8, #0
 8027520:	dc76      	bgt.n	8027610 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8027522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027524:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027528:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802752c:	44a2      	add	sl, r4
 802752e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027530:	2b00      	cmp	r3, #0
 8027532:	f340 812c 	ble.w	802778e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8027536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802753a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802753c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027540:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027544:	eef0 6a62 	vmov.f32	s13, s5
 8027548:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802754c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027550:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027554:	ee16 5a90 	vmov	r5, s13
 8027558:	eef0 6a43 	vmov.f32	s13, s6
 802755c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027560:	ee16 6a90 	vmov	r6, s13
 8027564:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027568:	ee61 7a27 	vmul.f32	s15, s2, s15
 802756c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027570:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027574:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027578:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802757c:	ee12 2a90 	vmov	r2, s5
 8027580:	eef0 2a47 	vmov.f32	s5, s14
 8027584:	fb92 f3f3 	sdiv	r3, r2, r3
 8027588:	ee13 2a10 	vmov	r2, s6
 802758c:	9323      	str	r3, [sp, #140]	@ 0x8c
 802758e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027590:	eeb0 3a67 	vmov.f32	s6, s15
 8027594:	fb92 f3f3 	sdiv	r3, r2, r3
 8027598:	9324      	str	r3, [sp, #144]	@ 0x90
 802759a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802759c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802759e:	3b01      	subs	r3, #1
 80275a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80275a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80275a4:	bf08      	it	eq
 80275a6:	4613      	moveq	r3, r2
 80275a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80275aa:	e6a2      	b.n	80272f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80275ac:	2900      	cmp	r1, #0
 80275ae:	f43f af2c 	beq.w	802740a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80275b2:	eb09 0003 	add.w	r0, r9, r3
 80275b6:	0843      	lsrs	r3, r0, #1
 80275b8:	07c0      	lsls	r0, r0, #31
 80275ba:	5cfb      	ldrb	r3, [r7, r3]
 80275bc:	bf54      	ite	pl
 80275be:	f003 030f 	andpl.w	r3, r3, #15
 80275c2:	111b      	asrmi	r3, r3, #4
 80275c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80275c8:	b2db      	uxtb	r3, r3
 80275ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80275cc:	e71d      	b.n	802740a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80275ce:	f113 0b01 	adds.w	fp, r3, #1
 80275d2:	f53f af72 	bmi.w	80274ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80275d6:	45dc      	cmp	ip, fp
 80275d8:	f6ff af6f 	blt.w	80274ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80275dc:	f110 0b01 	adds.w	fp, r0, #1
 80275e0:	f53f af6b 	bmi.w	80274ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80275e4:	45de      	cmp	lr, fp
 80275e6:	f6ff af68 	blt.w	80274ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80275ea:	9302      	str	r3, [sp, #8]
 80275ec:	fa0f f38e 	sxth.w	r3, lr
 80275f0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80275f2:	9301      	str	r3, [sp, #4]
 80275f4:	fa0f f38c 	sxth.w	r3, ip
 80275f8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80275fc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027600:	9300      	str	r3, [sp, #0]
 8027602:	463a      	mov	r2, r7
 8027604:	464b      	mov	r3, r9
 8027606:	4641      	mov	r1, r8
 8027608:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802760a:	f7ff fd79 	bl	8027100 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802760e:	e754      	b.n	80274ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8027610:	142a      	asrs	r2, r5, #16
 8027612:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027616:	1433      	asrs	r3, r6, #16
 8027618:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802761c:	fb09 2303 	mla	r3, r9, r3, r2
 8027620:	085a      	lsrs	r2, r3, #1
 8027622:	07dc      	lsls	r4, r3, #31
 8027624:	5cba      	ldrb	r2, [r7, r2]
 8027626:	bf54      	ite	pl
 8027628:	f002 020f 	andpl.w	r2, r2, #15
 802762c:	1112      	asrmi	r2, r2, #4
 802762e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027632:	b2d2      	uxtb	r2, r2
 8027634:	2900      	cmp	r1, #0
 8027636:	f000 8097 	beq.w	8027768 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802763a:	f103 0b01 	add.w	fp, r3, #1
 802763e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8027642:	f01b 0f01 	tst.w	fp, #1
 8027646:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802764a:	bf0c      	ite	eq
 802764c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027650:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027654:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027658:	fa5f f48c 	uxtb.w	r4, ip
 802765c:	9412      	str	r4, [sp, #72]	@ 0x48
 802765e:	b300      	cbz	r0, 80276a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027660:	444b      	add	r3, r9
 8027662:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027666:	07dc      	lsls	r4, r3, #31
 8027668:	f103 0301 	add.w	r3, r3, #1
 802766c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027670:	bf54      	ite	pl
 8027672:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027676:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802767a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802767e:	fa5f f48c 	uxtb.w	r4, ip
 8027682:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027686:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027688:	07dc      	lsls	r4, r3, #31
 802768a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802768e:	bf54      	ite	pl
 8027690:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027694:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027698:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802769c:	fa5f f38c 	uxtb.w	r3, ip
 80276a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80276a2:	b289      	uxth	r1, r1
 80276a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80276a6:	b280      	uxth	r0, r0
 80276a8:	fb01 f300 	mul.w	r3, r1, r0
 80276ac:	0109      	lsls	r1, r1, #4
 80276ae:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80276b2:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 80276b6:	1ac9      	subs	r1, r1, r3
 80276b8:	b280      	uxth	r0, r0
 80276ba:	b289      	uxth	r1, r1
 80276bc:	ebac 0c00 	sub.w	ip, ip, r0
 80276c0:	4361      	muls	r1, r4
 80276c2:	fa1f fc8c 	uxth.w	ip, ip
 80276c6:	fb02 120c 	mla	r2, r2, ip, r1
 80276ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80276cc:	fb00 2001 	mla	r0, r0, r1, r2
 80276d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80276d2:	fb03 0302 	mla	r3, r3, r2, r0
 80276d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80276da:	2b00      	cmp	r3, #0
 80276dc:	d039      	beq.n	8027752 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80276de:	4a21      	ldr	r2, [pc, #132]	@ (8027764 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80276e0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80276e4:	6810      	ldr	r0, [r2, #0]
 80276e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80276e8:	fa5f fc80 	uxtb.w	ip, r0
 80276ec:	4353      	muls	r3, r2
 80276ee:	1c5a      	adds	r2, r3, #1
 80276f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80276f4:	121b      	asrs	r3, r3, #8
 80276f6:	b29a      	uxth	r2, r3
 80276f8:	43db      	mvns	r3, r3
 80276fa:	fb1c fc02 	smulbb	ip, ip, r2
 80276fe:	b2db      	uxtb	r3, r3
 8027700:	fb01 c103 	mla	r1, r1, r3, ip
 8027704:	b289      	uxth	r1, r1
 8027706:	f101 0c01 	add.w	ip, r1, #1
 802770a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802770e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8027712:	fb1c fc03 	smulbb	ip, ip, r3
 8027716:	1209      	asrs	r1, r1, #8
 8027718:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802771c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8027720:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8027724:	fb01 c102 	mla	r1, r1, r2, ip
 8027728:	b289      	uxth	r1, r1
 802772a:	f101 0c01 	add.w	ip, r1, #1
 802772e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027732:	1209      	asrs	r1, r1, #8
 8027734:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8027738:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802773c:	fb11 f303 	smulbb	r3, r1, r3
 8027740:	fb00 3002 	mla	r0, r0, r2, r3
 8027744:	b280      	uxth	r0, r0
 8027746:	1c42      	adds	r2, r0, #1
 8027748:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802774c:	1200      	asrs	r0, r0, #8
 802774e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8027752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027754:	f10e 0e03 	add.w	lr, lr, #3
 8027758:	f108 38ff 	add.w	r8, r8, #4294967295
 802775c:	441d      	add	r5, r3
 802775e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027760:	441e      	add	r6, r3
 8027762:	e6db      	b.n	802751c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8027764:	240285c4 	.word	0x240285c4
 8027768:	2800      	cmp	r0, #0
 802776a:	d09a      	beq.n	80276a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802776c:	444b      	add	r3, r9
 802776e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027772:	07db      	lsls	r3, r3, #31
 8027774:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027778:	bf54      	ite	pl
 802777a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802777e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027782:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027786:	fa5f f38c 	uxtb.w	r3, ip
 802778a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802778c:	e789      	b.n	80276a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802778e:	b017      	add	sp, #92	@ 0x5c
 8027790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027794 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8027794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027798:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 802779c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80277a0:	2d00      	cmp	r5, #0
 80277a2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80277a6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80277aa:	fb04 5e03 	mla	lr, r4, r3, r5
 80277ae:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80277b2:	f2c0 80b1 	blt.w	8027918 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80277b6:	45a9      	cmp	r9, r5
 80277b8:	f340 80ae 	ble.w	8027918 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80277bc:	2c00      	cmp	r4, #0
 80277be:	f2c0 80ab 	blt.w	8027918 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80277c2:	45a0      	cmp	r8, r4
 80277c4:	f340 80a8 	ble.w	8027918 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80277c8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80277cc:	f01e 0f01 	tst.w	lr, #1
 80277d0:	5d97      	ldrb	r7, [r2, r6]
 80277d2:	bf0c      	ite	eq
 80277d4:	f007 070f 	andeq.w	r7, r7, #15
 80277d8:	113f      	asrne	r7, r7, #4
 80277da:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 80277de:	b2ff      	uxtb	r7, r7
 80277e0:	f115 0a01 	adds.w	sl, r5, #1
 80277e4:	f100 809a 	bmi.w	802791c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80277e8:	45d1      	cmp	r9, sl
 80277ea:	f340 8097 	ble.w	802791c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80277ee:	2c00      	cmp	r4, #0
 80277f0:	f2c0 8094 	blt.w	802791c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80277f4:	45a0      	cmp	r8, r4
 80277f6:	f340 8091 	ble.w	802791c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80277fa:	2800      	cmp	r0, #0
 80277fc:	f000 8090 	beq.w	8027920 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8027800:	f10e 0b01 	add.w	fp, lr, #1
 8027804:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8027808:	f01b 0f01 	tst.w	fp, #1
 802780c:	5d96      	ldrb	r6, [r2, r6]
 802780e:	bf0c      	ite	eq
 8027810:	f006 060f 	andeq.w	r6, r6, #15
 8027814:	1136      	asrne	r6, r6, #4
 8027816:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802781a:	b2f6      	uxtb	r6, r6
 802781c:	f1bc 0f00 	cmp.w	ip, #0
 8027820:	f000 8082 	beq.w	8027928 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8027824:	2d00      	cmp	r5, #0
 8027826:	f104 0401 	add.w	r4, r4, #1
 802782a:	db7b      	blt.n	8027924 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802782c:	45a9      	cmp	r9, r5
 802782e:	dd79      	ble.n	8027924 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027830:	2c00      	cmp	r4, #0
 8027832:	db77      	blt.n	8027924 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027834:	45a0      	cmp	r8, r4
 8027836:	dd75      	ble.n	8027924 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8027838:	eb03 0b0e 	add.w	fp, r3, lr
 802783c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8027840:	f01b 0f01 	tst.w	fp, #1
 8027844:	5d55      	ldrb	r5, [r2, r5]
 8027846:	bf0c      	ite	eq
 8027848:	f005 050f 	andeq.w	r5, r5, #15
 802784c:	112d      	asrne	r5, r5, #4
 802784e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027852:	b2ed      	uxtb	r5, r5
 8027854:	f1ba 0f00 	cmp.w	sl, #0
 8027858:	db69      	blt.n	802792e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802785a:	45d1      	cmp	r9, sl
 802785c:	dd67      	ble.n	802792e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802785e:	2c00      	cmp	r4, #0
 8027860:	db65      	blt.n	802792e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027862:	45a0      	cmp	r8, r4
 8027864:	dd63      	ble.n	802792e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8027866:	2800      	cmp	r0, #0
 8027868:	d063      	beq.n	8027932 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802786a:	3301      	adds	r3, #1
 802786c:	449e      	add	lr, r3
 802786e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027872:	f01e 0f01 	tst.w	lr, #1
 8027876:	5cd4      	ldrb	r4, [r2, r3]
 8027878:	bf0c      	ite	eq
 802787a:	f004 040f 	andeq.w	r4, r4, #15
 802787e:	1124      	asrne	r4, r4, #4
 8027880:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027884:	b2e3      	uxtb	r3, r4
 8027886:	b282      	uxth	r2, r0
 8027888:	fa1f fc8c 	uxth.w	ip, ip
 802788c:	fb02 f40c 	mul.w	r4, r2, ip
 8027890:	0112      	lsls	r2, r2, #4
 8027892:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8027896:	fa1f f08c 	uxth.w	r0, ip
 802789a:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802789e:	1b12      	subs	r2, r2, r4
 80278a0:	ebac 0c00 	sub.w	ip, ip, r0
 80278a4:	b292      	uxth	r2, r2
 80278a6:	fa1f fc8c 	uxth.w	ip, ip
 80278aa:	4372      	muls	r2, r6
 80278ac:	fb07 220c 	mla	r2, r7, ip, r2
 80278b0:	fb00 2005 	mla	r0, r0, r5, r2
 80278b4:	fb04 0303 	mla	r3, r4, r3, r0
 80278b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80278bc:	b353      	cbz	r3, 8027914 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80278be:	4a1e      	ldr	r2, [pc, #120]	@ (8027938 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80278c0:	7808      	ldrb	r0, [r1, #0]
 80278c2:	6814      	ldr	r4, [r2, #0]
 80278c4:	b29a      	uxth	r2, r3
 80278c6:	43db      	mvns	r3, r3
 80278c8:	b2e5      	uxtb	r5, r4
 80278ca:	b2db      	uxtb	r3, r3
 80278cc:	fb15 f502 	smulbb	r5, r5, r2
 80278d0:	fb00 5003 	mla	r0, r0, r3, r5
 80278d4:	b280      	uxth	r0, r0
 80278d6:	1c45      	adds	r5, r0, #1
 80278d8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80278dc:	784d      	ldrb	r5, [r1, #1]
 80278de:	fb15 f503 	smulbb	r5, r5, r3
 80278e2:	1200      	asrs	r0, r0, #8
 80278e4:	7008      	strb	r0, [r1, #0]
 80278e6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80278ea:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80278ee:	fb00 5002 	mla	r0, r0, r2, r5
 80278f2:	b280      	uxth	r0, r0
 80278f4:	1c45      	adds	r5, r0, #1
 80278f6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80278fa:	1200      	asrs	r0, r0, #8
 80278fc:	7048      	strb	r0, [r1, #1]
 80278fe:	7888      	ldrb	r0, [r1, #2]
 8027900:	fb10 f303 	smulbb	r3, r0, r3
 8027904:	fb04 3202 	mla	r2, r4, r2, r3
 8027908:	b292      	uxth	r2, r2
 802790a:	1c53      	adds	r3, r2, #1
 802790c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027910:	1212      	asrs	r2, r2, #8
 8027912:	708a      	strb	r2, [r1, #2]
 8027914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027918:	2700      	movs	r7, #0
 802791a:	e761      	b.n	80277e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 802791c:	2600      	movs	r6, #0
 802791e:	e77d      	b.n	802781c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027920:	4606      	mov	r6, r0
 8027922:	e77b      	b.n	802781c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8027924:	2500      	movs	r5, #0
 8027926:	e795      	b.n	8027854 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8027928:	4663      	mov	r3, ip
 802792a:	4665      	mov	r5, ip
 802792c:	e7ab      	b.n	8027886 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802792e:	2300      	movs	r3, #0
 8027930:	e7a9      	b.n	8027886 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027932:	4603      	mov	r3, r0
 8027934:	e7a7      	b.n	8027886 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8027936:	bf00      	nop
 8027938:	240285c4 	.word	0x240285c4

0802793c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027940:	b093      	sub	sp, #76	@ 0x4c
 8027942:	461c      	mov	r4, r3
 8027944:	920c      	str	r2, [sp, #48]	@ 0x30
 8027946:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8027948:	9011      	str	r0, [sp, #68]	@ 0x44
 802794a:	9107      	str	r1, [sp, #28]
 802794c:	6850      	ldr	r0, [r2, #4]
 802794e:	6812      	ldr	r2, [r2, #0]
 8027950:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8027954:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8027958:	fb00 1303 	mla	r3, r0, r3, r1
 802795c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027960:	eb02 0b03 	add.w	fp, r2, r3
 8027964:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027966:	689b      	ldr	r3, [r3, #8]
 8027968:	3301      	adds	r3, #1
 802796a:	f023 0301 	bic.w	r3, r3, #1
 802796e:	9309      	str	r3, [sp, #36]	@ 0x24
 8027970:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027972:	f8d3 8000 	ldr.w	r8, [r3]
 8027976:	9b07      	ldr	r3, [sp, #28]
 8027978:	2b00      	cmp	r3, #0
 802797a:	dc03      	bgt.n	8027984 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802797c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802797e:	2b00      	cmp	r3, #0
 8027980:	f340 822b 	ble.w	8027dda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027984:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027986:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802798a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802798e:	1e48      	subs	r0, r1, #1
 8027990:	1e57      	subs	r7, r2, #1
 8027992:	2c00      	cmp	r4, #0
 8027994:	f340 80d7 	ble.w	8027b46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8027998:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802799c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80279a0:	d406      	bmi.n	80279b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80279a2:	4584      	cmp	ip, r0
 80279a4:	da04      	bge.n	80279b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80279a6:	2b00      	cmp	r3, #0
 80279a8:	db02      	blt.n	80279b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80279aa:	42bb      	cmp	r3, r7
 80279ac:	f2c0 80cc 	blt.w	8027b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80279b0:	f11c 0c01 	adds.w	ip, ip, #1
 80279b4:	f100 80bf 	bmi.w	8027b36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80279b8:	4561      	cmp	r1, ip
 80279ba:	f2c0 80bc 	blt.w	8027b36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80279be:	3301      	adds	r3, #1
 80279c0:	f100 80b9 	bmi.w	8027b36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80279c4:	429a      	cmp	r2, r3
 80279c6:	f2c0 80b6 	blt.w	8027b36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80279ca:	46a2      	mov	sl, r4
 80279cc:	465f      	mov	r7, fp
 80279ce:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80279d2:	f1ba 0f00 	cmp.w	sl, #0
 80279d6:	f340 80d4 	ble.w	8027b82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80279da:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80279de:	1430      	asrs	r0, r6, #16
 80279e0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80279e4:	9308      	str	r3, [sp, #32]
 80279e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80279e8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80279ec:	142b      	asrs	r3, r5, #16
 80279ee:	f100 8124 	bmi.w	8027c3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80279f2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80279f6:	4293      	cmp	r3, r2
 80279f8:	f280 811f 	bge.w	8027c3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80279fc:	2800      	cmp	r0, #0
 80279fe:	f2c0 811c 	blt.w	8027c3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027a02:	f10e 32ff 	add.w	r2, lr, #4294967295
 8027a06:	4290      	cmp	r0, r2
 8027a08:	f280 8117 	bge.w	8027c3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027a0c:	fb00 3309 	mla	r3, r0, r9, r3
 8027a10:	0858      	lsrs	r0, r3, #1
 8027a12:	07da      	lsls	r2, r3, #31
 8027a14:	9a08      	ldr	r2, [sp, #32]
 8027a16:	f818 c000 	ldrb.w	ip, [r8, r0]
 8027a1a:	bf54      	ite	pl
 8027a1c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027a20:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027a24:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027a28:	fa5f fc8c 	uxtb.w	ip, ip
 8027a2c:	2a00      	cmp	r2, #0
 8027a2e:	f000 80ed 	beq.w	8027c0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8027a32:	1c58      	adds	r0, r3, #1
 8027a34:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027a38:	07c0      	lsls	r0, r0, #31
 8027a3a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8027a3e:	bf54      	ite	pl
 8027a40:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027a44:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027a48:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027a4c:	fa5f fe8e 	uxtb.w	lr, lr
 8027a50:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8027a54:	b1c9      	cbz	r1, 8027a8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027a56:	444b      	add	r3, r9
 8027a58:	0858      	lsrs	r0, r3, #1
 8027a5a:	07da      	lsls	r2, r3, #31
 8027a5c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8027a60:	bf54      	ite	pl
 8027a62:	f000 000f 	andpl.w	r0, r0, #15
 8027a66:	1100      	asrmi	r0, r0, #4
 8027a68:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027a6c:	b2c0      	uxtb	r0, r0
 8027a6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8027a70:	1c58      	adds	r0, r3, #1
 8027a72:	0843      	lsrs	r3, r0, #1
 8027a74:	07c2      	lsls	r2, r0, #31
 8027a76:	f818 3003 	ldrb.w	r3, [r8, r3]
 8027a7a:	bf54      	ite	pl
 8027a7c:	f003 030f 	andpl.w	r3, r3, #15
 8027a80:	111b      	asrmi	r3, r3, #4
 8027a82:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027a86:	b2db      	uxtb	r3, r3
 8027a88:	930e      	str	r3, [sp, #56]	@ 0x38
 8027a8a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027a8e:	b289      	uxth	r1, r1
 8027a90:	fb02 f301 	mul.w	r3, r2, r1
 8027a94:	0112      	lsls	r2, r2, #4
 8027a96:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027a9a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8027a9e:	1ad2      	subs	r2, r2, r3
 8027aa0:	b289      	uxth	r1, r1
 8027aa2:	b292      	uxth	r2, r2
 8027aa4:	1a40      	subs	r0, r0, r1
 8027aa6:	fa1f fe80 	uxth.w	lr, r0
 8027aaa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027aac:	4342      	muls	r2, r0
 8027aae:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027ab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027ab4:	fb01 c102 	mla	r1, r1, r2, ip
 8027ab8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027aba:	fb03 1302 	mla	r3, r3, r2, r1
 8027abe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027ac2:	b383      	cbz	r3, 8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027ac4:	4ac6      	ldr	r2, [pc, #792]	@ (8027de0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8027ac6:	2bff      	cmp	r3, #255	@ 0xff
 8027ac8:	6812      	ldr	r2, [r2, #0]
 8027aca:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8027ace:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8027ad2:	b2d2      	uxtb	r2, r2
 8027ad4:	f000 80ac 	beq.w	8027c30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027ad8:	b299      	uxth	r1, r3
 8027ada:	43db      	mvns	r3, r3
 8027adc:	f897 c000 	ldrb.w	ip, [r7]
 8027ae0:	fb12 f201 	smulbb	r2, r2, r1
 8027ae4:	b2db      	uxtb	r3, r3
 8027ae6:	fb10 f001 	smulbb	r0, r0, r1
 8027aea:	fb0c 2203 	mla	r2, ip, r3, r2
 8027aee:	fb1e f101 	smulbb	r1, lr, r1
 8027af2:	b292      	uxth	r2, r2
 8027af4:	f102 0c01 	add.w	ip, r2, #1
 8027af8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027afc:	1212      	asrs	r2, r2, #8
 8027afe:	703a      	strb	r2, [r7, #0]
 8027b00:	787a      	ldrb	r2, [r7, #1]
 8027b02:	fb02 0003 	mla	r0, r2, r3, r0
 8027b06:	b280      	uxth	r0, r0
 8027b08:	1c42      	adds	r2, r0, #1
 8027b0a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027b0e:	78ba      	ldrb	r2, [r7, #2]
 8027b10:	fb02 1303 	mla	r3, r2, r3, r1
 8027b14:	1200      	asrs	r0, r0, #8
 8027b16:	b29b      	uxth	r3, r3
 8027b18:	7078      	strb	r0, [r7, #1]
 8027b1a:	f103 0e01 	add.w	lr, r3, #1
 8027b1e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8027b22:	121b      	asrs	r3, r3, #8
 8027b24:	70bb      	strb	r3, [r7, #2]
 8027b26:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027b28:	3703      	adds	r7, #3
 8027b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027b2e:	441d      	add	r5, r3
 8027b30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027b32:	441e      	add	r6, r3
 8027b34:	e74d      	b.n	80279d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8027b36:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027b38:	3c01      	subs	r4, #1
 8027b3a:	f10b 0b03 	add.w	fp, fp, #3
 8027b3e:	441d      	add	r5, r3
 8027b40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027b42:	441e      	add	r6, r3
 8027b44:	e725      	b.n	8027992 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027b46:	d021      	beq.n	8027b8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8027b48:	1e63      	subs	r3, r4, #1
 8027b4a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8027b4c:	fb00 5003 	mla	r0, r0, r3, r5
 8027b50:	1400      	asrs	r0, r0, #16
 8027b52:	f53f af3a 	bmi.w	80279ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b56:	3901      	subs	r1, #1
 8027b58:	4288      	cmp	r0, r1
 8027b5a:	f6bf af36 	bge.w	80279ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b5e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8027b60:	fb01 6303 	mla	r3, r1, r3, r6
 8027b64:	141b      	asrs	r3, r3, #16
 8027b66:	f53f af30 	bmi.w	80279ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b6a:	3a01      	subs	r2, #1
 8027b6c:	4293      	cmp	r3, r2
 8027b6e:	f6bf af2c 	bge.w	80279ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b72:	f10b 0c03 	add.w	ip, fp, #3
 8027b76:	46a6      	mov	lr, r4
 8027b78:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027b7c:	f1be 0f00 	cmp.w	lr, #0
 8027b80:	dc79      	bgt.n	8027c76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8027b82:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8027b86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027b8a:	44a3      	add	fp, r4
 8027b8c:	9b07      	ldr	r3, [sp, #28]
 8027b8e:	2b00      	cmp	r3, #0
 8027b90:	f340 8123 	ble.w	8027dda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027b98:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027b9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027b9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027ba2:	eef0 6a62 	vmov.f32	s13, s5
 8027ba6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027baa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027bae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027bb2:	ee16 5a90 	vmov	r5, s13
 8027bb6:	eef0 6a43 	vmov.f32	s13, s6
 8027bba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027bbe:	ee16 6a90 	vmov	r6, s13
 8027bc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027bc6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027bca:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027bce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027bd2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027bd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027bda:	ee12 2a90 	vmov	r2, s5
 8027bde:	eef0 2a47 	vmov.f32	s5, s14
 8027be2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027be6:	ee13 2a10 	vmov	r2, s6
 8027bea:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027bec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027bee:	eeb0 3a67 	vmov.f32	s6, s15
 8027bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027bf6:	9320      	str	r3, [sp, #128]	@ 0x80
 8027bf8:	9b07      	ldr	r3, [sp, #28]
 8027bfa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027bfc:	3b01      	subs	r3, #1
 8027bfe:	9307      	str	r3, [sp, #28]
 8027c00:	bf08      	it	eq
 8027c02:	4614      	moveq	r4, r2
 8027c04:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8027c06:	bf18      	it	ne
 8027c08:	461c      	movne	r4, r3
 8027c0a:	e6b4      	b.n	8027976 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027c0c:	2900      	cmp	r1, #0
 8027c0e:	f43f af3c 	beq.w	8027a8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027c12:	eb09 0003 	add.w	r0, r9, r3
 8027c16:	0843      	lsrs	r3, r0, #1
 8027c18:	07c0      	lsls	r0, r0, #31
 8027c1a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8027c1e:	bf54      	ite	pl
 8027c20:	f003 030f 	andpl.w	r3, r3, #15
 8027c24:	111b      	asrmi	r3, r3, #4
 8027c26:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027c2a:	b2db      	uxtb	r3, r3
 8027c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8027c2e:	e72c      	b.n	8027a8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8027c30:	703a      	strb	r2, [r7, #0]
 8027c32:	7078      	strb	r0, [r7, #1]
 8027c34:	f887 e002 	strb.w	lr, [r7, #2]
 8027c38:	e775      	b.n	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027c3a:	1c5a      	adds	r2, r3, #1
 8027c3c:	f53f af73 	bmi.w	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027c40:	4594      	cmp	ip, r2
 8027c42:	f6ff af70 	blt.w	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027c46:	1c42      	adds	r2, r0, #1
 8027c48:	f53f af6d 	bmi.w	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027c4c:	4596      	cmp	lr, r2
 8027c4e:	f6ff af6a 	blt.w	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027c52:	9302      	str	r3, [sp, #8]
 8027c54:	fa0f f38e 	sxth.w	r3, lr
 8027c58:	9a08      	ldr	r2, [sp, #32]
 8027c5a:	9301      	str	r3, [sp, #4]
 8027c5c:	fa0f f38c 	sxth.w	r3, ip
 8027c60:	9105      	str	r1, [sp, #20]
 8027c62:	4639      	mov	r1, r7
 8027c64:	9300      	str	r3, [sp, #0]
 8027c66:	464b      	mov	r3, r9
 8027c68:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027c6c:	4642      	mov	r2, r8
 8027c6e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027c70:	f7ff fd90 	bl	8027794 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8027c74:	e757      	b.n	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027c76:	142a      	asrs	r2, r5, #16
 8027c78:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027c7c:	1433      	asrs	r3, r6, #16
 8027c7e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8027c82:	fb09 2303 	mla	r3, r9, r3, r2
 8027c86:	085a      	lsrs	r2, r3, #1
 8027c88:	07d9      	lsls	r1, r3, #31
 8027c8a:	f818 2002 	ldrb.w	r2, [r8, r2]
 8027c8e:	bf54      	ite	pl
 8027c90:	f002 020f 	andpl.w	r2, r2, #15
 8027c94:	1112      	asrmi	r2, r2, #4
 8027c96:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027c9a:	b2d2      	uxtb	r2, r2
 8027c9c:	2800      	cmp	r0, #0
 8027c9e:	f000 8085 	beq.w	8027dac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027ca2:	f103 0a01 	add.w	sl, r3, #1
 8027ca6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8027caa:	f01a 0f01 	tst.w	sl, #1
 8027cae:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027cb2:	bf0c      	ite	eq
 8027cb4:	f001 010f 	andeq.w	r1, r1, #15
 8027cb8:	1109      	asrne	r1, r1, #4
 8027cba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027cbe:	b2c9      	uxtb	r1, r1
 8027cc0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8027cc2:	b1df      	cbz	r7, 8027cfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027cc4:	444b      	add	r3, r9
 8027cc6:	0859      	lsrs	r1, r3, #1
 8027cc8:	f013 0f01 	tst.w	r3, #1
 8027ccc:	f103 0301 	add.w	r3, r3, #1
 8027cd0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027cd4:	bf0c      	ite	eq
 8027cd6:	f001 010f 	andeq.w	r1, r1, #15
 8027cda:	1109      	asrne	r1, r1, #4
 8027cdc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027ce0:	b2c9      	uxtb	r1, r1
 8027ce2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027ce4:	0859      	lsrs	r1, r3, #1
 8027ce6:	07db      	lsls	r3, r3, #31
 8027ce8:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027cec:	bf54      	ite	pl
 8027cee:	f001 010f 	andpl.w	r1, r1, #15
 8027cf2:	1109      	asrmi	r1, r1, #4
 8027cf4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027cf8:	b2c9      	uxtb	r1, r1
 8027cfa:	9110      	str	r1, [sp, #64]	@ 0x40
 8027cfc:	b280      	uxth	r0, r0
 8027cfe:	b2bf      	uxth	r7, r7
 8027d00:	fb00 f307 	mul.w	r3, r0, r7
 8027d04:	0100      	lsls	r0, r0, #4
 8027d06:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8027d0a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8027d0e:	1ac0      	subs	r0, r0, r3
 8027d10:	b2bf      	uxth	r7, r7
 8027d12:	b280      	uxth	r0, r0
 8027d14:	1bc9      	subs	r1, r1, r7
 8027d16:	fa1f fa81 	uxth.w	sl, r1
 8027d1a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027d1c:	4348      	muls	r0, r1
 8027d1e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027d20:	fb02 020a 	mla	r2, r2, sl, r0
 8027d24:	fb07 2701 	mla	r7, r7, r1, r2
 8027d28:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027d2a:	fb03 7302 	mla	r3, r3, r2, r7
 8027d2e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027d32:	b393      	cbz	r3, 8027d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8027d34:	4a2a      	ldr	r2, [pc, #168]	@ (8027de0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8027d36:	2bff      	cmp	r3, #255	@ 0xff
 8027d38:	6811      	ldr	r1, [r2, #0]
 8027d3a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8027d3e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8027d42:	b2c9      	uxtb	r1, r1
 8027d44:	d042      	beq.n	8027dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8027d46:	b298      	uxth	r0, r3
 8027d48:	43db      	mvns	r3, r3
 8027d4a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8027d4e:	fb11 f100 	smulbb	r1, r1, r0
 8027d52:	b2db      	uxtb	r3, r3
 8027d54:	fb17 f700 	smulbb	r7, r7, r0
 8027d58:	fb02 1103 	mla	r1, r2, r3, r1
 8027d5c:	fb1a f000 	smulbb	r0, sl, r0
 8027d60:	b289      	uxth	r1, r1
 8027d62:	1c4a      	adds	r2, r1, #1
 8027d64:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027d68:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8027d6c:	fb02 7703 	mla	r7, r2, r3, r7
 8027d70:	1209      	asrs	r1, r1, #8
 8027d72:	b2bf      	uxth	r7, r7
 8027d74:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027d78:	1c7a      	adds	r2, r7, #1
 8027d7a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8027d7e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8027d82:	fb02 0303 	mla	r3, r2, r3, r0
 8027d86:	123f      	asrs	r7, r7, #8
 8027d88:	b29b      	uxth	r3, r3
 8027d8a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8027d8e:	1c5a      	adds	r2, r3, #1
 8027d90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027d94:	121b      	asrs	r3, r3, #8
 8027d96:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8027d9a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027d9c:	f10c 0c03 	add.w	ip, ip, #3
 8027da0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027da4:	441d      	add	r5, r3
 8027da6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027da8:	441e      	add	r6, r3
 8027daa:	e6e7      	b.n	8027b7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8027dac:	2f00      	cmp	r7, #0
 8027dae:	d0a5      	beq.n	8027cfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027db0:	444b      	add	r3, r9
 8027db2:	0859      	lsrs	r1, r3, #1
 8027db4:	07db      	lsls	r3, r3, #31
 8027db6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027dba:	bf54      	ite	pl
 8027dbc:	f001 010f 	andpl.w	r1, r1, #15
 8027dc0:	1109      	asrmi	r1, r1, #4
 8027dc2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027dc6:	b2c9      	uxtb	r1, r1
 8027dc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027dca:	e797      	b.n	8027cfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027dcc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8027dd0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8027dd4:	f80c ac01 	strb.w	sl, [ip, #-1]
 8027dd8:	e7df      	b.n	8027d9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8027dda:	b013      	add	sp, #76	@ 0x4c
 8027ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027de0:	240285c4 	.word	0x240285c4

08027de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8027de4:	b530      	push	{r4, r5, lr}
 8027de6:	b29d      	uxth	r5, r3
 8027de8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8027dec:	780c      	ldrb	r4, [r1, #0]
 8027dee:	b298      	uxth	r0, r3
 8027df0:	7813      	ldrb	r3, [r2, #0]
 8027df2:	fb14 f405 	smulbb	r4, r4, r5
 8027df6:	fb13 f300 	smulbb	r3, r3, r0
 8027dfa:	441c      	add	r4, r3
 8027dfc:	b2a4      	uxth	r4, r4
 8027dfe:	1c63      	adds	r3, r4, #1
 8027e00:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027e04:	7853      	ldrb	r3, [r2, #1]
 8027e06:	fb13 f300 	smulbb	r3, r3, r0
 8027e0a:	1224      	asrs	r4, r4, #8
 8027e0c:	7014      	strb	r4, [r2, #0]
 8027e0e:	784c      	ldrb	r4, [r1, #1]
 8027e10:	fb14 f405 	smulbb	r4, r4, r5
 8027e14:	441c      	add	r4, r3
 8027e16:	b2a4      	uxth	r4, r4
 8027e18:	1c63      	adds	r3, r4, #1
 8027e1a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027e1e:	1224      	asrs	r4, r4, #8
 8027e20:	7054      	strb	r4, [r2, #1]
 8027e22:	788b      	ldrb	r3, [r1, #2]
 8027e24:	7891      	ldrb	r1, [r2, #2]
 8027e26:	fb13 f305 	smulbb	r3, r3, r5
 8027e2a:	fb11 f000 	smulbb	r0, r1, r0
 8027e2e:	4403      	add	r3, r0
 8027e30:	b29b      	uxth	r3, r3
 8027e32:	1c59      	adds	r1, r3, #1
 8027e34:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027e38:	121b      	asrs	r3, r3, #8
 8027e3a:	7093      	strb	r3, [r2, #2]
 8027e3c:	bd30      	pop	{r4, r5, pc}
	...

08027e40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8027e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e44:	461c      	mov	r4, r3
 8027e46:	b08b      	sub	sp, #44	@ 0x2c
 8027e48:	460e      	mov	r6, r1
 8027e4a:	4615      	mov	r5, r2
 8027e4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027e4e:	4682      	mov	sl, r0
 8027e50:	6861      	ldr	r1, [r4, #4]
 8027e52:	aa06      	add	r2, sp, #24
 8027e54:	6820      	ldr	r0, [r4, #0]
 8027e56:	2702      	movs	r7, #2
 8027e58:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8027e5c:	3504      	adds	r5, #4
 8027e5e:	c203      	stmia	r2!, {r0, r1}
 8027e60:	6818      	ldr	r0, [r3, #0]
 8027e62:	aa08      	add	r2, sp, #32
 8027e64:	6859      	ldr	r1, [r3, #4]
 8027e66:	c203      	stmia	r2!, {r0, r1}
 8027e68:	a806      	add	r0, sp, #24
 8027e6a:	f7f2 fb63 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8027e6e:	4621      	mov	r1, r4
 8027e70:	a808      	add	r0, sp, #32
 8027e72:	f7f2 fba3 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8027e76:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8027e7a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8027e7e:	f002 0301 	and.w	r3, r2, #1
 8027e82:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8027e86:	9302      	str	r3, [sp, #8]
 8027e88:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8027e8c:	f003 0101 	and.w	r1, r3, #1
 8027e90:	9101      	str	r1, [sp, #4]
 8027e92:	9801      	ldr	r0, [sp, #4]
 8027e94:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8027e98:	4403      	add	r3, r0
 8027e9a:	fb01 2303 	mla	r3, r1, r3, r2
 8027e9e:	fb93 f3f7 	sdiv	r3, r3, r7
 8027ea2:	441e      	add	r6, r3
 8027ea4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8027ea8:	441a      	add	r2, r3
 8027eaa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8027eae:	4419      	add	r1, r3
 8027eb0:	4b70      	ldr	r3, [pc, #448]	@ (8028074 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8027eb2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8027eb6:	6818      	ldr	r0, [r3, #0]
 8027eb8:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8027ebc:	6803      	ldr	r3, [r0, #0]
 8027ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027ec0:	4798      	blx	r3
 8027ec2:	4a6d      	ldr	r2, [pc, #436]	@ (8028078 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8027ec4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8027ec8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027ecc:	8813      	ldrh	r3, [r2, #0]
 8027ece:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8027ed2:	fb03 1404 	mla	r4, r3, r4, r1
 8027ed6:	4611      	mov	r1, r2
 8027ed8:	fb0b f303 	mul.w	r3, fp, r3
 8027edc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027ee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027ee4:	4404      	add	r4, r0
 8027ee6:	4423      	add	r3, r4
 8027ee8:	d073      	beq.n	8027fd2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8027eea:	9705      	str	r7, [sp, #20]
 8027eec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8027ef0:	9b03      	ldr	r3, [sp, #12]
 8027ef2:	429c      	cmp	r4, r3
 8027ef4:	f080 80b5 	bcs.w	8028062 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8027ef8:	9b02      	ldr	r3, [sp, #8]
 8027efa:	b35b      	cbz	r3, 8027f54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8027efc:	7831      	ldrb	r1, [r6, #0]
 8027efe:	4622      	mov	r2, r4
 8027f00:	1c77      	adds	r7, r6, #1
 8027f02:	3403      	adds	r4, #3
 8027f04:	f001 010f 	and.w	r1, r1, #15
 8027f08:	f108 3bff 	add.w	fp, r8, #4294967295
 8027f0c:	464b      	mov	r3, r9
 8027f0e:	4650      	mov	r0, sl
 8027f10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f14:	4429      	add	r1, r5
 8027f16:	f7ff ff65 	bl	8027de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027f1a:	f1bb 0f01 	cmp.w	fp, #1
 8027f1e:	dd1c      	ble.n	8027f5a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8027f20:	7839      	ldrb	r1, [r7, #0]
 8027f22:	4622      	mov	r2, r4
 8027f24:	464b      	mov	r3, r9
 8027f26:	4650      	mov	r0, sl
 8027f28:	0909      	lsrs	r1, r1, #4
 8027f2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8027f2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f32:	4429      	add	r1, r5
 8027f34:	f7ff ff56 	bl	8027de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027f38:	f817 1b01 	ldrb.w	r1, [r7], #1
 8027f3c:	1ce2      	adds	r2, r4, #3
 8027f3e:	464b      	mov	r3, r9
 8027f40:	f001 010f 	and.w	r1, r1, #15
 8027f44:	4650      	mov	r0, sl
 8027f46:	3406      	adds	r4, #6
 8027f48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f4c:	4429      	add	r1, r5
 8027f4e:	f7ff ff49 	bl	8027de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027f52:	e7e2      	b.n	8027f1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8027f54:	4637      	mov	r7, r6
 8027f56:	46c3      	mov	fp, r8
 8027f58:	e7df      	b.n	8027f1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8027f5a:	d10a      	bne.n	8027f72 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8027f5c:	7839      	ldrb	r1, [r7, #0]
 8027f5e:	4622      	mov	r2, r4
 8027f60:	3403      	adds	r4, #3
 8027f62:	464b      	mov	r3, r9
 8027f64:	0909      	lsrs	r1, r1, #4
 8027f66:	4650      	mov	r0, sl
 8027f68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f6c:	4429      	add	r1, r5
 8027f6e:	f7ff ff39 	bl	8027de4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8027f72:	9b04      	ldr	r3, [sp, #16]
 8027f74:	9a01      	ldr	r2, [sp, #4]
 8027f76:	881b      	ldrh	r3, [r3, #0]
 8027f78:	eba3 0308 	sub.w	r3, r3, r8
 8027f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027f80:	441c      	add	r4, r3
 8027f82:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8027f86:	4413      	add	r3, r2
 8027f88:	9a05      	ldr	r2, [sp, #20]
 8027f8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8027f8e:	441e      	add	r6, r3
 8027f90:	e7ae      	b.n	8027ef0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8027f92:	4632      	mov	r2, r6
 8027f94:	46c4      	mov	ip, r8
 8027f96:	e037      	b.n	8028008 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8027f98:	d10e      	bne.n	8027fb8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8027f9a:	7812      	ldrb	r2, [r2, #0]
 8027f9c:	3003      	adds	r0, #3
 8027f9e:	0912      	lsrs	r2, r2, #4
 8027fa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027fa4:	18ac      	adds	r4, r5, r2
 8027fa6:	5caa      	ldrb	r2, [r5, r2]
 8027fa8:	f800 2c03 	strb.w	r2, [r0, #-3]
 8027fac:	7862      	ldrb	r2, [r4, #1]
 8027fae:	f800 2c02 	strb.w	r2, [r0, #-2]
 8027fb2:	78a2      	ldrb	r2, [r4, #2]
 8027fb4:	f800 2c01 	strb.w	r2, [r0, #-1]
 8027fb8:	880c      	ldrh	r4, [r1, #0]
 8027fba:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8027fbe:	eba4 0408 	sub.w	r4, r4, r8
 8027fc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027fc6:	4404      	add	r4, r0
 8027fc8:	9801      	ldr	r0, [sp, #4]
 8027fca:	4402      	add	r2, r0
 8027fcc:	fb92 f2f7 	sdiv	r2, r2, r7
 8027fd0:	4416      	add	r6, r2
 8027fd2:	429c      	cmp	r4, r3
 8027fd4:	d245      	bcs.n	8028062 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8027fd6:	9a02      	ldr	r2, [sp, #8]
 8027fd8:	2a00      	cmp	r2, #0
 8027fda:	d0da      	beq.n	8027f92 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8027fdc:	7830      	ldrb	r0, [r6, #0]
 8027fde:	1c72      	adds	r2, r6, #1
 8027fe0:	3403      	adds	r4, #3
 8027fe2:	f000 000f 	and.w	r0, r0, #15
 8027fe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027fea:	eb05 0c00 	add.w	ip, r5, r0
 8027fee:	5c28      	ldrb	r0, [r5, r0]
 8027ff0:	f804 0c03 	strb.w	r0, [r4, #-3]
 8027ff4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027ff8:	f804 0c02 	strb.w	r0, [r4, #-2]
 8027ffc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8028000:	f108 3cff 	add.w	ip, r8, #4294967295
 8028004:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028008:	f1bc 0f01 	cmp.w	ip, #1
 802800c:	4620      	mov	r0, r4
 802800e:	f104 0406 	add.w	r4, r4, #6
 8028012:	ddc1      	ble.n	8027f98 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8028014:	7810      	ldrb	r0, [r2, #0]
 8028016:	f1ac 0c02 	sub.w	ip, ip, #2
 802801a:	0900      	lsrs	r0, r0, #4
 802801c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028020:	eb05 0e00 	add.w	lr, r5, r0
 8028024:	5c28      	ldrb	r0, [r5, r0]
 8028026:	f804 0c06 	strb.w	r0, [r4, #-6]
 802802a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802802e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8028032:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8028036:	f804 0c04 	strb.w	r0, [r4, #-4]
 802803a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802803e:	f000 000f 	and.w	r0, r0, #15
 8028042:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028046:	eb05 0e00 	add.w	lr, r5, r0
 802804a:	5c28      	ldrb	r0, [r5, r0]
 802804c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8028050:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8028054:	f804 0c02 	strb.w	r0, [r4, #-2]
 8028058:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802805c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8028060:	e7d2      	b.n	8028008 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8028062:	4b04      	ldr	r3, [pc, #16]	@ (8028074 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8028064:	6818      	ldr	r0, [r3, #0]
 8028066:	6803      	ldr	r3, [r0, #0]
 8028068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802806a:	4798      	blx	r3
 802806c:	b00b      	add	sp, #44	@ 0x2c
 802806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028072:	bf00      	nop
 8028074:	240285b4 	.word	0x240285b4
 8028078:	240285ae 	.word	0x240285ae

0802807c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 802807c:	b530      	push	{r4, r5, lr}
 802807e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8028082:	780d      	ldrb	r5, [r1, #0]
 8028084:	28ff      	cmp	r0, #255	@ 0xff
 8028086:	d107      	bne.n	8028098 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8028088:	2bff      	cmp	r3, #255	@ 0xff
 802808a:	d105      	bne.n	8028098 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802808c:	7015      	strb	r5, [r2, #0]
 802808e:	784b      	ldrb	r3, [r1, #1]
 8028090:	7053      	strb	r3, [r2, #1]
 8028092:	788b      	ldrb	r3, [r1, #2]
 8028094:	7093      	strb	r3, [r2, #2]
 8028096:	bd30      	pop	{r4, r5, pc}
 8028098:	fb10 f003 	smulbb	r0, r0, r3
 802809c:	b283      	uxth	r3, r0
 802809e:	1c58      	adds	r0, r3, #1
 80280a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80280a4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80280a8:	b284      	uxth	r4, r0
 80280aa:	43c0      	mvns	r0, r0
 80280ac:	fb15 f504 	smulbb	r5, r5, r4
 80280b0:	b2c3      	uxtb	r3, r0
 80280b2:	7810      	ldrb	r0, [r2, #0]
 80280b4:	fb00 5003 	mla	r0, r0, r3, r5
 80280b8:	b280      	uxth	r0, r0
 80280ba:	1c45      	adds	r5, r0, #1
 80280bc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80280c0:	7855      	ldrb	r5, [r2, #1]
 80280c2:	fb15 f503 	smulbb	r5, r5, r3
 80280c6:	1200      	asrs	r0, r0, #8
 80280c8:	7010      	strb	r0, [r2, #0]
 80280ca:	7848      	ldrb	r0, [r1, #1]
 80280cc:	fb00 5004 	mla	r0, r0, r4, r5
 80280d0:	b280      	uxth	r0, r0
 80280d2:	1c45      	adds	r5, r0, #1
 80280d4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80280d8:	1200      	asrs	r0, r0, #8
 80280da:	7050      	strb	r0, [r2, #1]
 80280dc:	7888      	ldrb	r0, [r1, #2]
 80280de:	7891      	ldrb	r1, [r2, #2]
 80280e0:	fb11 f303 	smulbb	r3, r1, r3
 80280e4:	fb00 3304 	mla	r3, r0, r4, r3
 80280e8:	b29b      	uxth	r3, r3
 80280ea:	1c59      	adds	r1, r3, #1
 80280ec:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80280f0:	121b      	asrs	r3, r3, #8
 80280f2:	e7cf      	b.n	8028094 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080280f4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80280f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280f8:	461d      	mov	r5, r3
 80280fa:	b08f      	sub	sp, #60	@ 0x3c
 80280fc:	460c      	mov	r4, r1
 80280fe:	4616      	mov	r6, r2
 8028100:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028102:	4680      	mov	r8, r0
 8028104:	6869      	ldr	r1, [r5, #4]
 8028106:	aa0a      	add	r2, sp, #40	@ 0x28
 8028108:	6828      	ldr	r0, [r5, #0]
 802810a:	3604      	adds	r6, #4
 802810c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8028110:	4f57      	ldr	r7, [pc, #348]	@ (8028270 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8028112:	c203      	stmia	r2!, {r0, r1}
 8028114:	6818      	ldr	r0, [r3, #0]
 8028116:	aa0c      	add	r2, sp, #48	@ 0x30
 8028118:	6859      	ldr	r1, [r3, #4]
 802811a:	c203      	stmia	r2!, {r0, r1}
 802811c:	a80a      	add	r0, sp, #40	@ 0x28
 802811e:	f7f2 fa09 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028122:	4629      	mov	r1, r5
 8028124:	a80c      	add	r0, sp, #48	@ 0x30
 8028126:	2502      	movs	r5, #2
 8028128:	f7f2 fa48 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802812c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028130:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8028134:	f002 0301 	and.w	r3, r2, #1
 8028138:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802813c:	9304      	str	r3, [sp, #16]
 802813e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028142:	f003 0101 	and.w	r1, r3, #1
 8028146:	9103      	str	r1, [sp, #12]
 8028148:	9803      	ldr	r0, [sp, #12]
 802814a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802814e:	4403      	add	r3, r0
 8028150:	6838      	ldr	r0, [r7, #0]
 8028152:	fb01 2303 	mla	r3, r1, r3, r2
 8028156:	fb93 f3f5 	sdiv	r3, r3, r5
 802815a:	18e5      	adds	r5, r4, r3
 802815c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028160:	441a      	add	r2, r3
 8028162:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8028166:	4419      	add	r1, r3
 8028168:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802816c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028170:	6803      	ldr	r3, [r0, #0]
 8028172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028174:	4798      	blx	r3
 8028176:	4a3f      	ldr	r2, [pc, #252]	@ (8028274 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8028178:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802817c:	8813      	ldrh	r3, [r2, #0]
 802817e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8028182:	9207      	str	r2, [sp, #28]
 8028184:	fb03 1404 	mla	r4, r3, r4, r1
 8028188:	fb0a f303 	mul.w	r3, sl, r3
 802818c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028190:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028194:	4404      	add	r4, r0
 8028196:	18e3      	adds	r3, r4, r3
 8028198:	e9cd 3705 	strd	r3, r7, [sp, #20]
 802819c:	9b05      	ldr	r3, [sp, #20]
 802819e:	429c      	cmp	r4, r3
 80281a0:	d25d      	bcs.n	802825e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80281a2:	9b04      	ldr	r3, [sp, #16]
 80281a4:	2b00      	cmp	r3, #0
 80281a6:	d037      	beq.n	8028218 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80281a8:	782b      	ldrb	r3, [r5, #0]
 80281aa:	1c6f      	adds	r7, r5, #1
 80281ac:	f003 030f 	and.w	r3, r3, #15
 80281b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80281b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80281b6:	0e1b      	lsrs	r3, r3, #24
 80281b8:	d006      	beq.n	80281c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 80281ba:	9300      	str	r3, [sp, #0]
 80281bc:	4622      	mov	r2, r4
 80281be:	464b      	mov	r3, r9
 80281c0:	a909      	add	r1, sp, #36	@ 0x24
 80281c2:	4640      	mov	r0, r8
 80281c4:	f7ff ff5a 	bl	802807c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80281c8:	3403      	adds	r4, #3
 80281ca:	f10b 3aff 	add.w	sl, fp, #4294967295
 80281ce:	f1ba 0f01 	cmp.w	sl, #1
 80281d2:	dd24      	ble.n	802821e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80281d4:	783b      	ldrb	r3, [r7, #0]
 80281d6:	091b      	lsrs	r3, r3, #4
 80281d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80281dc:	9308      	str	r3, [sp, #32]
 80281de:	0e1b      	lsrs	r3, r3, #24
 80281e0:	d006      	beq.n	80281f0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80281e2:	9300      	str	r3, [sp, #0]
 80281e4:	4622      	mov	r2, r4
 80281e6:	464b      	mov	r3, r9
 80281e8:	a908      	add	r1, sp, #32
 80281ea:	4640      	mov	r0, r8
 80281ec:	f7ff ff46 	bl	802807c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80281f0:	f817 3b01 	ldrb.w	r3, [r7], #1
 80281f4:	f003 030f 	and.w	r3, r3, #15
 80281f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80281fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80281fe:	0e1b      	lsrs	r3, r3, #24
 8028200:	d006      	beq.n	8028210 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8028202:	9300      	str	r3, [sp, #0]
 8028204:	1ce2      	adds	r2, r4, #3
 8028206:	464b      	mov	r3, r9
 8028208:	a909      	add	r1, sp, #36	@ 0x24
 802820a:	4640      	mov	r0, r8
 802820c:	f7ff ff36 	bl	802807c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8028210:	3406      	adds	r4, #6
 8028212:	f1aa 0a02 	sub.w	sl, sl, #2
 8028216:	e7da      	b.n	80281ce <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8028218:	462f      	mov	r7, r5
 802821a:	46da      	mov	sl, fp
 802821c:	e7d7      	b.n	80281ce <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802821e:	d10e      	bne.n	802823e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8028220:	783b      	ldrb	r3, [r7, #0]
 8028222:	091b      	lsrs	r3, r3, #4
 8028224:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028228:	9309      	str	r3, [sp, #36]	@ 0x24
 802822a:	0e1b      	lsrs	r3, r3, #24
 802822c:	d006      	beq.n	802823c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802822e:	9300      	str	r3, [sp, #0]
 8028230:	4622      	mov	r2, r4
 8028232:	464b      	mov	r3, r9
 8028234:	a909      	add	r1, sp, #36	@ 0x24
 8028236:	4640      	mov	r0, r8
 8028238:	f7ff ff20 	bl	802807c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802823c:	3403      	adds	r4, #3
 802823e:	9b07      	ldr	r3, [sp, #28]
 8028240:	9a03      	ldr	r2, [sp, #12]
 8028242:	881b      	ldrh	r3, [r3, #0]
 8028244:	eba3 030b 	sub.w	r3, r3, fp
 8028248:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802824c:	441c      	add	r4, r3
 802824e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028252:	4413      	add	r3, r2
 8028254:	2202      	movs	r2, #2
 8028256:	fb93 f3f2 	sdiv	r3, r3, r2
 802825a:	441d      	add	r5, r3
 802825c:	e79e      	b.n	802819c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 802825e:	9b06      	ldr	r3, [sp, #24]
 8028260:	6818      	ldr	r0, [r3, #0]
 8028262:	6803      	ldr	r3, [r0, #0]
 8028264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028266:	4798      	blx	r3
 8028268:	b00f      	add	sp, #60	@ 0x3c
 802826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802826e:	bf00      	nop
 8028270:	240285b4 	.word	0x240285b4
 8028274:	240285ae 	.word	0x240285ae

08028278 <CRC_Lock>:
 8028278:	4a2d      	ldr	r2, [pc, #180]	@ (8028330 <CRC_Lock+0xb8>)
 802827a:	b530      	push	{r4, r5, lr}
 802827c:	6813      	ldr	r3, [r2, #0]
 802827e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8028282:	f023 0301 	bic.w	r3, r3, #1
 8028286:	6013      	str	r3, [r2, #0]
 8028288:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802828c:	4b29      	ldr	r3, [pc, #164]	@ (8028334 <CRC_Lock+0xbc>)
 802828e:	681c      	ldr	r4, [r3, #0]
 8028290:	4014      	ands	r4, r2
 8028292:	42ac      	cmp	r4, r5
 8028294:	d005      	beq.n	80282a2 <CRC_Lock+0x2a>
 8028296:	681c      	ldr	r4, [r3, #0]
 8028298:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802829c:	4014      	ands	r4, r2
 802829e:	42ac      	cmp	r4, r5
 80282a0:	d125      	bne.n	80282ee <CRC_Lock+0x76>
 80282a2:	4b25      	ldr	r3, [pc, #148]	@ (8028338 <CRC_Lock+0xc0>)
 80282a4:	681b      	ldr	r3, [r3, #0]
 80282a6:	2b00      	cmp	r3, #0
 80282a8:	d139      	bne.n	802831e <CRC_Lock+0xa6>
 80282aa:	4b24      	ldr	r3, [pc, #144]	@ (802833c <CRC_Lock+0xc4>)
 80282ac:	681a      	ldr	r2, [r3, #0]
 80282ae:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80282b2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80282b6:	d00d      	beq.n	80282d4 <CRC_Lock+0x5c>
 80282b8:	681a      	ldr	r2, [r3, #0]
 80282ba:	f240 4483 	movw	r4, #1155	@ 0x483
 80282be:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80282c2:	42a2      	cmp	r2, r4
 80282c4:	d006      	beq.n	80282d4 <CRC_Lock+0x5c>
 80282c6:	681b      	ldr	r3, [r3, #0]
 80282c8:	f240 4285 	movw	r2, #1157	@ 0x485
 80282cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80282d0:	4293      	cmp	r3, r2
 80282d2:	d124      	bne.n	802831e <CRC_Lock+0xa6>
 80282d4:	4b1a      	ldr	r3, [pc, #104]	@ (8028340 <CRC_Lock+0xc8>)
 80282d6:	2201      	movs	r2, #1
 80282d8:	601a      	str	r2, [r3, #0]
 80282da:	681a      	ldr	r2, [r3, #0]
 80282dc:	2a00      	cmp	r2, #0
 80282de:	d1fc      	bne.n	80282da <CRC_Lock+0x62>
 80282e0:	4b18      	ldr	r3, [pc, #96]	@ (8028344 <CRC_Lock+0xcc>)
 80282e2:	6018      	str	r0, [r3, #0]
 80282e4:	6818      	ldr	r0, [r3, #0]
 80282e6:	1a43      	subs	r3, r0, r1
 80282e8:	4258      	negs	r0, r3
 80282ea:	4158      	adcs	r0, r3
 80282ec:	e00e      	b.n	802830c <CRC_Lock+0x94>
 80282ee:	681b      	ldr	r3, [r3, #0]
 80282f0:	4013      	ands	r3, r2
 80282f2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80282f6:	4293      	cmp	r3, r2
 80282f8:	d111      	bne.n	802831e <CRC_Lock+0xa6>
 80282fa:	4b13      	ldr	r3, [pc, #76]	@ (8028348 <CRC_Lock+0xd0>)
 80282fc:	f240 4286 	movw	r2, #1158	@ 0x486
 8028300:	681b      	ldr	r3, [r3, #0]
 8028302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028306:	4293      	cmp	r3, r2
 8028308:	d001      	beq.n	802830e <CRC_Lock+0x96>
 802830a:	2000      	movs	r0, #0
 802830c:	bd30      	pop	{r4, r5, pc}
 802830e:	4b0f      	ldr	r3, [pc, #60]	@ (802834c <CRC_Lock+0xd4>)
 8028310:	2201      	movs	r2, #1
 8028312:	601a      	str	r2, [r3, #0]
 8028314:	681a      	ldr	r2, [r3, #0]
 8028316:	2a00      	cmp	r2, #0
 8028318:	d1fc      	bne.n	8028314 <CRC_Lock+0x9c>
 802831a:	4b0d      	ldr	r3, [pc, #52]	@ (8028350 <CRC_Lock+0xd8>)
 802831c:	e7e1      	b.n	80282e2 <CRC_Lock+0x6a>
 802831e:	4b0d      	ldr	r3, [pc, #52]	@ (8028354 <CRC_Lock+0xdc>)
 8028320:	2201      	movs	r2, #1
 8028322:	601a      	str	r2, [r3, #0]
 8028324:	681a      	ldr	r2, [r3, #0]
 8028326:	2a00      	cmp	r2, #0
 8028328:	d1fc      	bne.n	8028324 <CRC_Lock+0xac>
 802832a:	4b0b      	ldr	r3, [pc, #44]	@ (8028358 <CRC_Lock+0xe0>)
 802832c:	e7d9      	b.n	80282e2 <CRC_Lock+0x6a>
 802832e:	bf00      	nop
 8028330:	e0002000 	.word	0xe0002000
 8028334:	e000ed00 	.word	0xe000ed00
 8028338:	e0042000 	.word	0xe0042000
 802833c:	5c001000 	.word	0x5c001000
 8028340:	58024c08 	.word	0x58024c08
 8028344:	58024c00 	.word	0x58024c00
 8028348:	46008ff0 	.word	0x46008ff0
 802834c:	46024c08 	.word	0x46024c08
 8028350:	46024c00 	.word	0x46024c00
 8028354:	40023008 	.word	0x40023008
 8028358:	40023000 	.word	0x40023000

0802835c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802835c:	6101      	str	r1, [r0, #16]
 802835e:	4770      	bx	lr

08028360 <_ZN8touchgfx8Gestures4tickEv>:
 8028360:	7b83      	ldrb	r3, [r0, #14]
 8028362:	b14b      	cbz	r3, 8028378 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028364:	8903      	ldrh	r3, [r0, #8]
 8028366:	3301      	adds	r3, #1
 8028368:	b29b      	uxth	r3, r3
 802836a:	2b07      	cmp	r3, #7
 802836c:	8103      	strh	r3, [r0, #8]
 802836e:	bf81      	itttt	hi
 8028370:	2300      	movhi	r3, #0
 8028372:	8143      	strhhi	r3, [r0, #10]
 8028374:	8183      	strhhi	r3, [r0, #12]
 8028376:	7383      	strbhi	r3, [r0, #14]
 8028378:	4770      	bx	lr
	...

0802837c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802837c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028380:	4698      	mov	r8, r3
 8028382:	8883      	ldrh	r3, [r0, #4]
 8028384:	4604      	mov	r4, r0
 8028386:	4617      	mov	r7, r2
 8028388:	f8ad 3006 	strh.w	r3, [sp, #6]
 802838c:	eba8 0303 	sub.w	r3, r8, r3
 8028390:	4a19      	ldr	r2, [pc, #100]	@ (80283f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028392:	460e      	mov	r6, r1
 8028394:	b21b      	sxth	r3, r3
 8028396:	88c1      	ldrh	r1, [r0, #6]
 8028398:	9200      	str	r2, [sp, #0]
 802839a:	2000      	movs	r0, #0
 802839c:	2b00      	cmp	r3, #0
 802839e:	8aa2      	ldrh	r2, [r4, #20]
 80283a0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80283a4:	bfb8      	it	lt
 80283a6:	425b      	neglt	r3, r3
 80283a8:	f88d 0004 	strb.w	r0, [sp, #4]
 80283ac:	f8ad 1008 	strh.w	r1, [sp, #8]
 80283b0:	b21b      	sxth	r3, r3
 80283b2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80283b6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80283ba:	4293      	cmp	r3, r2
 80283bc:	dc07      	bgt.n	80283ce <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80283be:	1a69      	subs	r1, r5, r1
 80283c0:	b209      	sxth	r1, r1
 80283c2:	2900      	cmp	r1, #0
 80283c4:	bfb8      	it	lt
 80283c6:	4249      	neglt	r1, r1
 80283c8:	b209      	sxth	r1, r1
 80283ca:	428a      	cmp	r2, r1
 80283cc:	da10      	bge.n	80283f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80283ce:	6920      	ldr	r0, [r4, #16]
 80283d0:	4669      	mov	r1, sp
 80283d2:	eba8 0606 	sub.w	r6, r8, r6
 80283d6:	1bef      	subs	r7, r5, r7
 80283d8:	6803      	ldr	r3, [r0, #0]
 80283da:	685b      	ldr	r3, [r3, #4]
 80283dc:	4798      	blx	r3
 80283de:	2300      	movs	r3, #0
 80283e0:	2001      	movs	r0, #1
 80283e2:	8166      	strh	r6, [r4, #10]
 80283e4:	8123      	strh	r3, [r4, #8]
 80283e6:	81a7      	strh	r7, [r4, #12]
 80283e8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80283ec:	80e5      	strh	r5, [r4, #6]
 80283ee:	73a0      	strb	r0, [r4, #14]
 80283f0:	b004      	add	sp, #16
 80283f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80283f6:	bf00      	nop
 80283f8:	0802dc90 	.word	0x0802dc90

080283fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80283fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80283fe:	461e      	mov	r6, r3
 8028400:	1e4b      	subs	r3, r1, #1
 8028402:	b085      	sub	sp, #20
 8028404:	4604      	mov	r4, r0
 8028406:	2b01      	cmp	r3, #1
 8028408:	460d      	mov	r5, r1
 802840a:	4617      	mov	r7, r2
 802840c:	d84b      	bhi.n	80284a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802840e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028412:	1cd3      	adds	r3, r2, #3
 8028414:	b29b      	uxth	r3, r3
 8028416:	2b06      	cmp	r3, #6
 8028418:	d916      	bls.n	8028448 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802841a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80284bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802841e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028422:	f8cd c004 	str.w	ip, [sp, #4]
 8028426:	f04f 0c00 	mov.w	ip, #0
 802842a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802842e:	6900      	ldr	r0, [r0, #16]
 8028430:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028434:	a901      	add	r1, sp, #4
 8028436:	f88d c008 	strb.w	ip, [sp, #8]
 802843a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802843e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028442:	6803      	ldr	r3, [r0, #0]
 8028444:	689b      	ldr	r3, [r3, #8]
 8028446:	4798      	blx	r3
 8028448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802844c:	1cd3      	adds	r3, r2, #3
 802844e:	b29b      	uxth	r3, r3
 8028450:	2b06      	cmp	r3, #6
 8028452:	d916      	bls.n	8028482 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028454:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80284bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028458:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802845c:	f8cd c004 	str.w	ip, [sp, #4]
 8028460:	f04f 0c01 	mov.w	ip, #1
 8028464:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028468:	6920      	ldr	r0, [r4, #16]
 802846a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802846e:	a901      	add	r1, sp, #4
 8028470:	f88d c008 	strb.w	ip, [sp, #8]
 8028474:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028478:	f8ad 300e 	strh.w	r3, [sp, #14]
 802847c:	6803      	ldr	r3, [r0, #0]
 802847e:	689b      	ldr	r3, [r3, #8]
 8028480:	4798      	blx	r3
 8028482:	4b0d      	ldr	r3, [pc, #52]	@ (80284b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028484:	a901      	add	r1, sp, #4
 8028486:	6920      	ldr	r0, [r4, #16]
 8028488:	9301      	str	r3, [sp, #4]
 802848a:	2300      	movs	r3, #0
 802848c:	f88d 5008 	strb.w	r5, [sp, #8]
 8028490:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028494:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028498:	f8ad 300e 	strh.w	r3, [sp, #14]
 802849c:	6803      	ldr	r3, [r0, #0]
 802849e:	681b      	ldr	r3, [r3, #0]
 80284a0:	4798      	blx	r3
 80284a2:	b005      	add	sp, #20
 80284a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80284a6:	2900      	cmp	r1, #0
 80284a8:	d1eb      	bne.n	8028482 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80284aa:	80a2      	strh	r2, [r4, #4]
 80284ac:	80c6      	strh	r6, [r0, #6]
 80284ae:	60a1      	str	r1, [r4, #8]
 80284b0:	81a1      	strh	r1, [r4, #12]
 80284b2:	73a1      	strb	r1, [r4, #14]
 80284b4:	e7e5      	b.n	8028482 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80284b6:	bf00      	nop
 80284b8:	0802dc7c 	.word	0x0802dc7c
 80284bc:	0802e584 	.word	0x0802e584

080284c0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 80284c0:	10c9      	asrs	r1, r1, #3
 80284c2:	2900      	cmp	r1, #0
 80284c4:	bfb8      	it	lt
 80284c6:	4249      	neglt	r1, r1
 80284c8:	2801      	cmp	r0, #1
 80284ca:	d108      	bne.n	80284de <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 80284cc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80284d0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80284d4:	4601      	mov	r1, r0
 80284d6:	dd02      	ble.n	80284de <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 80284d8:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 80284dc:	4770      	bx	lr
 80284de:	29ff      	cmp	r1, #255	@ 0xff
 80284e0:	bfa8      	it	ge
 80284e2:	21ff      	movge	r1, #255	@ 0xff
 80284e4:	4608      	mov	r0, r1
 80284e6:	4770      	bx	lr

080284e8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80284e8:	b410      	push	{r4}
 80284ea:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80284ee:	429c      	cmp	r4, r3
 80284f0:	d803      	bhi.n	80284fa <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80284f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80284f6:	f7f0 bb13 	b.w	8018b20 <_ZN8touchgfx7Outline6lineToEii>
 80284fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80284fe:	4770      	bx	lr

08028500 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8028500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028504:	b08b      	sub	sp, #44	@ 0x2c
 8028506:	4606      	mov	r6, r0
 8028508:	468a      	mov	sl, r1
 802850a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802850e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8028512:	9308      	str	r3, [sp, #32]
 8028514:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8028518:	9309      	str	r3, [sp, #36]	@ 0x24
 802851a:	f7f0 fc6c 	bl	8018df6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802851e:	68b5      	ldr	r5, [r6, #8]
 8028520:	4604      	mov	r4, r0
 8028522:	2d00      	cmp	r5, #0
 8028524:	d044      	beq.n	80285b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028526:	6873      	ldr	r3, [r6, #4]
 8028528:	42ab      	cmp	r3, r5
 802852a:	d33d      	bcc.n	80285a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802852c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8028530:	f04f 0800 	mov.w	r8, #0
 8028534:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8028538:	eb02 0b03 	add.w	fp, r2, r3
 802853c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028540:	fb02 1203 	mla	r2, r2, r3, r1
 8028544:	9205      	str	r2, [sp, #20]
 8028546:	1e6a      	subs	r2, r5, #1
 8028548:	9204      	str	r2, [sp, #16]
 802854a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802854e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028552:	454b      	cmp	r3, r9
 8028554:	463a      	mov	r2, r7
 8028556:	d008      	beq.n	802856a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8028558:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802855c:	eb03 0b09 	add.w	fp, r3, r9
 8028560:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8028564:	fb03 1309 	mla	r3, r3, r9, r1
 8028568:	9305      	str	r3, [sp, #20]
 802856a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802856e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8028572:	4498      	add	r8, r3
 8028574:	9b04      	ldr	r3, [sp, #16]
 8028576:	3b01      	subs	r3, #1
 8028578:	9304      	str	r3, [sp, #16]
 802857a:	9b04      	ldr	r3, [sp, #16]
 802857c:	3301      	adds	r3, #1
 802857e:	d015      	beq.n	80285ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8028580:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8028584:	42bb      	cmp	r3, r7
 8028586:	d117      	bne.n	80285b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8028588:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802858c:	9b04      	ldr	r3, [sp, #16]
 802858e:	4548      	cmp	r0, r9
 8028590:	f103 33ff 	add.w	r3, r3, #4294967295
 8028594:	d17d      	bne.n	8028692 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8028596:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802859a:	4401      	add	r1, r0
 802859c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80285a0:	4480      	add	r8, r0
 80285a2:	e7e9      	b.n	8028578 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80285a4:	461f      	mov	r7, r3
 80285a6:	e042      	b.n	802862e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80285a8:	2000      	movs	r0, #0
 80285aa:	e002      	b.n	80285b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80285ac:	2900      	cmp	r1, #0
 80285ae:	d16d      	bne.n	802868c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80285b0:	2001      	movs	r0, #1
 80285b2:	b00b      	add	sp, #44	@ 0x2c
 80285b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285b8:	b379      	cbz	r1, 802861a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80285ba:	2f00      	cmp	r7, #0
 80285bc:	db29      	blt.n	8028612 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80285be:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80285c2:	42bb      	cmp	r3, r7
 80285c4:	dd25      	ble.n	8028612 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80285c6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80285ca:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80285ce:	f7ff ff77 	bl	80284c0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80285d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80285d4:	fb10 f003 	smulbb	r0, r0, r3
 80285d8:	b280      	uxth	r0, r0
 80285da:	1c41      	adds	r1, r0, #1
 80285dc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80285e0:	1209      	asrs	r1, r1, #8
 80285e2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80285e6:	d014      	beq.n	8028612 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80285e8:	b2c9      	uxtb	r1, r1
 80285ea:	9808      	ldr	r0, [sp, #32]
 80285ec:	b2ba      	uxth	r2, r7
 80285ee:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80285f0:	9102      	str	r1, [sp, #8]
 80285f2:	2101      	movs	r1, #1
 80285f4:	4413      	add	r3, r2
 80285f6:	4402      	add	r2, r0
 80285f8:	9101      	str	r1, [sp, #4]
 80285fa:	fa0f f18b 	sxth.w	r1, fp
 80285fe:	f8da 0000 	ldr.w	r0, [sl]
 8028602:	b21b      	sxth	r3, r3
 8028604:	9100      	str	r1, [sp, #0]
 8028606:	b212      	sxth	r2, r2
 8028608:	6941      	ldr	r1, [r0, #20]
 802860a:	4650      	mov	r0, sl
 802860c:	460d      	mov	r5, r1
 802860e:	9905      	ldr	r1, [sp, #20]
 8028610:	47a8      	blx	r5
 8028612:	9b04      	ldr	r3, [sp, #16]
 8028614:	1c7a      	adds	r2, r7, #1
 8028616:	3301      	adds	r3, #1
 8028618:	d0ca      	beq.n	80285b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802861a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802861e:	1abb      	subs	r3, r7, r2
 8028620:	2b00      	cmp	r3, #0
 8028622:	dd31      	ble.n	8028688 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028624:	2a00      	cmp	r2, #0
 8028626:	dabd      	bge.n	80285a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8028628:	2f00      	cmp	r7, #0
 802862a:	dd2d      	ble.n	8028688 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802862c:	2200      	movs	r2, #0
 802862e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8028632:	19d1      	adds	r1, r2, r7
 8028634:	4299      	cmp	r1, r3
 8028636:	db02      	blt.n	802863e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8028638:	1a9f      	subs	r7, r3, r2
 802863a:	2f00      	cmp	r7, #0
 802863c:	dd24      	ble.n	8028688 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802863e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8028642:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8028646:	f7ff ff3b 	bl	80284c0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802864a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802864c:	fb10 f003 	smulbb	r0, r0, r3
 8028650:	b280      	uxth	r0, r0
 8028652:	1c41      	adds	r1, r0, #1
 8028654:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028658:	1209      	asrs	r1, r1, #8
 802865a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802865e:	d013      	beq.n	8028688 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028660:	b292      	uxth	r2, r2
 8028662:	9808      	ldr	r0, [sp, #32]
 8028664:	b2c9      	uxtb	r1, r1
 8028666:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8028668:	b23f      	sxth	r7, r7
 802866a:	4413      	add	r3, r2
 802866c:	9102      	str	r1, [sp, #8]
 802866e:	4402      	add	r2, r0
 8028670:	fa0f f18b 	sxth.w	r1, fp
 8028674:	f8da 0000 	ldr.w	r0, [sl]
 8028678:	b21b      	sxth	r3, r3
 802867a:	9100      	str	r1, [sp, #0]
 802867c:	b212      	sxth	r2, r2
 802867e:	9701      	str	r7, [sp, #4]
 8028680:	9905      	ldr	r1, [sp, #20]
 8028682:	6947      	ldr	r7, [r0, #20]
 8028684:	4650      	mov	r0, sl
 8028686:	47b8      	blx	r7
 8028688:	464b      	mov	r3, r9
 802868a:	e75e      	b.n	802854a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802868c:	2f00      	cmp	r7, #0
 802868e:	da96      	bge.n	80285be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8028690:	e78e      	b.n	80285b0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028692:	2900      	cmp	r1, #0
 8028694:	d0f8      	beq.n	8028688 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028696:	e790      	b.n	80285ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08028698 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8028698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802869c:	461e      	mov	r6, r3
 802869e:	4b36      	ldr	r3, [pc, #216]	@ (8028778 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 80286a0:	2500      	movs	r5, #0
 80286a2:	f100 0814 	add.w	r8, r0, #20
 80286a6:	4604      	mov	r4, r0
 80286a8:	4617      	mov	r7, r2
 80286aa:	e9c0 3100 	strd	r3, r1, [r0]
 80286ae:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80286b2:	8185      	strh	r5, [r0, #12]
 80286b4:	8103      	strh	r3, [r0, #8]
 80286b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80286ba:	81c5      	strh	r5, [r0, #14]
 80286bc:	7283      	strb	r3, [r0, #10]
 80286be:	8205      	strh	r5, [r0, #16]
 80286c0:	8245      	strh	r5, [r0, #18]
 80286c2:	4640      	mov	r0, r8
 80286c4:	f7ef fd72 	bl	80181ac <_ZN8touchgfx7OutlineC1Ev>
 80286c8:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 80286cc:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 80286d0:	466b      	mov	r3, sp
 80286d2:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 80286d6:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 80286da:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 80286de:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 80286e2:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 80286e6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 80286ea:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 80286ee:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 80286f2:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 80286f6:	6830      	ldr	r0, [r6, #0]
 80286f8:	6871      	ldr	r1, [r6, #4]
 80286fa:	8872      	ldrh	r2, [r6, #2]
 80286fc:	8835      	ldrh	r5, [r6, #0]
 80286fe:	c303      	stmia	r3!, {r0, r1}
 8028700:	887b      	ldrh	r3, [r7, #2]
 8028702:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8028706:	4413      	add	r3, r2
 8028708:	883a      	ldrh	r2, [r7, #0]
 802870a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802870e:	442a      	add	r2, r5
 8028710:	81e3      	strh	r3, [r4, #14]
 8028712:	8220      	strh	r0, [r4, #16]
 8028714:	4668      	mov	r0, sp
 8028716:	81a2      	strh	r2, [r4, #12]
 8028718:	8261      	strh	r1, [r4, #18]
 802871a:	4639      	mov	r1, r7
 802871c:	f7f1 ff4e 	bl	801a5bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028720:	f104 000c 	add.w	r0, r4, #12
 8028724:	f7f1 ff06 	bl	801a534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028728:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802872c:	f8bd 2000 	ldrh.w	r2, [sp]
 8028730:	4640      	mov	r0, r8
 8028732:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8028736:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802873a:	f7ef fd1b 	bl	8018174 <_ZN8touchgfx7Outline5resetEv>
 802873e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8028742:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8028746:	4620      	mov	r0, r4
 8028748:	015b      	lsls	r3, r3, #5
 802874a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802874c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028750:	015b      	lsls	r3, r3, #5
 8028752:	6523      	str	r3, [r4, #80]	@ 0x50
 8028754:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8028758:	015b      	lsls	r3, r3, #5
 802875a:	6563      	str	r3, [r4, #84]	@ 0x54
 802875c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8028760:	015b      	lsls	r3, r3, #5
 8028762:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028764:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8028768:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802876c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8028770:	b002      	add	sp, #8
 8028772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028776:	bf00      	nop
 8028778:	0802e814 	.word	0x0802e814

0802877c <_ZN8touchgfx6Canvas5closeEv>:
 802877c:	b538      	push	{r3, r4, r5, lr}
 802877e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8028782:	4604      	mov	r4, r0
 8028784:	b193      	cbz	r3, 80287ac <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028786:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802878a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802878e:	4213      	tst	r3, r2
 8028790:	d10c      	bne.n	80287ac <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028792:	f100 0514 	add.w	r5, r0, #20
 8028796:	b123      	cbz	r3, 80287a2 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8028798:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802879c:	4628      	mov	r0, r5
 802879e:	f7ff fea3 	bl	80284e8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80287a2:	4628      	mov	r0, r5
 80287a4:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 80287a8:	f7ff fe9e 	bl	80284e8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80287ac:	2300      	movs	r3, #0
 80287ae:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80287b2:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 80287b6:	4298      	cmp	r0, r3
 80287b8:	bf34      	ite	cc
 80287ba:	2000      	movcc	r0, #0
 80287bc:	2001      	movcs	r0, #1
 80287be:	bd38      	pop	{r3, r4, r5, pc}

080287c0 <_ZN8touchgfx6Canvas6renderEh>:
 80287c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80287c4:	7a85      	ldrb	r5, [r0, #10]
 80287c6:	4604      	mov	r4, r0
 80287c8:	4369      	muls	r1, r5
 80287ca:	1c4d      	adds	r5, r1, #1
 80287cc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80287d0:	122d      	asrs	r5, r5, #8
 80287d2:	f000 8098 	beq.w	8028906 <_ZN8touchgfx6Canvas6renderEh+0x146>
 80287d6:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80287da:	2b00      	cmp	r3, #0
 80287dc:	f000 8093 	beq.w	8028906 <_ZN8touchgfx6Canvas6renderEh+0x146>
 80287e0:	f7ff ffcc 	bl	802877c <_ZN8touchgfx6Canvas5closeEv>
 80287e4:	4607      	mov	r7, r0
 80287e6:	2800      	cmp	r0, #0
 80287e8:	d045      	beq.n	8028876 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80287ea:	6860      	ldr	r0, [r4, #4]
 80287ec:	4e47      	ldr	r6, [pc, #284]	@ (802890c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 80287ee:	6803      	ldr	r3, [r0, #0]
 80287f0:	6837      	ldr	r7, [r6, #0]
 80287f2:	689b      	ldr	r3, [r3, #8]
 80287f4:	4798      	blx	r3
 80287f6:	4601      	mov	r1, r0
 80287f8:	4638      	mov	r0, r7
 80287fa:	f7ec f90d 	bl	8014a18 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80287fe:	4607      	mov	r7, r0
 8028800:	f7df f9dc 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8028804:	6803      	ldr	r3, [r0, #0]
 8028806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028808:	4798      	blx	r3
 802880a:	4680      	mov	r8, r0
 802880c:	f7df f9d6 	bl	8007bbc <_ZN8touchgfx3HAL3lcdEv>
 8028810:	6803      	ldr	r3, [r0, #0]
 8028812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028814:	4798      	blx	r3
 8028816:	280b      	cmp	r0, #11
 8028818:	d85a      	bhi.n	80288d0 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802881a:	e8df f000 	tbb	[pc, r0]
 802881e:	5b50      	.short	0x5b50
 8028820:	3059066b 	.word	0x3059066b
 8028824:	64646440 	.word	0x64646440
 8028828:	6464      	.short	0x6464
 802882a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802882e:	2208      	movs	r2, #8
 8028830:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028834:	fb91 f2f2 	sdiv	r2, r1, r2
 8028838:	fb08 2303 	mla	r3, r8, r3, r2
 802883c:	441f      	add	r7, r3
 802883e:	424b      	negs	r3, r1
 8028840:	f001 0107 	and.w	r1, r1, #7
 8028844:	f003 0307 	and.w	r3, r3, #7
 8028848:	bf58      	it	pl
 802884a:	4259      	negpl	r1, r3
 802884c:	b2c9      	uxtb	r1, r1
 802884e:	b2ed      	uxtb	r5, r5
 8028850:	463a      	mov	r2, r7
 8028852:	fa0f f388 	sxth.w	r3, r8
 8028856:	f104 0014 	add.w	r0, r4, #20
 802885a:	e9cd 1500 	strd	r1, r5, [sp]
 802885e:	6861      	ldr	r1, [r4, #4]
 8028860:	f7ff fe4e 	bl	8028500 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8028864:	4607      	mov	r7, r0
 8028866:	6860      	ldr	r0, [r4, #4]
 8028868:	6803      	ldr	r3, [r0, #0]
 802886a:	691b      	ldr	r3, [r3, #16]
 802886c:	4798      	blx	r3
 802886e:	6830      	ldr	r0, [r6, #0]
 8028870:	6803      	ldr	r3, [r0, #0]
 8028872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028874:	4798      	blx	r3
 8028876:	4638      	mov	r0, r7
 8028878:	b002      	add	sp, #8
 802887a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802887e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8028882:	2204      	movs	r2, #4
 8028884:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8028888:	fb91 f2f2 	sdiv	r2, r1, r2
 802888c:	fb08 2303 	mla	r3, r8, r3, r2
 8028890:	441f      	add	r7, r3
 8028892:	424b      	negs	r3, r1
 8028894:	f001 0103 	and.w	r1, r1, #3
 8028898:	f003 0303 	and.w	r3, r3, #3
 802889c:	e7d4      	b.n	8028848 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802889e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80288a2:	2202      	movs	r2, #2
 80288a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80288a8:	2900      	cmp	r1, #0
 80288aa:	fb91 f2f2 	sdiv	r2, r1, r2
 80288ae:	f001 0101 	and.w	r1, r1, #1
 80288b2:	fb08 2303 	mla	r3, r8, r3, r2
 80288b6:	bfb8      	it	lt
 80288b8:	4249      	neglt	r1, r1
 80288ba:	441f      	add	r7, r3
 80288bc:	e7c6      	b.n	802884c <_ZN8touchgfx6Canvas6renderEh+0x8c>
 80288be:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80288c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80288c6:	fb08 f303 	mul.w	r3, r8, r3
 80288ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80288ce:	441f      	add	r7, r3
 80288d0:	2100      	movs	r1, #0
 80288d2:	e7bc      	b.n	802884e <_ZN8touchgfx6Canvas6renderEh+0x8e>
 80288d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80288d8:	2103      	movs	r1, #3
 80288da:	fb08 f203 	mul.w	r2, r8, r3
 80288de:	89a3      	ldrh	r3, [r4, #12]
 80288e0:	fb13 2301 	smlabb	r3, r3, r1, r2
 80288e4:	e7f3      	b.n	80288ce <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80288e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80288ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80288ee:	fb08 2303 	mla	r3, r8, r3, r2
 80288f2:	e7ec      	b.n	80288ce <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80288f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80288f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80288fc:	fb08 f303 	mul.w	r3, r8, r3
 8028900:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8028904:	e7e3      	b.n	80288ce <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8028906:	2701      	movs	r7, #1
 8028908:	e7b5      	b.n	8028876 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802890a:	bf00      	nop
 802890c:	240285b4 	.word	0x240285b4

08028910 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8028910:	4b06      	ldr	r3, [pc, #24]	@ (802892c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8028912:	b510      	push	{r4, lr}
 8028914:	781b      	ldrb	r3, [r3, #0]
 8028916:	2b01      	cmp	r3, #1
 8028918:	d107      	bne.n	802892a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802891a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802891e:	680b      	ldr	r3, [r1, #0]
 8028920:	6814      	ldr	r4, [r2, #0]
 8028922:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8028926:	6013      	str	r3, [r2, #0]
 8028928:	600c      	str	r4, [r1, #0]
 802892a:	bd10      	pop	{r4, pc}
 802892c:	240285ac 	.word	0x240285ac

08028930 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8028930:	b513      	push	{r0, r1, r4, lr}
 8028932:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8028936:	4604      	mov	r4, r0
 8028938:	e9cd 2100 	strd	r2, r1, [sp]
 802893c:	b9a3      	cbnz	r3, 8028968 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802893e:	466a      	mov	r2, sp
 8028940:	a901      	add	r1, sp, #4
 8028942:	4620      	mov	r0, r4
 8028944:	f7ff ffe4 	bl	8028910 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028948:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802894a:	9901      	ldr	r1, [sp, #4]
 802894c:	9a00      	ldr	r2, [sp, #0]
 802894e:	1ac9      	subs	r1, r1, r3
 8028950:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8028952:	1ad2      	subs	r2, r2, r3
 8028954:	9101      	str	r1, [sp, #4]
 8028956:	2a00      	cmp	r2, #0
 8028958:	9200      	str	r2, [sp, #0]
 802895a:	da0b      	bge.n	8028974 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802895c:	2301      	movs	r3, #1
 802895e:	2900      	cmp	r1, #0
 8028960:	da0e      	bge.n	8028980 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8028962:	f043 0304 	orr.w	r3, r3, #4
 8028966:	e013      	b.n	8028990 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8028968:	f7ff ff08 	bl	802877c <_ZN8touchgfx6Canvas5closeEv>
 802896c:	2800      	cmp	r0, #0
 802896e:	d1e6      	bne.n	802893e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8028970:	b002      	add	sp, #8
 8028972:	bd10      	pop	{r4, pc}
 8028974:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028976:	429a      	cmp	r2, r3
 8028978:	bfac      	ite	ge
 802897a:	2302      	movge	r3, #2
 802897c:	2300      	movlt	r3, #0
 802897e:	e7ee      	b.n	802895e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8028980:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8028982:	4281      	cmp	r1, r0
 8028984:	bfac      	ite	ge
 8028986:	2008      	movge	r0, #8
 8028988:	2000      	movlt	r0, #0
 802898a:	4318      	orrs	r0, r3
 802898c:	b2c3      	uxtb	r3, r0
 802898e:	b158      	cbz	r0, 80289a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8028990:	2200      	movs	r2, #0
 8028992:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8028996:	9901      	ldr	r1, [sp, #4]
 8028998:	9a00      	ldr	r2, [sp, #0]
 802899a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802899c:	6722      	str	r2, [r4, #112]	@ 0x70
 802899e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 80289a2:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 80289a6:	e7e3      	b.n	8028970 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80289a8:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80289ac:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80289b0:	4298      	cmp	r0, r3
 80289b2:	d803      	bhi.n	80289bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80289b4:	f104 0014 	add.w	r0, r4, #20
 80289b8:	f7f0 f8cc 	bl	8018b54 <_ZN8touchgfx7Outline6moveToEii>
 80289bc:	2301      	movs	r3, #1
 80289be:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80289c2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80289c6:	2300      	movs	r3, #0
 80289c8:	e7e5      	b.n	8028996 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

080289ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80289ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80289cc:	ab02      	add	r3, sp, #8
 80289ce:	4604      	mov	r4, r0
 80289d0:	9101      	str	r1, [sp, #4]
 80289d2:	a901      	add	r1, sp, #4
 80289d4:	f843 2d08 	str.w	r2, [r3, #-8]!
 80289d8:	461a      	mov	r2, r3
 80289da:	f7ff ff99 	bl	8028910 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80289de:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80289e0:	9901      	ldr	r1, [sp, #4]
 80289e2:	9a00      	ldr	r2, [sp, #0]
 80289e4:	1ac9      	subs	r1, r1, r3
 80289e6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80289e8:	1ad2      	subs	r2, r2, r3
 80289ea:	9101      	str	r1, [sp, #4]
 80289ec:	2a00      	cmp	r2, #0
 80289ee:	9200      	str	r2, [sp, #0]
 80289f0:	db1c      	blt.n	8028a2c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80289f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80289f4:	429a      	cmp	r2, r3
 80289f6:	bfac      	ite	ge
 80289f8:	2002      	movge	r0, #2
 80289fa:	2000      	movlt	r0, #0
 80289fc:	2900      	cmp	r1, #0
 80289fe:	db17      	blt.n	8028a30 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8028a00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8028a02:	4299      	cmp	r1, r3
 8028a04:	bfac      	ite	ge
 8028a06:	2308      	movge	r3, #8
 8028a08:	2300      	movlt	r3, #0
 8028a0a:	4303      	orrs	r3, r0
 8028a0c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8028a10:	b2dd      	uxtb	r5, r3
 8028a12:	b978      	cbnz	r0, 8028a34 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8028a14:	f104 0014 	add.w	r0, r4, #20
 8028a18:	f7ff fd66 	bl	80284e8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8028a1c:	9b01      	ldr	r3, [sp, #4]
 8028a1e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8028a22:	6623      	str	r3, [r4, #96]	@ 0x60
 8028a24:	9b00      	ldr	r3, [sp, #0]
 8028a26:	6663      	str	r3, [r4, #100]	@ 0x64
 8028a28:	b002      	add	sp, #8
 8028a2a:	bd70      	pop	{r4, r5, r6, pc}
 8028a2c:	2001      	movs	r0, #1
 8028a2e:	e7e5      	b.n	80289fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8028a30:	2304      	movs	r3, #4
 8028a32:	e7ea      	b.n	8028a0a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8028a34:	b113      	cbz	r3, 8028a3c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8028a36:	ea10 0305 	ands.w	r3, r0, r5
 8028a3a:	d11c      	bne.n	8028a76 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8028a3c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8028a40:	f104 0614 	add.w	r6, r4, #20
 8028a44:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8028a48:	b98b      	cbnz	r3, 8028a6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8028a4a:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8028a4e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8028a52:	4298      	cmp	r0, r3
 8028a54:	d802      	bhi.n	8028a5c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8028a56:	4630      	mov	r0, r6
 8028a58:	f7f0 f87c 	bl	8018b54 <_ZN8touchgfx7Outline6moveToEii>
 8028a5c:	2301      	movs	r3, #1
 8028a5e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8028a62:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8028a66:	4630      	mov	r0, r6
 8028a68:	e9dd 2100 	ldrd	r2, r1, [sp]
 8028a6c:	e7d4      	b.n	8028a18 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8028a6e:	4630      	mov	r0, r6
 8028a70:	f7ff fd3a 	bl	80284e8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8028a74:	e7f7      	b.n	8028a66 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8028a76:	461d      	mov	r5, r3
 8028a78:	e7d0      	b.n	8028a1c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08028a7c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8028a7c:	b538      	push	{r3, r4, r5, lr}
 8028a7e:	ed2d 8b10 	vpush	{d8-d15}
 8028a82:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8028a86:	4605      	mov	r5, r0
 8028a88:	eeb0 ca40 	vmov.f32	s24, s0
 8028a8c:	460c      	mov	r4, r1
 8028a8e:	eef0 ca60 	vmov.f32	s25, s1
 8028a92:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8028bf0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8028a96:	eeb0 da41 	vmov.f32	s26, s2
 8028a9a:	eef0 da61 	vmov.f32	s27, s3
 8028a9e:	eeb0 ea42 	vmov.f32	s28, s4
 8028aa2:	eef0 ea62 	vmov.f32	s29, s5
 8028aa6:	eef0 aa6b 	vmov.f32	s21, s23
 8028aaa:	2c08      	cmp	r4, #8
 8028aac:	d86e      	bhi.n	8028b8c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8028aae:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8028ab2:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8028ab6:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8028aba:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8028abe:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8028ac2:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8028ac6:	ee7c faad 	vadd.f32	s31, s25, s27
 8028aca:	eee6 7a07 	vfma.f32	s15, s12, s14
 8028ace:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8028ad2:	ee3d aaae 	vadd.f32	s20, s27, s29
 8028ad6:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8028ada:	ee6f faab 	vmul.f32	s31, s31, s23
 8028ade:	ee69 9aab 	vmul.f32	s19, s19, s23
 8028ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8028ae6:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8028aea:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8028aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028af2:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8028af6:	ee68 8aab 	vmul.f32	s17, s17, s23
 8028afa:	bf48      	it	mi
 8028afc:	eef1 7a67 	vnegmi.f32	s15, s15
 8028b00:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8028b04:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8028b08:	eef4 7acb 	vcmpe.f32	s15, s22
 8028b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b10:	dd3f      	ble.n	8028b92 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8028b12:	ee27 7a07 	vmul.f32	s14, s14, s14
 8028b16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8028b1a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8028b1e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8028b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8028b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b2a:	d847      	bhi.n	8028bbc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8028b2c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8028b30:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8028b34:	f000 fa57 	bl	8028fe6 <atan2f>
 8028b38:	eeb0 8a40 	vmov.f32	s16, s0
 8028b3c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8028b40:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8028b44:	f000 fa4f 	bl	8028fe6 <atan2f>
 8028b48:	ee38 0a40 	vsub.f32	s0, s16, s0
 8028b4c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8028bf4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8028b50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8028b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b58:	bf48      	it	mi
 8028b5a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8028b5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b66:	bfa4      	itt	ge
 8028b68:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8028bf8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8028b6c:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8028b70:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8028bfc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8028b74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028b7c:	d51e      	bpl.n	8028bbc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8028b7e:	eef0 0a49 	vmov.f32	s1, s18
 8028b82:	4628      	mov	r0, r5
 8028b84:	eeb0 0a68 	vmov.f32	s0, s17
 8028b88:	f7ec fdc6 	bl	8015718 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8028b8c:	ecbd 8b10 	vpop	{d8-d15}
 8028b90:	bd38      	pop	{r3, r4, r5, pc}
 8028b92:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8028b96:	eeb0 7a68 	vmov.f32	s14, s17
 8028b9a:	eef0 6a49 	vmov.f32	s13, s18
 8028b9e:	eea7 7aea 	vfms.f32	s14, s15, s21
 8028ba2:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8028ba6:	eee7 6aea 	vfms.f32	s13, s15, s21
 8028baa:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8028bae:	eee7 7a07 	vfma.f32	s15, s14, s14
 8028bb2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8028bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028bba:	d9e0      	bls.n	8028b7e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8028bbc:	3401      	adds	r4, #1
 8028bbe:	eef0 0a6c 	vmov.f32	s1, s25
 8028bc2:	eeb0 0a4c 	vmov.f32	s0, s24
 8028bc6:	4628      	mov	r0, r5
 8028bc8:	4621      	mov	r1, r4
 8028bca:	eef0 2a49 	vmov.f32	s5, s18
 8028bce:	eeb0 2a68 	vmov.f32	s4, s17
 8028bd2:	eef0 1a6f 	vmov.f32	s3, s31
 8028bd6:	eeb0 1a4f 	vmov.f32	s2, s30
 8028bda:	f7ff ff4f 	bl	8028a7c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8028bde:	eef0 da4a 	vmov.f32	s27, s20
 8028be2:	eeb0 da69 	vmov.f32	s26, s19
 8028be6:	eef0 ca49 	vmov.f32	s25, s18
 8028bea:	eeb0 ca68 	vmov.f32	s24, s17
 8028bee:	e75c      	b.n	8028aaa <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8028bf0:	2edbe6ff 	.word	0x2edbe6ff
 8028bf4:	40490fdb 	.word	0x40490fdb
 8028bf8:	40c90fdb 	.word	0x40c90fdb
 8028bfc:	3dcccccd 	.word	0x3dcccccd

08028c00 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8028c00:	b530      	push	{r4, r5, lr}
 8028c02:	ed2d 8b10 	vpush	{d8-d15}
 8028c06:	eef0 8a40 	vmov.f32	s17, s0
 8028c0a:	b085      	sub	sp, #20
 8028c0c:	eef0 9a60 	vmov.f32	s19, s1
 8028c10:	4604      	mov	r4, r0
 8028c12:	eef0 fa41 	vmov.f32	s31, s2
 8028c16:	460d      	mov	r5, r1
 8028c18:	eeb0 fa61 	vmov.f32	s30, s3
 8028c1c:	eef0 ba42 	vmov.f32	s23, s4
 8028c20:	eeb0 ca62 	vmov.f32	s24, s5
 8028c24:	eef0 aa43 	vmov.f32	s21, s6
 8028c28:	eeb0 ba63 	vmov.f32	s22, s7
 8028c2c:	2d08      	cmp	r5, #8
 8028c2e:	f200 8113 	bhi.w	8028e58 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8028c32:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8028c36:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8028c3a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8028c3e:	ee38 daaf 	vadd.f32	s26, s17, s31
 8028c42:	ee26 6a27 	vmul.f32	s12, s12, s15
 8028c46:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8028c4a:	ee2d da27 	vmul.f32	s26, s26, s15
 8028c4e:	ed8d 6a01 	vstr	s12, [sp, #4]
 8028c52:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8028c56:	ee6c caa7 	vmul.f32	s25, s25, s15
 8028c5a:	eeb0 ea4d 	vmov.f32	s28, s26
 8028c5e:	ee79 da8f 	vadd.f32	s27, s19, s30
 8028c62:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8028c66:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8028c6a:	ee66 6a27 	vmul.f32	s13, s12, s15
 8028c6e:	ee6d daa7 	vmul.f32	s27, s27, s15
 8028c72:	edcd 6a03 	vstr	s13, [sp, #12]
 8028c76:	eef0 6a6c 	vmov.f32	s13, s25
 8028c7a:	eef0 ea6d 	vmov.f32	s29, s27
 8028c7e:	ee2e ea27 	vmul.f32	s28, s28, s15
 8028c82:	eee7 6a27 	vfma.f32	s13, s14, s15
 8028c86:	eee7 ea27 	vfma.f32	s29, s14, s15
 8028c8a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8028c8e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8028c92:	eef0 6a67 	vmov.f32	s13, s15
 8028c96:	ed8d 7a02 	vstr	s14, [sp, #8]
 8028c9a:	ed9d 7a03 	vldr	s14, [sp, #12]
 8028c9e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8028ca2:	ed9d 7a02 	vldr	s14, [sp, #8]
 8028ca6:	ee3e aa87 	vadd.f32	s20, s29, s14
 8028caa:	ee29 9a27 	vmul.f32	s18, s18, s15
 8028cae:	ee2a aa27 	vmul.f32	s20, s20, s15
 8028cb2:	2d00      	cmp	r5, #0
 8028cb4:	f000 810b 	beq.w	8028ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028cb8:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8028cbc:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8028f14 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8028cc0:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8028cc4:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8028cc8:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8028ccc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8028cd0:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8028cd4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8028cd8:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8028cdc:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8028ce0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8028ce4:	eea5 6a27 	vfma.f32	s12, s10, s15
 8028ce8:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8028cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cf0:	bf48      	it	mi
 8028cf2:	eeb1 7a47 	vnegmi.f32	s14, s14
 8028cf6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8028cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028cfe:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8028d02:	bf48      	it	mi
 8028d04:	eeb1 6a46 	vnegmi.f32	s12, s12
 8028d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d0c:	f340 80a8 	ble.w	8028e60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8028d10:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8028d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d18:	dd5a      	ble.n	8028dd0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8028d1a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8028d1e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8028d22:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8028d26:	ee27 7a07 	vmul.f32	s14, s14, s14
 8028d2a:	ee65 7a85 	vmul.f32	s15, s11, s10
 8028d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8028d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d36:	f200 80ca 	bhi.w	8028ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028d3a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8028d3e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8028d42:	f000 f950 	bl	8028fe6 <atan2f>
 8028d46:	eeb0 8a40 	vmov.f32	s16, s0
 8028d4a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8028d4e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8028d52:	f000 f948 	bl	8028fe6 <atan2f>
 8028d56:	ee38 fa40 	vsub.f32	s30, s16, s0
 8028d5a:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8028d5e:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8028d62:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8028d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d6a:	bf48      	it	mi
 8028d6c:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8028d70:	f000 f939 	bl	8028fe6 <atan2f>
 8028d74:	ee30 0a48 	vsub.f32	s0, s0, s16
 8028d78:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8028f18 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8028d7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8028d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d84:	eeb4 fae7 	vcmpe.f32	s30, s15
 8028d88:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8028f18 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8028d8c:	bf48      	it	mi
 8028d8e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8028d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028d96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028d9a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8028f1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8028d9e:	bfa4      	itt	ge
 8028da0:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8028f20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8028da4:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8028da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028dac:	bfa4      	itt	ge
 8028dae:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8028f20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8028db2:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8028db6:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8028dba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028dc2:	f140 8084 	bpl.w	8028ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028dc6:	eef0 0a4a 	vmov.f32	s1, s20
 8028dca:	eeb0 0a49 	vmov.f32	s0, s18
 8028dce:	e040      	b.n	8028e52 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8028dd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8028dd4:	ee27 7a07 	vmul.f32	s14, s14, s14
 8028dd8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8028ddc:	ee67 7a85 	vmul.f32	s15, s15, s10
 8028de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8028de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028de8:	d871      	bhi.n	8028ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028dea:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8028dee:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8028df2:	f000 f8f8 	bl	8028fe6 <atan2f>
 8028df6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8028dfa:	eeb0 8a40 	vmov.f32	s16, s0
 8028dfe:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8028e02:	f000 f8f0 	bl	8028fe6 <atan2f>
 8028e06:	ee38 0a40 	vsub.f32	s0, s16, s0
 8028e0a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8028f18 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8028e0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8028e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e16:	bf48      	it	mi
 8028e18:	eeb1 0a40 	vnegmi.f32	s0, s0
 8028e1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e24:	bfa4      	itt	ge
 8028e26:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8028f20 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8028e2a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8028e2e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8028f1c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8028e32:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e3a:	d548      	bpl.n	8028ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028e3c:	eef0 0a4f 	vmov.f32	s1, s30
 8028e40:	4620      	mov	r0, r4
 8028e42:	eeb0 0a6f 	vmov.f32	s0, s31
 8028e46:	f7ec fc67 	bl	8015718 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8028e4a:	eef0 0a4c 	vmov.f32	s1, s24
 8028e4e:	eeb0 0a6b 	vmov.f32	s0, s23
 8028e52:	4620      	mov	r0, r4
 8028e54:	f7ec fc60 	bl	8015718 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8028e58:	b005      	add	sp, #20
 8028e5a:	ecbd 8b10 	vpop	{d8-d15}
 8028e5e:	bd30      	pop	{r4, r5, pc}
 8028e60:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8028f14 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8028e64:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8028e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e6c:	dd19      	ble.n	8028ea2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8028e6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8028e72:	ee26 7a06 	vmul.f32	s14, s12, s12
 8028e76:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8028e7a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8028e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8028e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028e86:	d822      	bhi.n	8028ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8028e88:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8028e8c:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8028e90:	f000 f8a9 	bl	8028fe6 <atan2f>
 8028e94:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8028e98:	eeb0 8a40 	vmov.f32	s16, s0
 8028e9c:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8028ea0:	e7af      	b.n	8028e02 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8028ea2:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8028ea6:	eeb0 7a49 	vmov.f32	s14, s18
 8028eaa:	eeb0 6a4a 	vmov.f32	s12, s20
 8028eae:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8028eb2:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8028eb6:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8028eba:	ee66 7a06 	vmul.f32	s15, s12, s12
 8028ebe:	eee7 7a07 	vfma.f32	s15, s14, s14
 8028ec2:	eef4 7ac5 	vcmpe.f32	s15, s10
 8028ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028eca:	f67f af7c 	bls.w	8028dc6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8028ece:	3501      	adds	r5, #1
 8028ed0:	eef0 0a69 	vmov.f32	s1, s19
 8028ed4:	eeb0 0a68 	vmov.f32	s0, s17
 8028ed8:	4620      	mov	r0, r4
 8028eda:	4629      	mov	r1, r5
 8028edc:	eef0 3a4a 	vmov.f32	s7, s20
 8028ee0:	eeb0 3a49 	vmov.f32	s6, s18
 8028ee4:	eef0 2a6e 	vmov.f32	s5, s29
 8028ee8:	eeb0 2a4e 	vmov.f32	s4, s28
 8028eec:	eef0 1a6d 	vmov.f32	s3, s27
 8028ef0:	eeb0 1a4d 	vmov.f32	s2, s26
 8028ef4:	f7ff fe84 	bl	8028c00 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8028ef8:	eeb0 ca6c 	vmov.f32	s24, s25
 8028efc:	eddd ba01 	vldr	s23, [sp, #4]
 8028f00:	eef0 9a4a 	vmov.f32	s19, s20
 8028f04:	ed9d fa02 	vldr	s30, [sp, #8]
 8028f08:	eef0 8a49 	vmov.f32	s17, s18
 8028f0c:	eddd fa03 	vldr	s31, [sp, #12]
 8028f10:	e68c      	b.n	8028c2c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8028f12:	bf00      	nop
 8028f14:	2edbe6ff 	.word	0x2edbe6ff
 8028f18:	40490fdb 	.word	0x40490fdb
 8028f1c:	3dcccccd 	.word	0x3dcccccd
 8028f20:	40c90fdb 	.word	0x40c90fdb

08028f24 <_ZN8touchgfx6CanvasD1Ev>:
 8028f24:	4b04      	ldr	r3, [pc, #16]	@ (8028f38 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8028f26:	b510      	push	{r4, lr}
 8028f28:	4604      	mov	r4, r0
 8028f2a:	f840 3b14 	str.w	r3, [r0], #20
 8028f2e:	f7ef f919 	bl	8018164 <_ZN8touchgfx7OutlineD1Ev>
 8028f32:	4620      	mov	r0, r4
 8028f34:	bd10      	pop	{r4, pc}
 8028f36:	bf00      	nop
 8028f38:	0802e814 	.word	0x0802e814

08028f3c <_ZN8touchgfx6CanvasD0Ev>:
 8028f3c:	b510      	push	{r4, lr}
 8028f3e:	4604      	mov	r4, r0
 8028f40:	f7ff fff0 	bl	8028f24 <_ZN8touchgfx6CanvasD1Ev>
 8028f44:	2174      	movs	r1, #116	@ 0x74
 8028f46:	4620      	mov	r0, r4
 8028f48:	f000 f826 	bl	8028f98 <_ZdlPvj>
 8028f4c:	4620      	mov	r0, r4
 8028f4e:	bd10      	pop	{r4, pc}

08028f50 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8028f50:	790b      	ldrb	r3, [r1, #4]
 8028f52:	2b00      	cmp	r3, #0
 8028f54:	bf0c      	ite	eq
 8028f56:	2301      	moveq	r3, #1
 8028f58:	2300      	movne	r3, #0
 8028f5a:	b570      	push	{r4, r5, r6, lr}
 8028f5c:	4604      	mov	r4, r0
 8028f5e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8028f62:	460e      	mov	r6, r1
 8028f64:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8028f68:	d109      	bne.n	8028f7e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8028f6a:	b14d      	cbz	r5, 8028f80 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8028f6c:	7933      	ldrb	r3, [r6, #4]
 8028f6e:	2b01      	cmp	r3, #1
 8028f70:	d10c      	bne.n	8028f8c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028f72:	6823      	ldr	r3, [r4, #0]
 8028f74:	4620      	mov	r0, r4
 8028f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8028f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028f7c:	4718      	bx	r3
 8028f7e:	b12d      	cbz	r5, 8028f8c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028f80:	6823      	ldr	r3, [r4, #0]
 8028f82:	4620      	mov	r0, r4
 8028f84:	695b      	ldr	r3, [r3, #20]
 8028f86:	4798      	blx	r3
 8028f88:	2d00      	cmp	r5, #0
 8028f8a:	d1ef      	bne.n	8028f6c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8028f8c:	bd70      	pop	{r4, r5, r6, pc}

08028f8e <__aeabi_atexit>:
 8028f8e:	460b      	mov	r3, r1
 8028f90:	4601      	mov	r1, r0
 8028f92:	4618      	mov	r0, r3
 8028f94:	f000 bc5a 	b.w	802984c <__cxa_atexit>

08028f98 <_ZdlPvj>:
 8028f98:	f000 b812 	b.w	8028fc0 <_ZdlPv>

08028f9c <__cxa_guard_acquire>:
 8028f9c:	6802      	ldr	r2, [r0, #0]
 8028f9e:	07d2      	lsls	r2, r2, #31
 8028fa0:	4603      	mov	r3, r0
 8028fa2:	d405      	bmi.n	8028fb0 <__cxa_guard_acquire+0x14>
 8028fa4:	7842      	ldrb	r2, [r0, #1]
 8028fa6:	b102      	cbz	r2, 8028faa <__cxa_guard_acquire+0xe>
 8028fa8:	deff      	udf	#255	@ 0xff
 8028faa:	2001      	movs	r0, #1
 8028fac:	7058      	strb	r0, [r3, #1]
 8028fae:	4770      	bx	lr
 8028fb0:	2000      	movs	r0, #0
 8028fb2:	4770      	bx	lr

08028fb4 <__cxa_guard_release>:
 8028fb4:	2301      	movs	r3, #1
 8028fb6:	6003      	str	r3, [r0, #0]
 8028fb8:	4770      	bx	lr

08028fba <__cxa_pure_virtual>:
 8028fba:	b508      	push	{r3, lr}
 8028fbc:	f000 f80e 	bl	8028fdc <_ZSt9terminatev>

08028fc0 <_ZdlPv>:
 8028fc0:	f000 bb8e 	b.w	80296e0 <free>

08028fc4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028fc4:	b508      	push	{r3, lr}
 8028fc6:	4780      	blx	r0
 8028fc8:	f000 fb57 	bl	802967a <abort>

08028fcc <_ZSt13get_terminatev>:
 8028fcc:	4b02      	ldr	r3, [pc, #8]	@ (8028fd8 <_ZSt13get_terminatev+0xc>)
 8028fce:	6818      	ldr	r0, [r3, #0]
 8028fd0:	f3bf 8f5b 	dmb	ish
 8028fd4:	4770      	bx	lr
 8028fd6:	bf00      	nop
 8028fd8:	240000d8 	.word	0x240000d8

08028fdc <_ZSt9terminatev>:
 8028fdc:	b508      	push	{r3, lr}
 8028fde:	f7ff fff5 	bl	8028fcc <_ZSt13get_terminatev>
 8028fe2:	f7ff ffef 	bl	8028fc4 <_ZN10__cxxabiv111__terminateEPFvvE>

08028fe6 <atan2f>:
 8028fe6:	f000 b9cf 	b.w	8029388 <__ieee754_atan2f>
	...

08028fec <sqrtf>:
 8028fec:	b508      	push	{r3, lr}
 8028fee:	ed2d 8b02 	vpush	{d8}
 8028ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8028ff6:	f000 f9c4 	bl	8029382 <__ieee754_sqrtf>
 8028ffa:	eeb4 8a48 	vcmp.f32	s16, s16
 8028ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029002:	d60c      	bvs.n	802901e <sqrtf+0x32>
 8029004:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8029024 <sqrtf+0x38>
 8029008:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029010:	d505      	bpl.n	802901e <sqrtf+0x32>
 8029012:	f000 ffa1 	bl	8029f58 <__errno>
 8029016:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802901a:	2321      	movs	r3, #33	@ 0x21
 802901c:	6003      	str	r3, [r0, #0]
 802901e:	ecbd 8b02 	vpop	{d8}
 8029022:	bd08      	pop	{r3, pc}
 8029024:	00000000 	.word	0x00000000

08029028 <sinf_poly>:
 8029028:	07cb      	lsls	r3, r1, #31
 802902a:	d412      	bmi.n	8029052 <sinf_poly+0x2a>
 802902c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029030:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029034:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029038:	eea6 7b01 	vfma.f64	d7, d6, d1
 802903c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029040:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029044:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029048:	eea7 0b01 	vfma.f64	d0, d7, d1
 802904c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029050:	4770      	bx	lr
 8029052:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029056:	ee21 5b01 	vmul.f64	d5, d1, d1
 802905a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802905e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029062:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029066:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802906a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802906e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029072:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029076:	eea5 0b06 	vfma.f64	d0, d5, d6
 802907a:	e7e5      	b.n	8029048 <sinf_poly+0x20>
 802907c:	0000      	movs	r0, r0
	...

08029080 <sinf>:
 8029080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029082:	ee10 4a10 	vmov	r4, s0
 8029086:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802908a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802908e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8029092:	eef0 7a40 	vmov.f32	s15, s0
 8029096:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802909a:	d218      	bcs.n	80290ce <sinf+0x4e>
 802909c:	ee26 1b06 	vmul.f64	d1, d6, d6
 80290a0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80290a4:	d20a      	bcs.n	80290bc <sinf+0x3c>
 80290a6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 80290aa:	d103      	bne.n	80290b4 <sinf+0x34>
 80290ac:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80290b0:	ed8d 1a01 	vstr	s2, [sp, #4]
 80290b4:	eeb0 0a67 	vmov.f32	s0, s15
 80290b8:	b003      	add	sp, #12
 80290ba:	bd30      	pop	{r4, r5, pc}
 80290bc:	483a      	ldr	r0, [pc, #232]	@ (80291a8 <sinf+0x128>)
 80290be:	eeb0 0b46 	vmov.f64	d0, d6
 80290c2:	2100      	movs	r1, #0
 80290c4:	b003      	add	sp, #12
 80290c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80290ca:	f7ff bfad 	b.w	8029028 <sinf_poly>
 80290ce:	f240 422e 	movw	r2, #1070	@ 0x42e
 80290d2:	4293      	cmp	r3, r2
 80290d4:	d824      	bhi.n	8029120 <sinf+0xa0>
 80290d6:	4b34      	ldr	r3, [pc, #208]	@ (80291a8 <sinf+0x128>)
 80290d8:	ed93 7b08 	vldr	d7, [r3, #32]
 80290dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80290e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80290e4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80290e8:	ee17 1a90 	vmov	r1, s15
 80290ec:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80290f0:	1609      	asrs	r1, r1, #24
 80290f2:	ee07 1a90 	vmov	s15, r1
 80290f6:	f001 0203 	and.w	r2, r1, #3
 80290fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80290fe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8029102:	ed92 0b00 	vldr	d0, [r2]
 8029106:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802910a:	f011 0f02 	tst.w	r1, #2
 802910e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8029112:	bf08      	it	eq
 8029114:	4618      	moveq	r0, r3
 8029116:	ee26 1b06 	vmul.f64	d1, d6, d6
 802911a:	ee20 0b06 	vmul.f64	d0, d0, d6
 802911e:	e7d1      	b.n	80290c4 <sinf+0x44>
 8029120:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029124:	d237      	bcs.n	8029196 <sinf+0x116>
 8029126:	4921      	ldr	r1, [pc, #132]	@ (80291ac <sinf+0x12c>)
 8029128:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802912c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029130:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029134:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029138:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802913c:	6a10      	ldr	r0, [r2, #32]
 802913e:	6912      	ldr	r2, [r2, #16]
 8029140:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029144:	40ab      	lsls	r3, r5
 8029146:	fba0 5003 	umull	r5, r0, r0, r3
 802914a:	4359      	muls	r1, r3
 802914c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029150:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029154:	0f9d      	lsrs	r5, r3, #30
 8029156:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802915a:	1ac9      	subs	r1, r1, r3
 802915c:	f7d7 fa9e 	bl	800069c <__aeabi_l2d>
 8029160:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029164:	4b10      	ldr	r3, [pc, #64]	@ (80291a8 <sinf+0x128>)
 8029166:	f004 0203 	and.w	r2, r4, #3
 802916a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802916e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80291a0 <sinf+0x120>
 8029172:	ed92 0b00 	vldr	d0, [r2]
 8029176:	ec41 0b17 	vmov	d7, r0, r1
 802917a:	f014 0f02 	tst.w	r4, #2
 802917e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029182:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029186:	4629      	mov	r1, r5
 8029188:	bf08      	it	eq
 802918a:	4618      	moveq	r0, r3
 802918c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029190:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029194:	e796      	b.n	80290c4 <sinf+0x44>
 8029196:	b003      	add	sp, #12
 8029198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802919c:	f000 b8e2 	b.w	8029364 <__math_invalidf>
 80291a0:	54442d18 	.word	0x54442d18
 80291a4:	3c1921fb 	.word	0x3c1921fb
 80291a8:	0802e880 	.word	0x0802e880
 80291ac:	0802e820 	.word	0x0802e820

080291b0 <sinf_poly>:
 80291b0:	07cb      	lsls	r3, r1, #31
 80291b2:	d412      	bmi.n	80291da <sinf_poly+0x2a>
 80291b4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80291b8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80291bc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80291c0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80291c4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80291c8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80291cc:	eea6 0b05 	vfma.f64	d0, d6, d5
 80291d0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80291d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80291d8:	4770      	bx	lr
 80291da:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80291de:	ee21 5b01 	vmul.f64	d5, d1, d1
 80291e2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80291e6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80291ea:	eea1 7b06 	vfma.f64	d7, d1, d6
 80291ee:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80291f2:	eea1 0b06 	vfma.f64	d0, d1, d6
 80291f6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80291fa:	ee21 1b05 	vmul.f64	d1, d1, d5
 80291fe:	eea5 0b06 	vfma.f64	d0, d5, d6
 8029202:	e7e5      	b.n	80291d0 <sinf_poly+0x20>
 8029204:	0000      	movs	r0, r0
	...

08029208 <cosf>:
 8029208:	b538      	push	{r3, r4, r5, lr}
 802920a:	ee10 4a10 	vmov	r4, s0
 802920e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8029212:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8029216:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802921a:	d21f      	bcs.n	802925c <cosf+0x54>
 802921c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8029220:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029224:	f0c0 8082 	bcc.w	802932c <cosf+0x124>
 8029228:	ee27 4b07 	vmul.f64	d4, d7, d7
 802922c:	4b44      	ldr	r3, [pc, #272]	@ (8029340 <cosf+0x138>)
 802922e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8029232:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8029236:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802923a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802923e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8029242:	eea7 0b05 	vfma.f64	d0, d7, d5
 8029246:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 802924a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802924e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8029252:	eea6 0b07 	vfma.f64	d0, d6, d7
 8029256:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802925a:	bd38      	pop	{r3, r4, r5, pc}
 802925c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029260:	4293      	cmp	r3, r2
 8029262:	d829      	bhi.n	80292b8 <cosf+0xb0>
 8029264:	4b36      	ldr	r3, [pc, #216]	@ (8029340 <cosf+0x138>)
 8029266:	ed93 6b08 	vldr	d6, [r3, #32]
 802926a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802926e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8029272:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029276:	ee16 1a90 	vmov	r1, s13
 802927a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802927e:	1609      	asrs	r1, r1, #24
 8029280:	ee06 1a90 	vmov	s13, r1
 8029284:	f001 0203 	and.w	r2, r1, #3
 8029288:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802928c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8029290:	ed92 0b00 	vldr	d0, [r2]
 8029294:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8029298:	f011 0f02 	tst.w	r1, #2
 802929c:	f081 0101 	eor.w	r1, r1, #1
 80292a0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80292a4:	bf08      	it	eq
 80292a6:	4618      	moveq	r0, r3
 80292a8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80292ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80292b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80292b4:	f7ff bf7c 	b.w	80291b0 <sinf_poly>
 80292b8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80292bc:	d232      	bcs.n	8029324 <cosf+0x11c>
 80292be:	4921      	ldr	r1, [pc, #132]	@ (8029344 <cosf+0x13c>)
 80292c0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80292c4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80292c8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80292cc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80292d0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80292d4:	6a10      	ldr	r0, [r2, #32]
 80292d6:	6912      	ldr	r2, [r2, #16]
 80292d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80292dc:	40ab      	lsls	r3, r5
 80292de:	fba0 5003 	umull	r5, r0, r0, r3
 80292e2:	4359      	muls	r1, r3
 80292e4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80292e8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80292ec:	0f9d      	lsrs	r5, r3, #30
 80292ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80292f2:	1ac9      	subs	r1, r1, r3
 80292f4:	f7d7 f9d2 	bl	800069c <__aeabi_l2d>
 80292f8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80292fc:	4b10      	ldr	r3, [pc, #64]	@ (8029340 <cosf+0x138>)
 80292fe:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8029338 <cosf+0x130>
 8029302:	ec41 0b17 	vmov	d7, r0, r1
 8029306:	f004 0203 	and.w	r2, r4, #3
 802930a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802930e:	ed92 0b00 	vldr	d0, [r2]
 8029312:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029316:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802931a:	f014 0f02 	tst.w	r4, #2
 802931e:	f085 0101 	eor.w	r1, r5, #1
 8029322:	e7bf      	b.n	80292a4 <cosf+0x9c>
 8029324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029328:	f000 b81c 	b.w	8029364 <__math_invalidf>
 802932c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029330:	e793      	b.n	802925a <cosf+0x52>
 8029332:	bf00      	nop
 8029334:	f3af 8000 	nop.w
 8029338:	54442d18 	.word	0x54442d18
 802933c:	3c1921fb 	.word	0x3c1921fb
 8029340:	0802e880 	.word	0x0802e880
 8029344:	0802e820 	.word	0x0802e820

08029348 <with_errnof>:
 8029348:	b510      	push	{r4, lr}
 802934a:	ed2d 8b02 	vpush	{d8}
 802934e:	eeb0 8a40 	vmov.f32	s16, s0
 8029352:	4604      	mov	r4, r0
 8029354:	f000 fe00 	bl	8029f58 <__errno>
 8029358:	eeb0 0a48 	vmov.f32	s0, s16
 802935c:	ecbd 8b02 	vpop	{d8}
 8029360:	6004      	str	r4, [r0, #0]
 8029362:	bd10      	pop	{r4, pc}

08029364 <__math_invalidf>:
 8029364:	eef0 7a40 	vmov.f32	s15, s0
 8029368:	ee30 7a40 	vsub.f32	s14, s0, s0
 802936c:	eef4 7a67 	vcmp.f32	s15, s15
 8029370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029374:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8029378:	d602      	bvs.n	8029380 <__math_invalidf+0x1c>
 802937a:	2021      	movs	r0, #33	@ 0x21
 802937c:	f7ff bfe4 	b.w	8029348 <with_errnof>
 8029380:	4770      	bx	lr

08029382 <__ieee754_sqrtf>:
 8029382:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8029386:	4770      	bx	lr

08029388 <__ieee754_atan2f>:
 8029388:	ee10 2a90 	vmov	r2, s1
 802938c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8029390:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8029394:	b510      	push	{r4, lr}
 8029396:	eef0 7a40 	vmov.f32	s15, s0
 802939a:	d806      	bhi.n	80293aa <__ieee754_atan2f+0x22>
 802939c:	ee10 0a10 	vmov	r0, s0
 80293a0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80293a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80293a8:	d904      	bls.n	80293b4 <__ieee754_atan2f+0x2c>
 80293aa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80293ae:	eeb0 0a67 	vmov.f32	s0, s15
 80293b2:	bd10      	pop	{r4, pc}
 80293b4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80293b8:	d103      	bne.n	80293c2 <__ieee754_atan2f+0x3a>
 80293ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80293be:	f000 b881 	b.w	80294c4 <atanf>
 80293c2:	1794      	asrs	r4, r2, #30
 80293c4:	f004 0402 	and.w	r4, r4, #2
 80293c8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80293cc:	b93b      	cbnz	r3, 80293de <__ieee754_atan2f+0x56>
 80293ce:	2c02      	cmp	r4, #2
 80293d0:	d05c      	beq.n	802948c <__ieee754_atan2f+0x104>
 80293d2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80294a0 <__ieee754_atan2f+0x118>
 80293d6:	2c03      	cmp	r4, #3
 80293d8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80293dc:	e7e7      	b.n	80293ae <__ieee754_atan2f+0x26>
 80293de:	b939      	cbnz	r1, 80293f0 <__ieee754_atan2f+0x68>
 80293e0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80294a4 <__ieee754_atan2f+0x11c>
 80293e4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80294a8 <__ieee754_atan2f+0x120>
 80293e8:	2800      	cmp	r0, #0
 80293ea:	fe67 7a87 	vselge.f32	s15, s15, s14
 80293ee:	e7de      	b.n	80293ae <__ieee754_atan2f+0x26>
 80293f0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80293f4:	d110      	bne.n	8029418 <__ieee754_atan2f+0x90>
 80293f6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80293fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80293fe:	d107      	bne.n	8029410 <__ieee754_atan2f+0x88>
 8029400:	2c02      	cmp	r4, #2
 8029402:	d846      	bhi.n	8029492 <__ieee754_atan2f+0x10a>
 8029404:	4b29      	ldr	r3, [pc, #164]	@ (80294ac <__ieee754_atan2f+0x124>)
 8029406:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802940a:	edd3 7a00 	vldr	s15, [r3]
 802940e:	e7ce      	b.n	80293ae <__ieee754_atan2f+0x26>
 8029410:	2c02      	cmp	r4, #2
 8029412:	d841      	bhi.n	8029498 <__ieee754_atan2f+0x110>
 8029414:	4b26      	ldr	r3, [pc, #152]	@ (80294b0 <__ieee754_atan2f+0x128>)
 8029416:	e7f6      	b.n	8029406 <__ieee754_atan2f+0x7e>
 8029418:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802941c:	d0e0      	beq.n	80293e0 <__ieee754_atan2f+0x58>
 802941e:	1a5b      	subs	r3, r3, r1
 8029420:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8029424:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8029428:	da1a      	bge.n	8029460 <__ieee754_atan2f+0xd8>
 802942a:	2a00      	cmp	r2, #0
 802942c:	da01      	bge.n	8029432 <__ieee754_atan2f+0xaa>
 802942e:	313c      	adds	r1, #60	@ 0x3c
 8029430:	db19      	blt.n	8029466 <__ieee754_atan2f+0xde>
 8029432:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8029436:	f000 f919 	bl	802966c <fabsf>
 802943a:	f000 f843 	bl	80294c4 <atanf>
 802943e:	eef0 7a40 	vmov.f32	s15, s0
 8029442:	2c01      	cmp	r4, #1
 8029444:	d012      	beq.n	802946c <__ieee754_atan2f+0xe4>
 8029446:	2c02      	cmp	r4, #2
 8029448:	d017      	beq.n	802947a <__ieee754_atan2f+0xf2>
 802944a:	2c00      	cmp	r4, #0
 802944c:	d0af      	beq.n	80293ae <__ieee754_atan2f+0x26>
 802944e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80294b4 <__ieee754_atan2f+0x12c>
 8029452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029456:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80294b8 <__ieee754_atan2f+0x130>
 802945a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802945e:	e7a6      	b.n	80293ae <__ieee754_atan2f+0x26>
 8029460:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80294a4 <__ieee754_atan2f+0x11c>
 8029464:	e7ed      	b.n	8029442 <__ieee754_atan2f+0xba>
 8029466:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80294bc <__ieee754_atan2f+0x134>
 802946a:	e7ea      	b.n	8029442 <__ieee754_atan2f+0xba>
 802946c:	ee17 3a90 	vmov	r3, s15
 8029470:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029474:	ee07 3a90 	vmov	s15, r3
 8029478:	e799      	b.n	80293ae <__ieee754_atan2f+0x26>
 802947a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80294b4 <__ieee754_atan2f+0x12c>
 802947e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8029482:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80294b8 <__ieee754_atan2f+0x130>
 8029486:	ee77 7a67 	vsub.f32	s15, s14, s15
 802948a:	e790      	b.n	80293ae <__ieee754_atan2f+0x26>
 802948c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80294b8 <__ieee754_atan2f+0x130>
 8029490:	e78d      	b.n	80293ae <__ieee754_atan2f+0x26>
 8029492:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80294c0 <__ieee754_atan2f+0x138>
 8029496:	e78a      	b.n	80293ae <__ieee754_atan2f+0x26>
 8029498:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80294bc <__ieee754_atan2f+0x134>
 802949c:	e787      	b.n	80293ae <__ieee754_atan2f+0x26>
 802949e:	bf00      	nop
 80294a0:	c0490fdb 	.word	0xc0490fdb
 80294a4:	3fc90fdb 	.word	0x3fc90fdb
 80294a8:	bfc90fdb 	.word	0xbfc90fdb
 80294ac:	0802e96c 	.word	0x0802e96c
 80294b0:	0802e960 	.word	0x0802e960
 80294b4:	33bbbd2e 	.word	0x33bbbd2e
 80294b8:	40490fdb 	.word	0x40490fdb
 80294bc:	00000000 	.word	0x00000000
 80294c0:	3f490fdb 	.word	0x3f490fdb

080294c4 <atanf>:
 80294c4:	b538      	push	{r3, r4, r5, lr}
 80294c6:	ee10 5a10 	vmov	r5, s0
 80294ca:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80294ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80294d2:	eef0 7a40 	vmov.f32	s15, s0
 80294d6:	d30f      	bcc.n	80294f8 <atanf+0x34>
 80294d8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80294dc:	d904      	bls.n	80294e8 <atanf+0x24>
 80294de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80294e2:	eeb0 0a67 	vmov.f32	s0, s15
 80294e6:	bd38      	pop	{r3, r4, r5, pc}
 80294e8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8029620 <atanf+0x15c>
 80294ec:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8029624 <atanf+0x160>
 80294f0:	2d00      	cmp	r5, #0
 80294f2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80294f6:	e7f4      	b.n	80294e2 <atanf+0x1e>
 80294f8:	4b4b      	ldr	r3, [pc, #300]	@ (8029628 <atanf+0x164>)
 80294fa:	429c      	cmp	r4, r3
 80294fc:	d810      	bhi.n	8029520 <atanf+0x5c>
 80294fe:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8029502:	d20a      	bcs.n	802951a <atanf+0x56>
 8029504:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802962c <atanf+0x168>
 8029508:	ee30 7a07 	vadd.f32	s14, s0, s14
 802950c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8029510:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8029514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029518:	dce3      	bgt.n	80294e2 <atanf+0x1e>
 802951a:	f04f 33ff 	mov.w	r3, #4294967295
 802951e:	e013      	b.n	8029548 <atanf+0x84>
 8029520:	f000 f8a4 	bl	802966c <fabsf>
 8029524:	4b42      	ldr	r3, [pc, #264]	@ (8029630 <atanf+0x16c>)
 8029526:	429c      	cmp	r4, r3
 8029528:	d84f      	bhi.n	80295ca <atanf+0x106>
 802952a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802952e:	429c      	cmp	r4, r3
 8029530:	d841      	bhi.n	80295b6 <atanf+0xf2>
 8029532:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8029536:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802953a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802953e:	2300      	movs	r3, #0
 8029540:	ee30 0a27 	vadd.f32	s0, s0, s15
 8029544:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029548:	1c5a      	adds	r2, r3, #1
 802954a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802954e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8029634 <atanf+0x170>
 8029552:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8029638 <atanf+0x174>
 8029556:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802963c <atanf+0x178>
 802955a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802955e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8029562:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8029640 <atanf+0x17c>
 8029566:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802956a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8029644 <atanf+0x180>
 802956e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8029572:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8029648 <atanf+0x184>
 8029576:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802957a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802964c <atanf+0x188>
 802957e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8029582:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8029650 <atanf+0x18c>
 8029586:	eea6 5a87 	vfma.f32	s10, s13, s14
 802958a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8029654 <atanf+0x190>
 802958e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8029592:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8029658 <atanf+0x194>
 8029596:	eea7 5a26 	vfma.f32	s10, s14, s13
 802959a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802965c <atanf+0x198>
 802959e:	eea5 7a26 	vfma.f32	s14, s10, s13
 80295a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80295a6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80295aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80295ae:	d121      	bne.n	80295f4 <atanf+0x130>
 80295b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80295b4:	e795      	b.n	80294e2 <atanf+0x1e>
 80295b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80295ba:	ee30 7a67 	vsub.f32	s14, s0, s15
 80295be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80295c2:	2301      	movs	r3, #1
 80295c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80295c8:	e7be      	b.n	8029548 <atanf+0x84>
 80295ca:	4b25      	ldr	r3, [pc, #148]	@ (8029660 <atanf+0x19c>)
 80295cc:	429c      	cmp	r4, r3
 80295ce:	d80b      	bhi.n	80295e8 <atanf+0x124>
 80295d0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80295d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80295d8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80295dc:	2302      	movs	r3, #2
 80295de:	ee70 6a67 	vsub.f32	s13, s0, s15
 80295e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80295e6:	e7af      	b.n	8029548 <atanf+0x84>
 80295e8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80295ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80295f0:	2303      	movs	r3, #3
 80295f2:	e7a9      	b.n	8029548 <atanf+0x84>
 80295f4:	4a1b      	ldr	r2, [pc, #108]	@ (8029664 <atanf+0x1a0>)
 80295f6:	491c      	ldr	r1, [pc, #112]	@ (8029668 <atanf+0x1a4>)
 80295f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80295fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8029600:	edd3 6a00 	vldr	s13, [r3]
 8029604:	ee37 7a66 	vsub.f32	s14, s14, s13
 8029608:	2d00      	cmp	r5, #0
 802960a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802960e:	edd2 7a00 	vldr	s15, [r2]
 8029612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8029616:	bfb8      	it	lt
 8029618:	eef1 7a67 	vneglt.f32	s15, s15
 802961c:	e761      	b.n	80294e2 <atanf+0x1e>
 802961e:	bf00      	nop
 8029620:	bfc90fdb 	.word	0xbfc90fdb
 8029624:	3fc90fdb 	.word	0x3fc90fdb
 8029628:	3edfffff 	.word	0x3edfffff
 802962c:	7149f2ca 	.word	0x7149f2ca
 8029630:	3f97ffff 	.word	0x3f97ffff
 8029634:	3c8569d7 	.word	0x3c8569d7
 8029638:	3d4bda59 	.word	0x3d4bda59
 802963c:	bd6ef16b 	.word	0xbd6ef16b
 8029640:	3d886b35 	.word	0x3d886b35
 8029644:	3dba2e6e 	.word	0x3dba2e6e
 8029648:	3e124925 	.word	0x3e124925
 802964c:	3eaaaaab 	.word	0x3eaaaaab
 8029650:	bd15a221 	.word	0xbd15a221
 8029654:	bd9d8795 	.word	0xbd9d8795
 8029658:	bde38e38 	.word	0xbde38e38
 802965c:	be4ccccd 	.word	0xbe4ccccd
 8029660:	401bffff 	.word	0x401bffff
 8029664:	0802e988 	.word	0x0802e988
 8029668:	0802e978 	.word	0x0802e978

0802966c <fabsf>:
 802966c:	ee10 3a10 	vmov	r3, s0
 8029670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8029674:	ee00 3a10 	vmov	s0, r3
 8029678:	4770      	bx	lr

0802967a <abort>:
 802967a:	b508      	push	{r3, lr}
 802967c:	2006      	movs	r0, #6
 802967e:	f000 fbf9 	bl	8029e74 <raise>
 8029682:	2001      	movs	r0, #1
 8029684:	f7d8 fa0c 	bl	8001aa0 <_exit>

08029688 <__assert_func>:
 8029688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802968a:	4614      	mov	r4, r2
 802968c:	461a      	mov	r2, r3
 802968e:	4b09      	ldr	r3, [pc, #36]	@ (80296b4 <__assert_func+0x2c>)
 8029690:	681b      	ldr	r3, [r3, #0]
 8029692:	4605      	mov	r5, r0
 8029694:	68d8      	ldr	r0, [r3, #12]
 8029696:	b954      	cbnz	r4, 80296ae <__assert_func+0x26>
 8029698:	4b07      	ldr	r3, [pc, #28]	@ (80296b8 <__assert_func+0x30>)
 802969a:	461c      	mov	r4, r3
 802969c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80296a0:	9100      	str	r1, [sp, #0]
 80296a2:	462b      	mov	r3, r5
 80296a4:	4905      	ldr	r1, [pc, #20]	@ (80296bc <__assert_func+0x34>)
 80296a6:	f000 fa43 	bl	8029b30 <fiprintf>
 80296aa:	f7ff ffe6 	bl	802967a <abort>
 80296ae:	4b04      	ldr	r3, [pc, #16]	@ (80296c0 <__assert_func+0x38>)
 80296b0:	e7f4      	b.n	802969c <__assert_func+0x14>
 80296b2:	bf00      	nop
 80296b4:	240000e8 	.word	0x240000e8
 80296b8:	0802d475 	.word	0x0802d475
 80296bc:	0802e9a5 	.word	0x0802e9a5
 80296c0:	0802e998 	.word	0x0802e998

080296c4 <atexit>:
 80296c4:	2300      	movs	r3, #0
 80296c6:	4601      	mov	r1, r0
 80296c8:	461a      	mov	r2, r3
 80296ca:	4618      	mov	r0, r3
 80296cc:	f000 bc80 	b.w	8029fd0 <__register_exitproc>

080296d0 <malloc>:
 80296d0:	4b02      	ldr	r3, [pc, #8]	@ (80296dc <malloc+0xc>)
 80296d2:	4601      	mov	r1, r0
 80296d4:	6818      	ldr	r0, [r3, #0]
 80296d6:	f000 b82d 	b.w	8029734 <_malloc_r>
 80296da:	bf00      	nop
 80296dc:	240000e8 	.word	0x240000e8

080296e0 <free>:
 80296e0:	4b02      	ldr	r3, [pc, #8]	@ (80296ec <free+0xc>)
 80296e2:	4601      	mov	r1, r0
 80296e4:	6818      	ldr	r0, [r3, #0]
 80296e6:	f000 bccf 	b.w	802a088 <_free_r>
 80296ea:	bf00      	nop
 80296ec:	240000e8 	.word	0x240000e8

080296f0 <sbrk_aligned>:
 80296f0:	b570      	push	{r4, r5, r6, lr}
 80296f2:	4e0f      	ldr	r6, [pc, #60]	@ (8029730 <sbrk_aligned+0x40>)
 80296f4:	460c      	mov	r4, r1
 80296f6:	6831      	ldr	r1, [r6, #0]
 80296f8:	4605      	mov	r5, r0
 80296fa:	b911      	cbnz	r1, 8029702 <sbrk_aligned+0x12>
 80296fc:	f000 fc0a 	bl	8029f14 <_sbrk_r>
 8029700:	6030      	str	r0, [r6, #0]
 8029702:	4621      	mov	r1, r4
 8029704:	4628      	mov	r0, r5
 8029706:	f000 fc05 	bl	8029f14 <_sbrk_r>
 802970a:	1c43      	adds	r3, r0, #1
 802970c:	d103      	bne.n	8029716 <sbrk_aligned+0x26>
 802970e:	f04f 34ff 	mov.w	r4, #4294967295
 8029712:	4620      	mov	r0, r4
 8029714:	bd70      	pop	{r4, r5, r6, pc}
 8029716:	1cc4      	adds	r4, r0, #3
 8029718:	f024 0403 	bic.w	r4, r4, #3
 802971c:	42a0      	cmp	r0, r4
 802971e:	d0f8      	beq.n	8029712 <sbrk_aligned+0x22>
 8029720:	1a21      	subs	r1, r4, r0
 8029722:	4628      	mov	r0, r5
 8029724:	f000 fbf6 	bl	8029f14 <_sbrk_r>
 8029728:	3001      	adds	r0, #1
 802972a:	d1f2      	bne.n	8029712 <sbrk_aligned+0x22>
 802972c:	e7ef      	b.n	802970e <sbrk_aligned+0x1e>
 802972e:	bf00      	nop
 8029730:	24028ff0 	.word	0x24028ff0

08029734 <_malloc_r>:
 8029734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029738:	1ccd      	adds	r5, r1, #3
 802973a:	f025 0503 	bic.w	r5, r5, #3
 802973e:	3508      	adds	r5, #8
 8029740:	2d0c      	cmp	r5, #12
 8029742:	bf38      	it	cc
 8029744:	250c      	movcc	r5, #12
 8029746:	2d00      	cmp	r5, #0
 8029748:	4606      	mov	r6, r0
 802974a:	db01      	blt.n	8029750 <_malloc_r+0x1c>
 802974c:	42a9      	cmp	r1, r5
 802974e:	d904      	bls.n	802975a <_malloc_r+0x26>
 8029750:	230c      	movs	r3, #12
 8029752:	6033      	str	r3, [r6, #0]
 8029754:	2000      	movs	r0, #0
 8029756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802975a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8029830 <_malloc_r+0xfc>
 802975e:	f000 f869 	bl	8029834 <__malloc_lock>
 8029762:	f8d8 3000 	ldr.w	r3, [r8]
 8029766:	461c      	mov	r4, r3
 8029768:	bb44      	cbnz	r4, 80297bc <_malloc_r+0x88>
 802976a:	4629      	mov	r1, r5
 802976c:	4630      	mov	r0, r6
 802976e:	f7ff ffbf 	bl	80296f0 <sbrk_aligned>
 8029772:	1c43      	adds	r3, r0, #1
 8029774:	4604      	mov	r4, r0
 8029776:	d158      	bne.n	802982a <_malloc_r+0xf6>
 8029778:	f8d8 4000 	ldr.w	r4, [r8]
 802977c:	4627      	mov	r7, r4
 802977e:	2f00      	cmp	r7, #0
 8029780:	d143      	bne.n	802980a <_malloc_r+0xd6>
 8029782:	2c00      	cmp	r4, #0
 8029784:	d04b      	beq.n	802981e <_malloc_r+0xea>
 8029786:	6823      	ldr	r3, [r4, #0]
 8029788:	4639      	mov	r1, r7
 802978a:	4630      	mov	r0, r6
 802978c:	eb04 0903 	add.w	r9, r4, r3
 8029790:	f000 fbc0 	bl	8029f14 <_sbrk_r>
 8029794:	4581      	cmp	r9, r0
 8029796:	d142      	bne.n	802981e <_malloc_r+0xea>
 8029798:	6821      	ldr	r1, [r4, #0]
 802979a:	1a6d      	subs	r5, r5, r1
 802979c:	4629      	mov	r1, r5
 802979e:	4630      	mov	r0, r6
 80297a0:	f7ff ffa6 	bl	80296f0 <sbrk_aligned>
 80297a4:	3001      	adds	r0, #1
 80297a6:	d03a      	beq.n	802981e <_malloc_r+0xea>
 80297a8:	6823      	ldr	r3, [r4, #0]
 80297aa:	442b      	add	r3, r5
 80297ac:	6023      	str	r3, [r4, #0]
 80297ae:	f8d8 3000 	ldr.w	r3, [r8]
 80297b2:	685a      	ldr	r2, [r3, #4]
 80297b4:	bb62      	cbnz	r2, 8029810 <_malloc_r+0xdc>
 80297b6:	f8c8 7000 	str.w	r7, [r8]
 80297ba:	e00f      	b.n	80297dc <_malloc_r+0xa8>
 80297bc:	6822      	ldr	r2, [r4, #0]
 80297be:	1b52      	subs	r2, r2, r5
 80297c0:	d420      	bmi.n	8029804 <_malloc_r+0xd0>
 80297c2:	2a0b      	cmp	r2, #11
 80297c4:	d917      	bls.n	80297f6 <_malloc_r+0xc2>
 80297c6:	1961      	adds	r1, r4, r5
 80297c8:	42a3      	cmp	r3, r4
 80297ca:	6025      	str	r5, [r4, #0]
 80297cc:	bf18      	it	ne
 80297ce:	6059      	strne	r1, [r3, #4]
 80297d0:	6863      	ldr	r3, [r4, #4]
 80297d2:	bf08      	it	eq
 80297d4:	f8c8 1000 	streq.w	r1, [r8]
 80297d8:	5162      	str	r2, [r4, r5]
 80297da:	604b      	str	r3, [r1, #4]
 80297dc:	4630      	mov	r0, r6
 80297de:	f000 f82f 	bl	8029840 <__malloc_unlock>
 80297e2:	f104 000b 	add.w	r0, r4, #11
 80297e6:	1d23      	adds	r3, r4, #4
 80297e8:	f020 0007 	bic.w	r0, r0, #7
 80297ec:	1ac2      	subs	r2, r0, r3
 80297ee:	bf1c      	itt	ne
 80297f0:	1a1b      	subne	r3, r3, r0
 80297f2:	50a3      	strne	r3, [r4, r2]
 80297f4:	e7af      	b.n	8029756 <_malloc_r+0x22>
 80297f6:	6862      	ldr	r2, [r4, #4]
 80297f8:	42a3      	cmp	r3, r4
 80297fa:	bf0c      	ite	eq
 80297fc:	f8c8 2000 	streq.w	r2, [r8]
 8029800:	605a      	strne	r2, [r3, #4]
 8029802:	e7eb      	b.n	80297dc <_malloc_r+0xa8>
 8029804:	4623      	mov	r3, r4
 8029806:	6864      	ldr	r4, [r4, #4]
 8029808:	e7ae      	b.n	8029768 <_malloc_r+0x34>
 802980a:	463c      	mov	r4, r7
 802980c:	687f      	ldr	r7, [r7, #4]
 802980e:	e7b6      	b.n	802977e <_malloc_r+0x4a>
 8029810:	461a      	mov	r2, r3
 8029812:	685b      	ldr	r3, [r3, #4]
 8029814:	42a3      	cmp	r3, r4
 8029816:	d1fb      	bne.n	8029810 <_malloc_r+0xdc>
 8029818:	2300      	movs	r3, #0
 802981a:	6053      	str	r3, [r2, #4]
 802981c:	e7de      	b.n	80297dc <_malloc_r+0xa8>
 802981e:	230c      	movs	r3, #12
 8029820:	6033      	str	r3, [r6, #0]
 8029822:	4630      	mov	r0, r6
 8029824:	f000 f80c 	bl	8029840 <__malloc_unlock>
 8029828:	e794      	b.n	8029754 <_malloc_r+0x20>
 802982a:	6005      	str	r5, [r0, #0]
 802982c:	e7d6      	b.n	80297dc <_malloc_r+0xa8>
 802982e:	bf00      	nop
 8029830:	24028ff4 	.word	0x24028ff4

08029834 <__malloc_lock>:
 8029834:	4801      	ldr	r0, [pc, #4]	@ (802983c <__malloc_lock+0x8>)
 8029836:	f000 bbba 	b.w	8029fae <__retarget_lock_acquire_recursive>
 802983a:	bf00      	nop
 802983c:	24029138 	.word	0x24029138

08029840 <__malloc_unlock>:
 8029840:	4801      	ldr	r0, [pc, #4]	@ (8029848 <__malloc_unlock+0x8>)
 8029842:	f000 bbb5 	b.w	8029fb0 <__retarget_lock_release_recursive>
 8029846:	bf00      	nop
 8029848:	24029138 	.word	0x24029138

0802984c <__cxa_atexit>:
 802984c:	b510      	push	{r4, lr}
 802984e:	4604      	mov	r4, r0
 8029850:	4804      	ldr	r0, [pc, #16]	@ (8029864 <__cxa_atexit+0x18>)
 8029852:	4613      	mov	r3, r2
 8029854:	b120      	cbz	r0, 8029860 <__cxa_atexit+0x14>
 8029856:	460a      	mov	r2, r1
 8029858:	2002      	movs	r0, #2
 802985a:	4621      	mov	r1, r4
 802985c:	f000 fbb8 	bl	8029fd0 <__register_exitproc>
 8029860:	bd10      	pop	{r4, pc}
 8029862:	bf00      	nop
 8029864:	08029fd1 	.word	0x08029fd1

08029868 <__sflush_r>:
 8029868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029870:	0716      	lsls	r6, r2, #28
 8029872:	4605      	mov	r5, r0
 8029874:	460c      	mov	r4, r1
 8029876:	d454      	bmi.n	8029922 <__sflush_r+0xba>
 8029878:	684b      	ldr	r3, [r1, #4]
 802987a:	2b00      	cmp	r3, #0
 802987c:	dc02      	bgt.n	8029884 <__sflush_r+0x1c>
 802987e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8029880:	2b00      	cmp	r3, #0
 8029882:	dd48      	ble.n	8029916 <__sflush_r+0xae>
 8029884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029886:	2e00      	cmp	r6, #0
 8029888:	d045      	beq.n	8029916 <__sflush_r+0xae>
 802988a:	2300      	movs	r3, #0
 802988c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8029890:	682f      	ldr	r7, [r5, #0]
 8029892:	6a21      	ldr	r1, [r4, #32]
 8029894:	602b      	str	r3, [r5, #0]
 8029896:	d030      	beq.n	80298fa <__sflush_r+0x92>
 8029898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802989a:	89a3      	ldrh	r3, [r4, #12]
 802989c:	0759      	lsls	r1, r3, #29
 802989e:	d505      	bpl.n	80298ac <__sflush_r+0x44>
 80298a0:	6863      	ldr	r3, [r4, #4]
 80298a2:	1ad2      	subs	r2, r2, r3
 80298a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80298a6:	b10b      	cbz	r3, 80298ac <__sflush_r+0x44>
 80298a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80298aa:	1ad2      	subs	r2, r2, r3
 80298ac:	2300      	movs	r3, #0
 80298ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80298b0:	6a21      	ldr	r1, [r4, #32]
 80298b2:	4628      	mov	r0, r5
 80298b4:	47b0      	blx	r6
 80298b6:	1c43      	adds	r3, r0, #1
 80298b8:	89a3      	ldrh	r3, [r4, #12]
 80298ba:	d106      	bne.n	80298ca <__sflush_r+0x62>
 80298bc:	6829      	ldr	r1, [r5, #0]
 80298be:	291d      	cmp	r1, #29
 80298c0:	d82b      	bhi.n	802991a <__sflush_r+0xb2>
 80298c2:	4a2a      	ldr	r2, [pc, #168]	@ (802996c <__sflush_r+0x104>)
 80298c4:	410a      	asrs	r2, r1
 80298c6:	07d6      	lsls	r6, r2, #31
 80298c8:	d427      	bmi.n	802991a <__sflush_r+0xb2>
 80298ca:	2200      	movs	r2, #0
 80298cc:	6062      	str	r2, [r4, #4]
 80298ce:	04d9      	lsls	r1, r3, #19
 80298d0:	6922      	ldr	r2, [r4, #16]
 80298d2:	6022      	str	r2, [r4, #0]
 80298d4:	d504      	bpl.n	80298e0 <__sflush_r+0x78>
 80298d6:	1c42      	adds	r2, r0, #1
 80298d8:	d101      	bne.n	80298de <__sflush_r+0x76>
 80298da:	682b      	ldr	r3, [r5, #0]
 80298dc:	b903      	cbnz	r3, 80298e0 <__sflush_r+0x78>
 80298de:	6560      	str	r0, [r4, #84]	@ 0x54
 80298e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80298e2:	602f      	str	r7, [r5, #0]
 80298e4:	b1b9      	cbz	r1, 8029916 <__sflush_r+0xae>
 80298e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80298ea:	4299      	cmp	r1, r3
 80298ec:	d002      	beq.n	80298f4 <__sflush_r+0x8c>
 80298ee:	4628      	mov	r0, r5
 80298f0:	f000 fbca 	bl	802a088 <_free_r>
 80298f4:	2300      	movs	r3, #0
 80298f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80298f8:	e00d      	b.n	8029916 <__sflush_r+0xae>
 80298fa:	2301      	movs	r3, #1
 80298fc:	4628      	mov	r0, r5
 80298fe:	47b0      	blx	r6
 8029900:	4602      	mov	r2, r0
 8029902:	1c50      	adds	r0, r2, #1
 8029904:	d1c9      	bne.n	802989a <__sflush_r+0x32>
 8029906:	682b      	ldr	r3, [r5, #0]
 8029908:	2b00      	cmp	r3, #0
 802990a:	d0c6      	beq.n	802989a <__sflush_r+0x32>
 802990c:	2b1d      	cmp	r3, #29
 802990e:	d001      	beq.n	8029914 <__sflush_r+0xac>
 8029910:	2b16      	cmp	r3, #22
 8029912:	d11e      	bne.n	8029952 <__sflush_r+0xea>
 8029914:	602f      	str	r7, [r5, #0]
 8029916:	2000      	movs	r0, #0
 8029918:	e022      	b.n	8029960 <__sflush_r+0xf8>
 802991a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802991e:	b21b      	sxth	r3, r3
 8029920:	e01b      	b.n	802995a <__sflush_r+0xf2>
 8029922:	690f      	ldr	r7, [r1, #16]
 8029924:	2f00      	cmp	r7, #0
 8029926:	d0f6      	beq.n	8029916 <__sflush_r+0xae>
 8029928:	0793      	lsls	r3, r2, #30
 802992a:	680e      	ldr	r6, [r1, #0]
 802992c:	bf08      	it	eq
 802992e:	694b      	ldreq	r3, [r1, #20]
 8029930:	600f      	str	r7, [r1, #0]
 8029932:	bf18      	it	ne
 8029934:	2300      	movne	r3, #0
 8029936:	eba6 0807 	sub.w	r8, r6, r7
 802993a:	608b      	str	r3, [r1, #8]
 802993c:	f1b8 0f00 	cmp.w	r8, #0
 8029940:	dde9      	ble.n	8029916 <__sflush_r+0xae>
 8029942:	6a21      	ldr	r1, [r4, #32]
 8029944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8029946:	4643      	mov	r3, r8
 8029948:	463a      	mov	r2, r7
 802994a:	4628      	mov	r0, r5
 802994c:	47b0      	blx	r6
 802994e:	2800      	cmp	r0, #0
 8029950:	dc08      	bgt.n	8029964 <__sflush_r+0xfc>
 8029952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802995a:	81a3      	strh	r3, [r4, #12]
 802995c:	f04f 30ff 	mov.w	r0, #4294967295
 8029960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029964:	4407      	add	r7, r0
 8029966:	eba8 0800 	sub.w	r8, r8, r0
 802996a:	e7e7      	b.n	802993c <__sflush_r+0xd4>
 802996c:	dfbffffe 	.word	0xdfbffffe

08029970 <_fflush_r>:
 8029970:	b538      	push	{r3, r4, r5, lr}
 8029972:	690b      	ldr	r3, [r1, #16]
 8029974:	4605      	mov	r5, r0
 8029976:	460c      	mov	r4, r1
 8029978:	b913      	cbnz	r3, 8029980 <_fflush_r+0x10>
 802997a:	2500      	movs	r5, #0
 802997c:	4628      	mov	r0, r5
 802997e:	bd38      	pop	{r3, r4, r5, pc}
 8029980:	b118      	cbz	r0, 802998a <_fflush_r+0x1a>
 8029982:	6a03      	ldr	r3, [r0, #32]
 8029984:	b90b      	cbnz	r3, 802998a <_fflush_r+0x1a>
 8029986:	f000 f8bb 	bl	8029b00 <__sinit>
 802998a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802998e:	2b00      	cmp	r3, #0
 8029990:	d0f3      	beq.n	802997a <_fflush_r+0xa>
 8029992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8029994:	07d0      	lsls	r0, r2, #31
 8029996:	d404      	bmi.n	80299a2 <_fflush_r+0x32>
 8029998:	0599      	lsls	r1, r3, #22
 802999a:	d402      	bmi.n	80299a2 <_fflush_r+0x32>
 802999c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802999e:	f000 fb06 	bl	8029fae <__retarget_lock_acquire_recursive>
 80299a2:	4628      	mov	r0, r5
 80299a4:	4621      	mov	r1, r4
 80299a6:	f7ff ff5f 	bl	8029868 <__sflush_r>
 80299aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80299ac:	07da      	lsls	r2, r3, #31
 80299ae:	4605      	mov	r5, r0
 80299b0:	d4e4      	bmi.n	802997c <_fflush_r+0xc>
 80299b2:	89a3      	ldrh	r3, [r4, #12]
 80299b4:	059b      	lsls	r3, r3, #22
 80299b6:	d4e1      	bmi.n	802997c <_fflush_r+0xc>
 80299b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80299ba:	f000 faf9 	bl	8029fb0 <__retarget_lock_release_recursive>
 80299be:	e7dd      	b.n	802997c <_fflush_r+0xc>

080299c0 <fflush>:
 80299c0:	4601      	mov	r1, r0
 80299c2:	b920      	cbnz	r0, 80299ce <fflush+0xe>
 80299c4:	4a04      	ldr	r2, [pc, #16]	@ (80299d8 <fflush+0x18>)
 80299c6:	4905      	ldr	r1, [pc, #20]	@ (80299dc <fflush+0x1c>)
 80299c8:	4805      	ldr	r0, [pc, #20]	@ (80299e0 <fflush+0x20>)
 80299ca:	f000 b91b 	b.w	8029c04 <_fwalk_sglue>
 80299ce:	4b05      	ldr	r3, [pc, #20]	@ (80299e4 <fflush+0x24>)
 80299d0:	6818      	ldr	r0, [r3, #0]
 80299d2:	f7ff bfcd 	b.w	8029970 <_fflush_r>
 80299d6:	bf00      	nop
 80299d8:	240000dc 	.word	0x240000dc
 80299dc:	08029971 	.word	0x08029971
 80299e0:	240000ec 	.word	0x240000ec
 80299e4:	240000e8 	.word	0x240000e8

080299e8 <std>:
 80299e8:	2300      	movs	r3, #0
 80299ea:	b510      	push	{r4, lr}
 80299ec:	4604      	mov	r4, r0
 80299ee:	e9c0 3300 	strd	r3, r3, [r0]
 80299f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80299f6:	6083      	str	r3, [r0, #8]
 80299f8:	8181      	strh	r1, [r0, #12]
 80299fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80299fc:	81c2      	strh	r2, [r0, #14]
 80299fe:	6183      	str	r3, [r0, #24]
 8029a00:	4619      	mov	r1, r3
 8029a02:	2208      	movs	r2, #8
 8029a04:	305c      	adds	r0, #92	@ 0x5c
 8029a06:	f000 f9f3 	bl	8029df0 <memset>
 8029a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8029a40 <std+0x58>)
 8029a0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8029a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8029a44 <std+0x5c>)
 8029a10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8029a12:	4b0d      	ldr	r3, [pc, #52]	@ (8029a48 <std+0x60>)
 8029a14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8029a16:	4b0d      	ldr	r3, [pc, #52]	@ (8029a4c <std+0x64>)
 8029a18:	6323      	str	r3, [r4, #48]	@ 0x30
 8029a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8029a50 <std+0x68>)
 8029a1c:	6224      	str	r4, [r4, #32]
 8029a1e:	429c      	cmp	r4, r3
 8029a20:	d006      	beq.n	8029a30 <std+0x48>
 8029a22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8029a26:	4294      	cmp	r4, r2
 8029a28:	d002      	beq.n	8029a30 <std+0x48>
 8029a2a:	33d0      	adds	r3, #208	@ 0xd0
 8029a2c:	429c      	cmp	r4, r3
 8029a2e:	d105      	bne.n	8029a3c <std+0x54>
 8029a30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8029a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029a38:	f000 bab8 	b.w	8029fac <__retarget_lock_init_recursive>
 8029a3c:	bd10      	pop	{r4, pc}
 8029a3e:	bf00      	nop
 8029a40:	08029c41 	.word	0x08029c41
 8029a44:	08029c63 	.word	0x08029c63
 8029a48:	08029c9b 	.word	0x08029c9b
 8029a4c:	08029cbf 	.word	0x08029cbf
 8029a50:	24028ff8 	.word	0x24028ff8

08029a54 <stdio_exit_handler>:
 8029a54:	4a02      	ldr	r2, [pc, #8]	@ (8029a60 <stdio_exit_handler+0xc>)
 8029a56:	4903      	ldr	r1, [pc, #12]	@ (8029a64 <stdio_exit_handler+0x10>)
 8029a58:	4803      	ldr	r0, [pc, #12]	@ (8029a68 <stdio_exit_handler+0x14>)
 8029a5a:	f000 b8d3 	b.w	8029c04 <_fwalk_sglue>
 8029a5e:	bf00      	nop
 8029a60:	240000dc 	.word	0x240000dc
 8029a64:	08029971 	.word	0x08029971
 8029a68:	240000ec 	.word	0x240000ec

08029a6c <cleanup_stdio>:
 8029a6c:	6841      	ldr	r1, [r0, #4]
 8029a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8029aa0 <cleanup_stdio+0x34>)
 8029a70:	4299      	cmp	r1, r3
 8029a72:	b510      	push	{r4, lr}
 8029a74:	4604      	mov	r4, r0
 8029a76:	d001      	beq.n	8029a7c <cleanup_stdio+0x10>
 8029a78:	f7ff ff7a 	bl	8029970 <_fflush_r>
 8029a7c:	68a1      	ldr	r1, [r4, #8]
 8029a7e:	4b09      	ldr	r3, [pc, #36]	@ (8029aa4 <cleanup_stdio+0x38>)
 8029a80:	4299      	cmp	r1, r3
 8029a82:	d002      	beq.n	8029a8a <cleanup_stdio+0x1e>
 8029a84:	4620      	mov	r0, r4
 8029a86:	f7ff ff73 	bl	8029970 <_fflush_r>
 8029a8a:	68e1      	ldr	r1, [r4, #12]
 8029a8c:	4b06      	ldr	r3, [pc, #24]	@ (8029aa8 <cleanup_stdio+0x3c>)
 8029a8e:	4299      	cmp	r1, r3
 8029a90:	d004      	beq.n	8029a9c <cleanup_stdio+0x30>
 8029a92:	4620      	mov	r0, r4
 8029a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029a98:	f7ff bf6a 	b.w	8029970 <_fflush_r>
 8029a9c:	bd10      	pop	{r4, pc}
 8029a9e:	bf00      	nop
 8029aa0:	24028ff8 	.word	0x24028ff8
 8029aa4:	24029060 	.word	0x24029060
 8029aa8:	240290c8 	.word	0x240290c8

08029aac <global_stdio_init.part.0>:
 8029aac:	b510      	push	{r4, lr}
 8029aae:	4b0b      	ldr	r3, [pc, #44]	@ (8029adc <global_stdio_init.part.0+0x30>)
 8029ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8029ae0 <global_stdio_init.part.0+0x34>)
 8029ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8029ae4 <global_stdio_init.part.0+0x38>)
 8029ab4:	601a      	str	r2, [r3, #0]
 8029ab6:	4620      	mov	r0, r4
 8029ab8:	2200      	movs	r2, #0
 8029aba:	2104      	movs	r1, #4
 8029abc:	f7ff ff94 	bl	80299e8 <std>
 8029ac0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8029ac4:	2201      	movs	r2, #1
 8029ac6:	2109      	movs	r1, #9
 8029ac8:	f7ff ff8e 	bl	80299e8 <std>
 8029acc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029ad0:	2202      	movs	r2, #2
 8029ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029ad6:	2112      	movs	r1, #18
 8029ad8:	f7ff bf86 	b.w	80299e8 <std>
 8029adc:	24029130 	.word	0x24029130
 8029ae0:	24028ff8 	.word	0x24028ff8
 8029ae4:	08029a55 	.word	0x08029a55

08029ae8 <__sfp_lock_acquire>:
 8029ae8:	4801      	ldr	r0, [pc, #4]	@ (8029af0 <__sfp_lock_acquire+0x8>)
 8029aea:	f000 ba60 	b.w	8029fae <__retarget_lock_acquire_recursive>
 8029aee:	bf00      	nop
 8029af0:	2402913a 	.word	0x2402913a

08029af4 <__sfp_lock_release>:
 8029af4:	4801      	ldr	r0, [pc, #4]	@ (8029afc <__sfp_lock_release+0x8>)
 8029af6:	f000 ba5b 	b.w	8029fb0 <__retarget_lock_release_recursive>
 8029afa:	bf00      	nop
 8029afc:	2402913a 	.word	0x2402913a

08029b00 <__sinit>:
 8029b00:	b510      	push	{r4, lr}
 8029b02:	4604      	mov	r4, r0
 8029b04:	f7ff fff0 	bl	8029ae8 <__sfp_lock_acquire>
 8029b08:	6a23      	ldr	r3, [r4, #32]
 8029b0a:	b11b      	cbz	r3, 8029b14 <__sinit+0x14>
 8029b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029b10:	f7ff bff0 	b.w	8029af4 <__sfp_lock_release>
 8029b14:	4b04      	ldr	r3, [pc, #16]	@ (8029b28 <__sinit+0x28>)
 8029b16:	6223      	str	r3, [r4, #32]
 8029b18:	4b04      	ldr	r3, [pc, #16]	@ (8029b2c <__sinit+0x2c>)
 8029b1a:	681b      	ldr	r3, [r3, #0]
 8029b1c:	2b00      	cmp	r3, #0
 8029b1e:	d1f5      	bne.n	8029b0c <__sinit+0xc>
 8029b20:	f7ff ffc4 	bl	8029aac <global_stdio_init.part.0>
 8029b24:	e7f2      	b.n	8029b0c <__sinit+0xc>
 8029b26:	bf00      	nop
 8029b28:	08029a6d 	.word	0x08029a6d
 8029b2c:	24029130 	.word	0x24029130

08029b30 <fiprintf>:
 8029b30:	b40e      	push	{r1, r2, r3}
 8029b32:	b503      	push	{r0, r1, lr}
 8029b34:	4601      	mov	r1, r0
 8029b36:	ab03      	add	r3, sp, #12
 8029b38:	4805      	ldr	r0, [pc, #20]	@ (8029b50 <fiprintf+0x20>)
 8029b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8029b3e:	6800      	ldr	r0, [r0, #0]
 8029b40:	9301      	str	r3, [sp, #4]
 8029b42:	f000 fb15 	bl	802a170 <_vfiprintf_r>
 8029b46:	b002      	add	sp, #8
 8029b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8029b4c:	b003      	add	sp, #12
 8029b4e:	4770      	bx	lr
 8029b50:	240000e8 	.word	0x240000e8

08029b54 <_fputs_r>:
 8029b54:	b570      	push	{r4, r5, r6, lr}
 8029b56:	460d      	mov	r5, r1
 8029b58:	4614      	mov	r4, r2
 8029b5a:	4606      	mov	r6, r0
 8029b5c:	b118      	cbz	r0, 8029b66 <_fputs_r+0x12>
 8029b5e:	6a03      	ldr	r3, [r0, #32]
 8029b60:	b90b      	cbnz	r3, 8029b66 <_fputs_r+0x12>
 8029b62:	f7ff ffcd 	bl	8029b00 <__sinit>
 8029b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029b68:	07d9      	lsls	r1, r3, #31
 8029b6a:	d405      	bmi.n	8029b78 <_fputs_r+0x24>
 8029b6c:	89a3      	ldrh	r3, [r4, #12]
 8029b6e:	059a      	lsls	r2, r3, #22
 8029b70:	d402      	bmi.n	8029b78 <_fputs_r+0x24>
 8029b72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029b74:	f000 fa1b 	bl	8029fae <__retarget_lock_acquire_recursive>
 8029b78:	89a3      	ldrh	r3, [r4, #12]
 8029b7a:	071b      	lsls	r3, r3, #28
 8029b7c:	d501      	bpl.n	8029b82 <_fputs_r+0x2e>
 8029b7e:	6923      	ldr	r3, [r4, #16]
 8029b80:	bb73      	cbnz	r3, 8029be0 <_fputs_r+0x8c>
 8029b82:	4621      	mov	r1, r4
 8029b84:	4630      	mov	r0, r6
 8029b86:	f000 f8dd 	bl	8029d44 <__swsetup_r>
 8029b8a:	b348      	cbz	r0, 8029be0 <_fputs_r+0x8c>
 8029b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029b8e:	07da      	lsls	r2, r3, #31
 8029b90:	d402      	bmi.n	8029b98 <_fputs_r+0x44>
 8029b92:	89a3      	ldrh	r3, [r4, #12]
 8029b94:	059b      	lsls	r3, r3, #22
 8029b96:	d529      	bpl.n	8029bec <_fputs_r+0x98>
 8029b98:	f04f 30ff 	mov.w	r0, #4294967295
 8029b9c:	e018      	b.n	8029bd0 <_fputs_r+0x7c>
 8029b9e:	68a3      	ldr	r3, [r4, #8]
 8029ba0:	3b01      	subs	r3, #1
 8029ba2:	2b00      	cmp	r3, #0
 8029ba4:	60a3      	str	r3, [r4, #8]
 8029ba6:	da04      	bge.n	8029bb2 <_fputs_r+0x5e>
 8029ba8:	69a2      	ldr	r2, [r4, #24]
 8029baa:	4293      	cmp	r3, r2
 8029bac:	db11      	blt.n	8029bd2 <_fputs_r+0x7e>
 8029bae:	290a      	cmp	r1, #10
 8029bb0:	d00f      	beq.n	8029bd2 <_fputs_r+0x7e>
 8029bb2:	6823      	ldr	r3, [r4, #0]
 8029bb4:	1c5a      	adds	r2, r3, #1
 8029bb6:	6022      	str	r2, [r4, #0]
 8029bb8:	7019      	strb	r1, [r3, #0]
 8029bba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8029bbe:	2900      	cmp	r1, #0
 8029bc0:	d1ed      	bne.n	8029b9e <_fputs_r+0x4a>
 8029bc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029bc4:	07d8      	lsls	r0, r3, #31
 8029bc6:	d402      	bmi.n	8029bce <_fputs_r+0x7a>
 8029bc8:	89a3      	ldrh	r3, [r4, #12]
 8029bca:	0599      	lsls	r1, r3, #22
 8029bcc:	d50a      	bpl.n	8029be4 <_fputs_r+0x90>
 8029bce:	2000      	movs	r0, #0
 8029bd0:	bd70      	pop	{r4, r5, r6, pc}
 8029bd2:	4622      	mov	r2, r4
 8029bd4:	4630      	mov	r0, r6
 8029bd6:	f000 f876 	bl	8029cc6 <__swbuf_r>
 8029bda:	3001      	adds	r0, #1
 8029bdc:	d1ed      	bne.n	8029bba <_fputs_r+0x66>
 8029bde:	e7d5      	b.n	8029b8c <_fputs_r+0x38>
 8029be0:	3d01      	subs	r5, #1
 8029be2:	e7ea      	b.n	8029bba <_fputs_r+0x66>
 8029be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029be6:	f000 f9e3 	bl	8029fb0 <__retarget_lock_release_recursive>
 8029bea:	e7f0      	b.n	8029bce <_fputs_r+0x7a>
 8029bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029bee:	f000 f9df 	bl	8029fb0 <__retarget_lock_release_recursive>
 8029bf2:	e7d1      	b.n	8029b98 <_fputs_r+0x44>

08029bf4 <fputs>:
 8029bf4:	4b02      	ldr	r3, [pc, #8]	@ (8029c00 <fputs+0xc>)
 8029bf6:	460a      	mov	r2, r1
 8029bf8:	4601      	mov	r1, r0
 8029bfa:	6818      	ldr	r0, [r3, #0]
 8029bfc:	f7ff bfaa 	b.w	8029b54 <_fputs_r>
 8029c00:	240000e8 	.word	0x240000e8

08029c04 <_fwalk_sglue>:
 8029c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029c08:	4607      	mov	r7, r0
 8029c0a:	4688      	mov	r8, r1
 8029c0c:	4614      	mov	r4, r2
 8029c0e:	2600      	movs	r6, #0
 8029c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029c14:	f1b9 0901 	subs.w	r9, r9, #1
 8029c18:	d505      	bpl.n	8029c26 <_fwalk_sglue+0x22>
 8029c1a:	6824      	ldr	r4, [r4, #0]
 8029c1c:	2c00      	cmp	r4, #0
 8029c1e:	d1f7      	bne.n	8029c10 <_fwalk_sglue+0xc>
 8029c20:	4630      	mov	r0, r6
 8029c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029c26:	89ab      	ldrh	r3, [r5, #12]
 8029c28:	2b01      	cmp	r3, #1
 8029c2a:	d907      	bls.n	8029c3c <_fwalk_sglue+0x38>
 8029c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029c30:	3301      	adds	r3, #1
 8029c32:	d003      	beq.n	8029c3c <_fwalk_sglue+0x38>
 8029c34:	4629      	mov	r1, r5
 8029c36:	4638      	mov	r0, r7
 8029c38:	47c0      	blx	r8
 8029c3a:	4306      	orrs	r6, r0
 8029c3c:	3568      	adds	r5, #104	@ 0x68
 8029c3e:	e7e9      	b.n	8029c14 <_fwalk_sglue+0x10>

08029c40 <__sread>:
 8029c40:	b510      	push	{r4, lr}
 8029c42:	460c      	mov	r4, r1
 8029c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c48:	f000 f93e 	bl	8029ec8 <_read_r>
 8029c4c:	2800      	cmp	r0, #0
 8029c4e:	bfab      	itete	ge
 8029c50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8029c52:	89a3      	ldrhlt	r3, [r4, #12]
 8029c54:	181b      	addge	r3, r3, r0
 8029c56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8029c5a:	bfac      	ite	ge
 8029c5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8029c5e:	81a3      	strhlt	r3, [r4, #12]
 8029c60:	bd10      	pop	{r4, pc}

08029c62 <__swrite>:
 8029c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029c66:	461f      	mov	r7, r3
 8029c68:	898b      	ldrh	r3, [r1, #12]
 8029c6a:	05db      	lsls	r3, r3, #23
 8029c6c:	4605      	mov	r5, r0
 8029c6e:	460c      	mov	r4, r1
 8029c70:	4616      	mov	r6, r2
 8029c72:	d505      	bpl.n	8029c80 <__swrite+0x1e>
 8029c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c78:	2302      	movs	r3, #2
 8029c7a:	2200      	movs	r2, #0
 8029c7c:	f000 f912 	bl	8029ea4 <_lseek_r>
 8029c80:	89a3      	ldrh	r3, [r4, #12]
 8029c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8029c8a:	81a3      	strh	r3, [r4, #12]
 8029c8c:	4632      	mov	r2, r6
 8029c8e:	463b      	mov	r3, r7
 8029c90:	4628      	mov	r0, r5
 8029c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029c96:	f000 b94d 	b.w	8029f34 <_write_r>

08029c9a <__sseek>:
 8029c9a:	b510      	push	{r4, lr}
 8029c9c:	460c      	mov	r4, r1
 8029c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029ca2:	f000 f8ff 	bl	8029ea4 <_lseek_r>
 8029ca6:	1c43      	adds	r3, r0, #1
 8029ca8:	89a3      	ldrh	r3, [r4, #12]
 8029caa:	bf15      	itete	ne
 8029cac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8029cae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029cb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8029cb6:	81a3      	strheq	r3, [r4, #12]
 8029cb8:	bf18      	it	ne
 8029cba:	81a3      	strhne	r3, [r4, #12]
 8029cbc:	bd10      	pop	{r4, pc}

08029cbe <__sclose>:
 8029cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029cc2:	f000 b8df 	b.w	8029e84 <_close_r>

08029cc6 <__swbuf_r>:
 8029cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029cc8:	460e      	mov	r6, r1
 8029cca:	4614      	mov	r4, r2
 8029ccc:	4605      	mov	r5, r0
 8029cce:	b118      	cbz	r0, 8029cd8 <__swbuf_r+0x12>
 8029cd0:	6a03      	ldr	r3, [r0, #32]
 8029cd2:	b90b      	cbnz	r3, 8029cd8 <__swbuf_r+0x12>
 8029cd4:	f7ff ff14 	bl	8029b00 <__sinit>
 8029cd8:	69a3      	ldr	r3, [r4, #24]
 8029cda:	60a3      	str	r3, [r4, #8]
 8029cdc:	89a3      	ldrh	r3, [r4, #12]
 8029cde:	071a      	lsls	r2, r3, #28
 8029ce0:	d501      	bpl.n	8029ce6 <__swbuf_r+0x20>
 8029ce2:	6923      	ldr	r3, [r4, #16]
 8029ce4:	b943      	cbnz	r3, 8029cf8 <__swbuf_r+0x32>
 8029ce6:	4621      	mov	r1, r4
 8029ce8:	4628      	mov	r0, r5
 8029cea:	f000 f82b 	bl	8029d44 <__swsetup_r>
 8029cee:	b118      	cbz	r0, 8029cf8 <__swbuf_r+0x32>
 8029cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8029cf4:	4638      	mov	r0, r7
 8029cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029cf8:	6823      	ldr	r3, [r4, #0]
 8029cfa:	6922      	ldr	r2, [r4, #16]
 8029cfc:	1a98      	subs	r0, r3, r2
 8029cfe:	6963      	ldr	r3, [r4, #20]
 8029d00:	b2f6      	uxtb	r6, r6
 8029d02:	4283      	cmp	r3, r0
 8029d04:	4637      	mov	r7, r6
 8029d06:	dc05      	bgt.n	8029d14 <__swbuf_r+0x4e>
 8029d08:	4621      	mov	r1, r4
 8029d0a:	4628      	mov	r0, r5
 8029d0c:	f7ff fe30 	bl	8029970 <_fflush_r>
 8029d10:	2800      	cmp	r0, #0
 8029d12:	d1ed      	bne.n	8029cf0 <__swbuf_r+0x2a>
 8029d14:	68a3      	ldr	r3, [r4, #8]
 8029d16:	3b01      	subs	r3, #1
 8029d18:	60a3      	str	r3, [r4, #8]
 8029d1a:	6823      	ldr	r3, [r4, #0]
 8029d1c:	1c5a      	adds	r2, r3, #1
 8029d1e:	6022      	str	r2, [r4, #0]
 8029d20:	701e      	strb	r6, [r3, #0]
 8029d22:	6962      	ldr	r2, [r4, #20]
 8029d24:	1c43      	adds	r3, r0, #1
 8029d26:	429a      	cmp	r2, r3
 8029d28:	d004      	beq.n	8029d34 <__swbuf_r+0x6e>
 8029d2a:	89a3      	ldrh	r3, [r4, #12]
 8029d2c:	07db      	lsls	r3, r3, #31
 8029d2e:	d5e1      	bpl.n	8029cf4 <__swbuf_r+0x2e>
 8029d30:	2e0a      	cmp	r6, #10
 8029d32:	d1df      	bne.n	8029cf4 <__swbuf_r+0x2e>
 8029d34:	4621      	mov	r1, r4
 8029d36:	4628      	mov	r0, r5
 8029d38:	f7ff fe1a 	bl	8029970 <_fflush_r>
 8029d3c:	2800      	cmp	r0, #0
 8029d3e:	d0d9      	beq.n	8029cf4 <__swbuf_r+0x2e>
 8029d40:	e7d6      	b.n	8029cf0 <__swbuf_r+0x2a>
	...

08029d44 <__swsetup_r>:
 8029d44:	b538      	push	{r3, r4, r5, lr}
 8029d46:	4b29      	ldr	r3, [pc, #164]	@ (8029dec <__swsetup_r+0xa8>)
 8029d48:	4605      	mov	r5, r0
 8029d4a:	6818      	ldr	r0, [r3, #0]
 8029d4c:	460c      	mov	r4, r1
 8029d4e:	b118      	cbz	r0, 8029d58 <__swsetup_r+0x14>
 8029d50:	6a03      	ldr	r3, [r0, #32]
 8029d52:	b90b      	cbnz	r3, 8029d58 <__swsetup_r+0x14>
 8029d54:	f7ff fed4 	bl	8029b00 <__sinit>
 8029d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029d5c:	0719      	lsls	r1, r3, #28
 8029d5e:	d422      	bmi.n	8029da6 <__swsetup_r+0x62>
 8029d60:	06da      	lsls	r2, r3, #27
 8029d62:	d407      	bmi.n	8029d74 <__swsetup_r+0x30>
 8029d64:	2209      	movs	r2, #9
 8029d66:	602a      	str	r2, [r5, #0]
 8029d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029d6c:	81a3      	strh	r3, [r4, #12]
 8029d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8029d72:	e033      	b.n	8029ddc <__swsetup_r+0x98>
 8029d74:	0758      	lsls	r0, r3, #29
 8029d76:	d512      	bpl.n	8029d9e <__swsetup_r+0x5a>
 8029d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029d7a:	b141      	cbz	r1, 8029d8e <__swsetup_r+0x4a>
 8029d7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029d80:	4299      	cmp	r1, r3
 8029d82:	d002      	beq.n	8029d8a <__swsetup_r+0x46>
 8029d84:	4628      	mov	r0, r5
 8029d86:	f000 f97f 	bl	802a088 <_free_r>
 8029d8a:	2300      	movs	r3, #0
 8029d8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8029d8e:	89a3      	ldrh	r3, [r4, #12]
 8029d90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029d94:	81a3      	strh	r3, [r4, #12]
 8029d96:	2300      	movs	r3, #0
 8029d98:	6063      	str	r3, [r4, #4]
 8029d9a:	6923      	ldr	r3, [r4, #16]
 8029d9c:	6023      	str	r3, [r4, #0]
 8029d9e:	89a3      	ldrh	r3, [r4, #12]
 8029da0:	f043 0308 	orr.w	r3, r3, #8
 8029da4:	81a3      	strh	r3, [r4, #12]
 8029da6:	6923      	ldr	r3, [r4, #16]
 8029da8:	b94b      	cbnz	r3, 8029dbe <__swsetup_r+0x7a>
 8029daa:	89a3      	ldrh	r3, [r4, #12]
 8029dac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029db4:	d003      	beq.n	8029dbe <__swsetup_r+0x7a>
 8029db6:	4621      	mov	r1, r4
 8029db8:	4628      	mov	r0, r5
 8029dba:	f000 fca5 	bl	802a708 <__smakebuf_r>
 8029dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029dc2:	f013 0201 	ands.w	r2, r3, #1
 8029dc6:	d00a      	beq.n	8029dde <__swsetup_r+0x9a>
 8029dc8:	2200      	movs	r2, #0
 8029dca:	60a2      	str	r2, [r4, #8]
 8029dcc:	6962      	ldr	r2, [r4, #20]
 8029dce:	4252      	negs	r2, r2
 8029dd0:	61a2      	str	r2, [r4, #24]
 8029dd2:	6922      	ldr	r2, [r4, #16]
 8029dd4:	b942      	cbnz	r2, 8029de8 <__swsetup_r+0xa4>
 8029dd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8029dda:	d1c5      	bne.n	8029d68 <__swsetup_r+0x24>
 8029ddc:	bd38      	pop	{r3, r4, r5, pc}
 8029dde:	0799      	lsls	r1, r3, #30
 8029de0:	bf58      	it	pl
 8029de2:	6962      	ldrpl	r2, [r4, #20]
 8029de4:	60a2      	str	r2, [r4, #8]
 8029de6:	e7f4      	b.n	8029dd2 <__swsetup_r+0x8e>
 8029de8:	2000      	movs	r0, #0
 8029dea:	e7f7      	b.n	8029ddc <__swsetup_r+0x98>
 8029dec:	240000e8 	.word	0x240000e8

08029df0 <memset>:
 8029df0:	4402      	add	r2, r0
 8029df2:	4603      	mov	r3, r0
 8029df4:	4293      	cmp	r3, r2
 8029df6:	d100      	bne.n	8029dfa <memset+0xa>
 8029df8:	4770      	bx	lr
 8029dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8029dfe:	e7f9      	b.n	8029df4 <memset+0x4>

08029e00 <strncmp>:
 8029e00:	b510      	push	{r4, lr}
 8029e02:	b16a      	cbz	r2, 8029e20 <strncmp+0x20>
 8029e04:	3901      	subs	r1, #1
 8029e06:	1884      	adds	r4, r0, r2
 8029e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029e0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8029e10:	429a      	cmp	r2, r3
 8029e12:	d103      	bne.n	8029e1c <strncmp+0x1c>
 8029e14:	42a0      	cmp	r0, r4
 8029e16:	d001      	beq.n	8029e1c <strncmp+0x1c>
 8029e18:	2a00      	cmp	r2, #0
 8029e1a:	d1f5      	bne.n	8029e08 <strncmp+0x8>
 8029e1c:	1ad0      	subs	r0, r2, r3
 8029e1e:	bd10      	pop	{r4, pc}
 8029e20:	4610      	mov	r0, r2
 8029e22:	e7fc      	b.n	8029e1e <strncmp+0x1e>

08029e24 <_raise_r>:
 8029e24:	291f      	cmp	r1, #31
 8029e26:	b538      	push	{r3, r4, r5, lr}
 8029e28:	4605      	mov	r5, r0
 8029e2a:	460c      	mov	r4, r1
 8029e2c:	d904      	bls.n	8029e38 <_raise_r+0x14>
 8029e2e:	2316      	movs	r3, #22
 8029e30:	6003      	str	r3, [r0, #0]
 8029e32:	f04f 30ff 	mov.w	r0, #4294967295
 8029e36:	bd38      	pop	{r3, r4, r5, pc}
 8029e38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8029e3a:	b112      	cbz	r2, 8029e42 <_raise_r+0x1e>
 8029e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029e40:	b94b      	cbnz	r3, 8029e56 <_raise_r+0x32>
 8029e42:	4628      	mov	r0, r5
 8029e44:	f000 f864 	bl	8029f10 <_getpid_r>
 8029e48:	4622      	mov	r2, r4
 8029e4a:	4601      	mov	r1, r0
 8029e4c:	4628      	mov	r0, r5
 8029e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029e52:	f000 b84b 	b.w	8029eec <_kill_r>
 8029e56:	2b01      	cmp	r3, #1
 8029e58:	d00a      	beq.n	8029e70 <_raise_r+0x4c>
 8029e5a:	1c59      	adds	r1, r3, #1
 8029e5c:	d103      	bne.n	8029e66 <_raise_r+0x42>
 8029e5e:	2316      	movs	r3, #22
 8029e60:	6003      	str	r3, [r0, #0]
 8029e62:	2001      	movs	r0, #1
 8029e64:	e7e7      	b.n	8029e36 <_raise_r+0x12>
 8029e66:	2100      	movs	r1, #0
 8029e68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8029e6c:	4620      	mov	r0, r4
 8029e6e:	4798      	blx	r3
 8029e70:	2000      	movs	r0, #0
 8029e72:	e7e0      	b.n	8029e36 <_raise_r+0x12>

08029e74 <raise>:
 8029e74:	4b02      	ldr	r3, [pc, #8]	@ (8029e80 <raise+0xc>)
 8029e76:	4601      	mov	r1, r0
 8029e78:	6818      	ldr	r0, [r3, #0]
 8029e7a:	f7ff bfd3 	b.w	8029e24 <_raise_r>
 8029e7e:	bf00      	nop
 8029e80:	240000e8 	.word	0x240000e8

08029e84 <_close_r>:
 8029e84:	b538      	push	{r3, r4, r5, lr}
 8029e86:	4d06      	ldr	r5, [pc, #24]	@ (8029ea0 <_close_r+0x1c>)
 8029e88:	2300      	movs	r3, #0
 8029e8a:	4604      	mov	r4, r0
 8029e8c:	4608      	mov	r0, r1
 8029e8e:	602b      	str	r3, [r5, #0]
 8029e90:	f7d7 fe28 	bl	8001ae4 <_close>
 8029e94:	1c43      	adds	r3, r0, #1
 8029e96:	d102      	bne.n	8029e9e <_close_r+0x1a>
 8029e98:	682b      	ldr	r3, [r5, #0]
 8029e9a:	b103      	cbz	r3, 8029e9e <_close_r+0x1a>
 8029e9c:	6023      	str	r3, [r4, #0]
 8029e9e:	bd38      	pop	{r3, r4, r5, pc}
 8029ea0:	24029134 	.word	0x24029134

08029ea4 <_lseek_r>:
 8029ea4:	b538      	push	{r3, r4, r5, lr}
 8029ea6:	4d07      	ldr	r5, [pc, #28]	@ (8029ec4 <_lseek_r+0x20>)
 8029ea8:	4604      	mov	r4, r0
 8029eaa:	4608      	mov	r0, r1
 8029eac:	4611      	mov	r1, r2
 8029eae:	2200      	movs	r2, #0
 8029eb0:	602a      	str	r2, [r5, #0]
 8029eb2:	461a      	mov	r2, r3
 8029eb4:	f7d7 fe20 	bl	8001af8 <_lseek>
 8029eb8:	1c43      	adds	r3, r0, #1
 8029eba:	d102      	bne.n	8029ec2 <_lseek_r+0x1e>
 8029ebc:	682b      	ldr	r3, [r5, #0]
 8029ebe:	b103      	cbz	r3, 8029ec2 <_lseek_r+0x1e>
 8029ec0:	6023      	str	r3, [r4, #0]
 8029ec2:	bd38      	pop	{r3, r4, r5, pc}
 8029ec4:	24029134 	.word	0x24029134

08029ec8 <_read_r>:
 8029ec8:	b538      	push	{r3, r4, r5, lr}
 8029eca:	4d07      	ldr	r5, [pc, #28]	@ (8029ee8 <_read_r+0x20>)
 8029ecc:	4604      	mov	r4, r0
 8029ece:	4608      	mov	r0, r1
 8029ed0:	4611      	mov	r1, r2
 8029ed2:	2200      	movs	r2, #0
 8029ed4:	602a      	str	r2, [r5, #0]
 8029ed6:	461a      	mov	r2, r3
 8029ed8:	f7d7 fde8 	bl	8001aac <_read>
 8029edc:	1c43      	adds	r3, r0, #1
 8029ede:	d102      	bne.n	8029ee6 <_read_r+0x1e>
 8029ee0:	682b      	ldr	r3, [r5, #0]
 8029ee2:	b103      	cbz	r3, 8029ee6 <_read_r+0x1e>
 8029ee4:	6023      	str	r3, [r4, #0]
 8029ee6:	bd38      	pop	{r3, r4, r5, pc}
 8029ee8:	24029134 	.word	0x24029134

08029eec <_kill_r>:
 8029eec:	b538      	push	{r3, r4, r5, lr}
 8029eee:	4d07      	ldr	r5, [pc, #28]	@ (8029f0c <_kill_r+0x20>)
 8029ef0:	2300      	movs	r3, #0
 8029ef2:	4604      	mov	r4, r0
 8029ef4:	4608      	mov	r0, r1
 8029ef6:	4611      	mov	r1, r2
 8029ef8:	602b      	str	r3, [r5, #0]
 8029efa:	f7d7 fdc9 	bl	8001a90 <_kill>
 8029efe:	1c43      	adds	r3, r0, #1
 8029f00:	d102      	bne.n	8029f08 <_kill_r+0x1c>
 8029f02:	682b      	ldr	r3, [r5, #0]
 8029f04:	b103      	cbz	r3, 8029f08 <_kill_r+0x1c>
 8029f06:	6023      	str	r3, [r4, #0]
 8029f08:	bd38      	pop	{r3, r4, r5, pc}
 8029f0a:	bf00      	nop
 8029f0c:	24029134 	.word	0x24029134

08029f10 <_getpid_r>:
 8029f10:	f7d7 bdbc 	b.w	8001a8c <_getpid>

08029f14 <_sbrk_r>:
 8029f14:	b538      	push	{r3, r4, r5, lr}
 8029f16:	4d06      	ldr	r5, [pc, #24]	@ (8029f30 <_sbrk_r+0x1c>)
 8029f18:	2300      	movs	r3, #0
 8029f1a:	4604      	mov	r4, r0
 8029f1c:	4608      	mov	r0, r1
 8029f1e:	602b      	str	r3, [r5, #0]
 8029f20:	f7d7 fdec 	bl	8001afc <_sbrk>
 8029f24:	1c43      	adds	r3, r0, #1
 8029f26:	d102      	bne.n	8029f2e <_sbrk_r+0x1a>
 8029f28:	682b      	ldr	r3, [r5, #0]
 8029f2a:	b103      	cbz	r3, 8029f2e <_sbrk_r+0x1a>
 8029f2c:	6023      	str	r3, [r4, #0]
 8029f2e:	bd38      	pop	{r3, r4, r5, pc}
 8029f30:	24029134 	.word	0x24029134

08029f34 <_write_r>:
 8029f34:	b538      	push	{r3, r4, r5, lr}
 8029f36:	4d07      	ldr	r5, [pc, #28]	@ (8029f54 <_write_r+0x20>)
 8029f38:	4604      	mov	r4, r0
 8029f3a:	4608      	mov	r0, r1
 8029f3c:	4611      	mov	r1, r2
 8029f3e:	2200      	movs	r2, #0
 8029f40:	602a      	str	r2, [r5, #0]
 8029f42:	461a      	mov	r2, r3
 8029f44:	f7d7 fdc0 	bl	8001ac8 <_write>
 8029f48:	1c43      	adds	r3, r0, #1
 8029f4a:	d102      	bne.n	8029f52 <_write_r+0x1e>
 8029f4c:	682b      	ldr	r3, [r5, #0]
 8029f4e:	b103      	cbz	r3, 8029f52 <_write_r+0x1e>
 8029f50:	6023      	str	r3, [r4, #0]
 8029f52:	bd38      	pop	{r3, r4, r5, pc}
 8029f54:	24029134 	.word	0x24029134

08029f58 <__errno>:
 8029f58:	4b01      	ldr	r3, [pc, #4]	@ (8029f60 <__errno+0x8>)
 8029f5a:	6818      	ldr	r0, [r3, #0]
 8029f5c:	4770      	bx	lr
 8029f5e:	bf00      	nop
 8029f60:	240000e8 	.word	0x240000e8

08029f64 <__libc_init_array>:
 8029f64:	b570      	push	{r4, r5, r6, lr}
 8029f66:	4d0d      	ldr	r5, [pc, #52]	@ (8029f9c <__libc_init_array+0x38>)
 8029f68:	4c0d      	ldr	r4, [pc, #52]	@ (8029fa0 <__libc_init_array+0x3c>)
 8029f6a:	1b64      	subs	r4, r4, r5
 8029f6c:	10a4      	asrs	r4, r4, #2
 8029f6e:	2600      	movs	r6, #0
 8029f70:	42a6      	cmp	r6, r4
 8029f72:	d109      	bne.n	8029f88 <__libc_init_array+0x24>
 8029f74:	4d0b      	ldr	r5, [pc, #44]	@ (8029fa4 <__libc_init_array+0x40>)
 8029f76:	4c0c      	ldr	r4, [pc, #48]	@ (8029fa8 <__libc_init_array+0x44>)
 8029f78:	f000 fc24 	bl	802a7c4 <_init>
 8029f7c:	1b64      	subs	r4, r4, r5
 8029f7e:	10a4      	asrs	r4, r4, #2
 8029f80:	2600      	movs	r6, #0
 8029f82:	42a6      	cmp	r6, r4
 8029f84:	d105      	bne.n	8029f92 <__libc_init_array+0x2e>
 8029f86:	bd70      	pop	{r4, r5, r6, pc}
 8029f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8029f8c:	4798      	blx	r3
 8029f8e:	3601      	adds	r6, #1
 8029f90:	e7ee      	b.n	8029f70 <__libc_init_array+0xc>
 8029f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8029f96:	4798      	blx	r3
 8029f98:	3601      	adds	r6, #1
 8029f9a:	e7f2      	b.n	8029f82 <__libc_init_array+0x1e>
 8029f9c:	08049ddc 	.word	0x08049ddc
 8029fa0:	08049ddc 	.word	0x08049ddc
 8029fa4:	08049ddc 	.word	0x08049ddc
 8029fa8:	08049df8 	.word	0x08049df8

08029fac <__retarget_lock_init_recursive>:
 8029fac:	4770      	bx	lr

08029fae <__retarget_lock_acquire_recursive>:
 8029fae:	4770      	bx	lr

08029fb0 <__retarget_lock_release_recursive>:
 8029fb0:	4770      	bx	lr

08029fb2 <memcpy>:
 8029fb2:	440a      	add	r2, r1
 8029fb4:	4291      	cmp	r1, r2
 8029fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8029fba:	d100      	bne.n	8029fbe <memcpy+0xc>
 8029fbc:	4770      	bx	lr
 8029fbe:	b510      	push	{r4, lr}
 8029fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029fc8:	4291      	cmp	r1, r2
 8029fca:	d1f9      	bne.n	8029fc0 <memcpy+0xe>
 8029fcc:	bd10      	pop	{r4, pc}
	...

08029fd0 <__register_exitproc>:
 8029fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029fd4:	4d27      	ldr	r5, [pc, #156]	@ (802a074 <__register_exitproc+0xa4>)
 8029fd6:	4607      	mov	r7, r0
 8029fd8:	6828      	ldr	r0, [r5, #0]
 8029fda:	4691      	mov	r9, r2
 8029fdc:	460e      	mov	r6, r1
 8029fde:	4698      	mov	r8, r3
 8029fe0:	f7ff ffe5 	bl	8029fae <__retarget_lock_acquire_recursive>
 8029fe4:	4a24      	ldr	r2, [pc, #144]	@ (802a078 <__register_exitproc+0xa8>)
 8029fe6:	6814      	ldr	r4, [r2, #0]
 8029fe8:	b93c      	cbnz	r4, 8029ffa <__register_exitproc+0x2a>
 8029fea:	4b24      	ldr	r3, [pc, #144]	@ (802a07c <__register_exitproc+0xac>)
 8029fec:	6013      	str	r3, [r2, #0]
 8029fee:	4a24      	ldr	r2, [pc, #144]	@ (802a080 <__register_exitproc+0xb0>)
 8029ff0:	b112      	cbz	r2, 8029ff8 <__register_exitproc+0x28>
 8029ff2:	6812      	ldr	r2, [r2, #0]
 8029ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8029ff8:	4c20      	ldr	r4, [pc, #128]	@ (802a07c <__register_exitproc+0xac>)
 8029ffa:	6863      	ldr	r3, [r4, #4]
 8029ffc:	2b1f      	cmp	r3, #31
 8029ffe:	dd06      	ble.n	802a00e <__register_exitproc+0x3e>
 802a000:	6828      	ldr	r0, [r5, #0]
 802a002:	f7ff ffd5 	bl	8029fb0 <__retarget_lock_release_recursive>
 802a006:	f04f 30ff 	mov.w	r0, #4294967295
 802a00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a00e:	b32f      	cbz	r7, 802a05c <__register_exitproc+0x8c>
 802a010:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802a014:	b968      	cbnz	r0, 802a032 <__register_exitproc+0x62>
 802a016:	4b1b      	ldr	r3, [pc, #108]	@ (802a084 <__register_exitproc+0xb4>)
 802a018:	2b00      	cmp	r3, #0
 802a01a:	d0f1      	beq.n	802a000 <__register_exitproc+0x30>
 802a01c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802a020:	f7ff fb56 	bl	80296d0 <malloc>
 802a024:	2800      	cmp	r0, #0
 802a026:	d0eb      	beq.n	802a000 <__register_exitproc+0x30>
 802a028:	2300      	movs	r3, #0
 802a02a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802a02e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802a032:	6863      	ldr	r3, [r4, #4]
 802a034:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a038:	2201      	movs	r2, #1
 802a03a:	409a      	lsls	r2, r3
 802a03c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a040:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802a044:	4313      	orrs	r3, r2
 802a046:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802a04a:	2f02      	cmp	r7, #2
 802a04c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802a050:	bf02      	ittt	eq
 802a052:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802a056:	4313      	orreq	r3, r2
 802a058:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802a05c:	6863      	ldr	r3, [r4, #4]
 802a05e:	6828      	ldr	r0, [r5, #0]
 802a060:	1c5a      	adds	r2, r3, #1
 802a062:	3302      	adds	r3, #2
 802a064:	6062      	str	r2, [r4, #4]
 802a066:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802a06a:	f7ff ffa1 	bl	8029fb0 <__retarget_lock_release_recursive>
 802a06e:	2000      	movs	r0, #0
 802a070:	e7cb      	b.n	802a00a <__register_exitproc+0x3a>
 802a072:	bf00      	nop
 802a074:	24000138 	.word	0x24000138
 802a078:	240291c8 	.word	0x240291c8
 802a07c:	2402913c 	.word	0x2402913c
 802a080:	0802e9d4 	.word	0x0802e9d4
 802a084:	080296d1 	.word	0x080296d1

0802a088 <_free_r>:
 802a088:	b538      	push	{r3, r4, r5, lr}
 802a08a:	4605      	mov	r5, r0
 802a08c:	2900      	cmp	r1, #0
 802a08e:	d041      	beq.n	802a114 <_free_r+0x8c>
 802a090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a094:	1f0c      	subs	r4, r1, #4
 802a096:	2b00      	cmp	r3, #0
 802a098:	bfb8      	it	lt
 802a09a:	18e4      	addlt	r4, r4, r3
 802a09c:	f7ff fbca 	bl	8029834 <__malloc_lock>
 802a0a0:	4a1d      	ldr	r2, [pc, #116]	@ (802a118 <_free_r+0x90>)
 802a0a2:	6813      	ldr	r3, [r2, #0]
 802a0a4:	b933      	cbnz	r3, 802a0b4 <_free_r+0x2c>
 802a0a6:	6063      	str	r3, [r4, #4]
 802a0a8:	6014      	str	r4, [r2, #0]
 802a0aa:	4628      	mov	r0, r5
 802a0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a0b0:	f7ff bbc6 	b.w	8029840 <__malloc_unlock>
 802a0b4:	42a3      	cmp	r3, r4
 802a0b6:	d908      	bls.n	802a0ca <_free_r+0x42>
 802a0b8:	6820      	ldr	r0, [r4, #0]
 802a0ba:	1821      	adds	r1, r4, r0
 802a0bc:	428b      	cmp	r3, r1
 802a0be:	bf01      	itttt	eq
 802a0c0:	6819      	ldreq	r1, [r3, #0]
 802a0c2:	685b      	ldreq	r3, [r3, #4]
 802a0c4:	1809      	addeq	r1, r1, r0
 802a0c6:	6021      	streq	r1, [r4, #0]
 802a0c8:	e7ed      	b.n	802a0a6 <_free_r+0x1e>
 802a0ca:	461a      	mov	r2, r3
 802a0cc:	685b      	ldr	r3, [r3, #4]
 802a0ce:	b10b      	cbz	r3, 802a0d4 <_free_r+0x4c>
 802a0d0:	42a3      	cmp	r3, r4
 802a0d2:	d9fa      	bls.n	802a0ca <_free_r+0x42>
 802a0d4:	6811      	ldr	r1, [r2, #0]
 802a0d6:	1850      	adds	r0, r2, r1
 802a0d8:	42a0      	cmp	r0, r4
 802a0da:	d10b      	bne.n	802a0f4 <_free_r+0x6c>
 802a0dc:	6820      	ldr	r0, [r4, #0]
 802a0de:	4401      	add	r1, r0
 802a0e0:	1850      	adds	r0, r2, r1
 802a0e2:	4283      	cmp	r3, r0
 802a0e4:	6011      	str	r1, [r2, #0]
 802a0e6:	d1e0      	bne.n	802a0aa <_free_r+0x22>
 802a0e8:	6818      	ldr	r0, [r3, #0]
 802a0ea:	685b      	ldr	r3, [r3, #4]
 802a0ec:	6053      	str	r3, [r2, #4]
 802a0ee:	4408      	add	r0, r1
 802a0f0:	6010      	str	r0, [r2, #0]
 802a0f2:	e7da      	b.n	802a0aa <_free_r+0x22>
 802a0f4:	d902      	bls.n	802a0fc <_free_r+0x74>
 802a0f6:	230c      	movs	r3, #12
 802a0f8:	602b      	str	r3, [r5, #0]
 802a0fa:	e7d6      	b.n	802a0aa <_free_r+0x22>
 802a0fc:	6820      	ldr	r0, [r4, #0]
 802a0fe:	1821      	adds	r1, r4, r0
 802a100:	428b      	cmp	r3, r1
 802a102:	bf04      	itt	eq
 802a104:	6819      	ldreq	r1, [r3, #0]
 802a106:	685b      	ldreq	r3, [r3, #4]
 802a108:	6063      	str	r3, [r4, #4]
 802a10a:	bf04      	itt	eq
 802a10c:	1809      	addeq	r1, r1, r0
 802a10e:	6021      	streq	r1, [r4, #0]
 802a110:	6054      	str	r4, [r2, #4]
 802a112:	e7ca      	b.n	802a0aa <_free_r+0x22>
 802a114:	bd38      	pop	{r3, r4, r5, pc}
 802a116:	bf00      	nop
 802a118:	24028ff4 	.word	0x24028ff4

0802a11c <__sfputc_r>:
 802a11c:	6893      	ldr	r3, [r2, #8]
 802a11e:	3b01      	subs	r3, #1
 802a120:	2b00      	cmp	r3, #0
 802a122:	b410      	push	{r4}
 802a124:	6093      	str	r3, [r2, #8]
 802a126:	da08      	bge.n	802a13a <__sfputc_r+0x1e>
 802a128:	6994      	ldr	r4, [r2, #24]
 802a12a:	42a3      	cmp	r3, r4
 802a12c:	db01      	blt.n	802a132 <__sfputc_r+0x16>
 802a12e:	290a      	cmp	r1, #10
 802a130:	d103      	bne.n	802a13a <__sfputc_r+0x1e>
 802a132:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a136:	f7ff bdc6 	b.w	8029cc6 <__swbuf_r>
 802a13a:	6813      	ldr	r3, [r2, #0]
 802a13c:	1c58      	adds	r0, r3, #1
 802a13e:	6010      	str	r0, [r2, #0]
 802a140:	7019      	strb	r1, [r3, #0]
 802a142:	4608      	mov	r0, r1
 802a144:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a148:	4770      	bx	lr

0802a14a <__sfputs_r>:
 802a14a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a14c:	4606      	mov	r6, r0
 802a14e:	460f      	mov	r7, r1
 802a150:	4614      	mov	r4, r2
 802a152:	18d5      	adds	r5, r2, r3
 802a154:	42ac      	cmp	r4, r5
 802a156:	d101      	bne.n	802a15c <__sfputs_r+0x12>
 802a158:	2000      	movs	r0, #0
 802a15a:	e007      	b.n	802a16c <__sfputs_r+0x22>
 802a15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a160:	463a      	mov	r2, r7
 802a162:	4630      	mov	r0, r6
 802a164:	f7ff ffda 	bl	802a11c <__sfputc_r>
 802a168:	1c43      	adds	r3, r0, #1
 802a16a:	d1f3      	bne.n	802a154 <__sfputs_r+0xa>
 802a16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a170 <_vfiprintf_r>:
 802a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a174:	460d      	mov	r5, r1
 802a176:	b09d      	sub	sp, #116	@ 0x74
 802a178:	4614      	mov	r4, r2
 802a17a:	4698      	mov	r8, r3
 802a17c:	4606      	mov	r6, r0
 802a17e:	b118      	cbz	r0, 802a188 <_vfiprintf_r+0x18>
 802a180:	6a03      	ldr	r3, [r0, #32]
 802a182:	b90b      	cbnz	r3, 802a188 <_vfiprintf_r+0x18>
 802a184:	f7ff fcbc 	bl	8029b00 <__sinit>
 802a188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a18a:	07d9      	lsls	r1, r3, #31
 802a18c:	d405      	bmi.n	802a19a <_vfiprintf_r+0x2a>
 802a18e:	89ab      	ldrh	r3, [r5, #12]
 802a190:	059a      	lsls	r2, r3, #22
 802a192:	d402      	bmi.n	802a19a <_vfiprintf_r+0x2a>
 802a194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a196:	f7ff ff0a 	bl	8029fae <__retarget_lock_acquire_recursive>
 802a19a:	89ab      	ldrh	r3, [r5, #12]
 802a19c:	071b      	lsls	r3, r3, #28
 802a19e:	d501      	bpl.n	802a1a4 <_vfiprintf_r+0x34>
 802a1a0:	692b      	ldr	r3, [r5, #16]
 802a1a2:	b99b      	cbnz	r3, 802a1cc <_vfiprintf_r+0x5c>
 802a1a4:	4629      	mov	r1, r5
 802a1a6:	4630      	mov	r0, r6
 802a1a8:	f7ff fdcc 	bl	8029d44 <__swsetup_r>
 802a1ac:	b170      	cbz	r0, 802a1cc <_vfiprintf_r+0x5c>
 802a1ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a1b0:	07dc      	lsls	r4, r3, #31
 802a1b2:	d504      	bpl.n	802a1be <_vfiprintf_r+0x4e>
 802a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 802a1b8:	b01d      	add	sp, #116	@ 0x74
 802a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a1be:	89ab      	ldrh	r3, [r5, #12]
 802a1c0:	0598      	lsls	r0, r3, #22
 802a1c2:	d4f7      	bmi.n	802a1b4 <_vfiprintf_r+0x44>
 802a1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a1c6:	f7ff fef3 	bl	8029fb0 <__retarget_lock_release_recursive>
 802a1ca:	e7f3      	b.n	802a1b4 <_vfiprintf_r+0x44>
 802a1cc:	2300      	movs	r3, #0
 802a1ce:	9309      	str	r3, [sp, #36]	@ 0x24
 802a1d0:	2320      	movs	r3, #32
 802a1d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802a1d6:	f8cd 800c 	str.w	r8, [sp, #12]
 802a1da:	2330      	movs	r3, #48	@ 0x30
 802a1dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802a38c <_vfiprintf_r+0x21c>
 802a1e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802a1e4:	f04f 0901 	mov.w	r9, #1
 802a1e8:	4623      	mov	r3, r4
 802a1ea:	469a      	mov	sl, r3
 802a1ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a1f0:	b10a      	cbz	r2, 802a1f6 <_vfiprintf_r+0x86>
 802a1f2:	2a25      	cmp	r2, #37	@ 0x25
 802a1f4:	d1f9      	bne.n	802a1ea <_vfiprintf_r+0x7a>
 802a1f6:	ebba 0b04 	subs.w	fp, sl, r4
 802a1fa:	d00b      	beq.n	802a214 <_vfiprintf_r+0xa4>
 802a1fc:	465b      	mov	r3, fp
 802a1fe:	4622      	mov	r2, r4
 802a200:	4629      	mov	r1, r5
 802a202:	4630      	mov	r0, r6
 802a204:	f7ff ffa1 	bl	802a14a <__sfputs_r>
 802a208:	3001      	adds	r0, #1
 802a20a:	f000 80a7 	beq.w	802a35c <_vfiprintf_r+0x1ec>
 802a20e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a210:	445a      	add	r2, fp
 802a212:	9209      	str	r2, [sp, #36]	@ 0x24
 802a214:	f89a 3000 	ldrb.w	r3, [sl]
 802a218:	2b00      	cmp	r3, #0
 802a21a:	f000 809f 	beq.w	802a35c <_vfiprintf_r+0x1ec>
 802a21e:	2300      	movs	r3, #0
 802a220:	f04f 32ff 	mov.w	r2, #4294967295
 802a224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a228:	f10a 0a01 	add.w	sl, sl, #1
 802a22c:	9304      	str	r3, [sp, #16]
 802a22e:	9307      	str	r3, [sp, #28]
 802a230:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802a234:	931a      	str	r3, [sp, #104]	@ 0x68
 802a236:	4654      	mov	r4, sl
 802a238:	2205      	movs	r2, #5
 802a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a23e:	4853      	ldr	r0, [pc, #332]	@ (802a38c <_vfiprintf_r+0x21c>)
 802a240:	f7d6 f84e 	bl	80002e0 <memchr>
 802a244:	9a04      	ldr	r2, [sp, #16]
 802a246:	b9d8      	cbnz	r0, 802a280 <_vfiprintf_r+0x110>
 802a248:	06d1      	lsls	r1, r2, #27
 802a24a:	bf44      	itt	mi
 802a24c:	2320      	movmi	r3, #32
 802a24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a252:	0713      	lsls	r3, r2, #28
 802a254:	bf44      	itt	mi
 802a256:	232b      	movmi	r3, #43	@ 0x2b
 802a258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a25c:	f89a 3000 	ldrb.w	r3, [sl]
 802a260:	2b2a      	cmp	r3, #42	@ 0x2a
 802a262:	d015      	beq.n	802a290 <_vfiprintf_r+0x120>
 802a264:	9a07      	ldr	r2, [sp, #28]
 802a266:	4654      	mov	r4, sl
 802a268:	2000      	movs	r0, #0
 802a26a:	f04f 0c0a 	mov.w	ip, #10
 802a26e:	4621      	mov	r1, r4
 802a270:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a274:	3b30      	subs	r3, #48	@ 0x30
 802a276:	2b09      	cmp	r3, #9
 802a278:	d94b      	bls.n	802a312 <_vfiprintf_r+0x1a2>
 802a27a:	b1b0      	cbz	r0, 802a2aa <_vfiprintf_r+0x13a>
 802a27c:	9207      	str	r2, [sp, #28]
 802a27e:	e014      	b.n	802a2aa <_vfiprintf_r+0x13a>
 802a280:	eba0 0308 	sub.w	r3, r0, r8
 802a284:	fa09 f303 	lsl.w	r3, r9, r3
 802a288:	4313      	orrs	r3, r2
 802a28a:	9304      	str	r3, [sp, #16]
 802a28c:	46a2      	mov	sl, r4
 802a28e:	e7d2      	b.n	802a236 <_vfiprintf_r+0xc6>
 802a290:	9b03      	ldr	r3, [sp, #12]
 802a292:	1d19      	adds	r1, r3, #4
 802a294:	681b      	ldr	r3, [r3, #0]
 802a296:	9103      	str	r1, [sp, #12]
 802a298:	2b00      	cmp	r3, #0
 802a29a:	bfbb      	ittet	lt
 802a29c:	425b      	neglt	r3, r3
 802a29e:	f042 0202 	orrlt.w	r2, r2, #2
 802a2a2:	9307      	strge	r3, [sp, #28]
 802a2a4:	9307      	strlt	r3, [sp, #28]
 802a2a6:	bfb8      	it	lt
 802a2a8:	9204      	strlt	r2, [sp, #16]
 802a2aa:	7823      	ldrb	r3, [r4, #0]
 802a2ac:	2b2e      	cmp	r3, #46	@ 0x2e
 802a2ae:	d10a      	bne.n	802a2c6 <_vfiprintf_r+0x156>
 802a2b0:	7863      	ldrb	r3, [r4, #1]
 802a2b2:	2b2a      	cmp	r3, #42	@ 0x2a
 802a2b4:	d132      	bne.n	802a31c <_vfiprintf_r+0x1ac>
 802a2b6:	9b03      	ldr	r3, [sp, #12]
 802a2b8:	1d1a      	adds	r2, r3, #4
 802a2ba:	681b      	ldr	r3, [r3, #0]
 802a2bc:	9203      	str	r2, [sp, #12]
 802a2be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802a2c2:	3402      	adds	r4, #2
 802a2c4:	9305      	str	r3, [sp, #20]
 802a2c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802a39c <_vfiprintf_r+0x22c>
 802a2ca:	7821      	ldrb	r1, [r4, #0]
 802a2cc:	2203      	movs	r2, #3
 802a2ce:	4650      	mov	r0, sl
 802a2d0:	f7d6 f806 	bl	80002e0 <memchr>
 802a2d4:	b138      	cbz	r0, 802a2e6 <_vfiprintf_r+0x176>
 802a2d6:	9b04      	ldr	r3, [sp, #16]
 802a2d8:	eba0 000a 	sub.w	r0, r0, sl
 802a2dc:	2240      	movs	r2, #64	@ 0x40
 802a2de:	4082      	lsls	r2, r0
 802a2e0:	4313      	orrs	r3, r2
 802a2e2:	3401      	adds	r4, #1
 802a2e4:	9304      	str	r3, [sp, #16]
 802a2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a2ea:	4829      	ldr	r0, [pc, #164]	@ (802a390 <_vfiprintf_r+0x220>)
 802a2ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802a2f0:	2206      	movs	r2, #6
 802a2f2:	f7d5 fff5 	bl	80002e0 <memchr>
 802a2f6:	2800      	cmp	r0, #0
 802a2f8:	d03f      	beq.n	802a37a <_vfiprintf_r+0x20a>
 802a2fa:	4b26      	ldr	r3, [pc, #152]	@ (802a394 <_vfiprintf_r+0x224>)
 802a2fc:	bb1b      	cbnz	r3, 802a346 <_vfiprintf_r+0x1d6>
 802a2fe:	9b03      	ldr	r3, [sp, #12]
 802a300:	3307      	adds	r3, #7
 802a302:	f023 0307 	bic.w	r3, r3, #7
 802a306:	3308      	adds	r3, #8
 802a308:	9303      	str	r3, [sp, #12]
 802a30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a30c:	443b      	add	r3, r7
 802a30e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a310:	e76a      	b.n	802a1e8 <_vfiprintf_r+0x78>
 802a312:	fb0c 3202 	mla	r2, ip, r2, r3
 802a316:	460c      	mov	r4, r1
 802a318:	2001      	movs	r0, #1
 802a31a:	e7a8      	b.n	802a26e <_vfiprintf_r+0xfe>
 802a31c:	2300      	movs	r3, #0
 802a31e:	3401      	adds	r4, #1
 802a320:	9305      	str	r3, [sp, #20]
 802a322:	4619      	mov	r1, r3
 802a324:	f04f 0c0a 	mov.w	ip, #10
 802a328:	4620      	mov	r0, r4
 802a32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a32e:	3a30      	subs	r2, #48	@ 0x30
 802a330:	2a09      	cmp	r2, #9
 802a332:	d903      	bls.n	802a33c <_vfiprintf_r+0x1cc>
 802a334:	2b00      	cmp	r3, #0
 802a336:	d0c6      	beq.n	802a2c6 <_vfiprintf_r+0x156>
 802a338:	9105      	str	r1, [sp, #20]
 802a33a:	e7c4      	b.n	802a2c6 <_vfiprintf_r+0x156>
 802a33c:	fb0c 2101 	mla	r1, ip, r1, r2
 802a340:	4604      	mov	r4, r0
 802a342:	2301      	movs	r3, #1
 802a344:	e7f0      	b.n	802a328 <_vfiprintf_r+0x1b8>
 802a346:	ab03      	add	r3, sp, #12
 802a348:	9300      	str	r3, [sp, #0]
 802a34a:	462a      	mov	r2, r5
 802a34c:	4b12      	ldr	r3, [pc, #72]	@ (802a398 <_vfiprintf_r+0x228>)
 802a34e:	a904      	add	r1, sp, #16
 802a350:	4630      	mov	r0, r6
 802a352:	f3af 8000 	nop.w
 802a356:	4607      	mov	r7, r0
 802a358:	1c78      	adds	r0, r7, #1
 802a35a:	d1d6      	bne.n	802a30a <_vfiprintf_r+0x19a>
 802a35c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802a35e:	07d9      	lsls	r1, r3, #31
 802a360:	d405      	bmi.n	802a36e <_vfiprintf_r+0x1fe>
 802a362:	89ab      	ldrh	r3, [r5, #12]
 802a364:	059a      	lsls	r2, r3, #22
 802a366:	d402      	bmi.n	802a36e <_vfiprintf_r+0x1fe>
 802a368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802a36a:	f7ff fe21 	bl	8029fb0 <__retarget_lock_release_recursive>
 802a36e:	89ab      	ldrh	r3, [r5, #12]
 802a370:	065b      	lsls	r3, r3, #25
 802a372:	f53f af1f 	bmi.w	802a1b4 <_vfiprintf_r+0x44>
 802a376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a378:	e71e      	b.n	802a1b8 <_vfiprintf_r+0x48>
 802a37a:	ab03      	add	r3, sp, #12
 802a37c:	9300      	str	r3, [sp, #0]
 802a37e:	462a      	mov	r2, r5
 802a380:	4b05      	ldr	r3, [pc, #20]	@ (802a398 <_vfiprintf_r+0x228>)
 802a382:	a904      	add	r1, sp, #16
 802a384:	4630      	mov	r0, r6
 802a386:	f000 f879 	bl	802a47c <_printf_i>
 802a38a:	e7e4      	b.n	802a356 <_vfiprintf_r+0x1e6>
 802a38c:	0802e9d8 	.word	0x0802e9d8
 802a390:	0802e9e2 	.word	0x0802e9e2
 802a394:	00000000 	.word	0x00000000
 802a398:	0802a14b 	.word	0x0802a14b
 802a39c:	0802e9de 	.word	0x0802e9de

0802a3a0 <_printf_common>:
 802a3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a3a4:	4616      	mov	r6, r2
 802a3a6:	4698      	mov	r8, r3
 802a3a8:	688a      	ldr	r2, [r1, #8]
 802a3aa:	690b      	ldr	r3, [r1, #16]
 802a3ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802a3b0:	4293      	cmp	r3, r2
 802a3b2:	bfb8      	it	lt
 802a3b4:	4613      	movlt	r3, r2
 802a3b6:	6033      	str	r3, [r6, #0]
 802a3b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802a3bc:	4607      	mov	r7, r0
 802a3be:	460c      	mov	r4, r1
 802a3c0:	b10a      	cbz	r2, 802a3c6 <_printf_common+0x26>
 802a3c2:	3301      	adds	r3, #1
 802a3c4:	6033      	str	r3, [r6, #0]
 802a3c6:	6823      	ldr	r3, [r4, #0]
 802a3c8:	0699      	lsls	r1, r3, #26
 802a3ca:	bf42      	ittt	mi
 802a3cc:	6833      	ldrmi	r3, [r6, #0]
 802a3ce:	3302      	addmi	r3, #2
 802a3d0:	6033      	strmi	r3, [r6, #0]
 802a3d2:	6825      	ldr	r5, [r4, #0]
 802a3d4:	f015 0506 	ands.w	r5, r5, #6
 802a3d8:	d106      	bne.n	802a3e8 <_printf_common+0x48>
 802a3da:	f104 0a19 	add.w	sl, r4, #25
 802a3de:	68e3      	ldr	r3, [r4, #12]
 802a3e0:	6832      	ldr	r2, [r6, #0]
 802a3e2:	1a9b      	subs	r3, r3, r2
 802a3e4:	42ab      	cmp	r3, r5
 802a3e6:	dc26      	bgt.n	802a436 <_printf_common+0x96>
 802a3e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802a3ec:	6822      	ldr	r2, [r4, #0]
 802a3ee:	3b00      	subs	r3, #0
 802a3f0:	bf18      	it	ne
 802a3f2:	2301      	movne	r3, #1
 802a3f4:	0692      	lsls	r2, r2, #26
 802a3f6:	d42b      	bmi.n	802a450 <_printf_common+0xb0>
 802a3f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802a3fc:	4641      	mov	r1, r8
 802a3fe:	4638      	mov	r0, r7
 802a400:	47c8      	blx	r9
 802a402:	3001      	adds	r0, #1
 802a404:	d01e      	beq.n	802a444 <_printf_common+0xa4>
 802a406:	6823      	ldr	r3, [r4, #0]
 802a408:	6922      	ldr	r2, [r4, #16]
 802a40a:	f003 0306 	and.w	r3, r3, #6
 802a40e:	2b04      	cmp	r3, #4
 802a410:	bf02      	ittt	eq
 802a412:	68e5      	ldreq	r5, [r4, #12]
 802a414:	6833      	ldreq	r3, [r6, #0]
 802a416:	1aed      	subeq	r5, r5, r3
 802a418:	68a3      	ldr	r3, [r4, #8]
 802a41a:	bf0c      	ite	eq
 802a41c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a420:	2500      	movne	r5, #0
 802a422:	4293      	cmp	r3, r2
 802a424:	bfc4      	itt	gt
 802a426:	1a9b      	subgt	r3, r3, r2
 802a428:	18ed      	addgt	r5, r5, r3
 802a42a:	2600      	movs	r6, #0
 802a42c:	341a      	adds	r4, #26
 802a42e:	42b5      	cmp	r5, r6
 802a430:	d11a      	bne.n	802a468 <_printf_common+0xc8>
 802a432:	2000      	movs	r0, #0
 802a434:	e008      	b.n	802a448 <_printf_common+0xa8>
 802a436:	2301      	movs	r3, #1
 802a438:	4652      	mov	r2, sl
 802a43a:	4641      	mov	r1, r8
 802a43c:	4638      	mov	r0, r7
 802a43e:	47c8      	blx	r9
 802a440:	3001      	adds	r0, #1
 802a442:	d103      	bne.n	802a44c <_printf_common+0xac>
 802a444:	f04f 30ff 	mov.w	r0, #4294967295
 802a448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a44c:	3501      	adds	r5, #1
 802a44e:	e7c6      	b.n	802a3de <_printf_common+0x3e>
 802a450:	18e1      	adds	r1, r4, r3
 802a452:	1c5a      	adds	r2, r3, #1
 802a454:	2030      	movs	r0, #48	@ 0x30
 802a456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802a45a:	4422      	add	r2, r4
 802a45c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802a460:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802a464:	3302      	adds	r3, #2
 802a466:	e7c7      	b.n	802a3f8 <_printf_common+0x58>
 802a468:	2301      	movs	r3, #1
 802a46a:	4622      	mov	r2, r4
 802a46c:	4641      	mov	r1, r8
 802a46e:	4638      	mov	r0, r7
 802a470:	47c8      	blx	r9
 802a472:	3001      	adds	r0, #1
 802a474:	d0e6      	beq.n	802a444 <_printf_common+0xa4>
 802a476:	3601      	adds	r6, #1
 802a478:	e7d9      	b.n	802a42e <_printf_common+0x8e>
	...

0802a47c <_printf_i>:
 802a47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a480:	7e0f      	ldrb	r7, [r1, #24]
 802a482:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802a484:	2f78      	cmp	r7, #120	@ 0x78
 802a486:	4691      	mov	r9, r2
 802a488:	4680      	mov	r8, r0
 802a48a:	460c      	mov	r4, r1
 802a48c:	469a      	mov	sl, r3
 802a48e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802a492:	d807      	bhi.n	802a4a4 <_printf_i+0x28>
 802a494:	2f62      	cmp	r7, #98	@ 0x62
 802a496:	d80a      	bhi.n	802a4ae <_printf_i+0x32>
 802a498:	2f00      	cmp	r7, #0
 802a49a:	f000 80d2 	beq.w	802a642 <_printf_i+0x1c6>
 802a49e:	2f58      	cmp	r7, #88	@ 0x58
 802a4a0:	f000 80b9 	beq.w	802a616 <_printf_i+0x19a>
 802a4a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802a4a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802a4ac:	e03a      	b.n	802a524 <_printf_i+0xa8>
 802a4ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802a4b2:	2b15      	cmp	r3, #21
 802a4b4:	d8f6      	bhi.n	802a4a4 <_printf_i+0x28>
 802a4b6:	a101      	add	r1, pc, #4	@ (adr r1, 802a4bc <_printf_i+0x40>)
 802a4b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a4bc:	0802a515 	.word	0x0802a515
 802a4c0:	0802a529 	.word	0x0802a529
 802a4c4:	0802a4a5 	.word	0x0802a4a5
 802a4c8:	0802a4a5 	.word	0x0802a4a5
 802a4cc:	0802a4a5 	.word	0x0802a4a5
 802a4d0:	0802a4a5 	.word	0x0802a4a5
 802a4d4:	0802a529 	.word	0x0802a529
 802a4d8:	0802a4a5 	.word	0x0802a4a5
 802a4dc:	0802a4a5 	.word	0x0802a4a5
 802a4e0:	0802a4a5 	.word	0x0802a4a5
 802a4e4:	0802a4a5 	.word	0x0802a4a5
 802a4e8:	0802a629 	.word	0x0802a629
 802a4ec:	0802a553 	.word	0x0802a553
 802a4f0:	0802a5e3 	.word	0x0802a5e3
 802a4f4:	0802a4a5 	.word	0x0802a4a5
 802a4f8:	0802a4a5 	.word	0x0802a4a5
 802a4fc:	0802a64b 	.word	0x0802a64b
 802a500:	0802a4a5 	.word	0x0802a4a5
 802a504:	0802a553 	.word	0x0802a553
 802a508:	0802a4a5 	.word	0x0802a4a5
 802a50c:	0802a4a5 	.word	0x0802a4a5
 802a510:	0802a5eb 	.word	0x0802a5eb
 802a514:	6833      	ldr	r3, [r6, #0]
 802a516:	1d1a      	adds	r2, r3, #4
 802a518:	681b      	ldr	r3, [r3, #0]
 802a51a:	6032      	str	r2, [r6, #0]
 802a51c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802a520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802a524:	2301      	movs	r3, #1
 802a526:	e09d      	b.n	802a664 <_printf_i+0x1e8>
 802a528:	6833      	ldr	r3, [r6, #0]
 802a52a:	6820      	ldr	r0, [r4, #0]
 802a52c:	1d19      	adds	r1, r3, #4
 802a52e:	6031      	str	r1, [r6, #0]
 802a530:	0606      	lsls	r6, r0, #24
 802a532:	d501      	bpl.n	802a538 <_printf_i+0xbc>
 802a534:	681d      	ldr	r5, [r3, #0]
 802a536:	e003      	b.n	802a540 <_printf_i+0xc4>
 802a538:	0645      	lsls	r5, r0, #25
 802a53a:	d5fb      	bpl.n	802a534 <_printf_i+0xb8>
 802a53c:	f9b3 5000 	ldrsh.w	r5, [r3]
 802a540:	2d00      	cmp	r5, #0
 802a542:	da03      	bge.n	802a54c <_printf_i+0xd0>
 802a544:	232d      	movs	r3, #45	@ 0x2d
 802a546:	426d      	negs	r5, r5
 802a548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a54c:	4859      	ldr	r0, [pc, #356]	@ (802a6b4 <_printf_i+0x238>)
 802a54e:	230a      	movs	r3, #10
 802a550:	e011      	b.n	802a576 <_printf_i+0xfa>
 802a552:	6821      	ldr	r1, [r4, #0]
 802a554:	6833      	ldr	r3, [r6, #0]
 802a556:	0608      	lsls	r0, r1, #24
 802a558:	f853 5b04 	ldr.w	r5, [r3], #4
 802a55c:	d402      	bmi.n	802a564 <_printf_i+0xe8>
 802a55e:	0649      	lsls	r1, r1, #25
 802a560:	bf48      	it	mi
 802a562:	b2ad      	uxthmi	r5, r5
 802a564:	2f6f      	cmp	r7, #111	@ 0x6f
 802a566:	4853      	ldr	r0, [pc, #332]	@ (802a6b4 <_printf_i+0x238>)
 802a568:	6033      	str	r3, [r6, #0]
 802a56a:	bf14      	ite	ne
 802a56c:	230a      	movne	r3, #10
 802a56e:	2308      	moveq	r3, #8
 802a570:	2100      	movs	r1, #0
 802a572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802a576:	6866      	ldr	r6, [r4, #4]
 802a578:	60a6      	str	r6, [r4, #8]
 802a57a:	2e00      	cmp	r6, #0
 802a57c:	bfa2      	ittt	ge
 802a57e:	6821      	ldrge	r1, [r4, #0]
 802a580:	f021 0104 	bicge.w	r1, r1, #4
 802a584:	6021      	strge	r1, [r4, #0]
 802a586:	b90d      	cbnz	r5, 802a58c <_printf_i+0x110>
 802a588:	2e00      	cmp	r6, #0
 802a58a:	d04b      	beq.n	802a624 <_printf_i+0x1a8>
 802a58c:	4616      	mov	r6, r2
 802a58e:	fbb5 f1f3 	udiv	r1, r5, r3
 802a592:	fb03 5711 	mls	r7, r3, r1, r5
 802a596:	5dc7      	ldrb	r7, [r0, r7]
 802a598:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a59c:	462f      	mov	r7, r5
 802a59e:	42bb      	cmp	r3, r7
 802a5a0:	460d      	mov	r5, r1
 802a5a2:	d9f4      	bls.n	802a58e <_printf_i+0x112>
 802a5a4:	2b08      	cmp	r3, #8
 802a5a6:	d10b      	bne.n	802a5c0 <_printf_i+0x144>
 802a5a8:	6823      	ldr	r3, [r4, #0]
 802a5aa:	07df      	lsls	r7, r3, #31
 802a5ac:	d508      	bpl.n	802a5c0 <_printf_i+0x144>
 802a5ae:	6923      	ldr	r3, [r4, #16]
 802a5b0:	6861      	ldr	r1, [r4, #4]
 802a5b2:	4299      	cmp	r1, r3
 802a5b4:	bfde      	ittt	le
 802a5b6:	2330      	movle	r3, #48	@ 0x30
 802a5b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a5bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a5c0:	1b92      	subs	r2, r2, r6
 802a5c2:	6122      	str	r2, [r4, #16]
 802a5c4:	f8cd a000 	str.w	sl, [sp]
 802a5c8:	464b      	mov	r3, r9
 802a5ca:	aa03      	add	r2, sp, #12
 802a5cc:	4621      	mov	r1, r4
 802a5ce:	4640      	mov	r0, r8
 802a5d0:	f7ff fee6 	bl	802a3a0 <_printf_common>
 802a5d4:	3001      	adds	r0, #1
 802a5d6:	d14a      	bne.n	802a66e <_printf_i+0x1f2>
 802a5d8:	f04f 30ff 	mov.w	r0, #4294967295
 802a5dc:	b004      	add	sp, #16
 802a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a5e2:	6823      	ldr	r3, [r4, #0]
 802a5e4:	f043 0320 	orr.w	r3, r3, #32
 802a5e8:	6023      	str	r3, [r4, #0]
 802a5ea:	4833      	ldr	r0, [pc, #204]	@ (802a6b8 <_printf_i+0x23c>)
 802a5ec:	2778      	movs	r7, #120	@ 0x78
 802a5ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802a5f2:	6823      	ldr	r3, [r4, #0]
 802a5f4:	6831      	ldr	r1, [r6, #0]
 802a5f6:	061f      	lsls	r7, r3, #24
 802a5f8:	f851 5b04 	ldr.w	r5, [r1], #4
 802a5fc:	d402      	bmi.n	802a604 <_printf_i+0x188>
 802a5fe:	065f      	lsls	r7, r3, #25
 802a600:	bf48      	it	mi
 802a602:	b2ad      	uxthmi	r5, r5
 802a604:	6031      	str	r1, [r6, #0]
 802a606:	07d9      	lsls	r1, r3, #31
 802a608:	bf44      	itt	mi
 802a60a:	f043 0320 	orrmi.w	r3, r3, #32
 802a60e:	6023      	strmi	r3, [r4, #0]
 802a610:	b11d      	cbz	r5, 802a61a <_printf_i+0x19e>
 802a612:	2310      	movs	r3, #16
 802a614:	e7ac      	b.n	802a570 <_printf_i+0xf4>
 802a616:	4827      	ldr	r0, [pc, #156]	@ (802a6b4 <_printf_i+0x238>)
 802a618:	e7e9      	b.n	802a5ee <_printf_i+0x172>
 802a61a:	6823      	ldr	r3, [r4, #0]
 802a61c:	f023 0320 	bic.w	r3, r3, #32
 802a620:	6023      	str	r3, [r4, #0]
 802a622:	e7f6      	b.n	802a612 <_printf_i+0x196>
 802a624:	4616      	mov	r6, r2
 802a626:	e7bd      	b.n	802a5a4 <_printf_i+0x128>
 802a628:	6833      	ldr	r3, [r6, #0]
 802a62a:	6825      	ldr	r5, [r4, #0]
 802a62c:	6961      	ldr	r1, [r4, #20]
 802a62e:	1d18      	adds	r0, r3, #4
 802a630:	6030      	str	r0, [r6, #0]
 802a632:	062e      	lsls	r6, r5, #24
 802a634:	681b      	ldr	r3, [r3, #0]
 802a636:	d501      	bpl.n	802a63c <_printf_i+0x1c0>
 802a638:	6019      	str	r1, [r3, #0]
 802a63a:	e002      	b.n	802a642 <_printf_i+0x1c6>
 802a63c:	0668      	lsls	r0, r5, #25
 802a63e:	d5fb      	bpl.n	802a638 <_printf_i+0x1bc>
 802a640:	8019      	strh	r1, [r3, #0]
 802a642:	2300      	movs	r3, #0
 802a644:	6123      	str	r3, [r4, #16]
 802a646:	4616      	mov	r6, r2
 802a648:	e7bc      	b.n	802a5c4 <_printf_i+0x148>
 802a64a:	6833      	ldr	r3, [r6, #0]
 802a64c:	1d1a      	adds	r2, r3, #4
 802a64e:	6032      	str	r2, [r6, #0]
 802a650:	681e      	ldr	r6, [r3, #0]
 802a652:	6862      	ldr	r2, [r4, #4]
 802a654:	2100      	movs	r1, #0
 802a656:	4630      	mov	r0, r6
 802a658:	f7d5 fe42 	bl	80002e0 <memchr>
 802a65c:	b108      	cbz	r0, 802a662 <_printf_i+0x1e6>
 802a65e:	1b80      	subs	r0, r0, r6
 802a660:	6060      	str	r0, [r4, #4]
 802a662:	6863      	ldr	r3, [r4, #4]
 802a664:	6123      	str	r3, [r4, #16]
 802a666:	2300      	movs	r3, #0
 802a668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a66c:	e7aa      	b.n	802a5c4 <_printf_i+0x148>
 802a66e:	6923      	ldr	r3, [r4, #16]
 802a670:	4632      	mov	r2, r6
 802a672:	4649      	mov	r1, r9
 802a674:	4640      	mov	r0, r8
 802a676:	47d0      	blx	sl
 802a678:	3001      	adds	r0, #1
 802a67a:	d0ad      	beq.n	802a5d8 <_printf_i+0x15c>
 802a67c:	6823      	ldr	r3, [r4, #0]
 802a67e:	079b      	lsls	r3, r3, #30
 802a680:	d413      	bmi.n	802a6aa <_printf_i+0x22e>
 802a682:	68e0      	ldr	r0, [r4, #12]
 802a684:	9b03      	ldr	r3, [sp, #12]
 802a686:	4298      	cmp	r0, r3
 802a688:	bfb8      	it	lt
 802a68a:	4618      	movlt	r0, r3
 802a68c:	e7a6      	b.n	802a5dc <_printf_i+0x160>
 802a68e:	2301      	movs	r3, #1
 802a690:	4632      	mov	r2, r6
 802a692:	4649      	mov	r1, r9
 802a694:	4640      	mov	r0, r8
 802a696:	47d0      	blx	sl
 802a698:	3001      	adds	r0, #1
 802a69a:	d09d      	beq.n	802a5d8 <_printf_i+0x15c>
 802a69c:	3501      	adds	r5, #1
 802a69e:	68e3      	ldr	r3, [r4, #12]
 802a6a0:	9903      	ldr	r1, [sp, #12]
 802a6a2:	1a5b      	subs	r3, r3, r1
 802a6a4:	42ab      	cmp	r3, r5
 802a6a6:	dcf2      	bgt.n	802a68e <_printf_i+0x212>
 802a6a8:	e7eb      	b.n	802a682 <_printf_i+0x206>
 802a6aa:	2500      	movs	r5, #0
 802a6ac:	f104 0619 	add.w	r6, r4, #25
 802a6b0:	e7f5      	b.n	802a69e <_printf_i+0x222>
 802a6b2:	bf00      	nop
 802a6b4:	0802e9e9 	.word	0x0802e9e9
 802a6b8:	0802e9fa 	.word	0x0802e9fa

0802a6bc <__swhatbuf_r>:
 802a6bc:	b570      	push	{r4, r5, r6, lr}
 802a6be:	460c      	mov	r4, r1
 802a6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a6c4:	2900      	cmp	r1, #0
 802a6c6:	b096      	sub	sp, #88	@ 0x58
 802a6c8:	4615      	mov	r5, r2
 802a6ca:	461e      	mov	r6, r3
 802a6cc:	da0d      	bge.n	802a6ea <__swhatbuf_r+0x2e>
 802a6ce:	89a3      	ldrh	r3, [r4, #12]
 802a6d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802a6d4:	f04f 0100 	mov.w	r1, #0
 802a6d8:	bf14      	ite	ne
 802a6da:	2340      	movne	r3, #64	@ 0x40
 802a6dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802a6e0:	2000      	movs	r0, #0
 802a6e2:	6031      	str	r1, [r6, #0]
 802a6e4:	602b      	str	r3, [r5, #0]
 802a6e6:	b016      	add	sp, #88	@ 0x58
 802a6e8:	bd70      	pop	{r4, r5, r6, pc}
 802a6ea:	466a      	mov	r2, sp
 802a6ec:	f000 f848 	bl	802a780 <_fstat_r>
 802a6f0:	2800      	cmp	r0, #0
 802a6f2:	dbec      	blt.n	802a6ce <__swhatbuf_r+0x12>
 802a6f4:	9901      	ldr	r1, [sp, #4]
 802a6f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802a6fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802a6fe:	4259      	negs	r1, r3
 802a700:	4159      	adcs	r1, r3
 802a702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802a706:	e7eb      	b.n	802a6e0 <__swhatbuf_r+0x24>

0802a708 <__smakebuf_r>:
 802a708:	898b      	ldrh	r3, [r1, #12]
 802a70a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a70c:	079d      	lsls	r5, r3, #30
 802a70e:	4606      	mov	r6, r0
 802a710:	460c      	mov	r4, r1
 802a712:	d507      	bpl.n	802a724 <__smakebuf_r+0x1c>
 802a714:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802a718:	6023      	str	r3, [r4, #0]
 802a71a:	6123      	str	r3, [r4, #16]
 802a71c:	2301      	movs	r3, #1
 802a71e:	6163      	str	r3, [r4, #20]
 802a720:	b003      	add	sp, #12
 802a722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a724:	ab01      	add	r3, sp, #4
 802a726:	466a      	mov	r2, sp
 802a728:	f7ff ffc8 	bl	802a6bc <__swhatbuf_r>
 802a72c:	9f00      	ldr	r7, [sp, #0]
 802a72e:	4605      	mov	r5, r0
 802a730:	4639      	mov	r1, r7
 802a732:	4630      	mov	r0, r6
 802a734:	f7fe fffe 	bl	8029734 <_malloc_r>
 802a738:	b948      	cbnz	r0, 802a74e <__smakebuf_r+0x46>
 802a73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a73e:	059a      	lsls	r2, r3, #22
 802a740:	d4ee      	bmi.n	802a720 <__smakebuf_r+0x18>
 802a742:	f023 0303 	bic.w	r3, r3, #3
 802a746:	f043 0302 	orr.w	r3, r3, #2
 802a74a:	81a3      	strh	r3, [r4, #12]
 802a74c:	e7e2      	b.n	802a714 <__smakebuf_r+0xc>
 802a74e:	89a3      	ldrh	r3, [r4, #12]
 802a750:	6020      	str	r0, [r4, #0]
 802a752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a756:	81a3      	strh	r3, [r4, #12]
 802a758:	9b01      	ldr	r3, [sp, #4]
 802a75a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802a75e:	b15b      	cbz	r3, 802a778 <__smakebuf_r+0x70>
 802a760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a764:	4630      	mov	r0, r6
 802a766:	f000 f81d 	bl	802a7a4 <_isatty_r>
 802a76a:	b128      	cbz	r0, 802a778 <__smakebuf_r+0x70>
 802a76c:	89a3      	ldrh	r3, [r4, #12]
 802a76e:	f023 0303 	bic.w	r3, r3, #3
 802a772:	f043 0301 	orr.w	r3, r3, #1
 802a776:	81a3      	strh	r3, [r4, #12]
 802a778:	89a3      	ldrh	r3, [r4, #12]
 802a77a:	431d      	orrs	r5, r3
 802a77c:	81a5      	strh	r5, [r4, #12]
 802a77e:	e7cf      	b.n	802a720 <__smakebuf_r+0x18>

0802a780 <_fstat_r>:
 802a780:	b538      	push	{r3, r4, r5, lr}
 802a782:	4d07      	ldr	r5, [pc, #28]	@ (802a7a0 <_fstat_r+0x20>)
 802a784:	2300      	movs	r3, #0
 802a786:	4604      	mov	r4, r0
 802a788:	4608      	mov	r0, r1
 802a78a:	4611      	mov	r1, r2
 802a78c:	602b      	str	r3, [r5, #0]
 802a78e:	f7d7 f9ac 	bl	8001aea <_fstat>
 802a792:	1c43      	adds	r3, r0, #1
 802a794:	d102      	bne.n	802a79c <_fstat_r+0x1c>
 802a796:	682b      	ldr	r3, [r5, #0]
 802a798:	b103      	cbz	r3, 802a79c <_fstat_r+0x1c>
 802a79a:	6023      	str	r3, [r4, #0]
 802a79c:	bd38      	pop	{r3, r4, r5, pc}
 802a79e:	bf00      	nop
 802a7a0:	24029134 	.word	0x24029134

0802a7a4 <_isatty_r>:
 802a7a4:	b538      	push	{r3, r4, r5, lr}
 802a7a6:	4d06      	ldr	r5, [pc, #24]	@ (802a7c0 <_isatty_r+0x1c>)
 802a7a8:	2300      	movs	r3, #0
 802a7aa:	4604      	mov	r4, r0
 802a7ac:	4608      	mov	r0, r1
 802a7ae:	602b      	str	r3, [r5, #0]
 802a7b0:	f7d7 f9a0 	bl	8001af4 <_isatty>
 802a7b4:	1c43      	adds	r3, r0, #1
 802a7b6:	d102      	bne.n	802a7be <_isatty_r+0x1a>
 802a7b8:	682b      	ldr	r3, [r5, #0]
 802a7ba:	b103      	cbz	r3, 802a7be <_isatty_r+0x1a>
 802a7bc:	6023      	str	r3, [r4, #0]
 802a7be:	bd38      	pop	{r3, r4, r5, pc}
 802a7c0:	24029134 	.word	0x24029134

0802a7c4 <_init>:
 802a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7c6:	bf00      	nop
 802a7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7ca:	bc08      	pop	{r3}
 802a7cc:	469e      	mov	lr, r3
 802a7ce:	4770      	bx	lr

0802a7d0 <_fini>:
 802a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7d2:	bf00      	nop
 802a7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7d6:	bc08      	pop	{r3}
 802a7d8:	469e      	mov	lr, r3
 802a7da:	4770      	bx	lr
